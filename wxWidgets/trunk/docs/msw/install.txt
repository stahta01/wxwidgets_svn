
Installing wxWindows 2.1
------------------------

This is a beta release of wxWindows 2.1 for Microsoft
Windows 95, 98 and NT. This is not a production release,
although a huge number of bugs found in wxWindows 2.0 have been
fixed.

IMPORTANT NOTE: If you experience problems installing, please
re-read this instructions and other related files (release.txt,
todo.txt, bugs.txt etc.) carefully before mailing wxwin-users or
the author. Preferably, try to fix the problem first and
then send a patch to the author. Please report bugs using the
bug report form on the wxWindows web site.

Unarchiving
-----------

A setup program is provided (setup.exe) to automatically copy files to a
directory on your hard disk. Do not install into a path that contains spaces.
The installation program should set the WXWIN environment variable, which
will be activated when your machine is rebooted. The setup
program contains the following:

- All common, generic and MSW-specific wxWindows source;
- samples;
- documentation in Windows Help format;
- makefiles for most Windows compilers, plus BC++ and
  VC++ IDE files;
- JPEG library source;
- Object Graphics Library;
- wxGLCanvas library;
- wxTreeLayout library;
- Tex2RTF source;
- Dialog Editor binary.

Alternatively, you may unarchive the set of .zip files by hand,
where x is the minor version number and y is the release number:

wx2_x_y_gen.zip            Generic source code and samples (required)
wx2_x_y_msw.zip            Windows-specific source code and samples (required)
wx2_x_y_doc.zip            Documentation source code (not required)
wx2_x_y_hlp.zip            WinHelp documentation
wx2_x_y_pdf.zip            Acrobat PDF documentation
wx2_x_y_htm.zip            HTML documentation
wx2_x_y_vc.zip             MS VC++ 5.0 project files
wx2_x_y_cw.zip             Metrowerks CodeWarrior project files
wx2_x_y_bc.zip             BC++ 5 project files
jpeg.zip                   Use this to allow wxImage to read and write JPEG files

Unarchive the required files plus any optional documentation
files into a suitable directory such as c:\wx.

Other add-on packages are available from the wxWindows Web site, such as:

- glcanvas.zip. Use OpenGL in a wxWindows window.
- ogl3.zip. Object Graphics Library: build network diagrams, CASE tools etc.
- tex2rtf3.zip. Tex2RTF: create Windows Help, HTML, and Word RTF files from
  the same document source.

General installation notes
--------------------------

Alter your WXWIN environment variable to point to this directory.
For Cygwin or Mingw32 compilation, make sure WXWIN contains only
forward slashes.

If installing from the CVS server, copy include/wx/msw/setup0.h to
include/wx/msw/setup.h and edit the resulting file to choose the featrues you
would like to compile wxWindows with[out].

Compilation
-----------

The following sections explain how to compile wxWindows with each supported
compiler.

Visual C++ 4.0/5.0/6.0 compilation
----------------------------------

Using project files:

1. Unarchive wx2_x_y_vc.zip, the VC++ 5/6 project makefiles.
2. Open src/wxvc.dsp, set Debug or Release configuration, and
   compile. This will produce src/Debug/wxvc.lib or
   src/Release/wxvc.lib.  The project file src/wxvc_dll.dsp
   will make a DLL version of wxWindow, which will go in
   src/DebugDLL/wxvc.[lib,dll] and src/ReleaseDLL/wxvc.[lib,dll].
3. If you want to use JPEG in your application (such as the image
   sample), open src/jpeg/jpeg.dsp (VC++ 5/6 only) and compile in
   Debug and Release configurations. If you have VC++ 4,
   use makefile.vc, but you may only have one set of object
   files at a time in use (debug or release versions).
4. Open a sample project file, choose a configuration using
   Build | Set Active Configuration..., and compile.
   The project files don't use precompiled headers, to save
   space, but you can switch PCH compiling on for greater speed.

Using makefiles:

1. Make sure your WXWIN variable is set.
2. Change directory to wx\src\msw. Type:

  'nmake -f makefile.vc'

   to make the wxWindows core library with debug information
   (wx\lib\wx_d.lib), or

  'nmake -f makefile.vc FINAL=1'

   to make the wxWindows core library without debug information
   (wx\lib\wx.lib).
3. If you wish to use JPEG in your applications, do the same
   procedure in src\jpeg but add the 'all' target to the
   command line.
4. Change directory to wx\samples and type 'nmake -f makefile.vc'
   to make all the samples. You can also make them individually.

Notes:

  Use the 'clean' target to clean all objects, libraries and
  executables.

  To build the release version using makefiles, add FINAL=1 to your
  nmake invocation, both when building the library and for samples.

  Note that the wxWindows core library allows you to have debug
  and release libraries available simultaneously, by compiling the
  objects in different subdirectories, whereas samples must be
  cleaned and re-made to build a different configuration. This
  may be changed in later versions of wxWindows.

To build the DLL version using makefiles:

1. Change directory to wx\src\msw. Type 'nmake -f makefile.vc dll pch'
   to make both a suitable DLL and import library, and to build a
   suitable precompiled header file for compiling applications.
   The resulting libraries are called:

      wx\lib\wx200.lib(dll) (debug version)
      wx\lib\wx200.lib(dll)   (release version, using FINAL=1)

2. Invoke a sample makefile with 'nmake -f makefile.vc WXUSINGDLL=1'
   (or edit src\makeprog.vc to set WXUSINGDLL to 1 for all
   applications).

Note (1): if you wish to use templates, please edit
include\wx\msw\setup.h and set wxUSE_DEBUG_NEW_ALWAYS to 0.
Without this, the redefinition of 'new' will cause problems in
the headers. Alternatively, #undef new before including template headers.
You will also need to set wxUSE_IOSTREAMH to 0 if you will be
using templates, to avoid the non-template stream files being included
within wxWindows.

Note (2): libraries and applications generated with makefiles and
project files are unlikely to be compatible, so use one method or
the other.

Note (3): VC++ 5's optimization code seems to be broken and can
cause both compile and run-time problems: this can be seen when
deleting an object Dialog Editor, in Release mode with optimizations
on. If in doubt, switch off optimisations, although this will result in much
larger executables. It seems possible that the library can be created with
strong optimization, so long as the application is not strongly
optimized. For example, in wxWindows project, set to 'Minimum
Size'. In Dialog Editor project, set to 'Customize: Favor Small
Code' (and no others). This will then work.

Similarly, in VC++ 4, optimization can cause internal compiler
errors, so edit src\makevc.env and change /O1 to /Od before
trying build a release version of the library.

Note (4): some crash problems can be due to inconsistent compiler
options. If strange/weird/impossible things start to happen please
check (dumping IDE project file as makefile and doing text comparison
if necessary) that the project settings, especially the list of defined
symbols, struct packing, etc. are exactly the same for all items in
the project. After this, delete everything (including PCH) and recompile.

Visual C++ 1.5 compilation (16-bit)
-----------------------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Change directory to wx\src\msw. Type 'nmake -f makefile.dos' to
   make the wxWindows core library.
3. Change directory to a sample, such as wx\samples\minimal, and
   type 'nmake -f makefile.dos'.

Add FINAL=1 to your makefile invocation to build the release
versions of the library and samples.

Use the 'clean' target to clean all objects, libraries and
executables.

Borland C++ 4.5/5.0 compilation
-------------------------------

Compiling using the makefiles:

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form if doing a 16-bit compile.
2. Change directory to wx\src\msw. Type 'make -f makefile.b32' to
   make the wxWindows core library. Ignore the warnings about
   'XXX' not found in library.
3. Change directory to a sample such as minimal, and type
  'make -f makefile.b32'.
4. For release versions, recompile wxWindows and samples using
   'make -f makefile.b32 clean'
   'make -f makefile.b32 FINAL=1'
   for the library and samples.

Note (1): the wxWindows library and (some) samples compile in 16-bit mode
using makefile.bcc, but at present the wxWindows resource system is switched
off in this mode. See issues.txt for details.

Note (2): unfortunately most samples won't link in 16-bit mode,
because the automatic data segment exceeds 64K. The minimal
sample links and runs, however.

Note (3): the wxWindows makefiles assume byte structure alignment. Please
make sure that your own project or makefile settings use the
same alignment, or you could experience mysterious crashes. To
change the alignment, add a suitable option to the $(CFG) target code
in src/msw/makefile.b32.

Note (4): if you get undefined _SQL... symbols at link time,
either install odbc32.lib from the BC++ CD-ROM into your BC++ lib
directory, or set wxUSE_ODBC to 0 in include\wx\msw\setup.h and
recompile wxWindows. The same applies if compiling using the IDE.

Compiling using the IDE files:

1. Load src\bc32.ide (Release settings)
2. Go to Options|Project... and specify the correct BC++ include and lib path for
   your file structure.
3. Press F9 to compile the wxWindows library.
4. Load samples\bc32.ide.
5. Go to Options|Project... and specify the correct BC++ include and lib path for
   your file structure.
6. Press F9 to compile the samples (build each node separately if
   you prefer, by right clicking and choose Build Node).
7. Run each sample: you may need to run from each sample's directory
   since some (notably the wxHTML samples) look for files
   relative to the working directory.

Note that to make the png, xpm, zlib and jpeg libraries (needed for
some samples) you need to compile them with bc32.ide.

The debug version of the wxWindows library is about 37 MB, and the
release version is around 3 MB.

See also the file bc_ide.txt for further instructions and details
of how to create your own project files.

Borland C++Builder compilation
------------------------------

C++Builder compilation is the same as for Borland C++ above.

Tested with C++Builder 1.0 and 3.0. Only makefiles are currently
supplied.

Watcom C++ 10.6/11 compilation
---------------------------

1. Make sure your WXWIN variable is set, and uses the DOS short
   name form.
2. Change directory to wx\src\msw. Type 'wmake -f makefile.wat' to
   make the wxWindows core library.
3. Change directory to wx\samples\minimal and type 'wmake -f makefile.wat'
   to make this sample. Repeat for other samples of interest.

Note (1): setup.h overrides wxUSE_LIBJPEG and sets it to 0, since
imagjpeg.cpp doesn't compile.
Note (2): makewat.env uses the odbc32.lib supplied in wxWindows' lib\watcom
directory. See the notes in that directory.

Metrowerks CodeWarrior compilation
----------------------------------

1. Downloaded and unzip wx2_x_y_cw.zip.
2. Load the make_cw.mcp project in wx\src, and compile.
3. Load the make_cw.mcp project in wx\samples\minimal, and compile.
   Further project files for samples will be available in due
   course.

Note (1): you need CodeWarrior Pro 4 plus the patches to 4.1 from the
Metrowerks Web site.

Note (2): unfortunately these files are not yet up-to-date for the
current release.

Symantec C++ compilation
------------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Edit setup.h and set wxUSE_DRAG_AND_DROP to 0.
3. Change directory to wx\src\msw. Type 'make -f makefile.sc' to
   make the wxWindows core library.
4. Change directory to wx\samples\minimal and type 'make -f makefile.sc'
   to make this sample.

Note: the minimal sample doesn't link properly ('Error: no
start address').
32-bit compilation only (partially) supported at present, using SC++ 6.1.
Some functionality is missing using this compiler (see makefile).
Add -D__WIN95__ if your SC++ has Windows 95 support, and ignore
Step (2). 16-bit compilation is left as an excercise for the user!

Salford C++ compilation
-----------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Edit SALFORDDIR and RESOURCEDIR in src/makesl.env as per
   notes.
3. Change directory to wx\src\msw. Type 'mk32 -f makefile.sl all' to
   make the wxWindows core library.
4. Change directory to wx\samples\minimal and type 'mk32 -f makefile.sl'
   to make this sample.

Unfortunately, Salford C++ seems to have problems with its code generation for
operations on objects, as seen in wxFrame::OnMenuHighlight
(minimal sample) or wxWindow::SetValidator (mdi sample). Also the
the debugging version of the library is 90MB, with samples coming in
at 40MB :-) However, wxWindows at least makes a good test suite for
improving the compiler.

Cygwin b19/b20/Mingw32 compilation
----------------------------------

wxWindows 2 supports Cygwin (formerly GnuWin32) b19, b20, Mingw32, and Mingw32/EGCS.

Thanks are due to Keith Garry Boyce (garp@opustel.com) and Cygnus for making
it all possible.

From wxWindows 2.0 beta 9, both Cygwin and Mingw32 (the minimal
distribution of Cygwin) can be used with the same makefiles.

Here are the steps required:

- Retrieve and install the latest beta of Cygwin, or Mingw32, as per the
  instructions with either of these packages.

- If using Mingw32 (including the EGCS variant), you need some
  extra files to use the wxWindows makefiles. You can find these
  files in ports/mingw32 on the ftp site or CD-ROM, as extra.zip.
  These should be extracted to the Mingw32 directory.
  If you have already have downloaded bison, flex, make, rm, mv
  from elsewhere, you won't need this.

  If using Mingw32 2.8.1, see also see mingw32.txt in this directory
  (docs/msw) about a fix that has to be applied to a Mingw32 header file.

  If using Mingw32 2.95 with wxWindows 2.1 or above, and wish to use OLE, you
  should hand-patch in Mingw32-gcc295.patches (located in the top-level of the
  wxWindows 2 installation).

- Modify the file wx/src/cygnus.bat (or mingw32.bat or mingegcs.bat)
  to set up appropriate variables, if necessary mounting drives.
  Run it before compiling.

- For Cygwin, make sure there's a \tmp directory on your
  Windows drive or bison will crash.

- Edit wx/src/makeg95.env and set the MINGW32 variable at the top of
  the file to either 1 (you have Mingw32) or 0 (you have Cygwin32).
  If using MINGW32, also set the MINGW32VERSION variable
  appropriately.

- Mingw32 may not support winsock.h, so if you have a problem
  here, comment out socket-related files in src/msw/makefile.g95.

- Set your WXWIN variable to where wxWindows is installed.
  *** IMPORTANT: For Cygwin/Mingw32, use forward slashes in the path, not
  backslashes.

- Use the makefile.g95 files for compiling wxWindows and samples,
  e.g.:
  > cd c:\wx\src\msw
  > make -f makefile.g95
  > cd c:\wx\samples\minimal
  > make -f makefile.g95

  Ignore the warning about the default entry point.

- Use the 'strip' command to reduce executable size.

- With Cygnus Cygwin, you can invoke gdb --nw myfile.exe to
  debug an executable. If there are memory leaks, they will be
  flagged when the program quits.

- If using GnuWin32 b18, you will need to copy windres.exe
  from e.g. the Mingw32 distribution, to a directory in your path.

All targets have 'clean' targets to allow removal of object files
and other intermediate compiler files.

Notes:

- See also the Cygwin/Mingw32 on the web site or CD-ROM for
  further information about using wxWindows with these compilers.

- libwx.a is 48 MB or more - but much less if compiled with no
  debug info (-g0) and level 4 optimization (-O4).

- install.exe doesn't have built-in decompression because lzexpand.lib
  isn't available with Cygwin. However, you can use it with external
  decompression utilities.

- There's a bug in Mingw32 headers for some early distributions.

  in include/windows32/defines.h, where it says:

  #define LPSTR_TEXTCALLBACKA (LPSTR)-1L)

  it should say:

  #define LPSTR_TEXTCALLBACKA ((LPSTR)-1L)

  (a missing bracket).

- If there's a problem with the copy command in
  src/msw/makefile.g95, you may need to change the relevant
  section to the following:

  COPY = command /c copy
  $(COMMDIR)/y_tab.c:     $(COMMDIR)/dosyacc.c
      $(COPY) ..\\common\\dosyacc.c ..\\common\\y_tab.c

  $(COMMDIR)/lex_yy.c:    $(COMMDIR)/doslex.c
      $(COPY) ..\\common\\doslex.c ..\\common\\lex_yy.c

References:

 - The GNU-WIN32 site is at
     http://www.cygnus.com/gnu-win32/
 - Mingw32 is available at:
     ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/gcc-2.95/
 - See also http://web.ukonline.co.uk/julian.smart/wxwin/gnuwin32.htm

TWIN32 and gcc on Linux
-----------------------

The wxWindows 2 for Windows port may be compiled using
the TWIN32 emulator package from www.willows.com. However,
TWIN32 is by no means finished so this should be taken as
something to think about for the future, rather than
a tool for writing products with.

Use makefile.twn in much the same way as makefile.g95, as
described above. Not all sample makefiles are supplied yet.

For some reason, I found I had to copy TWIN32's Windows resource
compiler (rc) to the current working directory for it to be found.

General Notes
-------------

- Debugging: under Windows 95, debugging output isn't output in
  the same way that it is under NT or Windows 3.1. Set
  wxUSE_DBWIN32 to 1 if you wish to enable code to output debugging
  info to an external debug monitor, such as Andrew Tucker's DBWIN32.
  You can download DBWIN32 from:

        http://ftp.digital.com/pub/micro/NT/WinSite/programr/dbwin32.zip

  and it's also on the wxWindows CD-ROM under Packages.

- If you are installing wxWindows 2 from CVS, you may find that
  include/wx/msw/setup.h is missing. This is deliberate, to avoid
  developers' different setup.h configurations getting confused.
  Please copy setup0.h to setup.h before compiling.
