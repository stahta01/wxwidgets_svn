/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000
static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_BUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#if PY_VERSION_HEX < 0x01060000
#define PyObject_Del(op) PyMem_DEL((op))
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromString(v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return -1;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return -1;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return -1;
  }
  if (PyDict_SetItemString(dict, name, o))
    return -1;
  Py_DECREF(o);
  return 0;
}
#endif

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_form_ops_t swig_types[1]
#define SWIGTYPE_p_int swig_types[2]
#define SWIGTYPE_p_unsigned_char swig_types[3]
#define SWIGTYPE_p_unsigned_int swig_types[4]
#define SWIGTYPE_p_unsigned_long swig_types[5]
#define SWIGTYPE_p_void swig_types[6]
#define SWIGTYPE_p_wxANIHandler swig_types[7]
#define SWIGTYPE_p_wxAcceleratorTable swig_types[8]
#define SWIGTYPE_p_wxActivateEvent swig_types[9]
#define SWIGTYPE_p_wxArrayString swig_types[10]
#define SWIGTYPE_p_wxBMPHandler swig_types[11]
#define SWIGTYPE_p_wxBitmap swig_types[12]
#define SWIGTYPE_p_wxBitmapDataObject swig_types[13]
#define SWIGTYPE_p_wxBoxSizer swig_types[14]
#define SWIGTYPE_p_wxBusyCursor swig_types[15]
#define SWIGTYPE_p_wxBusyInfo swig_types[16]
#define SWIGTYPE_p_wxCURHandler swig_types[17]
#define SWIGTYPE_p_wxCaret swig_types[18]
#define SWIGTYPE_p_wxChar swig_types[19]
#define SWIGTYPE_p_wxChildFocusEvent swig_types[20]
#define SWIGTYPE_p_wxClipboard swig_types[21]
#define SWIGTYPE_p_wxClipboardLocker swig_types[22]
#define SWIGTYPE_p_wxCloseEvent swig_types[23]
#define SWIGTYPE_p_wxColour swig_types[24]
#define SWIGTYPE_p_wxCommandEvent swig_types[25]
#define SWIGTYPE_p_wxConfig swig_types[26]
#define SWIGTYPE_p_wxConfigBase swig_types[27]
#define SWIGTYPE_p_wxConfigPathChanger swig_types[28]
#define SWIGTYPE_p_wxContextMenuEvent swig_types[29]
#define SWIGTYPE_p_wxControl swig_types[30]
#define SWIGTYPE_p_wxControlWithItems swig_types[31]
#define SWIGTYPE_p_wxCursor swig_types[32]
#define SWIGTYPE_p_wxCustomDataObject swig_types[33]
#define SWIGTYPE_p_wxDC swig_types[34]
#define SWIGTYPE_p_wxDataFormat swig_types[35]
#define SWIGTYPE_p_wxDataObject swig_types[36]
#define SWIGTYPE_p_wxDataObjectComposite swig_types[37]
#define SWIGTYPE_p_wxDataObjectSimple swig_types[38]
#define SWIGTYPE_p_wxDateEvent swig_types[39]
#define SWIGTYPE_p_wxDateSpan swig_types[40]
#define SWIGTYPE_p_wxDateTime swig_types[41]
#define SWIGTYPE_p_wxDateTime__TimeZone swig_types[42]
#define SWIGTYPE_p_wxDisplay swig_types[43]
#define SWIGTYPE_p_wxDisplayChangedEvent swig_types[44]
#define SWIGTYPE_p_wxDropFilesEvent swig_types[45]
#define SWIGTYPE_p_wxDuplexMode swig_types[46]
#define SWIGTYPE_p_wxEraseEvent swig_types[47]
#define SWIGTYPE_p_wxEvent swig_types[48]
#define SWIGTYPE_p_wxEvtHandler swig_types[49]
#define SWIGTYPE_p_wxFSFile swig_types[50]
#define SWIGTYPE_p_wxFileConfig swig_types[51]
#define SWIGTYPE_p_wxFileDataObject swig_types[52]
#define SWIGTYPE_p_wxFileHistory swig_types[53]
#define SWIGTYPE_p_wxFileSystem swig_types[54]
#define SWIGTYPE_p_wxFileType swig_types[55]
#define SWIGTYPE_p_wxFileTypeInfo swig_types[56]
#define SWIGTYPE_p_wxFlexGridSizer swig_types[57]
#define SWIGTYPE_p_wxFocusEvent swig_types[58]
#define SWIGTYPE_p_wxFont swig_types[59]
#define SWIGTYPE_p_wxFrame swig_types[60]
#define SWIGTYPE_p_wxGBSizerItem swig_types[61]
#define SWIGTYPE_p_wxGIFHandler swig_types[62]
#define SWIGTYPE_p_wxGridBagSizer swig_types[63]
#define SWIGTYPE_p_wxGridSizer swig_types[64]
#define SWIGTYPE_p_wxICOHandler swig_types[65]
#define SWIGTYPE_p_wxIcon swig_types[66]
#define SWIGTYPE_p_wxIconizeEvent swig_types[67]
#define SWIGTYPE_p_wxIdleEvent swig_types[68]
#define SWIGTYPE_p_wxImage swig_types[69]
#define SWIGTYPE_p_wxImageHandler swig_types[70]
#define SWIGTYPE_p_wxIndividualLayoutConstraint swig_types[71]
#define SWIGTYPE_p_wxInitDialogEvent swig_types[72]
#define SWIGTYPE_p_wxJPEGHandler swig_types[73]
#define SWIGTYPE_p_wxJoystick swig_types[74]
#define SWIGTYPE_p_wxJoystickEvent swig_types[75]
#define SWIGTYPE_p_wxKeyEvent swig_types[76]
#define SWIGTYPE_p_wxKillError swig_types[77]
#define SWIGTYPE_p_wxLayoutConstraints swig_types[78]
#define SWIGTYPE_p_wxLog swig_types[79]
#define SWIGTYPE_p_wxLogBuffer swig_types[80]
#define SWIGTYPE_p_wxLogChain swig_types[81]
#define SWIGTYPE_p_wxLogGui swig_types[82]
#define SWIGTYPE_p_wxLogNull swig_types[83]
#define SWIGTYPE_p_wxLogStderr swig_types[84]
#define SWIGTYPE_p_wxLogTextCtrl swig_types[85]
#define SWIGTYPE_p_wxLogWindow swig_types[86]
#define SWIGTYPE_p_wxMaximizeEvent swig_types[87]
#define SWIGTYPE_p_wxMemorySize swig_types[88]
#define SWIGTYPE_p_wxMenu swig_types[89]
#define SWIGTYPE_p_wxMenuBar swig_types[90]
#define SWIGTYPE_p_wxMenuEvent swig_types[91]
#define SWIGTYPE_p_wxMenuItem swig_types[92]
#define SWIGTYPE_p_wxMetafileDataObject swig_types[93]
#define SWIGTYPE_p_wxMimeTypesManager swig_types[94]
#define SWIGTYPE_p_wxMouseCaptureChangedEvent swig_types[95]
#define SWIGTYPE_p_wxMouseEvent swig_types[96]
#define SWIGTYPE_p_wxMouseState swig_types[97]
#define SWIGTYPE_p_wxMoveEvent swig_types[98]
#define SWIGTYPE_p_wxMutexGuiLocker swig_types[99]
#define SWIGTYPE_p_wxNavigationKeyEvent swig_types[100]
#define SWIGTYPE_p_wxNcPaintEvent swig_types[101]
#define SWIGTYPE_p_wxNotifyEvent swig_types[102]
#define SWIGTYPE_p_wxObject swig_types[103]
#define SWIGTYPE_p_wxOutputStream swig_types[104]
#define SWIGTYPE_p_wxPCXHandler swig_types[105]
#define SWIGTYPE_p_wxPNGHandler swig_types[106]
#define SWIGTYPE_p_wxPNMHandler swig_types[107]
#define SWIGTYPE_p_wxPaintEvent swig_types[108]
#define SWIGTYPE_p_wxPaletteChangedEvent swig_types[109]
#define SWIGTYPE_p_wxPaperSize swig_types[110]
#define SWIGTYPE_p_wxPoint swig_types[111]
#define SWIGTYPE_p_wxProcessEvent swig_types[112]
#define SWIGTYPE_p_wxPyApp swig_types[113]
#define SWIGTYPE_p_wxPyArtProvider swig_types[114]
#define SWIGTYPE_p_wxPyBitmapDataObject swig_types[115]
#define SWIGTYPE_p_wxPyCommandEvent swig_types[116]
#define SWIGTYPE_p_wxPyDataObjectSimple swig_types[117]
#define SWIGTYPE_p_wxPyDropSource swig_types[118]
#define SWIGTYPE_p_wxPyDropTarget swig_types[119]
#define SWIGTYPE_p_wxPyEvent swig_types[120]
#define SWIGTYPE_p_wxPyFileDropTarget swig_types[121]
#define SWIGTYPE_p_wxPyImageHandler swig_types[122]
#define SWIGTYPE_p_wxPyLog swig_types[123]
#define SWIGTYPE_p_wxPyProcess swig_types[124]
#define SWIGTYPE_p_wxPySizer swig_types[125]
#define SWIGTYPE_p_wxPyTextDataObject swig_types[126]
#define SWIGTYPE_p_wxPyTextDropTarget swig_types[127]
#define SWIGTYPE_p_wxPyTimer swig_types[128]
#define SWIGTYPE_p_wxPyTipProvider swig_types[129]
#define SWIGTYPE_p_wxPyValidator swig_types[130]
#define SWIGTYPE_p_wxQueryNewPaletteEvent swig_types[131]
#define SWIGTYPE_p_wxRect swig_types[132]
#define SWIGTYPE_p_wxScrollEvent swig_types[133]
#define SWIGTYPE_p_wxScrollWinEvent swig_types[134]
#define SWIGTYPE_p_wxSetCursorEvent swig_types[135]
#define SWIGTYPE_p_wxShowEvent swig_types[136]
#define SWIGTYPE_p_wxSingleInstanceChecker swig_types[137]
#define SWIGTYPE_p_wxSize swig_types[138]
#define SWIGTYPE_p_wxSizeEvent swig_types[139]
#define SWIGTYPE_p_wxSizer swig_types[140]
#define SWIGTYPE_p_wxSizerItem swig_types[141]
#define SWIGTYPE_p_wxSound swig_types[142]
#define SWIGTYPE_p_wxStandardPaths swig_types[143]
#define SWIGTYPE_p_wxStaticBoxSizer swig_types[144]
#define SWIGTYPE_p_wxStdDialogButtonSizer swig_types[145]
#define SWIGTYPE_p_wxStopWatch swig_types[146]
#define SWIGTYPE_p_wxString swig_types[147]
#define SWIGTYPE_p_wxSysColourChangedEvent swig_types[148]
#define SWIGTYPE_p_wxSystemOptions swig_types[149]
#define SWIGTYPE_p_wxSystemSettings swig_types[150]
#define SWIGTYPE_p_wxTIFFHandler swig_types[151]
#define SWIGTYPE_p_wxTextCtrl swig_types[152]
#define SWIGTYPE_p_wxTextDataObject swig_types[153]
#define SWIGTYPE_p_wxTimeSpan swig_types[154]
#define SWIGTYPE_p_wxTimer swig_types[155]
#define SWIGTYPE_p_wxTimerEvent swig_types[156]
#define SWIGTYPE_p_wxTimerRunner swig_types[157]
#define SWIGTYPE_p_wxTipProvider swig_types[158]
#define SWIGTYPE_p_wxToolTip swig_types[159]
#define SWIGTYPE_p_wxURLDataObject swig_types[160]
#define SWIGTYPE_p_wxUpdateUIEvent swig_types[161]
#define SWIGTYPE_p_wxValidator swig_types[162]
#define SWIGTYPE_p_wxVideoMode swig_types[163]
#define SWIGTYPE_p_wxWindow swig_types[164]
#define SWIGTYPE_p_wxWindowCreateEvent swig_types[165]
#define SWIGTYPE_p_wxWindowDestroyEvent swig_types[166]
#define SWIGTYPE_p_wxWindowDisabler swig_types[167]
#define SWIGTYPE_p_wxXPMHandler swig_types[168]
#define SWIGTYPE_ptrdiff_t swig_types[169]
#define SWIGTYPE_std__ptrdiff_t swig_types[170]
#define SWIGTYPE_unsigned_int swig_types[171]
static swig_type_info *swig_types[173];
static swig_module_info swig_module = {swig_types, 172, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _misc_.so
  ------------------------------------------------*/
#define SWIG_init    init_misc_

#define SWIG_name    "_misc_"

#include "wx/wxPython/wxPython.h"
#include "wx/wxPython/pyclasses.h"
#include "wx/wxPython/pyistream.h"    

 static const wxString wxPyEmptyString(wxEmptyString); 



  /*@/opt/swig/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
SWIG_AsVal_long(PyObject* obj, long* val)
{
    if (PyNumber_Check(obj)) {
        if (val) *val = PyInt_AsLong(obj);
        return 1;
    }
    else {
        SWIG_Python_TypeError("number", obj);
    }
    return 0;
}


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = static_cast<int >(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

 static const wxString wxPyWINDOW_DEFAULT_VARIANT(wxWINDOW_DEFAULT_VARIANT); 

#include <wx/stockitem.h>

 static const wxString wxPyFileSelectorPromptStr(wxFileSelectorPromptStr); 
 static const wxString wxPyFileSelectorDefaultWildcardStr(wxFileSelectorDefaultWildcardStr); 
 static const wxString wxPyDirSelectorPromptStr(wxDirSelectorPromptStr); 

  /*@/opt/swig/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNINLINE long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


    static PyObject* t_output_helper(PyObject* result, PyObject* obj)
    {
        PyObject*   o2;
        PyObject*   o3;
        if (!result) {
            result = obj;
        } else if (result == Py_None) {
            Py_DECREF(result);
            result = obj;
        } else {
            if (!PyTuple_Check(result)) {
                o2 = result;
                result = PyTuple_New(1);
                PyTuple_SET_ITEM(result, 0, o2);
            }
            o3 = PyTuple_New(1);            
            PyTuple_SetItem(o3, 0, obj);      
            o2 = result;
            result = PySequence_Concat(o2, o3); 
            Py_DECREF(o2);                      
            Py_DECREF(o3);
        }
        return result;
    }



    wxMemorySize wxGetFreeMemory()
        { wxPyRaiseNotImplemented(); return 0; }


SWIGINTERN int 
SWIG_AsVal_unsigned_SS_long(PyObject* obj, unsigned long* val)
{
    long v = 0;
    if (SWIG_AsVal_long(obj, &v) && v < 0) {
        SWIG_Python_TypeError("unsigned number", obj);
    }
    else if (val)
        *val = (unsigned long)v;
    return 1;
}


SWIGINTERNINLINE unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong(static_cast<long >(value)); 
}


    void* wxGetXDisplay()
    {
#ifdef __WXGTK__
        return wxGetDisplay();
#else
        return NULL;
#endif
    }


    wxWindow* FindWindowAtPointer() {
        wxPoint unused;
        return wxFindWindowAtPointer(unused);
    }


    void wxWakeUpMainThread() {}


    bool wxThread_IsMain() {
#ifdef WXP_WITH_THREAD
        return wxThread::IsMain();
#else
        return true;
#endif
    }

static void wxCaret_Destroy(wxCaret *self){
            delete self;
        }

#include <wx/snglinst.h>


#ifdef __WXMSW__
#include <wx/msw/private.h>
#include <wx/dynload.h>
#endif



bool wxDrawWindowOnDC(wxWindow* window, const wxDC& dc
#if 0
                      , int method
#endif
    )
{
#ifdef __WXMSW__
#if 0
    switch (method)
    {
        case 1:
            // This one only partially works.  Appears to be an undocumented
            // "standard" convention that not all widgets adhear to.  For
            // example, for some widgets backgrounds or non-client areas may
            // not be painted.
            ::SendMessage(GetHwndOf(window), WM_PAINT, (long)GetHdcOf(dc), 0);
            break;

        case 2:
#endif
            // This one works much better, nearly all widgets and their
            // children are captured correctly[**].  Prior to the big
            // background erase changes that Vadim did in 2004-2005 this
            // method failed badly on XP with Themes activated, most native
            // widgets draw only partially, if at all.  Without themes it
            // worked just like on Win2k.  After those changes this method
            // works very well.
            //
            // ** For example the radio buttons in a wxRadioBox are not its
            // children by default, but you can capture it via the panel
            // instead, or change RADIOBTN_PARENT_IS_RADIOBOX in radiobox.cpp.
            ::SendMessage(GetHwndOf(window), WM_PRINT, (long)GetHdcOf(dc),
                          PRF_CLIENT | PRF_NONCLIENT | PRF_CHILDREN |
                          PRF_ERASEBKGND | PRF_OWNED );
            return true;
#if 0
            break;

        case 3:
            // This one is only defined in the latest SDK and is only
            // available on XP.  MSDN says it is similar to sending WM_PRINT
            // so I expect that it will work similar to the above.  Since it
            // is avaialble only on XP, it can't be compiled like this and
            // will have to be loaded dynamically.
            // //::PrintWindow(GetHwndOf(window), GetHdcOf(dc), 0); //break;

            // fall through

        case 4:
            // Use PrintWindow if available, or fallback to WM_PRINT
            // otherwise.  Unfortunately using PrintWindow is even worse than
            // WM_PRINT.  For most native widgets nothing is drawn to the dc
            // at all, with or without Themes.
            typedef BOOL (WINAPI *PrintWindow_t)(HWND, HDC, UINT);
            static bool s_triedToLoad = false;
            static PrintWindow_t pfnPrintWindow = NULL;
            if ( !s_triedToLoad )
            {

                s_triedToLoad = true;
                wxDynamicLibrary dllUser32(_T("user32.dll"));
                if ( dllUser32.IsLoaded() )
                {
                    wxLogNull nolog;  // Don't report errors here
                    pfnPrintWindow = (PrintWindow_t)dllUser32.GetSymbol(_T("PrintWindow"));
                }
            }
            if (pfnPrintWindow)
            {
                //printf("Using PrintWindow\n");
                pfnPrintWindow(GetHwndOf(window), GetHdcOf(dc), 0);
            }
            else
            {
                //printf("Using WM_PRINT\n");
                ::SendMessage(GetHwndOf(window), WM_PRINT, (long)GetHdcOf(dc),
                              PRF_CLIENT | PRF_NONCLIENT | PRF_CHILDREN |
                              PRF_ERASEBKGND | PRF_OWNED );
            }
    }
#endif  // 0
#else
    return false;
#endif  // __WXMSW__    
}



#include <wx/tipdlg.h>


class wxPyTipProvider : public wxTipProvider {
public:
    wxPyTipProvider(size_t currentTip)
        : wxTipProvider(currentTip) {}

    DEC_PYCALLBACK_STRING__pure(GetTip);
    DEC_PYCALLBACK_STRING_STRING(PreprocessTip);
    PYPRIVATE;
};

IMP_PYCALLBACK_STRING__pure( wxPyTipProvider, wxTipProvider, GetTip);
IMP_PYCALLBACK_STRING_STRING(wxPyTipProvider, wxTipProvider, PreprocessTip);


IMP_PYCALLBACK__(wxPyTimer, wxTimer, Notify);

IMPLEMENT_ABSTRACT_CLASS(wxPyTimer, wxTimer);

wxPyTimer::wxPyTimer(wxEvtHandler *owner, int id)
    : wxTimer(owner, id)
{
    if (owner == NULL) SetOwner(this);
}


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj(const_cast<char* >(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = static_cast<unsigned int >(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}

static wxString wxLog_TimeStamp(){
            wxString msg;
            wxLog::TimeStamp(&msg);
            return msg;
        }
static void wxLog_Destroy(wxLog *self){ delete self; }
// Make some wrappers that double any % signs so they are 'escaped'
    void wxPyLogFatalError(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogFatalError(m);
    }
    
    void wxPyLogError(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogError(m);
    }

    void wxPyLogWarning(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogWarning(m);
    }

    void wxPyLogMessage(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogMessage(m);
    }

    void wxPyLogInfo(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogInfo(m);
    }

    void wxPyLogDebug(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogDebug(m);
    }

    void wxPyLogVerbose(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogVerbose(m);
    }

    void wxPyLogStatus(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogStatus(m);
    }

    void wxPyLogStatusFrame(wxFrame *pFrame, const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogStatus(pFrame, m);
    }

    void wxPyLogSysError(const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogSysError(m);
    }

    void wxPyLogGeneric(unsigned long level, const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogGeneric(level, m);
    }

    void wxPyLogTrace(unsigned long mask, const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogTrace(mask, m);
    }
        
    void wxPyLogTrace(const wxString& mask, const wxString& msg)
    {
        wxString m(msg);
        m.Replace(wxT("%"), wxT("%%"));
        wxLogTrace(mask, m);
    }
    


// A wxLog class that can be derived from in wxPython
class wxPyLog : public wxLog {
public:
    wxPyLog() : wxLog() {}

    virtual void DoLog(wxLogLevel level, const wxChar *szString, time_t t) {
        bool found;
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        if ((found = wxPyCBH_findCallback(m_myInst, "DoLog"))) {
            PyObject* s = wx2PyString(szString);
            wxPyCBH_callCallback(m_myInst, Py_BuildValue("(iOi)", level, s, t));
            Py_DECREF(s);
        }
        wxPyEndBlockThreads(blocked);
        if (! found)
            wxLog::DoLog(level, szString, t);
    }

    virtual void DoLogString(const wxChar *szString, time_t t) {
        bool found;
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        if ((found = wxPyCBH_findCallback(m_myInst, "DoLogString"))) {
            PyObject* s = wx2PyString(szString);
            wxPyCBH_callCallback(m_myInst, Py_BuildValue("(Oi)", s, t));
            Py_DECREF(s);
        }
        wxPyEndBlockThreads(blocked);
        if (! found)
            wxLog::DoLogString(szString, t);
    }

    DEC_PYCALLBACK_VOID_(Flush);
    PYPRIVATE;
};
IMP_PYCALLBACK_VOID_(wxPyLog, wxLog, Flush);



 
IMP_PYCALLBACK_VOID_INTINT( wxPyProcess, wxProcess, OnTerminate);


#include <wx/joystick.h>


#if !wxUSE_JOYSTICK && !defined(__WXMSW__)
// A C++ stub class for wxJoystick for platforms that don't have it.
class wxJoystick : public wxObject {
public:
    wxJoystick(int joystick = wxJOYSTICK1) {
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        PyErr_SetString(PyExc_NotImplementedError,
                        "wxJoystick is not available on this platform.");
        wxPyEndBlockThreads(blocked);
    }
    wxPoint GetPosition() { return wxPoint(-1,-1); }
    int GetZPosition() { return -1; }
    int GetButtonState() { return -1; }
    int GetPOVPosition() { return -1; }
    int GetPOVCTSPosition() { return -1; }
    int GetRudderPosition() { return -1; }
    int GetUPosition() { return -1; }
    int GetVPosition() { return -1; }
    int GetMovementThreshold() { return -1; }
    void SetMovementThreshold(int threshold) {}

    bool IsOk(void) { return false; }
    int GetNumberJoysticks() { return -1; }
    int GetManufacturerId() { return -1; }
    int GetProductId() { return -1; }
    wxString GetProductName() { return wxEmptyString; }
    int GetXMin() { return -1; }
    int GetYMin() { return -1; }
    int GetZMin() { return -1; }
    int GetXMax() { return -1; }
    int GetYMax() { return -1; }
    int GetZMax() { return -1; }
    int GetNumberButtons() { return -1; }
    int GetNumberAxes() { return -1; }
    int GetMaxButtons() { return -1; }
    int GetMaxAxes() { return -1; }
    int GetPollingMin() { return -1; }
    int GetPollingMax() { return -1; }
    int GetRudderMin() { return -1; }
    int GetRudderMax() { return -1; }
    int GetUMin() { return -1; }
    int GetUMax() { return -1; }
    int GetVMin() { return -1; }
    int GetVMax() { return -1; }

    bool HasRudder() { return false; }
    bool HasZ() { return false; }
    bool HasU() { return false; }
    bool HasV() { return false; }
    bool HasPOV() { return false; }
    bool HasPOV4Dir() { return false; }
    bool HasPOVCTS() { return false; }

    bool SetCapture(wxWindow* win, int pollingFreq = 0) { return false; }
    bool ReleaseCapture() { return false; }
};
#endif


#include <wx/sound.h>


#if !wxUSE_SOUND
// A C++ stub class for wxWave for platforms that don't have it.
class wxSound : public wxObject
{
public:
    wxSound() {
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        PyErr_SetString(PyExc_NotImplementedError,
                        "wxSound is not available on this platform.");
        wxPyEndBlockThreads(blocked);
    }
    wxSound(const wxString&/*, bool*/) {
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        PyErr_SetString(PyExc_NotImplementedError,
                        "wxSound is not available on this platform.");
        wxPyEndBlockThreads(blocked);
    }
    wxSound(int, const wxByte*) {
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        PyErr_SetString(PyExc_NotImplementedError,
                        "wxSound is not available on this platform.");
        wxPyEndBlockThreads(blocked);
    }
    
    ~wxSound() {};

    bool Create(const wxString&/*, bool*/) { return false; }
    bool Create(int, const wxByte*) { return false; };
    bool IsOk() { return false; };    
    bool Play(unsigned) const { return false; }
    static bool Play(const wxString&, unsigned) { return false; }
    static void Stop() {}
};

#endif

static wxSound *new_wxSound(wxString const &fileName=wxPyEmptyString){
            if (fileName.Length() == 0)
                return new wxSound;
            else
                return new wxSound(fileName);
        }
static wxSound *new_wxSound(PyObject *data){
            unsigned char* buffer; int size;
            wxSound *sound = NULL;

            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            if (!PyArg_Parse(data, "t#", &buffer, &size))
                goto done;
            sound = new wxSound(size, buffer);
        done:
            wxPyEndBlockThreads(blocked);
            return sound;
        }
static bool wxSound_CreateFromData(wxSound *self,PyObject *data){
        #ifndef __WXMAC__
            unsigned char* buffer;
            int size;
            bool rv = false;

            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            if (!PyArg_Parse(data, "t#", &buffer, &size))
                goto done;
            rv = self->Create(size, buffer);
        done:
            wxPyEndBlockThreads(blocked);
            return rv;
        #else
                 wxPyBlock_t blocked = wxPyBeginBlockThreads();
                 PyErr_SetString(PyExc_NotImplementedError,
                                 "Create from data is not available on this platform.");
                 wxPyEndBlockThreads(blocked);
                 return false;
        #endif
        }

#include <wx/mimetype.h>

static PyObject *wxFileType_GetMimeType(wxFileType *self){
            wxString str;
            if (self->GetMimeType(&str)) 
                return wx2PyString(str);
            else
                RETURN_NONE();
        }
static PyObject *wxFileType_GetMimeTypes(wxFileType *self){
            wxArrayString arr;
            if (self->GetMimeTypes(arr))
                return wxArrayString2PyList_helper(arr);
            else
                RETURN_NONE();
        }
static PyObject *wxFileType_GetExtensions(wxFileType *self){
            wxArrayString arr;
            if (self->GetExtensions(arr))
                return wxArrayString2PyList_helper(arr);
            else
                RETURN_NONE();
        }
static wxIcon *wxFileType_GetIcon(wxFileType *self){
            wxIconLocation loc;
            if (self->GetIcon(&loc))
                return new wxIcon(loc);
            else
                return NULL;
        }
static PyObject *wxFileType_GetIconInfo(wxFileType *self){
            wxIconLocation loc;
            if (self->GetIcon(&loc)) {
                wxString iconFile = loc.GetFileName();
                int iconIndex     = -1;



                // Make a tuple and put the values in it
                wxPyBlock_t blocked = wxPyBeginBlockThreads();
                PyObject* tuple = PyTuple_New(3);
                PyTuple_SetItem(tuple, 0, wxPyConstructObject(new wxIcon(loc),
                                                              wxT("wxIcon"), true));
                PyTuple_SetItem(tuple, 1, wx2PyString(iconFile));
                PyTuple_SetItem(tuple, 2, PyInt_FromLong(iconIndex));
                wxPyEndBlockThreads(blocked);
                return tuple;
            }
            else
                RETURN_NONE();
        }
static PyObject *wxFileType_GetDescription(wxFileType *self){
            wxString str;
            if (self->GetDescription(&str)) 
                return wx2PyString(str);
            else
                RETURN_NONE();
        }
static PyObject *wxFileType_GetOpenCommand(wxFileType *self,wxString const &filename,wxString const &mimetype=wxPyEmptyString){
            wxString str;
            if (self->GetOpenCommand(&str, wxFileType::MessageParameters(filename, mimetype))) 
                return wx2PyString(str);
            else
                RETURN_NONE();
        }
static PyObject *wxFileType_GetPrintCommand(wxFileType *self,wxString const &filename,wxString const &mimetype=wxPyEmptyString){
            wxString str;
            if (self->GetPrintCommand(&str, wxFileType::MessageParameters(filename, mimetype))) 
                return wx2PyString(str);
             else
                RETURN_NONE();
        }
static PyObject *wxFileType_GetAllCommands(wxFileType *self,wxString const &filename,wxString const &mimetype=wxPyEmptyString){
            wxArrayString verbs;
            wxArrayString commands;
            if (self->GetAllCommands(&verbs, &commands,
                                     wxFileType::MessageParameters(filename, mimetype))) {
                wxPyBlock_t blocked = wxPyBeginBlockThreads();
                PyObject* tuple = PyTuple_New(2);
                PyTuple_SetItem(tuple, 0, wxArrayString2PyList_helper(verbs));
                PyTuple_SetItem(tuple, 1, wxArrayString2PyList_helper(commands));
                wxPyEndBlockThreads(blocked);
                return tuple;
            }
            else
                RETURN_NONE();
        }
static wxString wxFileType_ExpandCommand(wxString const &command,wxString const &filename,wxString const &mimetype=wxPyEmptyString){
            return wxFileType::ExpandCommand(command,
                                             wxFileType::MessageParameters(filename, mimetype));
        }
static PyObject *wxMimeTypesManager_EnumAllFileTypes(wxMimeTypesManager *self){
            wxArrayString arr;
            self->EnumAllFileTypes(arr);
            return wxArrayString2PyList_helper(arr);
        }

#include <wx/artprov.h>

 static const wxString wxPyART_TOOLBAR(wxART_TOOLBAR); 
 static const wxString wxPyART_MENU(wxART_MENU); 
 static const wxString wxPyART_FRAME_ICON(wxART_FRAME_ICON); 
 static const wxString wxPyART_CMN_DIALOG(wxART_CMN_DIALOG); 
 static const wxString wxPyART_HELP_BROWSER(wxART_HELP_BROWSER); 
 static const wxString wxPyART_MESSAGE_BOX(wxART_MESSAGE_BOX); 
 static const wxString wxPyART_BUTTON(wxART_BUTTON); 
 static const wxString wxPyART_OTHER(wxART_OTHER); 
 static const wxString wxPyART_ADD_BOOKMARK(wxART_ADD_BOOKMARK); 
 static const wxString wxPyART_DEL_BOOKMARK(wxART_DEL_BOOKMARK); 
 static const wxString wxPyART_HELP_SIDE_PANEL(wxART_HELP_SIDE_PANEL); 
 static const wxString wxPyART_HELP_SETTINGS(wxART_HELP_SETTINGS); 
 static const wxString wxPyART_HELP_BOOK(wxART_HELP_BOOK); 
 static const wxString wxPyART_HELP_FOLDER(wxART_HELP_FOLDER); 
 static const wxString wxPyART_HELP_PAGE(wxART_HELP_PAGE); 
 static const wxString wxPyART_GO_BACK(wxART_GO_BACK); 
 static const wxString wxPyART_GO_FORWARD(wxART_GO_FORWARD); 
 static const wxString wxPyART_GO_UP(wxART_GO_UP); 
 static const wxString wxPyART_GO_DOWN(wxART_GO_DOWN); 
 static const wxString wxPyART_GO_TO_PARENT(wxART_GO_TO_PARENT); 
 static const wxString wxPyART_GO_HOME(wxART_GO_HOME); 
 static const wxString wxPyART_FILE_OPEN(wxART_FILE_OPEN); 
 static const wxString wxPyART_FILE_SAVE(wxART_FILE_SAVE); 
 static const wxString wxPyART_FILE_SAVE_AS(wxART_FILE_SAVE_AS); 
 static const wxString wxPyART_PRINT(wxART_PRINT); 
 static const wxString wxPyART_HELP(wxART_HELP); 
 static const wxString wxPyART_TIP(wxART_TIP); 
 static const wxString wxPyART_REPORT_VIEW(wxART_REPORT_VIEW); 
 static const wxString wxPyART_LIST_VIEW(wxART_LIST_VIEW); 
 static const wxString wxPyART_NEW_DIR(wxART_NEW_DIR); 
 static const wxString wxPyART_HARDDISK(wxART_HARDDISK); 
 static const wxString wxPyART_FLOPPY(wxART_FLOPPY); 
 static const wxString wxPyART_CDROM(wxART_CDROM); 
 static const wxString wxPyART_REMOVABLE(wxART_REMOVABLE); 
 static const wxString wxPyART_FOLDER(wxART_FOLDER); 
 static const wxString wxPyART_FOLDER_OPEN(wxART_FOLDER_OPEN); 
 static const wxString wxPyART_GO_DIR_UP(wxART_GO_DIR_UP); 
 static const wxString wxPyART_EXECUTABLE_FILE(wxART_EXECUTABLE_FILE); 
 static const wxString wxPyART_NORMAL_FILE(wxART_NORMAL_FILE); 
 static const wxString wxPyART_TICK_MARK(wxART_TICK_MARK); 
 static const wxString wxPyART_CROSS_MARK(wxART_CROSS_MARK); 
 static const wxString wxPyART_ERROR(wxART_ERROR); 
 static const wxString wxPyART_QUESTION(wxART_QUESTION); 
 static const wxString wxPyART_WARNING(wxART_WARNING); 
 static const wxString wxPyART_INFORMATION(wxART_INFORMATION); 
 static const wxString wxPyART_MISSING_IMAGE(wxART_MISSING_IMAGE); 
 static const wxString wxPyART_COPY(wxART_COPY); 
 static const wxString wxPyART_CUT(wxART_CUT); 
 static const wxString wxPyART_PASTE(wxART_PASTE); 
 static const wxString wxPyART_DELETE(wxART_DELETE); 
 static const wxString wxPyART_NEW(wxART_NEW); 
 static const wxString wxPyART_UNDO(wxART_UNDO); 
 static const wxString wxPyART_REDO(wxART_REDO); 
 static const wxString wxPyART_QUIT(wxART_QUIT); 
 static const wxString wxPyART_FIND(wxART_FIND); 
 static const wxString wxPyART_FIND_AND_REPLACE(wxART_FIND_AND_REPLACE); 
  // Python aware wxArtProvider
class wxPyArtProvider : public wxArtProvider  {
public:

    virtual wxBitmap CreateBitmap(const wxArtID& id,
                                  const wxArtClient& client,
                                  const wxSize& size) {
        wxBitmap rval = wxNullBitmap;
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        if ((wxPyCBH_findCallback(m_myInst, "CreateBitmap"))) {
            PyObject* so = wxPyConstructObject((void*)&size, wxT("wxSize"), 0);
            PyObject* ro;
            wxBitmap* ptr;
            PyObject* s1, *s2;
            s1 = wx2PyString(id);
            s2 = wx2PyString(client);
            ro = wxPyCBH_callCallbackObj(m_myInst, Py_BuildValue("(OOO)", s1, s2, so));
            Py_DECREF(so);
            Py_DECREF(s1);
            Py_DECREF(s2);
            if (ro) {
                if (wxPyConvertSwigPtr(ro, (void**)&ptr, wxT("wxBitmap")))
                    rval = *ptr;
                Py_DECREF(ro);
            }
        }
        wxPyEndBlockThreads(blocked);
        return rval;
    }

    PYPRIVATE;
};

static void wxPyArtProvider_Destroy(wxPyArtProvider *self){ delete self; }



    static PyObject* __EnumerationHelper(bool flag, wxString& str, long index) {
        PyObject* ret = PyTuple_New(3);
        if (ret) {
            PyTuple_SET_ITEM(ret, 0, PyInt_FromLong(flag));
	    PyTuple_SET_ITEM(ret, 1, wx2PyString(str));
            PyTuple_SET_ITEM(ret, 2, PyInt_FromLong(index));
        }
        return ret;
    }

static PyObject *wxConfigBase_GetFirstGroup(wxConfigBase *self){
            bool     cont;
            long     index = 0;
            wxString value;

            cont = self->GetFirstGroup(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static PyObject *wxConfigBase_GetNextGroup(wxConfigBase *self,long index){
            bool     cont;
            wxString value;

            cont = self->GetNextGroup(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static PyObject *wxConfigBase_GetFirstEntry(wxConfigBase *self){
            bool     cont;
            long     index = 0;
            wxString value;

            cont = self->GetFirstEntry(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static PyObject *wxConfigBase_GetNextEntry(wxConfigBase *self,long index){
            bool     cont;
            wxString value;

            cont = self->GetNextEntry(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static long wxConfigBase_ReadInt(wxConfigBase *self,wxString const &key,long defaultVal=0){
            long rv;
            self->Read(key, &rv, defaultVal);
            return rv;
        }

SWIGINTERN int
SWIG_AsVal_double(PyObject *obj, double* val)
{
    if (PyNumber_Check(obj)) {
        if (val) *val = PyFloat_AsDouble(obj);
        return 1;
    }
    else {
        SWIG_Python_TypeError("number", obj);
    }
    return 0;
}


SWIGINTERNINLINE double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}

static double wxConfigBase_ReadFloat(wxConfigBase *self,wxString const &key,double defaultVal=0.0){
            double rv;
            self->Read(key, &rv, defaultVal);
            return rv;
        }

  /*@/opt/swig/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/

static bool wxConfigBase_ReadBool(wxConfigBase *self,wxString const &key,bool defaultVal=false){
            bool rv;
            self->Read(key, &rv, defaultVal);
            return rv;
        }

#include <wx/datetime.h>

 static const wxString wxPyDefaultDateTimeFormat(wxDefaultDateTimeFormat); 
 static const wxString wxPyDefaultTimeSpanFormat(wxDefaultTimeSpanFormat); 

#define LOCAL_TZ wxDateTime::Local

static PyObject *wxDateTime_GetAmPmStrings(){
            wxString am;
            wxString pm;
            wxDateTime::GetAmPmStrings(&am, &pm);
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            PyObject* tup = PyTuple_New(2);
            PyTuple_SET_ITEM(tup, 0, wx2PyString(am));
            PyTuple_SET_ITEM(tup, 1, wx2PyString(pm));
            wxPyEndBlockThreads(blocked);
            return tup;
        }

#if UINT_MAX < LONG_MAX
/*@/opt/swig/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/opt/swig/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif

static wxDateTime wxDateTime___add____SWIG_0(wxDateTime *self,wxTimeSpan const &other){ return *self + other; }
static wxDateTime wxDateTime___add____SWIG_1(wxDateTime *self,wxDateSpan const &other){ return *self + other; }
static wxTimeSpan wxDateTime___sub____SWIG_0(wxDateTime *self,wxDateTime const &other){ return *self - other; }
static wxDateTime wxDateTime___sub____SWIG_1(wxDateTime *self,wxTimeSpan const &other){ return *self - other; }
static wxDateTime wxDateTime___sub____SWIG_2(wxDateTime *self,wxDateSpan const &other){ return *self - other; }
static bool wxDateTime___lt__(wxDateTime *self,wxDateTime const *other){ 
            if (!other || !self->IsValid() || !other->IsValid()) return self <  other; 
            return (*self <  *other);
        }
static bool wxDateTime___le__(wxDateTime *self,wxDateTime const *other){ 
            if (!other || !self->IsValid() || !other->IsValid()) return self <= other; 
            return (*self <= *other);
        }
static bool wxDateTime___gt__(wxDateTime *self,wxDateTime const *other){ 
            if (!other || !self->IsValid() || !other->IsValid()) return self >  other; 
            return (*self >  *other);
        }
static bool wxDateTime___ge__(wxDateTime *self,wxDateTime const *other){ 
            if (!other || !self->IsValid() || !other->IsValid()) return self >= other; 
            return (*self >= *other);
        }
static bool wxDateTime___eq__(wxDateTime *self,wxDateTime const *other){
            if (!other || !self->IsValid() || !other->IsValid()) return self == other; 
            return (*self == *other);
        }
static bool wxDateTime___ne__(wxDateTime *self,wxDateTime const *other){
            if (!other || !self->IsValid() || !other->IsValid()) return self != other; 
            return (*self != *other);
        }
static int wxDateTime_ParseRfc822Date(wxDateTime *self,wxString const &date){
            const wxChar* rv;
            const wxChar* _date = date;
            rv = self->ParseRfc822Date(_date);
            if (rv == NULL) return -1;
            return rv - _date;
        }
static int wxDateTime_ParseFormat(wxDateTime *self,wxString const &date,wxString const &format=wxPyDefaultDateTimeFormat,wxDateTime const &dateDef=wxDefaultDateTime){
            const wxChar* rv;
            const wxChar* _date = date;
            rv = self->ParseFormat(_date, format, dateDef);
            if (rv == NULL) return -1;
            return rv - _date;
        }
static int wxDateTime_ParseDateTime(wxDateTime *self,wxString const &datetime){
            const wxChar* rv;
            const wxChar* _datetime = datetime;
            rv = self->ParseDateTime(_datetime);
            if (rv == NULL) return -1;
            return rv - _datetime;
        }
static int wxDateTime_ParseDate(wxDateTime *self,wxString const &date){
            const wxChar* rv;
            const wxChar* _date = date;
            rv = self->ParseDate(_date);
            if (rv == NULL) return -1;
            return rv - _date;
        }
static int wxDateTime_ParseTime(wxDateTime *self,wxString const &time){
            const wxChar* rv;
            const wxChar* _time = time;
            rv = self->ParseTime(_time);
            if (rv == NULL) return -1;
            return rv - _time;
        }
static wxTimeSpan wxTimeSpan___add__(wxTimeSpan *self,wxTimeSpan const &other){ return *self + other; }
static wxTimeSpan wxTimeSpan___sub__(wxTimeSpan *self,wxTimeSpan const &other){ return *self - other; }
static wxTimeSpan wxTimeSpan___mul__(wxTimeSpan *self,int n){ return *self * n; }
static wxTimeSpan wxTimeSpan___rmul__(wxTimeSpan *self,int n){ return n * *self; }
static bool wxTimeSpan___lt__(wxTimeSpan *self,wxTimeSpan const *other){ return other ? (*self <  *other) : false; }
static bool wxTimeSpan___le__(wxTimeSpan *self,wxTimeSpan const *other){ return other ? (*self <= *other) : false; }
static bool wxTimeSpan___gt__(wxTimeSpan *self,wxTimeSpan const *other){ return other ? (*self >  *other) : true;  }
static bool wxTimeSpan___ge__(wxTimeSpan *self,wxTimeSpan const *other){ return other ? (*self >= *other) : true;  }
static bool wxTimeSpan___eq__(wxTimeSpan *self,wxTimeSpan const *other){ return other ? (*self == *other) : false; }
static bool wxTimeSpan___ne__(wxTimeSpan *self,wxTimeSpan const *other){ return other ? (*self != *other) : true;  }
static wxDateSpan wxDateSpan___add__(wxDateSpan *self,wxDateSpan const &other){ return *self + other; }
static wxDateSpan wxDateSpan___sub__(wxDateSpan *self,wxDateSpan const &other){ return *self - other; }
static wxDateSpan wxDateSpan___mul__(wxDateSpan *self,int n){ return *self * n; }
static wxDateSpan wxDateSpan___rmul__(wxDateSpan *self,int n){ return n * *self; }
static bool wxDateSpan___eq__(wxDateSpan *self,wxDateSpan const *other){ return other ? (*self == *other) : false; }
static bool wxDateSpan___ne__(wxDateSpan *self,wxDateSpan const *other){ return other ? (*self != *other) : true;  }

#include <wx/dataobj.h>

static PyObject *wxDataObject_GetAllFormats(wxDataObject *self,wxDataObject::Direction dir=wxDataObject::Get){
            size_t count = self->GetFormatCount(dir);
            wxDataFormat* formats = new wxDataFormat[count];
            self->GetAllFormats(formats, dir);

            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            PyObject* list = PyList_New(count);
            for (size_t i=0; i<count; i++) {
                wxDataFormat* format = new wxDataFormat(formats[i]);
                PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
                PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
            }            
            wxPyEndBlockThreads(blocked);
            delete [] formats;
            return list;
        }
static PyObject *wxDataObject_GetDataHere(wxDataObject *self,wxDataFormat const &format){
            PyObject* rval = NULL;
            size_t size = self->GetDataSize(format);            
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            if (size) {
                char* buf = new char[size];
                if (self->GetDataHere(format, buf)) 
                    rval = PyString_FromStringAndSize(buf, size);
                delete [] buf;
            }
            if (! rval) {
                rval = Py_None;
                Py_INCREF(rval);
            }
            wxPyEndBlockThreads(blocked);
            return rval;
        }
static bool wxDataObject_SetData(wxDataObject *self,wxDataFormat const &format,PyObject *data){
            bool rval;
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            if (PyString_Check(data)) {
                rval = self->SetData(format, PyString_Size(data), PyString_AsString(data));
            }
            else {
                // raise a TypeError if not a string
                PyErr_SetString(PyExc_TypeError, "String expected.");
                rval = false;
            }
            wxPyEndBlockThreads(blocked);
            return rval;
        }
static PyObject *wxDataObjectSimple_GetDataHere(wxDataObjectSimple *self){
            PyObject* rval = NULL;
            size_t size = self->GetDataSize();            
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            if (size) {
                char* buf = new char[size];
                if (self->GetDataHere(buf)) 
                    rval = PyString_FromStringAndSize(buf, size);
                delete [] buf;
            }
            if (! rval) {
                rval = Py_None;
                Py_INCREF(rval);
            }
            wxPyEndBlockThreads(blocked);
            return rval;
        }
static bool wxDataObjectSimple_SetData(wxDataObjectSimple *self,PyObject *data){
            bool rval;
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            if (PyString_Check(data)) {
                rval = self->SetData(PyString_Size(data), PyString_AsString(data));
            }
            else {
                // raise a TypeError if not a string
                PyErr_SetString(PyExc_TypeError, "String expected.");
                rval = false;
            }
            wxPyEndBlockThreads(blocked);
            return rval;
        }
  // Create a new class for wxPython to use
class wxPyDataObjectSimple : public wxDataObjectSimple {
public:
    wxPyDataObjectSimple(const wxDataFormat& format = wxFormatInvalid)
        : wxDataObjectSimple(format) {}

    DEC_PYCALLBACK_SIZET__const(GetDataSize);
    bool GetDataHere(void *buf) const;
    bool SetData(size_t len, const void *buf) const;
    PYPRIVATE;
};

IMP_PYCALLBACK_SIZET__const(wxPyDataObjectSimple, wxDataObjectSimple, GetDataSize);

bool wxPyDataObjectSimple::GetDataHere(void *buf) const {
    // We need to get the data for this object and write it to buf.  I think
    // the best way to do this for wxPython is to have the Python method
    // return either a string or None and then act appropriately with the
    // C++ version.

    bool rval = false;
    wxPyBlock_t blocked = wxPyBeginBlockThreads();
    if (wxPyCBH_findCallback(m_myInst, "GetDataHere")) {
        PyObject* ro;
        ro = wxPyCBH_callCallbackObj(m_myInst, Py_BuildValue("()"));
        if (ro) {
            rval = (ro != Py_None && PyString_Check(ro));
            if (rval)
                memcpy(buf, PyString_AsString(ro), PyString_Size(ro));
            Py_DECREF(ro);
        }
    }
    wxPyEndBlockThreads(blocked);
    return rval;
}

bool wxPyDataObjectSimple::SetData(size_t len, const void *buf) const{
    // For this one we simply need to make a string from buf and len
    // and send it to the Python method.
    bool rval = false;
    wxPyBlock_t blocked = wxPyBeginBlockThreads();
    if (wxPyCBH_findCallback(m_myInst, "SetData")) {
        PyObject* data = PyString_FromStringAndSize((char*)buf, len);
        rval = wxPyCBH_callCallback(m_myInst, Py_BuildValue("(O)", data));
        Py_DECREF(data);
    }
    wxPyEndBlockThreads(blocked);
    return rval;
}

  // Create a new class for wxPython to use
class wxPyTextDataObject : public wxTextDataObject {
public:
    wxPyTextDataObject(const wxString& text = wxPyEmptyString)
        : wxTextDataObject(text) {}

    DEC_PYCALLBACK_SIZET__const(GetTextLength);
    DEC_PYCALLBACK_STRING__const(GetText);
    DEC_PYCALLBACK__STRING(SetText);
    PYPRIVATE;
};

IMP_PYCALLBACK_SIZET__const(wxPyTextDataObject, wxTextDataObject, GetTextLength);
IMP_PYCALLBACK_STRING__const(wxPyTextDataObject, wxTextDataObject, GetText);
IMP_PYCALLBACK__STRING(wxPyTextDataObject, wxTextDataObject, SetText);


  // Create a new class for wxPython to use
class wxPyBitmapDataObject : public wxBitmapDataObject {
public:
    wxPyBitmapDataObject(const wxBitmap& bitmap = wxNullBitmap)
        : wxBitmapDataObject(bitmap) {}

    wxBitmap GetBitmap() const;
    void SetBitmap(const wxBitmap& bitmap);
    PYPRIVATE;
};

wxBitmap wxPyBitmapDataObject::GetBitmap() const {
    wxBitmap* rval = &wxNullBitmap;
    wxPyBlock_t blocked = wxPyBeginBlockThreads();
    if (wxPyCBH_findCallback(m_myInst, "GetBitmap")) {
        PyObject* ro;
        wxBitmap* ptr;
        ro = wxPyCBH_callCallbackObj(m_myInst, Py_BuildValue("()"));
        if (ro) {
            if (wxPyConvertSwigPtr(ro, (void **)&ptr, wxT("wxBitmap")))
                rval = ptr;
            Py_DECREF(ro);
        }
    }
    wxPyEndBlockThreads(blocked);
    return *rval;
}
 
void wxPyBitmapDataObject::SetBitmap(const wxBitmap& bitmap) {
    wxPyBlock_t blocked = wxPyBeginBlockThreads();
    if (wxPyCBH_findCallback(m_myInst, "SetBitmap")) {
        PyObject* bo = wxPyConstructObject((void*)&bitmap, wxT("wxBitmap"), false);
        wxPyCBH_callCallback(m_myInst, Py_BuildValue("(O)", bo));
        Py_DECREF(bo);
    }
    wxPyEndBlockThreads(blocked);
}

static wxCustomDataObject *new_wxCustomDataObject__SWIG_1(wxString const &formatName){
            return new wxCustomDataObject(wxDataFormat(formatName));
        }
static bool wxCustomDataObject_SetData(wxCustomDataObject *self,PyObject *data){
            bool rval;
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            if (PyString_Check(data)) {
                rval = self->SetData(PyString_Size(data), PyString_AsString(data));
            }
            else {
                // raise a TypeError if not a string
                PyErr_SetString(PyExc_TypeError, "String expected.");
                rval = false;
            }
            wxPyEndBlockThreads(blocked);
            return rval;
        }
static PyObject *wxCustomDataObject_GetData(wxCustomDataObject *self){
            PyObject* obj;
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            obj = PyString_FromStringAndSize((char*)self->GetData(), self->GetSize());
            wxPyEndBlockThreads(blocked);
            return obj;
        }

class wxMetafileDataObject : public wxDataObjectSimple
{
public:
    wxMetafileDataObject() { wxPyRaiseNotImplemented(); }
};    


IMP_PYCALLBACK_BOOL_DR(wxPyDropSource, wxDropSource, GiveFeedback);


IMP_PYCALLBACK__(wxPyDropTarget, wxDropTarget, OnLeave);
IMP_PYCALLBACK_DR_2WXCDR(wxPyDropTarget, wxDropTarget, OnEnter);
IMP_PYCALLBACK_DR_2WXCDR(wxPyDropTarget, wxDropTarget, OnDragOver);
IMP_PYCALLBACK_DR_2WXCDR_pure(wxPyDropTarget, wxDropTarget, OnData);
IMP_PYCALLBACK_BOOL_INTINT(wxPyDropTarget, wxDropTarget, OnDrop);


class wxPyTextDropTarget : public wxTextDropTarget {
public:
    wxPyTextDropTarget() {}

    DEC_PYCALLBACK_BOOL_INTINTSTR_pure(OnDropText);

    DEC_PYCALLBACK__(OnLeave);
    DEC_PYCALLBACK_DR_2WXCDR(OnEnter);
    DEC_PYCALLBACK_DR_2WXCDR(OnDragOver);
    DEC_PYCALLBACK_DR_2WXCDR(OnData);
    DEC_PYCALLBACK_BOOL_INTINT(OnDrop);

    PYPRIVATE;
};

IMP_PYCALLBACK_BOOL_INTINTSTR_pure(wxPyTextDropTarget, wxTextDropTarget, OnDropText);
IMP_PYCALLBACK__(wxPyTextDropTarget, wxTextDropTarget, OnLeave);
IMP_PYCALLBACK_DR_2WXCDR(wxPyTextDropTarget, wxTextDropTarget, OnEnter);
IMP_PYCALLBACK_DR_2WXCDR(wxPyTextDropTarget, wxTextDropTarget, OnDragOver);
IMP_PYCALLBACK_DR_2WXCDR(wxPyTextDropTarget, wxTextDropTarget, OnData);
IMP_PYCALLBACK_BOOL_INTINT(wxPyTextDropTarget, wxTextDropTarget, OnDrop);



class wxPyFileDropTarget : public wxFileDropTarget {
public:
    wxPyFileDropTarget() {}

    virtual bool OnDropFiles(wxCoord x, wxCoord y, const wxArrayString& filenames);

    DEC_PYCALLBACK__(OnLeave);
    DEC_PYCALLBACK_DR_2WXCDR(OnEnter);
    DEC_PYCALLBACK_DR_2WXCDR(OnDragOver);
    DEC_PYCALLBACK_DR_2WXCDR(OnData);
    DEC_PYCALLBACK_BOOL_INTINT(OnDrop);

    PYPRIVATE;
};

bool wxPyFileDropTarget::OnDropFiles(wxCoord x, wxCoord y,
                                     const wxArrayString& filenames) {
    bool rval = false;
    wxPyBlock_t blocked = wxPyBeginBlockThreads();
    if (wxPyCBH_findCallback(m_myInst, "OnDropFiles")) {
        PyObject* list = wxArrayString2PyList_helper(filenames);
        rval = wxPyCBH_callCallback(m_myInst, Py_BuildValue("(iiO)",x,y,list));
        Py_DECREF(list);
    }
    wxPyEndBlockThreads(blocked);
    return rval;
}



IMP_PYCALLBACK__(wxPyFileDropTarget, wxFileDropTarget, OnLeave);
IMP_PYCALLBACK_DR_2WXCDR(wxPyFileDropTarget, wxFileDropTarget, OnEnter);
IMP_PYCALLBACK_DR_2WXCDR(wxPyFileDropTarget, wxFileDropTarget, OnDragOver);
IMP_PYCALLBACK_DR_2WXCDR(wxPyFileDropTarget, wxFileDropTarget, OnData);
IMP_PYCALLBACK_BOOL_INTINT(wxPyFileDropTarget, wxFileDropTarget, OnDrop);




static bool wxClipboardLocker___nonzero__(wxClipboardLocker *self){ return !!(*self); }

#include <wx/display.h>

static bool wxVideoMode___eq__(wxVideoMode *self,wxVideoMode const *other){ return other ? (*self == *other) : false; }
static bool wxVideoMode___ne__(wxVideoMode *self,wxVideoMode const *other){ return other ? (*self != *other) : true;  }

// dummy version of wxDisplay for when it is not enabled in the wxWidgets build
#if !wxUSE_DISPLAY
#include <wx/dynarray.h>
#include <wx/vidmode.h>

    WX_DECLARE_OBJARRAY(wxVideoMode, wxArrayVideoModes);
#include "wx/arrimpl.cpp"
WX_DEFINE_OBJARRAY(wxArrayVideoModes);
const wxVideoMode wxDefaultVideoMode;

class wxDisplay 
{
public:
    wxDisplay(size_t index = 0) { wxPyRaiseNotImplemented(); }
    ~wxDisplay() {}

    static size_t  GetCount()
        { wxPyRaiseNotImplemented(); return 0; }
    
    static int GetFromPoint(const wxPoint& pt)
        { wxPyRaiseNotImplemented(); return wxNOT_FOUND; }
    static int GetFromWindow(wxWindow *window) 
        { wxPyRaiseNotImplemented(); return wxNOT_FOUND; }
        
    virtual bool IsOk() const { return false; }
    virtual wxRect GetGeometry() const { wxRect r; return r; }
    virtual wxString GetName() const { return wxEmptyString; }
    bool IsPrimary() const { return false; }
    
    wxArrayVideoModes GetModes(const wxVideoMode& mode = wxDefaultVideoMode)
        { wxArrayVideoModes a; return a; }

    virtual wxVideoMode GetCurrentMode() const
        { return wxDefaultVideoMode; }
    
    virtual bool ChangeMode(const wxVideoMode& mode = wxDefaultVideoMode)
       { return false; }
    
    void  ResetMode() {}
};
#endif

static PyObject *wxDisplay_GetModes(wxDisplay *self,wxVideoMode const &mode=wxDefaultVideoMode){
            PyObject* pyList = NULL;
            wxArrayVideoModes arr = self->GetModes(mode);
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            pyList = PyList_New(0);
            for (int i=0; i < arr.GetCount(); i++) {
                wxVideoMode* m = new wxVideoMode(arr.Item(i));
                PyObject* pyObj = wxPyConstructObject(m, wxT("wxVideoMode"), true);
                PyList_Append(pyList, pyObj);
                Py_DECREF(pyObj);
            }
            wxPyEndBlockThreads(blocked);
            return pyList;
        }

#include <wx/stdpaths.h>

static wxStandardPaths *wxStandardPaths_Get(){
            return (wxStandardPaths*) &wxStandardPaths::Get();
        }
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_SystemSettings_GetColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSystemColour arg1 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemSettings_GetColour",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxSystemColour >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxSystemSettings::GetColour(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour(static_cast<wxColour & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemSettings_GetFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSystemFont arg1 ;
    wxFont result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemSettings_GetFont",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxSystemFont >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxSystemSettings::GetFont(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxFont * resultptr;
        resultptr = new wxFont(static_cast<wxFont & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxFont, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemSettings_GetMetric(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSystemMetric arg1 ;
    wxWindow *arg2 = (wxWindow *) NULL ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "index",(char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SystemSettings_GetMetric",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<wxSystemMetric >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxSystemSettings::GetMetric(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemSettings_HasFeature(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSystemFeature arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemSettings_HasFeature",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxSystemFeature >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxSystemSettings::HasFeature(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemSettings_GetScreenType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSystemScreenType result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":SystemSettings_GetScreenType",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxSystemScreenType)wxSystemSettings::GetScreenType();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemSettings_SetScreenType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSystemScreenType arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "screen", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemSettings_SetScreenType",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxSystemScreenType >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxSystemSettings::SetScreenType(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SystemSettings_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxSystemSettings, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_WINDOW_DEFAULT_VARIANT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable WINDOW_DEFAULT_VARIANT is read-only.");
    return 1;
}


static PyObject *_wrap_WINDOW_DEFAULT_VARIANT_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyWINDOW_DEFAULT_VARIANT)->c_str(), (&wxPyWINDOW_DEFAULT_VARIANT)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyWINDOW_DEFAULT_VARIANT)->c_str(), (&wxPyWINDOW_DEFAULT_VARIANT)->Len());
#endif
    }
    return pyobj;
}


static PyObject *_wrap_new_SystemOptions(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSystemOptions *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_SystemOptions",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxSystemOptions *)new wxSystemOptions();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxSystemOptions, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemOptions_SetOption(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "name",(char *) "value", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SystemOptions_SetOption",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxSystemOptions::SetOption((wxString const &)*arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_SystemOptions_SetOptionInt(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    int arg2 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "name",(char *) "value", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SystemOptions_SetOptionInt",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxSystemOptions::SetOption((wxString const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_SystemOptions_GetOption(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemOptions_GetOption",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxSystemOptions::GetOption((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_SystemOptions_GetOptionInt(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    int result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemOptions_GetOptionInt",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxSystemOptions::GetOptionInt((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_SystemOptions_HasOption(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemOptions_HasOption",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxSystemOptions::HasOption((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_SystemOptions_IsFalse(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SystemOptions_IsFalse",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxSystemOptions::IsFalse((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject * SystemOptions_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxSystemOptions, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_FileSelectorPromptStr_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable FileSelectorPromptStr is read-only.");
    return 1;
}


static PyObject *_wrap_FileSelectorPromptStr_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyFileSelectorPromptStr)->c_str(), (&wxPyFileSelectorPromptStr)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyFileSelectorPromptStr)->c_str(), (&wxPyFileSelectorPromptStr)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_FileSelectorDefaultWildcardStr_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable FileSelectorDefaultWildcardStr is read-only.");
    return 1;
}


static PyObject *_wrap_FileSelectorDefaultWildcardStr_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyFileSelectorDefaultWildcardStr)->c_str(), (&wxPyFileSelectorDefaultWildcardStr)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyFileSelectorDefaultWildcardStr)->c_str(), (&wxPyFileSelectorDefaultWildcardStr)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_DirSelectorPromptStr_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DirSelectorPromptStr is read-only.");
    return 1;
}


static PyObject *_wrap_DirSelectorPromptStr_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyDirSelectorPromptStr)->c_str(), (&wxPyDirSelectorPromptStr)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyDirSelectorPromptStr)->c_str(), (&wxPyDirSelectorPromptStr)->Len());
#endif
    }
    return pyobj;
}


static PyObject *_wrap_NewId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":NewId",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxNewId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegisterId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegisterId",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxRegisterId(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetCurrentId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetCurrentId",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxGetCurrentId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsStockID(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IsStockID",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxIsStockID(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsStockLabel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "id",(char *) "label", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IsStockLabel",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxIsStockLabel(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_GetStockLabel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    bool arg2 = (bool) true ;
    wxString arg3 = (wxString) wxPyEmptyString ;
    wxString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "id",(char *) "withCodes",(char *) "accelerator", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:GetStockLabel",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            wxString* sptr = wxString_in_helper(obj2);
            if (sptr == NULL) SWIG_fail;
            arg3 = *sptr;
            delete sptr;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetStockLabel(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bell(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Bell",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxBell();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EndBusyCursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":EndBusyCursor",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxEndBusyCursor();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetElapsedTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool arg1 = (bool) true ;
    long result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "resetTimer", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:GetElapsedTime",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxGetElapsedTime(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsBusy(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":IsBusy",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxIsBusy();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Now(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Now",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxNow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Shell(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    bool result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "command", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:Shell",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxShell((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_StartTimer(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":StartTimer",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxStartTimer();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetOsVersion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int result;
    int temp1 ;
    int res1 = 0 ;
    int temp2 ;
    int res2 = 0 ;
    char *kwnames[] = {
        NULL 
    };
    
    arg1 = &temp1; res1 = SWIG_NEWOBJ;
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetOsVersion",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxGetOsVersion(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    resultobj = t_output_helper(resultobj, ((res1 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg1)) : SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetOsDescription(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetOsDescription",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetOsDescription();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetFreeMemory(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMemorySize result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetFreeMemory",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetFreeMemory();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxMemorySize * resultptr;
        resultptr = new wxMemorySize(static_cast<wxMemorySize & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxMemorySize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Shutdown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxShutdownFlags arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "wFlags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Shutdown",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxShutdownFlags >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxShutdown(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sleep(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "secs", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Sleep",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxSleep(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MilliSleep(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "milliseconds", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MilliSleep",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<unsigned long >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxMilliSleep(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MicroSleep(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "microseconds", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MicroSleep",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<unsigned long >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxMicroSleep(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EnableTopLevelWindows(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "enable", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:EnableTopLevelWindows",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxEnableTopLevelWindows(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StripMenuCodes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "in", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StripMenuCodes",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxStripMenuCodes((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_GetEmailAddress(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetEmailAddress",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetEmailAddress();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetHostName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetHostName",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetHostName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetFullHostName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetFullHostName",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetFullHostName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetUserId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetUserId",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetUserId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetUserName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetUserName",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetUserName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetHomeDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetHomeDir",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetHomeDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetUserHome(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxString result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "user", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:GetUserHome",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetUserHome((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_GetProcessId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    unsigned long result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetProcessId",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (unsigned long)wxGetProcessId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Trap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Trap",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxTrap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileSelector(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyFileSelectorPromptStr ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    wxString const &arg5_defvalue = wxPyFileSelectorDefaultWildcardStr ;
    wxString *arg5 = (wxString *) &arg5_defvalue ;
    int arg6 = (int) 0 ;
    wxWindow *arg7 = (wxWindow *) NULL ;
    int arg8 = (int) -1 ;
    int arg9 = (int) -1 ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    bool temp4 = false ;
    bool temp5 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    char *kwnames[] = {
        (char *) "message",(char *) "default_path",(char *) "default_filename",(char *) "default_extension",(char *) "wildcard",(char *) "flags",(char *) "parent",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOOOOOO:FileSelector",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = true;
        }
    }
    if (obj4) {
        {
            arg5 = wxString_in_helper(obj4);
            if (arg5 == NULL) SWIG_fail;
            temp5 = true;
        }
    }
    if (obj5) {
        {
            arg6 = static_cast<int >(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    if (obj7) {
        {
            arg8 = static_cast<int >(SWIG_As_int(obj7)); 
            if (SWIG_arg_fail(8)) SWIG_fail;
        }
    }
    if (obj8) {
        {
            arg9 = static_cast<int >(SWIG_As_int(obj8)); 
            if (SWIG_arg_fail(9)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFileSelector((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4,(wxString const &)*arg5,arg6,arg7,arg8,arg9);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    {
        if (temp5)
        delete arg5;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    {
        if (temp5)
        delete arg5;
    }
    return NULL;
}


static PyObject *_wrap_LoadFileSelector(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxWindow *arg4 = (wxWindow *) NULL ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "what",(char *) "extension",(char *) "default_name",(char *) "parent", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:LoadFileSelector",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxLoadFileSelector((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_SaveFileSelector(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxWindow *arg4 = (wxWindow *) NULL ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "what",(char *) "extension",(char *) "default_name",(char *) "parent", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:SaveFileSelector",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxSaveFileSelector((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_DirSelector(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyDirSelectorPromptStr ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    long arg3 = (long) wxDD_DEFAULT_STYLE ;
    wxPoint const &arg4_defvalue = wxDefaultPosition ;
    wxPoint *arg4 = (wxPoint *) &arg4_defvalue ;
    wxWindow *arg5 = (wxWindow *) NULL ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    wxPoint temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "message",(char *) "defaultPath",(char *) "style",(char *) "pos",(char *) "parent", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:DirSelector",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<long >(SWIG_As_long(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = &temp4;
            if ( ! wxPoint_helper(obj3, &arg4)) SWIG_fail;
        }
    }
    if (obj4) {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDirSelector((wxString const &)*arg1,(wxString const &)*arg2,arg3,(wxPoint const &)*arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_GetTextFromUser(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxWindow *arg4 = (wxWindow *) NULL ;
    int arg5 = (int) -1 ;
    int arg6 = (int) -1 ;
    bool arg7 = (bool) true ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "message",(char *) "caption",(char *) "default_value",(char *) "parent",(char *) "x",(char *) "y",(char *) "centre", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOO:GetTextFromUser",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = static_cast<int >(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = static_cast<bool >(SWIG_As_bool(obj6)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetTextFromUser((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_GetPasswordFromUser(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxWindow *arg4 = (wxWindow *) NULL ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "message",(char *) "caption",(char *) "default_value",(char *) "parent", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:GetPasswordFromUser",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetPasswordFromUser((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_GetSingleChoice(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    wxString *arg4 = (wxString *) 0 ;
    wxWindow *arg5 = (wxWindow *) NULL ;
    int arg6 = (int) -1 ;
    int arg7 = (int) -1 ;
    bool arg8 = (bool) true ;
    int arg9 = (int) 150 ;
    int arg10 = (int) 200 ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    char *kwnames[] = {
        (char *) "message",(char *) "caption",(char *) "choices",(char *) "parent",(char *) "x",(char *) "y",(char *) "centre",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OOOOOO:GetSingleChoice",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = PyList_Size(obj2);
        arg4 = wxString_LIST_helper(obj2);
        if (arg4 == NULL) SWIG_fail;
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg5, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    if (obj4) {
        {
            arg6 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg7 = static_cast<int >(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg8 = static_cast<bool >(SWIG_As_bool(obj6)); 
            if (SWIG_arg_fail(8)) SWIG_fail;
        }
    }
    if (obj7) {
        {
            arg9 = static_cast<int >(SWIG_As_int(obj7)); 
            if (SWIG_arg_fail(9)) SWIG_fail;
        }
    }
    if (obj8) {
        {
            arg10 = static_cast<int >(SWIG_As_int(obj8)); 
            if (SWIG_arg_fail(10)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetSingleChoice((wxString const &)*arg1,(wxString const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (arg4) delete [] arg4;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (arg4) delete [] arg4;
    }
    return NULL;
}


static PyObject *_wrap_GetSingleChoiceIndex(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    wxString *arg4 = (wxString *) 0 ;
    wxWindow *arg5 = (wxWindow *) NULL ;
    int arg6 = (int) -1 ;
    int arg7 = (int) -1 ;
    bool arg8 = (bool) true ;
    int arg9 = (int) 150 ;
    int arg10 = (int) 200 ;
    int result;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    char *kwnames[] = {
        (char *) "message",(char *) "caption",(char *) "choices",(char *) "parent",(char *) "x",(char *) "y",(char *) "centre",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OOOOOO:GetSingleChoiceIndex",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = PyList_Size(obj2);
        arg4 = wxString_LIST_helper(obj2);
        if (arg4 == NULL) SWIG_fail;
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg5, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    if (obj4) {
        {
            arg6 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg7 = static_cast<int >(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg8 = static_cast<bool >(SWIG_As_bool(obj6)); 
            if (SWIG_arg_fail(8)) SWIG_fail;
        }
    }
    if (obj7) {
        {
            arg9 = static_cast<int >(SWIG_As_int(obj7)); 
            if (SWIG_arg_fail(9)) SWIG_fail;
        }
    }
    if (obj8) {
        {
            arg10 = static_cast<int >(SWIG_As_int(obj8)); 
            if (SWIG_arg_fail(10)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxGetSingleChoiceIndex((wxString const &)*arg1,(wxString const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (arg4) delete [] arg4;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (arg4) delete [] arg4;
    }
    return NULL;
}


static PyObject *_wrap_MessageBox(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    int arg3 = (int) wxOK|wxCENTRE ;
    wxWindow *arg4 = (wxWindow *) NULL ;
    int arg5 = (int) -1 ;
    int arg6 = (int) -1 ;
    int result;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "message",(char *) "caption",(char *) "style",(char *) "parent",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOO:MessageBox",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = static_cast<int >(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxMessageBox((wxString const &)*arg1,(wxString const &)*arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ColourDisplay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":ColourDisplay",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxColourDisplay();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DisplayDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DisplayDepth",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDisplayDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetDisplayDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetDisplayDepth",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxGetDisplayDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DisplaySize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int temp1 ;
    int res1 = 0 ;
    int temp2 ;
    int res2 = 0 ;
    char *kwnames[] = {
        NULL 
    };
    
    arg1 = &temp1; res1 = SWIG_NEWOBJ;
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DisplaySize",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDisplaySize(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res1 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg1)) : SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetDisplaySize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSize result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetDisplaySize",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetDisplaySize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize(static_cast<wxSize & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DisplaySizeMM(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int temp1 ;
    int res1 = 0 ;
    int temp2 ;
    int res2 = 0 ;
    char *kwnames[] = {
        NULL 
    };
    
    arg1 = &temp1; res1 = SWIG_NEWOBJ;
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DisplaySizeMM",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDisplaySizeMM(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res1 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg1)) : SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetDisplaySizeMM(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSize result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetDisplaySizeMM",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetDisplaySizeMM();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize(static_cast<wxSize & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClientDisplayRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int temp1 ;
    int res1 = 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    char *kwnames[] = {
        NULL 
    };
    
    arg1 = &temp1; res1 = SWIG_NEWOBJ;
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":ClientDisplayRect",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxClientDisplayRect(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res1 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg1)) : SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetClientDisplayRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxRect result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetClientDisplayRect",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetClientDisplayRect();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect(static_cast<wxRect & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetCursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCursor *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "cursor", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SetCursor",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCursor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxCursor");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxSetCursor(*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetXDisplay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    void *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetXDisplay",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (void *)wxGetXDisplay();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BeginBusyCursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCursor *arg1 = (wxCursor *) wxHOURGLASS_CURSOR ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "cursor", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:BeginBusyCursor",kwnames,&obj0)) goto fail;
    if (obj0) {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCursor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxBeginBusyCursor(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetMousePosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPoint result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetMousePosition",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetMousePosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint(static_cast<wxPoint & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FindWindowAtPointer(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":FindWindowAtPointer",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindow *)FindWindowAtPointer();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetActiveWindow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetActiveWindow",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindow *)wxGetActiveWindow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GenericFindWindowAtPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPoint *arg1 = 0 ;
    wxWindow *result;
    wxPoint temp1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GenericFindWindowAtPoint",kwnames,&obj0)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxPoint_helper(obj0, &arg1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindow *)wxGenericFindWindowAtPoint((wxPoint const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FindWindowAtPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPoint *arg1 = 0 ;
    wxWindow *result;
    wxPoint temp1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FindWindowAtPoint",kwnames,&obj0)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxPoint_helper(obj0, &arg1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindow *)wxFindWindowAtPoint((wxPoint const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetTopLevelParent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindow *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GetTopLevelParent",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindow *)wxGetTopLevelParent(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LaunchDefaultBrowser(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "url", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LaunchDefaultBrowser",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxLaunchDefaultBrowser((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_GetKeyState(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxKeyCode arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "key", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GetKeyState",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxKeyCode >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxGetKeyState(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MouseState(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_MouseState",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMouseState *)new wxMouseState();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMouseState, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MouseState(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_MouseState",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_GetX(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_GetX",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetX();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_GetY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_GetY",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetY();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_LeftDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_LeftDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->LeftDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_MiddleDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_MiddleDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->MiddleDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_RightDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_RightDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->RightDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_ControlDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_ControlDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->ControlDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_ShiftDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_ShiftDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->ShiftDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_AltDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_AltDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->AltDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_MetaDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_MetaDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->MetaDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_CmdDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MouseState_CmdDown",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->CmdDown();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetX(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetX",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetX(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetY",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetY(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetLeftDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "down", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetLeftDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLeftDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetMiddleDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "down", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetMiddleDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMiddleDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetRightDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "down", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetRightDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetRightDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetControlDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "down", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetControlDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetControlDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetShiftDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "down", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetShiftDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetShiftDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetAltDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "down", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetAltDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetAltDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseState_SetMetaDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState *arg1 = (wxMouseState *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "down", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MouseState_SetMetaDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMouseState, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMetaDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MouseState_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMouseState, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GetMouseState(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMouseState result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetMouseState",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetMouseState();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxMouseState * resultptr;
        resultptr = new wxMouseState(static_cast<wxMouseState & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxMouseState, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WakeUpMainThread(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":WakeUpMainThread",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxWakeUpMainThread();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutexGuiEnter(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":MutexGuiEnter",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxMutexGuiEnter();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutexGuiLeave(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":MutexGuiLeave",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxMutexGuiLeave();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutexGuiLocker(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMutexGuiLocker *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_MutexGuiLocker",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMutexGuiLocker *)new wxMutexGuiLocker();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMutexGuiLocker, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MutexGuiLocker(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMutexGuiLocker *arg1 = (wxMutexGuiLocker *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_MutexGuiLocker",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMutexGuiLocker, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MutexGuiLocker_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMutexGuiLocker, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Thread_IsMain(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Thread_IsMain",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxThread_IsMain();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ToolTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxToolTip *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "tip", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_ToolTip",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxToolTip *)new wxToolTip((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxToolTip, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_ToolTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxToolTip *arg1 = (wxToolTip *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ToolTip",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxToolTip, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ToolTip_SetTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxToolTip *arg1 = (wxToolTip *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tip", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ToolTip_SetTip",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxToolTip, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetTip((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ToolTip_GetTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxToolTip *arg1 = (wxToolTip *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ToolTip_GetTip",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxToolTip, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetTip();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ToolTip_GetWindow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxToolTip *arg1 = (wxToolTip *) 0 ;
    wxWindow *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ToolTip_GetWindow",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxToolTip, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindow *)(arg1)->GetWindow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ToolTip_Enable(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "flag", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ToolTip_Enable",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxToolTip::Enable(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ToolTip_SetDelay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "milliseconds", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ToolTip_SetDelay",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxToolTip::SetDelay(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ToolTip_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxToolTip, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Caret(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    wxCaret *result;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "window",(char *) "size", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_Caret",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCaret *)new wxCaret(arg1,(wxSize const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxCaret, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Caret(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Caret",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_Destroy(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_Destroy",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxCaret_Destroy(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_IsOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_IsOk",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_IsVisible(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_IsVisible",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsVisible();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_GetPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    wxPoint result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_GetPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint(static_cast<wxPoint & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_GetPositionTuple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_GetPositionTuple",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetPosition(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_GetSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_GetSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize(static_cast<wxSize & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_GetSizeTuple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_GetSizeTuple",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetSize(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_GetWindow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    wxWindow *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_GetWindow",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindow *)(arg1)->GetWindow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_MoveXY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Caret_MoveXY",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Move(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_Move(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Caret_Move",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Move((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_SetSizeWH(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Caret_SetSizeWH",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetSize(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_SetSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    wxSize *arg2 = 0 ;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "size", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Caret_SetSize",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetSize((wxSize const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_Show(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    int arg2 = (int) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "show", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Caret_Show",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Show(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_Hide(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCaret *arg1 = (wxCaret *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_Hide",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCaret, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Hide();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_GetBlinkTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Caret_GetBlinkTime",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxCaret::GetBlinkTime();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Caret_SetBlinkTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "milliseconds", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Caret_SetBlinkTime",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxCaret::SetBlinkTime(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Caret_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxCaret, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BusyCursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCursor *arg1 = (wxCursor *) wxHOURGLASS_CURSOR ;
    wxBusyCursor *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "cursor", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_BusyCursor",kwnames,&obj0)) goto fail;
    if (obj0) {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCursor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBusyCursor *)new wxBusyCursor(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBusyCursor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BusyCursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxBusyCursor *arg1 = (wxBusyCursor *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_BusyCursor",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBusyCursor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BusyCursor_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBusyCursor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_WindowDisabler(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) NULL ;
    wxWindowDisabler *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "winToSkip", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_WindowDisabler",kwnames,&obj0)) goto fail;
    if (obj0) {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindowDisabler *)new wxWindowDisabler(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxWindowDisabler, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_WindowDisabler(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindowDisabler *arg1 = (wxWindowDisabler *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_WindowDisabler",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindowDisabler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * WindowDisabler_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxWindowDisabler, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BusyInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxBusyInfo *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "message", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_BusyInfo",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBusyInfo *)new wxBusyInfo((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBusyInfo, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_BusyInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxBusyInfo *arg1 = (wxBusyInfo *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_BusyInfo",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBusyInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BusyInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBusyInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_StopWatch(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStopWatch *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_StopWatch",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxStopWatch *)new wxStopWatch();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxStopWatch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StopWatch_Start(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStopWatch *arg1 = (wxStopWatch *) 0 ;
    long arg2 = (long) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "t0", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:StopWatch_Start",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStopWatch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<long >(SWIG_As_long(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Start(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StopWatch_Pause(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStopWatch *arg1 = (wxStopWatch *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StopWatch_Pause",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStopWatch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Pause();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StopWatch_Resume(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStopWatch *arg1 = (wxStopWatch *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StopWatch_Resume",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStopWatch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Resume();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StopWatch_Time(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStopWatch *arg1 = (wxStopWatch *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StopWatch_Time",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStopWatch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)((wxStopWatch const *)arg1)->Time();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StopWatch_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxStopWatch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileHistory(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) 9 ;
    int arg2 = (int) wxID_FILE1 ;
    wxFileHistory *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "maxFiles",(char *) "idBase", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_FileHistory",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileHistory *)new wxFileHistory(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileHistory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FileHistory(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FileHistory",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_AddFileToHistory(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "file", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_AddFileToHistory",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddFileToHistory((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FileHistory_RemoveFileFromHistory(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "i", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_RemoveFileFromHistory",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemoveFileFromHistory(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_GetMaxFiles(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileHistory_GetMaxFiles",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFileHistory const *)arg1)->GetMaxFiles();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_UseMenu(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    wxMenu *arg2 = (wxMenu *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "menu", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_UseMenu",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->UseMenu(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_RemoveMenu(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    wxMenu *arg2 = (wxMenu *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "menu", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_RemoveMenu",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemoveMenu(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_Load(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    wxConfigBase *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "config", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_Load",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxConfigBase");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Load(*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_Save(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    wxConfigBase *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "config", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_Save",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxConfigBase");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Save(*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_AddFilesToMenu(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileHistory_AddFilesToMenu",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddFilesToMenu();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_AddFilesToThisMenu(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    wxMenu *arg2 = (wxMenu *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "menu", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_AddFilesToThisMenu",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddFilesToMenu(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_GetHistoryFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    int arg2 ;
    wxString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "i", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileHistory_GetHistoryFile",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFileHistory const *)arg1)->GetHistoryFile(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHistory_GetCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileHistory *arg1 = (wxFileHistory *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileHistory_GetCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileHistory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFileHistory const *)arg1)->GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileHistory_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFileHistory, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SingleInstanceChecker(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxSingleInstanceChecker *result;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "name",(char *) "path", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_SingleInstanceChecker",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxSingleInstanceChecker *)new wxSingleInstanceChecker((wxString const &)*arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxSingleInstanceChecker, 1);
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_new_PreSingleInstanceChecker(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSingleInstanceChecker *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_PreSingleInstanceChecker",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxSingleInstanceChecker *)new wxSingleInstanceChecker();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxSingleInstanceChecker, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SingleInstanceChecker(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSingleInstanceChecker *arg1 = (wxSingleInstanceChecker *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_SingleInstanceChecker",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSingleInstanceChecker, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SingleInstanceChecker_Create(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSingleInstanceChecker *arg1 = (wxSingleInstanceChecker *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    bool result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "path", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:SingleInstanceChecker_Create",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSingleInstanceChecker, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Create((wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_SingleInstanceChecker_IsAnotherRunning(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSingleInstanceChecker *arg1 = (wxSingleInstanceChecker *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:SingleInstanceChecker_IsAnotherRunning",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSingleInstanceChecker, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxSingleInstanceChecker const *)arg1)->IsAnotherRunning();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SingleInstanceChecker_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxSingleInstanceChecker, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_DrawWindowOnDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxDC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "window",(char *) "dc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DrawWindowOnDC",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDrawWindowOnDC(arg1,(wxDC const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TipProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTipProvider *arg1 = (wxTipProvider *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_TipProvider",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTipProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TipProvider_GetTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTipProvider *arg1 = (wxTipProvider *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TipProvider_GetTip",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTipProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetTip();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TipProvider_GetCurrentTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTipProvider *arg1 = (wxTipProvider *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TipProvider_GetCurrentTip",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTipProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)(arg1)->GetCurrentTip();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TipProvider_PreprocessTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTipProvider *arg1 = (wxTipProvider *) 0 ;
    wxString *arg2 = 0 ;
    wxString result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tip", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TipProvider_PreprocessTip",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTipProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->PreprocessTip((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * TipProvider_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxTipProvider, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PyTipProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    size_t arg1 ;
    wxPyTipProvider *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "currentTip", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_PyTipProvider",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<size_t >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyTipProvider *)new wxPyTipProvider(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyTipProvider, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PyTipProvider__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTipProvider *arg1 = (wxPyTipProvider *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PyTipProvider__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTipProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PyTipProvider_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyTipProvider, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ShowTip(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxTipProvider *arg2 = (wxTipProvider *) 0 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "parent",(char *) "tipProvider",(char *) "showAtStartup", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ShowTip",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTipProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxShowTip(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateFileTipProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    size_t arg2 ;
    wxTipProvider *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "filename",(char *) "currentTip", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CreateFileTipProvider",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = static_cast<size_t >(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxTipProvider *)wxCreateFileTipProvider((wxString const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTipProvider, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_Timer(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxEvtHandler *arg1 = (wxEvtHandler *) NULL ;
    int arg2 = (int) -1 ;
    wxPyTimer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "owner",(char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Timer",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEvtHandler, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyTimer *)new wxPyTimer(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyTimer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Timer(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Timer",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    int arg4 = (int) 1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class",(char *) "incref", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Timer__setCallbackInfo",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_SetOwner(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
    int arg3 = (int) -1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "owner",(char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:Timer_SetOwner",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxEvtHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetOwner(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_GetOwner(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    wxEvtHandler *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Timer_GetOwner",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxEvtHandler *)(arg1)->GetOwner();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_Start(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    int arg2 = (int) -1 ;
    bool arg3 = (bool) false ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "milliseconds",(char *) "oneShot", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:Timer_Start",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Start(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_Stop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Timer_Stop",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Stop();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_Notify(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Timer_Notify",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Notify();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_IsRunning(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Timer_IsRunning",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxPyTimer const *)arg1)->IsRunning();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_GetInterval(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Timer_GetInterval",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxPyTimer const *)arg1)->GetInterval();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_IsOneShot(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Timer_IsOneShot",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxPyTimer const *)arg1)->IsOneShot();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Timer_GetId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTimer *arg1 = (wxPyTimer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Timer_GetId",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTimer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxPyTimer const *)arg1)->GetId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Timer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyTimer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TimerEvent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) 0 ;
    int arg2 = (int) 0 ;
    wxTimerEvent *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "timerid",(char *) "interval", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_TimerEvent",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxTimerEvent *)new wxTimerEvent(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimerEvent, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimerEvent_GetInterval(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimerEvent *arg1 = (wxTimerEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimerEvent_GetInterval",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimerEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxTimerEvent const *)arg1)->GetInterval();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TimerEvent_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxTimerEvent, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TimerRunner__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxTimer *arg1 = 0 ;
    wxTimerRunner *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TimerRunner",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimer, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxTimer");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxTimerRunner *)new wxTimerRunner(*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimerRunner, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TimerRunner__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxTimer *arg1 = 0 ;
    int arg2 ;
    bool arg3 = (bool) false ;
    wxTimerRunner *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:new_TimerRunner",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimer, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxTimer");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxTimerRunner *)new wxTimerRunner(*arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimerRunner, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TimerRunner(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxTimer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_TimerRunner__SWIG_0(self,args);
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxTimer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_TimerRunner__SWIG_1(self,args);
                }
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_TimerRunner__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_TimerRunner'");
    return NULL;
}


static PyObject *_wrap_delete_TimerRunner(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimerRunner *arg1 = (wxTimerRunner *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_TimerRunner",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimerRunner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimerRunner_Start(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimerRunner *arg1 = (wxTimerRunner *) 0 ;
    int arg2 ;
    bool arg3 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "milli",(char *) "oneShot", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:TimerRunner_Start",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimerRunner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Start(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TimerRunner_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxTimerRunner, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Log(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLog *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_Log",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLog *)new wxLog();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLog, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Log(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLog *arg1 = (wxLog *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Log",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLog, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_IsEnabled(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_IsEnabled",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxLog::IsEnabled();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_EnableLogging(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool arg1 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "doIt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:Log_EnableLogging",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxLog::EnableLogging(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_OnLog(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogLevel arg1 ;
    wxChar *arg2 = (wxChar *) 0 ;
    time_t arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "level",(char *) "szString",(char *) "t", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Log_OnLog",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<wxLogLevel >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxChar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<time_t >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::OnLog(arg1,(wxChar const *)arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_Flush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLog *arg1 = (wxLog *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_Flush",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLog, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Flush();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_FlushActive(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_FlushActive",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::FlushActive();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_GetActiveTarget(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLog *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_GetActiveTarget",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLog *)wxLog::GetActiveTarget();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLog, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_SetActiveTarget(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLog *arg1 = (wxLog *) 0 ;
    wxLog *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "pLogger", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_SetActiveTarget",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLog, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLog *)wxLog::SetActiveTarget(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLog, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_Suspend(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_Suspend",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::Suspend();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_Resume(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_Resume",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::Resume();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_SetVerbose(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool arg1 = (bool) true ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "bVerbose", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:Log_SetVerbose",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::SetVerbose(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_SetLogLevel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogLevel arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "logLevel", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_SetLogLevel",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxLogLevel >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::SetLogLevel(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_DontCreateOnDemand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_DontCreateOnDemand",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::DontCreateOnDemand();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_SetTraceMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTraceMask arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "ulMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_SetTraceMask",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxTraceMask >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::SetTraceMask(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_AddTraceMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "str", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_AddTraceMask",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::AddTraceMask((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Log_RemoveTraceMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "str", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_RemoveTraceMask",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::RemoveTraceMask((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Log_ClearTraceMasks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_ClearTraceMasks",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::ClearTraceMasks();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_GetTraceMasks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxArrayString *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_GetTraceMasks",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxArrayString const &_result_ref = wxLog::GetTraceMasks();
            result = (wxArrayString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxArrayString2PyList_helper(*result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_SetTimestamp(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxChar *arg1 = (wxChar *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "ts", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_SetTimestamp",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxChar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog::SetTimestamp((wxChar const *)arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_GetVerbose(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_GetVerbose",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxLog::GetVerbose();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_GetTraceMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTraceMask result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_GetTraceMask",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxTraceMask)wxLog::GetTraceMask();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_IsAllowedTraceMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxChar *arg1 = (wxChar *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "mask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_IsAllowedTraceMask",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxChar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxLog::IsAllowedTraceMask((wxChar const *)arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_GetLogLevel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogLevel result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_GetLogLevel",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogLevel)wxLog::GetLogLevel();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_GetTimestamp(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxChar *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_GetTimestamp",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxChar *)wxLog::GetTimestamp();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxChar, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_TimeStamp(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Log_TimeStamp",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxLog_TimeStamp();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Log_Destroy(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLog *arg1 = (wxLog *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Log_Destroy",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLog, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLog_Destroy(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Log_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLog, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LogStderr(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogStderr *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_LogStderr",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogStderr *)new wxLogStderr();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLogStderr, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LogStderr_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLogStderr, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LogTextCtrl(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTextCtrl *arg1 = (wxTextCtrl *) 0 ;
    wxLogTextCtrl *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "pTextCtrl", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_LogTextCtrl",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTextCtrl, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogTextCtrl *)new wxLogTextCtrl(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLogTextCtrl, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LogTextCtrl_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLogTextCtrl, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LogGui(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogGui *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_LogGui",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogGui *)new wxLogGui();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLogGui, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LogGui_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLogGui, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LogWindow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFrame *arg1 = (wxFrame *) 0 ;
    wxString *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    wxLogWindow *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "pParent",(char *) "szTitle",(char *) "bShow",(char *) "bPassToOld", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_LogWindow",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<bool >(SWIG_As_bool(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogWindow *)new wxLogWindow(arg1,(wxString const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLogWindow, 1);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LogWindow_Show(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogWindow *arg1 = (wxLogWindow *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bShow", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:LogWindow_Show",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Show(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogWindow_GetFrame(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogWindow *arg1 = (wxLogWindow *) 0 ;
    wxFrame *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogWindow_GetFrame",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFrame *)((wxLogWindow const *)arg1)->GetFrame();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, (bool)0); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogWindow_GetOldLog(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogWindow *arg1 = (wxLogWindow *) 0 ;
    wxLog *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogWindow_GetOldLog",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLog *)((wxLogWindow const *)arg1)->GetOldLog();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLog, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogWindow_IsPassingMessages(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogWindow *arg1 = (wxLogWindow *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogWindow_IsPassingMessages",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxLogWindow const *)arg1)->IsPassingMessages();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogWindow_PassMessages(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogWindow *arg1 = (wxLogWindow *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bDoPass", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LogWindow_PassMessages",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->PassMessages(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LogWindow_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLogWindow, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LogChain(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLog *arg1 = (wxLog *) 0 ;
    wxLogChain *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "logger", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_LogChain",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLog, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogChain *)new wxLogChain(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLogChain, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogChain_SetLog(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogChain *arg1 = (wxLogChain *) 0 ;
    wxLog *arg2 = (wxLog *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "logger", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LogChain_SetLog",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxLog, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLog(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogChain_PassMessages(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogChain *arg1 = (wxLogChain *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bDoPass", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LogChain_PassMessages",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->PassMessages(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogChain_IsPassingMessages(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogChain *arg1 = (wxLogChain *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogChain_IsPassingMessages",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsPassingMessages();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogChain_GetOldLog(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogChain *arg1 = (wxLogChain *) 0 ;
    wxLog *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogChain_GetOldLog",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLog *)(arg1)->GetOldLog();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLog, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LogChain_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLogChain, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LogBuffer(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogBuffer *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_LogBuffer",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogBuffer *)new wxLogBuffer();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLogBuffer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogBuffer_GetBuffer(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogBuffer *arg1 = (wxLogBuffer *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogBuffer_GetBuffer",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxLogBuffer const *)arg1)->GetBuffer();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogBuffer_Flush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogBuffer *arg1 = (wxLogBuffer *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogBuffer_Flush",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Flush();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LogBuffer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLogBuffer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_SysErrorCode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    unsigned long result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":SysErrorCode",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (unsigned long)wxSysErrorCode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SysErrorMsg(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    unsigned long arg1 = (unsigned long) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "nErrCode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:SysErrorMsg",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<unsigned long >(SWIG_As_unsigned_SS_long(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxSysErrorMsg(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LogFatalError(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogFatalError",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogFatalError((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogError(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogError",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogError((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogWarning(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogWarning",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogWarning((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogMessage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogMessage",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogMessage((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogInfo",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogInfo((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogDebug(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogDebug",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogDebug((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogVerbose(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogVerbose",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogVerbose((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogStatus(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogStatus",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogStatus((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogStatusFrame(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFrame *arg1 = (wxFrame *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "pFrame",(char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LogStatusFrame",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogStatusFrame(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LogSysError(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LogSysError",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogSysError((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_LogGeneric(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "level",(char *) "msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LogGeneric",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<unsigned long >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogGeneric(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LogTrace__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LogTrace",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<unsigned long >(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogTrace(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LogTrace__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LogTrace",&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyLogTrace((wxString const &)*arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LogTrace(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
            }
            if (_v) {
                return _wrap_LogTrace__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
            }
            if (_v) {
                return _wrap_LogTrace__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'LogTrace'");
    return NULL;
}


static PyObject *_wrap_SafeShowMessage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "title",(char *) "text", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SafeShowMessage",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxSafeShowMessage((wxString const &)*arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_new_LogNull(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogNull *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_LogNull",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLogNull *)new wxLogNull();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLogNull, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_LogNull(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLogNull *arg1 = (wxLogNull *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_LogNull",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLogNull, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LogNull_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLogNull, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PyLog(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyLog *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_PyLog",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyLog *)new wxPyLog();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyLog, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PyLog__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyLog *arg1 = (wxPyLog *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PyLog__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyLog, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PyLog_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyLog, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Process_Kill(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxSignal arg2 = (wxSignal) wxSIGTERM ;
    int arg3 = (int) wxKILL_NOCHILDREN ;
    wxKillError result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "pid",(char *) "sig",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:Process_Kill",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<wxSignal >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxKillError)wxPyProcess::Kill(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_Exists(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "pid", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_Exists",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxPyProcess::Exists(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_Open(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    int arg2 = (int) wxEXEC_ASYNC ;
    wxPyProcess *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "cmd",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Process_Open",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyProcess *)wxPyProcess::Open((wxString const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyProcess, 0);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_Process(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxEvtHandler *arg1 = (wxEvtHandler *) NULL ;
    int arg2 = (int) -1 ;
    wxPyProcess *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "parent",(char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Process",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEvtHandler, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyProcess *)new wxPyProcess(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyProcess, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Process__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_OnTerminate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pid",(char *) "status", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Process_OnTerminate",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->OnTerminate(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_Redirect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_Redirect",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Redirect();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_IsRedirected(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_IsRedirected",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsRedirected();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_Detach(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_Detach",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Detach();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_GetInputStream(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    wxInputStream *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_GetInputStream",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxInputStream *)(arg1)->GetInputStream();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPyInputStream * _ptr = NULL;
        
        if (result) {
            _ptr = new wxPyInputStream(result);
        }
        resultobj = wxPyConstructObject(_ptr, wxT("wxPyInputStream"), 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_GetErrorStream(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    wxInputStream *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_GetErrorStream",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxInputStream *)(arg1)->GetErrorStream();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPyInputStream * _ptr = NULL;
        
        if (result) {
            _ptr = new wxPyInputStream(result);
        }
        resultobj = wxPyConstructObject(_ptr, wxT("wxPyInputStream"), 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_GetOutputStream(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    wxOutputStream *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_GetOutputStream",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxOutputStream *)(arg1)->GetOutputStream();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxOutputStream, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_CloseOutput(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_CloseOutput",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CloseOutput();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_IsInputOpened(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_IsInputOpened",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxPyProcess const *)arg1)->IsInputOpened();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_IsInputAvailable(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_IsInputAvailable",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxPyProcess const *)arg1)->IsInputAvailable();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Process_IsErrorAvailable(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyProcess *arg1 = (wxPyProcess *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Process_IsErrorAvailable",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxPyProcess const *)arg1)->IsErrorAvailable();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Process_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyProcess, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ProcessEvent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    wxProcessEvent *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "id",(char *) "pid",(char *) "exitcode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOO:new_ProcessEvent",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxProcessEvent *)new wxProcessEvent(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxProcessEvent, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProcessEvent_GetPid(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxProcessEvent *arg1 = (wxProcessEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ProcessEvent_GetPid",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxProcessEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetPid();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProcessEvent_GetExitCode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxProcessEvent *arg1 = (wxProcessEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ProcessEvent_GetExitCode",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxProcessEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetExitCode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProcessEvent_m_pid_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxProcessEvent *arg1 = (wxProcessEvent *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "m_pid", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ProcessEvent_m_pid_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxProcessEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m_pid = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProcessEvent_m_pid_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxProcessEvent *arg1 = (wxProcessEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ProcessEvent_m_pid_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxProcessEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->m_pid);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProcessEvent_m_exitcode_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxProcessEvent *arg1 = (wxProcessEvent *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "m_exitcode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ProcessEvent_m_exitcode_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxProcessEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m_exitcode = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProcessEvent_m_exitcode_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxProcessEvent *arg1 = (wxProcessEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ProcessEvent_m_exitcode_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxProcessEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->m_exitcode);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ProcessEvent_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxProcessEvent, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Execute(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    int arg2 = (int) wxEXEC_ASYNC ;
    wxPyProcess *arg3 = (wxPyProcess *) NULL ;
    long result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "command",(char *) "flags",(char *) "process", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:Execute",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxPyProcess, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxExecute((wxString const &)*arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Kill(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    wxSignal arg2 = (wxSignal) wxSIGTERM ;
    wxKillError *arg3 = (wxKillError *) 0 ;
    int arg4 = (int) wxKILL_NOCHILDREN ;
    int result;
    wxKillError temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "pid",(char *) "sig",(char *) "flags", NULL 
    };
    
    {
        arg3 = &temp3; 
    }
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:Kill",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<wxSignal >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxKill(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        PyObject* o;
        o = PyInt_FromLong((long) (*arg3));
        
        resultobj = t_output_helper(resultobj, o);
        
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Joystick(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) wxJOYSTICK1 ;
    wxJoystick *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "joystick", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_Joystick",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxJoystick *)new wxJoystick(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxJoystick, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Joystick(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Joystick",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    wxPoint result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint(static_cast<wxPoint & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetZPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetZPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetZPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetButtonState(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetButtonState",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetButtonState();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetPOVPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetPOVPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetPOVPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetPOVCTSPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetPOVCTSPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetPOVCTSPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetRudderPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetRudderPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetRudderPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetUPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetUPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetUPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetVPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetVPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetVPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetMovementThreshold(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetMovementThreshold",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetMovementThreshold();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_SetMovementThreshold(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "threshold", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Joystick_SetMovementThreshold",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMovementThreshold(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_IsOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_IsOk",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetNumberJoysticks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetNumberJoysticks",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetNumberJoysticks();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetManufacturerId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetManufacturerId",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetManufacturerId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetProductId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetProductId",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetProductId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetProductName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetProductName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetProductName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetXMin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetXMin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetXMin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetYMin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetYMin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetYMin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetZMin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetZMin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetZMin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetXMax(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetXMax",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetXMax();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetYMax(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetYMax",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetYMax();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetZMax(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetZMax",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetZMax();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetNumberButtons(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetNumberButtons",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetNumberButtons();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetNumberAxes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetNumberAxes",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetNumberAxes();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetMaxButtons(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetMaxButtons",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetMaxButtons();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetMaxAxes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetMaxAxes",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetMaxAxes();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetPollingMin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetPollingMin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetPollingMin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetPollingMax(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetPollingMax",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetPollingMax();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetRudderMin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetRudderMin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetRudderMin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetRudderMax(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetRudderMax",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetRudderMax();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetUMin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetUMin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetUMin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetUMax(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetUMax",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetUMax();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetVMin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetVMin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetVMin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_GetVMax(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_GetVMax",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetVMax();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_HasRudder(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_HasRudder",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HasRudder();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_HasZ(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_HasZ",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HasZ();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_HasU(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_HasU",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HasU();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_HasV(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_HasV",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HasV();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_HasPOV(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_HasPOV",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HasPOV();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_HasPOV4Dir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_HasPOV4Dir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HasPOV4Dir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_HasPOVCTS(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_HasPOVCTS",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HasPOVCTS();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_SetCapture(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    int arg3 = (int) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "win",(char *) "pollingFreq", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:Joystick_SetCapture",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SetCapture(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Joystick_ReleaseCapture(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystick *arg1 = (wxJoystick *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Joystick_ReleaseCapture",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystick, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->ReleaseCapture();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Joystick_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxJoystick, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_JoystickEvent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxEventType arg1 = (wxEventType) wxEVT_NULL ;
    int arg2 = (int) 0 ;
    int arg3 = (int) wxJOYSTICK1 ;
    int arg4 = (int) 0 ;
    wxJoystickEvent *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "type",(char *) "state",(char *) "joystick",(char *) "change", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_JoystickEvent",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<wxEventType >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxJoystickEvent *)new wxJoystickEvent(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxJoystickEvent, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_GetPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    wxPoint result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_GetPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxJoystickEvent const *)arg1)->GetPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint(static_cast<wxPoint & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_GetZPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_GetZPosition",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxJoystickEvent const *)arg1)->GetZPosition();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_GetButtonState(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_GetButtonState",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxJoystickEvent const *)arg1)->GetButtonState();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_GetButtonChange(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_GetButtonChange",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxJoystickEvent const *)arg1)->GetButtonChange();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_GetJoystick(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_GetJoystick",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxJoystickEvent const *)arg1)->GetJoystick();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_SetJoystick(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "stick", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:JoystickEvent_SetJoystick",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetJoystick(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_SetButtonState(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "state", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:JoystickEvent_SetButtonState",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetButtonState(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_SetButtonChange(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "change", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:JoystickEvent_SetButtonChange",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetButtonChange(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_SetPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pos", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:JoystickEvent_SetPosition",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPosition((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_SetZPosition(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "zPos", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:JoystickEvent_SetZPosition",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetZPosition(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_IsButton(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_IsButton",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxJoystickEvent const *)arg1)->IsButton();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_IsMove(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_IsMove",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxJoystickEvent const *)arg1)->IsMove();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_IsZMove(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:JoystickEvent_IsZMove",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxJoystickEvent const *)arg1)->IsZMove();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_ButtonDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int arg2 = (int) wxJOY_BUTTON_ANY ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "but", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:JoystickEvent_ButtonDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxJoystickEvent const *)arg1)->ButtonDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_ButtonUp(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int arg2 = (int) wxJOY_BUTTON_ANY ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "but", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:JoystickEvent_ButtonUp",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxJoystickEvent const *)arg1)->ButtonUp(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_JoystickEvent_ButtonIsDown(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxJoystickEvent *arg1 = (wxJoystickEvent *) 0 ;
    int arg2 = (int) wxJOY_BUTTON_ANY ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "but", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:JoystickEvent_ButtonIsDown",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxJoystickEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxJoystickEvent const *)arg1)->ButtonIsDown(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * JoystickEvent_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxJoystickEvent, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Sound(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxSound *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "fileName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_Sound",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxSound *)new_wxSound((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxSound, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_SoundFromData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    wxSound *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_SoundFromData",kwnames,&obj0)) goto fail;
    arg1 = obj0;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxSound *)new_wxSound(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxSound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Sound(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSound *arg1 = (wxSound *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Sound",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sound_Create(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSound *arg1 = (wxSound *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "fileName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Sound_Create",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Create((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Sound_CreateFromData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSound *arg1 = (wxSound *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Sound_CreateFromData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxSound_CreateFromData(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sound_IsOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSound *arg1 = (wxSound *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Sound_IsOk",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sound_Play(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxSound *arg1 = (wxSound *) 0 ;
    unsigned int arg2 = (unsigned int) wxSOUND_ASYNC ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Sound_Play",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxSound const *)arg1)->Play(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sound_PlaySound(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    unsigned int arg2 = (unsigned int) wxSOUND_ASYNC ;
    bool result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "filename",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Sound_PlaySound",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxSound::Play((wxString const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Sound_Stop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Sound_Stop",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxSound::Stop();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Sound_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxSound, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileTypeInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    wxString *arg4 = 0 ;
    wxFileTypeInfo *result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "mimeType",(char *) "openCmd",(char *) "printCmd",(char *) "desc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:new_FileTypeInfo",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = wxString_in_helper(obj2);
        if (arg3 == NULL) SWIG_fail;
        temp3 = true;
    }
    {
        arg4 = wxString_in_helper(obj3);
        if (arg4 == NULL) SWIG_fail;
        temp4 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileTypeInfo *)new wxFileTypeInfo((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileTypeInfo, 1);
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_new_FileTypeInfoSequence(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxArrayString *arg1 = 0 ;
    wxFileTypeInfo *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "sArray", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_FileTypeInfoSequence",kwnames,&obj0)) goto fail;
    {
        if (! PySequence_Check(obj0)) {
            PyErr_SetString(PyExc_TypeError, "Sequence of strings expected.");
            SWIG_fail;
        }
        arg1 = new wxArrayString;
        temp1 = true;
        int i, len=PySequence_Length(obj0);
        for (i=0; i<len; i++) {
            PyObject* item = PySequence_GetItem(obj0, i);
            wxString* s = wxString_in_helper(item);
            if (PyErr_Occurred())  SWIG_fail;
            arg1->Add(*s);
            delete s;
            Py_DECREF(item);
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileTypeInfo *)new wxFileTypeInfo((wxArrayString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileTypeInfo, 1);
    {
        if (temp1) delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1) delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_NullFileTypeInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_NullFileTypeInfo",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileTypeInfo *)new wxFileTypeInfo();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileTypeInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_IsValid(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_IsValid",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFileTypeInfo const *)arg1)->IsValid();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_SetIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 = (int) 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "iconFile",(char *) "iconIndex", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FileTypeInfo_SetIcon",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetIcon((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_SetShortDesc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "shortDesc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileTypeInfo_SetShortDesc",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetShortDesc((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetMimeType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetMimeType",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxFileTypeInfo const *)arg1)->GetMimeType();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetOpenCommand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetOpenCommand",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxFileTypeInfo const *)arg1)->GetOpenCommand();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetPrintCommand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetPrintCommand",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxFileTypeInfo const *)arg1)->GetPrintCommand();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetShortDesc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetShortDesc",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxFileTypeInfo const *)arg1)->GetShortDesc();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetDescription(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetDescription",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxFileTypeInfo const *)arg1)->GetDescription();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetExtensions(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxArrayString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetExtensions",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxArrayString const &_result_ref = ((wxFileTypeInfo const *)arg1)->GetExtensions();
            result = (wxArrayString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxArrayString2PyList_helper(*result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetExtensionsCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetExtensionsCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFileTypeInfo const *)arg1)->GetExtensionsCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetIconFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetIconFile",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxFileTypeInfo const *)arg1)->GetIconFile();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileTypeInfo_GetIconIndex(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = (wxFileTypeInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileTypeInfo_GetIconIndex",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFileTypeInfo const *)arg1)->GetIconIndex();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileTypeInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFileTypeInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileTypeInfo *arg1 = 0 ;
    wxFileType *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "ftInfo", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_FileType",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxFileTypeInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileType *)new wxFileType((wxFileTypeInfo const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FileType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FileType",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_GetMimeType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileType_GetMimeType",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetMimeType(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_GetMimeTypes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileType_GetMimeTypes",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetMimeTypes(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_GetExtensions(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileType_GetExtensions",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetExtensions(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_GetIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    wxIcon *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileType_GetIcon",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)wxFileType_GetIcon(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_GetIconInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileType_GetIconInfo",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetIconInfo(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_GetDescription(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileType_GetDescription",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetDescription(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_GetOpenCommand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    PyObject *result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename",(char *) "mimetype", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FileType_GetOpenCommand",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetOpenCommand(arg1,(wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FileType_GetPrintCommand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    PyObject *result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename",(char *) "mimetype", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FileType_GetPrintCommand",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetPrintCommand(arg1,(wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FileType_GetAllCommands(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    PyObject *result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename",(char *) "mimetype", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FileType_GetAllCommands",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFileType_GetAllCommands(arg1,(wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FileType_SetCommand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    bool arg4 = (bool) true ;
    bool result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "cmd",(char *) "verb",(char *) "overwriteprompt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:FileType_SetCommand",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = wxString_in_helper(obj2);
        if (arg3 == NULL) SWIG_fail;
        temp3 = true;
    }
    if (obj3) {
        {
            arg4 = static_cast<bool >(SWIG_As_bool(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SetCommand((wxString const &)*arg2,(wxString const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FileType_SetDefaultIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    int arg3 = (int) 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "cmd",(char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:FileType_SetDefaultIcon",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SetDefaultIcon((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FileType_Unassociate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileType *arg1 = (wxFileType *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileType_Unassociate",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Unassociate();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileType_ExpandCommand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "command",(char *) "filename",(char *) "mimetype", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FileType_ExpandCommand",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFileType_ExpandCommand((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject * FileType_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFileType, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_TheMimeTypesManager_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TheMimeTypesManager is read-only.");
    return 1;
}


static PyObject *_wrap_TheMimeTypesManager_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(wxTheMimeTypesManager), SWIGTYPE_p_wxMimeTypesManager, 0);
    return pyobj;
}


static PyObject *_wrap_MimeTypesManager_IsOfType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "mimeType",(char *) "wildcard", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MimeTypesManager_IsOfType",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxMimeTypesManager::IsOfType((wxString const &)*arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_new_MimeTypesManager(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_MimeTypesManager",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMimeTypesManager *)new wxMimeTypesManager();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMimeTypesManager, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_Initialize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    int arg2 = (int) wxMAILCAP_ALL ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mailcapStyle",(char *) "extraDir", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:MimeTypesManager_Initialize",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Initialize(arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_ClearData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MimeTypesManager_ClearData",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->ClearData();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_GetFileTypeFromExtension(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    wxString *arg2 = 0 ;
    wxFileType *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "ext", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MimeTypesManager_GetFileTypeFromExtension",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileType *)(arg1)->GetFileTypeFromExtension((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileType, 1);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_GetFileTypeFromMimeType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    wxString *arg2 = 0 ;
    wxFileType *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mimeType", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MimeTypesManager_GetFileTypeFromMimeType",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileType *)(arg1)->GetFileTypeFromMimeType((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileType, 1);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_ReadMailcap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    wxString *arg2 = 0 ;
    bool arg3 = (bool) false ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename",(char *) "fallback", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:MimeTypesManager_ReadMailcap",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->ReadMailcap((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_ReadMimeTypes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MimeTypesManager_ReadMimeTypes",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->ReadMimeTypes((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_EnumAllFileTypes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:MimeTypesManager_EnumAllFileTypes",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxMimeTypesManager_EnumAllFileTypes(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_AddFallback(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    wxFileTypeInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "ft", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MimeTypesManager_AddFallback",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxFileTypeInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddFallback((wxFileTypeInfo const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_Associate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    wxFileTypeInfo *arg2 = 0 ;
    wxFileType *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "ftInfo", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MimeTypesManager_Associate",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFileTypeInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxFileTypeInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileType *)(arg1)->Associate((wxFileTypeInfo const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MimeTypesManager_Unassociate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    wxFileType *arg2 = (wxFileType *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "ft", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MimeTypesManager_Unassociate",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFileType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Unassociate(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MimeTypesManager(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMimeTypesManager *arg1 = (wxMimeTypesManager *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_MimeTypesManager",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMimeTypesManager, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MimeTypesManager_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMimeTypesManager, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_ART_TOOLBAR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_TOOLBAR is read-only.");
    return 1;
}


static PyObject *_wrap_ART_TOOLBAR_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_TOOLBAR)->c_str(), (&wxPyART_TOOLBAR)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_TOOLBAR)->c_str(), (&wxPyART_TOOLBAR)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_MENU_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_MENU is read-only.");
    return 1;
}


static PyObject *_wrap_ART_MENU_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_MENU)->c_str(), (&wxPyART_MENU)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_MENU)->c_str(), (&wxPyART_MENU)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FRAME_ICON_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FRAME_ICON is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FRAME_ICON_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FRAME_ICON)->c_str(), (&wxPyART_FRAME_ICON)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FRAME_ICON)->c_str(), (&wxPyART_FRAME_ICON)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_CMN_DIALOG_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_CMN_DIALOG is read-only.");
    return 1;
}


static PyObject *_wrap_ART_CMN_DIALOG_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_CMN_DIALOG)->c_str(), (&wxPyART_CMN_DIALOG)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_CMN_DIALOG)->c_str(), (&wxPyART_CMN_DIALOG)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HELP_BROWSER_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HELP_BROWSER is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HELP_BROWSER_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HELP_BROWSER)->c_str(), (&wxPyART_HELP_BROWSER)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HELP_BROWSER)->c_str(), (&wxPyART_HELP_BROWSER)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_MESSAGE_BOX_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_MESSAGE_BOX is read-only.");
    return 1;
}


static PyObject *_wrap_ART_MESSAGE_BOX_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_MESSAGE_BOX)->c_str(), (&wxPyART_MESSAGE_BOX)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_MESSAGE_BOX)->c_str(), (&wxPyART_MESSAGE_BOX)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_BUTTON_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_BUTTON is read-only.");
    return 1;
}


static PyObject *_wrap_ART_BUTTON_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_BUTTON)->c_str(), (&wxPyART_BUTTON)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_BUTTON)->c_str(), (&wxPyART_BUTTON)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_OTHER_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_OTHER is read-only.");
    return 1;
}


static PyObject *_wrap_ART_OTHER_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_OTHER)->c_str(), (&wxPyART_OTHER)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_OTHER)->c_str(), (&wxPyART_OTHER)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_ADD_BOOKMARK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_ADD_BOOKMARK is read-only.");
    return 1;
}


static PyObject *_wrap_ART_ADD_BOOKMARK_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_ADD_BOOKMARK)->c_str(), (&wxPyART_ADD_BOOKMARK)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_ADD_BOOKMARK)->c_str(), (&wxPyART_ADD_BOOKMARK)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_DEL_BOOKMARK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_DEL_BOOKMARK is read-only.");
    return 1;
}


static PyObject *_wrap_ART_DEL_BOOKMARK_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_DEL_BOOKMARK)->c_str(), (&wxPyART_DEL_BOOKMARK)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_DEL_BOOKMARK)->c_str(), (&wxPyART_DEL_BOOKMARK)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HELP_SIDE_PANEL_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HELP_SIDE_PANEL is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HELP_SIDE_PANEL_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HELP_SIDE_PANEL)->c_str(), (&wxPyART_HELP_SIDE_PANEL)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HELP_SIDE_PANEL)->c_str(), (&wxPyART_HELP_SIDE_PANEL)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HELP_SETTINGS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HELP_SETTINGS is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HELP_SETTINGS_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HELP_SETTINGS)->c_str(), (&wxPyART_HELP_SETTINGS)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HELP_SETTINGS)->c_str(), (&wxPyART_HELP_SETTINGS)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HELP_BOOK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HELP_BOOK is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HELP_BOOK_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HELP_BOOK)->c_str(), (&wxPyART_HELP_BOOK)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HELP_BOOK)->c_str(), (&wxPyART_HELP_BOOK)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HELP_FOLDER_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HELP_FOLDER is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HELP_FOLDER_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HELP_FOLDER)->c_str(), (&wxPyART_HELP_FOLDER)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HELP_FOLDER)->c_str(), (&wxPyART_HELP_FOLDER)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HELP_PAGE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HELP_PAGE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HELP_PAGE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HELP_PAGE)->c_str(), (&wxPyART_HELP_PAGE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HELP_PAGE)->c_str(), (&wxPyART_HELP_PAGE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_GO_BACK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_GO_BACK is read-only.");
    return 1;
}


static PyObject *_wrap_ART_GO_BACK_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_GO_BACK)->c_str(), (&wxPyART_GO_BACK)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_GO_BACK)->c_str(), (&wxPyART_GO_BACK)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_GO_FORWARD_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_GO_FORWARD is read-only.");
    return 1;
}


static PyObject *_wrap_ART_GO_FORWARD_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_GO_FORWARD)->c_str(), (&wxPyART_GO_FORWARD)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_GO_FORWARD)->c_str(), (&wxPyART_GO_FORWARD)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_GO_UP_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_GO_UP is read-only.");
    return 1;
}


static PyObject *_wrap_ART_GO_UP_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_GO_UP)->c_str(), (&wxPyART_GO_UP)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_GO_UP)->c_str(), (&wxPyART_GO_UP)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_GO_DOWN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_GO_DOWN is read-only.");
    return 1;
}


static PyObject *_wrap_ART_GO_DOWN_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_GO_DOWN)->c_str(), (&wxPyART_GO_DOWN)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_GO_DOWN)->c_str(), (&wxPyART_GO_DOWN)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_GO_TO_PARENT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_GO_TO_PARENT is read-only.");
    return 1;
}


static PyObject *_wrap_ART_GO_TO_PARENT_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_GO_TO_PARENT)->c_str(), (&wxPyART_GO_TO_PARENT)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_GO_TO_PARENT)->c_str(), (&wxPyART_GO_TO_PARENT)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_GO_HOME_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_GO_HOME is read-only.");
    return 1;
}


static PyObject *_wrap_ART_GO_HOME_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_GO_HOME)->c_str(), (&wxPyART_GO_HOME)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_GO_HOME)->c_str(), (&wxPyART_GO_HOME)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FILE_OPEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FILE_OPEN is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FILE_OPEN_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FILE_OPEN)->c_str(), (&wxPyART_FILE_OPEN)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FILE_OPEN)->c_str(), (&wxPyART_FILE_OPEN)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FILE_SAVE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FILE_SAVE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FILE_SAVE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FILE_SAVE)->c_str(), (&wxPyART_FILE_SAVE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FILE_SAVE)->c_str(), (&wxPyART_FILE_SAVE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FILE_SAVE_AS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FILE_SAVE_AS is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FILE_SAVE_AS_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FILE_SAVE_AS)->c_str(), (&wxPyART_FILE_SAVE_AS)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FILE_SAVE_AS)->c_str(), (&wxPyART_FILE_SAVE_AS)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_PRINT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_PRINT is read-only.");
    return 1;
}


static PyObject *_wrap_ART_PRINT_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_PRINT)->c_str(), (&wxPyART_PRINT)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_PRINT)->c_str(), (&wxPyART_PRINT)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HELP_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HELP is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HELP_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HELP)->c_str(), (&wxPyART_HELP)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HELP)->c_str(), (&wxPyART_HELP)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_TIP_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_TIP is read-only.");
    return 1;
}


static PyObject *_wrap_ART_TIP_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_TIP)->c_str(), (&wxPyART_TIP)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_TIP)->c_str(), (&wxPyART_TIP)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_REPORT_VIEW_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_REPORT_VIEW is read-only.");
    return 1;
}


static PyObject *_wrap_ART_REPORT_VIEW_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_REPORT_VIEW)->c_str(), (&wxPyART_REPORT_VIEW)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_REPORT_VIEW)->c_str(), (&wxPyART_REPORT_VIEW)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_LIST_VIEW_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_LIST_VIEW is read-only.");
    return 1;
}


static PyObject *_wrap_ART_LIST_VIEW_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_LIST_VIEW)->c_str(), (&wxPyART_LIST_VIEW)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_LIST_VIEW)->c_str(), (&wxPyART_LIST_VIEW)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_NEW_DIR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_NEW_DIR is read-only.");
    return 1;
}


static PyObject *_wrap_ART_NEW_DIR_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_NEW_DIR)->c_str(), (&wxPyART_NEW_DIR)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_NEW_DIR)->c_str(), (&wxPyART_NEW_DIR)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_HARDDISK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_HARDDISK is read-only.");
    return 1;
}


static PyObject *_wrap_ART_HARDDISK_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_HARDDISK)->c_str(), (&wxPyART_HARDDISK)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_HARDDISK)->c_str(), (&wxPyART_HARDDISK)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FLOPPY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FLOPPY is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FLOPPY_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FLOPPY)->c_str(), (&wxPyART_FLOPPY)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FLOPPY)->c_str(), (&wxPyART_FLOPPY)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_CDROM_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_CDROM is read-only.");
    return 1;
}


static PyObject *_wrap_ART_CDROM_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_CDROM)->c_str(), (&wxPyART_CDROM)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_CDROM)->c_str(), (&wxPyART_CDROM)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_REMOVABLE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_REMOVABLE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_REMOVABLE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_REMOVABLE)->c_str(), (&wxPyART_REMOVABLE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_REMOVABLE)->c_str(), (&wxPyART_REMOVABLE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FOLDER_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FOLDER is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FOLDER_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FOLDER)->c_str(), (&wxPyART_FOLDER)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FOLDER)->c_str(), (&wxPyART_FOLDER)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FOLDER_OPEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FOLDER_OPEN is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FOLDER_OPEN_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FOLDER_OPEN)->c_str(), (&wxPyART_FOLDER_OPEN)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FOLDER_OPEN)->c_str(), (&wxPyART_FOLDER_OPEN)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_GO_DIR_UP_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_GO_DIR_UP is read-only.");
    return 1;
}


static PyObject *_wrap_ART_GO_DIR_UP_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_GO_DIR_UP)->c_str(), (&wxPyART_GO_DIR_UP)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_GO_DIR_UP)->c_str(), (&wxPyART_GO_DIR_UP)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_EXECUTABLE_FILE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_EXECUTABLE_FILE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_EXECUTABLE_FILE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_EXECUTABLE_FILE)->c_str(), (&wxPyART_EXECUTABLE_FILE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_EXECUTABLE_FILE)->c_str(), (&wxPyART_EXECUTABLE_FILE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_NORMAL_FILE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_NORMAL_FILE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_NORMAL_FILE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_NORMAL_FILE)->c_str(), (&wxPyART_NORMAL_FILE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_NORMAL_FILE)->c_str(), (&wxPyART_NORMAL_FILE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_TICK_MARK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_TICK_MARK is read-only.");
    return 1;
}


static PyObject *_wrap_ART_TICK_MARK_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_TICK_MARK)->c_str(), (&wxPyART_TICK_MARK)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_TICK_MARK)->c_str(), (&wxPyART_TICK_MARK)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_CROSS_MARK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_CROSS_MARK is read-only.");
    return 1;
}


static PyObject *_wrap_ART_CROSS_MARK_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_CROSS_MARK)->c_str(), (&wxPyART_CROSS_MARK)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_CROSS_MARK)->c_str(), (&wxPyART_CROSS_MARK)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_ERROR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_ERROR is read-only.");
    return 1;
}


static PyObject *_wrap_ART_ERROR_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_ERROR)->c_str(), (&wxPyART_ERROR)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_ERROR)->c_str(), (&wxPyART_ERROR)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_QUESTION_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_QUESTION is read-only.");
    return 1;
}


static PyObject *_wrap_ART_QUESTION_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_QUESTION)->c_str(), (&wxPyART_QUESTION)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_QUESTION)->c_str(), (&wxPyART_QUESTION)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_WARNING_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_WARNING is read-only.");
    return 1;
}


static PyObject *_wrap_ART_WARNING_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_WARNING)->c_str(), (&wxPyART_WARNING)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_WARNING)->c_str(), (&wxPyART_WARNING)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_INFORMATION_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_INFORMATION is read-only.");
    return 1;
}


static PyObject *_wrap_ART_INFORMATION_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_INFORMATION)->c_str(), (&wxPyART_INFORMATION)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_INFORMATION)->c_str(), (&wxPyART_INFORMATION)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_MISSING_IMAGE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_MISSING_IMAGE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_MISSING_IMAGE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_MISSING_IMAGE)->c_str(), (&wxPyART_MISSING_IMAGE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_MISSING_IMAGE)->c_str(), (&wxPyART_MISSING_IMAGE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_COPY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_COPY is read-only.");
    return 1;
}


static PyObject *_wrap_ART_COPY_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_COPY)->c_str(), (&wxPyART_COPY)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_COPY)->c_str(), (&wxPyART_COPY)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_CUT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_CUT is read-only.");
    return 1;
}


static PyObject *_wrap_ART_CUT_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_CUT)->c_str(), (&wxPyART_CUT)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_CUT)->c_str(), (&wxPyART_CUT)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_PASTE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_PASTE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_PASTE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_PASTE)->c_str(), (&wxPyART_PASTE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_PASTE)->c_str(), (&wxPyART_PASTE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_DELETE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_DELETE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_DELETE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_DELETE)->c_str(), (&wxPyART_DELETE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_DELETE)->c_str(), (&wxPyART_DELETE)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_NEW_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_NEW is read-only.");
    return 1;
}


static PyObject *_wrap_ART_NEW_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_NEW)->c_str(), (&wxPyART_NEW)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_NEW)->c_str(), (&wxPyART_NEW)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_UNDO_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_UNDO is read-only.");
    return 1;
}


static PyObject *_wrap_ART_UNDO_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_UNDO)->c_str(), (&wxPyART_UNDO)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_UNDO)->c_str(), (&wxPyART_UNDO)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_REDO_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_REDO is read-only.");
    return 1;
}


static PyObject *_wrap_ART_REDO_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_REDO)->c_str(), (&wxPyART_REDO)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_REDO)->c_str(), (&wxPyART_REDO)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_QUIT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_QUIT is read-only.");
    return 1;
}


static PyObject *_wrap_ART_QUIT_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_QUIT)->c_str(), (&wxPyART_QUIT)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_QUIT)->c_str(), (&wxPyART_QUIT)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FIND_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FIND is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FIND_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FIND)->c_str(), (&wxPyART_FIND)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FIND)->c_str(), (&wxPyART_FIND)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_ART_FIND_AND_REPLACE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ART_FIND_AND_REPLACE is read-only.");
    return 1;
}


static PyObject *_wrap_ART_FIND_AND_REPLACE_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyART_FIND_AND_REPLACE)->c_str(), (&wxPyART_FIND_AND_REPLACE)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyART_FIND_AND_REPLACE)->c_str(), (&wxPyART_FIND_AND_REPLACE)->Len());
#endif
    }
    return pyobj;
}


static PyObject *_wrap_new_ArtProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyArtProvider *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ArtProvider",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyArtProvider *)new wxPyArtProvider();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyArtProvider, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ArtProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyArtProvider *arg1 = (wxPyArtProvider *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ArtProvider",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyArtProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArtProvider__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyArtProvider *arg1 = (wxPyArtProvider *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ArtProvider__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyArtProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArtProvider_PushProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyArtProvider *arg1 = (wxPyArtProvider *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "provider", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ArtProvider_PushProvider",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyArtProvider, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyArtProvider::PushProvider(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArtProvider_PopProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":ArtProvider_PopProvider",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxPyArtProvider::PopProvider();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArtProvider_RemoveProvider(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyArtProvider *arg1 = (wxPyArtProvider *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "provider", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ArtProvider_RemoveProvider",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyArtProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxPyArtProvider::RemoveProvider(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArtProvider_GetBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString const &arg2_defvalue = wxPyART_OTHER ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxSize const &arg3_defvalue = wxDefaultSize ;
    wxSize *arg3 = (wxSize *) &arg3_defvalue ;
    wxBitmap result;
    bool temp1 = false ;
    bool temp2 = false ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "id",(char *) "client",(char *) "size", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:ArtProvider_GetBitmap",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = &temp3;
            if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxPyArtProvider::GetBitmap((wxString const &)*arg1,(wxString const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBitmap * resultptr;
        resultptr = new wxBitmap(static_cast<wxBitmap & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxBitmap, 1);
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ArtProvider_GetIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString const &arg2_defvalue = wxPyART_OTHER ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxSize const &arg3_defvalue = wxDefaultSize ;
    wxSize *arg3 = (wxSize *) &arg3_defvalue ;
    wxIcon result;
    bool temp1 = false ;
    bool temp2 = false ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "id",(char *) "client",(char *) "size", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:ArtProvider_GetIcon",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = &temp3;
            if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxPyArtProvider::GetIcon((wxString const &)*arg1,(wxString const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxIcon * resultptr;
        resultptr = new wxIcon(static_cast<wxIcon & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxIcon, 1);
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ArtProvider_GetSizeHint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    bool arg2 = (bool) false ;
    wxSize result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "client",(char *) "platform_dependent", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ArtProvider_GetSizeHint",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxPyArtProvider::GetSizeHint((wxString const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize(static_cast<wxSize & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_ArtProvider_Destroy(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyArtProvider *arg1 = (wxPyArtProvider *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ArtProvider_Destroy",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyArtProvider, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPyArtProvider_Destroy(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ArtProvider_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyArtProvider, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_ConfigBase(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ConfigBase",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_Set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxConfigBase *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "config", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_Set",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxConfigBase *)wxConfigBase::Set(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxConfigBase, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_Get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    bool arg1 = (bool) true ;
    wxConfigBase *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "createOnDemand", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:ConfigBase_Get",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxConfigBase *)wxConfigBase::Get(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxConfigBase, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_Create(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":ConfigBase_Create",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxConfigBase *)wxConfigBase::Create();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxConfigBase, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_DontCreateOnDemand(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":ConfigBase_DontCreateOnDemand",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxConfigBase::DontCreateOnDemand();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_SetPath(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "path", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_SetPath",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPath((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetPath(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_GetPath",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxConfigBase const *)arg1)->GetPath();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetFirstGroup(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_GetFirstGroup",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxConfigBase_GetFirstGroup(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetNextGroup(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    long arg2 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_GetNextGroup",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<long >(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxConfigBase_GetNextGroup(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetFirstEntry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_GetFirstEntry",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxConfigBase_GetFirstEntry(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetNextEntry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    long arg2 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_GetNextEntry",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<long >(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxConfigBase_GetNextEntry(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetNumberOfEntries(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool arg2 = (bool) false ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "recursive", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ConfigBase_GetNumberOfEntries",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)((wxConfigBase const *)arg1)->GetNumberOfEntries(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetNumberOfGroups(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool arg2 = (bool) false ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "recursive", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ConfigBase_GetNumberOfGroups",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)((wxConfigBase const *)arg1)->GetNumberOfGroups(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_HasGroup(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_HasGroup",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxConfigBase const *)arg1)->HasGroup((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_HasEntry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_HasEntry",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxConfigBase const *)arg1)->HasEntry((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_Exists(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_Exists",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxConfigBase const *)arg1)->Exists((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetEntryType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    wxConfigBase::EntryType result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_GetEntryType",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxConfigBase::EntryType)((wxConfigBase const *)arg1)->GetEntryType((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_Read(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "defaultVal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ConfigBase_Read",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->Read((wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_ReadInt(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    long arg3 = (long) 0 ;
    long result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "defaultVal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ConfigBase_ReadInt",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<long >(SWIG_As_long(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxConfigBase_ReadInt(arg1,(wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_ReadFloat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    double arg3 = (double) 0.0 ;
    double result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "defaultVal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ConfigBase_ReadFloat",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<double >(SWIG_As_double(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (double)wxConfigBase_ReadFloat(arg1,(wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_ReadBool(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool arg3 = (bool) false ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "defaultVal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ConfigBase_ReadBool",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxConfigBase_ReadBool(arg1,(wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_Write(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    bool result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "value", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ConfigBase_Write",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = wxString_in_helper(obj2);
        if (arg3 == NULL) SWIG_fail;
        temp3 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Write((wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_WriteInt(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    long arg3 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "value", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ConfigBase_WriteInt",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = static_cast<long >(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Write((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_WriteFloat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    double arg3 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "value", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ConfigBase_WriteFloat",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = static_cast<double >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Write((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_WriteBool(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool arg3 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "value", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ConfigBase_WriteBool",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Write((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_Flush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool arg2 = (bool) false ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "currentOnly", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ConfigBase_Flush",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Flush(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_RenameEntry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    bool result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "oldName",(char *) "newName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ConfigBase_RenameEntry",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = wxString_in_helper(obj2);
        if (arg3 == NULL) SWIG_fail;
        temp3 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->RenameEntry((wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_RenameGroup(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    bool result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "oldName",(char *) "newName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ConfigBase_RenameGroup",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = wxString_in_helper(obj2);
        if (arg3 == NULL) SWIG_fail;
        temp3 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->RenameGroup((wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_DeleteEntry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key",(char *) "deleteGroupIfEmpty", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ConfigBase_DeleteEntry",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->DeleteEntry((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_DeleteGroup(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "key", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_DeleteGroup",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->DeleteGroup((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_DeleteAll(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_DeleteAll",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->DeleteAll();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_SetExpandEnvVars(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "doIt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ConfigBase_SetExpandEnvVars",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetExpandEnvVars(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_IsExpandingEnvVars(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_IsExpandingEnvVars",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxConfigBase const *)arg1)->IsExpandingEnvVars();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_SetRecordDefaults(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "doIt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ConfigBase_SetRecordDefaults",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetRecordDefaults(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_IsRecordingDefaults(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_IsRecordingDefaults",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxConfigBase const *)arg1)->IsRecordingDefaults();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_ExpandEnvVars(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    wxString result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "str", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_ExpandEnvVars",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxConfigBase const *)arg1)->ExpandEnvVars((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetAppName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_GetAppName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxConfigBase const *)arg1)->GetAppName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetVendorName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_GetVendorName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxConfigBase const *)arg1)->GetVendorName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_SetAppName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "appName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_SetAppName",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetAppName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_SetVendorName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "vendorName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_SetVendorName",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetVendorName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ConfigBase_SetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ConfigBase_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<long >(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigBase_GetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigBase_GetStyle",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)((wxConfigBase const *)arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ConfigBase_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxConfigBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Config(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    long arg5 = (long) wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE ;
    wxConfig *result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "appName",(char *) "vendorName",(char *) "localFilename",(char *) "globalFilename",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:new_Config",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = true;
        }
    }
    if (obj4) {
        {
            arg5 = static_cast<long >(SWIG_As_long(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxConfig *)new wxConfig((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxConfig, 1);
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_delete_Config(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfig *arg1 = (wxConfig *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Config",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfig, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Config_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxConfig, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileConfig(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    long arg5 = (long) wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE ;
    wxFileConfig *result;
    bool temp1 = false ;
    bool temp2 = false ;
    bool temp3 = false ;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "appName",(char *) "vendorName",(char *) "localFilename",(char *) "globalFilename",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:new_FileConfig",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = true;
        }
    }
    if (obj4) {
        {
            arg5 = static_cast<long >(SWIG_As_long(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileConfig *)new wxFileConfig((wxString const &)*arg1,(wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileConfig, 1);
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_delete_FileConfig(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileConfig *arg1 = (wxFileConfig *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FileConfig",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileConfig, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileConfig_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFileConfig, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ConfigPathChanger(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigBase *arg1 = (wxConfigBase *) 0 ;
    wxString *arg2 = 0 ;
    wxConfigPathChanger *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "config",(char *) "entry", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_ConfigPathChanger",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxConfigPathChanger *)new wxConfigPathChanger((wxConfigBase const *)arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxConfigPathChanger, 1);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_delete_ConfigPathChanger(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigPathChanger *arg1 = (wxConfigPathChanger *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ConfigPathChanger",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigPathChanger, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigPathChanger_Name(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxConfigPathChanger *arg1 = (wxConfigPathChanger *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ConfigPathChanger_Name",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxConfigPathChanger, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxConfigPathChanger const *)arg1)->Name();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ConfigPathChanger_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxConfigPathChanger, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ExpandEnvVars(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxString result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "sz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ExpandEnvVars",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxExpandEnvVars((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static int _wrap_DefaultDateTimeFormat_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DefaultDateTimeFormat is read-only.");
    return 1;
}


static PyObject *_wrap_DefaultDateTimeFormat_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyDefaultDateTimeFormat)->c_str(), (&wxPyDefaultDateTimeFormat)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyDefaultDateTimeFormat)->c_str(), (&wxPyDefaultDateTimeFormat)->Len());
#endif
    }
    return pyobj;
}


static int _wrap_DefaultTimeSpanFormat_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DefaultTimeSpanFormat is read-only.");
    return 1;
}


static PyObject *_wrap_DefaultTimeSpanFormat_get(void) {
    PyObject *pyobj = NULL;
    
    {
#if wxUSE_UNICODE
        pyobj = PyUnicode_FromWideChar((&wxPyDefaultTimeSpanFormat)->c_str(), (&wxPyDefaultTimeSpanFormat)->Len());
#else
        pyobj = PyString_FromStringAndSize((&wxPyDefaultTimeSpanFormat)->c_str(), (&wxPyDefaultTimeSpanFormat)->Len());
#endif
    }
    return pyobj;
}


static PyObject *_wrap_DateTime_SetCountry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::Country arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "country", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_SetCountry",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxDateTime::Country >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDateTime::SetCountry(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetCountry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::Country result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateTime_GetCountry",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime::Country)wxDateTime::GetCountry();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsWestEuropeanCountry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::Country arg1 = (wxDateTime::Country) wxDateTime::Country_Default ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "country", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:DateTime_IsWestEuropeanCountry",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<wxDateTime::Country >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime::IsWestEuropeanCountry(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetCurrentYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::Calendar arg1 = (wxDateTime::Calendar) wxDateTime::Gregorian ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "cal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:DateTime_GetCurrentYear",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<wxDateTime::Calendar >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime::GetCurrentYear(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_ConvertYearToBC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_ConvertYearToBC",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime::ConvertYearToBC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetCurrentMonth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::Calendar arg1 = (wxDateTime::Calendar) wxDateTime::Gregorian ;
    wxDateTime::Month result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "cal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:DateTime_GetCurrentMonth",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<wxDateTime::Calendar >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime::Month)wxDateTime::GetCurrentMonth(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsLeapYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) wxDateTime::Inv_Year ;
    wxDateTime::Calendar arg2 = (wxDateTime::Calendar) wxDateTime::Gregorian ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "year",(char *) "cal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:DateTime_IsLeapYear",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Calendar >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime::IsLeapYear(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetCentury(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) wxDateTime::Inv_Year ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:DateTime_GetCentury",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime::GetCentury(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetNumberOfDaysinYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxDateTime::Calendar arg2 = (wxDateTime::Calendar) wxDateTime::Gregorian ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "year",(char *) "cal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetNumberOfDaysinYear",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Calendar >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime::GetNumberOfDays(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetNumberOfDaysInMonth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::Month arg1 ;
    int arg2 = (int) wxDateTime::Inv_Year ;
    wxDateTime::Calendar arg3 = (wxDateTime::Calendar) wxDateTime::Gregorian ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "month",(char *) "year",(char *) "cal", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:DateTime_GetNumberOfDaysInMonth",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<wxDateTime::Month >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::Calendar >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime::GetNumberOfDays(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetMonthName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::Month arg1 ;
    wxDateTime::NameFlags arg2 = (wxDateTime::NameFlags) wxDateTime::Name_Full ;
    wxString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "month",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetMonthName",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<wxDateTime::Month >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::NameFlags >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::GetMonthName(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetWeekDayName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime::WeekDay arg1 ;
    wxDateTime::NameFlags arg2 = (wxDateTime::NameFlags) wxDateTime::Name_Full ;
    wxString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "weekday",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetWeekDayName",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::NameFlags >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::GetWeekDayName(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetAmPmStrings(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    PyObject *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateTime_GetAmPmStrings",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDateTime_GetAmPmStrings();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsDSTApplicable(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) wxDateTime::Inv_Year ;
    wxDateTime::Country arg2 = (wxDateTime::Country) wxDateTime::Country_Default ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "year",(char *) "country", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:DateTime_IsDSTApplicable",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Country >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime::IsDSTApplicable(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetBeginDST(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) wxDateTime::Inv_Year ;
    wxDateTime::Country arg2 = (wxDateTime::Country) wxDateTime::Country_Default ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "year",(char *) "country", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:DateTime_GetBeginDST",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Country >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::GetBeginDST(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetEndDST(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) wxDateTime::Inv_Year ;
    wxDateTime::Country arg2 = (wxDateTime::Country) wxDateTime::Country_Default ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "year",(char *) "country", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:DateTime_GetEndDST",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Country >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::GetEndDST(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_Now(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateTime_Now",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::Now();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_UNow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateTime_UNow",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::UNow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_Today(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateTime_Today",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::Today();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_DateTime",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime *)new wxDateTime();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateTimeFromTimeT(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    time_t arg1 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "timet", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_DateTimeFromTimeT",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<time_t >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime *)new wxDateTime(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateTimeFromJDN(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    double arg1 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "jdn", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_DateTimeFromJDN",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<double >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime *)new wxDateTime(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateTimeFromHMS(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "hour",(char *) "minute",(char *) "second",(char *) "millisec", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_DateTimeFromHMS",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime *)new wxDateTime(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateTimeFromDMY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxDateTime::Month arg2 = (wxDateTime::Month) wxDateTime::Inv_Month ;
    int arg3 = (int) wxDateTime::Inv_Year ;
    int arg4 = (int) 0 ;
    int arg5 = (int) 0 ;
    int arg6 = (int) 0 ;
    int arg7 = (int) 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "day",(char *) "month",(char *) "year",(char *) "hour",(char *) "minute",(char *) "second",(char *) "millisec", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOO:new_DateTimeFromDMY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Month >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = static_cast<int >(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = static_cast<int >(SWIG_As_int(obj6)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime *)new wxDateTime(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DateTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DateTime",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToCurrent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_SetToCurrent",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetToCurrent();
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetTimeT(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    time_t arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "timet", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetTimeT",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<time_t >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Set(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetJDN(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    double arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "jdn", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetJDN",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Set(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetHMS(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "hour",(char *) "minute",(char *) "second",(char *) "millisec", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:DateTime_SetHMS",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Set(arg2,arg3,arg4,arg5);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_Set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime::Month arg3 = (wxDateTime::Month) wxDateTime::Inv_Month ;
    int arg4 = (int) wxDateTime::Inv_Year ;
    int arg5 = (int) 0 ;
    int arg6 = (int) 0 ;
    int arg7 = (int) 0 ;
    int arg8 = (int) 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "day",(char *) "month",(char *) "year",(char *) "hour",(char *) "minute",(char *) "second",(char *) "millisec", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOOOO:DateTime_Set",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::Month >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = static_cast<int >(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = static_cast<int >(SWIG_As_int(obj6)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    if (obj7) {
        {
            arg8 = static_cast<int >(SWIG_As_int(obj7)); 
            if (SWIG_arg_fail(8)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_ResetTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_ResetTime",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->ResetTime();
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetYear",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetYear(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetMonth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::Month arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "month", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetMonth",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::Month >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetMonth(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "day", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetDay(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetHour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "hour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetHour",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetHour(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetMinute(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "minute", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetMinute",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetMinute(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetSecond(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "second", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetSecond",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetSecond(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetMillisecond(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "millisecond", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetMillisecond",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetMillisecond(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToWeekDayInSameWeek(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime::WeekFlags arg3 = (wxDateTime::WeekFlags) wxDateTime::Monday_First ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DateTime_SetToWeekDayInSameWeek",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::WeekFlags >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetToWeekDayInSameWeek(arg2,arg3);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetWeekDayInSameWeek(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime::WeekFlags arg3 = (wxDateTime::WeekFlags) wxDateTime::Monday_First ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DateTime_GetWeekDayInSameWeek",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::WeekFlags >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetWeekDayInSameWeek(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToNextWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetToNextWeekDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetToNextWeekDay(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetNextWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_GetNextWeekDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetNextWeekDay(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToPrevWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetToPrevWeekDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetToPrevWeekDay(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetPrevWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_GetPrevWeekDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetPrevWeekDay(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    int arg3 = (int) 1 ;
    wxDateTime::Month arg4 = (wxDateTime::Month) wxDateTime::Inv_Month ;
    int arg5 = (int) wxDateTime::Inv_Year ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday",(char *) "n",(char *) "month",(char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:DateTime_SetToWeekDay",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<wxDateTime::Month >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = static_cast<int >(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SetToWeekDay(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToLastWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime::Month arg3 = (wxDateTime::Month) wxDateTime::Inv_Month ;
    int arg4 = (int) wxDateTime::Inv_Year ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday",(char *) "month",(char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:DateTime_SetToLastWeekDay",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::Month >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SetToLastWeekDay(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetLastWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekDay arg2 ;
    wxDateTime::Month arg3 = (wxDateTime::Month) wxDateTime::Inv_Month ;
    int arg4 = (int) wxDateTime::Inv_Year ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weekday",(char *) "month",(char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:DateTime_GetLastWeekDay",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::Month >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetLastWeekDay(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToTheWeek(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime::WeekDay arg3 = (wxDateTime::WeekDay) wxDateTime::Mon ;
    wxDateTime::WeekFlags arg4 = (wxDateTime::WeekFlags) wxDateTime::Monday_First ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "numWeek",(char *) "weekday",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:DateTime_SetToTheWeek",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<wxDateTime::WeekFlags >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SetToTheWeek(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetWeek(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime::WeekDay arg3 = (wxDateTime::WeekDay) wxDateTime::Mon ;
    wxDateTime::WeekFlags arg4 = (wxDateTime::WeekFlags) wxDateTime::Monday_First ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "numWeek",(char *) "weekday",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:DateTime_GetWeek",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<wxDateTime::WeekFlags >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetWeek(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToWeekOfYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    wxDateTime::WeekDay arg3 = (wxDateTime::WeekDay) wxDateTime::Mon ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "year",(char *) "numWeek",(char *) "weekday", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DateTime_SetToWeekOfYear",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDateTime::WeekDay >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime::SetToWeekOfYear(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToLastMonthDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::Month arg2 = (wxDateTime::Month) wxDateTime::Inv_Month ;
    int arg3 = (int) wxDateTime::Inv_Year ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "month",(char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:DateTime_SetToLastMonthDay",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Month >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetToLastMonthDay(arg2,arg3);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetLastMonthDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::Month arg2 = (wxDateTime::Month) wxDateTime::Inv_Month ;
    int arg3 = (int) wxDateTime::Inv_Year ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "month",(char *) "year", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:DateTime_GetLastMonthDay",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Month >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetLastMonthDay(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SetToYearDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "yday", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SetToYearDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->SetToYearDay(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetYearDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    int arg2 ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "yday", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_GetYearDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetYearDay(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetJulianDayNumber(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_GetJulianDayNumber",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (double)(arg1)->GetJulianDayNumber();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetJDN(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_GetJDN",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (double)(arg1)->GetJDN();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetModifiedJulianDayNumber(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_GetModifiedJulianDayNumber",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (double)((wxDateTime const *)arg1)->GetModifiedJulianDayNumber();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetMJD(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_GetMJD",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (double)(arg1)->GetMJD();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetRataDie(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_GetRataDie",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (double)(arg1)->GetRataDie();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_ToTimezone(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone *arg2 = 0 ;
    bool arg3 = (bool) false ;
    wxDateTime result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DateTime_ToTimezone",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->ToTimezone((wxDateTime::TimeZone const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_MakeTimezone(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone *arg2 = 0 ;
    bool arg3 = (bool) false ;
    wxDateTime *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DateTime_MakeTimezone",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->MakeTimezone((wxDateTime::TimeZone const &)*arg2,arg3);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_FromTimezone(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone *arg2 = 0 ;
    bool arg3 = (bool) false ;
    wxDateTime result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DateTime_FromTimezone",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->FromTimezone((wxDateTime::TimeZone const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_MakeFromTimezone(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone *arg2 = 0 ;
    bool arg3 = (bool) false ;
    wxDateTime *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DateTime_MakeFromTimezone",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->MakeFromTimezone((wxDateTime::TimeZone const &)*arg2,arg3);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_ToUTC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    bool arg2 = (bool) false ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_ToUTC",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->ToUTC(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_MakeUTC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    bool arg2 = (bool) false ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_MakeUTC",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->MakeUTC(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_ToGMT(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    bool arg2 = (bool) false ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_ToGMT",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->ToGMT(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_MakeGMT(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    bool arg2 = (bool) false ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_MakeGMT",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->MakeGMT(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_FromUTC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    bool arg2 = (bool) false ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_FromUTC",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->FromUTC(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_MakeFromUTC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    bool arg2 = (bool) false ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "noDST", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_MakeFromUTC",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->MakeFromUTC(arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsDST(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::Country arg2 = (wxDateTime::Country) wxDateTime::Country_Default ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "country", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_IsDST",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Country >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->IsDST(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsValid(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_IsValid",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsValid();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetTicks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    time_t result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_GetTicks",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (time_t)((wxDateTime const *)arg1)->GetTicks();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_GetYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetYear",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetYear((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetMonth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    wxDateTime::Month result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetMonth",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime::Month)((wxDateTime const *)arg1)->GetMonth((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetDay((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetWeekDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    wxDateTime::WeekDay result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetWeekDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateTime::WeekDay)((wxDateTime const *)arg1)->GetWeekDay((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetHour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetHour",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetHour((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetMinute(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetMinute",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetMinute((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetSecond(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetSecond",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetSecond((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetMillisecond(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetMillisecond",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetMillisecond((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetDayOfYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::TimeZone const &arg2_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg2 = (wxDateTime::TimeZone *) &arg2_defvalue ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_GetDayOfYear",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj1));
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetDayOfYear((wxDateTime::TimeZone const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2) delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetWeekOfYear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekFlags arg2 = (wxDateTime::WeekFlags) wxDateTime::Monday_First ;
    wxDateTime::TimeZone const &arg3_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg3 = (wxDateTime::TimeZone *) &arg3_defvalue ;
    int result;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "flags",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:DateTime_GetWeekOfYear",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::WeekFlags >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj2));
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetWeekOfYear(arg2,(wxDateTime::TimeZone const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp3) delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp3) delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_GetWeekOfMonth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::WeekFlags arg2 = (wxDateTime::WeekFlags) wxDateTime::Monday_First ;
    wxDateTime::TimeZone const &arg3_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg3 = (wxDateTime::TimeZone *) &arg3_defvalue ;
    int result;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "flags",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:DateTime_GetWeekOfMonth",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::WeekFlags >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj2));
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateTime const *)arg1)->GetWeekOfMonth(arg2,(wxDateTime::TimeZone const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp3) delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp3) delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_IsWorkDay(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime::Country arg2 = (wxDateTime::Country) wxDateTime::Country_Default ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "country", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DateTime_IsWorkDay",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDateTime::Country >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsWorkDay(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsEqualTo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "datetime", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_IsEqualTo",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsEqualTo((wxDateTime const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsEarlierThan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "datetime", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_IsEarlierThan",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsEarlierThan((wxDateTime const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsLaterThan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "datetime", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_IsLaterThan",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsLaterThan((wxDateTime const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsStrictlyBetween(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    wxDateTime *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "t1",(char *) "t2", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DateTime_IsStrictlyBetween",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsStrictlyBetween((wxDateTime const &)*arg2,(wxDateTime const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsBetween(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    wxDateTime *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "t1",(char *) "t2", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DateTime_IsBetween",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsBetween((wxDateTime const &)*arg2,(wxDateTime const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsSameDate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_IsSameDate",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsSameDate((wxDateTime const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsSameTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_IsSameTime",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsSameTime((wxDateTime const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_IsEqualUpTo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    wxTimeSpan *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dt",(char *) "ts", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DateTime_IsEqualUpTo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDateTime const *)arg1)->IsEqualUpTo((wxDateTime const &)*arg2,(wxTimeSpan const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_AddTS(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_AddTS",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Add((wxTimeSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_AddDS(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_AddDS",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Add((wxDateSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SubtractTS(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SubtractTS",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Subtract((wxTimeSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_SubtractDS(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_SubtractDS",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->Subtract((wxDateSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_Subtract(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_Subtract",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->Subtract((wxDateTime const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___iadd____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->operator +=((wxTimeSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___iadd____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->operator +=((wxDateSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___iadd__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxTimeSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___iadd____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxDateSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___iadd____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateTime___iadd__'");
    return NULL;
}


static PyObject *_wrap_DateTime___isub____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->operator -=((wxTimeSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___isub____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateTime &_result_ref = (arg1)->operator -=((wxDateSpan const &)*arg2);
            result = (wxDateTime *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___isub__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxTimeSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___isub____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxDateSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___isub____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateTime___isub__'");
    return NULL;
}


static PyObject *_wrap_DateTime___add____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime___add____SWIG_0(arg1,(wxTimeSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___add____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime___add____SWIG_1(arg1,(wxDateSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___add__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxTimeSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___add____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxDateSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___add____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_DateTime___sub____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = 0 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime___sub____SWIG_0(arg1,(wxDateTime const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___sub____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime___sub____SWIG_1(arg1,(wxTimeSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___sub____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateTime___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateTime___sub____SWIG_2(arg1,(wxDateSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateTime * resultptr;
        resultptr = new wxDateTime(static_cast<wxDateTime & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___sub__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___sub____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxTimeSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___sub____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDateTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxDateSpan, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateTime___sub____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_DateTime___lt__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = (wxDateTime *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime___lt__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime___lt__(arg1,(wxDateTime const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___le__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = (wxDateTime *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime___le__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime___le__(arg1,(wxDateTime const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___gt__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = (wxDateTime *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime___gt__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime___gt__(arg1,(wxDateTime const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___ge__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = (wxDateTime *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime___ge__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime___ge__(arg1,(wxDateTime const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = (wxDateTime *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime___eq__(arg1,(wxDateTime const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxDateTime *arg2 = (wxDateTime *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateTime___ne__(arg1,(wxDateTime const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_ParseRfc822Date(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString *arg2 = 0 ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "date", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_ParseRfc822Date",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime_ParseRfc822Date(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_ParseFormat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyDefaultDateTimeFormat ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxDateTime const &arg4_defvalue = wxDefaultDateTime ;
    wxDateTime *arg4 = (wxDateTime *) &arg4_defvalue ;
    int result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "date",(char *) "format",(char *) "dateDef", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:DateTime_ParseFormat",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        {
            SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(4)) SWIG_fail;
            if (arg4 == NULL) {
                SWIG_null_ref("wxDateTime");
            }
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime_ParseFormat(arg1,(wxString const &)*arg2,(wxString const &)*arg3,(wxDateTime const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_ParseDateTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString *arg2 = 0 ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "datetime", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_ParseDateTime",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime_ParseDateTime(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_ParseDate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString *arg2 = 0 ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "date", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_ParseDate",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime_ParseDate(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_ParseTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString *arg2 = 0 ;
    int result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "time", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateTime_ParseTime",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDateTime_ParseTime(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_Format(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString const &arg2_defvalue = wxPyDefaultDateTimeFormat ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxDateTime::TimeZone const &arg3_defvalue = LOCAL_TZ ;
    wxDateTime::TimeZone *arg3 = (wxDateTime::TimeZone *) &arg3_defvalue ;
    wxString result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format",(char *) "tz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:DateTime_Format",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    if (obj2) {
        {
            arg3 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(obj2));
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->Format((wxString const &)*arg2,(wxDateTime::TimeZone const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3) delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3) delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_DateTime_FormatDate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_FormatDate",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->FormatDate();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_FormatTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_FormatTime",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->FormatTime();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_FormatISODate(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_FormatISODate",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->FormatISODate();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateTime_FormatISOTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateTime *arg1 = (wxDateTime *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateTime_FormatISOTime",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDateTime const *)arg1)->FormatISOTime();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DateTime_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDateTime, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_TimeSpan_Seconds(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "sec", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_Seconds",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Seconds(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Second(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":TimeSpan_Second",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Second();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Minutes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "min", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_Minutes",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Minutes(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Minute(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":TimeSpan_Minute",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Minute();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Hours(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "hours", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_Hours",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Hours(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Hour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":TimeSpan_Hour",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Hour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Days(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "days", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_Days",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Days(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Day(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":TimeSpan_Day",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Day();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Weeks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "days", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_Weeks",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Weeks(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Week(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":TimeSpan_Week",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan::Week();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TimeSpan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long arg1 = (long) 0 ;
    long arg2 = (long) 0 ;
    long arg3 = (long) 0 ;
    long arg4 = (long) 0 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "hours",(char *) "minutes",(char *) "seconds",(char *) "milliseconds", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_TimeSpan",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<long >(SWIG_As_long(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<long >(SWIG_As_long(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<long >(SWIG_As_long(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<long >(SWIG_As_long(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxTimeSpan *)new wxTimeSpan(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TimeSpan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_TimeSpan",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Add(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan_Add",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->Add((wxTimeSpan const &)*arg2);
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Subtract(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan_Subtract",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->Subtract((wxTimeSpan const &)*arg2);
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Multiply(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int arg2 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan_Multiply",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->Multiply(arg2);
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Neg(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_Neg",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->Neg();
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Abs(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_Abs",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxTimeSpan const *)arg1)->Abs();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___iadd__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___iadd__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->operator +=((wxTimeSpan const &)*arg2);
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___isub__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "diff", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___isub__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->operator -=((wxTimeSpan const &)*arg2);
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___imul__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int arg2 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___imul__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->operator *=(arg2);
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___neg__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan___neg__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxTimeSpan &_result_ref = (arg1)->operator -();
            result = (wxTimeSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTimeSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___add__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___add__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan___add__(arg1,(wxTimeSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___sub__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___sub__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan___sub__(arg1,(wxTimeSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___mul__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int arg2 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___mul__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan___mul__(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___rmul__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int arg2 ;
    wxTimeSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___rmul__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxTimeSpan___rmul__(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxTimeSpan * resultptr;
        resultptr = new wxTimeSpan(static_cast<wxTimeSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxTimeSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___lt__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___lt__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTimeSpan___lt__(arg1,(wxTimeSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___le__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___le__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTimeSpan___le__(arg1,(wxTimeSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___gt__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___gt__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTimeSpan___gt__(arg1,(wxTimeSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___ge__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___ge__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTimeSpan___ge__(arg1,(wxTimeSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTimeSpan___eq__(arg1,(wxTimeSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTimeSpan___ne__(arg1,(wxTimeSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_IsNull(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_IsNull",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxTimeSpan const *)arg1)->IsNull();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_IsPositive(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_IsPositive",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxTimeSpan const *)arg1)->IsPositive();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_IsNegative(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_IsNegative",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxTimeSpan const *)arg1)->IsNegative();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_IsEqualTo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "ts", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan_IsEqualTo",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxTimeSpan const *)arg1)->IsEqualTo((wxTimeSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_IsLongerThan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "ts", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan_IsLongerThan",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxTimeSpan const *)arg1)->IsLongerThan((wxTimeSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_IsShorterThan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxTimeSpan *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "t", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TimeSpan_IsShorterThan",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxTimeSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxTimeSpan const *)arg1)->IsShorterThan((wxTimeSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_GetWeeks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_GetWeeks",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxTimeSpan const *)arg1)->GetWeeks();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_GetDays(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_GetDays",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxTimeSpan const *)arg1)->GetDays();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_GetHours(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_GetHours",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxTimeSpan const *)arg1)->GetHours();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_GetMinutes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_GetMinutes",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxTimeSpan const *)arg1)->GetMinutes();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_GetSeconds(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxLongLong result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_GetSeconds",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxTimeSpan const *)arg1)->GetSeconds();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyObject *hi, *lo, *shifter, *shifted;
        hi = PyLong_FromLong( (&result)->GetHi() );
        lo = PyLong_FromLong( (&result)->GetLo() );
        shifter = PyLong_FromLong(32);
        shifted = PyNumber_Lshift(hi, shifter);
        resultobj = PyNumber_Or(shifted, lo);
        Py_DECREF(hi);
        Py_DECREF(lo);
        Py_DECREF(shifter);
        Py_DECREF(shifted);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_GetMilliseconds(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxLongLong result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TimeSpan_GetMilliseconds",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxTimeSpan const *)arg1)->GetMilliseconds();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyObject *hi, *lo, *shifter, *shifted;
        hi = PyLong_FromLong( (&result)->GetHi() );
        lo = PyLong_FromLong( (&result)->GetLo() );
        shifter = PyLong_FromLong(32);
        shifted = PyNumber_Lshift(hi, shifter);
        resultobj = PyNumber_Or(shifted, lo);
        Py_DECREF(hi);
        Py_DECREF(lo);
        Py_DECREF(shifter);
        Py_DECREF(shifted);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSpan_Format(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTimeSpan *arg1 = (wxTimeSpan *) 0 ;
    wxString const &arg2_defvalue = wxPyDefaultTimeSpanFormat ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    wxString result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:TimeSpan_Format",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTimeSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxTimeSpan const *)arg1)->Format((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * TimeSpan_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxTimeSpan, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DateSpan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "years",(char *) "months",(char *) "weeks",(char *) "days", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_DateSpan",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDateSpan *)new wxDateSpan(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DateSpan(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DateSpan",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Days(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "days", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_Days",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Days(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Day(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateSpan_Day",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Day();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Weeks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "weeks", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_Weeks",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Weeks(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Week(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateSpan_Week",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Week();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Months(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "mon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_Months",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Months(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Month(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateSpan_Month",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Month();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Years(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "years", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_Years",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Years(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Year(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":DateSpan_Year",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan::Year();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_SetYears(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan_SetYears",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->SetYears(arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_SetMonths(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan_SetMonths",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->SetMonths(arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_SetWeeks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan_SetWeeks",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->SetWeeks(arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_SetDays(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan_SetDays",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->SetDays(arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_GetYears(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_GetYears",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateSpan const *)arg1)->GetYears();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_GetMonths(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_GetMonths",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateSpan const *)arg1)->GetMonths();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_GetWeeks(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_GetWeeks",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateSpan const *)arg1)->GetWeeks();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_GetDays(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_GetDays",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateSpan const *)arg1)->GetDays();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_GetTotalDays(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_GetTotalDays",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDateSpan const *)arg1)->GetTotalDays();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Add(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan_Add",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->Add((wxDateSpan const &)*arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Subtract(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan_Subtract",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->Subtract((wxDateSpan const &)*arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Neg(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan_Neg",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->Neg();
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan_Multiply(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "factor", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan_Multiply",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->Multiply(arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___iadd__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___iadd__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->operator +=((wxDateSpan const &)*arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___isub__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___isub__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->operator -=((wxDateSpan const &)*arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___neg__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DateSpan___neg__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->operator -();
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___imul__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "factor", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___imul__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDateSpan &_result_ref = (arg1)->operator *=(arg2);
            result = (wxDateSpan *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDateSpan, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___add__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___add__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan___add__(arg1,(wxDateSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___sub__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = 0 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___sub__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDateSpan");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan___sub__(arg1,(wxDateSpan const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___mul__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___mul__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan___mul__(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___rmul__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    int arg2 ;
    wxDateSpan result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___rmul__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDateSpan___rmul__(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDateSpan * resultptr;
        resultptr = new wxDateSpan(static_cast<wxDateSpan & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDateSpan, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = (wxDateSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateSpan___eq__(arg1,(wxDateSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateSpan___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDateSpan *arg1 = (wxDateSpan *) 0 ;
    wxDateSpan *arg2 = (wxDateSpan *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DateSpan___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDateSpan, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDateSpan___ne__(arg1,(wxDateSpan const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DateSpan_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDateSpan, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GetLocalTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetLocalTime",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxGetLocalTime();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetUTCTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetUTCTime",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxGetUTCTime();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetCurrentTime(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    long result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetCurrentTime",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)wxGetCurrentTime();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetLocalTimeMillis(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxLongLong result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetLocalTimeMillis",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetLocalTimeMillis();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyObject *hi, *lo, *shifter, *shifted;
        hi = PyLong_FromLong( (&result)->GetHi() );
        lo = PyLong_FromLong( (&result)->GetLo() );
        shifter = PyLong_FromLong(32);
        shifted = PyNumber_Lshift(hi, shifter);
        resultobj = PyNumber_Or(shifted, lo);
        Py_DECREF(hi);
        Py_DECREF(lo);
        Py_DECREF(shifter);
        Py_DECREF(shifted);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_DefaultDateTime_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DefaultDateTime is read-only.");
    return 1;
}


static PyObject *_wrap_DefaultDateTime_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxDefaultDateTime), SWIGTYPE_p_wxDateTime, 0);
    return pyobj;
}


static PyObject *_wrap_new_DataFormat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormatId arg1 ;
    wxDataFormat *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_DataFormat",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxDataFormatId >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDataFormat *)new wxDataFormat(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDataFormat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CustomDataFormat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxDataFormat *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_CustomDataFormat",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDataFormat *)new wxDataFormat((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDataFormat, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_DataFormat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DataFormat",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxDataFormatId arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DataFormat___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDataFormatId >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDataFormat const *)arg1)->operator ==(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat___ne____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxDataFormatId arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DataFormat___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDataFormatId >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDataFormat const *)arg1)->operator !=(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxDataFormat *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DataFormat___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDataFormat const *)arg1)->operator ==((wxDataFormat const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDataFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxDataFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DataFormat___eq____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDataFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_DataFormat___eq____SWIG_0(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_DataFormat___ne____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxDataFormat *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DataFormat___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDataFormat const *)arg1)->operator !=((wxDataFormat const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDataFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxDataFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DataFormat___ne____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDataFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_DataFormat___ne____SWIG_0(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_DataFormat_SetType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxDataFormatId arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DataFormat_SetType",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDataFormatId >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetType(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat_GetType(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxDataFormatId result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DataFormat_GetType",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDataFormatId)((wxDataFormat const *)arg1)->GetType();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat_GetId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DataFormat_GetId",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDataFormat const *)arg1)->GetId();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataFormat_SetId(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = (wxDataFormat *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DataFormat_SetId",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetId((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * DataFormat_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDataFormat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_FormatInvalid_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable FormatInvalid is read-only.");
    return 1;
}


static PyObject *_wrap_FormatInvalid_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxFormatInvalid), SWIGTYPE_p_wxDataFormat, 0);
    return pyobj;
}


static PyObject *_wrap_delete_DataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DataObject",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObject_GetPreferredFormat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    wxDataObject::Direction arg2 = (wxDataObject::Direction) wxDataObject::Get ;
    SwigValueWrapper<wxDataFormat > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dir", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DataObject_GetPreferredFormat",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDataObject::Direction >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDataObject const *)arg1)->GetPreferredFormat(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxDataFormat * resultptr;
        resultptr = new wxDataFormat(static_cast<wxDataFormat & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxDataFormat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObject_GetFormatCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    wxDataObject::Direction arg2 = (wxDataObject::Direction) wxDataObject::Get ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dir", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DataObject_GetFormatCount",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDataObject::Direction >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)((wxDataObject const *)arg1)->GetFormatCount(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObject_IsSupported(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    wxDataFormat *arg2 = 0 ;
    wxDataObject::Direction arg3 = (wxDataObject::Direction) wxDataObject::Get ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format",(char *) "dir", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DataObject_IsSupported",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<wxDataObject::Direction >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDataObject const *)arg1)->IsSupported((wxDataFormat const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObject_GetDataSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    wxDataFormat *arg2 = 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DataObject_GetDataSize",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)((wxDataObject const *)arg1)->GetDataSize((wxDataFormat const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObject_GetAllFormats(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    wxDataObject::Direction arg2 = (wxDataObject::Direction) wxDataObject::Get ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dir", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DataObject_GetAllFormats",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<wxDataObject::Direction >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDataObject_GetAllFormats(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObject_GetDataHere(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    wxDataFormat *arg2 = 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DataObject_GetDataHere",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDataObject_GetDataHere(arg1,(wxDataFormat const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObject_SetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) 0 ;
    wxDataFormat *arg2 = 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DataObject_SetData",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDataObject_SetData(arg1,(wxDataFormat const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DataObjectSimple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormat const &arg1_defvalue = wxFormatInvalid ;
    wxDataFormat *arg1 = (wxDataFormat *) &arg1_defvalue ;
    wxDataObjectSimple *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_DataObjectSimple",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(1)) SWIG_fail;
            if (arg1 == NULL) {
                SWIG_null_ref("wxDataFormat");
            }
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDataObjectSimple *)new wxDataObjectSimple((wxDataFormat const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDataObjectSimple, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObjectSimple_GetFormat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObjectSimple *arg1 = (wxDataObjectSimple *) 0 ;
    wxDataFormat *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DataObjectSimple_GetFormat",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObjectSimple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxDataFormat const &_result_ref = (arg1)->GetFormat();
            result = (wxDataFormat *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDataFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObjectSimple_SetFormat(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObjectSimple *arg1 = (wxDataObjectSimple *) 0 ;
    wxDataFormat *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DataObjectSimple_SetFormat",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObjectSimple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFormat((wxDataFormat const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObjectSimple_GetDataSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObjectSimple *arg1 = (wxDataObjectSimple *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DataObjectSimple_GetDataSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObjectSimple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)((wxDataObjectSimple const *)arg1)->GetDataSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObjectSimple_GetDataHere(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObjectSimple *arg1 = (wxDataObjectSimple *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DataObjectSimple_GetDataHere",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObjectSimple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDataObjectSimple_GetDataHere(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObjectSimple_SetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObjectSimple *arg1 = (wxDataObjectSimple *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DataObjectSimple_SetData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObjectSimple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxDataObjectSimple_SetData(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DataObjectSimple_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDataObjectSimple, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PyDataObjectSimple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataFormat const &arg1_defvalue = wxFormatInvalid ;
    wxDataFormat *arg1 = (wxDataFormat *) &arg1_defvalue ;
    wxPyDataObjectSimple *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_PyDataObjectSimple",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(1)) SWIG_fail;
            if (arg1 == NULL) {
                SWIG_null_ref("wxDataFormat");
            }
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyDataObjectSimple *)new wxPyDataObjectSimple((wxDataFormat const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyDataObjectSimple, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PyDataObjectSimple__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDataObjectSimple *arg1 = (wxPyDataObjectSimple *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PyDataObjectSimple__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDataObjectSimple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PyDataObjectSimple_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyDataObjectSimple, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DataObjectComposite(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObjectComposite *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_DataObjectComposite",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDataObjectComposite *)new wxDataObjectComposite();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDataObjectComposite, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataObjectComposite_Add(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObjectComposite *arg1 = (wxDataObjectComposite *) 0 ;
    wxDataObjectSimple *arg2 = (wxDataObjectSimple *) 0 ;
    bool arg3 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dataObject",(char *) "preferred", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DataObjectComposite_Add",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObjectComposite, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataObjectSimple, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (obj2) {
        {
            arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Add(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DataObjectComposite_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDataObjectComposite, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TextDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxTextDataObject *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "text", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_TextDataObject",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxTextDataObject *)new wxTextDataObject((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxTextDataObject, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_TextDataObject_GetTextLength(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTextDataObject *arg1 = (wxTextDataObject *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TextDataObject_GetTextLength",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTextDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)(arg1)->GetTextLength();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDataObject_GetText(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTextDataObject *arg1 = (wxTextDataObject *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TextDataObject_GetText",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTextDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetText();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDataObject_SetText(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxTextDataObject *arg1 = (wxTextDataObject *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TextDataObject_SetText",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxTextDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetText((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * TextDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxTextDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PyTextDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxPyTextDataObject *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "text", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_PyTextDataObject",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyTextDataObject *)new wxPyTextDataObject((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyTextDataObject, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_PyTextDataObject__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDataObject *arg1 = (wxPyTextDataObject *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PyTextDataObject__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PyTextDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyTextDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BitmapDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxBitmap const &arg1_defvalue = wxNullBitmap ;
    wxBitmap *arg1 = (wxBitmap *) &arg1_defvalue ;
    wxBitmapDataObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_BitmapDataObject",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(1)) SWIG_fail;
            if (arg1 == NULL) {
                SWIG_null_ref("wxBitmap");
            }
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmapDataObject *)new wxBitmapDataObject((wxBitmap const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmapDataObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BitmapDataObject_GetBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxBitmapDataObject *arg1 = (wxBitmapDataObject *) 0 ;
    wxBitmap result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:BitmapDataObject_GetBitmap",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmapDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxBitmapDataObject const *)arg1)->GetBitmap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBitmap * resultptr;
        resultptr = new wxBitmap(static_cast<wxBitmap & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxBitmap, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BitmapDataObject_SetBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxBitmapDataObject *arg1 = (wxBitmapDataObject *) 0 ;
    wxBitmap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BitmapDataObject_SetBitmap",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmapDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetBitmap((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BitmapDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBitmapDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PyBitmapDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxBitmap const &arg1_defvalue = wxNullBitmap ;
    wxBitmap *arg1 = (wxBitmap *) &arg1_defvalue ;
    wxPyBitmapDataObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_PyBitmapDataObject",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(1)) SWIG_fail;
            if (arg1 == NULL) {
                SWIG_null_ref("wxBitmap");
            }
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyBitmapDataObject *)new wxPyBitmapDataObject((wxBitmap const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyBitmapDataObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PyBitmapDataObject__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyBitmapDataObject *arg1 = (wxPyBitmapDataObject *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PyBitmapDataObject__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyBitmapDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PyBitmapDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyBitmapDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileDataObject *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_FileDataObject",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFileDataObject *)new wxFileDataObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFileDataObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDataObject_GetFilenames(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileDataObject *arg1 = (wxFileDataObject *) 0 ;
    wxArrayString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileDataObject_GetFilenames",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxArrayString const &_result_ref = (arg1)->GetFilenames();
            result = (wxArrayString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxArrayString2PyList_helper(*result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDataObject_AddFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFileDataObject *arg1 = (wxFileDataObject *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FileDataObject_AddFile",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFileDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddFile((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * FileDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFileDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CustomDataObject__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxDataFormat *arg1 = 0 ;
    wxCustomDataObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CustomDataObject",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCustomDataObject *)new wxCustomDataObject((wxDataFormat const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxCustomDataObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CustomDataObject__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxCustomDataObject *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CustomDataObject",&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCustomDataObject *)new_wxCustomDataObject__SWIG_1((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxCustomDataObject, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_CustomDataObject__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxCustomDataObject *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CustomDataObject")) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCustomDataObject *)new wxCustomDataObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxCustomDataObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CustomDataObject(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_CustomDataObject__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
        }
        if (_v) {
            return _wrap_new_CustomDataObject__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDataFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CustomDataObject__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_CustomDataObject'");
    return NULL;
}


static PyObject *_wrap_CustomDataObject_SetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCustomDataObject *arg1 = (wxCustomDataObject *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CustomDataObject_SetData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCustomDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxCustomDataObject_SetData(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CustomDataObject_GetSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCustomDataObject *arg1 = (wxCustomDataObject *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:CustomDataObject_GetSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCustomDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)(arg1)->GetSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CustomDataObject_GetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxCustomDataObject *arg1 = (wxCustomDataObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:CustomDataObject_GetData",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCustomDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxCustomDataObject_GetData(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CustomDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxCustomDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_URLDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxURLDataObject *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_URLDataObject",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxURLDataObject *)new wxURLDataObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxURLDataObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_URLDataObject_GetURL(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxURLDataObject *arg1 = (wxURLDataObject *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:URLDataObject_GetURL",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxURLDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetURL();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_URLDataObject_SetURL(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxURLDataObject *arg1 = (wxURLDataObject *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "url", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:URLDataObject_SetURL",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxURLDataObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetURL((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * URLDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxURLDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MetafileDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxMetafileDataObject *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_MetafileDataObject",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMetafileDataObject *)new wxMetafileDataObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMetafileDataObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MetafileDataObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMetafileDataObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_IsDragResultOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDragResult arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "res", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IsDragResultOk",kwnames,&obj0)) goto fail;
    {
        arg1 = static_cast<wxDragResult >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxIsDragResultOk(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DropSource(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxIcon const &arg2_defvalue = wxNullIcon ;
    wxIcon *arg2 = (wxIcon *) &arg2_defvalue ;
    wxIcon const &arg3_defvalue = wxNullIcon ;
    wxIcon *arg3 = (wxIcon *) &arg3_defvalue ;
    wxIcon const &arg4_defvalue = wxNullIcon ;
    wxIcon *arg4 = (wxIcon *) &arg4_defvalue ;
    wxPyDropSource *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "win",(char *) "copy",(char *) "move",(char *) "none", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_DropSource",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(2)) SWIG_fail;
            if (arg2 == NULL) {
                SWIG_null_ref("wxIcon");
            }
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(3)) SWIG_fail;
            if (arg3 == NULL) {
                SWIG_null_ref("wxIcon");
            }
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(4)) SWIG_fail;
            if (arg4 == NULL) {
                SWIG_null_ref("wxIcon");
            }
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyDropSource *)new wxPyDropSource(arg1,(wxIcon const &)*arg2,(wxIcon const &)*arg3,(wxIcon const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyDropSource, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropSource__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropSource *arg1 = (wxPyDropSource *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class",(char *) "incref", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DropSource__setCallbackInfo",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DropSource(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropSource *arg1 = (wxPyDropSource *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DropSource",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropSource_SetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropSource *arg1 = (wxPyDropSource *) 0 ;
    wxDataObject *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DropSource_SetData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataObject");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetData(*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropSource_GetDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropSource *arg1 = (wxPyDropSource *) 0 ;
    wxDataObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DropSource_GetDataObject",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDataObject *)(arg1)->GetDataObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDataObject, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropSource_SetCursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropSource *arg1 = (wxPyDropSource *) 0 ;
    wxDragResult arg2 ;
    wxCursor *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "res",(char *) "cursor", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DropSource_SetCursor",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDragResult >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxCursor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxCursor");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetCursor(arg2,(wxCursor const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropSource_DoDragDrop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropSource *arg1 = (wxPyDropSource *) 0 ;
    int arg2 = (int) wxDrag_CopyOnly ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DropSource_DoDragDrop",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->DoDragDrop(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropSource_GiveFeedback(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropSource *arg1 = (wxPyDropSource *) 0 ;
    wxDragResult arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "effect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DropSource_GiveFeedback",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDragResult >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GiveFeedback(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DropSource_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyDropSource, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DropTarget(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDataObject *arg1 = (wxDataObject *) NULL ;
    wxPyDropTarget *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "dataObject", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_DropTarget",kwnames,&obj0)) goto fail;
    if (obj0) {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyDropTarget *)new wxPyDropTarget(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyDropTarget, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DropTarget__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DropTarget(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DropTarget",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_GetDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    wxDataObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DropTarget_GetDataObject",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDataObject *)(arg1)->GetDataObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDataObject, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_SetDataObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    wxDataObject *arg2 = (wxDataObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dataObject", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DropTarget_SetDataObject",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDataObject(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_OnEnter(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DropTarget_OnEnter",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnEnter(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_OnDragOver(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DropTarget_OnDragOver",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnDragOver(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_OnLeave(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DropTarget_OnLeave",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->OnLeave();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_OnDrop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DropTarget_OnDrop",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->OnDrop(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_GetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DropTarget_GetData",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetData();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_SetDefaultAction(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    wxDragResult arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "action", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DropTarget_SetDefaultAction",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<wxDragResult >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDefaultAction(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DropTarget_GetDefaultAction(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyDropTarget *arg1 = (wxPyDropTarget *) 0 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DropTarget_GetDefaultAction",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->GetDefaultAction();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DropTarget_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyDropTarget, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TextDropTarget(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_TextDropTarget",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyTextDropTarget *)new wxPyTextDropTarget();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyTextDropTarget, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDropTarget__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *arg1 = (wxPyTextDropTarget *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:TextDropTarget__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDropTarget_OnDropText(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *arg1 = (wxPyTextDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxString *arg4 = 0 ;
    bool result;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "text", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:TextDropTarget_OnDropText",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = wxString_in_helper(obj3);
        if (arg4 == NULL) SWIG_fail;
        temp4 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->OnDropText(arg2,arg3,(wxString const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_TextDropTarget_OnEnter(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *arg1 = (wxPyTextDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:TextDropTarget_OnEnter",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnEnter(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDropTarget_OnDragOver(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *arg1 = (wxPyTextDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:TextDropTarget_OnDragOver",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnDragOver(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDropTarget_OnLeave(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *arg1 = (wxPyTextDropTarget *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TextDropTarget_OnLeave",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->OnLeave();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDropTarget_OnDrop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *arg1 = (wxPyTextDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:TextDropTarget_OnDrop",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->OnDrop(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextDropTarget_OnData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyTextDropTarget *arg1 = (wxPyTextDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:TextDropTarget_OnData",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyTextDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnData(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TextDropTarget_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyTextDropTarget, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileDropTarget(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_FileDropTarget",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyFileDropTarget *)new wxPyFileDropTarget();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyFileDropTarget, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDropTarget__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *arg1 = (wxPyFileDropTarget *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:FileDropTarget__setCallbackInfo",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFileDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDropTarget_OnDropFiles(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *arg1 = (wxPyFileDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxArrayString *arg4 = 0 ;
    bool result;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "filenames", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:FileDropTarget_OnDropFiles",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFileDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if (! PySequence_Check(obj3)) {
            PyErr_SetString(PyExc_TypeError, "Sequence of strings expected.");
            SWIG_fail;
        }
        arg4 = new wxArrayString;
        temp4 = true;
        int i, len=PySequence_Length(obj3);
        for (i=0; i<len; i++) {
            PyObject* item = PySequence_GetItem(obj3, i);
            wxString* s = wxString_in_helper(item);
            if (PyErr_Occurred())  SWIG_fail;
            arg4->Add(*s);
            delete s;
            Py_DECREF(item);
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->OnDropFiles(arg2,arg3,(wxArrayString const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp4) delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp4) delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_FileDropTarget_OnEnter(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *arg1 = (wxPyFileDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:FileDropTarget_OnEnter",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFileDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnEnter(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDropTarget_OnDragOver(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *arg1 = (wxPyFileDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:FileDropTarget_OnDragOver",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFileDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnDragOver(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDropTarget_OnLeave(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *arg1 = (wxPyFileDropTarget *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FileDropTarget_OnLeave",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFileDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->OnLeave();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDropTarget_OnDrop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *arg1 = (wxPyFileDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:FileDropTarget_OnDrop",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFileDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->OnDrop(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileDropTarget_OnData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPyFileDropTarget *arg1 = (wxPyFileDropTarget *) 0 ;
    int arg2 ;
    int arg3 ;
    wxDragResult arg4 ;
    wxDragResult result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "def", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:FileDropTarget_OnData",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFileDropTarget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<wxDragResult >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDragResult)(arg1)->OnData(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileDropTarget_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyFileDropTarget, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Clipboard(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_Clipboard",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxClipboard *)new wxClipboard();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxClipboard, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Clipboard(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Clipboard",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_Open(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Clipboard_Open",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Open();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_Close(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Clipboard_Close",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Close();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_IsOpened(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Clipboard_IsOpened",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxClipboard const *)arg1)->IsOpened();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_AddData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    wxDataObject *arg2 = (wxDataObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Clipboard_AddData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->AddData(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_SetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    wxDataObject *arg2 = (wxDataObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Clipboard_SetData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SetData(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_IsSupported(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    wxDataFormat *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "format", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Clipboard_IsSupported",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsSupported((wxDataFormat const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_GetData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    wxDataObject *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Clipboard_GetData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDataObject, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDataObject");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetData(*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_Clear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Clipboard_Clear",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Clear();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_Flush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Clipboard_Flush",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Flush();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_UsePrimarySelection(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "primary", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Clipboard_UsePrimarySelection",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->UsePrimarySelection(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Clipboard_Get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Clipboard_Get",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxClipboard *)wxClipboard::Get();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxClipboard, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Clipboard_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxClipboard, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ClipboardLocker(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboard *arg1 = (wxClipboard *) NULL ;
    wxClipboardLocker *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "clipboard", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_ClipboardLocker",kwnames,&obj0)) goto fail;
    if (obj0) {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboard, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxClipboardLocker *)new wxClipboardLocker(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxClipboardLocker, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ClipboardLocker(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboardLocker *arg1 = (wxClipboardLocker *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ClipboardLocker",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboardLocker, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClipboardLocker___nonzero__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxClipboardLocker *arg1 = (wxClipboardLocker *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ClipboardLocker___nonzero__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxClipboardLocker, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxClipboardLocker___nonzero__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ClipboardLocker_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxClipboardLocker, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_VideoMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    int arg1 = (int) 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    wxVideoMode *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "width",(char *) "height",(char *) "depth",(char *) "freq", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_VideoMode",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<int >(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = static_cast<int >(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = static_cast<int >(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxVideoMode *)new wxVideoMode(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxVideoMode, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_VideoMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_VideoMode",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_Matches(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    wxVideoMode *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VideoMode_Matches",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxVideoMode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxVideoMode const *)arg1)->Matches((wxVideoMode const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_GetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_GetWidth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxVideoMode const *)arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_GetHeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_GetHeight",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxVideoMode const *)arg1)->GetHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_GetDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_GetDepth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxVideoMode const *)arg1)->GetDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_IsOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_IsOk",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxVideoMode const *)arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    wxVideoMode *arg2 = (wxVideoMode *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VideoMode___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxVideoMode___eq__(arg1,(wxVideoMode const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    wxVideoMode *arg2 = (wxVideoMode *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VideoMode___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxVideoMode___ne__(arg1,(wxVideoMode const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_w_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "w", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VideoMode_w_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->w = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_w_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_w_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->w);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_h_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "h", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VideoMode_h_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->h = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_h_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_h_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->h);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_bpp_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bpp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VideoMode_bpp_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bpp = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_bpp_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_bpp_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->bpp);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_refresh_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "refresh", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VideoMode_refresh_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->refresh = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VideoMode_refresh_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxVideoMode *arg1 = (wxVideoMode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:VideoMode_refresh_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->refresh);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * VideoMode_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxVideoMode, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_DefaultVideoMode_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DefaultVideoMode is read-only.");
    return 1;
}


static PyObject *_wrap_DefaultVideoMode_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxDefaultVideoMode), SWIGTYPE_p_wxVideoMode, 0);
    return pyobj;
}


static PyObject *_wrap_new_Display(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    size_t arg1 = (size_t) 0 ;
    wxDisplay *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_Display",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = static_cast<size_t >(SWIG_As_unsigned_SS_long(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxDisplay *)new wxDisplay(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxDisplay, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Display(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Display",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_GetCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    size_t result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Display_GetCount",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)wxDisplay::GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_GetFromPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPoint *arg1 = 0 ;
    int result;
    wxPoint temp1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_GetFromPoint",kwnames,&obj0)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxPoint_helper(obj0, &arg1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDisplay::GetFromPoint((wxPoint const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_GetFromWindow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "window", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_GetFromWindow",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxDisplay::GetFromWindow(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_IsOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_IsOk",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDisplay const *)arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_GetGeometry(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    wxRect result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_GetGeometry",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDisplay const *)arg1)->GetGeometry();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect(static_cast<wxRect & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_GetName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_GetName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDisplay const *)arg1)->GetName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_IsPrimary(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_IsPrimary",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDisplay const *)arg1)->IsPrimary();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_GetModes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    wxVideoMode const &arg2_defvalue = wxDefaultVideoMode ;
    wxVideoMode *arg2 = (wxVideoMode *) &arg2_defvalue ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Display_GetModes",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(2)) SWIG_fail;
            if (arg2 == NULL) {
                SWIG_null_ref("wxVideoMode");
            }
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDisplay_GetModes(arg1,(wxVideoMode const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_GetCurrentMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    wxVideoMode result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_GetCurrentMode",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDisplay const *)arg1)->GetCurrentMode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxVideoMode * resultptr;
        resultptr = new wxVideoMode(static_cast<wxVideoMode & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxVideoMode, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_ChangeMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    wxVideoMode const &arg2_defvalue = wxDefaultVideoMode ;
    wxVideoMode *arg2 = (wxVideoMode *) &arg2_defvalue ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Display_ChangeMode",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxVideoMode, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(2)) SWIG_fail;
            if (arg2 == NULL) {
                SWIG_null_ref("wxVideoMode");
            }
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->ChangeMode((wxVideoMode const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Display_ResetMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxDisplay *arg1 = (wxDisplay *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Display_ResetMode",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->ResetMode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Display_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDisplay, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_StandardPaths_Get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":StandardPaths_Get",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxStandardPaths *)wxStandardPaths_Get();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxStandardPaths, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetConfigDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetConfigDir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetConfigDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetUserConfigDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetUserConfigDir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetUserConfigDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetDataDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetDataDir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetDataDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetLocalDataDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetLocalDataDir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetLocalDataDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetUserDataDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetUserDataDir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetUserDataDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetUserLocalDataDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetUserLocalDataDir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetUserLocalDataDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetPluginsDir(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetPluginsDir",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetPluginsDir();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StandardPaths_SetInstallPrefix(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "prefix", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StandardPaths_SetInstallPrefix",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetInstallPrefix((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_StandardPaths_GetInstallPrefix(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxStandardPaths *arg1 = (wxStandardPaths *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:StandardPaths_GetInstallPrefix",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxStandardPaths, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxStandardPaths const *)arg1)->GetInstallPrefix();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StandardPaths_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxStandardPaths, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"SystemSettings_GetColour", (PyCFunction) _wrap_SystemSettings_GetColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemSettings_GetFont", (PyCFunction) _wrap_SystemSettings_GetFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemSettings_GetMetric", (PyCFunction) _wrap_SystemSettings_GetMetric, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemSettings_HasFeature", (PyCFunction) _wrap_SystemSettings_HasFeature, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemSettings_GetScreenType", (PyCFunction) _wrap_SystemSettings_GetScreenType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemSettings_SetScreenType", (PyCFunction) _wrap_SystemSettings_SetScreenType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemSettings_swigregister", SystemSettings_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SystemOptions", (PyCFunction) _wrap_new_SystemOptions, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemOptions_SetOption", (PyCFunction) _wrap_SystemOptions_SetOption, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemOptions_SetOptionInt", (PyCFunction) _wrap_SystemOptions_SetOptionInt, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemOptions_GetOption", (PyCFunction) _wrap_SystemOptions_GetOption, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemOptions_GetOptionInt", (PyCFunction) _wrap_SystemOptions_GetOptionInt, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemOptions_HasOption", (PyCFunction) _wrap_SystemOptions_HasOption, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemOptions_IsFalse", (PyCFunction) _wrap_SystemOptions_IsFalse, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SystemOptions_swigregister", SystemOptions_swigregister, METH_VARARGS, NULL},
	 { (char *)"NewId", (PyCFunction) _wrap_NewId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegisterId", (PyCFunction) _wrap_RegisterId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetCurrentId", (PyCFunction) _wrap_GetCurrentId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IsStockID", (PyCFunction) _wrap_IsStockID, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IsStockLabel", (PyCFunction) _wrap_IsStockLabel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetStockLabel", (PyCFunction) _wrap_GetStockLabel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bell", (PyCFunction) _wrap_Bell, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EndBusyCursor", (PyCFunction) _wrap_EndBusyCursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetElapsedTime", (PyCFunction) _wrap_GetElapsedTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IsBusy", (PyCFunction) _wrap_IsBusy, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Now", (PyCFunction) _wrap_Now, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Shell", (PyCFunction) _wrap_Shell, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StartTimer", (PyCFunction) _wrap_StartTimer, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetOsVersion", (PyCFunction) _wrap_GetOsVersion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetOsDescription", (PyCFunction) _wrap_GetOsDescription, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetFreeMemory", (PyCFunction) _wrap_GetFreeMemory, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Shutdown", (PyCFunction) _wrap_Shutdown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sleep", (PyCFunction) _wrap_Sleep, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MilliSleep", (PyCFunction) _wrap_MilliSleep, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MicroSleep", (PyCFunction) _wrap_MicroSleep, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EnableTopLevelWindows", (PyCFunction) _wrap_EnableTopLevelWindows, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StripMenuCodes", (PyCFunction) _wrap_StripMenuCodes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetEmailAddress", (PyCFunction) _wrap_GetEmailAddress, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetHostName", (PyCFunction) _wrap_GetHostName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetFullHostName", (PyCFunction) _wrap_GetFullHostName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetUserId", (PyCFunction) _wrap_GetUserId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetUserName", (PyCFunction) _wrap_GetUserName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetHomeDir", (PyCFunction) _wrap_GetHomeDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetUserHome", (PyCFunction) _wrap_GetUserHome, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetProcessId", (PyCFunction) _wrap_GetProcessId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Trap", (PyCFunction) _wrap_Trap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileSelector", (PyCFunction) _wrap_FileSelector, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LoadFileSelector", (PyCFunction) _wrap_LoadFileSelector, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SaveFileSelector", (PyCFunction) _wrap_SaveFileSelector, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DirSelector", (PyCFunction) _wrap_DirSelector, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetTextFromUser", (PyCFunction) _wrap_GetTextFromUser, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetPasswordFromUser", (PyCFunction) _wrap_GetPasswordFromUser, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetSingleChoice", (PyCFunction) _wrap_GetSingleChoice, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetSingleChoiceIndex", (PyCFunction) _wrap_GetSingleChoiceIndex, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MessageBox", (PyCFunction) _wrap_MessageBox, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ColourDisplay", (PyCFunction) _wrap_ColourDisplay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DisplayDepth", (PyCFunction) _wrap_DisplayDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetDisplayDepth", (PyCFunction) _wrap_GetDisplayDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DisplaySize", (PyCFunction) _wrap_DisplaySize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetDisplaySize", (PyCFunction) _wrap_GetDisplaySize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DisplaySizeMM", (PyCFunction) _wrap_DisplaySizeMM, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetDisplaySizeMM", (PyCFunction) _wrap_GetDisplaySizeMM, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ClientDisplayRect", (PyCFunction) _wrap_ClientDisplayRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetClientDisplayRect", (PyCFunction) _wrap_GetClientDisplayRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SetCursor", (PyCFunction) _wrap_SetCursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetXDisplay", (PyCFunction) _wrap_GetXDisplay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BeginBusyCursor", (PyCFunction) _wrap_BeginBusyCursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetMousePosition", (PyCFunction) _wrap_GetMousePosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FindWindowAtPointer", (PyCFunction) _wrap_FindWindowAtPointer, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetActiveWindow", (PyCFunction) _wrap_GetActiveWindow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GenericFindWindowAtPoint", (PyCFunction) _wrap_GenericFindWindowAtPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FindWindowAtPoint", (PyCFunction) _wrap_FindWindowAtPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetTopLevelParent", (PyCFunction) _wrap_GetTopLevelParent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LaunchDefaultBrowser", (PyCFunction) _wrap_LaunchDefaultBrowser, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetKeyState", (PyCFunction) _wrap_GetKeyState, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_MouseState", (PyCFunction) _wrap_new_MouseState, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_MouseState", (PyCFunction) _wrap_delete_MouseState, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_GetX", (PyCFunction) _wrap_MouseState_GetX, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_GetY", (PyCFunction) _wrap_MouseState_GetY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_LeftDown", (PyCFunction) _wrap_MouseState_LeftDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_MiddleDown", (PyCFunction) _wrap_MouseState_MiddleDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_RightDown", (PyCFunction) _wrap_MouseState_RightDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_ControlDown", (PyCFunction) _wrap_MouseState_ControlDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_ShiftDown", (PyCFunction) _wrap_MouseState_ShiftDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_AltDown", (PyCFunction) _wrap_MouseState_AltDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_MetaDown", (PyCFunction) _wrap_MouseState_MetaDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_CmdDown", (PyCFunction) _wrap_MouseState_CmdDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetX", (PyCFunction) _wrap_MouseState_SetX, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetY", (PyCFunction) _wrap_MouseState_SetY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetLeftDown", (PyCFunction) _wrap_MouseState_SetLeftDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetMiddleDown", (PyCFunction) _wrap_MouseState_SetMiddleDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetRightDown", (PyCFunction) _wrap_MouseState_SetRightDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetControlDown", (PyCFunction) _wrap_MouseState_SetControlDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetShiftDown", (PyCFunction) _wrap_MouseState_SetShiftDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetAltDown", (PyCFunction) _wrap_MouseState_SetAltDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_SetMetaDown", (PyCFunction) _wrap_MouseState_SetMetaDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MouseState_swigregister", MouseState_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetMouseState", (PyCFunction) _wrap_GetMouseState, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WakeUpMainThread", (PyCFunction) _wrap_WakeUpMainThread, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MutexGuiEnter", (PyCFunction) _wrap_MutexGuiEnter, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MutexGuiLeave", (PyCFunction) _wrap_MutexGuiLeave, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_MutexGuiLocker", (PyCFunction) _wrap_new_MutexGuiLocker, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_MutexGuiLocker", (PyCFunction) _wrap_delete_MutexGuiLocker, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MutexGuiLocker_swigregister", MutexGuiLocker_swigregister, METH_VARARGS, NULL},
	 { (char *)"Thread_IsMain", (PyCFunction) _wrap_Thread_IsMain, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_ToolTip", (PyCFunction) _wrap_new_ToolTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_ToolTip", (PyCFunction) _wrap_delete_ToolTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ToolTip_SetTip", (PyCFunction) _wrap_ToolTip_SetTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ToolTip_GetTip", (PyCFunction) _wrap_ToolTip_GetTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ToolTip_GetWindow", (PyCFunction) _wrap_ToolTip_GetWindow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ToolTip_Enable", (PyCFunction) _wrap_ToolTip_Enable, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ToolTip_SetDelay", (PyCFunction) _wrap_ToolTip_SetDelay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ToolTip_swigregister", ToolTip_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Caret", (PyCFunction) _wrap_new_Caret, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Caret", (PyCFunction) _wrap_delete_Caret, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_Destroy", (PyCFunction) _wrap_Caret_Destroy, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_IsOk", (PyCFunction) _wrap_Caret_IsOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_IsVisible", (PyCFunction) _wrap_Caret_IsVisible, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_GetPosition", (PyCFunction) _wrap_Caret_GetPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_GetPositionTuple", (PyCFunction) _wrap_Caret_GetPositionTuple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_GetSize", (PyCFunction) _wrap_Caret_GetSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_GetSizeTuple", (PyCFunction) _wrap_Caret_GetSizeTuple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_GetWindow", (PyCFunction) _wrap_Caret_GetWindow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_MoveXY", (PyCFunction) _wrap_Caret_MoveXY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_Move", (PyCFunction) _wrap_Caret_Move, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_SetSizeWH", (PyCFunction) _wrap_Caret_SetSizeWH, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_SetSize", (PyCFunction) _wrap_Caret_SetSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_Show", (PyCFunction) _wrap_Caret_Show, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_Hide", (PyCFunction) _wrap_Caret_Hide, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_GetBlinkTime", (PyCFunction) _wrap_Caret_GetBlinkTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_SetBlinkTime", (PyCFunction) _wrap_Caret_SetBlinkTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Caret_swigregister", Caret_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BusyCursor", (PyCFunction) _wrap_new_BusyCursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_BusyCursor", (PyCFunction) _wrap_delete_BusyCursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BusyCursor_swigregister", BusyCursor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WindowDisabler", (PyCFunction) _wrap_new_WindowDisabler, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_WindowDisabler", (PyCFunction) _wrap_delete_WindowDisabler, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WindowDisabler_swigregister", WindowDisabler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BusyInfo", (PyCFunction) _wrap_new_BusyInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_BusyInfo", (PyCFunction) _wrap_delete_BusyInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BusyInfo_swigregister", BusyInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StopWatch", (PyCFunction) _wrap_new_StopWatch, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StopWatch_Start", (PyCFunction) _wrap_StopWatch_Start, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StopWatch_Pause", (PyCFunction) _wrap_StopWatch_Pause, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StopWatch_Resume", (PyCFunction) _wrap_StopWatch_Resume, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StopWatch_Time", (PyCFunction) _wrap_StopWatch_Time, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StopWatch_swigregister", StopWatch_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileHistory", (PyCFunction) _wrap_new_FileHistory, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_FileHistory", (PyCFunction) _wrap_delete_FileHistory, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_AddFileToHistory", (PyCFunction) _wrap_FileHistory_AddFileToHistory, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_RemoveFileFromHistory", (PyCFunction) _wrap_FileHistory_RemoveFileFromHistory, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_GetMaxFiles", (PyCFunction) _wrap_FileHistory_GetMaxFiles, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_UseMenu", (PyCFunction) _wrap_FileHistory_UseMenu, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_RemoveMenu", (PyCFunction) _wrap_FileHistory_RemoveMenu, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_Load", (PyCFunction) _wrap_FileHistory_Load, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_Save", (PyCFunction) _wrap_FileHistory_Save, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_AddFilesToMenu", (PyCFunction) _wrap_FileHistory_AddFilesToMenu, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_AddFilesToThisMenu", (PyCFunction) _wrap_FileHistory_AddFilesToThisMenu, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_GetHistoryFile", (PyCFunction) _wrap_FileHistory_GetHistoryFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_GetCount", (PyCFunction) _wrap_FileHistory_GetCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileHistory_swigregister", FileHistory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SingleInstanceChecker", (PyCFunction) _wrap_new_SingleInstanceChecker, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_PreSingleInstanceChecker", (PyCFunction) _wrap_new_PreSingleInstanceChecker, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_SingleInstanceChecker", (PyCFunction) _wrap_delete_SingleInstanceChecker, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SingleInstanceChecker_Create", (PyCFunction) _wrap_SingleInstanceChecker_Create, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SingleInstanceChecker_IsAnotherRunning", (PyCFunction) _wrap_SingleInstanceChecker_IsAnotherRunning, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SingleInstanceChecker_swigregister", SingleInstanceChecker_swigregister, METH_VARARGS, NULL},
	 { (char *)"DrawWindowOnDC", (PyCFunction) _wrap_DrawWindowOnDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_TipProvider", (PyCFunction) _wrap_delete_TipProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TipProvider_GetTip", (PyCFunction) _wrap_TipProvider_GetTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TipProvider_GetCurrentTip", (PyCFunction) _wrap_TipProvider_GetCurrentTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TipProvider_PreprocessTip", (PyCFunction) _wrap_TipProvider_PreprocessTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TipProvider_swigregister", TipProvider_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PyTipProvider", (PyCFunction) _wrap_new_PyTipProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyTipProvider__setCallbackInfo", (PyCFunction) _wrap_PyTipProvider__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyTipProvider_swigregister", PyTipProvider_swigregister, METH_VARARGS, NULL},
	 { (char *)"ShowTip", (PyCFunction) _wrap_ShowTip, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CreateFileTipProvider", (PyCFunction) _wrap_CreateFileTipProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_Timer", (PyCFunction) _wrap_new_Timer, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Timer", (PyCFunction) _wrap_delete_Timer, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer__setCallbackInfo", (PyCFunction) _wrap_Timer__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_SetOwner", (PyCFunction) _wrap_Timer_SetOwner, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_GetOwner", (PyCFunction) _wrap_Timer_GetOwner, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_Start", (PyCFunction) _wrap_Timer_Start, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_Stop", (PyCFunction) _wrap_Timer_Stop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_Notify", (PyCFunction) _wrap_Timer_Notify, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_IsRunning", (PyCFunction) _wrap_Timer_IsRunning, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_GetInterval", (PyCFunction) _wrap_Timer_GetInterval, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_IsOneShot", (PyCFunction) _wrap_Timer_IsOneShot, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_GetId", (PyCFunction) _wrap_Timer_GetId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Timer_swigregister", Timer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimerEvent", (PyCFunction) _wrap_new_TimerEvent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimerEvent_GetInterval", (PyCFunction) _wrap_TimerEvent_GetInterval, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimerEvent_swigregister", TimerEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimerRunner", _wrap_new_TimerRunner, METH_VARARGS, NULL},
	 { (char *)"delete_TimerRunner", (PyCFunction) _wrap_delete_TimerRunner, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimerRunner_Start", (PyCFunction) _wrap_TimerRunner_Start, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimerRunner_swigregister", TimerRunner_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Log", (PyCFunction) _wrap_new_Log, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Log", (PyCFunction) _wrap_delete_Log, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_IsEnabled", (PyCFunction) _wrap_Log_IsEnabled, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_EnableLogging", (PyCFunction) _wrap_Log_EnableLogging, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_OnLog", (PyCFunction) _wrap_Log_OnLog, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_Flush", (PyCFunction) _wrap_Log_Flush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_FlushActive", (PyCFunction) _wrap_Log_FlushActive, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_GetActiveTarget", (PyCFunction) _wrap_Log_GetActiveTarget, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_SetActiveTarget", (PyCFunction) _wrap_Log_SetActiveTarget, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_Suspend", (PyCFunction) _wrap_Log_Suspend, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_Resume", (PyCFunction) _wrap_Log_Resume, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_SetVerbose", (PyCFunction) _wrap_Log_SetVerbose, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_SetLogLevel", (PyCFunction) _wrap_Log_SetLogLevel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_DontCreateOnDemand", (PyCFunction) _wrap_Log_DontCreateOnDemand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_SetTraceMask", (PyCFunction) _wrap_Log_SetTraceMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_AddTraceMask", (PyCFunction) _wrap_Log_AddTraceMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_RemoveTraceMask", (PyCFunction) _wrap_Log_RemoveTraceMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_ClearTraceMasks", (PyCFunction) _wrap_Log_ClearTraceMasks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_GetTraceMasks", (PyCFunction) _wrap_Log_GetTraceMasks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_SetTimestamp", (PyCFunction) _wrap_Log_SetTimestamp, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_GetVerbose", (PyCFunction) _wrap_Log_GetVerbose, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_GetTraceMask", (PyCFunction) _wrap_Log_GetTraceMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_IsAllowedTraceMask", (PyCFunction) _wrap_Log_IsAllowedTraceMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_GetLogLevel", (PyCFunction) _wrap_Log_GetLogLevel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_GetTimestamp", (PyCFunction) _wrap_Log_GetTimestamp, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_TimeStamp", (PyCFunction) _wrap_Log_TimeStamp, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_Destroy", (PyCFunction) _wrap_Log_Destroy, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Log_swigregister", Log_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogStderr", (PyCFunction) _wrap_new_LogStderr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogStderr_swigregister", LogStderr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogTextCtrl", (PyCFunction) _wrap_new_LogTextCtrl, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogTextCtrl_swigregister", LogTextCtrl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogGui", (PyCFunction) _wrap_new_LogGui, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogGui_swigregister", LogGui_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogWindow", (PyCFunction) _wrap_new_LogWindow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogWindow_Show", (PyCFunction) _wrap_LogWindow_Show, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogWindow_GetFrame", (PyCFunction) _wrap_LogWindow_GetFrame, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogWindow_GetOldLog", (PyCFunction) _wrap_LogWindow_GetOldLog, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogWindow_IsPassingMessages", (PyCFunction) _wrap_LogWindow_IsPassingMessages, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogWindow_PassMessages", (PyCFunction) _wrap_LogWindow_PassMessages, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogWindow_swigregister", LogWindow_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogChain", (PyCFunction) _wrap_new_LogChain, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogChain_SetLog", (PyCFunction) _wrap_LogChain_SetLog, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogChain_PassMessages", (PyCFunction) _wrap_LogChain_PassMessages, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogChain_IsPassingMessages", (PyCFunction) _wrap_LogChain_IsPassingMessages, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogChain_GetOldLog", (PyCFunction) _wrap_LogChain_GetOldLog, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogChain_swigregister", LogChain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogBuffer", (PyCFunction) _wrap_new_LogBuffer, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogBuffer_GetBuffer", (PyCFunction) _wrap_LogBuffer_GetBuffer, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogBuffer_Flush", (PyCFunction) _wrap_LogBuffer_Flush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogBuffer_swigregister", LogBuffer_swigregister, METH_VARARGS, NULL},
	 { (char *)"SysErrorCode", (PyCFunction) _wrap_SysErrorCode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SysErrorMsg", (PyCFunction) _wrap_SysErrorMsg, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogFatalError", (PyCFunction) _wrap_LogFatalError, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogError", (PyCFunction) _wrap_LogError, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogWarning", (PyCFunction) _wrap_LogWarning, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogMessage", (PyCFunction) _wrap_LogMessage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogInfo", (PyCFunction) _wrap_LogInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogDebug", (PyCFunction) _wrap_LogDebug, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogVerbose", (PyCFunction) _wrap_LogVerbose, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogStatus", (PyCFunction) _wrap_LogStatus, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogStatusFrame", (PyCFunction) _wrap_LogStatusFrame, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogSysError", (PyCFunction) _wrap_LogSysError, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogGeneric", (PyCFunction) _wrap_LogGeneric, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogTrace", _wrap_LogTrace, METH_VARARGS, NULL},
	 { (char *)"SafeShowMessage", (PyCFunction) _wrap_SafeShowMessage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_LogNull", (PyCFunction) _wrap_new_LogNull, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_LogNull", (PyCFunction) _wrap_delete_LogNull, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogNull_swigregister", LogNull_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PyLog", (PyCFunction) _wrap_new_PyLog, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyLog__setCallbackInfo", (PyCFunction) _wrap_PyLog__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyLog_swigregister", PyLog_swigregister, METH_VARARGS, NULL},
	 { (char *)"Process_Kill", (PyCFunction) _wrap_Process_Kill, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_Exists", (PyCFunction) _wrap_Process_Exists, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_Open", (PyCFunction) _wrap_Process_Open, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_Process", (PyCFunction) _wrap_new_Process, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process__setCallbackInfo", (PyCFunction) _wrap_Process__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_OnTerminate", (PyCFunction) _wrap_Process_OnTerminate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_Redirect", (PyCFunction) _wrap_Process_Redirect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_IsRedirected", (PyCFunction) _wrap_Process_IsRedirected, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_Detach", (PyCFunction) _wrap_Process_Detach, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_GetInputStream", (PyCFunction) _wrap_Process_GetInputStream, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_GetErrorStream", (PyCFunction) _wrap_Process_GetErrorStream, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_GetOutputStream", (PyCFunction) _wrap_Process_GetOutputStream, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_CloseOutput", (PyCFunction) _wrap_Process_CloseOutput, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_IsInputOpened", (PyCFunction) _wrap_Process_IsInputOpened, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_IsInputAvailable", (PyCFunction) _wrap_Process_IsInputAvailable, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_IsErrorAvailable", (PyCFunction) _wrap_Process_IsErrorAvailable, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Process_swigregister", Process_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ProcessEvent", (PyCFunction) _wrap_new_ProcessEvent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ProcessEvent_GetPid", (PyCFunction) _wrap_ProcessEvent_GetPid, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ProcessEvent_GetExitCode", (PyCFunction) _wrap_ProcessEvent_GetExitCode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ProcessEvent_m_pid_set", (PyCFunction) _wrap_ProcessEvent_m_pid_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ProcessEvent_m_pid_get", (PyCFunction) _wrap_ProcessEvent_m_pid_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ProcessEvent_m_exitcode_set", (PyCFunction) _wrap_ProcessEvent_m_exitcode_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ProcessEvent_m_exitcode_get", (PyCFunction) _wrap_ProcessEvent_m_exitcode_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ProcessEvent_swigregister", ProcessEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"Execute", (PyCFunction) _wrap_Execute, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Kill", (PyCFunction) _wrap_Kill, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_Joystick", (PyCFunction) _wrap_new_Joystick, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Joystick", (PyCFunction) _wrap_delete_Joystick, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetPosition", (PyCFunction) _wrap_Joystick_GetPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetZPosition", (PyCFunction) _wrap_Joystick_GetZPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetButtonState", (PyCFunction) _wrap_Joystick_GetButtonState, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetPOVPosition", (PyCFunction) _wrap_Joystick_GetPOVPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetPOVCTSPosition", (PyCFunction) _wrap_Joystick_GetPOVCTSPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetRudderPosition", (PyCFunction) _wrap_Joystick_GetRudderPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetUPosition", (PyCFunction) _wrap_Joystick_GetUPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetVPosition", (PyCFunction) _wrap_Joystick_GetVPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetMovementThreshold", (PyCFunction) _wrap_Joystick_GetMovementThreshold, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_SetMovementThreshold", (PyCFunction) _wrap_Joystick_SetMovementThreshold, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_IsOk", (PyCFunction) _wrap_Joystick_IsOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetNumberJoysticks", (PyCFunction) _wrap_Joystick_GetNumberJoysticks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetManufacturerId", (PyCFunction) _wrap_Joystick_GetManufacturerId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetProductId", (PyCFunction) _wrap_Joystick_GetProductId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetProductName", (PyCFunction) _wrap_Joystick_GetProductName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetXMin", (PyCFunction) _wrap_Joystick_GetXMin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetYMin", (PyCFunction) _wrap_Joystick_GetYMin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetZMin", (PyCFunction) _wrap_Joystick_GetZMin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetXMax", (PyCFunction) _wrap_Joystick_GetXMax, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetYMax", (PyCFunction) _wrap_Joystick_GetYMax, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetZMax", (PyCFunction) _wrap_Joystick_GetZMax, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetNumberButtons", (PyCFunction) _wrap_Joystick_GetNumberButtons, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetNumberAxes", (PyCFunction) _wrap_Joystick_GetNumberAxes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetMaxButtons", (PyCFunction) _wrap_Joystick_GetMaxButtons, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetMaxAxes", (PyCFunction) _wrap_Joystick_GetMaxAxes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetPollingMin", (PyCFunction) _wrap_Joystick_GetPollingMin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetPollingMax", (PyCFunction) _wrap_Joystick_GetPollingMax, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetRudderMin", (PyCFunction) _wrap_Joystick_GetRudderMin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetRudderMax", (PyCFunction) _wrap_Joystick_GetRudderMax, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetUMin", (PyCFunction) _wrap_Joystick_GetUMin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetUMax", (PyCFunction) _wrap_Joystick_GetUMax, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetVMin", (PyCFunction) _wrap_Joystick_GetVMin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_GetVMax", (PyCFunction) _wrap_Joystick_GetVMax, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_HasRudder", (PyCFunction) _wrap_Joystick_HasRudder, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_HasZ", (PyCFunction) _wrap_Joystick_HasZ, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_HasU", (PyCFunction) _wrap_Joystick_HasU, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_HasV", (PyCFunction) _wrap_Joystick_HasV, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_HasPOV", (PyCFunction) _wrap_Joystick_HasPOV, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_HasPOV4Dir", (PyCFunction) _wrap_Joystick_HasPOV4Dir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_HasPOVCTS", (PyCFunction) _wrap_Joystick_HasPOVCTS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_SetCapture", (PyCFunction) _wrap_Joystick_SetCapture, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_ReleaseCapture", (PyCFunction) _wrap_Joystick_ReleaseCapture, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Joystick_swigregister", Joystick_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JoystickEvent", (PyCFunction) _wrap_new_JoystickEvent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_GetPosition", (PyCFunction) _wrap_JoystickEvent_GetPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_GetZPosition", (PyCFunction) _wrap_JoystickEvent_GetZPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_GetButtonState", (PyCFunction) _wrap_JoystickEvent_GetButtonState, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_GetButtonChange", (PyCFunction) _wrap_JoystickEvent_GetButtonChange, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_GetJoystick", (PyCFunction) _wrap_JoystickEvent_GetJoystick, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_SetJoystick", (PyCFunction) _wrap_JoystickEvent_SetJoystick, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_SetButtonState", (PyCFunction) _wrap_JoystickEvent_SetButtonState, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_SetButtonChange", (PyCFunction) _wrap_JoystickEvent_SetButtonChange, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_SetPosition", (PyCFunction) _wrap_JoystickEvent_SetPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_SetZPosition", (PyCFunction) _wrap_JoystickEvent_SetZPosition, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_IsButton", (PyCFunction) _wrap_JoystickEvent_IsButton, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_IsMove", (PyCFunction) _wrap_JoystickEvent_IsMove, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_IsZMove", (PyCFunction) _wrap_JoystickEvent_IsZMove, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_ButtonDown", (PyCFunction) _wrap_JoystickEvent_ButtonDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_ButtonUp", (PyCFunction) _wrap_JoystickEvent_ButtonUp, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_ButtonIsDown", (PyCFunction) _wrap_JoystickEvent_ButtonIsDown, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"JoystickEvent_swigregister", JoystickEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Sound", (PyCFunction) _wrap_new_Sound, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_SoundFromData", (PyCFunction) _wrap_new_SoundFromData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Sound", (PyCFunction) _wrap_delete_Sound, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sound_Create", (PyCFunction) _wrap_Sound_Create, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sound_CreateFromData", (PyCFunction) _wrap_Sound_CreateFromData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sound_IsOk", (PyCFunction) _wrap_Sound_IsOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sound_Play", (PyCFunction) _wrap_Sound_Play, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sound_PlaySound", (PyCFunction) _wrap_Sound_PlaySound, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sound_Stop", (PyCFunction) _wrap_Sound_Stop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Sound_swigregister", Sound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileTypeInfo", (PyCFunction) _wrap_new_FileTypeInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_FileTypeInfoSequence", (PyCFunction) _wrap_new_FileTypeInfoSequence, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_NullFileTypeInfo", (PyCFunction) _wrap_new_NullFileTypeInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_IsValid", (PyCFunction) _wrap_FileTypeInfo_IsValid, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_SetIcon", (PyCFunction) _wrap_FileTypeInfo_SetIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_SetShortDesc", (PyCFunction) _wrap_FileTypeInfo_SetShortDesc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetMimeType", (PyCFunction) _wrap_FileTypeInfo_GetMimeType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetOpenCommand", (PyCFunction) _wrap_FileTypeInfo_GetOpenCommand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetPrintCommand", (PyCFunction) _wrap_FileTypeInfo_GetPrintCommand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetShortDesc", (PyCFunction) _wrap_FileTypeInfo_GetShortDesc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetDescription", (PyCFunction) _wrap_FileTypeInfo_GetDescription, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetExtensions", (PyCFunction) _wrap_FileTypeInfo_GetExtensions, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetExtensionsCount", (PyCFunction) _wrap_FileTypeInfo_GetExtensionsCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetIconFile", (PyCFunction) _wrap_FileTypeInfo_GetIconFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_GetIconIndex", (PyCFunction) _wrap_FileTypeInfo_GetIconIndex, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileTypeInfo_swigregister", FileTypeInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileType", (PyCFunction) _wrap_new_FileType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_FileType", (PyCFunction) _wrap_delete_FileType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetMimeType", (PyCFunction) _wrap_FileType_GetMimeType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetMimeTypes", (PyCFunction) _wrap_FileType_GetMimeTypes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetExtensions", (PyCFunction) _wrap_FileType_GetExtensions, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetIcon", (PyCFunction) _wrap_FileType_GetIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetIconInfo", (PyCFunction) _wrap_FileType_GetIconInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetDescription", (PyCFunction) _wrap_FileType_GetDescription, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetOpenCommand", (PyCFunction) _wrap_FileType_GetOpenCommand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetPrintCommand", (PyCFunction) _wrap_FileType_GetPrintCommand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_GetAllCommands", (PyCFunction) _wrap_FileType_GetAllCommands, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_SetCommand", (PyCFunction) _wrap_FileType_SetCommand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_SetDefaultIcon", (PyCFunction) _wrap_FileType_SetDefaultIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_Unassociate", (PyCFunction) _wrap_FileType_Unassociate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_ExpandCommand", (PyCFunction) _wrap_FileType_ExpandCommand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileType_swigregister", FileType_swigregister, METH_VARARGS, NULL},
	 { (char *)"MimeTypesManager_IsOfType", (PyCFunction) _wrap_MimeTypesManager_IsOfType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_MimeTypesManager", (PyCFunction) _wrap_new_MimeTypesManager, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_Initialize", (PyCFunction) _wrap_MimeTypesManager_Initialize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_ClearData", (PyCFunction) _wrap_MimeTypesManager_ClearData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_GetFileTypeFromExtension", (PyCFunction) _wrap_MimeTypesManager_GetFileTypeFromExtension, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_GetFileTypeFromMimeType", (PyCFunction) _wrap_MimeTypesManager_GetFileTypeFromMimeType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_ReadMailcap", (PyCFunction) _wrap_MimeTypesManager_ReadMailcap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_ReadMimeTypes", (PyCFunction) _wrap_MimeTypesManager_ReadMimeTypes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_EnumAllFileTypes", (PyCFunction) _wrap_MimeTypesManager_EnumAllFileTypes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_AddFallback", (PyCFunction) _wrap_MimeTypesManager_AddFallback, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_Associate", (PyCFunction) _wrap_MimeTypesManager_Associate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_Unassociate", (PyCFunction) _wrap_MimeTypesManager_Unassociate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_MimeTypesManager", (PyCFunction) _wrap_delete_MimeTypesManager, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MimeTypesManager_swigregister", MimeTypesManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ArtProvider", (PyCFunction) _wrap_new_ArtProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_ArtProvider", (PyCFunction) _wrap_delete_ArtProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider__setCallbackInfo", (PyCFunction) _wrap_ArtProvider__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_PushProvider", (PyCFunction) _wrap_ArtProvider_PushProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_PopProvider", (PyCFunction) _wrap_ArtProvider_PopProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_RemoveProvider", (PyCFunction) _wrap_ArtProvider_RemoveProvider, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_GetBitmap", (PyCFunction) _wrap_ArtProvider_GetBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_GetIcon", (PyCFunction) _wrap_ArtProvider_GetIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_GetSizeHint", (PyCFunction) _wrap_ArtProvider_GetSizeHint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_Destroy", (PyCFunction) _wrap_ArtProvider_Destroy, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ArtProvider_swigregister", ArtProvider_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ConfigBase", (PyCFunction) _wrap_delete_ConfigBase, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_Set", (PyCFunction) _wrap_ConfigBase_Set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_Get", (PyCFunction) _wrap_ConfigBase_Get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_Create", (PyCFunction) _wrap_ConfigBase_Create, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_DontCreateOnDemand", (PyCFunction) _wrap_ConfigBase_DontCreateOnDemand, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_SetPath", (PyCFunction) _wrap_ConfigBase_SetPath, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetPath", (PyCFunction) _wrap_ConfigBase_GetPath, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetFirstGroup", (PyCFunction) _wrap_ConfigBase_GetFirstGroup, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetNextGroup", (PyCFunction) _wrap_ConfigBase_GetNextGroup, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetFirstEntry", (PyCFunction) _wrap_ConfigBase_GetFirstEntry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetNextEntry", (PyCFunction) _wrap_ConfigBase_GetNextEntry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetNumberOfEntries", (PyCFunction) _wrap_ConfigBase_GetNumberOfEntries, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetNumberOfGroups", (PyCFunction) _wrap_ConfigBase_GetNumberOfGroups, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_HasGroup", (PyCFunction) _wrap_ConfigBase_HasGroup, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_HasEntry", (PyCFunction) _wrap_ConfigBase_HasEntry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_Exists", (PyCFunction) _wrap_ConfigBase_Exists, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetEntryType", (PyCFunction) _wrap_ConfigBase_GetEntryType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_Read", (PyCFunction) _wrap_ConfigBase_Read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_ReadInt", (PyCFunction) _wrap_ConfigBase_ReadInt, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_ReadFloat", (PyCFunction) _wrap_ConfigBase_ReadFloat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_ReadBool", (PyCFunction) _wrap_ConfigBase_ReadBool, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_Write", (PyCFunction) _wrap_ConfigBase_Write, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_WriteInt", (PyCFunction) _wrap_ConfigBase_WriteInt, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_WriteFloat", (PyCFunction) _wrap_ConfigBase_WriteFloat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_WriteBool", (PyCFunction) _wrap_ConfigBase_WriteBool, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_Flush", (PyCFunction) _wrap_ConfigBase_Flush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_RenameEntry", (PyCFunction) _wrap_ConfigBase_RenameEntry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_RenameGroup", (PyCFunction) _wrap_ConfigBase_RenameGroup, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_DeleteEntry", (PyCFunction) _wrap_ConfigBase_DeleteEntry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_DeleteGroup", (PyCFunction) _wrap_ConfigBase_DeleteGroup, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_DeleteAll", (PyCFunction) _wrap_ConfigBase_DeleteAll, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_SetExpandEnvVars", (PyCFunction) _wrap_ConfigBase_SetExpandEnvVars, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_IsExpandingEnvVars", (PyCFunction) _wrap_ConfigBase_IsExpandingEnvVars, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_SetRecordDefaults", (PyCFunction) _wrap_ConfigBase_SetRecordDefaults, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_IsRecordingDefaults", (PyCFunction) _wrap_ConfigBase_IsRecordingDefaults, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_ExpandEnvVars", (PyCFunction) _wrap_ConfigBase_ExpandEnvVars, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetAppName", (PyCFunction) _wrap_ConfigBase_GetAppName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetVendorName", (PyCFunction) _wrap_ConfigBase_GetVendorName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_SetAppName", (PyCFunction) _wrap_ConfigBase_SetAppName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_SetVendorName", (PyCFunction) _wrap_ConfigBase_SetVendorName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_SetStyle", (PyCFunction) _wrap_ConfigBase_SetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_GetStyle", (PyCFunction) _wrap_ConfigBase_GetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigBase_swigregister", ConfigBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Config", (PyCFunction) _wrap_new_Config, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Config", (PyCFunction) _wrap_delete_Config, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Config_swigregister", Config_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileConfig", (PyCFunction) _wrap_new_FileConfig, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_FileConfig", (PyCFunction) _wrap_delete_FileConfig, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileConfig_swigregister", FileConfig_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConfigPathChanger", (PyCFunction) _wrap_new_ConfigPathChanger, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_ConfigPathChanger", (PyCFunction) _wrap_delete_ConfigPathChanger, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigPathChanger_Name", (PyCFunction) _wrap_ConfigPathChanger_Name, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ConfigPathChanger_swigregister", ConfigPathChanger_swigregister, METH_VARARGS, NULL},
	 { (char *)"ExpandEnvVars", (PyCFunction) _wrap_ExpandEnvVars, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetCountry", (PyCFunction) _wrap_DateTime_SetCountry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetCountry", (PyCFunction) _wrap_DateTime_GetCountry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsWestEuropeanCountry", (PyCFunction) _wrap_DateTime_IsWestEuropeanCountry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetCurrentYear", (PyCFunction) _wrap_DateTime_GetCurrentYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ConvertYearToBC", (PyCFunction) _wrap_DateTime_ConvertYearToBC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetCurrentMonth", (PyCFunction) _wrap_DateTime_GetCurrentMonth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsLeapYear", (PyCFunction) _wrap_DateTime_IsLeapYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetCentury", (PyCFunction) _wrap_DateTime_GetCentury, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetNumberOfDaysinYear", (PyCFunction) _wrap_DateTime_GetNumberOfDaysinYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetNumberOfDaysInMonth", (PyCFunction) _wrap_DateTime_GetNumberOfDaysInMonth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetMonthName", (PyCFunction) _wrap_DateTime_GetMonthName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetWeekDayName", (PyCFunction) _wrap_DateTime_GetWeekDayName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetAmPmStrings", (PyCFunction) _wrap_DateTime_GetAmPmStrings, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsDSTApplicable", (PyCFunction) _wrap_DateTime_IsDSTApplicable, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetBeginDST", (PyCFunction) _wrap_DateTime_GetBeginDST, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetEndDST", (PyCFunction) _wrap_DateTime_GetEndDST, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_Now", (PyCFunction) _wrap_DateTime_Now, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_UNow", (PyCFunction) _wrap_DateTime_UNow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_Today", (PyCFunction) _wrap_DateTime_Today, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_DateTime", (PyCFunction) _wrap_new_DateTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_DateTimeFromTimeT", (PyCFunction) _wrap_new_DateTimeFromTimeT, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_DateTimeFromJDN", (PyCFunction) _wrap_new_DateTimeFromJDN, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_DateTimeFromHMS", (PyCFunction) _wrap_new_DateTimeFromHMS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_DateTimeFromDMY", (PyCFunction) _wrap_new_DateTimeFromDMY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_DateTime", (PyCFunction) _wrap_delete_DateTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToCurrent", (PyCFunction) _wrap_DateTime_SetToCurrent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetTimeT", (PyCFunction) _wrap_DateTime_SetTimeT, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetJDN", (PyCFunction) _wrap_DateTime_SetJDN, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetHMS", (PyCFunction) _wrap_DateTime_SetHMS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_Set", (PyCFunction) _wrap_DateTime_Set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ResetTime", (PyCFunction) _wrap_DateTime_ResetTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetYear", (PyCFunction) _wrap_DateTime_SetYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetMonth", (PyCFunction) _wrap_DateTime_SetMonth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetDay", (PyCFunction) _wrap_DateTime_SetDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetHour", (PyCFunction) _wrap_DateTime_SetHour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetMinute", (PyCFunction) _wrap_DateTime_SetMinute, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetSecond", (PyCFunction) _wrap_DateTime_SetSecond, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetMillisecond", (PyCFunction) _wrap_DateTime_SetMillisecond, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToWeekDayInSameWeek", (PyCFunction) _wrap_DateTime_SetToWeekDayInSameWeek, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetWeekDayInSameWeek", (PyCFunction) _wrap_DateTime_GetWeekDayInSameWeek, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToNextWeekDay", (PyCFunction) _wrap_DateTime_SetToNextWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetNextWeekDay", (PyCFunction) _wrap_DateTime_GetNextWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToPrevWeekDay", (PyCFunction) _wrap_DateTime_SetToPrevWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetPrevWeekDay", (PyCFunction) _wrap_DateTime_GetPrevWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToWeekDay", (PyCFunction) _wrap_DateTime_SetToWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToLastWeekDay", (PyCFunction) _wrap_DateTime_SetToLastWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetLastWeekDay", (PyCFunction) _wrap_DateTime_GetLastWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToTheWeek", (PyCFunction) _wrap_DateTime_SetToTheWeek, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetWeek", (PyCFunction) _wrap_DateTime_GetWeek, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToWeekOfYear", (PyCFunction) _wrap_DateTime_SetToWeekOfYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToLastMonthDay", (PyCFunction) _wrap_DateTime_SetToLastMonthDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetLastMonthDay", (PyCFunction) _wrap_DateTime_GetLastMonthDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SetToYearDay", (PyCFunction) _wrap_DateTime_SetToYearDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetYearDay", (PyCFunction) _wrap_DateTime_GetYearDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetJulianDayNumber", (PyCFunction) _wrap_DateTime_GetJulianDayNumber, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetJDN", (PyCFunction) _wrap_DateTime_GetJDN, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetModifiedJulianDayNumber", (PyCFunction) _wrap_DateTime_GetModifiedJulianDayNumber, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetMJD", (PyCFunction) _wrap_DateTime_GetMJD, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetRataDie", (PyCFunction) _wrap_DateTime_GetRataDie, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ToTimezone", (PyCFunction) _wrap_DateTime_ToTimezone, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_MakeTimezone", (PyCFunction) _wrap_DateTime_MakeTimezone, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_FromTimezone", (PyCFunction) _wrap_DateTime_FromTimezone, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_MakeFromTimezone", (PyCFunction) _wrap_DateTime_MakeFromTimezone, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ToUTC", (PyCFunction) _wrap_DateTime_ToUTC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_MakeUTC", (PyCFunction) _wrap_DateTime_MakeUTC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ToGMT", (PyCFunction) _wrap_DateTime_ToGMT, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_MakeGMT", (PyCFunction) _wrap_DateTime_MakeGMT, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_FromUTC", (PyCFunction) _wrap_DateTime_FromUTC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_MakeFromUTC", (PyCFunction) _wrap_DateTime_MakeFromUTC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsDST", (PyCFunction) _wrap_DateTime_IsDST, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsValid", (PyCFunction) _wrap_DateTime_IsValid, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetTicks", (PyCFunction) _wrap_DateTime_GetTicks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetYear", (PyCFunction) _wrap_DateTime_GetYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetMonth", (PyCFunction) _wrap_DateTime_GetMonth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetDay", (PyCFunction) _wrap_DateTime_GetDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetWeekDay", (PyCFunction) _wrap_DateTime_GetWeekDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetHour", (PyCFunction) _wrap_DateTime_GetHour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetMinute", (PyCFunction) _wrap_DateTime_GetMinute, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetSecond", (PyCFunction) _wrap_DateTime_GetSecond, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetMillisecond", (PyCFunction) _wrap_DateTime_GetMillisecond, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetDayOfYear", (PyCFunction) _wrap_DateTime_GetDayOfYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetWeekOfYear", (PyCFunction) _wrap_DateTime_GetWeekOfYear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_GetWeekOfMonth", (PyCFunction) _wrap_DateTime_GetWeekOfMonth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsWorkDay", (PyCFunction) _wrap_DateTime_IsWorkDay, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsEqualTo", (PyCFunction) _wrap_DateTime_IsEqualTo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsEarlierThan", (PyCFunction) _wrap_DateTime_IsEarlierThan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsLaterThan", (PyCFunction) _wrap_DateTime_IsLaterThan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsStrictlyBetween", (PyCFunction) _wrap_DateTime_IsStrictlyBetween, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsBetween", (PyCFunction) _wrap_DateTime_IsBetween, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsSameDate", (PyCFunction) _wrap_DateTime_IsSameDate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsSameTime", (PyCFunction) _wrap_DateTime_IsSameTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_IsEqualUpTo", (PyCFunction) _wrap_DateTime_IsEqualUpTo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_AddTS", (PyCFunction) _wrap_DateTime_AddTS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_AddDS", (PyCFunction) _wrap_DateTime_AddDS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SubtractTS", (PyCFunction) _wrap_DateTime_SubtractTS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_SubtractDS", (PyCFunction) _wrap_DateTime_SubtractDS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_Subtract", (PyCFunction) _wrap_DateTime_Subtract, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime___iadd__", _wrap_DateTime___iadd__, METH_VARARGS, NULL},
	 { (char *)"DateTime___isub__", _wrap_DateTime___isub__, METH_VARARGS, NULL},
	 { (char *)"DateTime___add__", _wrap_DateTime___add__, METH_VARARGS, NULL},
	 { (char *)"DateTime___sub__", _wrap_DateTime___sub__, METH_VARARGS, NULL},
	 { (char *)"DateTime___lt__", (PyCFunction) _wrap_DateTime___lt__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime___le__", (PyCFunction) _wrap_DateTime___le__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime___gt__", (PyCFunction) _wrap_DateTime___gt__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime___ge__", (PyCFunction) _wrap_DateTime___ge__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime___eq__", (PyCFunction) _wrap_DateTime___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime___ne__", (PyCFunction) _wrap_DateTime___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ParseRfc822Date", (PyCFunction) _wrap_DateTime_ParseRfc822Date, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ParseFormat", (PyCFunction) _wrap_DateTime_ParseFormat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ParseDateTime", (PyCFunction) _wrap_DateTime_ParseDateTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ParseDate", (PyCFunction) _wrap_DateTime_ParseDate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_ParseTime", (PyCFunction) _wrap_DateTime_ParseTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_Format", (PyCFunction) _wrap_DateTime_Format, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_FormatDate", (PyCFunction) _wrap_DateTime_FormatDate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_FormatTime", (PyCFunction) _wrap_DateTime_FormatTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_FormatISODate", (PyCFunction) _wrap_DateTime_FormatISODate, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_FormatISOTime", (PyCFunction) _wrap_DateTime_FormatISOTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateTime_swigregister", DateTime_swigregister, METH_VARARGS, NULL},
	 { (char *)"TimeSpan_Seconds", (PyCFunction) _wrap_TimeSpan_Seconds, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Second", (PyCFunction) _wrap_TimeSpan_Second, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Minutes", (PyCFunction) _wrap_TimeSpan_Minutes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Minute", (PyCFunction) _wrap_TimeSpan_Minute, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Hours", (PyCFunction) _wrap_TimeSpan_Hours, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Hour", (PyCFunction) _wrap_TimeSpan_Hour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Days", (PyCFunction) _wrap_TimeSpan_Days, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Day", (PyCFunction) _wrap_TimeSpan_Day, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Weeks", (PyCFunction) _wrap_TimeSpan_Weeks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Week", (PyCFunction) _wrap_TimeSpan_Week, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_TimeSpan", (PyCFunction) _wrap_new_TimeSpan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_TimeSpan", (PyCFunction) _wrap_delete_TimeSpan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Add", (PyCFunction) _wrap_TimeSpan_Add, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Subtract", (PyCFunction) _wrap_TimeSpan_Subtract, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Multiply", (PyCFunction) _wrap_TimeSpan_Multiply, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Neg", (PyCFunction) _wrap_TimeSpan_Neg, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Abs", (PyCFunction) _wrap_TimeSpan_Abs, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___iadd__", (PyCFunction) _wrap_TimeSpan___iadd__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___isub__", (PyCFunction) _wrap_TimeSpan___isub__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___imul__", (PyCFunction) _wrap_TimeSpan___imul__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___neg__", (PyCFunction) _wrap_TimeSpan___neg__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___add__", (PyCFunction) _wrap_TimeSpan___add__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___sub__", (PyCFunction) _wrap_TimeSpan___sub__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___mul__", (PyCFunction) _wrap_TimeSpan___mul__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___rmul__", (PyCFunction) _wrap_TimeSpan___rmul__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___lt__", (PyCFunction) _wrap_TimeSpan___lt__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___le__", (PyCFunction) _wrap_TimeSpan___le__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___gt__", (PyCFunction) _wrap_TimeSpan___gt__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___ge__", (PyCFunction) _wrap_TimeSpan___ge__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___eq__", (PyCFunction) _wrap_TimeSpan___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan___ne__", (PyCFunction) _wrap_TimeSpan___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_IsNull", (PyCFunction) _wrap_TimeSpan_IsNull, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_IsPositive", (PyCFunction) _wrap_TimeSpan_IsPositive, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_IsNegative", (PyCFunction) _wrap_TimeSpan_IsNegative, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_IsEqualTo", (PyCFunction) _wrap_TimeSpan_IsEqualTo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_IsLongerThan", (PyCFunction) _wrap_TimeSpan_IsLongerThan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_IsShorterThan", (PyCFunction) _wrap_TimeSpan_IsShorterThan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_GetWeeks", (PyCFunction) _wrap_TimeSpan_GetWeeks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_GetDays", (PyCFunction) _wrap_TimeSpan_GetDays, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_GetHours", (PyCFunction) _wrap_TimeSpan_GetHours, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_GetMinutes", (PyCFunction) _wrap_TimeSpan_GetMinutes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_GetSeconds", (PyCFunction) _wrap_TimeSpan_GetSeconds, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_GetMilliseconds", (PyCFunction) _wrap_TimeSpan_GetMilliseconds, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_Format", (PyCFunction) _wrap_TimeSpan_Format, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TimeSpan_swigregister", TimeSpan_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DateSpan", (PyCFunction) _wrap_new_DateSpan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_DateSpan", (PyCFunction) _wrap_delete_DateSpan, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Days", (PyCFunction) _wrap_DateSpan_Days, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Day", (PyCFunction) _wrap_DateSpan_Day, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Weeks", (PyCFunction) _wrap_DateSpan_Weeks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Week", (PyCFunction) _wrap_DateSpan_Week, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Months", (PyCFunction) _wrap_DateSpan_Months, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Month", (PyCFunction) _wrap_DateSpan_Month, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Years", (PyCFunction) _wrap_DateSpan_Years, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Year", (PyCFunction) _wrap_DateSpan_Year, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_SetYears", (PyCFunction) _wrap_DateSpan_SetYears, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_SetMonths", (PyCFunction) _wrap_DateSpan_SetMonths, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_SetWeeks", (PyCFunction) _wrap_DateSpan_SetWeeks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_SetDays", (PyCFunction) _wrap_DateSpan_SetDays, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_GetYears", (PyCFunction) _wrap_DateSpan_GetYears, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_GetMonths", (PyCFunction) _wrap_DateSpan_GetMonths, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_GetWeeks", (PyCFunction) _wrap_DateSpan_GetWeeks, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_GetDays", (PyCFunction) _wrap_DateSpan_GetDays, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_GetTotalDays", (PyCFunction) _wrap_DateSpan_GetTotalDays, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Add", (PyCFunction) _wrap_DateSpan_Add, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Subtract", (PyCFunction) _wrap_DateSpan_Subtract, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Neg", (PyCFunction) _wrap_DateSpan_Neg, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_Multiply", (PyCFunction) _wrap_DateSpan_Multiply, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___iadd__", (PyCFunction) _wrap_DateSpan___iadd__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___isub__", (PyCFunction) _wrap_DateSpan___isub__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___neg__", (PyCFunction) _wrap_DateSpan___neg__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___imul__", (PyCFunction) _wrap_DateSpan___imul__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___add__", (PyCFunction) _wrap_DateSpan___add__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___sub__", (PyCFunction) _wrap_DateSpan___sub__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___mul__", (PyCFunction) _wrap_DateSpan___mul__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___rmul__", (PyCFunction) _wrap_DateSpan___rmul__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___eq__", (PyCFunction) _wrap_DateSpan___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan___ne__", (PyCFunction) _wrap_DateSpan___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DateSpan_swigregister", DateSpan_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetLocalTime", (PyCFunction) _wrap_GetLocalTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetUTCTime", (PyCFunction) _wrap_GetUTCTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetCurrentTime", (PyCFunction) _wrap_GetCurrentTime, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetLocalTimeMillis", (PyCFunction) _wrap_GetLocalTimeMillis, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_DataFormat", (PyCFunction) _wrap_new_DataFormat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_CustomDataFormat", (PyCFunction) _wrap_new_CustomDataFormat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_DataFormat", (PyCFunction) _wrap_delete_DataFormat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataFormat___eq__", _wrap_DataFormat___eq__, METH_VARARGS, NULL},
	 { (char *)"DataFormat___ne__", _wrap_DataFormat___ne__, METH_VARARGS, NULL},
	 { (char *)"DataFormat_SetType", (PyCFunction) _wrap_DataFormat_SetType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataFormat_GetType", (PyCFunction) _wrap_DataFormat_GetType, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataFormat_GetId", (PyCFunction) _wrap_DataFormat_GetId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataFormat_SetId", (PyCFunction) _wrap_DataFormat_SetId, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataFormat_swigregister", DataFormat_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DataObject", (PyCFunction) _wrap_delete_DataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_GetPreferredFormat", (PyCFunction) _wrap_DataObject_GetPreferredFormat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_GetFormatCount", (PyCFunction) _wrap_DataObject_GetFormatCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_IsSupported", (PyCFunction) _wrap_DataObject_IsSupported, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_GetDataSize", (PyCFunction) _wrap_DataObject_GetDataSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_GetAllFormats", (PyCFunction) _wrap_DataObject_GetAllFormats, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_GetDataHere", (PyCFunction) _wrap_DataObject_GetDataHere, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_SetData", (PyCFunction) _wrap_DataObject_SetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObject_swigregister", DataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DataObjectSimple", (PyCFunction) _wrap_new_DataObjectSimple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectSimple_GetFormat", (PyCFunction) _wrap_DataObjectSimple_GetFormat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectSimple_SetFormat", (PyCFunction) _wrap_DataObjectSimple_SetFormat, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectSimple_GetDataSize", (PyCFunction) _wrap_DataObjectSimple_GetDataSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectSimple_GetDataHere", (PyCFunction) _wrap_DataObjectSimple_GetDataHere, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectSimple_SetData", (PyCFunction) _wrap_DataObjectSimple_SetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectSimple_swigregister", DataObjectSimple_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PyDataObjectSimple", (PyCFunction) _wrap_new_PyDataObjectSimple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyDataObjectSimple__setCallbackInfo", (PyCFunction) _wrap_PyDataObjectSimple__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyDataObjectSimple_swigregister", PyDataObjectSimple_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DataObjectComposite", (PyCFunction) _wrap_new_DataObjectComposite, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectComposite_Add", (PyCFunction) _wrap_DataObjectComposite_Add, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DataObjectComposite_swigregister", DataObjectComposite_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TextDataObject", (PyCFunction) _wrap_new_TextDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDataObject_GetTextLength", (PyCFunction) _wrap_TextDataObject_GetTextLength, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDataObject_GetText", (PyCFunction) _wrap_TextDataObject_GetText, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDataObject_SetText", (PyCFunction) _wrap_TextDataObject_SetText, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDataObject_swigregister", TextDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PyTextDataObject", (PyCFunction) _wrap_new_PyTextDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyTextDataObject__setCallbackInfo", (PyCFunction) _wrap_PyTextDataObject__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyTextDataObject_swigregister", PyTextDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BitmapDataObject", (PyCFunction) _wrap_new_BitmapDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BitmapDataObject_GetBitmap", (PyCFunction) _wrap_BitmapDataObject_GetBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BitmapDataObject_SetBitmap", (PyCFunction) _wrap_BitmapDataObject_SetBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BitmapDataObject_swigregister", BitmapDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PyBitmapDataObject", (PyCFunction) _wrap_new_PyBitmapDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyBitmapDataObject__setCallbackInfo", (PyCFunction) _wrap_PyBitmapDataObject__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PyBitmapDataObject_swigregister", PyBitmapDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileDataObject", (PyCFunction) _wrap_new_FileDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDataObject_GetFilenames", (PyCFunction) _wrap_FileDataObject_GetFilenames, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDataObject_AddFile", (PyCFunction) _wrap_FileDataObject_AddFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDataObject_swigregister", FileDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CustomDataObject", _wrap_new_CustomDataObject, METH_VARARGS, NULL},
	 { (char *)"CustomDataObject_SetData", (PyCFunction) _wrap_CustomDataObject_SetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CustomDataObject_GetSize", (PyCFunction) _wrap_CustomDataObject_GetSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CustomDataObject_GetData", (PyCFunction) _wrap_CustomDataObject_GetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CustomDataObject_swigregister", CustomDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_URLDataObject", (PyCFunction) _wrap_new_URLDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"URLDataObject_GetURL", (PyCFunction) _wrap_URLDataObject_GetURL, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"URLDataObject_SetURL", (PyCFunction) _wrap_URLDataObject_SetURL, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"URLDataObject_swigregister", URLDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetafileDataObject", (PyCFunction) _wrap_new_MetafileDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MetafileDataObject_swigregister", MetafileDataObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"IsDragResultOk", (PyCFunction) _wrap_IsDragResultOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_DropSource", (PyCFunction) _wrap_new_DropSource, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropSource__setCallbackInfo", (PyCFunction) _wrap_DropSource__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_DropSource", (PyCFunction) _wrap_delete_DropSource, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropSource_SetData", (PyCFunction) _wrap_DropSource_SetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropSource_GetDataObject", (PyCFunction) _wrap_DropSource_GetDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropSource_SetCursor", (PyCFunction) _wrap_DropSource_SetCursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropSource_DoDragDrop", (PyCFunction) _wrap_DropSource_DoDragDrop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropSource_GiveFeedback", (PyCFunction) _wrap_DropSource_GiveFeedback, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropSource_swigregister", DropSource_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DropTarget", (PyCFunction) _wrap_new_DropTarget, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget__setCallbackInfo", (PyCFunction) _wrap_DropTarget__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_DropTarget", (PyCFunction) _wrap_delete_DropTarget, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_GetDataObject", (PyCFunction) _wrap_DropTarget_GetDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_SetDataObject", (PyCFunction) _wrap_DropTarget_SetDataObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_OnEnter", (PyCFunction) _wrap_DropTarget_OnEnter, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_OnDragOver", (PyCFunction) _wrap_DropTarget_OnDragOver, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_OnLeave", (PyCFunction) _wrap_DropTarget_OnLeave, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_OnDrop", (PyCFunction) _wrap_DropTarget_OnDrop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_GetData", (PyCFunction) _wrap_DropTarget_GetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_SetDefaultAction", (PyCFunction) _wrap_DropTarget_SetDefaultAction, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_GetDefaultAction", (PyCFunction) _wrap_DropTarget_GetDefaultAction, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DropTarget_swigregister", DropTarget_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TextDropTarget", (PyCFunction) _wrap_new_TextDropTarget, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget__setCallbackInfo", (PyCFunction) _wrap_TextDropTarget__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget_OnDropText", (PyCFunction) _wrap_TextDropTarget_OnDropText, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget_OnEnter", (PyCFunction) _wrap_TextDropTarget_OnEnter, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget_OnDragOver", (PyCFunction) _wrap_TextDropTarget_OnDragOver, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget_OnLeave", (PyCFunction) _wrap_TextDropTarget_OnLeave, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget_OnDrop", (PyCFunction) _wrap_TextDropTarget_OnDrop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget_OnData", (PyCFunction) _wrap_TextDropTarget_OnData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TextDropTarget_swigregister", TextDropTarget_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileDropTarget", (PyCFunction) _wrap_new_FileDropTarget, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget__setCallbackInfo", (PyCFunction) _wrap_FileDropTarget__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget_OnDropFiles", (PyCFunction) _wrap_FileDropTarget_OnDropFiles, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget_OnEnter", (PyCFunction) _wrap_FileDropTarget_OnEnter, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget_OnDragOver", (PyCFunction) _wrap_FileDropTarget_OnDragOver, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget_OnLeave", (PyCFunction) _wrap_FileDropTarget_OnLeave, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget_OnDrop", (PyCFunction) _wrap_FileDropTarget_OnDrop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget_OnData", (PyCFunction) _wrap_FileDropTarget_OnData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileDropTarget_swigregister", FileDropTarget_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Clipboard", (PyCFunction) _wrap_new_Clipboard, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Clipboard", (PyCFunction) _wrap_delete_Clipboard, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_Open", (PyCFunction) _wrap_Clipboard_Open, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_Close", (PyCFunction) _wrap_Clipboard_Close, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_IsOpened", (PyCFunction) _wrap_Clipboard_IsOpened, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_AddData", (PyCFunction) _wrap_Clipboard_AddData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_SetData", (PyCFunction) _wrap_Clipboard_SetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_IsSupported", (PyCFunction) _wrap_Clipboard_IsSupported, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_GetData", (PyCFunction) _wrap_Clipboard_GetData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_Clear", (PyCFunction) _wrap_Clipboard_Clear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_Flush", (PyCFunction) _wrap_Clipboard_Flush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_UsePrimarySelection", (PyCFunction) _wrap_Clipboard_UsePrimarySelection, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_Get", (PyCFunction) _wrap_Clipboard_Get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Clipboard_swigregister", Clipboard_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClipboardLocker", (PyCFunction) _wrap_new_ClipboardLocker, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_ClipboardLocker", (PyCFunction) _wrap_delete_ClipboardLocker, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ClipboardLocker___nonzero__", (PyCFunction) _wrap_ClipboardLocker___nonzero__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ClipboardLocker_swigregister", ClipboardLocker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VideoMode", (PyCFunction) _wrap_new_VideoMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_VideoMode", (PyCFunction) _wrap_delete_VideoMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_Matches", (PyCFunction) _wrap_VideoMode_Matches, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_GetWidth", (PyCFunction) _wrap_VideoMode_GetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_GetHeight", (PyCFunction) _wrap_VideoMode_GetHeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_GetDepth", (PyCFunction) _wrap_VideoMode_GetDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_IsOk", (PyCFunction) _wrap_VideoMode_IsOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode___eq__", (PyCFunction) _wrap_VideoMode___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode___ne__", (PyCFunction) _wrap_VideoMode___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_w_set", (PyCFunction) _wrap_VideoMode_w_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_w_get", (PyCFunction) _wrap_VideoMode_w_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_h_set", (PyCFunction) _wrap_VideoMode_h_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_h_get", (PyCFunction) _wrap_VideoMode_h_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_bpp_set", (PyCFunction) _wrap_VideoMode_bpp_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_bpp_get", (PyCFunction) _wrap_VideoMode_bpp_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_refresh_set", (PyCFunction) _wrap_VideoMode_refresh_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_refresh_get", (PyCFunction) _wrap_VideoMode_refresh_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VideoMode_swigregister", VideoMode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Display", (PyCFunction) _wrap_new_Display, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Display", (PyCFunction) _wrap_delete_Display, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_GetCount", (PyCFunction) _wrap_Display_GetCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_GetFromPoint", (PyCFunction) _wrap_Display_GetFromPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_GetFromWindow", (PyCFunction) _wrap_Display_GetFromWindow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_IsOk", (PyCFunction) _wrap_Display_IsOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_GetGeometry", (PyCFunction) _wrap_Display_GetGeometry, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_GetName", (PyCFunction) _wrap_Display_GetName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_IsPrimary", (PyCFunction) _wrap_Display_IsPrimary, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_GetModes", (PyCFunction) _wrap_Display_GetModes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_GetCurrentMode", (PyCFunction) _wrap_Display_GetCurrentMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_ChangeMode", (PyCFunction) _wrap_Display_ChangeMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_ResetMode", (PyCFunction) _wrap_Display_ResetMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Display_swigregister", Display_swigregister, METH_VARARGS, NULL},
	 { (char *)"StandardPaths_Get", (PyCFunction) _wrap_StandardPaths_Get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetConfigDir", (PyCFunction) _wrap_StandardPaths_GetConfigDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetUserConfigDir", (PyCFunction) _wrap_StandardPaths_GetUserConfigDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetDataDir", (PyCFunction) _wrap_StandardPaths_GetDataDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetLocalDataDir", (PyCFunction) _wrap_StandardPaths_GetLocalDataDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetUserDataDir", (PyCFunction) _wrap_StandardPaths_GetUserDataDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetUserLocalDataDir", (PyCFunction) _wrap_StandardPaths_GetUserLocalDataDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetPluginsDir", (PyCFunction) _wrap_StandardPaths_GetPluginsDir, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_SetInstallPrefix", (PyCFunction) _wrap_StandardPaths_SetInstallPrefix, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_GetInstallPrefix", (PyCFunction) _wrap_StandardPaths_GetInstallPrefix, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StandardPaths_swigregister", StandardPaths_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_wxContextMenuEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxContextMenuEvent *) x));
}
static void *_p_wxMenuEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMenuEvent *) x));
}
static void *_p_wxCloseEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxCloseEvent *) x));
}
static void *_p_wxMouseEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMouseEvent *) x));
}
static void *_p_wxEraseEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxEraseEvent *) x));
}
static void *_p_wxSetCursorEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxSetCursorEvent *) x));
}
static void *_p_wxTimerEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxTimerEvent *) x));
}
static void *_p_wxInitDialogEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxInitDialogEvent *) x));
}
static void *_p_wxScrollEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxScrollEvent *) x));
}
static void *_p_wxPyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxPyEvent *) x));
}
static void *_p_wxNotifyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxNotifyEvent *) x));
}
static void *_p_wxJoystickEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxJoystickEvent *) x));
}
static void *_p_wxIdleEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxIdleEvent *) x));
}
static void *_p_wxWindowCreateEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxWindowCreateEvent *) x));
}
static void *_p_wxQueryNewPaletteEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxQueryNewPaletteEvent *) x));
}
static void *_p_wxMaximizeEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMaximizeEvent *) x));
}
static void *_p_wxIconizeEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxIconizeEvent *) x));
}
static void *_p_wxActivateEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxActivateEvent *) x));
}
static void *_p_wxSizeEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxSizeEvent *) x));
}
static void *_p_wxMoveEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMoveEvent *) x));
}
static void *_p_wxDateEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxDateEvent *) x));
}
static void *_p_wxPaintEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxPaintEvent *) x));
}
static void *_p_wxNcPaintEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxNcPaintEvent *) x));
}
static void *_p_wxUpdateUIEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxUpdateUIEvent *) x));
}
static void *_p_wxPaletteChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxPaletteChangedEvent *) x));
}
static void *_p_wxDisplayChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxDisplayChangedEvent *) x));
}
static void *_p_wxMouseCaptureChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMouseCaptureChangedEvent *) x));
}
static void *_p_wxSysColourChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxSysColourChangedEvent *) x));
}
static void *_p_wxDropFilesEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxDropFilesEvent *) x));
}
static void *_p_wxFocusEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxFocusEvent *) x));
}
static void *_p_wxChildFocusEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxChildFocusEvent *) x));
}
static void *_p_wxProcessEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxProcessEvent *) x));
}
static void *_p_wxShowEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxShowEvent *) x));
}
static void *_p_wxCommandEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxCommandEvent *) x));
}
static void *_p_wxPyCommandEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxPyCommandEvent *) x));
}
static void *_p_wxWindowDestroyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxWindowDestroyEvent *) x));
}
static void *_p_wxNavigationKeyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxNavigationKeyEvent *) x));
}
static void *_p_wxKeyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxKeyEvent *) x));
}
static void *_p_wxScrollWinEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxScrollWinEvent *) x));
}
static void *_p_wxFileConfigTo_p_wxConfigBase(void *x) {
    return (void *)((wxConfigBase *)  ((wxFileConfig *) x));
}
static void *_p_wxConfigTo_p_wxConfigBase(void *x) {
    return (void *)((wxConfigBase *)  ((wxConfig *) x));
}
static void *_p_wxPyBitmapDataObjectTo_p_wxBitmapDataObject(void *x) {
    return (void *)((wxBitmapDataObject *)  ((wxPyBitmapDataObject *) x));
}
static void *_p_wxPyTextDataObjectTo_p_wxTextDataObject(void *x) {
    return (void *)((wxTextDataObject *)  ((wxPyTextDataObject *) x));
}
static void *_p_wxDataObjectSimpleTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *)  ((wxDataObjectSimple *) x));
}
static void *_p_wxPyDataObjectSimpleTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *) ((wxPyDataObjectSimple *) x));
}
static void *_p_wxDataObjectCompositeTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *)  ((wxDataObjectComposite *) x));
}
static void *_p_wxTextDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *) ((wxTextDataObject *) x));
}
static void *_p_wxPyTextDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *)(wxTextDataObject *) ((wxPyTextDataObject *) x));
}
static void *_p_wxBitmapDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *) ((wxBitmapDataObject *) x));
}
static void *_p_wxPyBitmapDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *)(wxBitmapDataObject *) ((wxPyBitmapDataObject *) x));
}
static void *_p_wxFileDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *) ((wxFileDataObject *) x));
}
static void *_p_wxCustomDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *) ((wxCustomDataObject *) x));
}
static void *_p_wxURLDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *)  ((wxURLDataObject *) x));
}
static void *_p_wxMetafileDataObjectTo_p_wxDataObject(void *x) {
    return (void *)((wxDataObject *) (wxDataObjectSimple *) ((wxMetafileDataObject *) x));
}
static void *_p_wxPyDataObjectSimpleTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *)  ((wxPyDataObjectSimple *) x));
}
static void *_p_wxTextDataObjectTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *)  ((wxTextDataObject *) x));
}
static void *_p_wxPyTextDataObjectTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *) (wxTextDataObject *) ((wxPyTextDataObject *) x));
}
static void *_p_wxBitmapDataObjectTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *)  ((wxBitmapDataObject *) x));
}
static void *_p_wxPyBitmapDataObjectTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *) (wxBitmapDataObject *) ((wxPyBitmapDataObject *) x));
}
static void *_p_wxFileDataObjectTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *)  ((wxFileDataObject *) x));
}
static void *_p_wxCustomDataObjectTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *)  ((wxCustomDataObject *) x));
}
static void *_p_wxMetafileDataObjectTo_p_wxDataObjectSimple(void *x) {
    return (void *)((wxDataObjectSimple *)  ((wxMetafileDataObject *) x));
}
static void *_p_wxControlTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *) ((wxControl *) x));
}
static void *_p_wxWindowTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxWindow *) x));
}
static void *_p_wxControlWithItemsTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *)(wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxPyAppTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxPyApp *) x));
}
static void *_p_wxPyTimerTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxPyTimer *) x));
}
static void *_p_wxValidatorTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxValidator *) x));
}
static void *_p_wxPyValidatorTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxValidator *) ((wxPyValidator *) x));
}
static void *_p_wxMenuBarTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *) ((wxMenuBar *) x));
}
static void *_p_wxMenuTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxMenu *) x));
}
static void *_p_wxPyProcessTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxPyProcess *) x));
}
static void *_p_wxPyTipProviderTo_p_wxTipProvider(void *x) {
    return (void *)((wxTipProvider *)  ((wxPyTipProvider *) x));
}
static void *_p_wxLayoutConstraintsTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxLayoutConstraints *) x));
}
static void *_p_wxGBSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizerItem *) ((wxGBSizerItem *) x));
}
static void *_p_wxSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizerItem *) x));
}
static void *_p_wxScrollEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxScrollEvent *) x));
}
static void *_p_wxIndividualLayoutConstraintTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxIndividualLayoutConstraint *) x));
}
static void *_p_wxStaticBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxBoxSizer *) ((wxStaticBoxSizer *) x));
}
static void *_p_wxBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxBoxSizer *) x));
}
static void *_p_wxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizer *) x));
}
static void *_p_wxGridBagSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *)(wxFlexGridSizer *) ((wxGridBagSizer *) x));
}
static void *_p_wxFileHistoryTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFileHistory *) x));
}
static void *_p_wxUpdateUIEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxUpdateUIEvent *) x));
}
static void *_p_wxEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvent *) x));
}
static void *_p_wxFlexGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *) ((wxFlexGridSizer *) x));
}
static void *_p_wxGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxGridSizer *) x));
}
static void *_p_wxInitDialogEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxInitDialogEvent *) x));
}
static void *_p_wxPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaintEvent *) x));
}
static void *_p_wxNcPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNcPaintEvent *) x));
}
static void *_p_wxPaletteChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaletteChangedEvent *) x));
}
static void *_p_wxDisplayChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDisplayChangedEvent *) x));
}
static void *_p_wxMouseCaptureChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseCaptureChangedEvent *) x));
}
static void *_p_wxSysColourChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSysColourChangedEvent *) x));
}
static void *_p_wxControlTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxControl *) x));
}
static void *_p_wxSetCursorEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSetCursorEvent *) x));
}
static void *_p_wxTimerEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxTimerEvent *) x));
}
static void *_p_wxFSFileTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFSFile *) x));
}
static void *_p_wxClipboardTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxClipboard *) x));
}
static void *_p_wxPySizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxPySizer *) x));
}
static void *_p_wxPyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPyEvent *) x));
}
static void *_p_wxNotifyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxNotifyEvent *) x));
}
static void *_p_wxShowEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxShowEvent *) x));
}
static void *_p_wxToolTipTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxToolTip *) x));
}
static void *_p_wxMenuItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMenuItem *) x));
}
static void *_p_wxDateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxDateEvent *) x));
}
static void *_p_wxIdleEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIdleEvent *) x));
}
static void *_p_wxWindowCreateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowCreateEvent *) x));
}
static void *_p_wxQueryNewPaletteEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxQueryNewPaletteEvent *) x));
}
static void *_p_wxMaximizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMaximizeEvent *) x));
}
static void *_p_wxIconizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIconizeEvent *) x));
}
static void *_p_wxSizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSizeEvent *) x));
}
static void *_p_wxMoveEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMoveEvent *) x));
}
static void *_p_wxActivateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxActivateEvent *) x));
}
static void *_p_wxPNMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNMHandler *) x));
}
static void *_p_wxJPEGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxJPEGHandler *) x));
}
static void *_p_wxPCXHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPCXHandler *) x));
}
static void *_p_wxGIFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxGIFHandler *) x));
}
static void *_p_wxPNGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNGHandler *) x));
}
static void *_p_wxANIHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *)(wxCURHandler *) ((wxANIHandler *) x));
}
static void *_p_wxCURHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *) ((wxCURHandler *) x));
}
static void *_p_wxICOHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *) ((wxICOHandler *) x));
}
static void *_p_wxBMPHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxBMPHandler *) x));
}
static void *_p_wxPyImageHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPyImageHandler *) x));
}
static void *_p_wxImageHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImageHandler *) x));
}
static void *_p_wxXPMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxXPMHandler *) x));
}
static void *_p_wxTIFFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxTIFFHandler *) x));
}
static void *_p_wxEvtHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvtHandler *) x));
}
static void *_p_wxStdDialogButtonSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxBoxSizer *) ((wxStdDialogButtonSizer *) x));
}
static void *_p_wxAcceleratorTableTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxAcceleratorTable *) x));
}
static void *_p_wxImageTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImage *) x));
}
static void *_p_wxScrollWinEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxScrollWinEvent *) x));
}
static void *_p_wxSystemOptionsTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSystemOptions *) x));
}
static void *_p_wxJoystickEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxJoystickEvent *) x));
}
static void *_p_wxWindowDestroyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowDestroyEvent *) x));
}
static void *_p_wxNavigationKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNavigationKeyEvent *) x));
}
static void *_p_wxKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxKeyEvent *) x));
}
static void *_p_wxWindowTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxWindow *) x));
}
static void *_p_wxMenuTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxMenu *) x));
}
static void *_p_wxMenuBarTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxMenuBar *) x));
}
static void *_p_wxPyProcessTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxPyProcess *) x));
}
static void *_p_wxFileSystemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFileSystem *) x));
}
static void *_p_wxContextMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxContextMenuEvent *) x));
}
static void *_p_wxMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMenuEvent *) x));
}
static void *_p_wxPyAppTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxPyApp *) x));
}
static void *_p_wxCloseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCloseEvent *) x));
}
static void *_p_wxMouseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseEvent *) x));
}
static void *_p_wxEraseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxEraseEvent *) x));
}
static void *_p_wxBusyInfoTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxBusyInfo *) x));
}
static void *_p_wxPyCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxPyCommandEvent *) x));
}
static void *_p_wxCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCommandEvent *) x));
}
static void *_p_wxDropFilesEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDropFilesEvent *) x));
}
static void *_p_wxFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxFocusEvent *) x));
}
static void *_p_wxChildFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxChildFocusEvent *) x));
}
static void *_p_wxProcessEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxProcessEvent *) x));
}
static void *_p_wxControlWithItemsTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *)(wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxPyValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxValidator *) ((wxPyValidator *) x));
}
static void *_p_wxValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxValidator *) x));
}
static void *_p_wxPyTimerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxPyTimer *) x));
}
static void *_p_wxLogBufferTo_p_wxLog(void *x) {
    return (void *)((wxLog *)  ((wxLogBuffer *) x));
}
static void *_p_wxLogStderrTo_p_wxLog(void *x) {
    return (void *)((wxLog *)  ((wxLogStderr *) x));
}
static void *_p_wxLogTextCtrlTo_p_wxLog(void *x) {
    return (void *)((wxLog *)  ((wxLogTextCtrl *) x));
}
static void *_p_wxLogWindowTo_p_wxLog(void *x) {
    return (void *)((wxLog *)  ((wxLogWindow *) x));
}
static void *_p_wxLogChainTo_p_wxLog(void *x) {
    return (void *)((wxLog *)  ((wxLogChain *) x));
}
static void *_p_wxLogGuiTo_p_wxLog(void *x) {
    return (void *)((wxLog *)  ((wxLogGui *) x));
}
static void *_p_wxPyLogTo_p_wxLog(void *x) {
    return (void *)((wxLog *)  ((wxPyLog *) x));
}
static void *_p_wxControlTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxControl *) x));
}
static void *_p_wxControlWithItemsTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *) (wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxMenuBarTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxMenuBar *) x));
}
static void *_p_wxPyTextDropTargetTo_p_wxPyDropTarget(void *x) {
    return (void *)((wxPyDropTarget *)  ((wxPyTextDropTarget *) x));
}
static void *_p_wxPyFileDropTargetTo_p_wxPyDropTarget(void *x) {
    return (void *)((wxPyDropTarget *)  ((wxPyFileDropTarget *) x));
}
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_form_ops_t = {"_p_form_ops_t", "enum form_ops_t *|form_ops_t *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|byte *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|time_t *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|wxLogLevel *", 0, 0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, 0};
static swig_type_info _swigt__p_wxArrayString = {"_p_wxArrayString", "wxArrayString *", 0, 0, 0};
static swig_type_info _swigt__p_wxBitmap = {"_p_wxBitmap", "wxBitmap *", 0, 0, 0};
static swig_type_info _swigt__p_wxBitmapDataObject = {"_p_wxBitmapDataObject", "wxBitmapDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxBusyCursor = {"_p_wxBusyCursor", "wxBusyCursor *", 0, 0, 0};
static swig_type_info _swigt__p_wxBusyInfo = {"_p_wxBusyInfo", "wxBusyInfo *", 0, 0, 0};
static swig_type_info _swigt__p_wxCaret = {"_p_wxCaret", "wxCaret *", 0, 0, 0};
static swig_type_info _swigt__p_wxChar = {"_p_wxChar", "wxChar *", 0, 0, 0};
static swig_type_info _swigt__p_wxClipboard = {"_p_wxClipboard", "wxClipboard *", 0, 0, 0};
static swig_type_info _swigt__p_wxClipboardLocker = {"_p_wxClipboardLocker", "wxClipboardLocker *", 0, 0, 0};
static swig_type_info _swigt__p_wxColour = {"_p_wxColour", "wxColour *", 0, 0, 0};
static swig_type_info _swigt__p_wxConfig = {"_p_wxConfig", "wxConfig *", 0, 0, 0};
static swig_type_info _swigt__p_wxConfigBase = {"_p_wxConfigBase", "wxConfigBase *", 0, 0, 0};
static swig_type_info _swigt__p_wxConfigPathChanger = {"_p_wxConfigPathChanger", "wxConfigPathChanger *", 0, 0, 0};
static swig_type_info _swigt__p_wxCursor = {"_p_wxCursor", "wxCursor *", 0, 0, 0};
static swig_type_info _swigt__p_wxCustomDataObject = {"_p_wxCustomDataObject", "wxCustomDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxDC = {"_p_wxDC", "wxDC *", 0, 0, 0};
static swig_type_info _swigt__p_wxDataFormat = {"_p_wxDataFormat", "wxDataFormat *", 0, 0, 0};
static swig_type_info _swigt__p_wxDataObject = {"_p_wxDataObject", "wxDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxDataObjectComposite = {"_p_wxDataObjectComposite", "wxDataObjectComposite *", 0, 0, 0};
static swig_type_info _swigt__p_wxDataObjectSimple = {"_p_wxDataObjectSimple", "wxDataObjectSimple *", 0, 0, 0};
static swig_type_info _swigt__p_wxDateSpan = {"_p_wxDateSpan", "wxDateSpan *", 0, 0, 0};
static swig_type_info _swigt__p_wxDateTime = {"_p_wxDateTime", "wxDateTime *", 0, 0, 0};
static swig_type_info _swigt__p_wxDateTime__TimeZone = {"_p_wxDateTime__TimeZone", "wxDateTime::TimeZone *", 0, 0, 0};
static swig_type_info _swigt__p_wxDisplay = {"_p_wxDisplay", "wxDisplay *", 0, 0, 0};
static swig_type_info _swigt__p_wxDuplexMode = {"_p_wxDuplexMode", "enum wxDuplexMode *|wxDuplexMode *", 0, 0, 0};
static swig_type_info _swigt__p_wxEvent = {"_p_wxEvent", "wxEvent *", 0, 0, 0};
static swig_type_info _swigt__p_wxContextMenuEvent = {"_p_wxContextMenuEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMenuEvent = {"_p_wxMenuEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxCloseEvent = {"_p_wxCloseEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMouseEvent = {"_p_wxMouseEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxEraseEvent = {"_p_wxEraseEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSetCursorEvent = {"_p_wxSetCursorEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxInitDialogEvent = {"_p_wxInitDialogEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxScrollEvent = {"_p_wxScrollEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyEvent = {"_p_wxPyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxNotifyEvent = {"_p_wxNotifyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxIdleEvent = {"_p_wxIdleEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxWindowCreateEvent = {"_p_wxWindowCreateEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxQueryNewPaletteEvent = {"_p_wxQueryNewPaletteEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMaximizeEvent = {"_p_wxMaximizeEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxIconizeEvent = {"_p_wxIconizeEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxActivateEvent = {"_p_wxActivateEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSizeEvent = {"_p_wxSizeEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMoveEvent = {"_p_wxMoveEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxDateEvent = {"_p_wxDateEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPaintEvent = {"_p_wxPaintEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxNcPaintEvent = {"_p_wxNcPaintEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxUpdateUIEvent = {"_p_wxUpdateUIEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPaletteChangedEvent = {"_p_wxPaletteChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxDisplayChangedEvent = {"_p_wxDisplayChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMouseCaptureChangedEvent = {"_p_wxMouseCaptureChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSysColourChangedEvent = {"_p_wxSysColourChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxDropFilesEvent = {"_p_wxDropFilesEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFocusEvent = {"_p_wxFocusEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxChildFocusEvent = {"_p_wxChildFocusEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxShowEvent = {"_p_wxShowEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxCommandEvent = {"_p_wxCommandEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyCommandEvent = {"_p_wxPyCommandEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxWindowDestroyEvent = {"_p_wxWindowDestroyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxNavigationKeyEvent = {"_p_wxNavigationKeyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxKeyEvent = {"_p_wxKeyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxScrollWinEvent = {"_p_wxScrollWinEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxEvtHandler = {"_p_wxEvtHandler", "wxEvtHandler *", 0, 0, 0};
static swig_type_info _swigt__p_wxControl = {"_p_wxControl", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxControlWithItems = {"_p_wxControlWithItems", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyApp = {"_p_wxPyApp", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMenuBar = {"_p_wxMenuBar", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxValidator = {"_p_wxValidator", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyValidator = {"_p_wxPyValidator", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFileConfig = {"_p_wxFileConfig", "wxFileConfig *", 0, 0, 0};
static swig_type_info _swigt__p_wxFileDataObject = {"_p_wxFileDataObject", "wxFileDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxFileHistory = {"_p_wxFileHistory", "wxFileHistory *", 0, 0, 0};
static swig_type_info _swigt__p_wxFileType = {"_p_wxFileType", "wxFileType *", 0, 0, 0};
static swig_type_info _swigt__p_wxFileTypeInfo = {"_p_wxFileTypeInfo", "wxFileTypeInfo *", 0, 0, 0};
static swig_type_info _swigt__p_wxFont = {"_p_wxFont", "wxFont *", 0, 0, 0};
static swig_type_info _swigt__p_wxFrame = {"_p_wxFrame", "wxFrame *", 0, 0, 0};
static swig_type_info _swigt__p_wxIcon = {"_p_wxIcon", "wxIcon *", 0, 0, 0};
static swig_type_info _swigt__p_wxJoystick = {"_p_wxJoystick", "wxJoystick *", 0, 0, 0};
static swig_type_info _swigt__p_wxJoystickEvent = {"_p_wxJoystickEvent", "wxJoystickEvent *", 0, 0, 0};
static swig_type_info _swigt__p_wxKillError = {"_p_wxKillError", "enum wxKillError *|wxKillError *", 0, 0, 0};
static swig_type_info _swigt__p_wxLog = {"_p_wxLog", "wxLog *", 0, 0, 0};
static swig_type_info _swigt__p_wxLogBuffer = {"_p_wxLogBuffer", "wxLogBuffer *", 0, 0, 0};
static swig_type_info _swigt__p_wxLogChain = {"_p_wxLogChain", "wxLogChain *", 0, 0, 0};
static swig_type_info _swigt__p_wxLogGui = {"_p_wxLogGui", "wxLogGui *", 0, 0, 0};
static swig_type_info _swigt__p_wxLogNull = {"_p_wxLogNull", "wxLogNull *", 0, 0, 0};
static swig_type_info _swigt__p_wxLogStderr = {"_p_wxLogStderr", "wxLogStderr *", 0, 0, 0};
static swig_type_info _swigt__p_wxLogTextCtrl = {"_p_wxLogTextCtrl", "wxLogTextCtrl *", 0, 0, 0};
static swig_type_info _swigt__p_wxLogWindow = {"_p_wxLogWindow", "wxLogWindow *", 0, 0, 0};
static swig_type_info _swigt__p_wxMemorySize = {"_p_wxMemorySize", "wxMemorySize *", 0, 0, 0};
static swig_type_info _swigt__p_wxMenu = {"_p_wxMenu", "wxMenu *", 0, 0, 0};
static swig_type_info _swigt__p_wxMetafileDataObject = {"_p_wxMetafileDataObject", "wxMetafileDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxMimeTypesManager = {"_p_wxMimeTypesManager", "wxMimeTypesManager *", 0, 0, 0};
static swig_type_info _swigt__p_wxMouseState = {"_p_wxMouseState", "wxMouseState *", 0, 0, 0};
static swig_type_info _swigt__p_wxMutexGuiLocker = {"_p_wxMutexGuiLocker", "wxMutexGuiLocker *", 0, 0, 0};
static swig_type_info _swigt__p_wxObject = {"_p_wxObject", "wxObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxLayoutConstraints = {"_p_wxLayoutConstraints", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGBSizerItem = {"_p_wxGBSizerItem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSizerItem = {"_p_wxSizerItem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxIndividualLayoutConstraint = {"_p_wxIndividualLayoutConstraint", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxStaticBoxSizer = {"_p_wxStaticBoxSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxBoxSizer = {"_p_wxBoxSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSizer = {"_p_wxSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGridBagSizer = {"_p_wxGridBagSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGridSizer = {"_p_wxGridSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFlexGridSizer = {"_p_wxFlexGridSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFSFile = {"_p_wxFSFile", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPySizer = {"_p_wxPySizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMenuItem = {"_p_wxMenuItem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxICOHandler = {"_p_wxICOHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxBMPHandler = {"_p_wxBMPHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyImageHandler = {"_p_wxPyImageHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxImageHandler = {"_p_wxImageHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxXPMHandler = {"_p_wxXPMHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxTIFFHandler = {"_p_wxTIFFHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxCURHandler = {"_p_wxCURHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxANIHandler = {"_p_wxANIHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPNGHandler = {"_p_wxPNGHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGIFHandler = {"_p_wxGIFHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPCXHandler = {"_p_wxPCXHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxJPEGHandler = {"_p_wxJPEGHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPNMHandler = {"_p_wxPNMHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxStdDialogButtonSizer = {"_p_wxStdDialogButtonSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxAcceleratorTable = {"_p_wxAcceleratorTable", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxImage = {"_p_wxImage", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFileSystem = {"_p_wxFileSystem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxOutputStream = {"_p_wxOutputStream", "wxOutputStream *", 0, 0, 0};
static swig_type_info _swigt__p_wxPaperSize = {"_p_wxPaperSize", "enum wxPaperSize *|wxPaperSize *", 0, 0, 0};
static swig_type_info _swigt__p_wxPoint = {"_p_wxPoint", "wxPoint *", 0, 0, 0};
static swig_type_info _swigt__p_wxProcessEvent = {"_p_wxProcessEvent", "wxProcessEvent *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyArtProvider = {"_p_wxPyArtProvider", "wxPyArtProvider *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyBitmapDataObject = {"_p_wxPyBitmapDataObject", "wxPyBitmapDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyDataObjectSimple = {"_p_wxPyDataObjectSimple", "wxPyDataObjectSimple *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyDropSource = {"_p_wxPyDropSource", "wxPyDropSource *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyDropTarget = {"_p_wxPyDropTarget", "wxPyDropTarget *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyFileDropTarget = {"_p_wxPyFileDropTarget", "wxPyFileDropTarget *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyLog = {"_p_wxPyLog", "wxPyLog *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyProcess = {"_p_wxPyProcess", "wxPyProcess *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyTextDataObject = {"_p_wxPyTextDataObject", "wxPyTextDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyTextDropTarget = {"_p_wxPyTextDropTarget", "wxPyTextDropTarget *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyTimer = {"_p_wxPyTimer", "wxPyTimer *", 0, 0, 0};
static swig_type_info _swigt__p_wxPyTipProvider = {"_p_wxPyTipProvider", "wxPyTipProvider *", 0, 0, 0};
static swig_type_info _swigt__p_wxRect = {"_p_wxRect", "wxRect *", 0, 0, 0};
static swig_type_info _swigt__p_wxSingleInstanceChecker = {"_p_wxSingleInstanceChecker", "wxSingleInstanceChecker *", 0, 0, 0};
static swig_type_info _swigt__p_wxSize = {"_p_wxSize", "wxSize *", 0, 0, 0};
static swig_type_info _swigt__p_wxSound = {"_p_wxSound", "wxSound *", 0, 0, 0};
static swig_type_info _swigt__p_wxStandardPaths = {"_p_wxStandardPaths", "wxStandardPaths *", 0, 0, 0};
static swig_type_info _swigt__p_wxStopWatch = {"_p_wxStopWatch", "wxStopWatch *", 0, 0, 0};
static swig_type_info _swigt__p_wxString = {"_p_wxString", "wxString *", 0, 0, 0};
static swig_type_info _swigt__p_wxSystemOptions = {"_p_wxSystemOptions", "wxSystemOptions *", 0, 0, 0};
static swig_type_info _swigt__p_wxSystemSettings = {"_p_wxSystemSettings", "wxSystemSettings *", 0, 0, 0};
static swig_type_info _swigt__p_wxTextCtrl = {"_p_wxTextCtrl", "wxTextCtrl *", 0, 0, 0};
static swig_type_info _swigt__p_wxTextDataObject = {"_p_wxTextDataObject", "wxTextDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxTimeSpan = {"_p_wxTimeSpan", "wxTimeSpan *", 0, 0, 0};
static swig_type_info _swigt__p_wxTimer = {"_p_wxTimer", "wxTimer *", 0, 0, 0};
static swig_type_info _swigt__p_wxTimerEvent = {"_p_wxTimerEvent", "wxTimerEvent *", 0, 0, 0};
static swig_type_info _swigt__p_wxTimerRunner = {"_p_wxTimerRunner", "wxTimerRunner *", 0, 0, 0};
static swig_type_info _swigt__p_wxTipProvider = {"_p_wxTipProvider", "wxTipProvider *", 0, 0, 0};
static swig_type_info _swigt__p_wxToolTip = {"_p_wxToolTip", "wxToolTip *", 0, 0, 0};
static swig_type_info _swigt__p_wxURLDataObject = {"_p_wxURLDataObject", "wxURLDataObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxVideoMode = {"_p_wxVideoMode", "wxVideoMode *", 0, 0, 0};
static swig_type_info _swigt__p_wxWindow = {"_p_wxWindow", "wxWindow *", 0, 0, 0};
static swig_type_info _swigt__p_wxWindowDisabler = {"_p_wxWindowDisabler", "wxWindowDisabler *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__unsigned_int = {"_unsigned_int", "unsigned int|std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_form_ops_t,
  &_swigt__p_int,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_void,
  &_swigt__p_wxANIHandler,
  &_swigt__p_wxAcceleratorTable,
  &_swigt__p_wxActivateEvent,
  &_swigt__p_wxArrayString,
  &_swigt__p_wxBMPHandler,
  &_swigt__p_wxBitmap,
  &_swigt__p_wxBitmapDataObject,
  &_swigt__p_wxBoxSizer,
  &_swigt__p_wxBusyCursor,
  &_swigt__p_wxBusyInfo,
  &_swigt__p_wxCURHandler,
  &_swigt__p_wxCaret,
  &_swigt__p_wxChar,
  &_swigt__p_wxChildFocusEvent,
  &_swigt__p_wxClipboard,
  &_swigt__p_wxClipboardLocker,
  &_swigt__p_wxCloseEvent,
  &_swigt__p_wxColour,
  &_swigt__p_wxCommandEvent,
  &_swigt__p_wxConfig,
  &_swigt__p_wxConfigBase,
  &_swigt__p_wxConfigPathChanger,
  &_swigt__p_wxContextMenuEvent,
  &_swigt__p_wxControl,
  &_swigt__p_wxControlWithItems,
  &_swigt__p_wxCursor,
  &_swigt__p_wxCustomDataObject,
  &_swigt__p_wxDC,
  &_swigt__p_wxDataFormat,
  &_swigt__p_wxDataObject,
  &_swigt__p_wxDataObjectComposite,
  &_swigt__p_wxDataObjectSimple,
  &_swigt__p_wxDateEvent,
  &_swigt__p_wxDateSpan,
  &_swigt__p_wxDateTime,
  &_swigt__p_wxDateTime__TimeZone,
  &_swigt__p_wxDisplay,
  &_swigt__p_wxDisplayChangedEvent,
  &_swigt__p_wxDropFilesEvent,
  &_swigt__p_wxDuplexMode,
  &_swigt__p_wxEraseEvent,
  &_swigt__p_wxEvent,
  &_swigt__p_wxEvtHandler,
  &_swigt__p_wxFSFile,
  &_swigt__p_wxFileConfig,
  &_swigt__p_wxFileDataObject,
  &_swigt__p_wxFileHistory,
  &_swigt__p_wxFileSystem,
  &_swigt__p_wxFileType,
  &_swigt__p_wxFileTypeInfo,
  &_swigt__p_wxFlexGridSizer,
  &_swigt__p_wxFocusEvent,
  &_swigt__p_wxFont,
  &_swigt__p_wxFrame,
  &_swigt__p_wxGBSizerItem,
  &_swigt__p_wxGIFHandler,
  &_swigt__p_wxGridBagSizer,
  &_swigt__p_wxGridSizer,
  &_swigt__p_wxICOHandler,
  &_swigt__p_wxIcon,
  &_swigt__p_wxIconizeEvent,
  &_swigt__p_wxIdleEvent,
  &_swigt__p_wxImage,
  &_swigt__p_wxImageHandler,
  &_swigt__p_wxIndividualLayoutConstraint,
  &_swigt__p_wxInitDialogEvent,
  &_swigt__p_wxJPEGHandler,
  &_swigt__p_wxJoystick,
  &_swigt__p_wxJoystickEvent,
  &_swigt__p_wxKeyEvent,
  &_swigt__p_wxKillError,
  &_swigt__p_wxLayoutConstraints,
  &_swigt__p_wxLog,
  &_swigt__p_wxLogBuffer,
  &_swigt__p_wxLogChain,
  &_swigt__p_wxLogGui,
  &_swigt__p_wxLogNull,
  &_swigt__p_wxLogStderr,
  &_swigt__p_wxLogTextCtrl,
  &_swigt__p_wxLogWindow,
  &_swigt__p_wxMaximizeEvent,
  &_swigt__p_wxMemorySize,
  &_swigt__p_wxMenu,
  &_swigt__p_wxMenuBar,
  &_swigt__p_wxMenuEvent,
  &_swigt__p_wxMenuItem,
  &_swigt__p_wxMetafileDataObject,
  &_swigt__p_wxMimeTypesManager,
  &_swigt__p_wxMouseCaptureChangedEvent,
  &_swigt__p_wxMouseEvent,
  &_swigt__p_wxMouseState,
  &_swigt__p_wxMoveEvent,
  &_swigt__p_wxMutexGuiLocker,
  &_swigt__p_wxNavigationKeyEvent,
  &_swigt__p_wxNcPaintEvent,
  &_swigt__p_wxNotifyEvent,
  &_swigt__p_wxObject,
  &_swigt__p_wxOutputStream,
  &_swigt__p_wxPCXHandler,
  &_swigt__p_wxPNGHandler,
  &_swigt__p_wxPNMHandler,
  &_swigt__p_wxPaintEvent,
  &_swigt__p_wxPaletteChangedEvent,
  &_swigt__p_wxPaperSize,
  &_swigt__p_wxPoint,
  &_swigt__p_wxProcessEvent,
  &_swigt__p_wxPyApp,
  &_swigt__p_wxPyArtProvider,
  &_swigt__p_wxPyBitmapDataObject,
  &_swigt__p_wxPyCommandEvent,
  &_swigt__p_wxPyDataObjectSimple,
  &_swigt__p_wxPyDropSource,
  &_swigt__p_wxPyDropTarget,
  &_swigt__p_wxPyEvent,
  &_swigt__p_wxPyFileDropTarget,
  &_swigt__p_wxPyImageHandler,
  &_swigt__p_wxPyLog,
  &_swigt__p_wxPyProcess,
  &_swigt__p_wxPySizer,
  &_swigt__p_wxPyTextDataObject,
  &_swigt__p_wxPyTextDropTarget,
  &_swigt__p_wxPyTimer,
  &_swigt__p_wxPyTipProvider,
  &_swigt__p_wxPyValidator,
  &_swigt__p_wxQueryNewPaletteEvent,
  &_swigt__p_wxRect,
  &_swigt__p_wxScrollEvent,
  &_swigt__p_wxScrollWinEvent,
  &_swigt__p_wxSetCursorEvent,
  &_swigt__p_wxShowEvent,
  &_swigt__p_wxSingleInstanceChecker,
  &_swigt__p_wxSize,
  &_swigt__p_wxSizeEvent,
  &_swigt__p_wxSizer,
  &_swigt__p_wxSizerItem,
  &_swigt__p_wxSound,
  &_swigt__p_wxStandardPaths,
  &_swigt__p_wxStaticBoxSizer,
  &_swigt__p_wxStdDialogButtonSizer,
  &_swigt__p_wxStopWatch,
  &_swigt__p_wxString,
  &_swigt__p_wxSysColourChangedEvent,
  &_swigt__p_wxSystemOptions,
  &_swigt__p_wxSystemSettings,
  &_swigt__p_wxTIFFHandler,
  &_swigt__p_wxTextCtrl,
  &_swigt__p_wxTextDataObject,
  &_swigt__p_wxTimeSpan,
  &_swigt__p_wxTimer,
  &_swigt__p_wxTimerEvent,
  &_swigt__p_wxTimerRunner,
  &_swigt__p_wxTipProvider,
  &_swigt__p_wxToolTip,
  &_swigt__p_wxURLDataObject,
  &_swigt__p_wxUpdateUIEvent,
  &_swigt__p_wxValidator,
  &_swigt__p_wxVideoMode,
  &_swigt__p_wxWindow,
  &_swigt__p_wxWindowCreateEvent,
  &_swigt__p_wxWindowDestroyEvent,
  &_swigt__p_wxWindowDisabler,
  &_swigt__p_wxXPMHandler,
  &_swigt__ptrdiff_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__unsigned_int,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_form_ops_t[] = {  {&_swigt__p_form_ops_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxArrayString[] = {  {&_swigt__p_wxArrayString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBitmap[] = {  {&_swigt__p_wxBitmap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBitmapDataObject[] = {  {&_swigt__p_wxBitmapDataObject, 0, 0, 0},  {&_swigt__p_wxPyBitmapDataObject, _p_wxPyBitmapDataObjectTo_p_wxBitmapDataObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBusyCursor[] = {  {&_swigt__p_wxBusyCursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBusyInfo[] = {  {&_swigt__p_wxBusyInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCaret[] = {  {&_swigt__p_wxCaret, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxChar[] = {  {&_swigt__p_wxChar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxClipboard[] = {  {&_swigt__p_wxClipboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxClipboardLocker[] = {  {&_swigt__p_wxClipboardLocker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxColour[] = {  {&_swigt__p_wxColour, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxConfig[] = {  {&_swigt__p_wxConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxConfigBase[] = {  {&_swigt__p_wxFileConfig, _p_wxFileConfigTo_p_wxConfigBase, 0, 0},  {&_swigt__p_wxConfigBase, 0, 0, 0},  {&_swigt__p_wxConfig, _p_wxConfigTo_p_wxConfigBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxConfigPathChanger[] = {  {&_swigt__p_wxConfigPathChanger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCursor[] = {  {&_swigt__p_wxCursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCustomDataObject[] = {  {&_swigt__p_wxCustomDataObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDC[] = {  {&_swigt__p_wxDC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDataFormat[] = {  {&_swigt__p_wxDataFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDataObject[] = {  {&_swigt__p_wxDataObjectSimple, _p_wxDataObjectSimpleTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxPyDataObjectSimple, _p_wxPyDataObjectSimpleTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxDataObjectComposite, _p_wxDataObjectCompositeTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxDataObject, 0, 0, 0},  {&_swigt__p_wxTextDataObject, _p_wxTextDataObjectTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxPyTextDataObject, _p_wxPyTextDataObjectTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxBitmapDataObject, _p_wxBitmapDataObjectTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxPyBitmapDataObject, _p_wxPyBitmapDataObjectTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxFileDataObject, _p_wxFileDataObjectTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxCustomDataObject, _p_wxCustomDataObjectTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxMetafileDataObject, _p_wxMetafileDataObjectTo_p_wxDataObject, 0, 0},  {&_swigt__p_wxURLDataObject, _p_wxURLDataObjectTo_p_wxDataObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDataObjectComposite[] = {  {&_swigt__p_wxDataObjectComposite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDataObjectSimple[] = {  {&_swigt__p_wxDataObjectSimple, 0, 0, 0},  {&_swigt__p_wxPyDataObjectSimple, _p_wxPyDataObjectSimpleTo_p_wxDataObjectSimple, 0, 0},  {&_swigt__p_wxTextDataObject, _p_wxTextDataObjectTo_p_wxDataObjectSimple, 0, 0},  {&_swigt__p_wxPyTextDataObject, _p_wxPyTextDataObjectTo_p_wxDataObjectSimple, 0, 0},  {&_swigt__p_wxBitmapDataObject, _p_wxBitmapDataObjectTo_p_wxDataObjectSimple, 0, 0},  {&_swigt__p_wxPyBitmapDataObject, _p_wxPyBitmapDataObjectTo_p_wxDataObjectSimple, 0, 0},  {&_swigt__p_wxFileDataObject, _p_wxFileDataObjectTo_p_wxDataObjectSimple, 0, 0},  {&_swigt__p_wxCustomDataObject, _p_wxCustomDataObjectTo_p_wxDataObjectSimple, 0, 0},  {&_swigt__p_wxMetafileDataObject, _p_wxMetafileDataObjectTo_p_wxDataObjectSimple, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDateSpan[] = {  {&_swigt__p_wxDateSpan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDateTime[] = {  {&_swigt__p_wxDateTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDateTime__TimeZone[] = {  {&_swigt__p_wxDateTime__TimeZone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDisplay[] = {  {&_swigt__p_wxDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDuplexMode[] = {  {&_swigt__p_wxDuplexMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxContextMenuEvent[] = {{&_swigt__p_wxContextMenuEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenuEvent[] = {{&_swigt__p_wxMenuEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCloseEvent[] = {{&_swigt__p_wxCloseEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMouseEvent[] = {{&_swigt__p_wxMouseEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEraseEvent[] = {{&_swigt__p_wxEraseEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSetCursorEvent[] = {{&_swigt__p_wxSetCursorEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxInitDialogEvent[] = {{&_swigt__p_wxInitDialogEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxScrollEvent[] = {{&_swigt__p_wxScrollEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyEvent[] = {{&_swigt__p_wxPyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxNotifyEvent[] = {{&_swigt__p_wxNotifyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIdleEvent[] = {{&_swigt__p_wxIdleEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowCreateEvent[] = {{&_swigt__p_wxWindowCreateEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxQueryNewPaletteEvent[] = {{&_swigt__p_wxQueryNewPaletteEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMaximizeEvent[] = {{&_swigt__p_wxMaximizeEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIconizeEvent[] = {{&_swigt__p_wxIconizeEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxActivateEvent[] = {{&_swigt__p_wxActivateEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizeEvent[] = {{&_swigt__p_wxSizeEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMoveEvent[] = {{&_swigt__p_wxMoveEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDateEvent[] = {{&_swigt__p_wxDateEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaintEvent[] = {{&_swigt__p_wxPaintEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxNcPaintEvent[] = {{&_swigt__p_wxNcPaintEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxUpdateUIEvent[] = {{&_swigt__p_wxUpdateUIEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaletteChangedEvent[] = {{&_swigt__p_wxPaletteChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDisplayChangedEvent[] = {{&_swigt__p_wxDisplayChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMouseCaptureChangedEvent[] = {{&_swigt__p_wxMouseCaptureChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSysColourChangedEvent[] = {{&_swigt__p_wxSysColourChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDropFilesEvent[] = {{&_swigt__p_wxDropFilesEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFocusEvent[] = {{&_swigt__p_wxFocusEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxChildFocusEvent[] = {{&_swigt__p_wxChildFocusEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxShowEvent[] = {{&_swigt__p_wxShowEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCommandEvent[] = {{&_swigt__p_wxCommandEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyCommandEvent[] = {{&_swigt__p_wxPyCommandEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowDestroyEvent[] = {{&_swigt__p_wxWindowDestroyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxNavigationKeyEvent[] = {{&_swigt__p_wxNavigationKeyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxKeyEvent[] = {{&_swigt__p_wxKeyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxScrollWinEvent[] = {{&_swigt__p_wxScrollWinEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEvent[] = {  {&_swigt__p_wxContextMenuEvent, _p_wxContextMenuEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMenuEvent, _p_wxMenuEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxCloseEvent, _p_wxCloseEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMouseEvent, _p_wxMouseEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxEraseEvent, _p_wxEraseEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxSetCursorEvent, _p_wxSetCursorEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxTimerEvent, _p_wxTimerEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxInitDialogEvent, _p_wxInitDialogEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxScrollEvent, _p_wxScrollEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPyEvent, _p_wxPyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxNotifyEvent, _p_wxNotifyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxJoystickEvent, _p_wxJoystickEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxEvent, 0, 0, 0},  {&_swigt__p_wxIdleEvent, _p_wxIdleEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxWindowCreateEvent, _p_wxWindowCreateEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxQueryNewPaletteEvent, _p_wxQueryNewPaletteEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMaximizeEvent, _p_wxMaximizeEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxIconizeEvent, _p_wxIconizeEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxActivateEvent, _p_wxActivateEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxSizeEvent, _p_wxSizeEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMoveEvent, _p_wxMoveEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxDateEvent, _p_wxDateEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPaintEvent, _p_wxPaintEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxNcPaintEvent, _p_wxNcPaintEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxUpdateUIEvent, _p_wxUpdateUIEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPaletteChangedEvent, _p_wxPaletteChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxDisplayChangedEvent, _p_wxDisplayChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMouseCaptureChangedEvent, _p_wxMouseCaptureChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxSysColourChangedEvent, _p_wxSysColourChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxDropFilesEvent, _p_wxDropFilesEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxFocusEvent, _p_wxFocusEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxChildFocusEvent, _p_wxChildFocusEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxProcessEvent, _p_wxProcessEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxShowEvent, _p_wxShowEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxCommandEvent, _p_wxCommandEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPyCommandEvent, _p_wxPyCommandEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxWindowDestroyEvent, _p_wxWindowDestroyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxNavigationKeyEvent, _p_wxNavigationKeyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxKeyEvent, _p_wxKeyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxScrollWinEvent, _p_wxScrollWinEventTo_p_wxEvent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxControl[] = {{&_swigt__p_wxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxControlWithItems[] = {{&_swigt__p_wxControlWithItems, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyApp[] = {{&_swigt__p_wxPyApp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenuBar[] = {{&_swigt__p_wxMenuBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxValidator[] = {{&_swigt__p_wxValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyValidator[] = {{&_swigt__p_wxPyValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEvtHandler[] = {  {&_swigt__p_wxControl, _p_wxControlTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxWindow, _p_wxWindowTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxControlWithItems, _p_wxControlWithItemsTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxEvtHandler, 0, 0, 0},  {&_swigt__p_wxPyApp, _p_wxPyAppTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxPyTimer, _p_wxPyTimerTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxMenuBar, _p_wxMenuBarTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxValidator, _p_wxValidatorTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxPyValidator, _p_wxPyValidatorTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxMenu, _p_wxMenuTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxPyProcess, _p_wxPyProcessTo_p_wxEvtHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFileConfig[] = {  {&_swigt__p_wxFileConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFileDataObject[] = {  {&_swigt__p_wxFileDataObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFileHistory[] = {  {&_swigt__p_wxFileHistory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFileType[] = {  {&_swigt__p_wxFileType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFileTypeInfo[] = {  {&_swigt__p_wxFileTypeInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFont[] = {  {&_swigt__p_wxFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFrame[] = {  {&_swigt__p_wxFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIcon[] = {  {&_swigt__p_wxIcon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxJoystick[] = {  {&_swigt__p_wxJoystick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxJoystickEvent[] = {  {&_swigt__p_wxJoystickEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxKillError[] = {  {&_swigt__p_wxKillError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLog[] = {  {&_swigt__p_wxLogBuffer, _p_wxLogBufferTo_p_wxLog, 0, 0},  {&_swigt__p_wxLogStderr, _p_wxLogStderrTo_p_wxLog, 0, 0},  {&_swigt__p_wxLogTextCtrl, _p_wxLogTextCtrlTo_p_wxLog, 0, 0},  {&_swigt__p_wxLogWindow, _p_wxLogWindowTo_p_wxLog, 0, 0},  {&_swigt__p_wxLogChain, _p_wxLogChainTo_p_wxLog, 0, 0},  {&_swigt__p_wxLogGui, _p_wxLogGuiTo_p_wxLog, 0, 0},  {&_swigt__p_wxPyLog, _p_wxPyLogTo_p_wxLog, 0, 0},  {&_swigt__p_wxLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLogBuffer[] = {  {&_swigt__p_wxLogBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLogChain[] = {  {&_swigt__p_wxLogChain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLogGui[] = {  {&_swigt__p_wxLogGui, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLogNull[] = {  {&_swigt__p_wxLogNull, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLogStderr[] = {  {&_swigt__p_wxLogStderr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLogTextCtrl[] = {  {&_swigt__p_wxLogTextCtrl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLogWindow[] = {  {&_swigt__p_wxLogWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMemorySize[] = {  {&_swigt__p_wxMemorySize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenu[] = {  {&_swigt__p_wxMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMetafileDataObject[] = {  {&_swigt__p_wxMetafileDataObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMimeTypesManager[] = {  {&_swigt__p_wxMimeTypesManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMouseState[] = {  {&_swigt__p_wxMouseState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMutexGuiLocker[] = {  {&_swigt__p_wxMutexGuiLocker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLayoutConstraints[] = {{&_swigt__p_wxLayoutConstraints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGBSizerItem[] = {{&_swigt__p_wxGBSizerItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizerItem[] = {{&_swigt__p_wxSizerItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIndividualLayoutConstraint[] = {{&_swigt__p_wxIndividualLayoutConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStaticBoxSizer[] = {{&_swigt__p_wxStaticBoxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBoxSizer[] = {{&_swigt__p_wxBoxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizer[] = {{&_swigt__p_wxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGridBagSizer[] = {{&_swigt__p_wxGridBagSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGridSizer[] = {{&_swigt__p_wxGridSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFlexGridSizer[] = {{&_swigt__p_wxFlexGridSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFSFile[] = {{&_swigt__p_wxFSFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPySizer[] = {{&_swigt__p_wxPySizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenuItem[] = {{&_swigt__p_wxMenuItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxICOHandler[] = {{&_swigt__p_wxICOHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBMPHandler[] = {{&_swigt__p_wxBMPHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyImageHandler[] = {{&_swigt__p_wxPyImageHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxImageHandler[] = {{&_swigt__p_wxImageHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxXPMHandler[] = {{&_swigt__p_wxXPMHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTIFFHandler[] = {{&_swigt__p_wxTIFFHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCURHandler[] = {{&_swigt__p_wxCURHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxANIHandler[] = {{&_swigt__p_wxANIHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPNGHandler[] = {{&_swigt__p_wxPNGHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGIFHandler[] = {{&_swigt__p_wxGIFHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPCXHandler[] = {{&_swigt__p_wxPCXHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxJPEGHandler[] = {{&_swigt__p_wxJPEGHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPNMHandler[] = {{&_swigt__p_wxPNMHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStdDialogButtonSizer[] = {{&_swigt__p_wxStdDialogButtonSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxAcceleratorTable[] = {{&_swigt__p_wxAcceleratorTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxImage[] = {{&_swigt__p_wxImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFileSystem[] = {{&_swigt__p_wxFileSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxObject[] = {  {&_swigt__p_wxLayoutConstraints, _p_wxLayoutConstraintsTo_p_wxObject, 0, 0},  {&_swigt__p_wxGBSizerItem, _p_wxGBSizerItemTo_p_wxObject, 0, 0},  {&_swigt__p_wxSizerItem, _p_wxSizerItemTo_p_wxObject, 0, 0},  {&_swigt__p_wxScrollEvent, _p_wxScrollEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxIndividualLayoutConstraint, _p_wxIndividualLayoutConstraintTo_p_wxObject, 0, 0},  {&_swigt__p_wxStaticBoxSizer, _p_wxStaticBoxSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxBoxSizer, _p_wxBoxSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxSizer, _p_wxSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxGridBagSizer, _p_wxGridBagSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxFileHistory, _p_wxFileHistoryTo_p_wxObject, 0, 0},  {&_swigt__p_wxUpdateUIEvent, _p_wxUpdateUIEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenu, _p_wxMenuTo_p_wxObject, 0, 0},  {&_swigt__p_wxEvent, _p_wxEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxGridSizer, _p_wxGridSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxFlexGridSizer, _p_wxFlexGridSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxInitDialogEvent, _p_wxInitDialogEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPaintEvent, _p_wxPaintEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxNcPaintEvent, _p_wxNcPaintEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPaletteChangedEvent, _p_wxPaletteChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxDisplayChangedEvent, _p_wxDisplayChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMouseCaptureChangedEvent, _p_wxMouseCaptureChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxSysColourChangedEvent, _p_wxSysColourChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxControl, _p_wxControlTo_p_wxObject, 0, 0},  {&_swigt__p_wxSetCursorEvent, _p_wxSetCursorEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxTimerEvent, _p_wxTimerEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxFSFile, _p_wxFSFileTo_p_wxObject, 0, 0},  {&_swigt__p_wxClipboard, _p_wxClipboardTo_p_wxObject, 0, 0},  {&_swigt__p_wxPySizer, _p_wxPySizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyEvent, _p_wxPyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxNotifyEvent, _p_wxNotifyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxShowEvent, _p_wxShowEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxToolTip, _p_wxToolTipTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenuItem, _p_wxMenuItemTo_p_wxObject, 0, 0},  {&_swigt__p_wxDateEvent, _p_wxDateEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMoveEvent, _p_wxMoveEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxSizeEvent, _p_wxSizeEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxActivateEvent, _p_wxActivateEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxIconizeEvent, _p_wxIconizeEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMaximizeEvent, _p_wxMaximizeEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxQueryNewPaletteEvent, _p_wxQueryNewPaletteEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxWindowCreateEvent, _p_wxWindowCreateEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxIdleEvent, _p_wxIdleEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxICOHandler, _p_wxICOHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxBMPHandler, _p_wxBMPHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyImageHandler, _p_wxPyImageHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxImageHandler, _p_wxImageHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxXPMHandler, _p_wxXPMHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxTIFFHandler, _p_wxTIFFHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxEvtHandler, _p_wxEvtHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxCURHandler, _p_wxCURHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxANIHandler, _p_wxANIHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPNGHandler, _p_wxPNGHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxGIFHandler, _p_wxGIFHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPCXHandler, _p_wxPCXHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxJPEGHandler, _p_wxJPEGHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPNMHandler, _p_wxPNMHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxStdDialogButtonSizer, _p_wxStdDialogButtonSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxAcceleratorTable, _p_wxAcceleratorTableTo_p_wxObject, 0, 0},  {&_swigt__p_wxImage, _p_wxImageTo_p_wxObject, 0, 0},  {&_swigt__p_wxScrollWinEvent, _p_wxScrollWinEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxSystemOptions, _p_wxSystemOptionsTo_p_wxObject, 0, 0},  {&_swigt__p_wxJoystickEvent, _p_wxJoystickEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxObject, 0, 0, 0},  {&_swigt__p_wxKeyEvent, _p_wxKeyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxNavigationKeyEvent, _p_wxNavigationKeyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxWindowDestroyEvent, _p_wxWindowDestroyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxWindow, _p_wxWindowTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenuBar, _p_wxMenuBarTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyProcess, _p_wxPyProcessTo_p_wxObject, 0, 0},  {&_swigt__p_wxFileSystem, _p_wxFileSystemTo_p_wxObject, 0, 0},  {&_swigt__p_wxContextMenuEvent, _p_wxContextMenuEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenuEvent, _p_wxMenuEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyApp, _p_wxPyAppTo_p_wxObject, 0, 0},  {&_swigt__p_wxCloseEvent, _p_wxCloseEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMouseEvent, _p_wxMouseEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxEraseEvent, _p_wxEraseEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxBusyInfo, _p_wxBusyInfoTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyCommandEvent, _p_wxPyCommandEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxCommandEvent, _p_wxCommandEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxDropFilesEvent, _p_wxDropFilesEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxFocusEvent, _p_wxFocusEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxChildFocusEvent, _p_wxChildFocusEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxProcessEvent, _p_wxProcessEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxControlWithItems, _p_wxControlWithItemsTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyValidator, _p_wxPyValidatorTo_p_wxObject, 0, 0},  {&_swigt__p_wxValidator, _p_wxValidatorTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyTimer, _p_wxPyTimerTo_p_wxObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxOutputStream[] = {  {&_swigt__p_wxOutputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaperSize[] = {  {&_swigt__p_wxPaperSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPoint[] = {  {&_swigt__p_wxPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxProcessEvent[] = {  {&_swigt__p_wxProcessEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyArtProvider[] = {  {&_swigt__p_wxPyArtProvider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyBitmapDataObject[] = {  {&_swigt__p_wxPyBitmapDataObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyDataObjectSimple[] = {  {&_swigt__p_wxPyDataObjectSimple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyDropSource[] = {  {&_swigt__p_wxPyDropSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyDropTarget[] = {  {&_swigt__p_wxPyDropTarget, 0, 0, 0},  {&_swigt__p_wxPyTextDropTarget, _p_wxPyTextDropTargetTo_p_wxPyDropTarget, 0, 0},  {&_swigt__p_wxPyFileDropTarget, _p_wxPyFileDropTargetTo_p_wxPyDropTarget, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyFileDropTarget[] = {  {&_swigt__p_wxPyFileDropTarget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyLog[] = {  {&_swigt__p_wxPyLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyProcess[] = {  {&_swigt__p_wxPyProcess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyTextDataObject[] = {  {&_swigt__p_wxPyTextDataObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyTextDropTarget[] = {  {&_swigt__p_wxPyTextDropTarget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyTimer[] = {  {&_swigt__p_wxPyTimer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyTipProvider[] = {  {&_swigt__p_wxPyTipProvider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxRect[] = {  {&_swigt__p_wxRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSingleInstanceChecker[] = {  {&_swigt__p_wxSingleInstanceChecker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSize[] = {  {&_swigt__p_wxSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSound[] = {  {&_swigt__p_wxSound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStandardPaths[] = {  {&_swigt__p_wxStandardPaths, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStopWatch[] = {  {&_swigt__p_wxStopWatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxString[] = {  {&_swigt__p_wxString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSystemOptions[] = {  {&_swigt__p_wxSystemOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSystemSettings[] = {  {&_swigt__p_wxSystemSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTextCtrl[] = {  {&_swigt__p_wxTextCtrl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTextDataObject[] = {  {&_swigt__p_wxTextDataObject, 0, 0, 0},  {&_swigt__p_wxPyTextDataObject, _p_wxPyTextDataObjectTo_p_wxTextDataObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTimeSpan[] = {  {&_swigt__p_wxTimeSpan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTimer[] = {  {&_swigt__p_wxTimer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTimerEvent[] = {  {&_swigt__p_wxTimerEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTimerRunner[] = {  {&_swigt__p_wxTimerRunner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTipProvider[] = {  {&_swigt__p_wxTipProvider, 0, 0, 0},  {&_swigt__p_wxPyTipProvider, _p_wxPyTipProviderTo_p_wxTipProvider, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxToolTip[] = {  {&_swigt__p_wxToolTip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxURLDataObject[] = {  {&_swigt__p_wxURLDataObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxVideoMode[] = {  {&_swigt__p_wxVideoMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindow[] = {  {&_swigt__p_wxControl, _p_wxControlTo_p_wxWindow, 0, 0},  {&_swigt__p_wxWindow, 0, 0, 0},  {&_swigt__p_wxControlWithItems, _p_wxControlWithItemsTo_p_wxWindow, 0, 0},  {&_swigt__p_wxMenuBar, _p_wxMenuBarTo_p_wxWindow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowDisabler[] = {  {&_swigt__p_wxWindowDisabler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__unsigned_int[] = {  {&_swigt__unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_form_ops_t,
  _swigc__p_int,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_void,
  _swigc__p_wxANIHandler,
  _swigc__p_wxAcceleratorTable,
  _swigc__p_wxActivateEvent,
  _swigc__p_wxArrayString,
  _swigc__p_wxBMPHandler,
  _swigc__p_wxBitmap,
  _swigc__p_wxBitmapDataObject,
  _swigc__p_wxBoxSizer,
  _swigc__p_wxBusyCursor,
  _swigc__p_wxBusyInfo,
  _swigc__p_wxCURHandler,
  _swigc__p_wxCaret,
  _swigc__p_wxChar,
  _swigc__p_wxChildFocusEvent,
  _swigc__p_wxClipboard,
  _swigc__p_wxClipboardLocker,
  _swigc__p_wxCloseEvent,
  _swigc__p_wxColour,
  _swigc__p_wxCommandEvent,
  _swigc__p_wxConfig,
  _swigc__p_wxConfigBase,
  _swigc__p_wxConfigPathChanger,
  _swigc__p_wxContextMenuEvent,
  _swigc__p_wxControl,
  _swigc__p_wxControlWithItems,
  _swigc__p_wxCursor,
  _swigc__p_wxCustomDataObject,
  _swigc__p_wxDC,
  _swigc__p_wxDataFormat,
  _swigc__p_wxDataObject,
  _swigc__p_wxDataObjectComposite,
  _swigc__p_wxDataObjectSimple,
  _swigc__p_wxDateEvent,
  _swigc__p_wxDateSpan,
  _swigc__p_wxDateTime,
  _swigc__p_wxDateTime__TimeZone,
  _swigc__p_wxDisplay,
  _swigc__p_wxDisplayChangedEvent,
  _swigc__p_wxDropFilesEvent,
  _swigc__p_wxDuplexMode,
  _swigc__p_wxEraseEvent,
  _swigc__p_wxEvent,
  _swigc__p_wxEvtHandler,
  _swigc__p_wxFSFile,
  _swigc__p_wxFileConfig,
  _swigc__p_wxFileDataObject,
  _swigc__p_wxFileHistory,
  _swigc__p_wxFileSystem,
  _swigc__p_wxFileType,
  _swigc__p_wxFileTypeInfo,
  _swigc__p_wxFlexGridSizer,
  _swigc__p_wxFocusEvent,
  _swigc__p_wxFont,
  _swigc__p_wxFrame,
  _swigc__p_wxGBSizerItem,
  _swigc__p_wxGIFHandler,
  _swigc__p_wxGridBagSizer,
  _swigc__p_wxGridSizer,
  _swigc__p_wxICOHandler,
  _swigc__p_wxIcon,
  _swigc__p_wxIconizeEvent,
  _swigc__p_wxIdleEvent,
  _swigc__p_wxImage,
  _swigc__p_wxImageHandler,
  _swigc__p_wxIndividualLayoutConstraint,
  _swigc__p_wxInitDialogEvent,
  _swigc__p_wxJPEGHandler,
  _swigc__p_wxJoystick,
  _swigc__p_wxJoystickEvent,
  _swigc__p_wxKeyEvent,
  _swigc__p_wxKillError,
  _swigc__p_wxLayoutConstraints,
  _swigc__p_wxLog,
  _swigc__p_wxLogBuffer,
  _swigc__p_wxLogChain,
  _swigc__p_wxLogGui,
  _swigc__p_wxLogNull,
  _swigc__p_wxLogStderr,
  _swigc__p_wxLogTextCtrl,
  _swigc__p_wxLogWindow,
  _swigc__p_wxMaximizeEvent,
  _swigc__p_wxMemorySize,
  _swigc__p_wxMenu,
  _swigc__p_wxMenuBar,
  _swigc__p_wxMenuEvent,
  _swigc__p_wxMenuItem,
  _swigc__p_wxMetafileDataObject,
  _swigc__p_wxMimeTypesManager,
  _swigc__p_wxMouseCaptureChangedEvent,
  _swigc__p_wxMouseEvent,
  _swigc__p_wxMouseState,
  _swigc__p_wxMoveEvent,
  _swigc__p_wxMutexGuiLocker,
  _swigc__p_wxNavigationKeyEvent,
  _swigc__p_wxNcPaintEvent,
  _swigc__p_wxNotifyEvent,
  _swigc__p_wxObject,
  _swigc__p_wxOutputStream,
  _swigc__p_wxPCXHandler,
  _swigc__p_wxPNGHandler,
  _swigc__p_wxPNMHandler,
  _swigc__p_wxPaintEvent,
  _swigc__p_wxPaletteChangedEvent,
  _swigc__p_wxPaperSize,
  _swigc__p_wxPoint,
  _swigc__p_wxProcessEvent,
  _swigc__p_wxPyApp,
  _swigc__p_wxPyArtProvider,
  _swigc__p_wxPyBitmapDataObject,
  _swigc__p_wxPyCommandEvent,
  _swigc__p_wxPyDataObjectSimple,
  _swigc__p_wxPyDropSource,
  _swigc__p_wxPyDropTarget,
  _swigc__p_wxPyEvent,
  _swigc__p_wxPyFileDropTarget,
  _swigc__p_wxPyImageHandler,
  _swigc__p_wxPyLog,
  _swigc__p_wxPyProcess,
  _swigc__p_wxPySizer,
  _swigc__p_wxPyTextDataObject,
  _swigc__p_wxPyTextDropTarget,
  _swigc__p_wxPyTimer,
  _swigc__p_wxPyTipProvider,
  _swigc__p_wxPyValidator,
  _swigc__p_wxQueryNewPaletteEvent,
  _swigc__p_wxRect,
  _swigc__p_wxScrollEvent,
  _swigc__p_wxScrollWinEvent,
  _swigc__p_wxSetCursorEvent,
  _swigc__p_wxShowEvent,
  _swigc__p_wxSingleInstanceChecker,
  _swigc__p_wxSize,
  _swigc__p_wxSizeEvent,
  _swigc__p_wxSizer,
  _swigc__p_wxSizerItem,
  _swigc__p_wxSound,
  _swigc__p_wxStandardPaths,
  _swigc__p_wxStaticBoxSizer,
  _swigc__p_wxStdDialogButtonSizer,
  _swigc__p_wxStopWatch,
  _swigc__p_wxString,
  _swigc__p_wxSysColourChangedEvent,
  _swigc__p_wxSystemOptions,
  _swigc__p_wxSystemSettings,
  _swigc__p_wxTIFFHandler,
  _swigc__p_wxTextCtrl,
  _swigc__p_wxTextDataObject,
  _swigc__p_wxTimeSpan,
  _swigc__p_wxTimer,
  _swigc__p_wxTimerEvent,
  _swigc__p_wxTimerRunner,
  _swigc__p_wxTipProvider,
  _swigc__p_wxToolTip,
  _swigc__p_wxURLDataObject,
  _swigc__p_wxUpdateUIEvent,
  _swigc__p_wxValidator,
  _swigc__p_wxVideoMode,
  _swigc__p_wxWindow,
  _swigc__p_wxWindowCreateEvent,
  _swigc__p_wxWindowDestroyEvent,
  _swigc__p_wxWindowDisabler,
  _swigc__p_wxXPMHandler,
  _swigc__ptrdiff_t,
  _swigc__std__ptrdiff_t,
  _swigc__unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"TRACE_MemAlloc", 0, 0, (void *)"memalloc", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"TRACE_Messages", 0, 0, (void *)"messages", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"TRACE_ResAlloc", 0, 0, (void *)"resalloc", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"TRACE_RefCount", 0, 0, (void *)"refcount", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"TRACE_OleCalls", 0, 0, (void *)"ole", &SWIGTYPE_p_char},
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
    size_t i;
    swig_module_info *module_head;
    static int init_run = 0;
    
    clientdata = clientdata;
    
    if (init_run) return;
    init_run = 1;
    
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    
    /* Try and load any already created modules */
    module_head = SWIG_GetModule(clientdata);
    if (module_head) {
        swig_module.next = module_head->next;
        module_head->next = &swig_module;
    } else {
        /* This is the first module loaded */
        swig_module.next = &swig_module;
        SWIG_SetModule(clientdata, &swig_module);
    }
    
    /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
    for (i = 0; i < swig_module.size; ++i) {
        swig_type_info *type = 0;
        swig_type_info *ret;
        swig_cast_info *cast;
        
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
        
        /* if there is another module already loaded */
        if (swig_module.next != &swig_module) {
            type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
        }
        if (type) {
            /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
            printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
            if (swig_module.type_initial[i]->clientdata) {
                type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
                printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
            }
        } else {
            type = swig_module.type_initial[i];
        }
        
        /* Insert casting types */
        cast = swig_module.cast_initial[i];
        while (cast->type) {
            /* Don't need to add information already in the list */
            ret = 0;
#ifdef SWIGRUNTIME_DEBUG
            printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
            if (swig_module.next != &swig_module) {
                ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
                if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
            }
            if (ret) {
                if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
                    printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
                    cast->type = ret;
                    ret = 0;
                } else {
                    /* Check for casting already in the list */
                    swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
                    if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
                    if (!ocast) ret = 0;
                }
            }
            
            if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
                printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
                if (type->cast) {
                    type->cast->prev = cast;
                    cast->next = type->cast;
                }
                type->cast = cast;
            }
            cast++;
        }
        /* Set entry in modules->types array equal to the type */
        swig_module.types[i] = type;
    }
    swig_module.types[i] = 0;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("**** SWIG_InitializeModule: Cast List ******\n");
    for (i = 0; i < swig_module.size; ++i) {
        int j = 0;
        swig_cast_info *cast = swig_module.cast_initial[i];
        printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
        while (cast->type) {
            printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
            cast++;
            ++j;
        }
        printf("---- Total casts: %d\n",j);
    }
    printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
    size_t i;
    swig_cast_info *equiv;
    static int init_run = 0;
    
    if (init_run) return;
    init_run = 1;
    
    for (i = 0; i < swig_module.size; i++) {
        if (swig_module.types[i]->clientdata) {
            equiv = swig_module.types[i]->cast;
            while (equiv) {
                if (!equiv->converter) {
                    if (equiv->type && !equiv->type->clientdata)
                    SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                }
                equiv = equiv->next;
            }
        }
    }
}

#ifdef __cplusplus
#if 0
{
    /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"SYS_OEM_FIXED_FONT", SWIG_From_int(static_cast<int >(wxSYS_OEM_FIXED_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_ANSI_FIXED_FONT", SWIG_From_int(static_cast<int >(wxSYS_ANSI_FIXED_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_ANSI_VAR_FONT", SWIG_From_int(static_cast<int >(wxSYS_ANSI_VAR_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SYSTEM_FONT", SWIG_From_int(static_cast<int >(wxSYS_SYSTEM_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_DEVICE_DEFAULT_FONT", SWIG_From_int(static_cast<int >(wxSYS_DEVICE_DEFAULT_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_DEFAULT_PALETTE", SWIG_From_int(static_cast<int >(wxSYS_DEFAULT_PALETTE))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SYSTEM_FIXED_FONT", SWIG_From_int(static_cast<int >(wxSYS_SYSTEM_FIXED_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_DEFAULT_GUI_FONT", SWIG_From_int(static_cast<int >(wxSYS_DEFAULT_GUI_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_ICONTITLE_FONT", SWIG_From_int(static_cast<int >(wxSYS_ICONTITLE_FONT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_SCROLLBAR", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_SCROLLBAR))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_BACKGROUND", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_BACKGROUND))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_DESKTOP", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_DESKTOP))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_ACTIVECAPTION", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_ACTIVECAPTION))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_INACTIVECAPTION", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_INACTIVECAPTION))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_MENU", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_MENU))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_WINDOW", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_WINDOW))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_WINDOWFRAME", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_WINDOWFRAME))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_MENUTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_MENUTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_WINDOWTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_WINDOWTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_CAPTIONTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_CAPTIONTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_ACTIVEBORDER", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_ACTIVEBORDER))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_INACTIVEBORDER", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_INACTIVEBORDER))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_APPWORKSPACE", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_APPWORKSPACE))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_HIGHLIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_HIGHLIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_HIGHLIGHTTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_HIGHLIGHTTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_BTNFACE", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_BTNFACE))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_3DFACE", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_3DFACE))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_BTNSHADOW", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_BTNSHADOW))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_3DSHADOW", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_3DSHADOW))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_GRAYTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_GRAYTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_BTNTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_BTNTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_INACTIVECAPTIONTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_INACTIVECAPTIONTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_BTNHIGHLIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_BTNHIGHLIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_BTNHILIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_BTNHILIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_3DHIGHLIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_3DHIGHLIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_3DHILIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_3DHILIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_3DDKSHADOW", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_3DDKSHADOW))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_3DLIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_3DLIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_INFOTEXT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_INFOTEXT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_INFOBK", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_INFOBK))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_LISTBOX", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_LISTBOX))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_HOTLIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_HOTLIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_GRADIENTACTIVECAPTION", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_GRADIENTACTIVECAPTION))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_GRADIENTINACTIVECAPTION", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_GRADIENTINACTIVECAPTION))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_MENUHILIGHT", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_MENUHILIGHT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_MENUBAR", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_MENUBAR))); 
    }
    {
        PyDict_SetItemString(d,"SYS_COLOUR_MAX", SWIG_From_int(static_cast<int >(wxSYS_COLOUR_MAX))); 
    }
    {
        PyDict_SetItemString(d,"SYS_MOUSE_BUTTONS", SWIG_From_int(static_cast<int >(wxSYS_MOUSE_BUTTONS))); 
    }
    {
        PyDict_SetItemString(d,"SYS_BORDER_X", SWIG_From_int(static_cast<int >(wxSYS_BORDER_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_BORDER_Y", SWIG_From_int(static_cast<int >(wxSYS_BORDER_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_CURSOR_X", SWIG_From_int(static_cast<int >(wxSYS_CURSOR_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_CURSOR_Y", SWIG_From_int(static_cast<int >(wxSYS_CURSOR_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_DCLICK_X", SWIG_From_int(static_cast<int >(wxSYS_DCLICK_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_DCLICK_Y", SWIG_From_int(static_cast<int >(wxSYS_DCLICK_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_DRAG_X", SWIG_From_int(static_cast<int >(wxSYS_DRAG_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_DRAG_Y", SWIG_From_int(static_cast<int >(wxSYS_DRAG_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_EDGE_X", SWIG_From_int(static_cast<int >(wxSYS_EDGE_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_EDGE_Y", SWIG_From_int(static_cast<int >(wxSYS_EDGE_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_HSCROLL_ARROW_X", SWIG_From_int(static_cast<int >(wxSYS_HSCROLL_ARROW_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_HSCROLL_ARROW_Y", SWIG_From_int(static_cast<int >(wxSYS_HSCROLL_ARROW_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_HTHUMB_X", SWIG_From_int(static_cast<int >(wxSYS_HTHUMB_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_ICON_X", SWIG_From_int(static_cast<int >(wxSYS_ICON_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_ICON_Y", SWIG_From_int(static_cast<int >(wxSYS_ICON_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_ICONSPACING_X", SWIG_From_int(static_cast<int >(wxSYS_ICONSPACING_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_ICONSPACING_Y", SWIG_From_int(static_cast<int >(wxSYS_ICONSPACING_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_WINDOWMIN_X", SWIG_From_int(static_cast<int >(wxSYS_WINDOWMIN_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_WINDOWMIN_Y", SWIG_From_int(static_cast<int >(wxSYS_WINDOWMIN_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SCREEN_X", SWIG_From_int(static_cast<int >(wxSYS_SCREEN_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SCREEN_Y", SWIG_From_int(static_cast<int >(wxSYS_SCREEN_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_FRAMESIZE_X", SWIG_From_int(static_cast<int >(wxSYS_FRAMESIZE_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_FRAMESIZE_Y", SWIG_From_int(static_cast<int >(wxSYS_FRAMESIZE_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SMALLICON_X", SWIG_From_int(static_cast<int >(wxSYS_SMALLICON_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SMALLICON_Y", SWIG_From_int(static_cast<int >(wxSYS_SMALLICON_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_HSCROLL_Y", SWIG_From_int(static_cast<int >(wxSYS_HSCROLL_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_VSCROLL_X", SWIG_From_int(static_cast<int >(wxSYS_VSCROLL_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_VSCROLL_ARROW_X", SWIG_From_int(static_cast<int >(wxSYS_VSCROLL_ARROW_X))); 
    }
    {
        PyDict_SetItemString(d,"SYS_VSCROLL_ARROW_Y", SWIG_From_int(static_cast<int >(wxSYS_VSCROLL_ARROW_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_VTHUMB_Y", SWIG_From_int(static_cast<int >(wxSYS_VTHUMB_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_CAPTION_Y", SWIG_From_int(static_cast<int >(wxSYS_CAPTION_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_MENU_Y", SWIG_From_int(static_cast<int >(wxSYS_MENU_Y))); 
    }
    {
        PyDict_SetItemString(d,"SYS_NETWORK_PRESENT", SWIG_From_int(static_cast<int >(wxSYS_NETWORK_PRESENT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_PENWINDOWS_PRESENT", SWIG_From_int(static_cast<int >(wxSYS_PENWINDOWS_PRESENT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SHOW_SOUNDS", SWIG_From_int(static_cast<int >(wxSYS_SHOW_SOUNDS))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SWAP_BUTTONS", SWIG_From_int(static_cast<int >(wxSYS_SWAP_BUTTONS))); 
    }
    {
        PyDict_SetItemString(d,"SYS_CAN_DRAW_FRAME_DECORATIONS", SWIG_From_int(static_cast<int >(wxSYS_CAN_DRAW_FRAME_DECORATIONS))); 
    }
    {
        PyDict_SetItemString(d,"SYS_CAN_ICONIZE_FRAME", SWIG_From_int(static_cast<int >(wxSYS_CAN_ICONIZE_FRAME))); 
    }
    {
        PyDict_SetItemString(d,"SYS_TABLET_PRESENT", SWIG_From_int(static_cast<int >(wxSYS_TABLET_PRESENT))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SCREEN_NONE", SWIG_From_int(static_cast<int >(wxSYS_SCREEN_NONE))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SCREEN_TINY", SWIG_From_int(static_cast<int >(wxSYS_SCREEN_TINY))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SCREEN_PDA", SWIG_From_int(static_cast<int >(wxSYS_SCREEN_PDA))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SCREEN_SMALL", SWIG_From_int(static_cast<int >(wxSYS_SCREEN_SMALL))); 
    }
    {
        PyDict_SetItemString(d,"SYS_SCREEN_DESKTOP", SWIG_From_int(static_cast<int >(wxSYS_SCREEN_DESKTOP))); 
    }
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"WINDOW_DEFAULT_VARIANT",_wrap_WINDOW_DEFAULT_VARIANT_get, _wrap_WINDOW_DEFAULT_VARIANT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"FileSelectorPromptStr",_wrap_FileSelectorPromptStr_get, _wrap_FileSelectorPromptStr_set);
    SWIG_addvarlink(SWIG_globals,(char*)"FileSelectorDefaultWildcardStr",_wrap_FileSelectorDefaultWildcardStr_get, _wrap_FileSelectorDefaultWildcardStr_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DirSelectorPromptStr",_wrap_DirSelectorPromptStr_get, _wrap_DirSelectorPromptStr_set);
    {
        PyDict_SetItemString(d,"SHUTDOWN_POWEROFF", SWIG_From_int(static_cast<int >(wxSHUTDOWN_POWEROFF))); 
    }
    {
        PyDict_SetItemString(d,"SHUTDOWN_REBOOT", SWIG_From_int(static_cast<int >(wxSHUTDOWN_REBOOT))); 
    }
    {
        PyDict_SetItemString(d,"TIMER_CONTINUOUS", SWIG_From_int(static_cast<int >(wxTIMER_CONTINUOUS))); 
    }
    {
        PyDict_SetItemString(d,"TIMER_ONE_SHOT", SWIG_From_int(static_cast<int >(wxTIMER_ONE_SHOT))); 
    }
    PyDict_SetItemString(d, "wxEVT_TIMER", PyInt_FromLong(wxEVT_TIMER));
    
    wxPyPtrTypeMap_Add("wxTimer", "wxPyTimer");
    
    {
        PyDict_SetItemString(d,"LOG_FatalError", SWIG_From_int(static_cast<int >(wxLOG_FatalError))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Error", SWIG_From_int(static_cast<int >(wxLOG_Error))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Warning", SWIG_From_int(static_cast<int >(wxLOG_Warning))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Message", SWIG_From_int(static_cast<int >(wxLOG_Message))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Status", SWIG_From_int(static_cast<int >(wxLOG_Status))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Info", SWIG_From_int(static_cast<int >(wxLOG_Info))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Debug", SWIG_From_int(static_cast<int >(wxLOG_Debug))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Trace", SWIG_From_int(static_cast<int >(wxLOG_Trace))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Progress", SWIG_From_int(static_cast<int >(wxLOG_Progress))); 
    }
    {
        PyDict_SetItemString(d,"LOG_User", SWIG_From_int(static_cast<int >(wxLOG_User))); 
    }
    {
        PyDict_SetItemString(d,"LOG_Max", SWIG_From_int(static_cast<int >(wxLOG_Max))); 
    }
    PyDict_SetItemString(d,"TRACE_MemAlloc", SWIG_FromCharPtr("memalloc"));
    PyDict_SetItemString(d,"TRACE_Messages", SWIG_FromCharPtr("messages"));
    PyDict_SetItemString(d,"TRACE_ResAlloc", SWIG_FromCharPtr("resalloc"));
    PyDict_SetItemString(d,"TRACE_RefCount", SWIG_FromCharPtr("refcount"));
    PyDict_SetItemString(d,"TRACE_OleCalls", SWIG_FromCharPtr("ole"));
    {
        PyDict_SetItemString(d,"TraceMemAlloc", SWIG_From_int(static_cast<int >(0x0001))); 
    }
    {
        PyDict_SetItemString(d,"TraceMessages", SWIG_From_int(static_cast<int >(0x0002))); 
    }
    {
        PyDict_SetItemString(d,"TraceResAlloc", SWIG_From_int(static_cast<int >(0x0004))); 
    }
    {
        PyDict_SetItemString(d,"TraceRefCount", SWIG_From_int(static_cast<int >(0x0008))); 
    }
    {
        PyDict_SetItemString(d,"TraceOleCalls", SWIG_From_int(static_cast<int >(0x0100))); 
    }
    {
        PyDict_SetItemString(d,"PROCESS_DEFAULT", SWIG_From_int(static_cast<int >(wxPROCESS_DEFAULT))); 
    }
    {
        PyDict_SetItemString(d,"PROCESS_REDIRECT", SWIG_From_int(static_cast<int >(wxPROCESS_REDIRECT))); 
    }
    {
        PyDict_SetItemString(d,"KILL_OK", SWIG_From_int(static_cast<int >(wxKILL_OK))); 
    }
    {
        PyDict_SetItemString(d,"KILL_BAD_SIGNAL", SWIG_From_int(static_cast<int >(wxKILL_BAD_SIGNAL))); 
    }
    {
        PyDict_SetItemString(d,"KILL_ACCESS_DENIED", SWIG_From_int(static_cast<int >(wxKILL_ACCESS_DENIED))); 
    }
    {
        PyDict_SetItemString(d,"KILL_NO_PROCESS", SWIG_From_int(static_cast<int >(wxKILL_NO_PROCESS))); 
    }
    {
        PyDict_SetItemString(d,"KILL_ERROR", SWIG_From_int(static_cast<int >(wxKILL_ERROR))); 
    }
    {
        PyDict_SetItemString(d,"KILL_NOCHILDREN", SWIG_From_int(static_cast<int >(wxKILL_NOCHILDREN))); 
    }
    {
        PyDict_SetItemString(d,"KILL_CHILDREN", SWIG_From_int(static_cast<int >(wxKILL_CHILDREN))); 
    }
    {
        PyDict_SetItemString(d,"SIGNONE", SWIG_From_int(static_cast<int >(wxSIGNONE))); 
    }
    {
        PyDict_SetItemString(d,"SIGHUP", SWIG_From_int(static_cast<int >(wxSIGHUP))); 
    }
    {
        PyDict_SetItemString(d,"SIGINT", SWIG_From_int(static_cast<int >(wxSIGINT))); 
    }
    {
        PyDict_SetItemString(d,"SIGQUIT", SWIG_From_int(static_cast<int >(wxSIGQUIT))); 
    }
    {
        PyDict_SetItemString(d,"SIGILL", SWIG_From_int(static_cast<int >(wxSIGILL))); 
    }
    {
        PyDict_SetItemString(d,"SIGTRAP", SWIG_From_int(static_cast<int >(wxSIGTRAP))); 
    }
    {
        PyDict_SetItemString(d,"SIGABRT", SWIG_From_int(static_cast<int >(wxSIGABRT))); 
    }
    {
        PyDict_SetItemString(d,"SIGIOT", SWIG_From_int(static_cast<int >(wxSIGIOT))); 
    }
    {
        PyDict_SetItemString(d,"SIGEMT", SWIG_From_int(static_cast<int >(wxSIGEMT))); 
    }
    {
        PyDict_SetItemString(d,"SIGFPE", SWIG_From_int(static_cast<int >(wxSIGFPE))); 
    }
    {
        PyDict_SetItemString(d,"SIGKILL", SWIG_From_int(static_cast<int >(wxSIGKILL))); 
    }
    {
        PyDict_SetItemString(d,"SIGBUS", SWIG_From_int(static_cast<int >(wxSIGBUS))); 
    }
    {
        PyDict_SetItemString(d,"SIGSEGV", SWIG_From_int(static_cast<int >(wxSIGSEGV))); 
    }
    {
        PyDict_SetItemString(d,"SIGSYS", SWIG_From_int(static_cast<int >(wxSIGSYS))); 
    }
    {
        PyDict_SetItemString(d,"SIGPIPE", SWIG_From_int(static_cast<int >(wxSIGPIPE))); 
    }
    {
        PyDict_SetItemString(d,"SIGALRM", SWIG_From_int(static_cast<int >(wxSIGALRM))); 
    }
    {
        PyDict_SetItemString(d,"SIGTERM", SWIG_From_int(static_cast<int >(wxSIGTERM))); 
    }
    PyDict_SetItemString(d, "wxEVT_END_PROCESS", PyInt_FromLong(wxEVT_END_PROCESS));
    {
        PyDict_SetItemString(d,"EXEC_ASYNC", SWIG_From_int(static_cast<int >(wxEXEC_ASYNC))); 
    }
    {
        PyDict_SetItemString(d,"EXEC_SYNC", SWIG_From_int(static_cast<int >(wxEXEC_SYNC))); 
    }
    {
        PyDict_SetItemString(d,"EXEC_NOHIDE", SWIG_From_int(static_cast<int >(wxEXEC_NOHIDE))); 
    }
    {
        PyDict_SetItemString(d,"EXEC_MAKE_GROUP_LEADER", SWIG_From_int(static_cast<int >(wxEXEC_MAKE_GROUP_LEADER))); 
    }
    {
        PyDict_SetItemString(d,"EXEC_NODISABLE", SWIG_From_int(static_cast<int >(wxEXEC_NODISABLE))); 
    }
    
    wxPyPtrTypeMap_Add("wxProcess", "wxPyProcess");
    
    {
        PyDict_SetItemString(d,"JOYSTICK1", SWIG_From_int(static_cast<int >(wxJOYSTICK1))); 
    }
    {
        PyDict_SetItemString(d,"JOYSTICK2", SWIG_From_int(static_cast<int >(wxJOYSTICK2))); 
    }
    {
        PyDict_SetItemString(d,"JOY_BUTTON_ANY", SWIG_From_int(static_cast<int >(wxJOY_BUTTON_ANY))); 
    }
    {
        PyDict_SetItemString(d,"JOY_BUTTON1", SWIG_From_int(static_cast<int >(wxJOY_BUTTON1))); 
    }
    {
        PyDict_SetItemString(d,"JOY_BUTTON2", SWIG_From_int(static_cast<int >(wxJOY_BUTTON2))); 
    }
    {
        PyDict_SetItemString(d,"JOY_BUTTON3", SWIG_From_int(static_cast<int >(wxJOY_BUTTON3))); 
    }
    {
        PyDict_SetItemString(d,"JOY_BUTTON4", SWIG_From_int(static_cast<int >(wxJOY_BUTTON4))); 
    }
    PyDict_SetItemString(d, "wxEVT_JOY_BUTTON_DOWN", PyInt_FromLong(wxEVT_JOY_BUTTON_DOWN));
    PyDict_SetItemString(d, "wxEVT_JOY_BUTTON_UP", PyInt_FromLong(wxEVT_JOY_BUTTON_UP));
    PyDict_SetItemString(d, "wxEVT_JOY_MOVE", PyInt_FromLong(wxEVT_JOY_MOVE));
    PyDict_SetItemString(d, "wxEVT_JOY_ZMOVE", PyInt_FromLong(wxEVT_JOY_ZMOVE));
    {
        PyDict_SetItemString(d,"SOUND_SYNC", SWIG_From_int(static_cast<int >(wxSOUND_SYNC))); 
    }
    {
        PyDict_SetItemString(d,"SOUND_ASYNC", SWIG_From_int(static_cast<int >(wxSOUND_ASYNC))); 
    }
    {
        PyDict_SetItemString(d,"SOUND_LOOP", SWIG_From_int(static_cast<int >(wxSOUND_LOOP))); 
    }
    {
        PyDict_SetItemString(d,"MAILCAP_STANDARD", SWIG_From_int(static_cast<int >(wxMAILCAP_STANDARD))); 
    }
    {
        PyDict_SetItemString(d,"MAILCAP_NETSCAPE", SWIG_From_int(static_cast<int >(wxMAILCAP_NETSCAPE))); 
    }
    {
        PyDict_SetItemString(d,"MAILCAP_KDE", SWIG_From_int(static_cast<int >(wxMAILCAP_KDE))); 
    }
    {
        PyDict_SetItemString(d,"MAILCAP_GNOME", SWIG_From_int(static_cast<int >(wxMAILCAP_GNOME))); 
    }
    {
        PyDict_SetItemString(d,"MAILCAP_ALL", SWIG_From_int(static_cast<int >(wxMAILCAP_ALL))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"TheMimeTypesManager",_wrap_TheMimeTypesManager_get, _wrap_TheMimeTypesManager_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_TOOLBAR",_wrap_ART_TOOLBAR_get, _wrap_ART_TOOLBAR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_MENU",_wrap_ART_MENU_get, _wrap_ART_MENU_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FRAME_ICON",_wrap_ART_FRAME_ICON_get, _wrap_ART_FRAME_ICON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_CMN_DIALOG",_wrap_ART_CMN_DIALOG_get, _wrap_ART_CMN_DIALOG_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HELP_BROWSER",_wrap_ART_HELP_BROWSER_get, _wrap_ART_HELP_BROWSER_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_MESSAGE_BOX",_wrap_ART_MESSAGE_BOX_get, _wrap_ART_MESSAGE_BOX_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_BUTTON",_wrap_ART_BUTTON_get, _wrap_ART_BUTTON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_OTHER",_wrap_ART_OTHER_get, _wrap_ART_OTHER_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_ADD_BOOKMARK",_wrap_ART_ADD_BOOKMARK_get, _wrap_ART_ADD_BOOKMARK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_DEL_BOOKMARK",_wrap_ART_DEL_BOOKMARK_get, _wrap_ART_DEL_BOOKMARK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HELP_SIDE_PANEL",_wrap_ART_HELP_SIDE_PANEL_get, _wrap_ART_HELP_SIDE_PANEL_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HELP_SETTINGS",_wrap_ART_HELP_SETTINGS_get, _wrap_ART_HELP_SETTINGS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HELP_BOOK",_wrap_ART_HELP_BOOK_get, _wrap_ART_HELP_BOOK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HELP_FOLDER",_wrap_ART_HELP_FOLDER_get, _wrap_ART_HELP_FOLDER_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HELP_PAGE",_wrap_ART_HELP_PAGE_get, _wrap_ART_HELP_PAGE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_GO_BACK",_wrap_ART_GO_BACK_get, _wrap_ART_GO_BACK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_GO_FORWARD",_wrap_ART_GO_FORWARD_get, _wrap_ART_GO_FORWARD_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_GO_UP",_wrap_ART_GO_UP_get, _wrap_ART_GO_UP_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_GO_DOWN",_wrap_ART_GO_DOWN_get, _wrap_ART_GO_DOWN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_GO_TO_PARENT",_wrap_ART_GO_TO_PARENT_get, _wrap_ART_GO_TO_PARENT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_GO_HOME",_wrap_ART_GO_HOME_get, _wrap_ART_GO_HOME_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FILE_OPEN",_wrap_ART_FILE_OPEN_get, _wrap_ART_FILE_OPEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FILE_SAVE",_wrap_ART_FILE_SAVE_get, _wrap_ART_FILE_SAVE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FILE_SAVE_AS",_wrap_ART_FILE_SAVE_AS_get, _wrap_ART_FILE_SAVE_AS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_PRINT",_wrap_ART_PRINT_get, _wrap_ART_PRINT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HELP",_wrap_ART_HELP_get, _wrap_ART_HELP_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_TIP",_wrap_ART_TIP_get, _wrap_ART_TIP_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_REPORT_VIEW",_wrap_ART_REPORT_VIEW_get, _wrap_ART_REPORT_VIEW_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_LIST_VIEW",_wrap_ART_LIST_VIEW_get, _wrap_ART_LIST_VIEW_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_NEW_DIR",_wrap_ART_NEW_DIR_get, _wrap_ART_NEW_DIR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_HARDDISK",_wrap_ART_HARDDISK_get, _wrap_ART_HARDDISK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FLOPPY",_wrap_ART_FLOPPY_get, _wrap_ART_FLOPPY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_CDROM",_wrap_ART_CDROM_get, _wrap_ART_CDROM_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_REMOVABLE",_wrap_ART_REMOVABLE_get, _wrap_ART_REMOVABLE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FOLDER",_wrap_ART_FOLDER_get, _wrap_ART_FOLDER_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FOLDER_OPEN",_wrap_ART_FOLDER_OPEN_get, _wrap_ART_FOLDER_OPEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_GO_DIR_UP",_wrap_ART_GO_DIR_UP_get, _wrap_ART_GO_DIR_UP_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_EXECUTABLE_FILE",_wrap_ART_EXECUTABLE_FILE_get, _wrap_ART_EXECUTABLE_FILE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_NORMAL_FILE",_wrap_ART_NORMAL_FILE_get, _wrap_ART_NORMAL_FILE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_TICK_MARK",_wrap_ART_TICK_MARK_get, _wrap_ART_TICK_MARK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_CROSS_MARK",_wrap_ART_CROSS_MARK_get, _wrap_ART_CROSS_MARK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_ERROR",_wrap_ART_ERROR_get, _wrap_ART_ERROR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_QUESTION",_wrap_ART_QUESTION_get, _wrap_ART_QUESTION_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_WARNING",_wrap_ART_WARNING_get, _wrap_ART_WARNING_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_INFORMATION",_wrap_ART_INFORMATION_get, _wrap_ART_INFORMATION_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_MISSING_IMAGE",_wrap_ART_MISSING_IMAGE_get, _wrap_ART_MISSING_IMAGE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_COPY",_wrap_ART_COPY_get, _wrap_ART_COPY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_CUT",_wrap_ART_CUT_get, _wrap_ART_CUT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_PASTE",_wrap_ART_PASTE_get, _wrap_ART_PASTE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_DELETE",_wrap_ART_DELETE_get, _wrap_ART_DELETE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_NEW",_wrap_ART_NEW_get, _wrap_ART_NEW_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_UNDO",_wrap_ART_UNDO_get, _wrap_ART_UNDO_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_REDO",_wrap_ART_REDO_get, _wrap_ART_REDO_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_QUIT",_wrap_ART_QUIT_get, _wrap_ART_QUIT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FIND",_wrap_ART_FIND_get, _wrap_ART_FIND_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ART_FIND_AND_REPLACE",_wrap_ART_FIND_AND_REPLACE_get, _wrap_ART_FIND_AND_REPLACE_set);
    
    wxPyPtrTypeMap_Add("wxArtProvider", "wxPyArtProvider");
    
    {
        PyDict_SetItemString(d,"CONFIG_USE_LOCAL_FILE", SWIG_From_int(static_cast<int >(wxCONFIG_USE_LOCAL_FILE))); 
    }
    {
        PyDict_SetItemString(d,"CONFIG_USE_GLOBAL_FILE", SWIG_From_int(static_cast<int >(wxCONFIG_USE_GLOBAL_FILE))); 
    }
    {
        PyDict_SetItemString(d,"CONFIG_USE_RELATIVE_PATH", SWIG_From_int(static_cast<int >(wxCONFIG_USE_RELATIVE_PATH))); 
    }
    {
        PyDict_SetItemString(d,"CONFIG_USE_NO_ESCAPE_CHARACTERS", SWIG_From_int(static_cast<int >(wxCONFIG_USE_NO_ESCAPE_CHARACTERS))); 
    }
    {
        PyDict_SetItemString(d,"ConfigBase_Type_Unknown", SWIG_From_int(static_cast<int >(wxConfigBase::Type_Unknown))); 
    }
    {
        PyDict_SetItemString(d,"ConfigBase_Type_String", SWIG_From_int(static_cast<int >(wxConfigBase::Type_String))); 
    }
    {
        PyDict_SetItemString(d,"ConfigBase_Type_Boolean", SWIG_From_int(static_cast<int >(wxConfigBase::Type_Boolean))); 
    }
    {
        PyDict_SetItemString(d,"ConfigBase_Type_Integer", SWIG_From_int(static_cast<int >(wxConfigBase::Type_Integer))); 
    }
    {
        PyDict_SetItemString(d,"ConfigBase_Type_Float", SWIG_From_int(static_cast<int >(wxConfigBase::Type_Float))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"DefaultDateTimeFormat",_wrap_DefaultDateTimeFormat_get, _wrap_DefaultDateTimeFormat_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DefaultTimeSpanFormat",_wrap_DefaultTimeSpanFormat_get, _wrap_DefaultTimeSpanFormat_set);
    {
        PyDict_SetItemString(d,"DateTime_Local", SWIG_From_int(static_cast<int >(wxDateTime::Local))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_12", SWIG_From_int(static_cast<int >(wxDateTime::GMT_12))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_11", SWIG_From_int(static_cast<int >(wxDateTime::GMT_11))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_10", SWIG_From_int(static_cast<int >(wxDateTime::GMT_10))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_9", SWIG_From_int(static_cast<int >(wxDateTime::GMT_9))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_8", SWIG_From_int(static_cast<int >(wxDateTime::GMT_8))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_7", SWIG_From_int(static_cast<int >(wxDateTime::GMT_7))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_6", SWIG_From_int(static_cast<int >(wxDateTime::GMT_6))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_5", SWIG_From_int(static_cast<int >(wxDateTime::GMT_5))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_4", SWIG_From_int(static_cast<int >(wxDateTime::GMT_4))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_3", SWIG_From_int(static_cast<int >(wxDateTime::GMT_3))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_2", SWIG_From_int(static_cast<int >(wxDateTime::GMT_2))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT_1", SWIG_From_int(static_cast<int >(wxDateTime::GMT_1))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT0", SWIG_From_int(static_cast<int >(wxDateTime::GMT0))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT1", SWIG_From_int(static_cast<int >(wxDateTime::GMT1))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT2", SWIG_From_int(static_cast<int >(wxDateTime::GMT2))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT3", SWIG_From_int(static_cast<int >(wxDateTime::GMT3))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT4", SWIG_From_int(static_cast<int >(wxDateTime::GMT4))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT5", SWIG_From_int(static_cast<int >(wxDateTime::GMT5))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT6", SWIG_From_int(static_cast<int >(wxDateTime::GMT6))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT7", SWIG_From_int(static_cast<int >(wxDateTime::GMT7))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT8", SWIG_From_int(static_cast<int >(wxDateTime::GMT8))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT9", SWIG_From_int(static_cast<int >(wxDateTime::GMT9))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT10", SWIG_From_int(static_cast<int >(wxDateTime::GMT10))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT11", SWIG_From_int(static_cast<int >(wxDateTime::GMT11))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_GMT12", SWIG_From_int(static_cast<int >(wxDateTime::GMT12))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_WET", SWIG_From_int(static_cast<int >(wxDateTime::WET))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_WEST", SWIG_From_int(static_cast<int >(wxDateTime::WEST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_CET", SWIG_From_int(static_cast<int >(wxDateTime::CET))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_CEST", SWIG_From_int(static_cast<int >(wxDateTime::CEST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_EET", SWIG_From_int(static_cast<int >(wxDateTime::EET))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_EEST", SWIG_From_int(static_cast<int >(wxDateTime::EEST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_MSK", SWIG_From_int(static_cast<int >(wxDateTime::MSK))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_MSD", SWIG_From_int(static_cast<int >(wxDateTime::MSD))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_AST", SWIG_From_int(static_cast<int >(wxDateTime::AST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_ADT", SWIG_From_int(static_cast<int >(wxDateTime::ADT))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_EST", SWIG_From_int(static_cast<int >(wxDateTime::EST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_EDT", SWIG_From_int(static_cast<int >(wxDateTime::EDT))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_CST", SWIG_From_int(static_cast<int >(wxDateTime::CST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_CDT", SWIG_From_int(static_cast<int >(wxDateTime::CDT))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_MST", SWIG_From_int(static_cast<int >(wxDateTime::MST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_MDT", SWIG_From_int(static_cast<int >(wxDateTime::MDT))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_PST", SWIG_From_int(static_cast<int >(wxDateTime::PST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_PDT", SWIG_From_int(static_cast<int >(wxDateTime::PDT))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_HST", SWIG_From_int(static_cast<int >(wxDateTime::HST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_AKST", SWIG_From_int(static_cast<int >(wxDateTime::AKST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_AKDT", SWIG_From_int(static_cast<int >(wxDateTime::AKDT))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_A_WST", SWIG_From_int(static_cast<int >(wxDateTime::A_WST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_A_CST", SWIG_From_int(static_cast<int >(wxDateTime::A_CST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_A_EST", SWIG_From_int(static_cast<int >(wxDateTime::A_EST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_A_ESST", SWIG_From_int(static_cast<int >(wxDateTime::A_ESST))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_UTC", SWIG_From_int(static_cast<int >(wxDateTime::UTC))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gregorian", SWIG_From_int(static_cast<int >(wxDateTime::Gregorian))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Julian", SWIG_From_int(static_cast<int >(wxDateTime::Julian))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Unknown", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Unknown))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Standard", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Standard))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Alaska", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Alaska))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Albania", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Albania))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Austria", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Austria))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Austria_Brixen", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Austria_Brixen))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Austria_Salzburg", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Austria_Salzburg))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Austria_Tyrol", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Austria_Tyrol))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Austria_Carinthia", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Austria_Carinthia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Austria_Styria", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Austria_Styria))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Belgium", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Belgium))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Bulgaria", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Bulgaria))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Bulgaria_1", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Bulgaria_1))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Bulgaria_2", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Bulgaria_2))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Bulgaria_3", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Bulgaria_3))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Canada", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Canada))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_China", SWIG_From_int(static_cast<int >(wxDateTime::Gr_China))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_China_1", SWIG_From_int(static_cast<int >(wxDateTime::Gr_China_1))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_China_2", SWIG_From_int(static_cast<int >(wxDateTime::Gr_China_2))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Czechoslovakia", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Czechoslovakia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Denmark", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Denmark))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Egypt", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Egypt))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Estonia", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Estonia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Finland", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Finland))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_France", SWIG_From_int(static_cast<int >(wxDateTime::Gr_France))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_France_Alsace", SWIG_From_int(static_cast<int >(wxDateTime::Gr_France_Alsace))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_France_Lorraine", SWIG_From_int(static_cast<int >(wxDateTime::Gr_France_Lorraine))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_France_Strasbourg", SWIG_From_int(static_cast<int >(wxDateTime::Gr_France_Strasbourg))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Germany", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Germany))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Germany_Catholic", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Germany_Catholic))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Germany_Prussia", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Germany_Prussia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Germany_Protestant", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Germany_Protestant))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_GreatBritain", SWIG_From_int(static_cast<int >(wxDateTime::Gr_GreatBritain))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Greece", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Greece))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Hungary", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Hungary))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Ireland", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Ireland))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Italy", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Italy))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Japan", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Japan))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Japan_1", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Japan_1))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Japan_2", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Japan_2))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Japan_3", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Japan_3))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Latvia", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Latvia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Lithuania", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Lithuania))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Luxemburg", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Luxemburg))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Netherlands", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Netherlands))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Netherlands_Groningen", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Netherlands_Groningen))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Netherlands_Gelderland", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Netherlands_Gelderland))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Netherlands_Utrecht", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Netherlands_Utrecht))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Netherlands_Friesland", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Netherlands_Friesland))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Norway", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Norway))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Poland", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Poland))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Portugal", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Portugal))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Romania", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Romania))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Russia", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Russia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Scotland", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Scotland))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Spain", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Spain))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Sweden", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Sweden))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Switzerland", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Switzerland))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Switzerland_Catholic", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Switzerland_Catholic))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Switzerland_Protestant", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Switzerland_Protestant))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Turkey", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Turkey))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_USA", SWIG_From_int(static_cast<int >(wxDateTime::Gr_USA))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Wales", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Wales))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Gr_Yugoslavia", SWIG_From_int(static_cast<int >(wxDateTime::Gr_Yugoslavia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Country_Unknown", SWIG_From_int(static_cast<int >(wxDateTime::Country_Unknown))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Country_Default", SWIG_From_int(static_cast<int >(wxDateTime::Country_Default))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Country_WesternEurope_Start", SWIG_From_int(static_cast<int >(wxDateTime::Country_WesternEurope_Start))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Country_EEC", SWIG_From_int(static_cast<int >(wxDateTime::Country_EEC))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_France", SWIG_From_int(static_cast<int >(wxDateTime::France))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Germany", SWIG_From_int(static_cast<int >(wxDateTime::Germany))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_UK", SWIG_From_int(static_cast<int >(wxDateTime::UK))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Country_WesternEurope_End", SWIG_From_int(static_cast<int >(wxDateTime::Country_WesternEurope_End))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Russia", SWIG_From_int(static_cast<int >(wxDateTime::Russia))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_USA", SWIG_From_int(static_cast<int >(wxDateTime::USA))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Jan", SWIG_From_int(static_cast<int >(wxDateTime::Jan))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Feb", SWIG_From_int(static_cast<int >(wxDateTime::Feb))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Mar", SWIG_From_int(static_cast<int >(wxDateTime::Mar))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Apr", SWIG_From_int(static_cast<int >(wxDateTime::Apr))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_May", SWIG_From_int(static_cast<int >(wxDateTime::May))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Jun", SWIG_From_int(static_cast<int >(wxDateTime::Jun))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Jul", SWIG_From_int(static_cast<int >(wxDateTime::Jul))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Aug", SWIG_From_int(static_cast<int >(wxDateTime::Aug))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Sep", SWIG_From_int(static_cast<int >(wxDateTime::Sep))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Oct", SWIG_From_int(static_cast<int >(wxDateTime::Oct))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Nov", SWIG_From_int(static_cast<int >(wxDateTime::Nov))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Dec", SWIG_From_int(static_cast<int >(wxDateTime::Dec))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Inv_Month", SWIG_From_int(static_cast<int >(wxDateTime::Inv_Month))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Sun", SWIG_From_int(static_cast<int >(wxDateTime::Sun))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Mon", SWIG_From_int(static_cast<int >(wxDateTime::Mon))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Tue", SWIG_From_int(static_cast<int >(wxDateTime::Tue))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Wed", SWIG_From_int(static_cast<int >(wxDateTime::Wed))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Thu", SWIG_From_int(static_cast<int >(wxDateTime::Thu))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Fri", SWIG_From_int(static_cast<int >(wxDateTime::Fri))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Sat", SWIG_From_int(static_cast<int >(wxDateTime::Sat))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Inv_WeekDay", SWIG_From_int(static_cast<int >(wxDateTime::Inv_WeekDay))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Inv_Year", SWIG_From_int(static_cast<int >(wxDateTime::Inv_Year))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Name_Full", SWIG_From_int(static_cast<int >(wxDateTime::Name_Full))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Name_Abbr", SWIG_From_int(static_cast<int >(wxDateTime::Name_Abbr))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Default_First", SWIG_From_int(static_cast<int >(wxDateTime::Default_First))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Monday_First", SWIG_From_int(static_cast<int >(wxDateTime::Monday_First))); 
    }
    {
        PyDict_SetItemString(d,"DateTime_Sunday_First", SWIG_From_int(static_cast<int >(wxDateTime::Sunday_First))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"DefaultDateTime",_wrap_DefaultDateTime_get, _wrap_DefaultDateTime_set);
    {
        PyDict_SetItemString(d,"DF_INVALID", SWIG_From_int(static_cast<int >(wxDF_INVALID))); 
    }
    {
        PyDict_SetItemString(d,"DF_TEXT", SWIG_From_int(static_cast<int >(wxDF_TEXT))); 
    }
    {
        PyDict_SetItemString(d,"DF_BITMAP", SWIG_From_int(static_cast<int >(wxDF_BITMAP))); 
    }
    {
        PyDict_SetItemString(d,"DF_METAFILE", SWIG_From_int(static_cast<int >(wxDF_METAFILE))); 
    }
    {
        PyDict_SetItemString(d,"DF_SYLK", SWIG_From_int(static_cast<int >(wxDF_SYLK))); 
    }
    {
        PyDict_SetItemString(d,"DF_DIF", SWIG_From_int(static_cast<int >(wxDF_DIF))); 
    }
    {
        PyDict_SetItemString(d,"DF_TIFF", SWIG_From_int(static_cast<int >(wxDF_TIFF))); 
    }
    {
        PyDict_SetItemString(d,"DF_OEMTEXT", SWIG_From_int(static_cast<int >(wxDF_OEMTEXT))); 
    }
    {
        PyDict_SetItemString(d,"DF_DIB", SWIG_From_int(static_cast<int >(wxDF_DIB))); 
    }
    {
        PyDict_SetItemString(d,"DF_PALETTE", SWIG_From_int(static_cast<int >(wxDF_PALETTE))); 
    }
    {
        PyDict_SetItemString(d,"DF_PENDATA", SWIG_From_int(static_cast<int >(wxDF_PENDATA))); 
    }
    {
        PyDict_SetItemString(d,"DF_RIFF", SWIG_From_int(static_cast<int >(wxDF_RIFF))); 
    }
    {
        PyDict_SetItemString(d,"DF_WAVE", SWIG_From_int(static_cast<int >(wxDF_WAVE))); 
    }
    {
        PyDict_SetItemString(d,"DF_UNICODETEXT", SWIG_From_int(static_cast<int >(wxDF_UNICODETEXT))); 
    }
    {
        PyDict_SetItemString(d,"DF_ENHMETAFILE", SWIG_From_int(static_cast<int >(wxDF_ENHMETAFILE))); 
    }
    {
        PyDict_SetItemString(d,"DF_FILENAME", SWIG_From_int(static_cast<int >(wxDF_FILENAME))); 
    }
    {
        PyDict_SetItemString(d,"DF_LOCALE", SWIG_From_int(static_cast<int >(wxDF_LOCALE))); 
    }
    {
        PyDict_SetItemString(d,"DF_PRIVATE", SWIG_From_int(static_cast<int >(wxDF_PRIVATE))); 
    }
    {
        PyDict_SetItemString(d,"DF_HTML", SWIG_From_int(static_cast<int >(wxDF_HTML))); 
    }
    {
        PyDict_SetItemString(d,"DF_MAX", SWIG_From_int(static_cast<int >(wxDF_MAX))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"FormatInvalid",_wrap_FormatInvalid_get, _wrap_FormatInvalid_set);
    {
        PyDict_SetItemString(d,"DataObject_Get", SWIG_From_int(static_cast<int >(wxDataObject::Get))); 
    }
    {
        PyDict_SetItemString(d,"DataObject_Set", SWIG_From_int(static_cast<int >(wxDataObject::Set))); 
    }
    {
        PyDict_SetItemString(d,"DataObject_Both", SWIG_From_int(static_cast<int >(wxDataObject::Both))); 
    }
    {
        PyDict_SetItemString(d,"Drag_CopyOnly", SWIG_From_int(static_cast<int >(wxDrag_CopyOnly))); 
    }
    {
        PyDict_SetItemString(d,"Drag_AllowMove", SWIG_From_int(static_cast<int >(wxDrag_AllowMove))); 
    }
    {
        PyDict_SetItemString(d,"Drag_DefaultMove", SWIG_From_int(static_cast<int >(wxDrag_DefaultMove))); 
    }
    {
        PyDict_SetItemString(d,"DragError", SWIG_From_int(static_cast<int >(wxDragError))); 
    }
    {
        PyDict_SetItemString(d,"DragNone", SWIG_From_int(static_cast<int >(wxDragNone))); 
    }
    {
        PyDict_SetItemString(d,"DragCopy", SWIG_From_int(static_cast<int >(wxDragCopy))); 
    }
    {
        PyDict_SetItemString(d,"DragMove", SWIG_From_int(static_cast<int >(wxDragMove))); 
    }
    {
        PyDict_SetItemString(d,"DragLink", SWIG_From_int(static_cast<int >(wxDragLink))); 
    }
    {
        PyDict_SetItemString(d,"DragCancel", SWIG_From_int(static_cast<int >(wxDragCancel))); 
    }
    
    wxPyPtrTypeMap_Add("wxDropSource",     "wxPyDropSource");
    wxPyPtrTypeMap_Add("wxDropTarget",     "wxPyDropTarget");
    wxPyPtrTypeMap_Add("wxTextDropTarget", "wxPyTextDropTarget");
    wxPyPtrTypeMap_Add("wxFileDropTarget", "wxPyFileDropTarget");
    
    SWIG_addvarlink(SWIG_globals,(char*)"DefaultVideoMode",_wrap_DefaultVideoMode_get, _wrap_DefaultVideoMode_set);
}

