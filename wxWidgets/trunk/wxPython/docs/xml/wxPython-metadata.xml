<?xml version='1.0'?>
<wxPython-metadata>
<module name="core">
  <pythoncode>
#// Give a reference to the dictionary of this module to the C++ extension
#// code.
_core._wxPySetDictionary(vars())

#// A little trick to make 'wx' be a reference to this module so wx.Names can
#// be used here.
import sys as _sys
wx = _sys.modules[__name__]
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Object" oldname="wxObject" module="core">
    <docstring>The base class for most wx objects, although in wxPython not
much functionality is needed nor exposed.</docstring>
    <method name="GetClassName" overloaded="no">
      <autodoc>GetClassName() -&gt; String</autodoc>
      <docstring>Returns the class name of the C++ object using wxRTTI.</docstring>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
      <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Size" oldname="wxSize" module="core">
    <docstring>wx.Size is a useful data structure used to represent the size of something.
It simply contians integer width and height proprtites.  In most places in
wxPython where a wx.Size is expected a (width,height) tuple can be used
instead.</docstring>
    <property name="width" type="int" readonly="no"/>
    <property name="height" type="int" readonly="no"/>
    <pythoncode> x = width; y = height </pythoncode>
    <constructor name="Size" overloaded="no">
      <autodoc>__init__(int w=0, int h=0) -&gt; Size</autodoc>
      <docstring>Creates a size object.</docstring>
      <paramlist>
        <param name="w" type="int" default="0"/>
        <param name="h" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxSize">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(Size sz) -&gt; bool</autodoc>
      <docstring>Test for equality of wx.Size objects.</docstring>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(Size sz) -&gt; bool</autodoc>
      <docstring>Test for inequality.</docstring>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="__add__" overloaded="no">
      <autodoc>__add__(Size sz) -&gt; Size</autodoc>
      <docstring>Add sz's proprties to this and return the result.</docstring>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="no">
      <autodoc>__sub__(Size sz) -&gt; Size</autodoc>
      <docstring>Subtract sz's properties from this and return the result.</docstring>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="IncTo" overloaded="no">
      <autodoc>IncTo(Size sz)</autodoc>
      <docstring>Increments this object so that both of its dimensions are not less
than the corresponding dimensions of the size.</docstring>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="DecTo" overloaded="no">
      <autodoc>DecTo(Size sz)</autodoc>
      <docstring>Decrements this object so that both of its dimensions are not greater
than the corresponding dimensions of the size.</docstring>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(int w, int h)</autodoc>
      <docstring>Set both width and height.</docstring>
      <paramlist>
        <param name="w" type="int" default=""/>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(int w)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetHeight" overloaded="no">
      <autodoc>SetHeight(int h)</autodoc>
      <paramlist>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; int</autodoc>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; (width,height)</autodoc>
      <docstring>Returns the width and height properties as a tuple.</docstring>
    </method>
    <pythoncode>
    asTuple = Get
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wx.Size'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: self.width = val
        elif index == 1: self.height = val
        else: raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0)
    __safe_for_unpickling__ = True
    def __reduce__(self):                return (wx.Size, self.Get())
    </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="RealPoint" oldname="wxRealPoint" module="core">
    <docstring>A data structure for representing a point or position with floating point x
and y properties.  In wxPython most places that expect a wx.RealPoint can also
accept a (x,y) tuple.</docstring>
    <property name="x" type="double" readonly="no"/>
    <property name="y" type="double" readonly="no"/>
    <constructor name="RealPoint" overloaded="no">
      <autodoc>__init__(double x=0.0, double y=0.0) -&gt; RealPoint</autodoc>
      <docstring>Create a wx.RealPoint object</docstring>
      <paramlist>
        <param name="x" type="double" default="0.0"/>
        <param name="y" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxRealPoint">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(RealPoint pt) -&gt; bool</autodoc>
      <docstring>Test for equality of wx.RealPoint objects.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxRealPoint" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(RealPoint pt) -&gt; bool</autodoc>
      <docstring>Test for inequality of wx.RealPoint objects.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxRealPoint" default=""/>
      </paramlist>
    </method>
    <method name="__add__" overloaded="no">
      <autodoc>__add__(RealPoint pt) -&gt; RealPoint</autodoc>
      <docstring>Add pt's proprties to this and return the result.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxRealPoint" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="no">
      <autodoc>__sub__(RealPoint pt) -&gt; RealPoint</autodoc>
      <docstring>Subtract pt's proprties from this and return the result</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxRealPoint" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(double x, double y)</autodoc>
      <docstring>Set both the x and y properties</docstring>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; (x,y)</autodoc>
      <docstring>Return the x and y properties as a tuple. </docstring>
    </method>
    <pythoncode>
    asTuple = Get
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wx.RealPoint'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: self.x = val
        elif index == 1: self.y = val
        else: raise IndexError
    def __nonzero__(self):               return self.Get() != (0.0, 0.0)
    __safe_for_unpickling__ = True
    def __reduce__(self):                return (wx.RealPoint, self.Get())
    </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Point" oldname="wxPoint" module="core">
    <docstring>A data structure for representing a point or position with integer x and y
properties.  Most places in wxPython that expect a wx.Point can also accept a
(x,y) tuple.</docstring>
    <property name="x" type="int" readonly="no"/>
    <property name="y" type="int" readonly="no"/>
    <constructor name="Point" overloaded="no">
      <autodoc>__init__(int x=0, int y=0) -&gt; Point</autodoc>
      <docstring>Create a wx.Point object</docstring>
      <paramlist>
        <param name="x" type="int" default="0"/>
        <param name="y" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxPoint">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(Point pt) -&gt; bool</autodoc>
      <docstring>Test for equality of wx.Point objects.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(Point pt) -&gt; bool</autodoc>
      <docstring>Test for inequality of wx.Point objects.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="__add__" overloaded="no">
      <autodoc>__add__(Point pt) -&gt; Point</autodoc>
      <docstring>Add pt's proprties to this and return the result.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="no">
      <autodoc>__sub__(Point pt) -&gt; Point</autodoc>
      <docstring>Subtract pt's proprties from this and return the result</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="__iadd__" overloaded="no">
      <autodoc>__iadd__(Point pt) -&gt; Point</autodoc>
      <docstring>Add pt to this object.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="__isub__" overloaded="no">
      <autodoc>__isub__(Point pt) -&gt; Point</autodoc>
      <docstring>Subtract pt from this object.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(long x, long y)</autodoc>
      <docstring>Set both the x and y properties</docstring>
      <paramlist>
        <param name="x" type="long" default=""/>
        <param name="y" type="long" default=""/>
      </paramlist>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; (x,y)</autodoc>
      <docstring>Return the x and y properties as a tuple. </docstring>
    </method>
    <pythoncode>
    asTuple = Get
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wx.Point'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: self.x = val
        elif index == 1: self.y = val
        else: raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0)
    __safe_for_unpickling__ = True
    def __reduce__(self):                return (wx.Point, self.Get())
    </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Rect" oldname="wxRect" module="core">
    <docstring>A class for representing and manipulating rectangles.  It has x, y, width and
height properties.  In wxPython most palces that expect a wx.Rect can also
accept a (x,y,width,height) tuple.</docstring>
    <constructor name="Rect" overloaded="no">
      <autodoc>__init__(int x=0, int y=0, int width=0, int height=0) -&gt; Rect</autodoc>
      <docstring>Create a new Rect object.</docstring>
      <paramlist>
        <param name="x" type="int" default="0"/>
        <param name="y" type="int" default="0"/>
        <param name="width" type="int" default="0"/>
        <param name="height" type="int" default="0"/>
      </paramlist>
    </constructor>
    <constructor name="RectPP" overloaded="no">
      <autodoc>RectPP(Point topLeft, Point bottomRight) -&gt; Rect</autodoc>
      <docstring>Create a new Rect object from Points representing two corners.</docstring>
      <paramlist>
        <param name="topLeft" type="r.q(const).wxPoint" default=""/>
        <param name="bottomRight" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </constructor>
    <constructor name="RectPS" overloaded="no">
      <autodoc>RectPS(Point pos, Size size) -&gt; Rect</autodoc>
      <docstring>Create a new Rect from a position and size.</docstring>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxRect">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; int</autodoc>
    </method>
    <method name="SetX" overloaded="no">
      <autodoc>SetX(int x)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; int</autodoc>
    </method>
    <method name="SetY" overloaded="no">
      <autodoc>SetY(int y)</autodoc>
      <paramlist>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(int w)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; int</autodoc>
    </method>
    <method name="SetHeight" overloaded="no">
      <autodoc>SetHeight(int h)</autodoc>
      <paramlist>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(Point p)</autodoc>
      <paramlist>
        <param name="p" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(Size s)</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="GetTopLeft" overloaded="no">
      <autodoc>GetTopLeft() -&gt; Point</autodoc>
    </method>
    <method name="SetTopLeft" overloaded="no">
      <autodoc>SetTopLeft(Point p)</autodoc>
      <paramlist>
        <param name="p" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetBottomRight" overloaded="no">
      <autodoc>GetBottomRight() -&gt; Point</autodoc>
    </method>
    <method name="SetBottomRight" overloaded="no">
      <autodoc>SetBottomRight(Point p)</autodoc>
      <paramlist>
        <param name="p" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetLeft" overloaded="no">
      <autodoc>GetLeft() -&gt; int</autodoc>
    </method>
    <method name="GetTop" overloaded="no">
      <autodoc>GetTop() -&gt; int</autodoc>
    </method>
    <method name="GetBottom" overloaded="no">
      <autodoc>GetBottom() -&gt; int</autodoc>
    </method>
    <method name="GetRight" overloaded="no">
      <autodoc>GetRight() -&gt; int</autodoc>
    </method>
    <method name="SetLeft" overloaded="no">
      <autodoc>SetLeft(int left)</autodoc>
      <paramlist>
        <param name="left" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRight" overloaded="no">
      <autodoc>SetRight(int right)</autodoc>
      <paramlist>
        <param name="right" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetTop" overloaded="no">
      <autodoc>SetTop(int top)</autodoc>
      <paramlist>
        <param name="top" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetBottom" overloaded="no">
      <autodoc>SetBottom(int bottom)</autodoc>
      <paramlist>
        <param name="bottom" type="int" default=""/>
      </paramlist>
    </method>
    <pythoncode>
        position = property(GetPosition, SetPosition)
        size = property(GetSize, SetSize)
        left = property(GetLeft, SetLeft)
        right = property(GetRight, SetRight)
        top = property(GetTop, SetTop)
        bottom = property(GetBottom, SetBottom)
    </pythoncode>
    <method name="Inflate" overloaded="no">
      <autodoc>Inflate(int dx, int dy) -&gt; Rect</autodoc>
      <docstring>Increase the rectangle size by dx in x direction and dy in y direction. Both
(or one of) parameters may be negative to decrease the rectangle size.</docstring>
      <paramlist>
        <param name="dx" type="int" default=""/>
        <param name="dy" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Deflate" overloaded="no">
      <autodoc>Deflate(int dx, int dy) -&gt; Rect</autodoc>
      <docstring>Decrease the rectangle size by dx in x direction and dy in y direction. Both
(or one of) parameters may be negative to increase the rectngle size. This
method is the opposite of Inflate.</docstring>
      <paramlist>
        <param name="dx" type="int" default=""/>
        <param name="dy" type="int" default=""/>
      </paramlist>
    </method>
    <method name="OffsetXY" overloaded="no">
      <autodoc>OffsetXY(int dx, int dy)</autodoc>
      <docstring>Moves the rectangle by the specified offset. If dx is positive, the rectangle
is moved to the right, if dy is positive, it is moved to the bottom, otherwise
it is moved to the left or top respectively.</docstring>
      <paramlist>
        <param name="dx" type="int" default=""/>
        <param name="dy" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Offset" overloaded="no">
      <autodoc>Offset(Point pt)</autodoc>
      <docstring>Same as OffsetXY but uses dx,dy from Point</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="Intersect" overloaded="no">
      <autodoc>Intersect(Rect rect) -&gt; Rect</autodoc>
      <docstring>Return the intersectsion of this rectangle and rect.</docstring>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="__add__" overloaded="no">
      <autodoc>__add__(Rect rect) -&gt; Rect</autodoc>
      <docstring>Add the properties of rect to this rectangle and return the result.</docstring>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="__iadd__" overloaded="no">
      <autodoc>__iadd__(Rect rect) -&gt; Rect</autodoc>
      <docstring>Add the properties of rect to this rectangle, updating this rectangle.</docstring>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(Rect rect) -&gt; bool</autodoc>
      <docstring>Test for equality.</docstring>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(Rect rect) -&gt; bool</autodoc>
      <docstring>Test for inequality.</docstring>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="InsideXY" overloaded="no">
      <autodoc>InsideXY(int x, int y) -&gt; bool</autodoc>
      <docstring>Return True if the point is (not strcitly) inside the rect.</docstring>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Inside" overloaded="no">
      <autodoc>Inside(Point pt) -&gt; bool</autodoc>
      <docstring>Return True if the point is (not strcitly) inside the rect.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="Intersects" overloaded="no">
      <autodoc>Intersects(Rect rect) -&gt; bool</autodoc>
      <docstring>Returns True if the rectangles have a non empty intersection.</docstring>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <property name="x" type="int" readonly="no"/>
    <property name="y" type="int" readonly="no"/>
    <property name="width" type="int" readonly="no"/>
    <property name="height" type="int" readonly="no"/>
    <method name="Set" overloaded="no">
      <autodoc>Set(int x=0, int y=0, int width=0, int height=0)</autodoc>
      <docstring>Set all rectangle properties.</docstring>
      <paramlist>
        <param name="x" type="int" default="0"/>
        <param name="y" type="int" default="0"/>
        <param name="width" type="int" default="0"/>
        <param name="height" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; (x,y,width,height)</autodoc>
      <docstring>Return the rectangle properties as a tuple.</docstring>
    </method>
    <pythoncode>
    asTuple = Get
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wx.Rect'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: self.x = val
        elif index == 1: self.y = val
        elif index == 2: self.width = val
        elif index == 3: self.height = val
        else: raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0,0,0)
    __safe_for_unpickling__ = True
    def __reduce__(self):                return (wx.Rect, self.Get())
    </pythoncode>
  </class>
  <function oldname="wxIntersectRect" name="IntersectRect" overloaded="no">
    <autodoc>IntersectRect(Rect r1, Rect r2) -&gt; Rect</autodoc>
    <docstring>Calculate and return the intersection of r1 and r2.</docstring>
    <paramlist>
      <param name="r1" type="p.wxRect" default=""/>
      <param name="r2" type="p.wxRect" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Point2D" oldname="wxPoint2D" module="core">
    <docstring>wx.Point2Ds represent a point or a vector in a 2d coordinate system with floating point values.</docstring>
    <constructor name="Point2D" overloaded="no">
      <autodoc>__init__(double x=0.0, double y=0.0) -&gt; Point2D</autodoc>
      <docstring>Create a w.Point2D object.</docstring>
      <paramlist>
        <param name="x" type="double" default="0.0"/>
        <param name="y" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <constructor name="Point2DCopy" overloaded="no">
      <autodoc>Point2DCopy(Point2D pt) -&gt; Point2D</autodoc>
      <docstring>Create a w.Point2D object.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </constructor>
    <constructor name="Point2DFromPoint" overloaded="no">
      <autodoc>Point2DFromPoint(Point pt) -&gt; Point2D</autodoc>
      <docstring>Create a w.Point2D object.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </constructor>
    <method name="GetFloor" overloaded="no">
      <autodoc>GetFloor() -&gt; (x,y)</autodoc>
      <docstring>Convert to integer</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetRounded" overloaded="no">
      <autodoc>GetRounded() -&gt; (x,y)</autodoc>
      <docstring>Convert to integer</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetVectorLength" overloaded="no">
      <autodoc>GetVectorLength() -&gt; double</autodoc>
    </method>
    <method name="GetVectorAngle" overloaded="no">
      <autodoc>GetVectorAngle() -&gt; double</autodoc>
    </method>
    <method name="SetVectorLength" overloaded="no">
      <autodoc>SetVectorLength(double length)</autodoc>
      <paramlist>
        <param name="length" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetVectorAngle" overloaded="no">
      <autodoc>SetVectorAngle(double degrees)</autodoc>
      <paramlist>
        <param name="degrees" type="double" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    def SetPolarCoordinates(self, angle, length):
        self.SetVectorLength(length)
        self.SetVectorAngle(angle)
    def Normalize(self):
        self.SetVectorLength(1.0)
    </pythoncode>
    <method name="GetDistance" overloaded="no">
      <autodoc>GetDistance(Point2D pt) -&gt; double</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="GetDistanceSquare" overloaded="no">
      <autodoc>GetDistanceSquare(Point2D pt) -&gt; double</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="GetDotProduct" overloaded="no">
      <autodoc>GetDotProduct(Point2D vec) -&gt; double</autodoc>
      <paramlist>
        <param name="vec" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="GetCrossProduct" overloaded="no">
      <autodoc>GetCrossProduct(Point2D vec) -&gt; double</autodoc>
      <paramlist>
        <param name="vec" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="__neg__" overloaded="no">
      <autodoc>__neg__() -&gt; Point2D</autodoc>
      <docstring>the reflection of this point</docstring>
    </method>
    <method name="__iadd__" overloaded="no">
      <autodoc>__iadd__(Point2D pt) -&gt; Point2D</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="__isub__" overloaded="no">
      <autodoc>__isub__(Point2D pt) -&gt; Point2D</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="__imul__" overloaded="no">
      <autodoc>__imul__(Point2D pt) -&gt; Point2D</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="__idiv__" overloaded="no">
      <autodoc>__idiv__(Point2D pt) -&gt; Point2D</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(Point2D pt) -&gt; bool</autodoc>
      <docstring>Test for equality</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(Point2D pt) -&gt; bool</autodoc>
      <docstring>Test for inequality</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint2D" default=""/>
      </paramlist>
    </method>
    <property name="x" type="double" readonly="no"/>
    <property name="y" type="double" readonly="no"/>
    <method name="Set" overloaded="no">
      <autodoc>Set(double x=0, double y=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default="0"/>
        <param name="y" type="double" default="0"/>
      </paramlist>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; (x,y)</autodoc>
      <docstring>Return x and y properties as a tuple.</docstring>
    </method>
    <pythoncode>
    asTuple = Get
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wx.Point2D'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: self.x = val
        elif index == 1: self.y = val
        else: raise IndexError
    def __nonzero__(self):               return self.Get() != (0.0, 0.0)
    __safe_for_unpickling__ = True
    def __reduce__(self):                return (wx.Point2D, self.Get())
    </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="InputStream" oldname="wxPyInputStream" module="core">
    <constructor name="wxPyInputStream" overloaded="no">
      <autodoc>__init__(PyObject p) -&gt; InputStream</autodoc>
      <paramlist>
        <param name="p" type="p.PyObject" default=""/>
      </paramlist>
    </constructor>
    <method name="close" overloaded="no">
      <autodoc>close()</autodoc>
    </method>
    <method name="flush" overloaded="no">
      <autodoc>flush()</autodoc>
    </method>
    <method name="eof" overloaded="no">
      <autodoc>eof() -&gt; bool</autodoc>
    </method>
    <method name="read" overloaded="no">
      <autodoc>read(int size=-1) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="size" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="readline" overloaded="no">
      <autodoc>readline(int size=-1) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="size" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="readlines" overloaded="no">
      <autodoc>readlines(int sizehint=-1) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="sizehint" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="seek" overloaded="no">
      <autodoc>seek(int offset, int whence=0)</autodoc>
      <paramlist>
        <param name="offset" type="int" default=""/>
        <param name="whence" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="tell" overloaded="no">
      <autodoc>tell() -&gt; int</autodoc>
    </method>
    <method name="Peek" overloaded="no">
      <autodoc>Peek() -&gt; char</autodoc>
    </method>
    <method name="GetC" overloaded="no">
      <autodoc>GetC() -&gt; char</autodoc>
    </method>
    <method name="LastRead" overloaded="no">
      <autodoc>LastRead() -&gt; size_t</autodoc>
    </method>
    <method name="CanRead" overloaded="no">
      <autodoc>CanRead() -&gt; bool</autodoc>
    </method>
    <method name="Eof" overloaded="no">
      <autodoc>Eof() -&gt; bool</autodoc>
    </method>
    <method name="Ungetch" overloaded="no">
      <autodoc>Ungetch(char c) -&gt; bool</autodoc>
      <paramlist>
        <param name="c" type="char" default=""/>
      </paramlist>
    </method>
    <method name="SeekI" overloaded="no">
      <autodoc>SeekI(long pos, int mode=FromStart) -&gt; long</autodoc>
      <paramlist>
        <param name="pos" type="long" default=""/>
        <param name="mode" type="wxSeekMode" default="wxFromStart"/>
      </paramlist>
    </method>
    <method name="TellI" overloaded="no">
      <autodoc>TellI() -&gt; long</autodoc>
    </method>
  </class>
  <class name="OutputStream" oldname="wxOutputStream" module="core">
    <method name="write" overloaded="no">
      <autodoc>write(PyObject obj)</autodoc>
      <paramlist>
        <param name="obj" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="FSFile" oldname="wxFSFile" module="core">
    <baseclass name="wxObject"/>
    <constructor name="FSFile" overloaded="no">
      <autodoc>__init__(InputStream stream, String loc, String mimetype, String anchor, 
    DateTime modif) -&gt; FSFile</autodoc>
      <paramlist>
        <param name="stream" type="p.wxInputStream" default=""/>
        <param name="loc" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default=""/>
        <param name="anchor" type="r.q(const).wxString" default=""/>
        <param name="modif" type="wxDateTime" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxFSFile">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetStream" overloaded="no">
      <autodoc>GetStream() -&gt; InputStream</autodoc>
    </method>
    <method name="GetMimeType" overloaded="no">
      <autodoc>GetMimeType() -&gt; String</autodoc>
    </method>
    <method name="GetLocation" overloaded="no">
      <autodoc>GetLocation() -&gt; String</autodoc>
    </method>
    <method name="GetAnchor" overloaded="no">
      <autodoc>GetAnchor() -&gt; String</autodoc>
    </method>
    <method name="GetModificationTime" overloaded="no">
      <autodoc>GetModificationTime() -&gt; DateTime</autodoc>
    </method>
  </class>
  <class name="CPPFileSystemHandler" oldname="wxFileSystemHandler" module="core"/>
  <class name="FileSystemHandler" oldname="wxPyFileSystemHandler" module="core">
    <baseclass name="wxFileSystemHandler"/>
    <constructor name="wxPyFileSystemHandler" overloaded="no">
      <autodoc>__init__() -&gt; FileSystemHandler</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="CanOpen" overloaded="no">
      <autodoc>CanOpen(String location) -&gt; bool</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="OpenFile" overloaded="no">
      <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
      <paramlist>
        <param name="fs" type="r.wxFileSystem" default=""/>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindFirst" overloaded="no">
      <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
      <paramlist>
        <param name="spec" type="r.q(const).wxString" default=""/>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="FindNext" overloaded="no">
      <autodoc>FindNext() -&gt; String</autodoc>
    </method>
    <method name="GetProtocol" overloaded="no">
      <autodoc>GetProtocol(String location) -&gt; String</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetLeftLocation" overloaded="no">
      <autodoc>GetLeftLocation(String location) -&gt; String</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetAnchor" overloaded="no">
      <autodoc>GetAnchor(String location) -&gt; String</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetRightLocation" overloaded="no">
      <autodoc>GetRightLocation(String location) -&gt; String</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetMimeTypeFromExt" overloaded="no">
      <autodoc>GetMimeTypeFromExt(String location) -&gt; String</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="FileSystem" oldname="wxFileSystem" module="core">
    <baseclass name="wxObject"/>
    <constructor name="FileSystem" overloaded="no">
      <autodoc>__init__() -&gt; FileSystem</autodoc>
    </constructor>
    <destructor name="~wxFileSystem">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="ChangePathTo" overloaded="no">
      <autodoc>ChangePathTo(String location, bool is_dir=False)</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
        <param name="is_dir" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="GetPath" overloaded="no">
      <autodoc>GetPath() -&gt; String</autodoc>
    </method>
    <method name="OpenFile" overloaded="no">
      <autodoc>OpenFile(String location) -&gt; FSFile</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindFirst" overloaded="no">
      <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
      <paramlist>
        <param name="spec" type="r.q(const).wxString" default=""/>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="FindNext" overloaded="no">
      <autodoc>FindNext() -&gt; String</autodoc>
    </method>
    <staticmethod name="AddHandler" overloaded="no">
      <autodoc>AddHandler(CPPFileSystemHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxFileSystemHandler" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="CleanUpHandlers" overloaded="no">
      <autodoc>CleanUpHandlers()</autodoc>
    </staticmethod>
    <staticmethod name="FileNameToURL" overloaded="no">
      <autodoc>FileNameToURL(String filename) -&gt; String</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <function oldname="wxFileSystem_URLToFileName" name="FileSystem_URLToFileName" overloaded="no">
    <autodoc>FileSystem_URLToFileName(String url) -&gt; String</autodoc>
    <paramlist>
      <param name="url" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <class name="InternetFSHandler" oldname="wxInternetFSHandler" module="core">
    <baseclass name="wxFileSystemHandler"/>
    <constructor name="InternetFSHandler" overloaded="no">
      <autodoc>__init__() -&gt; InternetFSHandler</autodoc>
    </constructor>
    <method name="CanOpen" overloaded="no">
      <autodoc>CanOpen(String location) -&gt; bool</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="OpenFile" overloaded="no">
      <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
      <paramlist>
        <param name="fs" type="r.wxFileSystem" default=""/>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="ZipFSHandler" oldname="wxZipFSHandler" module="core">
    <baseclass name="wxFileSystemHandler"/>
    <constructor name="ZipFSHandler" overloaded="no">
      <autodoc>__init__() -&gt; ZipFSHandler</autodoc>
    </constructor>
    <method name="CanOpen" overloaded="no">
      <autodoc>CanOpen(String location) -&gt; bool</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="OpenFile" overloaded="no">
      <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
      <paramlist>
        <param name="fs" type="r.wxFileSystem" default=""/>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindFirst" overloaded="no">
      <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
      <paramlist>
        <param name="spec" type="r.q(const).wxString" default=""/>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="FindNext" overloaded="no">
      <autodoc>FindNext() -&gt; String</autodoc>
    </method>
  </class>
  <function oldname="__wxMemoryFSHandler_AddFile_wxImage" name="__wxMemoryFSHandler_AddFile_wxImage" overloaded="no">
    <autodoc>__wxMemoryFSHandler_AddFile_wxImage(String filename, Image image, long type)</autodoc>
    <paramlist>
      <param name="filename" type="r.q(const).wxString" default=""/>
      <param name="image" type="r.wxImage" default=""/>
      <param name="type" type="long" default=""/>
    </paramlist>
  </function>
  <function oldname="__wxMemoryFSHandler_AddFile_wxBitmap" name="__wxMemoryFSHandler_AddFile_wxBitmap" overloaded="no">
    <autodoc>__wxMemoryFSHandler_AddFile_wxBitmap(String filename, Bitmap bitmap, long type)</autodoc>
    <paramlist>
      <param name="filename" type="r.q(const).wxString" default=""/>
      <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      <param name="type" type="long" default=""/>
    </paramlist>
  </function>
  <function oldname="__wxMemoryFSHandler_AddFile_Data" name="__wxMemoryFSHandler_AddFile_Data" overloaded="no">
    <autodoc>__wxMemoryFSHandler_AddFile_Data(String filename, PyObject data)</autodoc>
    <paramlist>
      <param name="filename" type="r.q(const).wxString" default=""/>
      <param name="data" type="p.PyObject" default=""/>
    </paramlist>
  </function>
  <pythoncode>
def MemoryFSHandler_AddFile(filename, a, b=''):
    if isinstance(a, wx.Image):
        __wxMemoryFSHandler_AddFile_wxImage(filename, a, b)
    elif isinstance(a, wx.Bitmap):
        __wxMemoryFSHandler_AddFile_wxBitmap(filename, a, b)
    elif type(a) == str:
        __wxMemoryFSHandler_AddFile_Data(filename, a)
    else: raise TypeError, 'wx.Image, wx.Bitmap or string expected'
</pythoncode>
  <class name="MemoryFSHandler" oldname="wxMemoryFSHandler" module="core">
    <baseclass name="wxFileSystemHandler"/>
    <constructor name="MemoryFSHandler" overloaded="no">
      <autodoc>__init__() -&gt; MemoryFSHandler</autodoc>
    </constructor>
    <staticmethod name="RemoveFile" overloaded="no">
      <autodoc>RemoveFile(String filename)</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <pythoncode> AddFile = staticmethod(MemoryFSHandler_AddFile) </pythoncode>
    <method name="CanOpen" overloaded="no">
      <autodoc>CanOpen(String location) -&gt; bool</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="OpenFile" overloaded="no">
      <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
      <paramlist>
        <param name="fs" type="r.wxFileSystem" default=""/>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindFirst" overloaded="no">
      <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
      <paramlist>
        <param name="spec" type="r.q(const).wxString" default=""/>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="FindNext" overloaded="no">
      <autodoc>FindNext() -&gt; String</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ImageHandler" oldname="wxImageHandler" module="core">
    <baseclass name="wxObject"/>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="GetExtension" overloaded="no">
      <autodoc>GetExtension() -&gt; String</autodoc>
    </method>
    <method name="GetType" overloaded="no">
      <autodoc>GetType() -&gt; long</autodoc>
    </method>
    <method name="GetMimeType" overloaded="no">
      <autodoc>GetMimeType() -&gt; String</autodoc>
    </method>
    <method name="CanRead" overloaded="no">
      <autodoc>CanRead(String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetName" overloaded="no">
      <autodoc>SetName(String name)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetExtension" overloaded="no">
      <autodoc>SetExtension(String extension)</autodoc>
      <paramlist>
        <param name="extension" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetType" overloaded="no">
      <autodoc>SetType(long type)</autodoc>
      <paramlist>
        <param name="type" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetMimeType" overloaded="no">
      <autodoc>SetMimeType(String mimetype)</autodoc>
      <paramlist>
        <param name="mimetype" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="ImageHistogram" oldname="wxImageHistogram" module="core">
    <constructor name="ImageHistogram" overloaded="no">
      <autodoc>__init__() -&gt; ImageHistogram</autodoc>
    </constructor>
    <staticmethod name="MakeKey" overloaded="no">
      <autodoc>MakeKey(unsigned char r, unsigned char g, unsigned char b) -&gt; unsigned long</autodoc>
      <docstring>Get the key in the histogram for the given RGB values</docstring>
      <paramlist>
        <param name="r" type="unsigned char" default=""/>
        <param name="g" type="unsigned char" default=""/>
        <param name="b" type="unsigned char" default=""/>
      </paramlist>
    </staticmethod>
    <method name="FindFirstUnusedColour" overloaded="no">
      <autodoc>FindFirstUnusedColour(int startR=1, int startG=0, int startB=0) -&gt; (success, r, g, b)</autodoc>
      <docstring>Find first colour that is not used in the image and has higher RGB values than
startR, startG, startB.  Returns a tuple consisting of a success flag and rgb
values.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.unsigned char" default=""/>
        <param name="OUTPUT" type="p.unsigned char" default=""/>
        <param name="OUTPUT" type="p.unsigned char" default=""/>
        <param name="startR" type="unsigned char" default="1"/>
        <param name="startG" type="unsigned char" default="0"/>
        <param name="startB" type="unsigned char" default="0"/>
      </paramlist>
    </method>
  </class>
  <class name="Image" oldname="wxImage" module="core">
    <baseclass name="wxObject"/>
    <constructor name="Image" overloaded="no">
      <autodoc>__init__(String name, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; Image</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxImage">
      <autodoc>__del__()</autodoc>
    </destructor>
    <constructor name="ImageFromMime" overloaded="no">
      <autodoc>ImageFromMime(String name, String mimetype, int index=-1) -&gt; Image</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default=""/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <constructor name="ImageFromStream" overloaded="no">
      <autodoc>ImageFromStream(InputStream stream, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; Image</autodoc>
      <paramlist>
        <param name="stream" type="r.wxInputStream" default=""/>
        <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <constructor name="ImageFromStreamMime" overloaded="no">
      <autodoc>ImageFromStreamMime(InputStream stream, String mimetype, int index=-1) -&gt; Image</autodoc>
      <paramlist>
        <param name="stream" type="r.wxInputStream" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default=""/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <constructor name="EmptyImage" overloaded="no">
      <autodoc>EmptyImage(int width=0, int height=0, bool clear=True) -&gt; Image</autodoc>
      <paramlist>
        <param name="width" type="int" default="0"/>
        <param name="height" type="int" default="0"/>
        <param name="clear" type="bool" default="True"/>
      </paramlist>
    </constructor>
    <constructor name="ImageFromBitmap" overloaded="no">
      <autodoc>ImageFromBitmap(Bitmap bitmap) -&gt; Image</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </constructor>
    <constructor name="ImageFromData" overloaded="no">
      <autodoc>ImageFromData(int width, int height, unsigned char data) -&gt; Image</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="data" type="p.unsigned char" default=""/>
      </paramlist>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
      <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
    </method>
    <method name="Scale" overloaded="no">
      <autodoc>Scale(int width, int height) -&gt; Image</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ShrinkBy" overloaded="no">
      <autodoc>ShrinkBy(int xFactor, int yFactor) -&gt; Image</autodoc>
      <paramlist>
        <param name="xFactor" type="int" default=""/>
        <param name="yFactor" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Rescale" overloaded="no">
      <autodoc>Rescale(int width, int height) -&gt; Image</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRGB" overloaded="no">
      <autodoc>SetRGB(int x, int y, unsigned char r, unsigned char g, unsigned char b)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="r" type="unsigned char" default=""/>
        <param name="g" type="unsigned char" default=""/>
        <param name="b" type="unsigned char" default=""/>
      </paramlist>
    </method>
    <method name="GetRed" overloaded="no">
      <autodoc>GetRed(int x, int y) -&gt; unsigned char</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetGreen" overloaded="no">
      <autodoc>GetGreen(int x, int y) -&gt; unsigned char</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBlue" overloaded="no">
      <autodoc>GetBlue(int x, int y) -&gt; unsigned char</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAlpha" overloaded="no">
      <autodoc>SetAlpha(int x, int y, unsigned char alpha)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="alpha" type="unsigned char" default=""/>
      </paramlist>
    </method>
    <method name="GetAlpha" overloaded="no">
      <autodoc>GetAlpha(int x, int y) -&gt; unsigned char</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="HasAlpha" overloaded="no">
      <autodoc>HasAlpha() -&gt; bool</autodoc>
    </method>
    <method name="FindFirstUnusedColour" overloaded="no">
      <autodoc>FindFirstUnusedColour(int startR=1, int startG=0, int startB=0) -&gt; (success, r, g, b)</autodoc>
      <docstring>Find first colour that is not used in the image and has higher RGB values than
startR, startG, startB.  Returns a tuple consisting of a success flag and rgb
values.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.byte" default=""/>
        <param name="OUTPUT" type="p.byte" default=""/>
        <param name="OUTPUT" type="p.byte" default=""/>
        <param name="startR" type="byte" default="0"/>
        <param name="startG" type="byte" default="0"/>
        <param name="startB" type="byte" default="0"/>
      </paramlist>
    </method>
    <method name="SetMaskFromImage" overloaded="no">
      <autodoc>SetMaskFromImage(Image mask, byte mr, byte mg, byte mb) -&gt; bool</autodoc>
      <paramlist>
        <param name="mask" type="r.q(const).wxImage" default=""/>
        <param name="mr" type="byte" default=""/>
        <param name="mg" type="byte" default=""/>
        <param name="mb" type="byte" default=""/>
      </paramlist>
    </method>
    <staticmethod name="CanRead" overloaded="no">
      <autodoc>CanRead(String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetImageCount" overloaded="no">
      <autodoc>GetImageCount(String name, long type=BITMAP_TYPE_ANY) -&gt; int</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
      </paramlist>
    </staticmethod>
    <method name="LoadFile" overloaded="no">
      <autodoc>LoadFile(String name, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="LoadMimeFile" overloaded="no">
      <autodoc>LoadMimeFile(String name, String mimetype, int index=-1) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default=""/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="SaveFile" overloaded="no">
      <autodoc>SaveFile(String name, int type) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SaveMimeFile" overloaded="no">
      <autodoc>SaveMimeFile(String name, String mimetype) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <staticmethod name="CanReadStream" overloaded="no">
      <autodoc>CanReadStream(InputStream stream) -&gt; bool</autodoc>
      <paramlist>
        <param name="stream" type="r.wxInputStream" default=""/>
      </paramlist>
    </staticmethod>
    <method name="LoadStream" overloaded="no">
      <autodoc>LoadStream(InputStream stream, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; bool</autodoc>
      <paramlist>
        <param name="stream" type="r.wxInputStream" default=""/>
        <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="LoadMimeStream" overloaded="no">
      <autodoc>LoadMimeStream(InputStream stream, String mimetype, int index=-1) -&gt; bool</autodoc>
      <paramlist>
        <param name="stream" type="r.wxInputStream" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default=""/>
        <param name="index" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; int</autodoc>
    </method>
    <method name="GetSubImage" overloaded="no">
      <autodoc>GetSubImage(Rect rect) -&gt; Image</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="Copy" overloaded="no">
      <autodoc>Copy() -&gt; Image</autodoc>
    </method>
    <method name="Paste" overloaded="no">
      <autodoc>Paste(Image image, int x, int y)</autodoc>
      <paramlist>
        <param name="image" type="r.q(const).wxImage" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; PyObject</autodoc>
    </method>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(PyObject data)</autodoc>
      <paramlist>
        <param name="data" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetDataBuffer" overloaded="no">
      <autodoc>GetDataBuffer() -&gt; PyObject</autodoc>
    </method>
    <method name="SetDataBuffer" overloaded="no">
      <autodoc>SetDataBuffer(PyObject data)</autodoc>
      <paramlist>
        <param name="data" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetAlphaData" overloaded="no">
      <autodoc>GetAlphaData() -&gt; PyObject</autodoc>
    </method>
    <method name="SetAlphaData" overloaded="no">
      <autodoc>SetAlphaData(PyObject data)</autodoc>
      <paramlist>
        <param name="data" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetAlphaBuffer" overloaded="no">
      <autodoc>GetAlphaBuffer() -&gt; PyObject</autodoc>
    </method>
    <method name="SetAlphaBuffer" overloaded="no">
      <autodoc>SetAlphaBuffer(PyObject data)</autodoc>
      <paramlist>
        <param name="data" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetMaskColour" overloaded="no">
      <autodoc>SetMaskColour(unsigned char r, unsigned char g, unsigned char b)</autodoc>
      <paramlist>
        <param name="r" type="unsigned char" default=""/>
        <param name="g" type="unsigned char" default=""/>
        <param name="b" type="unsigned char" default=""/>
      </paramlist>
    </method>
    <method name="GetMaskRed" overloaded="no">
      <autodoc>GetMaskRed() -&gt; unsigned char</autodoc>
    </method>
    <method name="GetMaskGreen" overloaded="no">
      <autodoc>GetMaskGreen() -&gt; unsigned char</autodoc>
    </method>
    <method name="GetMaskBlue" overloaded="no">
      <autodoc>GetMaskBlue() -&gt; unsigned char</autodoc>
    </method>
    <method name="SetMask" overloaded="no">
      <autodoc>SetMask(bool mask=True)</autodoc>
      <paramlist>
        <param name="mask" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="HasMask" overloaded="no">
      <autodoc>HasMask() -&gt; bool</autodoc>
    </method>
    <method name="Rotate" overloaded="no">
      <autodoc>Rotate(double angle, Point centre_of_rotation, bool interpolating=True, 
    Point offset_after_rotation=None) -&gt; Image</autodoc>
      <paramlist>
        <param name="angle" type="double" default=""/>
        <param name="centre_of_rotation" type="r.q(const).wxPoint" default=""/>
        <param name="interpolating" type="bool" default="True"/>
        <param name="offset_after_rotation" type="p.wxPoint" default="NULL"/>
      </paramlist>
    </method>
    <method name="Rotate90" overloaded="no">
      <autodoc>Rotate90(bool clockwise=True) -&gt; Image</autodoc>
      <paramlist>
        <param name="clockwise" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Mirror" overloaded="no">
      <autodoc>Mirror(bool horizontally=True) -&gt; Image</autodoc>
      <paramlist>
        <param name="horizontally" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Replace" overloaded="no">
      <autodoc>Replace(unsigned char r1, unsigned char g1, unsigned char b1, 
    unsigned char r2, unsigned char g2, unsigned char b2)</autodoc>
      <paramlist>
        <param name="r1" type="unsigned char" default=""/>
        <param name="g1" type="unsigned char" default=""/>
        <param name="b1" type="unsigned char" default=""/>
        <param name="r2" type="unsigned char" default=""/>
        <param name="g2" type="unsigned char" default=""/>
        <param name="b2" type="unsigned char" default=""/>
      </paramlist>
    </method>
    <method name="ConvertToMono" overloaded="no">
      <autodoc>ConvertToMono(unsigned char r, unsigned char g, unsigned char b) -&gt; Image</autodoc>
      <paramlist>
        <param name="r" type="unsigned char" default=""/>
        <param name="g" type="unsigned char" default=""/>
        <param name="b" type="unsigned char" default=""/>
      </paramlist>
    </method>
    <method name="SetOption" overloaded="no">
      <autodoc>SetOption(String name, String value)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetOptionInt" overloaded="no">
      <autodoc>SetOptionInt(String name, int value)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="value" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetOption" overloaded="no">
      <autodoc>GetOption(String name) -&gt; String</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetOptionInt" overloaded="no">
      <autodoc>GetOptionInt(String name) -&gt; int</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="HasOption" overloaded="no">
      <autodoc>HasOption(String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="CountColours" overloaded="no">
      <autodoc>CountColours(unsigned long stopafter=(unsigned long) -1) -&gt; unsigned long</autodoc>
      <paramlist>
        <param name="stopafter" type="unsigned long" default="(unsigned long) -1"/>
      </paramlist>
    </method>
    <method name="ComputeHistogram" overloaded="no">
      <autodoc>ComputeHistogram(ImageHistogram h) -&gt; unsigned long</autodoc>
      <paramlist>
        <param name="h" type="r.wxImageHistogram" default=""/>
      </paramlist>
    </method>
    <staticmethod name="AddHandler" overloaded="no">
      <autodoc>AddHandler(ImageHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxImageHandler" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="InsertHandler" overloaded="no">
      <autodoc>InsertHandler(ImageHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxImageHandler" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="RemoveHandler" overloaded="no">
      <autodoc>RemoveHandler(String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetImageExtWildcard" overloaded="no">
      <autodoc>GetImageExtWildcard() -&gt; String</autodoc>
    </staticmethod>
    <method name="ConvertToBitmap" overloaded="no">
      <autodoc>ConvertToBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="ConvertToMonoBitmap" overloaded="no">
      <autodoc>ConvertToMonoBitmap(unsigned char red, unsigned char green, unsigned char blue) -&gt; Bitmap</autodoc>
      <paramlist>
        <param name="red" type="unsigned char" default=""/>
        <param name="green" type="unsigned char" default=""/>
        <param name="blue" type="unsigned char" default=""/>
      </paramlist>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <function oldname="wxInitAllImageHandlers" name="InitAllImageHandlers" overloaded="no">
    <autodoc>InitAllImageHandlers()</autodoc>
  </function>
  <class name="BMPHandler" oldname="wxBMPHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="BMPHandler" overloaded="no">
      <autodoc>__init__() -&gt; BMPHandler</autodoc>
    </constructor>
  </class>
  <class name="ICOHandler" oldname="wxICOHandler" module="core">
    <baseclass name="wxBMPHandler"/>
    <constructor name="ICOHandler" overloaded="no">
      <autodoc>__init__() -&gt; ICOHandler</autodoc>
    </constructor>
  </class>
  <class name="CURHandler" oldname="wxCURHandler" module="core">
    <baseclass name="wxICOHandler"/>
    <constructor name="CURHandler" overloaded="no">
      <autodoc>__init__() -&gt; CURHandler</autodoc>
    </constructor>
  </class>
  <class name="ANIHandler" oldname="wxANIHandler" module="core">
    <baseclass name="wxCURHandler"/>
    <constructor name="ANIHandler" overloaded="no">
      <autodoc>__init__() -&gt; ANIHandler</autodoc>
    </constructor>
  </class>
  <class name="PNGHandler" oldname="wxPNGHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="PNGHandler" overloaded="no">
      <autodoc>__init__() -&gt; PNGHandler</autodoc>
    </constructor>
  </class>
  <class name="GIFHandler" oldname="wxGIFHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="GIFHandler" overloaded="no">
      <autodoc>__init__() -&gt; GIFHandler</autodoc>
    </constructor>
  </class>
  <class name="PCXHandler" oldname="wxPCXHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="PCXHandler" overloaded="no">
      <autodoc>__init__() -&gt; PCXHandler</autodoc>
    </constructor>
  </class>
  <class name="JPEGHandler" oldname="wxJPEGHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="JPEGHandler" overloaded="no">
      <autodoc>__init__() -&gt; JPEGHandler</autodoc>
    </constructor>
  </class>
  <class name="PNMHandler" oldname="wxPNMHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="PNMHandler" overloaded="no">
      <autodoc>__init__() -&gt; PNMHandler</autodoc>
    </constructor>
  </class>
  <class name="XPMHandler" oldname="wxXPMHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="XPMHandler" overloaded="no">
      <autodoc>__init__() -&gt; XPMHandler</autodoc>
    </constructor>
  </class>
  <class name="TIFFHandler" oldname="wxTIFFHandler" module="core">
    <baseclass name="wxImageHandler"/>
    <constructor name="TIFFHandler" overloaded="no">
      <autodoc>__init__() -&gt; TIFFHandler</autodoc>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="EvtHandler" oldname="wxEvtHandler" module="core">
    <baseclass name="wxObject"/>
    <constructor name="EvtHandler" overloaded="no">
      <autodoc>__init__() -&gt; EvtHandler</autodoc>
    </constructor>
    <method name="GetNextHandler" overloaded="no">
      <autodoc>GetNextHandler() -&gt; EvtHandler</autodoc>
    </method>
    <method name="GetPreviousHandler" overloaded="no">
      <autodoc>GetPreviousHandler() -&gt; EvtHandler</autodoc>
    </method>
    <method name="SetNextHandler" overloaded="no">
      <autodoc>SetNextHandler(EvtHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="SetPreviousHandler" overloaded="no">
      <autodoc>SetPreviousHandler(EvtHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="GetEvtHandlerEnabled" overloaded="no">
      <autodoc>GetEvtHandlerEnabled() -&gt; bool</autodoc>
    </method>
    <method name="SetEvtHandlerEnabled" overloaded="no">
      <autodoc>SetEvtHandlerEnabled(bool enabled)</autodoc>
      <paramlist>
        <param name="enabled" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="ProcessEvent" overloaded="no">
      <autodoc>ProcessEvent(Event event) -&gt; bool</autodoc>
      <paramlist>
        <param name="event" type="r.wxEvent" default=""/>
      </paramlist>
    </method>
    <method name="AddPendingEvent" overloaded="no">
      <autodoc>AddPendingEvent(Event event)</autodoc>
      <paramlist>
        <param name="event" type="r.wxEvent" default=""/>
      </paramlist>
    </method>
    <method name="ProcessPendingEvents" overloaded="no">
      <autodoc>ProcessPendingEvents()</autodoc>
    </method>
    <method name="Connect" overloaded="no">
      <autodoc>Connect(int id, int lastId, int eventType, PyObject func)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="lastId" type="int" default=""/>
        <param name="eventType" type="int" default=""/>
        <param name="func" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Disconnect" overloaded="no">
      <autodoc>Disconnect(int id, int lastId=-1, wxEventType eventType=wxEVT_NULL) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="lastId" type="int" default="-1"/>
        <param name="eventType" type="wxEventType" default="wxEVT_NULL"/>
      </paramlist>
    </method>
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode>
        def Bind(self, event, handler, source=None, id=wx.ID_ANY, id2=wx.ID_ANY):
            """
            Bind an event to an event handler.

              event     One of the EVT_* objects that specifies the
                        type of event to bind,

              handler   A callable object to be invoked when the event
                        is delivered to self.  Pass None to disconnect an
                        event handler.

              source    Sometimes the event originates from a different window
                        than self, but you still want to catch it in self.  (For
                        example, a button event delivered to a frame.)  By
                        passing the source of the event, the event handling
                        system is able to differentiate between the same event
                        type from different controls.

              id,id2    Used for menu IDs or for event types that require a
                        range of IDs
            """
            if source is not None:
                id  = source.GetId()
            event.Bind(self, id, id2, handler)              

    </pythoncode>
  </class>
  <pythoncode>

#---------------------------------------------------------------------------

class PyEventBinder(object):
    """
    Instances of this class are used to bind specific events to event
    handlers.
    """
    def __init__(self, evtType, expectedIDs=0):
        if expectedIDs not in [0, 1, 2]:
            raise ValueError, "Invalid number of expectedIDs"
        self.expectedIDs = expectedIDs

        if type(evtType) == list or type(evtType) == tuple:
            self.evtType = evtType
        else:
            self.evtType = [evtType]


    def Bind(self, target, id1, id2, function):
        """Bind this set of event types to target."""
        for et in self.evtType:
            target.Connect(id1, id2, et, function)

    
    def __call__(self, *args):
        """
        For backwards compatibility with the old EVT_* functions.
        Should be called with either (window, func), (window, ID,
        func) or (window, ID1, ID2, func) parameters depending on the
        type of the event.
        """
        assert len(args) == 2 + self.expectedIDs
        id1 = wx.ID_ANY
        id2 = wx.ID_ANY
        target = args[0]
        if self.expectedIDs == 0:
            func = args[1]
        elif self.expectedIDs == 1:
            id1 = args[1]
            func = args[2]
        elif self.expectedIDs == 2:
            id1 = args[1]
            id2 = args[2]
            func = args[3]
        else:
            raise ValueError, "Unexpected number of IDs"

        self.Bind(target, id1, id2, func)


# These two are square pegs that don't fit the PyEventBinder hole...
def EVT_COMMAND(win, id, cmd, func):
    win.Connect(id, -1, cmd, func)
def EVT_COMMAND_RANGE(win, id1, id2, cmd, func):
    win.Connect(id1, id2, cmd, func)

    
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <function oldname="wxNewEventType" name="NewEventType" overloaded="no">
    <autodoc>NewEventType() -&gt; wxEventType</autodoc>
  </function>
  <pythoncode>
#
# Create some event binders
EVT_SIZE = wx.PyEventBinder( wxEVT_SIZE )
EVT_SIZING = wx.PyEventBinder( wxEVT_SIZING )
EVT_MOVE = wx.PyEventBinder( wxEVT_MOVE )
EVT_MOVING = wx.PyEventBinder( wxEVT_MOVING )
EVT_CLOSE = wx.PyEventBinder( wxEVT_CLOSE_WINDOW )
EVT_END_SESSION = wx.PyEventBinder( wxEVT_END_SESSION )
EVT_QUERY_END_SESSION = wx.PyEventBinder( wxEVT_QUERY_END_SESSION )
EVT_PAINT = wx.PyEventBinder( wxEVT_PAINT )
EVT_NC_PAINT = wx.PyEventBinder( wxEVT_NC_PAINT )
EVT_ERASE_BACKGROUND = wx.PyEventBinder( wxEVT_ERASE_BACKGROUND )
EVT_CHAR = wx.PyEventBinder( wxEVT_CHAR )
EVT_KEY_DOWN = wx.PyEventBinder( wxEVT_KEY_DOWN )
EVT_KEY_UP = wx.PyEventBinder( wxEVT_KEY_UP )
EVT_HOTKEY = wx.PyEventBinder( wxEVT_HOTKEY, 1) 
EVT_CHAR_HOOK = wx.PyEventBinder( wxEVT_CHAR_HOOK )
EVT_MENU_OPEN = wx.PyEventBinder( wxEVT_MENU_OPEN )
EVT_MENU_CLOSE = wx.PyEventBinder( wxEVT_MENU_CLOSE )
EVT_MENU_HIGHLIGHT = wx.PyEventBinder( wxEVT_MENU_HIGHLIGHT, 1)
EVT_MENU_HIGHLIGHT_ALL = wx.PyEventBinder( wxEVT_MENU_HIGHLIGHT )
EVT_SET_FOCUS = wx.PyEventBinder( wxEVT_SET_FOCUS )
EVT_KILL_FOCUS = wx.PyEventBinder( wxEVT_KILL_FOCUS )
EVT_CHILD_FOCUS = wx.PyEventBinder( wxEVT_CHILD_FOCUS )
EVT_ACTIVATE = wx.PyEventBinder( wxEVT_ACTIVATE )
EVT_ACTIVATE_APP = wx.PyEventBinder( wxEVT_ACTIVATE_APP )
EVT_END_SESSION = wx.PyEventBinder( wxEVT_END_SESSION )
EVT_QUERY_END_SESSION = wx.PyEventBinder( wxEVT_QUERY_END_SESSION )
EVT_DROP_FILES = wx.PyEventBinder( wxEVT_DROP_FILES )
EVT_INIT_DIALOG = wx.PyEventBinder( wxEVT_INIT_DIALOG )
EVT_SYS_COLOUR_CHANGED = wx.PyEventBinder( wxEVT_SYS_COLOUR_CHANGED )
EVT_DISPLAY_CHANGED = wx.PyEventBinder( wxEVT_DISPLAY_CHANGED )
EVT_SHOW = wx.PyEventBinder( wxEVT_SHOW )
EVT_MAXIMIZE = wx.PyEventBinder( wxEVT_MAXIMIZE )
EVT_ICONIZE = wx.PyEventBinder( wxEVT_ICONIZE )
EVT_NAVIGATION_KEY = wx.PyEventBinder( wxEVT_NAVIGATION_KEY )
EVT_PALETTE_CHANGED = wx.PyEventBinder( wxEVT_PALETTE_CHANGED )
EVT_QUERY_NEW_PALETTE = wx.PyEventBinder( wxEVT_QUERY_NEW_PALETTE )
EVT_WINDOW_CREATE = wx.PyEventBinder( wxEVT_CREATE )
EVT_WINDOW_DESTROY = wx.PyEventBinder( wxEVT_DESTROY )
EVT_SET_CURSOR = wx.PyEventBinder( wxEVT_SET_CURSOR )
EVT_MOUSE_CAPTURE_CHANGED = wx.PyEventBinder( wxEVT_MOUSE_CAPTURE_CHANGED )

EVT_LEFT_DOWN = wx.PyEventBinder( wxEVT_LEFT_DOWN )
EVT_LEFT_UP = wx.PyEventBinder( wxEVT_LEFT_UP )
EVT_MIDDLE_DOWN = wx.PyEventBinder( wxEVT_MIDDLE_DOWN )
EVT_MIDDLE_UP = wx.PyEventBinder( wxEVT_MIDDLE_UP )
EVT_RIGHT_DOWN = wx.PyEventBinder( wxEVT_RIGHT_DOWN )
EVT_RIGHT_UP = wx.PyEventBinder( wxEVT_RIGHT_UP )
EVT_MOTION = wx.PyEventBinder( wxEVT_MOTION )
EVT_LEFT_DCLICK = wx.PyEventBinder( wxEVT_LEFT_DCLICK )
EVT_MIDDLE_DCLICK = wx.PyEventBinder( wxEVT_MIDDLE_DCLICK )
EVT_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_RIGHT_DCLICK )
EVT_LEAVE_WINDOW = wx.PyEventBinder( wxEVT_LEAVE_WINDOW )
EVT_ENTER_WINDOW = wx.PyEventBinder( wxEVT_ENTER_WINDOW )
EVT_MOUSEWHEEL = wx.PyEventBinder( wxEVT_MOUSEWHEEL )

EVT_MOUSE_EVENTS = wx.PyEventBinder([ wxEVT_LEFT_DOWN,
                                     wxEVT_LEFT_UP,
                                     wxEVT_MIDDLE_DOWN,
                                     wxEVT_MIDDLE_UP,
                                     wxEVT_RIGHT_DOWN,
                                     wxEVT_RIGHT_UP,
                                     wxEVT_MOTION,
                                     wxEVT_LEFT_DCLICK,
                                     wxEVT_MIDDLE_DCLICK,
                                     wxEVT_RIGHT_DCLICK,
                                     wxEVT_ENTER_WINDOW,
                                     wxEVT_LEAVE_WINDOW,
                                     wxEVT_MOUSEWHEEL
                                     ])


# Scrolling from wxWindow (sent to wxScrolledWindow)
EVT_SCROLLWIN = wx.PyEventBinder([ wxEVT_SCROLLWIN_TOP, 
                                  wxEVT_SCROLLWIN_BOTTOM,
                                  wxEVT_SCROLLWIN_LINEUP,
                                  wxEVT_SCROLLWIN_LINEDOWN,
                                  wxEVT_SCROLLWIN_PAGEUP, 
                                  wxEVT_SCROLLWIN_PAGEDOWN,
                                  wxEVT_SCROLLWIN_THUMBTRACK,
                                  wxEVT_SCROLLWIN_THUMBRELEASE,
                                  ])

EVT_SCROLLWIN_TOP = wx.PyEventBinder( wxEVT_SCROLLWIN_TOP )
EVT_SCROLLWIN_BOTTOM = wx.PyEventBinder( wxEVT_SCROLLWIN_BOTTOM )
EVT_SCROLLWIN_LINEUP = wx.PyEventBinder( wxEVT_SCROLLWIN_LINEUP )
EVT_SCROLLWIN_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLLWIN_LINEDOWN )
EVT_SCROLLWIN_PAGEUP = wx.PyEventBinder( wxEVT_SCROLLWIN_PAGEUP )
EVT_SCROLLWIN_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLLWIN_PAGEDOWN )
EVT_SCROLLWIN_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLLWIN_THUMBTRACK )
EVT_SCROLLWIN_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLLWIN_THUMBRELEASE )

# Scrolling from wxSlider and wxScrollBar
EVT_SCROLL = wx.PyEventBinder([ wxEVT_SCROLL_TOP, 
                               wxEVT_SCROLL_BOTTOM, 
                               wxEVT_SCROLL_LINEUP, 
                               wxEVT_SCROLL_LINEDOWN, 
                               wxEVT_SCROLL_PAGEUP, 
                               wxEVT_SCROLL_PAGEDOWN, 
                               wxEVT_SCROLL_THUMBTRACK, 
                               wxEVT_SCROLL_THUMBRELEASE, 
                               wxEVT_SCROLL_ENDSCROLL,
                               ])

EVT_SCROLL_TOP = wx.PyEventBinder( wxEVT_SCROLL_TOP )
EVT_SCROLL_BOTTOM = wx.PyEventBinder( wxEVT_SCROLL_BOTTOM )
EVT_SCROLL_LINEUP = wx.PyEventBinder( wxEVT_SCROLL_LINEUP )
EVT_SCROLL_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLL_LINEDOWN )
EVT_SCROLL_PAGEUP = wx.PyEventBinder( wxEVT_SCROLL_PAGEUP )
EVT_SCROLL_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLL_PAGEDOWN )
EVT_SCROLL_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLL_THUMBTRACK )
EVT_SCROLL_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLL_THUMBRELEASE )
EVT_SCROLL_ENDSCROLL = wx.PyEventBinder( wxEVT_SCROLL_ENDSCROLL )

# Scrolling from wxSlider and wxScrollBar, with an id
EVT_COMMAND_SCROLL = wx.PyEventBinder([ wxEVT_SCROLL_TOP, 
                                       wxEVT_SCROLL_BOTTOM, 
                                       wxEVT_SCROLL_LINEUP, 
                                       wxEVT_SCROLL_LINEDOWN, 
                                       wxEVT_SCROLL_PAGEUP, 
                                       wxEVT_SCROLL_PAGEDOWN, 
                                       wxEVT_SCROLL_THUMBTRACK, 
                                       wxEVT_SCROLL_THUMBRELEASE,
                                       wxEVT_SCROLL_ENDSCROLL,
                                       ], 1)

EVT_COMMAND_SCROLL_TOP = wx.PyEventBinder( wxEVT_SCROLL_TOP, 1)
EVT_COMMAND_SCROLL_BOTTOM = wx.PyEventBinder( wxEVT_SCROLL_BOTTOM, 1)
EVT_COMMAND_SCROLL_LINEUP = wx.PyEventBinder( wxEVT_SCROLL_LINEUP, 1)
EVT_COMMAND_SCROLL_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLL_LINEDOWN, 1)
EVT_COMMAND_SCROLL_PAGEUP = wx.PyEventBinder( wxEVT_SCROLL_PAGEUP, 1)
EVT_COMMAND_SCROLL_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLL_PAGEDOWN, 1)
EVT_COMMAND_SCROLL_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLL_THUMBTRACK, 1)
EVT_COMMAND_SCROLL_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLL_THUMBRELEASE, 1)
EVT_COMMAND_SCROLL_ENDSCROLL = wx.PyEventBinder( wxEVT_SCROLL_ENDSCROLL, 1)

EVT_BUTTON = wx.PyEventBinder( wxEVT_COMMAND_BUTTON_CLICKED, 1)
EVT_CHECKBOX = wx.PyEventBinder( wxEVT_COMMAND_CHECKBOX_CLICKED, 1)
EVT_CHOICE = wx.PyEventBinder( wxEVT_COMMAND_CHOICE_SELECTED, 1)
EVT_LISTBOX = wx.PyEventBinder( wxEVT_COMMAND_LISTBOX_SELECTED, 1)
EVT_LISTBOX_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, 1)
EVT_MENU = wx.PyEventBinder( wxEVT_COMMAND_MENU_SELECTED, 1)
EVT_MENU_RANGE = wx.PyEventBinder( wxEVT_COMMAND_MENU_SELECTED, 2)
EVT_SLIDER = wx.PyEventBinder( wxEVT_COMMAND_SLIDER_UPDATED, 1)
EVT_RADIOBOX = wx.PyEventBinder( wxEVT_COMMAND_RADIOBOX_SELECTED, 1)
EVT_RADIOBUTTON = wx.PyEventBinder( wxEVT_COMMAND_RADIOBUTTON_SELECTED, 1)

EVT_SCROLLBAR = wx.PyEventBinder( wxEVT_COMMAND_SCROLLBAR_UPDATED, 1)
EVT_VLBOX = wx.PyEventBinder( wxEVT_COMMAND_VLBOX_SELECTED, 1)
EVT_COMBOBOX = wx.PyEventBinder( wxEVT_COMMAND_COMBOBOX_SELECTED, 1)
EVT_TOOL = wx.PyEventBinder( wxEVT_COMMAND_TOOL_CLICKED, 1)
EVT_TOOL_RANGE = wx.PyEventBinder( wxEVT_COMMAND_TOOL_CLICKED, 2)
EVT_TOOL_RCLICKED = wx.PyEventBinder( wxEVT_COMMAND_TOOL_RCLICKED, 1)
EVT_TOOL_RCLICKED_RANGE = wx.PyEventBinder( wxEVT_COMMAND_TOOL_RCLICKED, 2)
EVT_TOOL_ENTER = wx.PyEventBinder( wxEVT_COMMAND_TOOL_ENTER, 1)
EVT_CHECKLISTBOX = wx.PyEventBinder( wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, 1)


EVT_COMMAND_LEFT_CLICK = wx.PyEventBinder( wxEVT_COMMAND_LEFT_CLICK, 1)
EVT_COMMAND_LEFT_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_LEFT_DCLICK, 1)
EVT_COMMAND_RIGHT_CLICK = wx.PyEventBinder( wxEVT_COMMAND_RIGHT_CLICK, 1)
EVT_COMMAND_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_RIGHT_DCLICK, 1)
EVT_COMMAND_SET_FOCUS = wx.PyEventBinder( wxEVT_COMMAND_SET_FOCUS, 1)
EVT_COMMAND_KILL_FOCUS = wx.PyEventBinder( wxEVT_COMMAND_KILL_FOCUS, 1)
EVT_COMMAND_ENTER = wx.PyEventBinder( wxEVT_COMMAND_ENTER, 1)

EVT_IDLE = wx.PyEventBinder( wxEVT_IDLE )

EVT_UPDATE_UI = wx.PyEventBinder( wxEVT_UPDATE_UI, 1)
EVT_UPDATE_UI_RANGE = wx.PyEventBinder( wxEVT_UPDATE_UI, 2)

EVT_CONTEXT_MENU = wx.PyEventBinder( wxEVT_CONTEXT_MENU )


</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Event" oldname="wxEvent" module="core">
    <baseclass name="wxObject"/>
    <destructor name="~wxEvent">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetEventType" overloaded="no">
      <autodoc>SetEventType(wxEventType typ)</autodoc>
      <paramlist>
        <param name="typ" type="wxEventType" default=""/>
      </paramlist>
    </method>
    <method name="GetEventType" overloaded="no">
      <autodoc>GetEventType() -&gt; wxEventType</autodoc>
    </method>
    <method name="GetEventObject" overloaded="no">
      <autodoc>GetEventObject() -&gt; Object</autodoc>
    </method>
    <method name="SetEventObject" overloaded="no">
      <autodoc>SetEventObject(Object obj)</autodoc>
      <paramlist>
        <param name="obj" type="p.wxObject" default=""/>
      </paramlist>
    </method>
    <method name="GetTimestamp" overloaded="no">
      <autodoc>GetTimestamp() -&gt; long</autodoc>
    </method>
    <method name="SetTimestamp" overloaded="no">
      <autodoc>SetTimestamp(long ts=0)</autodoc>
      <paramlist>
        <param name="ts" type="long" default="0"/>
      </paramlist>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; int</autodoc>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(int Id)</autodoc>
      <paramlist>
        <param name="Id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsCommandEvent" overloaded="no">
      <autodoc>IsCommandEvent() -&gt; bool</autodoc>
    </method>
    <method name="Skip" overloaded="no">
      <autodoc>Skip(bool skip=True)</autodoc>
      <paramlist>
        <param name="skip" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetSkipped" overloaded="no">
      <autodoc>GetSkipped() -&gt; bool</autodoc>
    </method>
    <method name="ShouldPropagate" overloaded="no">
      <autodoc>ShouldPropagate() -&gt; bool</autodoc>
    </method>
    <method name="StopPropagation" overloaded="no">
      <autodoc>StopPropagation() -&gt; int</autodoc>
    </method>
    <method name="ResumePropagation" overloaded="no">
      <autodoc>ResumePropagation(int propagationLevel)</autodoc>
      <paramlist>
        <param name="propagationLevel" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Clone" overloaded="no">
      <autodoc>Clone() -&gt; Event</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PropagationDisabler" oldname="wxPropagationDisabler" module="core">
    <constructor name="PropagationDisabler" overloaded="no">
      <autodoc>__init__(Event event) -&gt; PropagationDisabler</autodoc>
      <paramlist>
        <param name="event" type="r.wxEvent" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxPropagationDisabler">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <class name="PropagateOnce" oldname="wxPropagateOnce" module="core">
    <constructor name="PropagateOnce" overloaded="no">
      <autodoc>__init__(Event event) -&gt; PropagateOnce</autodoc>
      <paramlist>
        <param name="event" type="r.wxEvent" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxPropagateOnce">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="CommandEvent" oldname="wxCommandEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="CommandEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0) -&gt; CommandEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; int</autodoc>
    </method>
    <method name="SetString" overloaded="no">
      <autodoc>SetString(String s)</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetString" overloaded="no">
      <autodoc>GetString() -&gt; String</autodoc>
    </method>
    <method name="IsChecked" overloaded="no">
      <autodoc>IsChecked() -&gt; bool</autodoc>
    </method>
    <pythoncode> Checked = IsChecked </pythoncode>
    <method name="IsSelection" overloaded="no">
      <autodoc>IsSelection() -&gt; bool</autodoc>
    </method>
    <method name="SetExtraLong" overloaded="no">
      <autodoc>SetExtraLong(long extraLong)</autodoc>
      <paramlist>
        <param name="extraLong" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetExtraLong" overloaded="no">
      <autodoc>GetExtraLong() -&gt; long</autodoc>
    </method>
    <method name="SetInt" overloaded="no">
      <autodoc>SetInt(int i)</autodoc>
      <paramlist>
        <param name="i" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetInt" overloaded="no">
      <autodoc>GetInt() -&gt; long</autodoc>
    </method>
    <method name="Clone" overloaded="no">
      <autodoc>Clone() -&gt; Event</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="NotifyEvent" oldname="wxNotifyEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="NotifyEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0) -&gt; NotifyEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="Veto" overloaded="no">
      <autodoc>Veto()</autodoc>
    </method>
    <method name="Allow" overloaded="no">
      <autodoc>Allow()</autodoc>
    </method>
    <method name="IsAllowed" overloaded="no">
      <autodoc>IsAllowed() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ScrollEvent" oldname="wxScrollEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="ScrollEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0, int pos=0, 
    int orient=0) -&gt; ScrollEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
        <param name="pos" type="int" default="0"/>
        <param name="orient" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetOrientation" overloaded="no">
      <autodoc>GetOrientation() -&gt; int</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; int</autodoc>
    </method>
    <method name="SetOrientation" overloaded="no">
      <autodoc>SetOrientation(int orient)</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ScrollWinEvent" oldname="wxScrollWinEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="ScrollWinEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int pos=0, int orient=0) -&gt; ScrollWinEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="pos" type="int" default="0"/>
        <param name="orient" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetOrientation" overloaded="no">
      <autodoc>GetOrientation() -&gt; int</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; int</autodoc>
    </method>
    <method name="SetOrientation" overloaded="no">
      <autodoc>SetOrientation(int orient)</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MouseEvent" oldname="wxMouseEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="MouseEvent" overloaded="no">
      <autodoc>__init__(wxEventType mouseType=wxEVT_NULL) -&gt; MouseEvent</autodoc>
      <paramlist>
        <param name="mouseType" type="wxEventType" default="wxEVT_NULL"/>
      </paramlist>
    </constructor>
    <method name="IsButton" overloaded="no">
      <autodoc>IsButton() -&gt; bool</autodoc>
    </method>
    <method name="ButtonDown" overloaded="no">
      <autodoc>ButtonDown(int but=MOUSE_BTN_ANY) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default="wxMOUSE_BTN_ANY"/>
      </paramlist>
    </method>
    <method name="ButtonDClick" overloaded="no">
      <autodoc>ButtonDClick(int but=MOUSE_BTN_ANY) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default="wxMOUSE_BTN_ANY"/>
      </paramlist>
    </method>
    <method name="ButtonUp" overloaded="no">
      <autodoc>ButtonUp(int but=MOUSE_BTN_ANY) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default="wxMOUSE_BTN_ANY"/>
      </paramlist>
    </method>
    <method name="Button" overloaded="no">
      <autodoc>Button(int but) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ButtonIsDown" overloaded="no">
      <autodoc>ButtonIsDown(int but) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetButton" overloaded="no">
      <autodoc>GetButton() -&gt; int</autodoc>
    </method>
    <method name="ControlDown" overloaded="no">
      <autodoc>ControlDown() -&gt; bool</autodoc>
    </method>
    <method name="MetaDown" overloaded="no">
      <autodoc>MetaDown() -&gt; bool</autodoc>
    </method>
    <method name="AltDown" overloaded="no">
      <autodoc>AltDown() -&gt; bool</autodoc>
    </method>
    <method name="ShiftDown" overloaded="no">
      <autodoc>ShiftDown() -&gt; bool</autodoc>
    </method>
    <method name="LeftDown" overloaded="no">
      <autodoc>LeftDown() -&gt; bool</autodoc>
    </method>
    <method name="MiddleDown" overloaded="no">
      <autodoc>MiddleDown() -&gt; bool</autodoc>
    </method>
    <method name="RightDown" overloaded="no">
      <autodoc>RightDown() -&gt; bool</autodoc>
    </method>
    <method name="LeftUp" overloaded="no">
      <autodoc>LeftUp() -&gt; bool</autodoc>
    </method>
    <method name="MiddleUp" overloaded="no">
      <autodoc>MiddleUp() -&gt; bool</autodoc>
    </method>
    <method name="RightUp" overloaded="no">
      <autodoc>RightUp() -&gt; bool</autodoc>
    </method>
    <method name="LeftDClick" overloaded="no">
      <autodoc>LeftDClick() -&gt; bool</autodoc>
    </method>
    <method name="MiddleDClick" overloaded="no">
      <autodoc>MiddleDClick() -&gt; bool</autodoc>
    </method>
    <method name="RightDClick" overloaded="no">
      <autodoc>RightDClick() -&gt; bool</autodoc>
    </method>
    <method name="LeftIsDown" overloaded="no">
      <autodoc>LeftIsDown() -&gt; bool</autodoc>
    </method>
    <method name="MiddleIsDown" overloaded="no">
      <autodoc>MiddleIsDown() -&gt; bool</autodoc>
    </method>
    <method name="RightIsDown" overloaded="no">
      <autodoc>RightIsDown() -&gt; bool</autodoc>
    </method>
    <method name="Dragging" overloaded="no">
      <autodoc>Dragging() -&gt; bool</autodoc>
    </method>
    <method name="Moving" overloaded="no">
      <autodoc>Moving() -&gt; bool</autodoc>
    </method>
    <method name="Entering" overloaded="no">
      <autodoc>Entering() -&gt; bool</autodoc>
    </method>
    <method name="Leaving" overloaded="no">
      <autodoc>Leaving() -&gt; bool</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
      <docstring>Returns the position of the mouse in window coordinates when the event happened.</docstring>
    </method>
    <method name="GetPositionTuple" overloaded="no">
      <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
      <docstring>Returns the position of the mouse in window coordinates when the event happened.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.long" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
      </paramlist>
    </method>
    <method name="GetLogicalPosition" overloaded="no">
      <autodoc>GetLogicalPosition(DC dc) -&gt; Point</autodoc>
      <paramlist>
        <param name="dc" type="r.q(const).wxDC" default=""/>
      </paramlist>
    </method>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; int</autodoc>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; int</autodoc>
    </method>
    <method name="GetWheelRotation" overloaded="no">
      <autodoc>GetWheelRotation() -&gt; int</autodoc>
    </method>
    <method name="GetWheelDelta" overloaded="no">
      <autodoc>GetWheelDelta() -&gt; int</autodoc>
    </method>
    <method name="GetLinesPerAction" overloaded="no">
      <autodoc>GetLinesPerAction() -&gt; int</autodoc>
    </method>
    <method name="IsPageScroll" overloaded="no">
      <autodoc>IsPageScroll() -&gt; bool</autodoc>
    </method>
    <property name="m_x" type="int" readonly="no"/>
    <property name="m_y" type="int" readonly="no"/>
    <property name="m_leftDown" type="bool" readonly="no"/>
    <property name="m_middleDown" type="bool" readonly="no"/>
    <property name="m_rightDown" type="bool" readonly="no"/>
    <property name="m_controlDown" type="bool" readonly="no"/>
    <property name="m_shiftDown" type="bool" readonly="no"/>
    <property name="m_altDown" type="bool" readonly="no"/>
    <property name="m_metaDown" type="bool" readonly="no"/>
    <property name="m_wheelRotation" type="int" readonly="no"/>
    <property name="m_wheelDelta" type="int" readonly="no"/>
    <property name="m_linesPerAction" type="int" readonly="no"/>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SetCursorEvent" oldname="wxSetCursorEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="SetCursorEvent" overloaded="no">
      <autodoc>__init__(int x=0, int y=0) -&gt; SetCursorEvent</autodoc>
      <paramlist>
        <param name="x" type="int" default="0"/>
        <param name="y" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; int</autodoc>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; int</autodoc>
    </method>
    <method name="SetCursor" overloaded="no">
      <autodoc>SetCursor(Cursor cursor)</autodoc>
      <paramlist>
        <param name="cursor" type="r.q(const).wxCursor" default=""/>
      </paramlist>
    </method>
    <method name="GetCursor" overloaded="no">
      <autodoc>GetCursor() -&gt; Cursor</autodoc>
    </method>
    <method name="HasCursor" overloaded="no">
      <autodoc>HasCursor() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="KeyEvent" oldname="wxKeyEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="KeyEvent" overloaded="no">
      <autodoc>__init__(wxEventType keyType=wxEVT_NULL) -&gt; KeyEvent</autodoc>
      <paramlist>
        <param name="keyType" type="wxEventType" default="wxEVT_NULL"/>
      </paramlist>
    </constructor>
    <method name="ControlDown" overloaded="no">
      <autodoc>ControlDown() -&gt; bool</autodoc>
    </method>
    <method name="MetaDown" overloaded="no">
      <autodoc>MetaDown() -&gt; bool</autodoc>
    </method>
    <method name="AltDown" overloaded="no">
      <autodoc>AltDown() -&gt; bool</autodoc>
    </method>
    <method name="ShiftDown" overloaded="no">
      <autodoc>ShiftDown() -&gt; bool</autodoc>
    </method>
    <method name="HasModifiers" overloaded="no">
      <autodoc>HasModifiers() -&gt; bool</autodoc>
    </method>
    <method name="GetKeyCode" overloaded="no">
      <autodoc>GetKeyCode() -&gt; int</autodoc>
    </method>
    <pythoncode> KeyCode = GetKeyCode </pythoncode>
    <method name="GetUniChar" overloaded="no">
      <autodoc>GetUniChar() -&gt; int</autodoc>
    </method>
    <method name="GetRawKeyCode" overloaded="no">
      <autodoc>GetRawKeyCode() -&gt; unsigned int</autodoc>
    </method>
    <method name="GetRawKeyFlags" overloaded="no">
      <autodoc>GetRawKeyFlags() -&gt; unsigned int</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
      <docstring>Find the position of the event.</docstring>
    </method>
    <method name="GetPositionTuple" overloaded="no">
      <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
      <docstring>Find the position of the event.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.long" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
      </paramlist>
    </method>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; int</autodoc>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; int</autodoc>
    </method>
    <property name="m_x" type="int" readonly="no"/>
    <property name="m_y" type="int" readonly="no"/>
    <property name="m_keyCode" type="long" readonly="no"/>
    <property name="m_controlDown" type="bool" readonly="no"/>
    <property name="m_shiftDown" type="bool" readonly="no"/>
    <property name="m_altDown" type="bool" readonly="no"/>
    <property name="m_metaDown" type="bool" readonly="no"/>
    <property name="m_scanCode" type="bool" readonly="no"/>
    <property name="m_rawCode" type="unsigned int" readonly="no"/>
    <property name="m_rawFlags" type="unsigned int" readonly="no"/>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SizeEvent" oldname="wxSizeEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="SizeEvent" overloaded="no">
      <autodoc>__init__(Size sz=DefaultSize, int winid=0) -&gt; SizeEvent</autodoc>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
    </method>
    <method name="GetRect" overloaded="no">
      <autodoc>GetRect() -&gt; Rect</autodoc>
    </method>
    <method name="SetRect" overloaded="no">
      <autodoc>SetRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="wxRect" default=""/>
      </paramlist>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="wxSize" default=""/>
      </paramlist>
    </method>
    <property name="m_size" type="wxSize" readonly="no"/>
    <property name="m_rect" type="wxRect" readonly="no"/>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MoveEvent" oldname="wxMoveEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="MoveEvent" overloaded="no">
      <autodoc>__init__(Point pos=DefaultPosition, int winid=0) -&gt; MoveEvent</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="GetRect" overloaded="no">
      <autodoc>GetRect() -&gt; Rect</autodoc>
    </method>
    <method name="SetRect" overloaded="no">
      <autodoc>SetRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="wxRect" default=""/>
      </paramlist>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="wxPoint" default=""/>
      </paramlist>
    </method>
    <property name="m_pos" type="wxPoint" readonly="no"/>
    <property name="m_rect" type="wxRect" readonly="no"/>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PaintEvent" oldname="wxPaintEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="PaintEvent" overloaded="no">
      <autodoc>__init__(int Id=0) -&gt; PaintEvent</autodoc>
      <paramlist>
        <param name="Id" type="int" default="0"/>
      </paramlist>
    </constructor>
  </class>
  <class name="NcPaintEvent" oldname="wxNcPaintEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="NcPaintEvent" overloaded="no">
      <autodoc>__init__(int winid=0) -&gt; NcPaintEvent</autodoc>
      <paramlist>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="EraseEvent" oldname="wxEraseEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="EraseEvent" overloaded="no">
      <autodoc>__init__(int Id=0, DC dc=(wxDC *) NULL) -&gt; EraseEvent</autodoc>
      <paramlist>
        <param name="Id" type="int" default="0"/>
        <param name="dc" type="p.wxDC" default="(wxDC *) NULL"/>
      </paramlist>
    </constructor>
    <method name="GetDC" overloaded="no">
      <autodoc>GetDC() -&gt; DC</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="FocusEvent" oldname="wxFocusEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="FocusEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0) -&gt; FocusEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
    <method name="SetWindow" overloaded="no">
      <autodoc>SetWindow(Window win)</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ChildFocusEvent" oldname="wxChildFocusEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="ChildFocusEvent" overloaded="no">
      <autodoc>__init__(Window win=None) -&gt; ChildFocusEvent</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ActivateEvent" oldname="wxActivateEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="ActivateEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, bool active=True, int Id=0) -&gt; ActivateEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="active" type="bool" default="True"/>
        <param name="Id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetActive" overloaded="no">
      <autodoc>GetActive() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="InitDialogEvent" oldname="wxInitDialogEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="InitDialogEvent" overloaded="no">
      <autodoc>__init__(int Id=0) -&gt; InitDialogEvent</autodoc>
      <paramlist>
        <param name="Id" type="int" default="0"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MenuEvent" oldname="wxMenuEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="MenuEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0, Menu menu=None) -&gt; MenuEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
        <param name="menu" type="p.wxMenu" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetMenuId" overloaded="no">
      <autodoc>GetMenuId() -&gt; int</autodoc>
    </method>
    <method name="IsPopup" overloaded="no">
      <autodoc>IsPopup() -&gt; bool</autodoc>
    </method>
    <method name="GetMenu" overloaded="no">
      <autodoc>GetMenu() -&gt; Menu</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="CloseEvent" oldname="wxCloseEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="CloseEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0) -&gt; CloseEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="SetLoggingOff" overloaded="no">
      <autodoc>SetLoggingOff(bool logOff)</autodoc>
      <paramlist>
        <param name="logOff" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetLoggingOff" overloaded="no">
      <autodoc>GetLoggingOff() -&gt; bool</autodoc>
    </method>
    <method name="Veto" overloaded="no">
      <autodoc>Veto(bool veto=True)</autodoc>
      <paramlist>
        <param name="veto" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetCanVeto" overloaded="no">
      <autodoc>SetCanVeto(bool canVeto)</autodoc>
      <paramlist>
        <param name="canVeto" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="CanVeto" overloaded="no">
      <autodoc>CanVeto() -&gt; bool</autodoc>
    </method>
    <method name="GetVeto" overloaded="no">
      <autodoc>GetVeto() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ShowEvent" oldname="wxShowEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="ShowEvent" overloaded="no">
      <autodoc>__init__(int winid=0, bool show=False) -&gt; ShowEvent</autodoc>
      <paramlist>
        <param name="winid" type="int" default="0"/>
        <param name="show" type="bool" default="False"/>
      </paramlist>
    </constructor>
    <method name="SetShow" overloaded="no">
      <autodoc>SetShow(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetShow" overloaded="no">
      <autodoc>GetShow() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="IconizeEvent" oldname="wxIconizeEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="IconizeEvent" overloaded="no">
      <autodoc>__init__(int id=0, bool iconized=True) -&gt; IconizeEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
        <param name="iconized" type="bool" default="True"/>
      </paramlist>
    </constructor>
    <method name="Iconized" overloaded="no">
      <autodoc>Iconized() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MaximizeEvent" oldname="wxMaximizeEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="MaximizeEvent" overloaded="no">
      <autodoc>__init__(int id=0) -&gt; MaximizeEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="DropFilesEvent" oldname="wxDropFilesEvent" module="core">
    <baseclass name="wxEvent"/>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="GetNumberOfFiles" overloaded="no">
      <autodoc>GetNumberOfFiles() -&gt; int</autodoc>
    </method>
    <method name="GetFiles" overloaded="no">
      <autodoc>GetFiles() -&gt; PyObject</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="UpdateUIEvent" oldname="wxUpdateUIEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="UpdateUIEvent" overloaded="no">
      <autodoc>__init__(int commandId=0) -&gt; UpdateUIEvent</autodoc>
      <paramlist>
        <param name="commandId" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetChecked" overloaded="no">
      <autodoc>GetChecked() -&gt; bool</autodoc>
    </method>
    <method name="GetEnabled" overloaded="no">
      <autodoc>GetEnabled() -&gt; bool</autodoc>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="GetSetText" overloaded="no">
      <autodoc>GetSetText() -&gt; bool</autodoc>
    </method>
    <method name="GetSetChecked" overloaded="no">
      <autodoc>GetSetChecked() -&gt; bool</autodoc>
    </method>
    <method name="GetSetEnabled" overloaded="no">
      <autodoc>GetSetEnabled() -&gt; bool</autodoc>
    </method>
    <method name="Check" overloaded="no">
      <autodoc>Check(bool check)</autodoc>
      <paramlist>
        <param name="check" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Enable" overloaded="no">
      <autodoc>Enable(bool enable)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <staticmethod name="SetUpdateInterval" overloaded="no">
      <autodoc>SetUpdateInterval(long updateInterval)</autodoc>
      <paramlist>
        <param name="updateInterval" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetUpdateInterval" overloaded="no">
      <autodoc>GetUpdateInterval() -&gt; long</autodoc>
    </staticmethod>
    <staticmethod name="CanUpdate" overloaded="no">
      <autodoc>CanUpdate(Window win) -&gt; bool</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="ResetUpdateTime" overloaded="no">
      <autodoc>ResetUpdateTime()</autodoc>
    </staticmethod>
    <staticmethod name="SetMode" overloaded="no">
      <autodoc>SetMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="wxUpdateUIMode" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetMode" overloaded="no">
      <autodoc>GetMode() -&gt; int</autodoc>
    </staticmethod>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SysColourChangedEvent" oldname="wxSysColourChangedEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="SysColourChangedEvent" overloaded="no">
      <autodoc>__init__() -&gt; SysColourChangedEvent</autodoc>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MouseCaptureChangedEvent" oldname="wxMouseCaptureChangedEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="MouseCaptureChangedEvent" overloaded="no">
      <autodoc>__init__(int winid=0, Window gainedCapture=None) -&gt; MouseCaptureChangedEvent</autodoc>
      <paramlist>
        <param name="winid" type="int" default="0"/>
        <param name="gainedCapture" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetCapturedWindow" overloaded="no">
      <autodoc>GetCapturedWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="DisplayChangedEvent" oldname="wxDisplayChangedEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="DisplayChangedEvent" overloaded="no">
      <autodoc>__init__() -&gt; DisplayChangedEvent</autodoc>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PaletteChangedEvent" oldname="wxPaletteChangedEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="PaletteChangedEvent" overloaded="no">
      <autodoc>__init__(int id=0) -&gt; PaletteChangedEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="SetChangedWindow" overloaded="no">
      <autodoc>SetChangedWindow(Window win)</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetChangedWindow" overloaded="no">
      <autodoc>GetChangedWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="QueryNewPaletteEvent" oldname="wxQueryNewPaletteEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="QueryNewPaletteEvent" overloaded="no">
      <autodoc>__init__(int winid=0) -&gt; QueryNewPaletteEvent</autodoc>
      <paramlist>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="SetPaletteRealized" overloaded="no">
      <autodoc>SetPaletteRealized(bool realized)</autodoc>
      <paramlist>
        <param name="realized" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetPaletteRealized" overloaded="no">
      <autodoc>GetPaletteRealized() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="NavigationKeyEvent" oldname="wxNavigationKeyEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="NavigationKeyEvent" overloaded="no">
      <autodoc>__init__() -&gt; NavigationKeyEvent</autodoc>
    </constructor>
    <method name="GetDirection" overloaded="no">
      <autodoc>GetDirection() -&gt; bool</autodoc>
    </method>
    <method name="SetDirection" overloaded="no">
      <autodoc>SetDirection(bool bForward)</autodoc>
      <paramlist>
        <param name="bForward" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsWindowChange" overloaded="no">
      <autodoc>IsWindowChange() -&gt; bool</autodoc>
    </method>
    <method name="SetWindowChange" overloaded="no">
      <autodoc>SetWindowChange(bool bIs)</autodoc>
      <paramlist>
        <param name="bIs" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetCurrentFocus" overloaded="no">
      <autodoc>GetCurrentFocus() -&gt; Window</autodoc>
    </method>
    <method name="SetCurrentFocus" overloaded="no">
      <autodoc>SetCurrentFocus(Window win)</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="WindowCreateEvent" oldname="wxWindowCreateEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="WindowCreateEvent" overloaded="no">
      <autodoc>__init__(Window win=None) -&gt; WindowCreateEvent</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <class name="WindowDestroyEvent" oldname="wxWindowDestroyEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="WindowDestroyEvent" overloaded="no">
      <autodoc>__init__(Window win=None) -&gt; WindowDestroyEvent</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ContextMenuEvent" oldname="wxContextMenuEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="ContextMenuEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0, Point pt=DefaultPosition) -&gt; ContextMenuEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
        <param name="pt" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </constructor>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="IdleEvent" oldname="wxIdleEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="IdleEvent" overloaded="no">
      <autodoc>__init__() -&gt; IdleEvent</autodoc>
    </constructor>
    <method name="RequestMore" overloaded="no">
      <autodoc>RequestMore(bool needMore=True)</autodoc>
      <paramlist>
        <param name="needMore" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="MoreRequested" overloaded="no">
      <autodoc>MoreRequested() -&gt; bool</autodoc>
    </method>
    <staticmethod name="SetMode" overloaded="no">
      <autodoc>SetMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="wxIdleMode" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetMode" overloaded="no">
      <autodoc>GetMode() -&gt; int</autodoc>
    </staticmethod>
    <staticmethod name="CanSend" overloaded="no">
      <autodoc>CanSend(Window win) -&gt; bool</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PyEvent" oldname="wxPyEvent" module="core">
    <baseclass name="wxEvent"/>
    <constructor name="PyEvent" overloaded="no">
      <autodoc>__init__(int winid=0, wxEventType commandType=wxEVT_NULL) -&gt; PyEvent</autodoc>
      <paramlist>
        <param name="winid" type="int" default="0"/>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxPyEvent">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetSelf" overloaded="no">
      <autodoc>SetSelf(PyObject self)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetSelf" overloaded="no">
      <autodoc>GetSelf() -&gt; PyObject</autodoc>
    </method>
  </class>
  <class name="PyCommandEvent" oldname="wxPyCommandEvent" module="core">
    <baseclass name="wxCommandEvent"/>
    <constructor name="PyCommandEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; PyCommandEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxPyCommandEvent">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetSelf" overloaded="no">
      <autodoc>SetSelf(PyObject self)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetSelf" overloaded="no">
      <autodoc>GetSelf() -&gt; PyObject</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PyApp" oldname="wxPyApp" module="core">
    <baseclass name="wxEvtHandler"/>
    <constructor name="PyApp" overloaded="no">
      <autodoc>__init__() -&gt; PyApp</autodoc>
      <docstring>Create a new application object, starting the bootstrap process.</docstring>
    </constructor>
    <destructor name="~wxPyApp">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetAppName" overloaded="no">
      <autodoc>GetAppName() -&gt; String</autodoc>
      <docstring>Get the application name.</docstring>
    </method>
    <method name="SetAppName" overloaded="no">
      <autodoc>SetAppName(String name)</autodoc>
      <docstring>Set the application name. This value may be used automatically
by wx.Config and such.</docstring>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetClassName" overloaded="no">
      <autodoc>GetClassName() -&gt; String</autodoc>
      <docstring>Get the application's class name.</docstring>
    </method>
    <method name="SetClassName" overloaded="no">
      <autodoc>SetClassName(String name)</autodoc>
      <docstring>Set the application's class name. This value may be used for X-resources if
applicable for the platform</docstring>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetVendorName" overloaded="no">
      <autodoc>GetVendorName() -&gt; String</autodoc>
      <docstring>Get the application's vendor name.</docstring>
    </method>
    <method name="SetVendorName" overloaded="no">
      <autodoc>SetVendorName(String name)</autodoc>
      <docstring>Set the application's vendor name. This value may be used automatically
by wx.Config and such.</docstring>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTraits" overloaded="no">
      <autodoc>GetTraits() -&gt; wxAppTraits</autodoc>
      <docstring>Create the app traits object to which we delegate for everything which either
should be configurable by the user (then he can change the default behaviour
simply by overriding CreateTraits() and returning his own traits object) or
which is GUI/console dependent as then wx.AppTraits allows us to abstract the
differences behind the common facade</docstring>
    </method>
    <method name="ProcessPendingEvents" overloaded="no">
      <autodoc>ProcessPendingEvents()</autodoc>
      <docstring>Process all events in the Pending Events list -- it is necessary to call this
function to process posted events. This happens during each event loop
iteration.</docstring>
    </method>
    <method name="Yield" overloaded="no">
      <autodoc>Yield(bool onlyIfNeeded=False) -&gt; bool</autodoc>
      <docstring>Process all currently pending events right now, instead of waiting until
return to the event loop.  It is an error to call Yield() recursively unless
the value of onlyIfNeeded is True.

WARNING: This function is dangerous as it can lead to unexpected
         reentrancies (i.e. when called from an event handler it
         may result in calling the same event handler again), use
         with _extreme_ care or, better, don't use at all!
</docstring>
      <paramlist>
        <param name="onlyIfNeeded" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="WakeUpIdle" overloaded="no">
      <autodoc>WakeUpIdle()</autodoc>
      <docstring>Make sure that idle events are sent again</docstring>
    </method>
    <method name="MainLoop" overloaded="no">
      <autodoc>MainLoop() -&gt; int</autodoc>
      <docstring>Execute the main GUI loop, the function returns when the loop ends.</docstring>
    </method>
    <method name="Exit" overloaded="no">
      <autodoc>Exit()</autodoc>
      <docstring>Exit the main loop thus terminating the application.</docstring>
    </method>
    <method name="ExitMainLoop" overloaded="no">
      <autodoc>ExitMainLoop()</autodoc>
      <docstring>Exit the main GUI loop during the next iteration (i.e. it does not
stop the program immediately!)</docstring>
    </method>
    <method name="Pending" overloaded="no">
      <autodoc>Pending() -&gt; bool</autodoc>
      <docstring>Returns True if there are unprocessed events in the event queue.</docstring>
    </method>
    <method name="Dispatch" overloaded="no">
      <autodoc>Dispatch() -&gt; bool</autodoc>
      <docstring>Process the first event in the event queue (blocks until an event
appears if there are none currently)</docstring>
    </method>
    <method name="ProcessIdle" overloaded="no">
      <autodoc>ProcessIdle() -&gt; bool</autodoc>
      <docstring>Called from the MainLoop when the application becomes idle and sends an
IdleEvent to all interested parties.  Returns True is more idle events are
needed, False if not.</docstring>
    </method>
    <method name="SendIdleEvents" overloaded="no">
      <autodoc>SendIdleEvents(Window win, IdleEvent event) -&gt; bool</autodoc>
      <docstring>Send idle event to window and all subwindows.  Returns True if more idle time
is requested.</docstring>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
        <param name="event" type="r.wxIdleEvent" default=""/>
      </paramlist>
    </method>
    <method name="IsActive" overloaded="no">
      <autodoc>IsActive() -&gt; bool</autodoc>
      <docstring>Return True if our app has focus.</docstring>
    </method>
    <method name="SetTopWindow" overloaded="no">
      <autodoc>SetTopWindow(Window win)</autodoc>
      <docstring>Set the "main" top level window</docstring>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetTopWindow" overloaded="no">
      <autodoc>GetTopWindow() -&gt; Window</autodoc>
      <docstring>Return the "main" top level window (if it hadn't been set previously with
SetTopWindow(), will return just some top level window and, if there not any,
will return None)</docstring>
    </method>
    <method name="SetExitOnFrameDelete" overloaded="no">
      <autodoc>SetExitOnFrameDelete(bool flag)</autodoc>
      <docstring>Control the exit behaviour: by default, the program will exit the main loop
(and so, usually, terminate) when the last top-level program window is
deleted.  Beware that if you disable this behaviour (with
SetExitOnFrameDelete(False)), you'll have to call ExitMainLoop() explicitly
from somewhere.
</docstring>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetExitOnFrameDelete" overloaded="no">
      <autodoc>GetExitOnFrameDelete() -&gt; bool</autodoc>
      <docstring>Get the current exit behaviour setting.</docstring>
    </method>
    <method name="SetUseBestVisual" overloaded="no">
      <autodoc>SetUseBestVisual(bool flag)</autodoc>
      <docstring>Set whether the app should try to use the best available visual on systems
where more than one is available, (Sun, SGI, XFree86 4, etc.)</docstring>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetUseBestVisual" overloaded="no">
      <autodoc>GetUseBestVisual() -&gt; bool</autodoc>
      <docstring>Get current UseBestVisual setting.</docstring>
    </method>
    <method name="SetPrintMode" overloaded="no">
      <autodoc>SetPrintMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintMode" overloaded="no">
      <autodoc>GetPrintMode() -&gt; int</autodoc>
    </method>
    <method name="SetAssertMode" overloaded="no">
      <autodoc>SetAssertMode(int mode)</autodoc>
      <docstring>Set the OnAssert behaviour for debug and hybrid builds.  The following flags
may be or'd together:

 wx.PYAPP_ASSERT_SUPPRESS         Don't do anything
 wx.PYAPP_ASSERT_EXCEPTION        Turn it into a Python exception if possible (default)
 wx.PYAPP_ASSERT_DIALOG           Display a message dialog
 wx.PYAPP_ASSERT_LOG              Write the assertion info to the wx.Log
</docstring>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetAssertMode" overloaded="no">
      <autodoc>GetAssertMode() -&gt; int</autodoc>
      <docstring>Get the current OnAssert behaviour setting.</docstring>
    </method>
    <staticmethod name="GetMacSupportPCMenuShortcuts" overloaded="no">
      <autodoc>GetMacSupportPCMenuShortcuts() -&gt; bool</autodoc>
    </staticmethod>
    <staticmethod name="GetMacAboutMenuItemId" overloaded="no">
      <autodoc>GetMacAboutMenuItemId() -&gt; long</autodoc>
    </staticmethod>
    <staticmethod name="GetMacPreferencesMenuItemId" overloaded="no">
      <autodoc>GetMacPreferencesMenuItemId() -&gt; long</autodoc>
    </staticmethod>
    <staticmethod name="GetMacExitMenuItemId" overloaded="no">
      <autodoc>GetMacExitMenuItemId() -&gt; long</autodoc>
    </staticmethod>
    <staticmethod name="GetMacHelpMenuTitleName" overloaded="no">
      <autodoc>GetMacHelpMenuTitleName() -&gt; String</autodoc>
    </staticmethod>
    <staticmethod name="SetMacSupportPCMenuShortcuts" overloaded="no">
      <autodoc>SetMacSupportPCMenuShortcuts(bool val)</autodoc>
      <paramlist>
        <param name="val" type="bool" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="SetMacAboutMenuItemId" overloaded="no">
      <autodoc>SetMacAboutMenuItemId(long val)</autodoc>
      <paramlist>
        <param name="val" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="SetMacPreferencesMenuItemId" overloaded="no">
      <autodoc>SetMacPreferencesMenuItemId(long val)</autodoc>
      <paramlist>
        <param name="val" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="SetMacExitMenuItemId" overloaded="no">
      <autodoc>SetMacExitMenuItemId(long val)</autodoc>
      <paramlist>
        <param name="val" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="SetMacHelpMenuTitleName" overloaded="no">
      <autodoc>SetMacHelpMenuTitleName(String val)</autodoc>
      <paramlist>
        <param name="val" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <method name="_BootstrapApp" overloaded="no">
      <autodoc>_BootstrapApp()</autodoc>
      <docstring>For internal use only</docstring>
    </method>
    <staticmethod name="GetComCtl32Version" overloaded="no">
      <autodoc>GetComCtl32Version() -&gt; int</autodoc>
      <docstring>Returns 400, 470, 471 for comctl32.dll 4.00, 4.70, 4.71 or 0 if it
wasn't found at all.  Raises an exception on non-Windows platforms.</docstring>
    </staticmethod>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <function oldname="wxExit" name="Exit" overloaded="no">
    <autodoc>Exit()</autodoc>
    <docstring>Force an exit of the application.  Convenience for wx.GetApp().Exit()</docstring>
  </function>
  <function oldname="wxYield" name="Yield" overloaded="no">
    <autodoc>Yield() -&gt; bool</autodoc>
    <docstring>Yield to other apps/messages.  Convenience for wx.GetApp().Yield()</docstring>
  </function>
  <function oldname="wxYieldIfNeeded" name="YieldIfNeeded" overloaded="no">
    <autodoc>YieldIfNeeded() -&gt; bool</autodoc>
    <docstring>Yield to other apps/messages.  Convenience for wx.GetApp().Yield(True)</docstring>
  </function>
  <function oldname="wxSafeYield" name="SafeYield" overloaded="no">
    <autodoc>SafeYield(Window win=None, bool onlyIfNeeded=False) -&gt; bool</autodoc>
    <docstring>This function is similar to wx.Yield, except that it disables the user input
to all program windows before calling wx.Yield and re-enables it again
afterwards. If win is not None, this window will remain enabled, allowing the
implementation of some limited user interaction.

Returns the result of the call to wx.Yield.</docstring>
    <paramlist>
      <param name="win" type="p.wxWindow" default="NULL"/>
      <param name="onlyIfNeeded" type="bool" default="False"/>
    </paramlist>
  </function>
  <function oldname="wxWakeUpIdle" name="WakeUpIdle" overloaded="no">
    <autodoc>WakeUpIdle()</autodoc>
    <docstring>Cause the message queue to become empty again, so idle events will be sent.</docstring>
  </function>
  <function oldname="wxPostEvent" name="PostEvent" overloaded="no">
    <autodoc>PostEvent(EvtHandler dest, Event event)</autodoc>
    <docstring>Send an event to a window or other wx.EvtHandler to be processed later.</docstring>
    <paramlist>
      <param name="dest" type="p.wxEvtHandler" default=""/>
      <param name="event" type="r.wxEvent" default=""/>
    </paramlist>
  </function>
  <function oldname="wxApp_CleanUp" name="App_CleanUp" overloaded="no">
    <autodoc>App_CleanUp()</autodoc>
    <docstring>For internal use only, it is used to cleanup after wxWindows when Python shuts down.</docstring>
  </function>
  <function oldname="wxGetApp" name="GetApp" overloaded="no">
    <autodoc>GetApp() -&gt; PyApp</autodoc>
    <docstring>Return a reference to the current wx.App object.</docstring>
  </function>
  <pythoncode>
#----------------------------------------------------------------------

class PyOnDemandOutputWindow:
    """
    A class that can be used for redirecting Python's stdout and
    stderr streams.  It will do nothing until something is wrriten to
    the stream at which point it will create a Frame with a text area
    and write the text there.
    """
    def __init__(self, title = "wxPython: stdout/stderr"):
        self.frame  = None
        self.title  = title
        self.parent = None

    def SetParent(self, parent):
        """Set the window to be used as the popup Frame's parent."""
        self.parent = parent


    def CreateOutputWindow(self, st):
        self.frame = wx.Frame(self.parent, -1, self.title,
                              style=wx.DEFAULT_FRAME_STYLE | wx.NO_FULL_REPAINT_ON_RESIZE)
        self.text  = wx.TextCtrl(self.frame, -1, "",
                                 style = wx.TE_MULTILINE | wx.TE_READONLY)
        self.text.AppendText(st)
        self.frame.SetSize((450, 300))
        self.frame.Show(True)
        EVT_CLOSE(self.frame, self.OnCloseWindow)
        

    # These methods provide the file-like output behaviour.
    def write(self, text):
        """
        Create the output window if needed and write the string to it.
        If not called in the context of the gui thread then uses
        CallAfter to do the work there.
        """        
        if self.frame is None:
            if not wx.Thread_IsMain():
                wx.CallAfter(self.CreateOutputWindow, text)
            else:
                self.CreateOutputWindow(text)
        else:
            if not wx.Thread_IsMain():
                wx.CallAfter(self.text.AppendText, text)
            else:
                self.text.AppendText(text)


    def close(self):
        if self.frame is not None:
            wx.CallAfter(self.frame.Close)


    def OnCloseWindow(self, event):
        if self.frame is not None:
            self.frame.Destroy()
        self.frame = None
        self.text  = None

#----------------------------------------------------------------------

_defRedirect = (wx.Platform == '__WXMSW__' or wx.Platform == '__WXMAC__')

class App(wx.PyApp):
    """
    The main application class.  Derive from this and implement an OnInit
    method that creates a frame and then calls self.SetTopWindow(frame)
    """
    outputWindowClass = PyOnDemandOutputWindow

    def __init__(self, redirect=_defRedirect, filename=None, useBestVisual=False):
        wx.PyApp.__init__(self)

        if wx.Platform == "__WXMAC__":
            try:
                import MacOS
                if not MacOS.WMAvailable():
                    print """\\
This program needs access to the screen. Please run with 'pythonw',
not 'python', and only when you are logged in on the main display of
your Mac."""
                    _sys.exit(1)
            except:
                pass

        # This has to be done before OnInit
        self.SetUseBestVisual(useBestVisual)

        # Set the default handler for SIGINT.  This fixes a problem
        # where if Ctrl-C is pressed in the console that started this
        # app then it will not appear to do anything, (not even send
        # KeyboardInterrupt???)  but will later segfault on exit.  By
        # setting the default handler then the app will exit, as
        # expected (depending on platform.)
        try:
            import signal
            signal.signal(signal.SIGINT, signal.SIG_DFL)
        except:
            pass

        # Save and redirect the stdio to a window?
        self.stdioWin = None
        self.saveStdio = (_sys.stdout, _sys.stderr)
        if redirect:
            self.RedirectStdio(filename)

        # This finishes the initialization of wxWindows and then calls
        # the OnInit that should be present in the derived class
        self._BootstrapApp()


    def __del__(self):
        try:
            self.RestoreStdio()  # Just in case the MainLoop was overridden
        except:
            pass


    def SetTopWindow(self, frame):
        """Set the \\"main\\" top level window"""
        if self.stdioWin:
            self.stdioWin.SetParent(frame)
        wx.PyApp.SetTopWindow(self, frame)


    def MainLoop(self):
        """Execute the main GUI event loop"""
        wx.PyApp.MainLoop(self)
        self.RestoreStdio()


    def RedirectStdio(self, filename):
        """Redirect sys.stdout and sys.stderr to a file or a popup window."""
        if filename:
            _sys.stdout = _sys.stderr = open(filename, 'a')
        else:
            self.stdioWin = self.outputWindowClass()
            _sys.stdout = _sys.stderr = self.stdioWin


    def RestoreStdio(self):
        _sys.stdout, _sys.stderr = self.saveStdio



# change from wxPyApp_ to wxApp_
App_GetMacSupportPCMenuShortcuts = _core.PyApp_GetMacSupportPCMenuShortcuts
App_GetMacAboutMenuItemId        = _core.PyApp_GetMacAboutMenuItemId
App_GetMacPreferencesMenuItemId  = _core.PyApp_GetMacPreferencesMenuItemId
App_GetMacExitMenuItemId         = _core.PyApp_GetMacExitMenuItemId
App_GetMacHelpMenuTitleName      = _core.PyApp_GetMacHelpMenuTitleName
App_SetMacSupportPCMenuShortcuts = _core.PyApp_SetMacSupportPCMenuShortcuts
App_SetMacAboutMenuItemId        = _core.PyApp_SetMacAboutMenuItemId
App_SetMacPreferencesMenuItemId  = _core.PyApp_SetMacPreferencesMenuItemId
App_SetMacExitMenuItemId         = _core.PyApp_SetMacExitMenuItemId
App_SetMacHelpMenuTitleName      = _core.PyApp_SetMacHelpMenuTitleName
App_GetComCtl32Version           = _core.PyApp_GetComCtl32Version

#----------------------------------------------------------------------------

class PySimpleApp(wx.App):
    """
    A simple application class.  You can just create one of these and
    then then make your top level windows later, and not have to worry
    about OnInit."""

    def __init__(self, redirect=False, filename=None, useBestVisual=False):
        wx.App.__init__(self, redirect, filename, useBestVisual)
        
    def OnInit(self):
        wx.InitAllImageHandlers()
        return True


# Is anybody using this one?
class PyWidgetTester(wx.App):
    def __init__(self, size = (250, 100)):
        self.size = size
        wx.App.__init__(self, 0)

    def OnInit(self):
        self.frame = wx.Frame(None, -1, "Widget Tester", pos=(0,0), size=self.size)
        self.SetTopWindow(self.frame)
        return True

    def SetWidget(self, widgetClass, *args):
        w = widgetClass(self.frame, *args)
        self.frame.Show(True)

#----------------------------------------------------------------------------
# DO NOT hold any other references to this object.  This is how we
# know when to cleanup system resources that wxWin is holding.  When
# the sys module is unloaded, the refcount on sys.__wxPythonCleanup
# goes to zero and it calls the wxApp_CleanUp function.

class __wxPyCleanup:
    def __init__(self):
        self.cleanup = _core.App_CleanUp
    def __del__(self):
        self.cleanup()

_sys.__wxPythonCleanup = __wxPyCleanup()

## # another possible solution, but it gets called too early...
## if sys.version[0] == '2':
##     import atexit
##     atexit.register(_core.wxApp_CleanUp)
## else:
##     sys.exitfunc = _core.wxApp_CleanUp


#----------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="AcceleratorEntry" oldname="wxAcceleratorEntry" module="core">
    <constructor name="AcceleratorEntry" overloaded="no">
      <autodoc>__init__(int flags=0, int keyCode=0, int cmd=0, MenuItem item=None) -&gt; AcceleratorEntry</autodoc>
      <paramlist>
        <param name="flags" type="int" default="0"/>
        <param name="keyCode" type="int" default="0"/>
        <param name="cmd" type="int" default="0"/>
        <param name="item" type="p.wxMenuItem" default="NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxAcceleratorEntry">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Set" overloaded="no">
      <autodoc>Set(int flags, int keyCode, int cmd, MenuItem item=None)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
        <param name="keyCode" type="int" default=""/>
        <param name="cmd" type="int" default=""/>
        <param name="item" type="p.wxMenuItem" default="NULL"/>
      </paramlist>
    </method>
    <method name="SetMenuItem" overloaded="no">
      <autodoc>SetMenuItem(MenuItem item)</autodoc>
      <paramlist>
        <param name="item" type="p.wxMenuItem" default=""/>
      </paramlist>
    </method>
    <method name="GetMenuItem" overloaded="no">
      <autodoc>GetMenuItem() -&gt; MenuItem</autodoc>
    </method>
    <method name="GetFlags" overloaded="no">
      <autodoc>GetFlags() -&gt; int</autodoc>
    </method>
    <method name="GetKeyCode" overloaded="no">
      <autodoc>GetKeyCode() -&gt; int</autodoc>
    </method>
    <method name="GetCommand" overloaded="no">
      <autodoc>GetCommand() -&gt; int</autodoc>
    </method>
  </class>
  <class name="AcceleratorTable" oldname="wxAcceleratorTable" module="core">
    <baseclass name="wxObject"/>
    <constructor name="AcceleratorTable" overloaded="no">
      <autodoc>__init__(entries) -&gt; AcceleratorTable</autodoc>
      <docstring>Construct an AcceleratorTable from a list of AcceleratorEntry items or
3-tuples (flags, keyCode, cmdID)</docstring>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="entries" type="p.q(const).wxAcceleratorEntry" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxAcceleratorTable">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
  </class>
  <function oldname="wxGetAccelFromString" name="GetAccelFromString" overloaded="no">
    <autodoc>GetAccelFromString(String label) -&gt; AcceleratorEntry</autodoc>
    <paramlist>
      <param name="label" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Window" oldname="wxWindow" module="core">
    <baseclass name="wxEvtHandler"/>
    <constructor name="Window" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; Window</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreWindow" overloaded="no">
      <autodoc>PreWindow() -&gt; Window</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </method>
    <method name="Close" overloaded="no">
      <autodoc>Close(bool force=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="force" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy() -&gt; bool</autodoc>
      <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
    </method>
    <method name="DestroyChildren" overloaded="no">
      <autodoc>DestroyChildren() -&gt; bool</autodoc>
    </method>
    <method name="IsBeingDeleted" overloaded="no">
      <autodoc>IsBeingDeleted() -&gt; bool</autodoc>
    </method>
    <method name="SetTitle" overloaded="no">
      <autodoc>SetTitle(String title)</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTitle" overloaded="no">
      <autodoc>GetTitle() -&gt; String</autodoc>
    </method>
    <method name="SetLabel" overloaded="no">
      <autodoc>SetLabel(String label)</autodoc>
      <paramlist>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel() -&gt; String</autodoc>
    </method>
    <method name="SetName" overloaded="no">
      <autodoc>SetName(String name)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(int winid)</autodoc>
      <paramlist>
        <param name="winid" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; int</autodoc>
    </method>
    <staticmethod name="NewControlId" overloaded="no">
      <autodoc>NewControlId() -&gt; int</autodoc>
    </staticmethod>
    <staticmethod name="NextControlId" overloaded="no">
      <autodoc>NextControlId(int winid) -&gt; int</autodoc>
      <paramlist>
        <param name="winid" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="PrevControlId" overloaded="no">
      <autodoc>PrevControlId(int winid) -&gt; int</autodoc>
      <paramlist>
        <param name="winid" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetDimensions" overloaded="no">
      <autodoc>SetDimensions(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
      </paramlist>
    </method>
    <method name="SetRect" overloaded="no">
      <autodoc>SetRect(Rect rect, int sizeFlags=SIZE_AUTO)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
      </paramlist>
    </method>
    <method name="SetSizeWH" overloaded="no">
      <autodoc>SetSizeWH(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Move" overloaded="no">
      <autodoc>Move(Point pt, int flags=SIZE_USE_EXISTING)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="flags" type="int" default="wxSIZE_USE_EXISTING"/>
      </paramlist>
    </method>
    <pythoncode> SetPosition = Move </pythoncode>
    <method name="MoveXY" overloaded="no">
      <autodoc>MoveXY(int x, int y, int flags=SIZE_USE_EXISTING)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="flags" type="int" default="wxSIZE_USE_EXISTING"/>
      </paramlist>
    </method>
    <method name="Raise" overloaded="no">
      <autodoc>Raise()</autodoc>
    </method>
    <method name="Lower" overloaded="no">
      <autodoc>Lower()</autodoc>
    </method>
    <method name="SetClientSize" overloaded="no">
      <autodoc>SetClientSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetClientSizeWH" overloaded="no">
      <autodoc>SetClientSizeWH(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetClientRect" overloaded="no">
      <autodoc>SetClientRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
      <docstring>Get the window's position.</docstring>
    </method>
    <method name="GetPositionTuple" overloaded="no">
      <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
      <docstring>Get the window's position.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
      <docstring>Get the window size.</docstring>
    </method>
    <method name="GetSizeTuple" overloaded="no">
      <autodoc>GetSizeTuple() -&gt; (width, height)</autodoc>
      <docstring>Get the window size.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetRect" overloaded="no">
      <autodoc>GetRect() -&gt; Rect</autodoc>
    </method>
    <method name="GetClientSize" overloaded="no">
      <autodoc>GetClientSize() -&gt; Size</autodoc>
      <docstring>Get the window's client size.</docstring>
    </method>
    <method name="GetClientSizeTuple" overloaded="no">
      <autodoc>GetClientSizeTuple() -&gt; (width, height)</autodoc>
      <docstring>Get the window's client size.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetClientAreaOrigin" overloaded="no">
      <autodoc>GetClientAreaOrigin() -&gt; Point</autodoc>
    </method>
    <method name="GetClientRect" overloaded="no">
      <autodoc>GetClientRect() -&gt; Rect</autodoc>
    </method>
    <method name="GetBestSize" overloaded="no">
      <autodoc>GetBestSize() -&gt; Size</autodoc>
      <docstring>Get the size best suited for the window (in fact, minimal acceptable size
using which it will still look "nice")</docstring>
    </method>
    <method name="GetBestSizeTuple" overloaded="no">
      <autodoc>GetBestSizeTuple() -&gt; (width, height)</autodoc>
      <docstring>Get the size best suited for the window (in fact, minimal acceptable size
using which it will still look "nice")</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetAdjustedBestSize" overloaded="no">
      <autodoc>GetAdjustedBestSize() -&gt; Size</autodoc>
    </method>
    <method name="Center" overloaded="no">
      <autodoc>Center(int direction=BOTH)</autodoc>
      <paramlist>
        <param name="direction" type="int" default="wxBOTH"/>
      </paramlist>
    </method>
    <pythoncode> Centre = Center </pythoncode>
    <method name="CenterOnScreen" overloaded="no">
      <autodoc>CenterOnScreen(int dir=BOTH)</autodoc>
      <paramlist>
        <param name="dir" type="int" default="wxBOTH"/>
      </paramlist>
    </method>
    <pythoncode> CentreOnScreen = CenterOnScreen </pythoncode>
    <method name="CenterOnParent" overloaded="no">
      <autodoc>CenterOnParent(int dir=BOTH)</autodoc>
      <paramlist>
        <param name="dir" type="int" default="wxBOTH"/>
      </paramlist>
    </method>
    <pythoncode> CentreOnParent = CenterOnParent </pythoncode>
    <method name="Fit" overloaded="no">
      <autodoc>Fit()</autodoc>
    </method>
    <method name="FitInside" overloaded="no">
      <autodoc>FitInside()</autodoc>
    </method>
    <method name="SetSizeHints" overloaded="no">
      <autodoc>SetSizeHints(int minW, int minH, int maxW=-1, int maxH=-1, int incW=-1, 
    int incH=-1)</autodoc>
      <paramlist>
        <param name="minW" type="int" default=""/>
        <param name="minH" type="int" default=""/>
        <param name="maxW" type="int" default="-1"/>
        <param name="maxH" type="int" default="-1"/>
        <param name="incW" type="int" default="-1"/>
        <param name="incH" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="SetVirtualSizeHints" overloaded="no">
      <autodoc>SetVirtualSizeHints(int minW, int minH, int maxW=-1, int maxH=-1)</autodoc>
      <paramlist>
        <param name="minW" type="int" default=""/>
        <param name="minH" type="int" default=""/>
        <param name="maxW" type="int" default="-1"/>
        <param name="maxH" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="GetMinWidth" overloaded="no">
      <autodoc>GetMinWidth() -&gt; int</autodoc>
    </method>
    <method name="GetMinHeight" overloaded="no">
      <autodoc>GetMinHeight() -&gt; int</autodoc>
    </method>
    <method name="GetMaxWidth" overloaded="no">
      <autodoc>GetMaxWidth() -&gt; int</autodoc>
    </method>
    <method name="GetMaxHeight" overloaded="no">
      <autodoc>GetMaxHeight() -&gt; int</autodoc>
    </method>
    <method name="GetMaxSize" overloaded="no">
      <autodoc>GetMaxSize() -&gt; Size</autodoc>
    </method>
    <method name="SetVirtualSize" overloaded="no">
      <autodoc>SetVirtualSize(Size size)</autodoc>
      <docstring>Set the the virtual size of a window.  For most windows this is just the
client area of the window, but for some like scrolled windows it is more or
less independent of the screen window size.</docstring>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetVirtualSizeWH" overloaded="no">
      <autodoc>SetVirtualSizeWH(int w, int h)</autodoc>
      <docstring>Set the the virtual size of a window.  For most windows this is just the
client area of the window, but for some like scrolled windows it is more or
less independent of the screen window size.</docstring>
      <paramlist>
        <param name="w" type="int" default=""/>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetVirtualSize" overloaded="no">
      <autodoc>GetVirtualSize() -&gt; Size</autodoc>
      <docstring>Get the the virtual size of the window.  For most windows this is just
the client area of the window, but for some like scrolled windows it is
more or less independent of the screen window size.</docstring>
    </method>
    <method name="GetVirtualSizeTuple" overloaded="no">
      <autodoc>GetVirtualSizeTuple() -&gt; (width, height)</autodoc>
      <docstring>Get the the virtual size of the window.  For most windows this is just
the client area of the window, but for some like scrolled windows it is
more or less independent of the screen window size.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetBestVirtualSize" overloaded="no">
      <autodoc>GetBestVirtualSize() -&gt; Size</autodoc>
    </method>
    <method name="Show" overloaded="no">
      <autodoc>Show(bool show=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="show" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Hide" overloaded="no">
      <autodoc>Hide() -&gt; bool</autodoc>
    </method>
    <method name="Enable" overloaded="no">
      <autodoc>Enable(bool enable=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Disable" overloaded="no">
      <autodoc>Disable() -&gt; bool</autodoc>
    </method>
    <method name="IsShown" overloaded="no">
      <autodoc>IsShown() -&gt; bool</autodoc>
    </method>
    <method name="IsEnabled" overloaded="no">
      <autodoc>IsEnabled() -&gt; bool</autodoc>
    </method>
    <method name="SetWindowStyleFlag" overloaded="no">
      <autodoc>SetWindowStyleFlag(long style)</autodoc>
      <paramlist>
        <param name="style" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetWindowStyleFlag" overloaded="no">
      <autodoc>GetWindowStyleFlag() -&gt; long</autodoc>
    </method>
    <method name="SetWindowStyle" overloaded="no">
      <autodoc>SetWindowStyle(long style)</autodoc>
      <paramlist>
        <param name="style" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetWindowStyle" overloaded="no">
      <autodoc>GetWindowStyle() -&gt; long</autodoc>
    </method>
    <method name="HasFlag" overloaded="no">
      <autodoc>HasFlag(int flag) -&gt; bool</autodoc>
      <paramlist>
        <param name="flag" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsRetained" overloaded="no">
      <autodoc>IsRetained() -&gt; bool</autodoc>
    </method>
    <method name="SetExtraStyle" overloaded="no">
      <autodoc>SetExtraStyle(long exStyle)</autodoc>
      <paramlist>
        <param name="exStyle" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetExtraStyle" overloaded="no">
      <autodoc>GetExtraStyle() -&gt; long</autodoc>
    </method>
    <method name="MakeModal" overloaded="no">
      <autodoc>MakeModal(bool modal=True)</autodoc>
      <paramlist>
        <param name="modal" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetThemeEnabled" overloaded="no">
      <autodoc>SetThemeEnabled(bool enableTheme)</autodoc>
      <paramlist>
        <param name="enableTheme" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetThemeEnabled" overloaded="no">
      <autodoc>GetThemeEnabled() -&gt; bool</autodoc>
    </method>
    <method name="ShouldInheritColours" overloaded="no">
      <autodoc>ShouldInheritColours() -&gt; bool</autodoc>
    </method>
    <method name="SetFocus" overloaded="no">
      <autodoc>SetFocus()</autodoc>
    </method>
    <method name="SetFocusFromKbd" overloaded="no">
      <autodoc>SetFocusFromKbd()</autodoc>
    </method>
    <staticmethod name="FindFocus" overloaded="no">
      <autodoc>FindFocus() -&gt; Window</autodoc>
    </staticmethod>
    <method name="AcceptsFocus" overloaded="no">
      <autodoc>AcceptsFocus() -&gt; bool</autodoc>
    </method>
    <method name="AcceptsFocusFromKeyboard" overloaded="no">
      <autodoc>AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
    </method>
    <method name="GetDefaultItem" overloaded="no">
      <autodoc>GetDefaultItem() -&gt; Window</autodoc>
    </method>
    <method name="SetDefaultItem" overloaded="no">
      <autodoc>SetDefaultItem(Window child) -&gt; Window</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="SetTmpDefaultItem" overloaded="no">
      <autodoc>SetTmpDefaultItem(Window win)</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetChildren" overloaded="no">
      <autodoc>GetChildren() -&gt; PyObject</autodoc>
    </method>
    <method name="GetParent" overloaded="no">
      <autodoc>GetParent() -&gt; Window</autodoc>
    </method>
    <method name="GetGrandParent" overloaded="no">
      <autodoc>GetGrandParent() -&gt; Window</autodoc>
    </method>
    <method name="IsTopLevel" overloaded="no">
      <autodoc>IsTopLevel() -&gt; bool</autodoc>
    </method>
    <method name="Reparent" overloaded="no">
      <autodoc>Reparent(Window newParent) -&gt; bool</autodoc>
      <paramlist>
        <param name="newParent" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="AddChild" overloaded="no">
      <autodoc>AddChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="RemoveChild" overloaded="no">
      <autodoc>RemoveChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="FindWindowById" overloaded="no">
      <autodoc>FindWindowById(long winid) -&gt; Window</autodoc>
      <paramlist>
        <param name="winid" type="long" default=""/>
      </paramlist>
    </method>
    <method name="FindWindowByName" overloaded="no">
      <autodoc>FindWindowByName(String name) -&gt; Window</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetEventHandler" overloaded="no">
      <autodoc>GetEventHandler() -&gt; EvtHandler</autodoc>
    </method>
    <method name="SetEventHandler" overloaded="no">
      <autodoc>SetEventHandler(EvtHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="PushEventHandler" overloaded="no">
      <autodoc>PushEventHandler(EvtHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="PopEventHandler" overloaded="no">
      <autodoc>PopEventHandler(bool deleteHandler=False) -&gt; EvtHandler</autodoc>
      <paramlist>
        <param name="deleteHandler" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="RemoveEventHandler" overloaded="no">
      <autodoc>RemoveEventHandler(EvtHandler handler) -&gt; bool</autodoc>
      <paramlist>
        <param name="handler" type="p.wxEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="SetValidator" overloaded="no">
      <autodoc>SetValidator(Validator validator)</autodoc>
      <paramlist>
        <param name="validator" type="r.q(const).wxValidator" default=""/>
      </paramlist>
    </method>
    <method name="GetValidator" overloaded="no">
      <autodoc>GetValidator() -&gt; Validator</autodoc>
    </method>
    <method name="SetAcceleratorTable" overloaded="no">
      <autodoc>SetAcceleratorTable(AcceleratorTable accel)</autodoc>
      <paramlist>
        <param name="accel" type="r.q(const).wxAcceleratorTable" default=""/>
      </paramlist>
    </method>
    <method name="GetAcceleratorTable" overloaded="no">
      <autodoc>GetAcceleratorTable() -&gt; AcceleratorTable</autodoc>
    </method>
    <method name="RegisterHotKey" overloaded="no">
      <autodoc>RegisterHotKey(int hotkeyId, int modifiers, int keycode) -&gt; bool</autodoc>
      <paramlist>
        <param name="hotkeyId" type="int" default=""/>
        <param name="modifiers" type="int" default=""/>
        <param name="keycode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="UnregisterHotKey" overloaded="no">
      <autodoc>UnregisterHotKey(int hotkeyId) -&gt; bool</autodoc>
      <paramlist>
        <param name="hotkeyId" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ConvertDialogPointToPixels" overloaded="no">
      <autodoc>ConvertDialogPointToPixels(Point pt) -&gt; Point</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="ConvertDialogSizeToPixels" overloaded="no">
      <autodoc>ConvertDialogSizeToPixels(Size sz) -&gt; Size</autodoc>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="DLG_PNT" overloaded="no">
      <autodoc>DLG_PNT(Point pt) -&gt; Point</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DLG_SZE" overloaded="no">
      <autodoc>DLG_SZE(Size sz) -&gt; Size</autodoc>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="ConvertPixelPointToDialog" overloaded="no">
      <autodoc>ConvertPixelPointToDialog(Point pt) -&gt; Point</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="ConvertPixelSizeToDialog" overloaded="no">
      <autodoc>ConvertPixelSizeToDialog(Size sz) -&gt; Size</autodoc>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="WarpPointer" overloaded="no">
      <autodoc>WarpPointer(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CaptureMouse" overloaded="no">
      <autodoc>CaptureMouse()</autodoc>
    </method>
    <method name="ReleaseMouse" overloaded="no">
      <autodoc>ReleaseMouse()</autodoc>
    </method>
    <staticmethod name="GetCapture" overloaded="no">
      <autodoc>GetCapture() -&gt; Window</autodoc>
    </staticmethod>
    <method name="HasCapture" overloaded="no">
      <autodoc>HasCapture() -&gt; bool</autodoc>
    </method>
    <method name="Refresh" overloaded="no">
      <autodoc>Refresh(bool eraseBackground=True, Rect rect=None)</autodoc>
      <paramlist>
        <param name="eraseBackground" type="bool" default="True"/>
        <param name="rect" type="p.q(const).wxRect" default="NULL"/>
      </paramlist>
    </method>
    <method name="RefreshRect" overloaded="no">
      <autodoc>RefreshRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="Update" overloaded="no">
      <autodoc>Update()</autodoc>
    </method>
    <method name="ClearBackground" overloaded="no">
      <autodoc>ClearBackground()</autodoc>
    </method>
    <method name="Freeze" overloaded="no">
      <autodoc>Freeze()</autodoc>
    </method>
    <method name="Thaw" overloaded="no">
      <autodoc>Thaw()</autodoc>
    </method>
    <method name="PrepareDC" overloaded="no">
      <autodoc>PrepareDC(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="GetUpdateRegion" overloaded="no">
      <autodoc>GetUpdateRegion() -&gt; Region</autodoc>
    </method>
    <method name="GetUpdateClientRect" overloaded="no">
      <autodoc>GetUpdateClientRect() -&gt; Rect</autodoc>
    </method>
    <method name="IsExposed" overloaded="no">
      <autodoc>IsExposed(int x, int y, int w=1, int h=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="w" type="int" default="1"/>
        <param name="h" type="int" default="1"/>
      </paramlist>
    </method>
    <method name="IsExposedPoint" overloaded="no">
      <autodoc>IsExposedPoint(Point pt) -&gt; bool</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="isExposedRect" overloaded="no">
      <autodoc>isExposedRect(Rect rect) -&gt; bool</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour colour) -&gt; bool</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetForegroundColour" overloaded="no">
      <autodoc>SetForegroundColour(Colour colour) -&gt; bool</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetBackgroundColour" overloaded="no">
      <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetForegroundColour" overloaded="no">
      <autodoc>GetForegroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="SetCursor" overloaded="no">
      <autodoc>SetCursor(Cursor cursor) -&gt; bool</autodoc>
      <paramlist>
        <param name="cursor" type="r.q(const).wxCursor" default=""/>
      </paramlist>
    </method>
    <method name="GetCursor" overloaded="no">
      <autodoc>GetCursor() -&gt; Cursor</autodoc>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font) -&gt; bool</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <method name="SetCaret" overloaded="no">
      <autodoc>SetCaret(Caret caret)</autodoc>
      <paramlist>
        <param name="caret" type="p.wxCaret" default=""/>
      </paramlist>
    </method>
    <method name="GetCaret" overloaded="no">
      <autodoc>GetCaret() -&gt; Caret</autodoc>
    </method>
    <method name="GetCharHeight" overloaded="no">
      <autodoc>GetCharHeight() -&gt; int</autodoc>
    </method>
    <method name="GetCharWidth" overloaded="no">
      <autodoc>GetCharWidth() -&gt; int</autodoc>
    </method>
    <method name="GetTextExtent" overloaded="no">
      <autodoc>GetTextExtent(String string) -&gt; (width, height)</autodoc>
      <docstring>Get the width and height of the text using the current font.</docstring>
      <paramlist>
        <param name="string" type="r.q(const).wxString" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetFullTextExtent" overloaded="no">
      <autodoc>GetFullTextExtent(String string, Font font=None) -&gt;
   (width, height, descent, externalLeading)</autodoc>
      <docstring>Get the width, height, decent and leading of the text using the current or specified font.</docstring>
      <paramlist>
        <param name="string" type="r.q(const).wxString" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="font" type="p.q(const).wxFont" default="NULL"/>
      </paramlist>
    </method>
    <method name="ClientToScreenXY" overloaded="no">
      <autodoc>ClientToScreenXY(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="p.int" default=""/>
        <param name="y" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="ScreenToClientXY" overloaded="no">
      <autodoc>ScreenToClientXY(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="p.int" default=""/>
        <param name="y" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="ClientToScreen" overloaded="no">
      <autodoc>ClientToScreen(Point pt) -&gt; Point</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="ScreenToClient" overloaded="no">
      <autodoc>ScreenToClient(Point pt) -&gt; Point</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="HitTestXY" overloaded="no">
      <autodoc>HitTestXY(int x, int y) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point pt) -&gt; int</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetBorderFlags" overloaded="no">
      <autodoc>GetBorderFlags(long flags) -&gt; int</autodoc>
      <paramlist>
        <param name="flags" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetBorder" overloaded="no">
      <autodoc>GetBorder() -&gt; int</autodoc>
    </method>
    <method name="UpdateWindowUI" overloaded="no">
      <autodoc>UpdateWindowUI(long flags=UPDATE_UI_NONE)</autodoc>
      <paramlist>
        <param name="flags" type="long" default="wxUPDATE_UI_NONE"/>
      </paramlist>
    </method>
    <method name="PopupMenuXY" overloaded="no">
      <autodoc>PopupMenuXY(Menu menu, int x, int y) -&gt; bool</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="PopupMenu" overloaded="no">
      <autodoc>PopupMenu(Menu menu, Point pos) -&gt; bool</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetHandle" overloaded="no">
      <autodoc>GetHandle() -&gt; long</autodoc>
    </method>
    <method name="HasScrollbar" overloaded="no">
      <autodoc>HasScrollbar(int orient) -&gt; bool</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetScrollbar" overloaded="no">
      <autodoc>SetScrollbar(int orient, int pos, int thumbvisible, int range, bool refresh=True)</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
        <param name="pos" type="int" default=""/>
        <param name="thumbvisible" type="int" default=""/>
        <param name="range" type="int" default=""/>
        <param name="refresh" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetScrollPos" overloaded="no">
      <autodoc>SetScrollPos(int orient, int pos, bool refresh=True)</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
        <param name="pos" type="int" default=""/>
        <param name="refresh" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetScrollPos" overloaded="no">
      <autodoc>GetScrollPos(int orient) -&gt; int</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetScrollThumb" overloaded="no">
      <autodoc>GetScrollThumb(int orient) -&gt; int</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetScrollRange" overloaded="no">
      <autodoc>GetScrollRange(int orient) -&gt; int</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ScrollWindow" overloaded="no">
      <autodoc>ScrollWindow(int dx, int dy, Rect rect=None)</autodoc>
      <paramlist>
        <param name="dx" type="int" default=""/>
        <param name="dy" type="int" default=""/>
        <param name="rect" type="p.q(const).wxRect" default="NULL"/>
      </paramlist>
    </method>
    <method name="ScrollLines" overloaded="no">
      <autodoc>ScrollLines(int lines) -&gt; bool</autodoc>
      <paramlist>
        <param name="lines" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ScrollPages" overloaded="no">
      <autodoc>ScrollPages(int pages) -&gt; bool</autodoc>
      <paramlist>
        <param name="pages" type="int" default=""/>
      </paramlist>
    </method>
    <method name="LineUp" overloaded="no">
      <autodoc>LineUp() -&gt; bool</autodoc>
    </method>
    <method name="LineDown" overloaded="no">
      <autodoc>LineDown() -&gt; bool</autodoc>
    </method>
    <method name="PageUp" overloaded="no">
      <autodoc>PageUp() -&gt; bool</autodoc>
    </method>
    <method name="PageDown" overloaded="no">
      <autodoc>PageDown() -&gt; bool</autodoc>
    </method>
    <method name="SetHelpText" overloaded="no">
      <autodoc>SetHelpText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetHelpTextForId" overloaded="no">
      <autodoc>SetHelpTextForId(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetHelpText" overloaded="no">
      <autodoc>GetHelpText() -&gt; String</autodoc>
    </method>
    <method name="SetToolTipString" overloaded="no">
      <autodoc>SetToolTipString(String tip)</autodoc>
      <paramlist>
        <param name="tip" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetToolTip" overloaded="no">
      <autodoc>SetToolTip(ToolTip tip)</autodoc>
      <paramlist>
        <param name="tip" type="p.wxToolTip" default=""/>
      </paramlist>
    </method>
    <method name="GetToolTip" overloaded="no">
      <autodoc>GetToolTip() -&gt; ToolTip</autodoc>
    </method>
    <method name="SetDropTarget" overloaded="no">
      <autodoc>SetDropTarget(PyDropTarget dropTarget)</autodoc>
      <paramlist>
        <param name="dropTarget" type="p.wxPyDropTarget" default=""/>
      </paramlist>
    </method>
    <method name="GetDropTarget" overloaded="no">
      <autodoc>GetDropTarget() -&gt; PyDropTarget</autodoc>
    </method>
    <method name="SetConstraints" overloaded="no">
      <autodoc>SetConstraints(LayoutConstraints constraints)</autodoc>
      <paramlist>
        <param name="constraints" type="p.wxLayoutConstraints" default=""/>
      </paramlist>
    </method>
    <method name="GetConstraints" overloaded="no">
      <autodoc>GetConstraints() -&gt; LayoutConstraints</autodoc>
    </method>
    <method name="SetAutoLayout" overloaded="no">
      <autodoc>SetAutoLayout(bool autoLayout)</autodoc>
      <paramlist>
        <param name="autoLayout" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetAutoLayout" overloaded="no">
      <autodoc>GetAutoLayout() -&gt; bool</autodoc>
    </method>
    <method name="Layout" overloaded="no">
      <autodoc>Layout() -&gt; bool</autodoc>
    </method>
    <method name="SetSizer" overloaded="no">
      <autodoc>SetSizer(Sizer sizer, bool deleteOld=True)</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
        <param name="deleteOld" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetSizerAndFit" overloaded="no">
      <autodoc>SetSizerAndFit(Sizer sizer, bool deleteOld=True)</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
        <param name="deleteOld" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetSizer" overloaded="no">
      <autodoc>GetSizer() -&gt; Sizer</autodoc>
    </method>
    <method name="SetContainingSizer" overloaded="no">
      <autodoc>SetContainingSizer(Sizer sizer)</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
      </paramlist>
    </method>
    <method name="GetContainingSizer" overloaded="no">
      <autodoc>GetContainingSizer() -&gt; Sizer</autodoc>
    </method>
    <pythoncode>
    def PostCreate(self, pre):
        """Phase 3 of the 2-phase create &lt;wink!&gt;
           Call this method after precreating the window with the 2-phase create method."""
        self.this = pre.this
        self.thisown = pre.thisown
        pre.thisown = 0
        if hasattr(self, '_setOORInfo'):
            self._setOORInfo(self)
        if hasattr(self, '_setCallbackInfo'):
            self._setCallbackInfo(self, self.__class__)
    </pythoncode>
  </class>
  <pythoncode>
def DLG_PNT(win, point_or_x, y=None):
    if y is None:
        return win.ConvertDialogPointToPixels(point_or_x)
    else:
        return win.ConvertDialogPointToPixels(wx.Point(point_or_x, y))

def DLG_SZE(win, size_width, height=None):
    if height is None:
        return win.ConvertDialogSizeToPixels(size_width)
    else:
        return win.ConvertDialogSizeToPixels(wx.Size(size_width, height))
</pythoncode>
  <function oldname="wxFindWindowById" name="FindWindowById" overloaded="no">
    <autodoc>FindWindowById(long id, Window parent=None) -&gt; Window</autodoc>
    <paramlist>
      <param name="id" type="long" default=""/>
      <param name="parent" type="p.q(const).wxWindow" default="NULL"/>
    </paramlist>
  </function>
  <function oldname="wxFindWindowByName" name="FindWindowByName" overloaded="no">
    <autodoc>FindWindowByName(String name, Window parent=None) -&gt; Window</autodoc>
    <paramlist>
      <param name="name" type="r.q(const).wxString" default=""/>
      <param name="parent" type="p.q(const).wxWindow" default="NULL"/>
    </paramlist>
  </function>
  <function oldname="wxFindWindowByLabel" name="FindWindowByLabel" overloaded="no">
    <autodoc>FindWindowByLabel(String label, Window parent=None) -&gt; Window</autodoc>
    <paramlist>
      <param name="label" type="r.q(const).wxString" default=""/>
      <param name="parent" type="p.q(const).wxWindow" default="NULL"/>
    </paramlist>
  </function>
  <function oldname="wxWindow_FromHWND" name="Window_FromHWND" overloaded="no">
    <autodoc>Window_FromHWND(unsigned long hWnd) -&gt; Window</autodoc>
    <paramlist>
      <param name="hWnd" type="unsigned long" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Validator" oldname="wxValidator" module="core">
    <baseclass name="wxEvtHandler"/>
    <constructor name="Validator" overloaded="no">
      <autodoc>__init__() -&gt; Validator</autodoc>
    </constructor>
    <method name="Clone" overloaded="no">
      <autodoc>Clone() -&gt; Validator</autodoc>
    </method>
    <method name="Validate" overloaded="no">
      <autodoc>Validate(Window parent) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="TransferToWindow" overloaded="no">
      <autodoc>TransferToWindow() -&gt; bool</autodoc>
    </method>
    <method name="TransferFromWindow" overloaded="no">
      <autodoc>TransferFromWindow() -&gt; bool</autodoc>
    </method>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
    <method name="SetWindow" overloaded="no">
      <autodoc>SetWindow(Window window)</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <staticmethod name="IsSilent" overloaded="no">
      <autodoc>IsSilent() -&gt; bool</autodoc>
    </staticmethod>
    <staticmethod name="SetBellOnError" overloaded="no">
      <autodoc>SetBellOnError(int doIt=True)</autodoc>
      <paramlist>
        <param name="doIt" type="int" default="True"/>
      </paramlist>
    </staticmethod>
  </class>
  <class name="PyValidator" oldname="wxPyValidator" module="core">
    <baseclass name="wxValidator"/>
    <constructor name="PyValidator" overloaded="no">
      <autodoc>__init__() -&gt; PyValidator</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class, int incref=True)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
        <param name="incref" type="int" default="True"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Menu" oldname="wxMenu" module="core">
    <baseclass name="wxEvtHandler"/>
    <constructor name="Menu" overloaded="no">
      <autodoc>__init__(String title=EmptyString, long style=0) -&gt; Menu</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
    <method name="Append" overloaded="no">
      <autodoc>Append(int id, String text, String help=EmptyString, int kind=ITEM_NORMAL) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
      </paramlist>
    </method>
    <method name="AppendSeparator" overloaded="no">
      <autodoc>AppendSeparator() -&gt; MenuItem</autodoc>
    </method>
    <method name="AppendCheckItem" overloaded="no">
      <autodoc>AppendCheckItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="AppendRadioItem" overloaded="no">
      <autodoc>AppendRadioItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="AppendMenu" overloaded="no">
      <autodoc>AppendMenu(int id, String text, Menu submenu, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="submenu" type="p.wxMenu" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="AppendItem" overloaded="no">
      <autodoc>AppendItem(MenuItem item) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="item" type="p.wxMenuItem" default=""/>
      </paramlist>
    </method>
    <method name="Break" overloaded="no">
      <autodoc>Break()</autodoc>
    </method>
    <method name="InsertItem" overloaded="no">
      <autodoc>InsertItem(size_t pos, MenuItem item) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="item" type="p.wxMenuItem" default=""/>
      </paramlist>
    </method>
    <method name="Insert" overloaded="no">
      <autodoc>Insert(size_t pos, int id, String text, String help=EmptyString, 
    int kind=ITEM_NORMAL) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
      </paramlist>
    </method>
    <method name="InsertSeparator" overloaded="no">
      <autodoc>InsertSeparator(size_t pos) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="InsertCheckItem" overloaded="no">
      <autodoc>InsertCheckItem(size_t pos, int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="InsertRadioItem" overloaded="no">
      <autodoc>InsertRadioItem(size_t pos, int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="InsertMenu" overloaded="no">
      <autodoc>InsertMenu(size_t pos, int id, String text, Menu submenu, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="submenu" type="p.wxMenu" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="PrependItem" overloaded="no">
      <autodoc>PrependItem(MenuItem item) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="item" type="p.wxMenuItem" default=""/>
      </paramlist>
    </method>
    <method name="Prepend" overloaded="no">
      <autodoc>Prepend(int id, String text, String help=EmptyString, int kind=ITEM_NORMAL) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
      </paramlist>
    </method>
    <method name="PrependSeparator" overloaded="no">
      <autodoc>PrependSeparator() -&gt; MenuItem</autodoc>
    </method>
    <method name="PrependCheckItem" overloaded="no">
      <autodoc>PrependCheckItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="PrependRadioItem" overloaded="no">
      <autodoc>PrependRadioItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="PrependMenu" overloaded="no">
      <autodoc>PrependMenu(int id, String text, Menu submenu, String help=EmptyString) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="submenu" type="p.wxMenu" default=""/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="Remove" overloaded="no">
      <autodoc>Remove(int id) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="RemoveItem" overloaded="no">
      <autodoc>RemoveItem(MenuItem item) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="item" type="p.wxMenuItem" default=""/>
      </paramlist>
    </method>
    <method name="Delete" overloaded="no">
      <autodoc>Delete(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeleteItem" overloaded="no">
      <autodoc>DeleteItem(MenuItem item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="p.wxMenuItem" default=""/>
      </paramlist>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
      <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
    </method>
    <method name="DestroyId" overloaded="no">
      <autodoc>DestroyId(int id) -&gt; bool</autodoc>
      <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DestroyItem" overloaded="no">
      <autodoc>DestroyItem(MenuItem item) -&gt; bool</autodoc>
      <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
      <paramlist>
        <param name="item" type="p.wxMenuItem" default=""/>
      </paramlist>
    </method>
    <method name="GetMenuItemCount" overloaded="no">
      <autodoc>GetMenuItemCount() -&gt; size_t</autodoc>
    </method>
    <method name="GetMenuItems" overloaded="no">
      <autodoc>GetMenuItems() -&gt; PyObject</autodoc>
    </method>
    <method name="FindItem" overloaded="no">
      <autodoc>FindItem(String item) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindItemById" overloaded="no">
      <autodoc>FindItemById(int id) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="FindItemByPosition" overloaded="no">
      <autodoc>FindItemByPosition(size_t position) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="position" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="Enable" overloaded="no">
      <autodoc>Enable(int id, bool enable)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsEnabled" overloaded="no">
      <autodoc>IsEnabled(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Check" overloaded="no">
      <autodoc>Check(int id, bool check)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="check" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsChecked" overloaded="no">
      <autodoc>IsChecked(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLabel" overloaded="no">
      <autodoc>SetLabel(int id, String label)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel(int id) -&gt; String</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetHelpString" overloaded="no">
      <autodoc>SetHelpString(int id, String helpString)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="helpString" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetHelpString" overloaded="no">
      <autodoc>GetHelpString(int id) -&gt; String</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetTitle" overloaded="no">
      <autodoc>SetTitle(String title)</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTitle" overloaded="no">
      <autodoc>GetTitle() -&gt; String</autodoc>
    </method>
    <method name="SetEventHandler" overloaded="no">
      <autodoc>SetEventHandler(EvtHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="GetEventHandler" overloaded="no">
      <autodoc>GetEventHandler() -&gt; EvtHandler</autodoc>
    </method>
    <method name="SetInvokingWindow" overloaded="no">
      <autodoc>SetInvokingWindow(Window win)</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetInvokingWindow" overloaded="no">
      <autodoc>GetInvokingWindow() -&gt; Window</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; long</autodoc>
    </method>
    <method name="UpdateUI" overloaded="no">
      <autodoc>UpdateUI(EvtHandler source=None)</autodoc>
      <paramlist>
        <param name="source" type="p.wxEvtHandler" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetMenuBar" overloaded="no">
      <autodoc>GetMenuBar() -&gt; MenuBar</autodoc>
    </method>
    <method name="Attach" overloaded="no">
      <autodoc>Attach(wxMenuBarBase menubar)</autodoc>
      <paramlist>
        <param name="menubar" type="p.wxMenuBarBase" default=""/>
      </paramlist>
    </method>
    <method name="Detach" overloaded="no">
      <autodoc>Detach()</autodoc>
    </method>
    <method name="IsAttached" overloaded="no">
      <autodoc>IsAttached() -&gt; bool</autodoc>
    </method>
    <method name="SetParent" overloaded="no">
      <autodoc>SetParent(Menu parent)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxMenu" default=""/>
      </paramlist>
    </method>
    <method name="GetParent" overloaded="no">
      <autodoc>GetParent() -&gt; Menu</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MenuBar" oldname="wxMenuBar" module="core">
    <baseclass name="wxWindow"/>
    <constructor name="MenuBar" overloaded="no">
      <autodoc>__init__(long style=0) -&gt; MenuBar</autodoc>
      <paramlist>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
    <method name="Append" overloaded="no">
      <autodoc>Append(Menu menu, String title) -&gt; bool</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Insert" overloaded="no">
      <autodoc>Insert(size_t pos, Menu menu, String title) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="menu" type="p.wxMenu" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetMenuCount" overloaded="no">
      <autodoc>GetMenuCount() -&gt; size_t</autodoc>
    </method>
    <method name="GetMenu" overloaded="no">
      <autodoc>GetMenu(size_t pos) -&gt; Menu</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="Replace" overloaded="no">
      <autodoc>Replace(size_t pos, Menu menu, String title) -&gt; Menu</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="menu" type="p.wxMenu" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Remove" overloaded="no">
      <autodoc>Remove(size_t pos) -&gt; Menu</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="EnableTop" overloaded="no">
      <autodoc>EnableTop(size_t pos, bool enable)</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsEnabledTop" overloaded="no">
      <autodoc>IsEnabledTop(size_t pos) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetLabelTop" overloaded="no">
      <autodoc>SetLabelTop(size_t pos, String label)</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetLabelTop" overloaded="no">
      <autodoc>GetLabelTop(size_t pos) -&gt; String</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="FindMenuItem" overloaded="no">
      <autodoc>FindMenuItem(String menu, String item) -&gt; int</autodoc>
      <paramlist>
        <param name="menu" type="r.q(const).wxString" default=""/>
        <param name="item" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindItemById" overloaded="no">
      <autodoc>FindItemById(int id) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="FindMenu" overloaded="no">
      <autodoc>FindMenu(String title) -&gt; int</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Enable" overloaded="no">
      <autodoc>Enable(int id, bool enable)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Check" overloaded="no">
      <autodoc>Check(int id, bool check)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="check" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsChecked" overloaded="no">
      <autodoc>IsChecked(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsEnabled" overloaded="no">
      <autodoc>IsEnabled(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLabel" overloaded="no">
      <autodoc>SetLabel(int id, String label)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel(int id) -&gt; String</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetHelpString" overloaded="no">
      <autodoc>SetHelpString(int id, String helpString)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="helpString" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetHelpString" overloaded="no">
      <autodoc>GetHelpString(int id) -&gt; String</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFrame" overloaded="no">
      <autodoc>GetFrame() -&gt; wxFrame</autodoc>
    </method>
    <method name="IsAttached" overloaded="no">
      <autodoc>IsAttached() -&gt; bool</autodoc>
    </method>
    <method name="Attach" overloaded="no">
      <autodoc>Attach(wxFrame frame)</autodoc>
      <paramlist>
        <param name="frame" type="p.wxFrame" default=""/>
      </paramlist>
    </method>
    <method name="Detach" overloaded="no">
      <autodoc>Detach()</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MenuItem" oldname="wxMenuItem" module="core">
    <baseclass name="wxObject"/>
    <constructor name="MenuItem" overloaded="no">
      <autodoc>__init__(Menu parentMenu=None, int id=ID_SEPARATOR, String text=EmptyString, 
    String help=EmptyString, int kind=ITEM_NORMAL, 
    Menu subMenu=None) -&gt; MenuItem</autodoc>
      <paramlist>
        <param name="parentMenu" type="p.wxMenu" default="NULL"/>
        <param name="id" type="int" default="wxID_SEPARATOR"/>
        <param name="text" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="help" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
        <param name="subMenu" type="p.wxMenu" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetMenu" overloaded="no">
      <autodoc>GetMenu() -&gt; Menu</autodoc>
    </method>
    <method name="SetMenu" overloaded="no">
      <autodoc>SetMenu(Menu menu)</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
      </paramlist>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(int id)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; int</autodoc>
    </method>
    <method name="IsSeparator" overloaded="no">
      <autodoc>IsSeparator() -&gt; bool</autodoc>
    </method>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel() -&gt; String</autodoc>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <staticmethod name="GetLabelFromText" overloaded="no">
      <autodoc>GetLabelFromText(String text) -&gt; String</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <method name="GetKind" overloaded="no">
      <autodoc>GetKind() -&gt; int</autodoc>
    </method>
    <method name="SetCheckable" overloaded="no">
      <autodoc>SetCheckable(bool checkable)</autodoc>
      <paramlist>
        <param name="checkable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsCheckable" overloaded="no">
      <autodoc>IsCheckable() -&gt; bool</autodoc>
    </method>
    <method name="IsSubMenu" overloaded="no">
      <autodoc>IsSubMenu() -&gt; bool</autodoc>
    </method>
    <method name="SetSubMenu" overloaded="no">
      <autodoc>SetSubMenu(Menu menu)</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
      </paramlist>
    </method>
    <method name="GetSubMenu" overloaded="no">
      <autodoc>GetSubMenu() -&gt; Menu</autodoc>
    </method>
    <method name="Enable" overloaded="no">
      <autodoc>Enable(bool enable=True)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="IsEnabled" overloaded="no">
      <autodoc>IsEnabled() -&gt; bool</autodoc>
    </method>
    <method name="Check" overloaded="no">
      <autodoc>Check(bool check=True)</autodoc>
      <paramlist>
        <param name="check" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="IsChecked" overloaded="no">
      <autodoc>IsChecked() -&gt; bool</autodoc>
    </method>
    <method name="Toggle" overloaded="no">
      <autodoc>Toggle()</autodoc>
    </method>
    <method name="SetHelp" overloaded="no">
      <autodoc>SetHelp(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetHelp" overloaded="no">
      <autodoc>GetHelp() -&gt; String</autodoc>
    </method>
    <method name="GetAccel" overloaded="no">
      <autodoc>GetAccel() -&gt; AcceleratorEntry</autodoc>
    </method>
    <method name="SetAccel" overloaded="no">
      <autodoc>SetAccel(AcceleratorEntry accel)</autodoc>
      <paramlist>
        <param name="accel" type="p.wxAcceleratorEntry" default=""/>
      </paramlist>
    </method>
    <staticmethod name="GetDefaultMarginWidth" overloaded="no">
      <autodoc>GetDefaultMarginWidth() -&gt; int</autodoc>
    </staticmethod>
    <method name="SetBitmap" overloaded="no">
      <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Control" oldname="wxControl" module="core">
    <baseclass name="wxWindow"/>
    <constructor name="Control" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ControlNameStr) -&gt; Control</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyControlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreControl" overloaded="no">
      <autodoc>PreControl() -&gt; Control</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ControlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyControlNameStr"/>
      </paramlist>
    </method>
    <method name="Command" overloaded="no">
      <autodoc>Command(CommandEvent event)</autodoc>
      <paramlist>
        <param name="event" type="r.wxCommandEvent" default=""/>
      </paramlist>
    </method>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel() -&gt; String</autodoc>
    </method>
    <method name="SetLabel" overloaded="no">
      <autodoc>SetLabel(String label)</autodoc>
      <paramlist>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ItemContainer" oldname="wxItemContainer" module="core">
    <method name="Append" overloaded="no">
      <autodoc>Append(String item, PyObject clientData=None) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxString" default=""/>
        <param name="clientData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="AppendItems" overloaded="no">
      <autodoc>AppendItems(wxArrayString strings)</autodoc>
      <paramlist>
        <param name="strings" type="r.q(const).wxArrayString" default=""/>
      </paramlist>
    </method>
    <method name="Insert" overloaded="no">
      <autodoc>Insert(String item, int pos, PyObject clientData=None) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxString" default=""/>
        <param name="pos" type="int" default=""/>
        <param name="clientData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="Delete" overloaded="no">
      <autodoc>Delete(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; int</autodoc>
    </method>
    <method name="IsEmpty" overloaded="no">
      <autodoc>IsEmpty() -&gt; bool</autodoc>
    </method>
    <method name="GetString" overloaded="no">
      <autodoc>GetString(int n) -&gt; String</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetStrings" overloaded="no">
      <autodoc>GetStrings() -&gt; wxArrayString</autodoc>
    </method>
    <method name="SetString" overloaded="no">
      <autodoc>SetString(int n, String s)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindString" overloaded="no">
      <autodoc>FindString(String s) -&gt; int</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Select" overloaded="no">
      <autodoc>Select(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; int</autodoc>
    </method>
    <method name="GetStringSelection" overloaded="no">
      <autodoc>GetStringSelection() -&gt; String</autodoc>
    </method>
    <method name="GetClientData" overloaded="no">
      <autodoc>GetClientData(int n) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetClientData" overloaded="no">
      <autodoc>SetClientData(int n, PyObject clientData)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="clientData" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ControlWithItems" oldname="wxControlWithItems" module="core">
    <baseclass name="wxControl"/>
    <baseclass name="wxItemContainer"/>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SizerItem" oldname="wxSizerItem" module="core">
    <baseclass name="wxObject"/>
    <constructor name="SizerItem" overloaded="no">
      <autodoc>__init__() -&gt; SizerItem</autodoc>
    </constructor>
    <constructor name="SizerItemSpacer" overloaded="no">
      <autodoc>SizerItemSpacer(int width, int height, int proportion, int flag, int border, 
    Object userData) -&gt; SizerItem</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="proportion" type="int" default=""/>
        <param name="flag" type="int" default=""/>
        <param name="border" type="int" default=""/>
        <param name="userData" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
    <constructor name="SizerItemWindow" overloaded="no">
      <autodoc>SizerItemWindow(Window window, int proportion, int flag, int border, 
    Object userData) -&gt; SizerItem</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="proportion" type="int" default=""/>
        <param name="flag" type="int" default=""/>
        <param name="border" type="int" default=""/>
        <param name="userData" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
    <constructor name="SizerItemSizer" overloaded="no">
      <autodoc>SizerItemSizer(Sizer sizer, int proportion, int flag, int border, 
    Object userData) -&gt; SizerItem</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
        <param name="proportion" type="int" default=""/>
        <param name="flag" type="int" default=""/>
        <param name="border" type="int" default=""/>
        <param name="userData" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
    <method name="DeleteWindows" overloaded="no">
      <autodoc>DeleteWindows()</autodoc>
    </method>
    <method name="DetachSizer" overloaded="no">
      <autodoc>DetachSizer()</autodoc>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
    <method name="SetDimension" overloaded="no">
      <autodoc>SetDimension(Point pos, Size size)</autodoc>
      <paramlist>
        <param name="pos" type="wxPoint" default=""/>
        <param name="size" type="wxSize" default=""/>
      </paramlist>
    </method>
    <method name="GetMinSize" overloaded="no">
      <autodoc>GetMinSize() -&gt; Size</autodoc>
    </method>
    <method name="SetInitSize" overloaded="no">
      <autodoc>SetInitSize(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRatioWH" overloaded="no">
      <autodoc>SetRatioWH(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRatioSize" overloaded="no">
      <autodoc>SetRatioSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetRatio" overloaded="no">
      <autodoc>SetRatio(float ratio)</autodoc>
      <paramlist>
        <param name="ratio" type="float" default=""/>
      </paramlist>
    </method>
    <method name="GetRatio" overloaded="no">
      <autodoc>GetRatio() -&gt; float</autodoc>
    </method>
    <method name="IsWindow" overloaded="no">
      <autodoc>IsWindow() -&gt; bool</autodoc>
    </method>
    <method name="IsSizer" overloaded="no">
      <autodoc>IsSizer() -&gt; bool</autodoc>
    </method>
    <method name="IsSpacer" overloaded="no">
      <autodoc>IsSpacer() -&gt; bool</autodoc>
    </method>
    <method name="SetProportion" overloaded="no">
      <autodoc>SetProportion(int proportion)</autodoc>
      <paramlist>
        <param name="proportion" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetProportion" overloaded="no">
      <autodoc>GetProportion() -&gt; int</autodoc>
    </method>
    <method name="SetFlag" overloaded="no">
      <autodoc>SetFlag(int flag)</autodoc>
      <paramlist>
        <param name="flag" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFlag" overloaded="no">
      <autodoc>GetFlag() -&gt; int</autodoc>
    </method>
    <method name="SetBorder" overloaded="no">
      <autodoc>SetBorder(int border)</autodoc>
      <paramlist>
        <param name="border" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBorder" overloaded="no">
      <autodoc>GetBorder() -&gt; int</autodoc>
    </method>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
    <method name="SetWindow" overloaded="no">
      <autodoc>SetWindow(Window window)</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetSizer" overloaded="no">
      <autodoc>GetSizer() -&gt; Sizer</autodoc>
    </method>
    <method name="SetSizer" overloaded="no">
      <autodoc>SetSizer(Sizer sizer)</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
      </paramlist>
    </method>
    <method name="GetSpacer" overloaded="no">
      <autodoc>GetSpacer() -&gt; Size</autodoc>
    </method>
    <method name="SetSpacer" overloaded="no">
      <autodoc>SetSpacer(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="Show" overloaded="no">
      <autodoc>Show(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsShown" overloaded="no">
      <autodoc>IsShown() -&gt; bool</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="GetUserData" overloaded="no">
      <autodoc>GetUserData() -&gt; PyObject</autodoc>
    </method>
  </class>
  <class name="Sizer" oldname="wxSizer" module="core">
    <baseclass name="wxObject"/>
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Add" overloaded="no">
      <autodoc>Add(PyObject item, int proportion=0, int flag=0, int border=0, 
    PyObject userData=None)</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
        <param name="proportion" type="int" default="0"/>
        <param name="flag" type="int" default="0"/>
        <param name="border" type="int" default="0"/>
        <param name="userData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="Insert" overloaded="no">
      <autodoc>Insert(int before, PyObject item, int proportion=0, int flag=0, 
    int border=0, PyObject userData=None)</autodoc>
      <paramlist>
        <param name="before" type="int" default=""/>
        <param name="item" type="p.PyObject" default=""/>
        <param name="proportion" type="int" default="0"/>
        <param name="flag" type="int" default="0"/>
        <param name="border" type="int" default="0"/>
        <param name="userData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="Prepend" overloaded="no">
      <autodoc>Prepend(PyObject item, int proportion=0, int flag=0, int border=0, 
    PyObject userData=None)</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
        <param name="proportion" type="int" default="0"/>
        <param name="flag" type="int" default="0"/>
        <param name="border" type="int" default="0"/>
        <param name="userData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="Remove" overloaded="no">
      <autodoc>Remove(PyObject item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="_SetItemMinSize" overloaded="no">
      <autodoc>_SetItemMinSize(PyObject item, Size size)</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="AddItem" overloaded="no">
      <autodoc>AddItem(SizerItem item)</autodoc>
      <paramlist>
        <param name="item" type="p.wxSizerItem" default=""/>
      </paramlist>
    </method>
    <method name="InsertItem" overloaded="no">
      <autodoc>InsertItem(size_t index, SizerItem item)</autodoc>
      <paramlist>
        <param name="index" type="size_t" default=""/>
        <param name="item" type="p.wxSizerItem" default=""/>
      </paramlist>
    </method>
    <method name="PrependItem" overloaded="no">
      <autodoc>PrependItem(SizerItem item)</autodoc>
      <paramlist>
        <param name="item" type="p.wxSizerItem" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    def AddMany(self, widgets):
        for childinfo in widgets:
            if type(childinfo) != type(()) or (len(childinfo) == 2 and type(childinfo[0]) == type(1)):
                childinfo = (childinfo, )
            self.Add(*childinfo)

    # for backwards compatibility only, please do not use in new code
    AddWindow = AddSizer = AddSpacer = Add
    PrependWindow = PrependSizer = PrependSpacer = Prepend
    InsertWindow = InsertSizer = InsertSpacer = Insert
    RemoveWindow = RemoveSizer = RemovePos = Remove


    def SetItemMinSize(self, item, *args):
        if len(args) == 2:
            return self._SetItemMinSize(item, args)
        else:
            return self._SetItemMinSize(item, args[0])
    </pythoncode>
    <method name="SetDimension" overloaded="no">
      <autodoc>SetDimension(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMinSize" overloaded="no">
      <autodoc>SetMinSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="GetMinSize" overloaded="no">
      <autodoc>GetMinSize() -&gt; Size</autodoc>
    </method>
    <pythoncode>
    def GetSizeTuple(self):
        return self.GetSize().asTuple()
    def GetPositionTuple(self):
        return self.GetPosition().asTuple()
    def GetMinSizeTuple(self):
        return self.GetMinSize().asTuple()
    </pythoncode>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
    <method name="Layout" overloaded="no">
      <autodoc>Layout()</autodoc>
    </method>
    <method name="Fit" overloaded="no">
      <autodoc>Fit(Window window) -&gt; Size</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="FitInside" overloaded="no">
      <autodoc>FitInside(Window window)</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="SetSizeHints" overloaded="no">
      <autodoc>SetSizeHints(Window window)</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="SetVirtualSizeHints" overloaded="no">
      <autodoc>SetVirtualSizeHints(Window window)</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear(bool delete_windows=False)</autodoc>
      <paramlist>
        <param name="delete_windows" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="DeleteWindows" overloaded="no">
      <autodoc>DeleteWindows()</autodoc>
    </method>
    <method name="GetChildren" overloaded="no">
      <autodoc>GetChildren() -&gt; PyObject</autodoc>
    </method>
    <method name="Show" overloaded="no">
      <autodoc>Show(PyObject item, bool show=True)</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
        <param name="show" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Hide" overloaded="no">
      <autodoc>Hide(PyObject item)</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="IsShown" overloaded="no">
      <autodoc>IsShown(PyObject item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="ShowItems" overloaded="no">
      <autodoc>ShowItems(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PySizer" oldname="wxPySizer" module="core">
    <baseclass name="wxSizer"/>
    <constructor name="PySizer" overloaded="no">
      <autodoc>__init__() -&gt; PySizer</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="BoxSizer" oldname="wxBoxSizer" module="core">
    <baseclass name="wxSizer"/>
    <constructor name="BoxSizer" overloaded="no">
      <autodoc>__init__(int orient=HORIZONTAL) -&gt; BoxSizer</autodoc>
      <paramlist>
        <param name="orient" type="int" default="wxHORIZONTAL"/>
      </paramlist>
    </constructor>
    <method name="GetOrientation" overloaded="no">
      <autodoc>GetOrientation() -&gt; int</autodoc>
    </method>
    <method name="SetOrientation" overloaded="no">
      <autodoc>SetOrientation(int orient)</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="StaticBoxSizer" oldname="wxStaticBoxSizer" module="core">
    <baseclass name="wxBoxSizer"/>
    <constructor name="StaticBoxSizer" overloaded="no">
      <autodoc>__init__(wxStaticBox box, int orient=HORIZONTAL) -&gt; StaticBoxSizer</autodoc>
      <paramlist>
        <param name="box" type="p.wxStaticBox" default=""/>
        <param name="orient" type="int" default="wxHORIZONTAL"/>
      </paramlist>
    </constructor>
    <method name="GetStaticBox" overloaded="no">
      <autodoc>GetStaticBox() -&gt; wxStaticBox</autodoc>
    </method>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="GridSizer" oldname="wxGridSizer" module="core">
    <baseclass name="wxSizer"/>
    <constructor name="GridSizer" overloaded="no">
      <autodoc>__init__(int rows=1, int cols=0, int vgap=0, int hgap=0) -&gt; GridSizer</autodoc>
      <paramlist>
        <param name="rows" type="int" default="1"/>
        <param name="cols" type="int" default="0"/>
        <param name="vgap" type="int" default="0"/>
        <param name="hgap" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
    <method name="SetCols" overloaded="no">
      <autodoc>SetCols(int cols)</autodoc>
      <paramlist>
        <param name="cols" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRows" overloaded="no">
      <autodoc>SetRows(int rows)</autodoc>
      <paramlist>
        <param name="rows" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetVGap" overloaded="no">
      <autodoc>SetVGap(int gap)</autodoc>
      <paramlist>
        <param name="gap" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetHGap" overloaded="no">
      <autodoc>SetHGap(int gap)</autodoc>
      <paramlist>
        <param name="gap" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCols" overloaded="no">
      <autodoc>GetCols() -&gt; int</autodoc>
    </method>
    <method name="GetRows" overloaded="no">
      <autodoc>GetRows() -&gt; int</autodoc>
    </method>
    <method name="GetVGap" overloaded="no">
      <autodoc>GetVGap() -&gt; int</autodoc>
    </method>
    <method name="GetHGap" overloaded="no">
      <autodoc>GetHGap() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="FlexGridSizer" oldname="wxFlexGridSizer" module="core">
    <baseclass name="wxGridSizer"/>
    <constructor name="FlexGridSizer" overloaded="no">
      <autodoc>__init__(int rows=1, int cols=0, int vgap=0, int hgap=0) -&gt; FlexGridSizer</autodoc>
      <paramlist>
        <param name="rows" type="int" default="1"/>
        <param name="cols" type="int" default="0"/>
        <param name="vgap" type="int" default="0"/>
        <param name="hgap" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
    <method name="AddGrowableRow" overloaded="no">
      <autodoc>AddGrowableRow(size_t idx, int proportion=0)</autodoc>
      <paramlist>
        <param name="idx" type="size_t" default=""/>
        <param name="proportion" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="RemoveGrowableRow" overloaded="no">
      <autodoc>RemoveGrowableRow(size_t idx)</autodoc>
      <paramlist>
        <param name="idx" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="AddGrowableCol" overloaded="no">
      <autodoc>AddGrowableCol(size_t idx, int proportion=0)</autodoc>
      <paramlist>
        <param name="idx" type="size_t" default=""/>
        <param name="proportion" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="RemoveGrowableCol" overloaded="no">
      <autodoc>RemoveGrowableCol(size_t idx)</autodoc>
      <paramlist>
        <param name="idx" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetFlexibleDirection" overloaded="no">
      <autodoc>SetFlexibleDirection(int direction)</autodoc>
      <paramlist>
        <param name="direction" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFlexibleDirection" overloaded="no">
      <autodoc>GetFlexibleDirection() -&gt; int</autodoc>
    </method>
    <method name="SetNonFlexibleGrowMode" overloaded="no">
      <autodoc>SetNonFlexibleGrowMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="wxFlexSizerGrowMode" default=""/>
      </paramlist>
    </method>
    <method name="GetNonFlexibleGrowMode" overloaded="no">
      <autodoc>GetNonFlexibleGrowMode() -&gt; int</autodoc>
    </method>
    <method name="GetRowHeights" overloaded="no">
      <autodoc>GetRowHeights() -&gt; wxArrayInt</autodoc>
    </method>
    <method name="GetColWidths" overloaded="no">
      <autodoc>GetColWidths() -&gt; wxArrayInt</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="GBPosition" oldname="wxGBPosition" module="core">
    <constructor name="GBPosition" overloaded="no">
      <autodoc>__init__(int row=0, int col=0) -&gt; GBPosition</autodoc>
      <paramlist>
        <param name="row" type="int" default="0"/>
        <param name="col" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetRow" overloaded="no">
      <autodoc>GetRow() -&gt; int</autodoc>
    </method>
    <method name="GetCol" overloaded="no">
      <autodoc>GetCol() -&gt; int</autodoc>
    </method>
    <method name="SetRow" overloaded="no">
      <autodoc>SetRow(int row)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetCol" overloaded="no">
      <autodoc>SetCol(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(GBPosition p) -&gt; bool</autodoc>
      <paramlist>
        <param name="p" type="r.q(const).wxGBPosition" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(GBPosition p) -&gt; bool</autodoc>
      <paramlist>
        <param name="p" type="r.q(const).wxGBPosition" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(int row=0, int col=0)</autodoc>
      <paramlist>
        <param name="row" type="int" default="0"/>
        <param name="col" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; PyObject</autodoc>
    </method>
    <pythoncode>
    asTuple = Get
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wx.GBPosition'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: self.SetRow(val)
        elif index == 1: self.SetCol(val)
        else: raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0)
    __safe_for_unpickling__ = True
    def __reduce__(self):                return (wx.GBPosition, self.Get())
    </pythoncode>
    <pythoncode>
    row = property(GetRow, SetRow)
    col = property(GetCol, SetCol)
    </pythoncode>
  </class>
  <class name="GBSpan" oldname="wxGBSpan" module="core">
    <constructor name="GBSpan" overloaded="no">
      <autodoc>__init__(int rowspan=1, int colspan=1) -&gt; GBSpan</autodoc>
      <paramlist>
        <param name="rowspan" type="int" default="1"/>
        <param name="colspan" type="int" default="1"/>
      </paramlist>
    </constructor>
    <method name="GetRowspan" overloaded="no">
      <autodoc>GetRowspan() -&gt; int</autodoc>
    </method>
    <method name="GetColspan" overloaded="no">
      <autodoc>GetColspan() -&gt; int</autodoc>
    </method>
    <method name="SetRowspan" overloaded="no">
      <autodoc>SetRowspan(int rowspan)</autodoc>
      <paramlist>
        <param name="rowspan" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColspan" overloaded="no">
      <autodoc>SetColspan(int colspan)</autodoc>
      <paramlist>
        <param name="colspan" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(GBSpan o) -&gt; bool</autodoc>
      <paramlist>
        <param name="o" type="r.q(const).wxGBSpan" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(GBSpan o) -&gt; bool</autodoc>
      <paramlist>
        <param name="o" type="r.q(const).wxGBSpan" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(int rowspan=1, int colspan=1)</autodoc>
      <paramlist>
        <param name="rowspan" type="int" default="1"/>
        <param name="colspan" type="int" default="1"/>
      </paramlist>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; PyObject</autodoc>
    </method>
    <pythoncode>
    asTuple = Get
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wx.GBSpan'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: self.SetRowspan(val)
        elif index == 1: self.SetColspan(val)
        else: raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0)
    __safe_for_unpickling__ = True
    def __reduce__(self):                return (wx.GBSpan, self.Get())
    </pythoncode>
    <pythoncode>
    rowspan = property(GetRowspan, SetRowspan)
    colspan = property(GetColspan, SetColspan)
    </pythoncode>
  </class>
  <class name="GBSizerItem" oldname="wxGBSizerItem" module="core">
    <baseclass name="wxSizerItem"/>
    <constructor name="GBSizerItem" overloaded="no">
      <autodoc>__init__() -&gt; GBSizerItem</autodoc>
    </constructor>
    <constructor name="GBSizerItemWindow" overloaded="no">
      <autodoc>GBSizerItemWindow(Window window, GBPosition pos, GBSpan span, int flag, 
    int border, Object userData) -&gt; GBSizerItem</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
        <param name="flag" type="int" default=""/>
        <param name="border" type="int" default=""/>
        <param name="userData" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
    <constructor name="GBSizerItemSizer" overloaded="no">
      <autodoc>GBSizerItemSizer(Sizer sizer, GBPosition pos, GBSpan span, int flag, 
    int border, Object userData) -&gt; GBSizerItem</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
        <param name="flag" type="int" default=""/>
        <param name="border" type="int" default=""/>
        <param name="userData" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
    <constructor name="GBSizerItemSpacer" overloaded="no">
      <autodoc>GBSizerItemSpacer(int width, int height, GBPosition pos, GBSpan span, 
    int flag, int border, Object userData) -&gt; GBSizerItem</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
        <param name="flag" type="int" default=""/>
        <param name="border" type="int" default=""/>
        <param name="userData" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
    <method name="GetPos" overloaded="no">
      <autodoc>GetPos() -&gt; GBPosition</autodoc>
    </method>
    <pythoncode> def GetPosTuple(self): return self.GetPos().Get() </pythoncode>
    <method name="GetSpan" overloaded="no">
      <autodoc>GetSpan() -&gt; GBSpan</autodoc>
    </method>
    <pythoncode> def GetSpanTuple(self): return self.GetSpan().Get() </pythoncode>
    <method name="SetPos" overloaded="no">
      <autodoc>SetPos(GBPosition pos) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
      </paramlist>
    </method>
    <method name="SetSpan" overloaded="no">
      <autodoc>SetSpan(GBSpan span) -&gt; bool</autodoc>
      <paramlist>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
      </paramlist>
    </method>
    <method name="Intersects" overloaded="yes">
      <paramlist>
        <param name="other" type="r.q(const).wxGBSizerItem" default=""/>
      </paramlist>
    </method>
    <method name="Intersects" overloaded="yes">
      <autodoc>Intersects(GBSizerItem other) -&gt; bool
Intersects(GBPosition pos, GBSpan span) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
      </paramlist>
    </method>
    <method name="GetEndPos" overloaded="no">
      <autodoc>GetEndPos(int row, int col)</autodoc>
      <paramlist>
        <param name="row" type="r.int" default=""/>
        <param name="col" type="r.int" default=""/>
      </paramlist>
    </method>
    <method name="GetGBSizer" overloaded="no">
      <autodoc>GetGBSizer() -&gt; GridBagSizer</autodoc>
    </method>
    <method name="SetGBSizer" overloaded="no">
      <autodoc>SetGBSizer(GridBagSizer sizer)</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxGridBagSizer" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="GridBagSizer" oldname="wxGridBagSizer" module="core">
    <baseclass name="wxFlexGridSizer"/>
    <constructor name="GridBagSizer" overloaded="no">
      <autodoc>__init__(int vgap=0, int hgap=0) -&gt; GridBagSizer</autodoc>
      <paramlist>
        <param name="vgap" type="int" default="0"/>
        <param name="hgap" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="Add" overloaded="no">
      <autodoc>Add(PyObject item, GBPosition pos, GBSpan span=DefaultSpan, 
    int flag=0, int border=0, PyObject userData=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="p.PyObject" default=""/>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default="wxDefaultSpan"/>
        <param name="flag" type="int" default="0"/>
        <param name="border" type="int" default="0"/>
        <param name="userData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="AddItem" overloaded="no">
      <autodoc>AddItem(GBSizerItem item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="p.wxGBSizerItem" default=""/>
      </paramlist>
    </method>
    <method name="GetEmptyCellSize" overloaded="no">
      <autodoc>GetEmptyCellSize() -&gt; Size</autodoc>
    </method>
    <method name="SetEmptyCellSize" overloaded="no">
      <autodoc>SetEmptyCellSize(Size sz)</autodoc>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="GetItemPosition" overloaded="yes">
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetItemPosition" overloaded="yes">
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
      </paramlist>
    </method>
    <method name="GetItemPosition" overloaded="yes">
      <autodoc>GetItemPosition(Window window) -&gt; GBPosition
GetItemPosition(Sizer sizer) -&gt; GBPosition
GetItemPosition(size_t index) -&gt; GBPosition</autodoc>
      <paramlist>
        <param name="index" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetItemPosition" overloaded="yes">
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
      </paramlist>
    </method>
    <method name="SetItemPosition" overloaded="yes">
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
      </paramlist>
    </method>
    <method name="SetItemPosition" overloaded="yes">
      <autodoc>SetItemPosition(Window window, GBPosition pos) -&gt; bool
SetItemPosition(Sizer sizer, GBPosition pos) -&gt; bool
SetItemPosition(size_t index, GBPosition pos) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="size_t" default=""/>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
      </paramlist>
    </method>
    <method name="GetItemSpan" overloaded="yes">
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetItemSpan" overloaded="yes">
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
      </paramlist>
    </method>
    <method name="GetItemSpan" overloaded="yes">
      <autodoc>GetItemSpan(Window window) -&gt; GBSpan
GetItemSpan(Sizer sizer) -&gt; GBSpan
GetItemSpan(size_t index) -&gt; GBSpan</autodoc>
      <paramlist>
        <param name="index" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetItemSpan" overloaded="yes">
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
      </paramlist>
    </method>
    <method name="SetItemSpan" overloaded="yes">
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
      </paramlist>
    </method>
    <method name="SetItemSpan" overloaded="yes">
      <autodoc>SetItemSpan(Window window, GBSpan span) -&gt; bool
SetItemSpan(Sizer sizer, GBSpan span) -&gt; bool
SetItemSpan(size_t index, GBSpan span) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="size_t" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
      </paramlist>
    </method>
    <method name="FindItem" overloaded="yes">
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="FindItem" overloaded="yes">
      <autodoc>FindItem(Window window) -&gt; GBSizerItem
FindItem(Sizer sizer) -&gt; GBSizerItem</autodoc>
      <paramlist>
        <param name="sizer" type="p.wxSizer" default=""/>
      </paramlist>
    </method>
    <method name="FindItemAtPosition" overloaded="no">
      <autodoc>FindItemAtPosition(GBPosition pos) -&gt; GBSizerItem</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
      </paramlist>
    </method>
    <method name="FindItemAtPoint" overloaded="no">
      <autodoc>FindItemAtPoint(Point pt) -&gt; GBSizerItem</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="FindItemWithData" overloaded="no">
      <autodoc>FindItemWithData(Object userData) -&gt; GBSizerItem</autodoc>
      <paramlist>
        <param name="userData" type="p.q(const).wxObject" default=""/>
      </paramlist>
    </method>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
    <method name="CheckForIntersection" overloaded="yes">
      <paramlist>
        <param name="item" type="p.wxGBSizerItem" default=""/>
        <param name="excludeItem" type="p.wxGBSizerItem" default="NULL"/>
      </paramlist>
    </method>
    <method name="CheckForIntersection" overloaded="yes">
      <autodoc>CheckForIntersection(GBSizerItem item, GBSizerItem excludeItem=None) -&gt; bool
CheckForIntersection(GBPosition pos, GBSpan span, GBSizerItem excludeItem=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxGBPosition" default=""/>
        <param name="span" type="r.q(const).wxGBSpan" default=""/>
        <param name="excludeItem" type="p.wxGBSizerItem" default="NULL"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="IndividualLayoutConstraint" oldname="wxIndividualLayoutConstraint" module="core">
    <baseclass name="wxObject"/>
    <method name="Set" overloaded="no">
      <autodoc>Set(int rel, Window otherW, int otherE, int val=0, int marg=wxLAYOUT_DEFAULT_MARGIN)</autodoc>
      <paramlist>
        <param name="rel" type="wxRelationship" default=""/>
        <param name="otherW" type="p.wxWindow" default=""/>
        <param name="otherE" type="wxEdge" default=""/>
        <param name="val" type="int" default="0"/>
        <param name="marg" type="int" default="wxLAYOUT_DEFAULT_MARGIN"/>
      </paramlist>
    </method>
    <method name="LeftOf" overloaded="no">
      <autodoc>LeftOf(Window sibling, int marg=0)</autodoc>
      <paramlist>
        <param name="sibling" type="p.wxWindow" default=""/>
        <param name="marg" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="RightOf" overloaded="no">
      <autodoc>RightOf(Window sibling, int marg=0)</autodoc>
      <paramlist>
        <param name="sibling" type="p.wxWindow" default=""/>
        <param name="marg" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Above" overloaded="no">
      <autodoc>Above(Window sibling, int marg=0)</autodoc>
      <paramlist>
        <param name="sibling" type="p.wxWindow" default=""/>
        <param name="marg" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Below" overloaded="no">
      <autodoc>Below(Window sibling, int marg=0)</autodoc>
      <paramlist>
        <param name="sibling" type="p.wxWindow" default=""/>
        <param name="marg" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SameAs" overloaded="no">
      <autodoc>SameAs(Window otherW, int edge, int marg=0)</autodoc>
      <paramlist>
        <param name="otherW" type="p.wxWindow" default=""/>
        <param name="edge" type="wxEdge" default=""/>
        <param name="marg" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="PercentOf" overloaded="no">
      <autodoc>PercentOf(Window otherW, int wh, int per)</autodoc>
      <paramlist>
        <param name="otherW" type="p.wxWindow" default=""/>
        <param name="wh" type="wxEdge" default=""/>
        <param name="per" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Absolute" overloaded="no">
      <autodoc>Absolute(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Unconstrained" overloaded="no">
      <autodoc>Unconstrained()</autodoc>
    </method>
    <method name="AsIs" overloaded="no">
      <autodoc>AsIs()</autodoc>
    </method>
    <method name="GetOtherWindow" overloaded="no">
      <autodoc>GetOtherWindow() -&gt; Window</autodoc>
    </method>
    <method name="GetMyEdge" overloaded="no">
      <autodoc>GetMyEdge() -&gt; int</autodoc>
    </method>
    <method name="SetEdge" overloaded="no">
      <autodoc>SetEdge(int which)</autodoc>
      <paramlist>
        <param name="which" type="wxEdge" default=""/>
      </paramlist>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(int v)</autodoc>
      <paramlist>
        <param name="v" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMargin" overloaded="no">
      <autodoc>GetMargin() -&gt; int</autodoc>
    </method>
    <method name="SetMargin" overloaded="no">
      <autodoc>SetMargin(int m)</autodoc>
      <paramlist>
        <param name="m" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; int</autodoc>
    </method>
    <method name="GetPercent" overloaded="no">
      <autodoc>GetPercent() -&gt; int</autodoc>
    </method>
    <method name="GetOtherEdge" overloaded="no">
      <autodoc>GetOtherEdge() -&gt; int</autodoc>
    </method>
    <method name="GetDone" overloaded="no">
      <autodoc>GetDone() -&gt; bool</autodoc>
    </method>
    <method name="SetDone" overloaded="no">
      <autodoc>SetDone(bool d)</autodoc>
      <paramlist>
        <param name="d" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetRelationship" overloaded="no">
      <autodoc>GetRelationship() -&gt; int</autodoc>
    </method>
    <method name="SetRelationship" overloaded="no">
      <autodoc>SetRelationship(int r)</autodoc>
      <paramlist>
        <param name="r" type="wxRelationship" default=""/>
      </paramlist>
    </method>
    <method name="ResetIfWin" overloaded="no">
      <autodoc>ResetIfWin(Window otherW) -&gt; bool</autodoc>
      <paramlist>
        <param name="otherW" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="SatisfyConstraint" overloaded="no">
      <autodoc>SatisfyConstraint(LayoutConstraints constraints, Window win) -&gt; bool</autodoc>
      <paramlist>
        <param name="constraints" type="p.wxLayoutConstraints" default=""/>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetEdge" overloaded="no">
      <autodoc>GetEdge(int which, Window thisWin, Window other) -&gt; int</autodoc>
      <paramlist>
        <param name="which" type="wxEdge" default=""/>
        <param name="thisWin" type="p.wxWindow" default=""/>
        <param name="other" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="LayoutConstraints" oldname="wxLayoutConstraints" module="core">
    <baseclass name="wxObject"/>
    <property name="left" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <property name="top" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <property name="right" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <property name="bottom" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <property name="width" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <property name="height" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <property name="centreX" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <property name="centreY" type="wxIndividualLayoutConstraint" readonly="yes"/>
    <constructor name="LayoutConstraints" overloaded="no">
      <autodoc>__init__() -&gt; LayoutConstraints</autodoc>
    </constructor>
    <method name="SatisfyConstraints" overloaded="no">
      <autodoc>SatisfyConstraints(Window win) -&gt; (areSatisfied, noChanges)</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="AreSatisfied" overloaded="no">
      <autodoc>AreSatisfied() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>#----------------------------------------------------------------------------

# Use Python's bool constants if available, make some if not
try:
    True
except NameError:
    __builtins__.True = 1==1
    __builtins__.False = 1==0



# workarounds for bad wxRTTI names
__wxPyPtrTypeMap['wxGauge95']    = 'wxGauge'
__wxPyPtrTypeMap['wxSlider95']   = 'wxSlider'
__wxPyPtrTypeMap['wxStatusBar95']   = 'wxStatusBar'


#----------------------------------------------------------------------------
# Load version numbers from __version__...  Ensure that major and minor
# versions are the same for both wxPython and wxWindows.

from __version__ import *
__version__ = VERSION_STRING

assert MAJOR_VERSION == _core.MAJOR_VERSION, "wxPython/wxWindows version mismatch"
assert MINOR_VERSION == _core.MINOR_VERSION, "wxPython/wxWindows version mismatch"
if RELEASE_VERSION != _core.RELEASE_VERSION:
    import warnings
    warnings.warn("wxPython/wxWindows release number mismatch")

#----------------------------------------------------------------------------

class PyDeadObjectError(AttributeError):
    pass

class _wxPyDeadObject(object):
    """
    Instances of wx objects that are OOR capable will have their __class__
    changed to this class when the C++ object is deleted.  This should help
    prevent crashes due to referencing a bogus C++ pointer.
    """
    reprStr = "wxPython wrapper for DELETED %s object! (The C++ object no longer exists.)"
    attrStr = "The C++ part of the %s object has been deleted, attribute access no longer allowed."

    def __repr__(self):
        if not hasattr(self, "_name"):
            self._name = "[unknown]"
        return self.reprStr % self._name

    def __getattr__(self, *args):
        if not hasattr(self, "_name"):
            self._name = "[unknown]"
        raise PyDeadObjectError(self.attrStr % self._name)

    def __nonzero__(self):
        return 0



class PyUnbornObjectError(AttributeError):
    pass

class _wxPyUnbornObject(object):
    """
    Some stock objects are created when the wx.core module is
    imported, but their C++ instance is not created until the wx.App
    object is created and initialized.  These object instances will
    temporarily have their __class__ changed to this class so an
    exception will be raised if they are used before the C++ instance
    is ready.
    """

    reprStr = "wxPython wrapper for UNBORN object! (The C++ object is not initialized yet.)"
    attrStr = "The C++ part of this object has not been initialized, attribute access not allowed."

    def __repr__(self):
        #if not hasattr(self, "_name"):
        #    self._name = "[unknown]"
        return self.reprStr #% self._name

    def __getattr__(self, *args):
        #if not hasattr(self, "_name"):
        #    self._name = "[unknown]"
        raise PyUnbornObjectError(self.attrStr) # % self._name )

    def __nonzero__(self):
        return 0


#----------------------------------------------------------------------------
_wxPyCallAfterId = None

def CallAfter(callable, *args, **kw):
    """
    Call the specified function after the current and pending event
    handlers have been completed.  This is also good for making GUI
    method calls from non-GUI threads.
    """
    app = wx.GetApp()
    assert app, 'No wxApp created yet'

    global _wxPyCallAfterId
    if _wxPyCallAfterId is None:
        _wxPyCallAfterId = wx.NewEventType()
        app.Connect(-1, -1, _wxPyCallAfterId,
              lambda event: event.callable(*event.args, **event.kw) )
    evt = wx.PyEvent()
    evt.SetEventType(_wxPyCallAfterId)
    evt.callable = callable
    evt.args = args
    evt.kw = kw
    wx.PostEvent(app, evt)


#----------------------------------------------------------------------------


class FutureCall:
    """
    A convenience class for wxTimer, that calls the given callable
    object once after the given amount of milliseconds, passing any
    positional or keyword args.  The return value of the callable is
    availbale after it has been run with the GetResult method.

    If you don't need to get the return value or restart the timer
    then there is no need to hold a reference to this object.  It will
    hold a reference to itself while the timer is running (the timer
    has a reference to self.Notify) but the cycle will be broken when
    the timer completes, automatically cleaning up the wx.FutureCall
    object.
    """
    def __init__(self, millis, callable, *args, **kwargs):
        self.millis = millis
        self.callable = callable
        self.SetArgs(*args, **kwargs)
        self.runCount = 0
        self.hasRun = False
        self.result = None
        self.timer = None
        self.Start()

    def __del__(self):
        self.Stop()


    def Start(self, millis=None, *args, **kwargs):
        """
        (Re)start the timer
        """
        self.hasRun = False
        if millis is not None:
            self.millis = millis
        if args or kwargs:
            self.SetArgs(*args, **kwargs)
        self.Stop()
        self.timer = wx.PyTimer(self.Notify)
        self.timer.Start(self.millis, wx.TIMER_ONE_SHOT)
    Restart = Start


    def Stop(self):
        """
        Stop and destroy the timer.
        """
        if self.timer is not None:
            self.timer.Stop()
            self.timer = None


    def GetInterval(self):
        if self.timer is not None:
            return self.timer.GetInterval()
        else:
            return 0


    def IsRunning(self):
        return self.timer is not None and self.timer.IsRunning()


    def SetArgs(self, *args, **kwargs):
        """
        (Re)set the args passed to the callable object.  This is
        useful in conjunction with Restart if you want to schedule a
        new call to the same callable object but with different
        parameters.
        """
        self.args = args
        self.kwargs = kwargs


    def HasRun(self):
        return self.hasRun

    def GetResult(self):
        return self.result

    def Notify(self):
        """
        The timer has expired so call the callable.
        """
        if self.callable and getattr(self.callable, 'im_self', True):
            self.runCount += 1
            self.result = self.callable(*self.args, **self.kwargs)
        self.hasRun = True
        wx.CallAfter(self.Stop)


#----------------------------------------------------------------------------
#----------------------------------------------------------------------------

# Import other modules in this package that should show up in the
# "core" wx namespace
from gdi import *
from windows import *
from controls import *
from misc import *


# Fixup the stock objects since they can't be used yet.  (They will be
# restored in wx.PyApp.OnInit.)
_core._wxPyFixStockObjects()

#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
</pythoncode>
</module>
<module name="gdi">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="GDIObject" oldname="wxGDIObject" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="GDIObject" overloaded="no">
      <autodoc>__init__() -&gt; GDIObject</autodoc>
    </constructor>
    <destructor name="~wxGDIObject">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetVisible" overloaded="no">
      <autodoc>GetVisible() -&gt; bool</autodoc>
    </method>
    <method name="SetVisible" overloaded="no">
      <autodoc>SetVisible(bool visible)</autodoc>
      <paramlist>
        <param name="visible" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsNull" overloaded="no">
      <autodoc>IsNull() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Colour" oldname="wxColour" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="Colour" overloaded="no">
      <autodoc>__init__(unsigned char red=0, unsigned char green=0, unsigned char blue=0) -&gt; Colour</autodoc>
      <paramlist>
        <param name="red" type="unsigned char" default="0"/>
        <param name="green" type="unsigned char" default="0"/>
        <param name="blue" type="unsigned char" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxColour">
      <autodoc>__del__()</autodoc>
    </destructor>
    <constructor name="NamedColour" overloaded="no">
      <autodoc>NamedColour(String colorName) -&gt; Colour</autodoc>
      <paramlist>
        <param name="colorName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <constructor name="ColourRGB" overloaded="no">
      <autodoc>ColourRGB(unsigned long colRGB) -&gt; Colour</autodoc>
      <paramlist>
        <param name="colRGB" type="unsigned long" default=""/>
      </paramlist>
    </constructor>
    <method name="Red" overloaded="no">
      <autodoc>Red() -&gt; unsigned char</autodoc>
    </method>
    <method name="Green" overloaded="no">
      <autodoc>Green() -&gt; unsigned char</autodoc>
    </method>
    <method name="Blue" overloaded="no">
      <autodoc>Blue() -&gt; unsigned char</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(unsigned char red, unsigned char green, unsigned char blue)</autodoc>
      <paramlist>
        <param name="red" type="unsigned char" default=""/>
        <param name="green" type="unsigned char" default=""/>
        <param name="blue" type="unsigned char" default=""/>
      </paramlist>
    </method>
    <method name="SetRGB" overloaded="no">
      <autodoc>SetRGB(unsigned long colRGB)</autodoc>
      <paramlist>
        <param name="colRGB" type="unsigned long" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(Colour colour) -&gt; bool</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(Colour colour) -&gt; bool</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="InitFromName" overloaded="no">
      <autodoc>InitFromName(String colourName)</autodoc>
      <paramlist>
        <param name="colourName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Get" overloaded="no">
      <autodoc>Get() -&gt; PyObject</autodoc>
    </method>
    <pythoncode>
        asTuple = Get
        def __str__(self):                  return str(self.asTuple())
        def __repr__(self):                 return 'wx.Colour' + str(self.asTuple())
        def __nonzero__(self):              return self.Ok()
        __safe_for_unpickling__ = True
        def __reduce__(self):               return (Colour, self.Get())
        </pythoncode>
  </class>
  <pythoncode>
    Color = Colour
    NamedColor = NamedColour
    ColorRGB = ColourRGB
</pythoncode>
  <class name="Palette" oldname="wxPalette" module="gdi">
    <baseclass name="wxGDIObject"/>
    <constructor name="Palette" overloaded="no">
      <autodoc>__init__(int n, unsigned char red, unsigned char green, unsigned char blue) -&gt; Palette</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="red" type="p.q(const).unsigned char" default=""/>
        <param name="green" type="p.q(const).unsigned char" default=""/>
        <param name="blue" type="p.q(const).unsigned char" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxPalette">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetPixel" overloaded="no">
      <autodoc>GetPixel(byte red, byte green, byte blue) -&gt; int</autodoc>
      <paramlist>
        <param name="red" type="byte" default=""/>
        <param name="green" type="byte" default=""/>
        <param name="blue" type="byte" default=""/>
      </paramlist>
    </method>
    <method name="GetRGB" overloaded="no">
      <autodoc>GetRGB(int pixel) -&gt; (R,G,B)</autodoc>
      <paramlist>
        <param name="pixel" type="int" default=""/>
        <param name="OUTPUT" type="p.byte" default=""/>
        <param name="OUTPUT" type="p.byte" default=""/>
        <param name="OUTPUT" type="p.byte" default=""/>
      </paramlist>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Pen" oldname="wxPen" module="gdi">
    <baseclass name="wxGDIObject"/>
    <constructor name="Pen" overloaded="no">
      <autodoc>__init__(Colour colour, int width=1, int style=SOLID) -&gt; Pen</autodoc>
      <paramlist>
        <param name="colour" type="r.wxColour" default=""/>
        <param name="width" type="int" default="1"/>
        <param name="style" type="int" default="wxSOLID"/>
      </paramlist>
    </constructor>
    <destructor name="~wxPen">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetCap" overloaded="no">
      <autodoc>GetCap() -&gt; int</autodoc>
    </method>
    <method name="GetColour" overloaded="no">
      <autodoc>GetColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetJoin" overloaded="no">
      <autodoc>GetJoin() -&gt; int</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; int</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="SetCap" overloaded="no">
      <autodoc>SetCap(int cap_style)</autodoc>
      <paramlist>
        <param name="cap_style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetJoin" overloaded="no">
      <autodoc>SetJoin(int join_style)</autodoc>
      <paramlist>
        <param name="join_style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(int style)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDashes" overloaded="no">
      <autodoc>SetDashes(int dashes, wxDash dashes_array)</autodoc>
      <paramlist>
        <param name="dashes" type="int" default=""/>
        <param name="dashes_array" type="p.wxDash" default=""/>
      </paramlist>
    </method>
    <method name="GetDashes" overloaded="no">
      <autodoc>GetDashes() -&gt; PyObject</autodoc>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(Pen pen) -&gt; bool</autodoc>
      <paramlist>
        <param name="pen" type="r.q(const).wxPen" default=""/>
      </paramlist>
    </method>
    <method name="GetDashCount" overloaded="no">
      <autodoc>GetDashCount() -&gt; int</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="PyPen" oldname="wxPyPen" module="gdi">
    <baseclass name="wxPen"/>
    <constructor name="PyPen" overloaded="no">
      <autodoc>__init__(Colour colour, int width=1, int style=SOLID) -&gt; PyPen</autodoc>
      <paramlist>
        <param name="colour" type="r.wxColour" default=""/>
        <param name="width" type="int" default="1"/>
        <param name="style" type="int" default="wxSOLID"/>
      </paramlist>
    </constructor>
    <destructor name="~wxPyPen">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetDashes" overloaded="no">
      <autodoc>SetDashes(int dashes, wxDash dashes_array)</autodoc>
      <paramlist>
        <param name="dashes" type="int" default=""/>
        <param name="dashes_array" type="p.wxDash" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode> Pen = PyPen </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Brush" oldname="wxBrush" module="gdi">
    <docstring>A brush is a drawing tool for filling in areas. It is used for painting the
background of rectangles, ellipses, etc. It has a colour and a style.</docstring>
    <baseclass name="wxGDIObject"/>
    <constructor name="Brush" overloaded="no">
      <autodoc>__init__(Colour colour, int style=SOLID) -&gt; Brush</autodoc>
      <docstring>Constructs a brush from a colour object and style.</docstring>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
        <param name="style" type="int" default="wxSOLID"/>
      </paramlist>
    </constructor>
    <destructor name="~wxBrush">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(Colour col)</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(int style)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetStipple" overloaded="no">
      <autodoc>SetStipple(Bitmap stipple)</autodoc>
      <paramlist>
        <param name="stipple" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="GetColour" overloaded="no">
      <autodoc>GetColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; int</autodoc>
    </method>
    <method name="GetStipple" overloaded="no">
      <autodoc>GetStipple() -&gt; Bitmap</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="Bitmap" oldname="wxBitmap" module="gdi">
    <baseclass name="wxGDIObject"/>
    <constructor name="Bitmap" overloaded="no">
      <autodoc>__init__(String name, int type=BITMAP_TYPE_ANY) -&gt; Bitmap</autodoc>
      <docstring>Loads a bitmap from a file.</docstring>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="wxBitmapType" default="wxBITMAP_TYPE_ANY"/>
      </paramlist>
    </constructor>
    <destructor name="~wxBitmap">
      <autodoc>__del__()</autodoc>
    </destructor>
    <constructor name="EmptyBitmap" overloaded="no">
      <autodoc>EmptyBitmap(int width, int height, int depth=-1) -&gt; Bitmap</autodoc>
      <docstring>Creates a new bitmap of the given size.  A depth of -1 indicates the depth of
the current screen or visual. Some platforms only support 1 for monochrome and
-1 for the current colour setting.</docstring>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="depth" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <constructor name="BitmapFromIcon" overloaded="no">
      <autodoc>BitmapFromIcon(Icon icon) -&gt; Bitmap</autodoc>
      <docstring>Create a new bitmap from an Icon object.</docstring>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
      </paramlist>
    </constructor>
    <constructor name="BitmapFromImage" overloaded="no">
      <autodoc>BitmapFromImage(Image image, int depth=-1) -&gt; Bitmap</autodoc>
      <docstring>Creates bitmap object from the image. This has to be done to actually display
an image as you cannot draw an image directly on a window. The resulting
bitmap will use the provided colour depth (or that of the current system if
depth is -1) which entails that a colour reduction has to take place.</docstring>
      <paramlist>
        <param name="image" type="r.q(const).wxImage" default=""/>
        <param name="depth" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <constructor name="BitmapFromXPMData" overloaded="no">
      <autodoc>BitmapFromXPMData(PyObject listOfStrings) -&gt; Bitmap</autodoc>
      <docstring>Construct a Bitmap from a list of strings formatted as XPM data.</docstring>
      <paramlist>
        <param name="listOfStrings" type="p.PyObject" default=""/>
      </paramlist>
    </constructor>
    <constructor name="BitmapFromBits" overloaded="no">
      <autodoc>BitmapFromBits(PyObject bits, int width, int height, int depth=1) -&gt; Bitmap</autodoc>
      <docstring>Creates a bitmap from an array of bits.  You should only use this function for
monochrome bitmaps (depth 1) in portable programs: in this case the bits
parameter should contain an XBM image.  For other bit depths, the behaviour is
platform dependent.</docstring>
      <paramlist>
        <param name="bits" type="p.PyObject" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="depth" type="int" default="1"/>
      </paramlist>
    </constructor>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
      <docstring>Gets the width of the bitmap in pixels.</docstring>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; int</autodoc>
      <docstring>Gets the height of the bitmap in pixels.</docstring>
    </method>
    <method name="GetDepth" overloaded="no">
      <autodoc>GetDepth() -&gt; int</autodoc>
      <docstring>Gets the colour depth of the bitmap. A value of 1 indicates a
monochrome bitmap.</docstring>
    </method>
    <method name="ConvertToImage" overloaded="no">
      <autodoc>ConvertToImage() -&gt; Image</autodoc>
      <docstring>Creates a platform-independent image from a platform-dependent bitmap. This
preserves mask information so that bitmaps and images can be converted back
and forth without loss in that respect.</docstring>
    </method>
    <method name="GetMask" overloaded="no">
      <autodoc>GetMask() -&gt; Mask</autodoc>
      <docstring>Gets the associated mask (if any) which may have been loaded from a file
or explpicitly set for the bitmap.</docstring>
    </method>
    <method name="SetMask" overloaded="no">
      <autodoc>SetMask(Mask mask)</autodoc>
      <docstring>Sets the mask for this bitmap.</docstring>
      <paramlist>
        <param name="mask" type="p.wxMask" default=""/>
      </paramlist>
    </method>
    <method name="SetMaskColour" overloaded="no">
      <autodoc>SetMaskColour(Colour colour)</autodoc>
      <docstring>Create a Mask based on a specified colour in the Bitmap.</docstring>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetSubBitmap" overloaded="no">
      <autodoc>GetSubBitmap(Rect rect) -&gt; Bitmap</autodoc>
      <docstring>Returns a sub bitmap of the current one as long as the rect belongs entirely
to the bitmap. This function preserves bit depth and mask information.</docstring>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="SaveFile" overloaded="no">
      <autodoc>SaveFile(String name, int type, Palette palette=(wxPalette *) NULL) -&gt; bool</autodoc>
      <docstring>Saves a bitmap in the named file.</docstring>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="wxBitmapType" default=""/>
        <param name="palette" type="p.wxPalette" default="(wxPalette *) NULL"/>
      </paramlist>
    </method>
    <method name="LoadFile" overloaded="no">
      <autodoc>LoadFile(String name, int type) -&gt; bool</autodoc>
      <docstring>Loads a bitmap from a file</docstring>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="wxBitmapType" default=""/>
      </paramlist>
    </method>
    <method name="CopyFromIcon" overloaded="no">
      <autodoc>CopyFromIcon(Icon icon) -&gt; bool</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
      </paramlist>
    </method>
    <method name="SetHeight" overloaded="no">
      <autodoc>SetHeight(int height)</autodoc>
      <docstring>Set the height property (does not affect the bitmap data).</docstring>
      <paramlist>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(int width)</autodoc>
      <docstring>Set the width property (does not affect the bitmap data).</docstring>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDepth" overloaded="no">
      <autodoc>SetDepth(int depth)</autodoc>
      <docstring>Set the depth property (does not affect the bitmap data).</docstring>
      <paramlist>
        <param name="depth" type="int" default=""/>
      </paramlist>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="Mask" oldname="wxMask" module="gdi">
    <docstring>This class encapsulates a monochrome mask bitmap, where the masked area is
black and the unmasked area is white. When associated with a bitmap and drawn
in a device context, the unmasked area of the bitmap will be drawn, and the
masked area will not be drawn.</docstring>
    <baseclass name="wxObject"/>
    <constructor name="Mask" overloaded="no">
      <autodoc>__init__(Bitmap bitmap, Colour colour=NullColour) -&gt; Mask</autodoc>
      <docstring>Constructs a mask from a bitmap and a colour in that bitmap that indicates
the transparent portions of the mask, by default BLACK is used.</docstring>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="colour" type="r.q(const).wxColour" default="wxNullColour"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode> MaskColour = Mask </pythoncode>
  <class name="Icon" oldname="wxIcon" module="gdi">
    <baseclass name="wxGDIObject"/>
    <constructor name="Icon" overloaded="no">
      <autodoc>__init__(String name, int type, int desiredWidth=-1, int desiredHeight=-1) -&gt; Icon</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="wxBitmapType" default=""/>
        <param name="desiredWidth" type="int" default="-1"/>
        <param name="desiredHeight" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxIcon">
      <autodoc>__del__()</autodoc>
    </destructor>
    <constructor name="EmptyIcon" overloaded="no">
      <autodoc>EmptyIcon() -&gt; Icon</autodoc>
    </constructor>
    <constructor name="IconFromLocation" overloaded="no">
      <autodoc>IconFromLocation(IconLocation loc) -&gt; Icon</autodoc>
      <paramlist>
        <param name="loc" type="r.q(const).wxIconLocation" default=""/>
      </paramlist>
    </constructor>
    <constructor name="IconFromBitmap" overloaded="no">
      <autodoc>IconFromBitmap(Bitmap bmp) -&gt; Icon</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </constructor>
    <constructor name="IconFromXPMData" overloaded="no">
      <autodoc>IconFromXPMData(PyObject listOfStrings) -&gt; Icon</autodoc>
      <paramlist>
        <param name="listOfStrings" type="p.PyObject" default=""/>
      </paramlist>
    </constructor>
    <method name="LoadFile" overloaded="no">
      <autodoc>LoadFile(String name, int type) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="type" type="wxBitmapType" default=""/>
      </paramlist>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; int</autodoc>
    </method>
    <method name="GetDepth" overloaded="no">
      <autodoc>GetDepth() -&gt; int</autodoc>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(int w)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetHeight" overloaded="no">
      <autodoc>SetHeight(int h)</autodoc>
      <paramlist>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDepth" overloaded="no">
      <autodoc>SetDepth(int d)</autodoc>
      <paramlist>
        <param name="d" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CopyFromBitmap" overloaded="no">
      <autodoc>CopyFromBitmap(Bitmap bmp)</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="IconLocation" oldname="wxIconLocation" module="gdi">
    <constructor name="IconLocation" overloaded="no">
      <autodoc>__init__(String filename=&amp;wxPyEmptyString, int num=0) -&gt; IconLocation</autodoc>
      <paramlist>
        <param name="filename" type="p.q(const).wxString" default="&amp;wxPyEmptyString"/>
        <param name="num" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxIconLocation">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
    <method name="SetFileName" overloaded="no">
      <autodoc>SetFileName(String filename)</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetFileName" overloaded="no">
      <autodoc>GetFileName() -&gt; String</autodoc>
    </method>
    <method name="SetIndex" overloaded="no">
      <autodoc>SetIndex(int num)</autodoc>
      <paramlist>
        <param name="num" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetIndex" overloaded="no">
      <autodoc>GetIndex() -&gt; int</autodoc>
    </method>
  </class>
  <class name="IconBundle" oldname="wxIconBundle" module="gdi">
    <constructor name="IconBundle" overloaded="no">
      <autodoc>__init__() -&gt; IconBundle</autodoc>
    </constructor>
    <constructor name="IconBundleFromFile" overloaded="no">
      <autodoc>IconBundleFromFile(String file, long type) -&gt; IconBundle</autodoc>
      <paramlist>
        <param name="file" type="r.q(const).wxString" default=""/>
        <param name="type" type="long" default=""/>
      </paramlist>
    </constructor>
    <constructor name="IconBundleFromIcon" overloaded="no">
      <autodoc>IconBundleFromIcon(Icon icon) -&gt; IconBundle</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxIconBundle">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="AddIcon" overloaded="no">
      <autodoc>AddIcon(Icon icon)</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
      </paramlist>
    </method>
    <method name="AddIconFromFile" overloaded="no">
      <autodoc>AddIconFromFile(String file, long type)</autodoc>
      <paramlist>
        <param name="file" type="r.q(const).wxString" default=""/>
        <param name="type" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetIcon" overloaded="no">
      <autodoc>GetIcon(Size size) -&gt; Icon</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="Cursor" oldname="wxCursor" module="gdi">
    <baseclass name="wxGDIObject"/>
    <constructor name="Cursor" overloaded="no">
      <autodoc>__init__(String cursorName, long flags, int hotSpotX=0, int hotSpotY=0) -&gt; Cursor</autodoc>
      <paramlist>
        <param name="cursorName" type="p.q(const).wxString" default=""/>
        <param name="flags" type="long" default=""/>
        <param name="hotSpotX" type="int" default="0"/>
        <param name="hotSpotY" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxCursor">
      <autodoc>__del__()</autodoc>
    </destructor>
    <constructor name="StockCursor" overloaded="no">
      <autodoc>StockCursor(int id) -&gt; Cursor</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </constructor>
    <constructor name="CursorFromImage" overloaded="no">
      <autodoc>CursorFromImage(Image image) -&gt; Cursor</autodoc>
      <paramlist>
        <param name="image" type="r.q(const).wxImage" default=""/>
      </paramlist>
    </constructor>
    <constructor name="CursorFromBits" overloaded="no">
      <autodoc>CursorFromBits(PyObject bits, int width, int height, int hotSpotX=-1, 
    int hotSpotY=-1, PyObject maskBits=0) -&gt; Cursor</autodoc>
      <paramlist>
        <param name="bits" type="p.PyObject" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="hotSpotX" type="int" default="-1"/>
        <param name="hotSpotY" type="int" default="-1"/>
        <param name="maskBits" type="p.PyObject" default="0"/>
      </paramlist>
    </constructor>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Region" oldname="wxRegion" module="gdi">
    <baseclass name="wxGDIObject"/>
    <constructor name="Region" overloaded="no">
      <autodoc>__init__(int x=0, int y=0, int width=0, int height=0) -&gt; Region</autodoc>
      <paramlist>
        <param name="x" type="int" default="0"/>
        <param name="y" type="int" default="0"/>
        <param name="width" type="int" default="0"/>
        <param name="height" type="int" default="0"/>
      </paramlist>
    </constructor>
    <constructor name="RegionFromBitmap" overloaded="no">
      <autodoc>RegionFromBitmap(Bitmap bmp, Colour transColour=NullColour, int tolerance=0) -&gt; Region</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
        <param name="transColour" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="tolerance" type="int" default="0"/>
      </paramlist>
    </constructor>
    <constructor name="RegionFromPoints" overloaded="no">
      <autodoc>RegionFromPoints(int points, Point points_array, int fillStyle=WINDING_RULE) -&gt; Region</autodoc>
      <paramlist>
        <param name="points" type="int" default=""/>
        <param name="points_array" type="p.wxPoint" default=""/>
        <param name="fillStyle" type="int" default="wxWINDING_RULE"/>
      </paramlist>
    </constructor>
    <destructor name="~wxRegion">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="Offset" overloaded="no">
      <autodoc>Offset(int x, int y) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Contains" overloaded="no">
      <autodoc>Contains(int x, int y) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ContainsPoint" overloaded="no">
      <autodoc>ContainsPoint(Point pt) -&gt; int</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="ContainsRect" overloaded="no">
      <autodoc>ContainsRect(Rect rect) -&gt; int</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="ContainsRectDim" overloaded="no">
      <autodoc>ContainsRectDim(int x, int y, int w, int h) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="w" type="int" default=""/>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBox" overloaded="no">
      <autodoc>GetBox() -&gt; Rect</autodoc>
    </method>
    <method name="Intersect" overloaded="no">
      <autodoc>Intersect(int x, int y, int width, int height) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IntersectRect" overloaded="no">
      <autodoc>IntersectRect(Rect rect) -&gt; bool</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="IntersectRegion" overloaded="no">
      <autodoc>IntersectRegion(Region region) -&gt; bool</autodoc>
      <paramlist>
        <param name="region" type="r.q(const).wxRegion" default=""/>
      </paramlist>
    </method>
    <method name="IsEmpty" overloaded="no">
      <autodoc>IsEmpty() -&gt; bool</autodoc>
    </method>
    <method name="Union" overloaded="no">
      <autodoc>Union(int x, int y, int width, int height) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="UnionRect" overloaded="no">
      <autodoc>UnionRect(Rect rect) -&gt; bool</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="UnionRegion" overloaded="no">
      <autodoc>UnionRegion(Region region) -&gt; bool</autodoc>
      <paramlist>
        <param name="region" type="r.q(const).wxRegion" default=""/>
      </paramlist>
    </method>
    <method name="Subtract" overloaded="no">
      <autodoc>Subtract(int x, int y, int width, int height) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SubtractRect" overloaded="no">
      <autodoc>SubtractRect(Rect rect) -&gt; bool</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="SubtractRegion" overloaded="no">
      <autodoc>SubtractRegion(Region region) -&gt; bool</autodoc>
      <paramlist>
        <param name="region" type="r.q(const).wxRegion" default=""/>
      </paramlist>
    </method>
    <method name="Xor" overloaded="no">
      <autodoc>Xor(int x, int y, int width, int height) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="XorRect" overloaded="no">
      <autodoc>XorRect(Rect rect) -&gt; bool</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="XorRegion" overloaded="no">
      <autodoc>XorRegion(Region region) -&gt; bool</autodoc>
      <paramlist>
        <param name="region" type="r.q(const).wxRegion" default=""/>
      </paramlist>
    </method>
    <method name="ConvertToBitmap" overloaded="no">
      <autodoc>ConvertToBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="UnionBitmap" overloaded="no">
      <autodoc>UnionBitmap(Bitmap bmp, Colour transColour=NullColour, int tolerance=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
        <param name="transColour" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="tolerance" type="int" default="0"/>
      </paramlist>
    </method>
  </class>
  <class name="RegionIterator" oldname="wxRegionIterator" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="RegionIterator" overloaded="no">
      <autodoc>__init__(Region region) -&gt; RegionIterator</autodoc>
      <paramlist>
        <param name="region" type="r.q(const).wxRegion" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxRegionIterator">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; int</autodoc>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; int</autodoc>
    </method>
    <method name="GetW" overloaded="no">
      <autodoc>GetW() -&gt; int</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="GetH" overloaded="no">
      <autodoc>GetH() -&gt; int</autodoc>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; int</autodoc>
    </method>
    <method name="GetRect" overloaded="no">
      <autodoc>GetRect() -&gt; Rect</autodoc>
    </method>
    <method name="HaveRects" overloaded="no">
      <autodoc>HaveRects() -&gt; bool</autodoc>
    </method>
    <method name="Reset" overloaded="no">
      <autodoc>Reset()</autodoc>
    </method>
    <method name="Next" overloaded="no">
      <autodoc>Next()</autodoc>
    </method>
    <method name="__nonzero__" overloaded="no">
      <autodoc>__nonzero__() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="NativeFontInfo" oldname="wxNativeFontInfo" module="gdi">
    <constructor name="NativeFontInfo" overloaded="no">
      <autodoc>__init__() -&gt; NativeFontInfo</autodoc>
    </constructor>
    <destructor name="~wxNativeFontInfo">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Init" overloaded="no">
      <autodoc>Init()</autodoc>
    </method>
    <method name="InitFromFont" overloaded="no">
      <autodoc>InitFromFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="GetPointSize" overloaded="no">
      <autodoc>GetPointSize() -&gt; int</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; int</autodoc>
    </method>
    <method name="GetWeight" overloaded="no">
      <autodoc>GetWeight() -&gt; int</autodoc>
    </method>
    <method name="GetUnderlined" overloaded="no">
      <autodoc>GetUnderlined() -&gt; bool</autodoc>
    </method>
    <method name="GetFaceName" overloaded="no">
      <autodoc>GetFaceName() -&gt; String</autodoc>
    </method>
    <method name="GetFamily" overloaded="no">
      <autodoc>GetFamily() -&gt; int</autodoc>
    </method>
    <method name="GetEncoding" overloaded="no">
      <autodoc>GetEncoding() -&gt; int</autodoc>
    </method>
    <method name="SetPointSize" overloaded="no">
      <autodoc>SetPointSize(int pointsize)</autodoc>
      <paramlist>
        <param name="pointsize" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(int style)</autodoc>
      <paramlist>
        <param name="style" type="wxFontStyle" default=""/>
      </paramlist>
    </method>
    <method name="SetWeight" overloaded="no">
      <autodoc>SetWeight(int weight)</autodoc>
      <paramlist>
        <param name="weight" type="wxFontWeight" default=""/>
      </paramlist>
    </method>
    <method name="SetUnderlined" overloaded="no">
      <autodoc>SetUnderlined(bool underlined)</autodoc>
      <paramlist>
        <param name="underlined" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetFaceName" overloaded="no">
      <autodoc>SetFaceName(String facename)</autodoc>
      <paramlist>
        <param name="facename" type="wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetFamily" overloaded="no">
      <autodoc>SetFamily(int family)</autodoc>
      <paramlist>
        <param name="family" type="wxFontFamily" default=""/>
      </paramlist>
    </method>
    <method name="SetEncoding" overloaded="no">
      <autodoc>SetEncoding(int encoding)</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
      </paramlist>
    </method>
    <method name="FromString" overloaded="no">
      <autodoc>FromString(String s) -&gt; bool</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ToString" overloaded="no">
      <autodoc>ToString() -&gt; String</autodoc>
    </method>
    <method name="__str__" overloaded="no">
      <autodoc>__str__() -&gt; String</autodoc>
    </method>
    <method name="FromUserString" overloaded="no">
      <autodoc>FromUserString(String s) -&gt; bool</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ToUserString" overloaded="no">
      <autodoc>ToUserString() -&gt; String</autodoc>
    </method>
  </class>
  <class name="NativeEncodingInfo" oldname="wxNativeEncodingInfo" module="gdi">
    <property name="facename" type="wxString" readonly="no"/>
    <property name="encoding" type="wxFontEncoding" readonly="no"/>
    <constructor name="NativeEncodingInfo" overloaded="no">
      <autodoc>__init__() -&gt; NativeEncodingInfo</autodoc>
    </constructor>
    <destructor name="~wxNativeEncodingInfo">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="FromString" overloaded="no">
      <autodoc>FromString(String s) -&gt; bool</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ToString" overloaded="no">
      <autodoc>ToString() -&gt; String</autodoc>
    </method>
  </class>
  <function oldname="wxGetNativeFontEncoding" name="GetNativeFontEncoding" overloaded="no">
    <autodoc>GetNativeFontEncoding(int encoding) -&gt; NativeEncodingInfo</autodoc>
    <paramlist>
      <param name="encoding" type="wxFontEncoding" default=""/>
    </paramlist>
  </function>
  <function oldname="wxTestFontEncoding" name="TestFontEncoding" overloaded="no">
    <autodoc>TestFontEncoding(NativeEncodingInfo info) -&gt; bool</autodoc>
    <paramlist>
      <param name="info" type="r.q(const).wxNativeEncodingInfo" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="FontMapper" oldname="wxFontMapper" module="gdi">
    <constructor name="FontMapper" overloaded="no">
      <autodoc>__init__() -&gt; FontMapper</autodoc>
    </constructor>
    <destructor name="~wxFontMapper">
      <autodoc>__del__()</autodoc>
    </destructor>
    <staticmethod name="Get" overloaded="no">
      <autodoc>Get() -&gt; FontMapper</autodoc>
    </staticmethod>
    <staticmethod name="Set" overloaded="no">
      <autodoc>Set(FontMapper mapper) -&gt; FontMapper</autodoc>
      <paramlist>
        <param name="mapper" type="p.wxFontMapper" default=""/>
      </paramlist>
    </staticmethod>
    <method name="CharsetToEncoding" overloaded="no">
      <autodoc>CharsetToEncoding(String charset, bool interactive=True) -&gt; int</autodoc>
      <paramlist>
        <param name="charset" type="r.q(const).wxString" default=""/>
        <param name="interactive" type="bool" default="True"/>
      </paramlist>
    </method>
    <staticmethod name="GetSupportedEncodingsCount" overloaded="no">
      <autodoc>GetSupportedEncodingsCount() -&gt; size_t</autodoc>
    </staticmethod>
    <staticmethod name="GetEncoding" overloaded="no">
      <autodoc>GetEncoding(size_t n) -&gt; int</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetEncodingName" overloaded="no">
      <autodoc>GetEncodingName(int encoding) -&gt; String</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetEncodingDescription" overloaded="no">
      <autodoc>GetEncodingDescription(int encoding) -&gt; String</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
      </paramlist>
    </staticmethod>
    <method name="SetConfig" overloaded="no">
      <autodoc>SetConfig(ConfigBase config)</autodoc>
      <paramlist>
        <param name="config" type="p.wxConfigBase" default=""/>
      </paramlist>
    </method>
    <method name="SetConfigPath" overloaded="no">
      <autodoc>SetConfigPath(String prefix)</autodoc>
      <paramlist>
        <param name="prefix" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <staticmethod name="GetDefaultConfigPath" overloaded="no">
      <autodoc>GetDefaultConfigPath() -&gt; String</autodoc>
    </staticmethod>
    <method name="GetAltForEncoding" overloaded="no">
      <autodoc>GetAltForEncoding(int encoding, String facename=EmptyString, bool interactive=True) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
        <param name="facename" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="interactive" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="IsEncodingAvailable" overloaded="no">
      <autodoc>IsEncodingAvailable(int encoding, String facename=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
        <param name="facename" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="SetDialogParent" overloaded="no">
      <autodoc>SetDialogParent(Window parent)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="SetDialogTitle" overloaded="no">
      <autodoc>SetDialogTitle(String title)</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Font" oldname="wxFont" module="gdi">
    <baseclass name="wxGDIObject"/>
    <constructor name="Font" overloaded="no">
      <autodoc>__init__(int pointSize, int family, int style, int weight, bool underline=False, 
    String face=EmptyString, 
    int encoding=FONTENCODING_DEFAULT) -&gt; Font</autodoc>
      <paramlist>
        <param name="pointSize" type="int" default=""/>
        <param name="family" type="int" default=""/>
        <param name="style" type="int" default=""/>
        <param name="weight" type="int" default=""/>
        <param name="underline" type="bool" default="False"/>
        <param name="face" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_DEFAULT"/>
      </paramlist>
    </constructor>
    <destructor name="~wxFont">
      <autodoc>__del__()</autodoc>
    </destructor>
    <constructor name="FontFromNativeInfo" overloaded="no">
      <autodoc>FontFromNativeInfo(NativeFontInfo info) -&gt; Font</autodoc>
      <paramlist>
        <param name="info" type="r.q(const).wxNativeFontInfo" default=""/>
      </paramlist>
    </constructor>
    <constructor name="FontFromNativeInfoString" overloaded="no">
      <autodoc>FontFromNativeInfoString(String info) -&gt; Font</autodoc>
      <paramlist>
        <param name="info" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <constructor name="Font2" overloaded="no">
      <autodoc>Font2(int pointSize, int family, int flags=FONTFLAG_DEFAULT, 
    String face=EmptyString, int encoding=FONTENCODING_DEFAULT) -&gt; Font</autodoc>
      <paramlist>
        <param name="pointSize" type="int" default=""/>
        <param name="family" type="wxFontFamily" default=""/>
        <param name="flags" type="int" default="wxFONTFLAG_DEFAULT"/>
        <param name="face" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_DEFAULT"/>
      </paramlist>
    </constructor>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(Font font) -&gt; bool</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(Font font) -&gt; bool</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="GetPointSize" overloaded="no">
      <autodoc>GetPointSize() -&gt; int</autodoc>
    </method>
    <method name="GetFamily" overloaded="no">
      <autodoc>GetFamily() -&gt; int</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; int</autodoc>
    </method>
    <method name="GetWeight" overloaded="no">
      <autodoc>GetWeight() -&gt; int</autodoc>
    </method>
    <method name="GetUnderlined" overloaded="no">
      <autodoc>GetUnderlined() -&gt; bool</autodoc>
    </method>
    <method name="GetFaceName" overloaded="no">
      <autodoc>GetFaceName() -&gt; String</autodoc>
    </method>
    <method name="GetEncoding" overloaded="no">
      <autodoc>GetEncoding() -&gt; int</autodoc>
    </method>
    <method name="GetNativeFontInfo" overloaded="no">
      <autodoc>GetNativeFontInfo() -&gt; NativeFontInfo</autodoc>
    </method>
    <method name="IsFixedWidth" overloaded="no">
      <autodoc>IsFixedWidth() -&gt; bool</autodoc>
    </method>
    <method name="GetNativeFontInfoDesc" overloaded="no">
      <autodoc>GetNativeFontInfoDesc() -&gt; String</autodoc>
    </method>
    <method name="GetNativeFontInfoUserDesc" overloaded="no">
      <autodoc>GetNativeFontInfoUserDesc() -&gt; String</autodoc>
    </method>
    <method name="SetPointSize" overloaded="no">
      <autodoc>SetPointSize(int pointSize)</autodoc>
      <paramlist>
        <param name="pointSize" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFamily" overloaded="no">
      <autodoc>SetFamily(int family)</autodoc>
      <paramlist>
        <param name="family" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(int style)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWeight" overloaded="no">
      <autodoc>SetWeight(int weight)</autodoc>
      <paramlist>
        <param name="weight" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFaceName" overloaded="no">
      <autodoc>SetFaceName(String faceName)</autodoc>
      <paramlist>
        <param name="faceName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetUnderlined" overloaded="no">
      <autodoc>SetUnderlined(bool underlined)</autodoc>
      <paramlist>
        <param name="underlined" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetEncoding" overloaded="no">
      <autodoc>SetEncoding(int encoding)</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
      </paramlist>
    </method>
    <method name="SetNativeFontInfo" overloaded="no">
      <autodoc>SetNativeFontInfo(NativeFontInfo info)</autodoc>
      <paramlist>
        <param name="info" type="r.q(const).wxNativeFontInfo" default=""/>
      </paramlist>
    </method>
    <method name="SetNativeFontInfoFromString" overloaded="no">
      <autodoc>SetNativeFontInfoFromString(String info)</autodoc>
      <paramlist>
        <param name="info" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetNativeFontInfoUserDesc" overloaded="no">
      <autodoc>SetNativeFontInfoUserDesc(String info)</autodoc>
      <paramlist>
        <param name="info" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetFamilyString" overloaded="no">
      <autodoc>GetFamilyString() -&gt; String</autodoc>
    </method>
    <method name="GetStyleString" overloaded="no">
      <autodoc>GetStyleString() -&gt; String</autodoc>
    </method>
    <method name="GetWeightString" overloaded="no">
      <autodoc>GetWeightString() -&gt; String</autodoc>
    </method>
    <method name="SetNoAntiAliasing" overloaded="no">
      <autodoc>SetNoAntiAliasing(bool no=True)</autodoc>
      <paramlist>
        <param name="no" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetNoAntiAliasing" overloaded="no">
      <autodoc>GetNoAntiAliasing() -&gt; bool</autodoc>
    </method>
    <staticmethod name="GetDefaultEncoding" overloaded="no">
      <autodoc>GetDefaultEncoding() -&gt; int</autodoc>
    </staticmethod>
    <staticmethod name="SetDefaultEncoding" overloaded="no">
      <autodoc>SetDefaultEncoding(int encoding)</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="FontEnumerator" oldname="wxPyFontEnumerator" module="gdi">
    <constructor name="wxPyFontEnumerator" overloaded="no">
      <autodoc>__init__() -&gt; FontEnumerator</autodoc>
    </constructor>
    <destructor name="~wxPyFontEnumerator">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class, bool incref)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
        <param name="incref" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnumerateFacenames" overloaded="no">
      <autodoc>EnumerateFacenames(int encoding=FONTENCODING_SYSTEM, bool fixedWidthOnly=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_SYSTEM"/>
        <param name="fixedWidthOnly" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="EnumerateEncodings" overloaded="no">
      <autodoc>EnumerateEncodings(String facename=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="facename" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetEncodings" overloaded="no">
      <autodoc>GetEncodings() -&gt; PyObject</autodoc>
    </method>
    <method name="GetFacenames" overloaded="no">
      <autodoc>GetFacenames() -&gt; PyObject</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="LanguageInfo" oldname="wxLanguageInfo" module="gdi">
    <property name="Language" type="int" readonly="no"/>
    <property name="CanonicalName" type="wxString" readonly="no"/>
    <property name="Description" type="wxString" readonly="no"/>
  </class>
  <class name="Locale" oldname="wxLocale" module="gdi">
    <constructor name="Locale" overloaded="no">
      <autodoc>__init__(int language=LANGUAGE_DEFAULT, int flags=wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING) -&gt; Locale</autodoc>
      <paramlist>
        <param name="language" type="int" default="wxLANGUAGE_DEFAULT"/>
        <param name="flags" type="int" default="wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING"/>
      </paramlist>
    </constructor>
    <destructor name="~wxLocale">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Init1" overloaded="no">
      <autodoc>Init1(String szName, String szShort=EmptyString, String szLocale=EmptyString, 
    bool bLoadDefault=True, 
    bool bConvertEncoding=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="szName" type="r.q(const).wxString" default=""/>
        <param name="szShort" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="szLocale" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="bLoadDefault" type="bool" default="True"/>
        <param name="bConvertEncoding" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="Init2" overloaded="no">
      <autodoc>Init2(int language=LANGUAGE_DEFAULT, int flags=wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING) -&gt; bool</autodoc>
      <paramlist>
        <param name="language" type="int" default="wxLANGUAGE_DEFAULT"/>
        <param name="flags" type="int" default="wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING"/>
      </paramlist>
    </method>
    <pythoncode>
    def Init(self, *_args, **_kwargs):
        if type(_args[0]) in [type(''), type(u'')]:
            val = self.Init1(*_args, **_kwargs)
        else:
            val = self.Init2(*_args, **_kwargs)
        return val
    </pythoncode>
    <staticmethod name="GetSystemLanguage" overloaded="no">
      <autodoc>GetSystemLanguage() -&gt; int</autodoc>
    </staticmethod>
    <staticmethod name="GetSystemEncoding" overloaded="no">
      <autodoc>GetSystemEncoding() -&gt; int</autodoc>
    </staticmethod>
    <staticmethod name="GetSystemEncodingName" overloaded="no">
      <autodoc>GetSystemEncodingName() -&gt; String</autodoc>
    </staticmethod>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.IsOk() </pythoncode>
    <method name="GetLocale" overloaded="no">
      <autodoc>GetLocale() -&gt; String</autodoc>
    </method>
    <method name="GetLanguage" overloaded="no">
      <autodoc>GetLanguage() -&gt; int</autodoc>
    </method>
    <method name="GetSysName" overloaded="no">
      <autodoc>GetSysName() -&gt; String</autodoc>
    </method>
    <method name="GetCanonicalName" overloaded="no">
      <autodoc>GetCanonicalName() -&gt; String</autodoc>
    </method>
    <staticmethod name="AddCatalogLookupPathPrefix" overloaded="no">
      <autodoc>AddCatalogLookupPathPrefix(String prefix)</autodoc>
      <paramlist>
        <param name="prefix" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <method name="AddCatalog" overloaded="no">
      <autodoc>AddCatalog(String szDomain) -&gt; bool</autodoc>
      <paramlist>
        <param name="szDomain" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="IsLoaded" overloaded="no">
      <autodoc>IsLoaded(String szDomain) -&gt; bool</autodoc>
      <paramlist>
        <param name="szDomain" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <staticmethod name="GetLanguageInfo" overloaded="no">
      <autodoc>GetLanguageInfo(int lang) -&gt; LanguageInfo</autodoc>
      <paramlist>
        <param name="lang" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetLanguageName" overloaded="no">
      <autodoc>GetLanguageName(int lang) -&gt; String</autodoc>
      <paramlist>
        <param name="lang" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="FindLanguageInfo" overloaded="no">
      <autodoc>FindLanguageInfo(String locale) -&gt; LanguageInfo</autodoc>
      <paramlist>
        <param name="locale" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="AddLanguage" overloaded="no">
      <autodoc>AddLanguage(LanguageInfo info)</autodoc>
      <paramlist>
        <param name="info" type="r.q(const).wxLanguageInfo" default=""/>
      </paramlist>
    </staticmethod>
    <method name="GetString" overloaded="no">
      <autodoc>GetString(String szOrigString, String szDomain=EmptyString) -&gt; String</autodoc>
      <paramlist>
        <param name="szOrigString" type="r.q(const).wxString" default=""/>
        <param name="szDomain" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
  </class>
  <function oldname="wxGetLocale" name="GetLocale" overloaded="no">
    <autodoc>GetLocale() -&gt; Locale</autodoc>
  </function>
  <function oldname="wxGetTranslation" name="GetTranslation" overloaded="yes">
    <paramlist>
      <param name="str" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetTranslation" name="GetTranslation" overloaded="yes">
    <autodoc>GetTranslation(String str) -&gt; String
GetTranslation(String str, String strPlural, size_t n) -&gt; String</autodoc>
    <paramlist>
      <param name="str" type="r.q(const).wxString" default=""/>
      <param name="strPlural" type="r.q(const).wxString" default=""/>
      <param name="n" type="size_t" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="EncodingConverter" oldname="wxEncodingConverter" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="EncodingConverter" overloaded="no">
      <autodoc>__init__() -&gt; EncodingConverter</autodoc>
    </constructor>
    <destructor name="~wxEncodingConverter">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Init" overloaded="no">
      <autodoc>Init(int input_enc, int output_enc, int method=CONVERT_STRICT) -&gt; bool</autodoc>
      <paramlist>
        <param name="input_enc" type="wxFontEncoding" default=""/>
        <param name="output_enc" type="wxFontEncoding" default=""/>
        <param name="method" type="int" default="wxCONVERT_STRICT"/>
      </paramlist>
    </method>
    <method name="Convert" overloaded="no">
      <autodoc>Convert(String input) -&gt; String</autodoc>
      <paramlist>
        <param name="input" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <staticmethod name="GetPlatformEquivalents" overloaded="no">
      <autodoc>GetPlatformEquivalents(int enc, int platform=PLATFORM_CURRENT) -&gt; wxFontEncodingArray</autodoc>
      <paramlist>
        <param name="enc" type="wxFontEncoding" default=""/>
        <param name="platform" type="int" default="wxPLATFORM_CURRENT"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetAllEquivalents" overloaded="no">
      <autodoc>GetAllEquivalents(int enc) -&gt; wxFontEncodingArray</autodoc>
      <paramlist>
        <param name="enc" type="wxFontEncoding" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="CanConvert" overloaded="no">
      <autodoc>CanConvert(int encIn, int encOut) -&gt; bool</autodoc>
      <paramlist>
        <param name="encIn" type="wxFontEncoding" default=""/>
        <param name="encOut" type="wxFontEncoding" default=""/>
      </paramlist>
    </staticmethod>
    <pythoncode> def __nonzero__(self): return self.IsOk() </pythoncode>
  </class>
  <pythoncode>#----------------------------------------------------------------------------
# wxGTK sets the locale when initialized.  Doing this at the Python
# level should set it up to match what GTK is doing at the C level.
if wx.Platform == "__WXGTK__":
    try:
        import locale
        locale.setlocale(locale.LC_ALL, "")
    except:
        pass

# On MSW add the directory where the wxWindows catalogs were installed
# to the default catalog path.
if wx.Platform == "__WXMSW__":
    import os
    localedir = os.path.join(os.path.split(__file__)[0], "locale")
    Locale_AddCatalogLookupPathPrefix(localedir)
    del os

#----------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="DC" oldname="wxDC" module="gdi">
    <baseclass name="wxObject"/>
    <destructor name="~wxDC">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="BeginDrawing" overloaded="no">
      <autodoc>BeginDrawing()</autodoc>
    </method>
    <method name="EndDrawing" overloaded="no">
      <autodoc>EndDrawing()</autodoc>
    </method>
    <method name="FloodFillXY" overloaded="no">
      <autodoc>FloodFillXY(int x, int y, Colour col, int style=FLOOD_SURFACE) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
        <param name="style" type="int" default="wxFLOOD_SURFACE"/>
      </paramlist>
    </method>
    <method name="FloodFill" overloaded="no">
      <autodoc>FloodFill(Point pt, Colour col, int style=FLOOD_SURFACE) -&gt; bool</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
        <param name="style" type="int" default="wxFLOOD_SURFACE"/>
      </paramlist>
    </method>
    <method name="GetPixelXY" overloaded="no">
      <autodoc>GetPixelXY(int x, int y) -&gt; Colour</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPixel" overloaded="no">
      <autodoc>GetPixel(Point pt) -&gt; Colour</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawLineXY" overloaded="no">
      <autodoc>DrawLineXY(int x1, int y1, int x2, int y2)</autodoc>
      <paramlist>
        <param name="x1" type="int" default=""/>
        <param name="y1" type="int" default=""/>
        <param name="x2" type="int" default=""/>
        <param name="y2" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawLine" overloaded="no">
      <autodoc>DrawLine(Point pt1, Point pt2)</autodoc>
      <paramlist>
        <param name="pt1" type="r.q(const).wxPoint" default=""/>
        <param name="pt2" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="CrossHairXY" overloaded="no">
      <autodoc>CrossHairXY(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CrossHair" overloaded="no">
      <autodoc>CrossHair(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawArcXY" overloaded="no">
      <autodoc>DrawArcXY(int x1, int y1, int x2, int y2, int xc, int yc)</autodoc>
      <paramlist>
        <param name="x1" type="int" default=""/>
        <param name="y1" type="int" default=""/>
        <param name="x2" type="int" default=""/>
        <param name="y2" type="int" default=""/>
        <param name="xc" type="int" default=""/>
        <param name="yc" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawArc" overloaded="no">
      <autodoc>DrawArc(Point pt1, Point pt2, Point centre)</autodoc>
      <paramlist>
        <param name="pt1" type="r.q(const).wxPoint" default=""/>
        <param name="pt2" type="r.q(const).wxPoint" default=""/>
        <param name="centre" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawCheckMarkXY" overloaded="no">
      <autodoc>DrawCheckMarkXY(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawCheckMark" overloaded="no">
      <autodoc>DrawCheckMark(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipticArcXY" overloaded="no">
      <autodoc>DrawEllipticArcXY(int x, int y, int w, int h, double sa, double ea)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="w" type="int" default=""/>
        <param name="h" type="int" default=""/>
        <param name="sa" type="double" default=""/>
        <param name="ea" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipticArc" overloaded="no">
      <autodoc>DrawEllipticArc(Point pt, Size sz, double sa, double ea)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="sz" type="r.q(const).wxSize" default=""/>
        <param name="sa" type="double" default=""/>
        <param name="ea" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawPointXY" overloaded="no">
      <autodoc>DrawPointXY(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawPoint" overloaded="no">
      <autodoc>DrawPoint(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawRectangleXY" overloaded="no">
      <autodoc>DrawRectangleXY(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawRectangle" overloaded="no">
      <autodoc>DrawRectangle(Point pt, Size sz)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="DrawRectangleRect" overloaded="no">
      <autodoc>DrawRectangleRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="DrawRoundedRectangleXY" overloaded="no">
      <autodoc>DrawRoundedRectangleXY(int x, int y, int width, int height, double radius)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="radius" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawRoundedRectangle" overloaded="no">
      <autodoc>DrawRoundedRectangle(Point pt, Size sz, double radius)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="sz" type="r.q(const).wxSize" default=""/>
        <param name="radius" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawRoundedRectangleRect" overloaded="no">
      <autodoc>DrawRoundedRectangleRect(Rect r, double radius)</autodoc>
      <paramlist>
        <param name="r" type="r.q(const).wxRect" default=""/>
        <param name="radius" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawCircleXY" overloaded="no">
      <autodoc>DrawCircleXY(int x, int y, int radius)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="radius" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawCircle" overloaded="no">
      <autodoc>DrawCircle(Point pt, int radius)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="radius" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipseXY" overloaded="no">
      <autodoc>DrawEllipseXY(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipse" overloaded="no">
      <autodoc>DrawEllipse(Point pt, Size sz)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipseRect" overloaded="no">
      <autodoc>DrawEllipseRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="DrawIconXY" overloaded="no">
      <autodoc>DrawIconXY(Icon icon, int x, int y)</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawIcon" overloaded="no">
      <autodoc>DrawIcon(Icon icon, Point pt)</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawBitmapXY" overloaded="no">
      <autodoc>DrawBitmapXY(Bitmap bmp, int x, int y, bool useMask=False)</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="useMask" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="DrawBitmap" overloaded="no">
      <autodoc>DrawBitmap(Bitmap bmp, Point pt, bool useMask=False)</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="useMask" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="DrawTextXY" overloaded="no">
      <autodoc>DrawTextXY(String text, int x, int y)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawText" overloaded="no">
      <autodoc>DrawText(String text, Point pt)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawRotatedTextXY" overloaded="no">
      <autodoc>DrawRotatedTextXY(String text, int x, int y, double angle)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="angle" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawRotatedText" overloaded="no">
      <autodoc>DrawRotatedText(String text, Point pt, double angle)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="angle" type="double" default=""/>
      </paramlist>
    </method>
    <method name="BlitXY" overloaded="no">
      <autodoc>BlitXY(int xdest, int ydest, int width, int height, DC source, 
    int xsrc, int ysrc, int rop=COPY, bool useMask=False, 
    int xsrcMask=-1, int ysrcMask=-1) -&gt; bool</autodoc>
      <paramlist>
        <param name="xdest" type="int" default=""/>
        <param name="ydest" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="source" type="p.wxDC" default=""/>
        <param name="xsrc" type="int" default=""/>
        <param name="ysrc" type="int" default=""/>
        <param name="rop" type="int" default="wxCOPY"/>
        <param name="useMask" type="bool" default="False"/>
        <param name="xsrcMask" type="int" default="-1"/>
        <param name="ysrcMask" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="Blit" overloaded="no">
      <autodoc>Blit(Point destPt, Size sz, DC source, Point srcPt, int rop=COPY, 
    bool useMask=False, Point srcPtMask=DefaultPosition) -&gt; bool</autodoc>
      <paramlist>
        <param name="destPt" type="r.q(const).wxPoint" default=""/>
        <param name="sz" type="r.q(const).wxSize" default=""/>
        <param name="source" type="p.wxDC" default=""/>
        <param name="srcPt" type="r.q(const).wxPoint" default=""/>
        <param name="rop" type="int" default="wxCOPY"/>
        <param name="useMask" type="bool" default="False"/>
        <param name="srcPtMask" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </method>
    <method name="DrawLines" overloaded="no">
      <autodoc>DrawLines(int points, Point points_array, int xoffset=0, int yoffset=0)</autodoc>
      <paramlist>
        <param name="points" type="int" default=""/>
        <param name="points_array" type="p.wxPoint" default=""/>
        <param name="xoffset" type="int" default="0"/>
        <param name="yoffset" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="DrawPolygon" overloaded="no">
      <autodoc>DrawPolygon(int points, Point points_array, int xoffset=0, int yoffset=0, 
    int fillStyle=ODDEVEN_RULE)</autodoc>
      <paramlist>
        <param name="points" type="int" default=""/>
        <param name="points_array" type="p.wxPoint" default=""/>
        <param name="xoffset" type="int" default="0"/>
        <param name="yoffset" type="int" default="0"/>
        <param name="fillStyle" type="int" default="wxODDEVEN_RULE"/>
      </paramlist>
    </method>
    <method name="DrawLabel" overloaded="no">
      <autodoc>DrawLabel(String text, Rect rect, int alignment=wxALIGN_LEFT|wxALIGN_TOP, 
    int indexAccel=-1)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="alignment" type="int" default="wxALIGN_LEFT|wxALIGN_TOP"/>
        <param name="indexAccel" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="DrawImageLabel" overloaded="no">
      <autodoc>DrawImageLabel(String text, Bitmap image, Rect rect, int alignment=wxALIGN_LEFT|wxALIGN_TOP, 
    int indexAccel=-1) -&gt; Rect</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="r.q(const).wxBitmap" default=""/>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="alignment" type="int" default="wxALIGN_LEFT|wxALIGN_TOP"/>
        <param name="indexAccel" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="DrawSpline" overloaded="no">
      <autodoc>DrawSpline(int points, Point points_array)</autodoc>
      <paramlist>
        <param name="points" type="int" default=""/>
        <param name="points_array" type="p.wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="StartDoc" overloaded="no">
      <autodoc>StartDoc(String message) -&gt; bool</autodoc>
      <paramlist>
        <param name="message" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="EndDoc" overloaded="no">
      <autodoc>EndDoc()</autodoc>
    </method>
    <method name="StartPage" overloaded="no">
      <autodoc>StartPage()</autodoc>
    </method>
    <method name="EndPage" overloaded="no">
      <autodoc>EndPage()</autodoc>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetPen" overloaded="no">
      <autodoc>SetPen(Pen pen)</autodoc>
      <paramlist>
        <param name="pen" type="r.q(const).wxPen" default=""/>
      </paramlist>
    </method>
    <method name="SetBrush" overloaded="no">
      <autodoc>SetBrush(Brush brush)</autodoc>
      <paramlist>
        <param name="brush" type="r.q(const).wxBrush" default=""/>
      </paramlist>
    </method>
    <method name="SetBackground" overloaded="no">
      <autodoc>SetBackground(Brush brush)</autodoc>
      <paramlist>
        <param name="brush" type="r.q(const).wxBrush" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundMode" overloaded="no">
      <autodoc>SetBackgroundMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPalette" overloaded="no">
      <autodoc>SetPalette(Palette palette)</autodoc>
      <paramlist>
        <param name="palette" type="r.q(const).wxPalette" default=""/>
      </paramlist>
    </method>
    <method name="SetClippingRegionXY" overloaded="no">
      <autodoc>SetClippingRegionXY(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetClippingRegion" overloaded="no">
      <autodoc>SetClippingRegion(Point pt, Size sz)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetClippingRect" overloaded="no">
      <autodoc>SetClippingRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="SetClippingRegionAsRegion" overloaded="no">
      <autodoc>SetClippingRegionAsRegion(Region region)</autodoc>
      <paramlist>
        <param name="region" type="r.q(const).wxRegion" default=""/>
      </paramlist>
    </method>
    <method name="DestroyClippingRegion" overloaded="no">
      <autodoc>DestroyClippingRegion()</autodoc>
    </method>
    <method name="GetClippingBox" overloaded="no">
      <autodoc>GetClippingBox() -&gt; (x, y, width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetClippingRect" overloaded="no">
      <autodoc>GetClippingRect() -&gt; Rect</autodoc>
    </method>
    <method name="GetCharHeight" overloaded="no">
      <autodoc>GetCharHeight() -&gt; int</autodoc>
    </method>
    <method name="GetCharWidth" overloaded="no">
      <autodoc>GetCharWidth() -&gt; int</autodoc>
    </method>
    <method name="GetTextExtent" overloaded="no">
      <autodoc>GetTextExtent(wxString string) -&gt; (width, height)</autodoc>
      <docstring>Get the width and height of the text using the current font.
Only works for single line strings.</docstring>
      <paramlist>
        <param name="string" type="r.q(const).wxString" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetFullTextExtent" overloaded="no">
      <autodoc>GetFullTextExtent(wxString string, Font font=None) -&gt;
   (width, height, descent, externalLeading)</autodoc>
      <docstring>Get the width, height, decent and leading of the text using the current or specified font.
Only works for single line strings.</docstring>
      <paramlist>
        <param name="string" type="r.q(const).wxString" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="font" type="p.wxFont" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetMultiLineTextExtent" overloaded="no">
      <autodoc>GetMultiLineTextExtent(wxString string, Font font=None) -&gt;
   (width, height, descent, externalLeading)</autodoc>
      <docstring>Get the width, height, decent and leading of the text using the current or specified font.
Works for single as well as multi-line strings.</docstring>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="font" type="p.wxFont" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetPartialTextExtents" overloaded="no">
      <autodoc>GetPartialTextExtents(String text) -&gt; wxArrayInt</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
      <docstring>Get the DC size in device units.</docstring>
    </method>
    <method name="GetSizeTuple" overloaded="no">
      <autodoc>GetSizeTuple() -&gt; (width, height)</autodoc>
      <docstring>Get the DC size in device units.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetSizeMM" overloaded="no">
      <autodoc>GetSizeMM() -&gt; Size</autodoc>
      <docstring>Get the DC size in milimeters.</docstring>
    </method>
    <method name="GetSizeMMTuple" overloaded="no">
      <autodoc>GetSizeMMTuple() -&gt; (width, height)</autodoc>
      <docstring>Get the DC size in milimeters.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="DeviceToLogicalX" overloaded="no">
      <autodoc>DeviceToLogicalX(int x) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeviceToLogicalY" overloaded="no">
      <autodoc>DeviceToLogicalY(int y) -&gt; int</autodoc>
      <paramlist>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeviceToLogicalXRel" overloaded="no">
      <autodoc>DeviceToLogicalXRel(int x) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeviceToLogicalYRel" overloaded="no">
      <autodoc>DeviceToLogicalYRel(int y) -&gt; int</autodoc>
      <paramlist>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="LogicalToDeviceX" overloaded="no">
      <autodoc>LogicalToDeviceX(int x) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="LogicalToDeviceY" overloaded="no">
      <autodoc>LogicalToDeviceY(int y) -&gt; int</autodoc>
      <paramlist>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="LogicalToDeviceXRel" overloaded="no">
      <autodoc>LogicalToDeviceXRel(int x) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="LogicalToDeviceYRel" overloaded="no">
      <autodoc>LogicalToDeviceYRel(int y) -&gt; int</autodoc>
      <paramlist>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CanDrawBitmap" overloaded="no">
      <autodoc>CanDrawBitmap() -&gt; bool</autodoc>
    </method>
    <method name="CanGetTextExtent" overloaded="no">
      <autodoc>CanGetTextExtent() -&gt; bool</autodoc>
    </method>
    <method name="GetDepth" overloaded="no">
      <autodoc>GetDepth() -&gt; int</autodoc>
    </method>
    <method name="GetPPI" overloaded="no">
      <autodoc>GetPPI() -&gt; Size</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="GetBackgroundMode" overloaded="no">
      <autodoc>GetBackgroundMode() -&gt; int</autodoc>
    </method>
    <method name="GetBackground" overloaded="no">
      <autodoc>GetBackground() -&gt; Brush</autodoc>
    </method>
    <method name="GetBrush" overloaded="no">
      <autodoc>GetBrush() -&gt; Brush</autodoc>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <method name="GetPen" overloaded="no">
      <autodoc>GetPen() -&gt; Pen</autodoc>
    </method>
    <method name="GetTextBackground" overloaded="no">
      <autodoc>GetTextBackground() -&gt; Colour</autodoc>
    </method>
    <method name="GetTextForeground" overloaded="no">
      <autodoc>GetTextForeground() -&gt; Colour</autodoc>
    </method>
    <method name="SetTextForeground" overloaded="no">
      <autodoc>SetTextForeground(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetTextBackground" overloaded="no">
      <autodoc>SetTextBackground(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetMapMode" overloaded="no">
      <autodoc>GetMapMode() -&gt; int</autodoc>
    </method>
    <method name="SetMapMode" overloaded="no">
      <autodoc>SetMapMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetUserScale" overloaded="no">
      <autodoc>GetUserScale() -&gt; (xScale, yScale)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="SetUserScale" overloaded="no">
      <autodoc>SetUserScale(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="GetLogicalScale" overloaded="no">
      <autodoc>GetLogicalScale() -&gt; (xScale, yScale)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="SetLogicalScale" overloaded="no">
      <autodoc>SetLogicalScale(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="GetLogicalOrigin" overloaded="no">
      <autodoc>GetLogicalOrigin() -&gt; Point</autodoc>
    </method>
    <method name="GetLogicalOriginTuple" overloaded="no">
      <autodoc>GetLogicalOriginTuple() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetLogicalOrigin" overloaded="no">
      <autodoc>SetLogicalOrigin(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDeviceOrigin" overloaded="no">
      <autodoc>GetDeviceOrigin() -&gt; Point</autodoc>
    </method>
    <method name="GetDeviceOriginTuple" overloaded="no">
      <autodoc>GetDeviceOriginTuple() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetDeviceOrigin" overloaded="no">
      <autodoc>SetDeviceOrigin(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAxisOrientation" overloaded="no">
      <autodoc>SetAxisOrientation(bool xLeftRight, bool yBottomUp)</autodoc>
      <paramlist>
        <param name="xLeftRight" type="bool" default=""/>
        <param name="yBottomUp" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetLogicalFunction" overloaded="no">
      <autodoc>GetLogicalFunction() -&gt; int</autodoc>
    </method>
    <method name="SetLogicalFunction" overloaded="no">
      <autodoc>SetLogicalFunction(int function)</autodoc>
      <paramlist>
        <param name="function" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetOptimization" overloaded="no">
      <autodoc>SetOptimization(bool opt)</autodoc>
      <paramlist>
        <param name="opt" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetOptimization" overloaded="no">
      <autodoc>GetOptimization() -&gt; bool</autodoc>
    </method>
    <method name="CalcBoundingBox" overloaded="no">
      <autodoc>CalcBoundingBox(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ResetBoundingBox" overloaded="no">
      <autodoc>ResetBoundingBox()</autodoc>
    </method>
    <method name="MinX" overloaded="no">
      <autodoc>MinX() -&gt; int</autodoc>
    </method>
    <method name="MaxX" overloaded="no">
      <autodoc>MaxX() -&gt; int</autodoc>
    </method>
    <method name="MinY" overloaded="no">
      <autodoc>MinY() -&gt; int</autodoc>
    </method>
    <method name="MaxY" overloaded="no">
      <autodoc>MaxY() -&gt; int</autodoc>
    </method>
    <method name="GetBoundingBox" overloaded="no">
      <autodoc>GetBoundingBox() -&gt; (x1,y1, x2,y2)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
    <method name="_DrawPointList" overloaded="no">
      <autodoc>_DrawPointList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="pyCoords" type="p.PyObject" default=""/>
        <param name="pyPens" type="p.PyObject" default=""/>
        <param name="pyBrushes" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="_DrawLineList" overloaded="no">
      <autodoc>_DrawLineList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="pyCoords" type="p.PyObject" default=""/>
        <param name="pyPens" type="p.PyObject" default=""/>
        <param name="pyBrushes" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="_DrawRectangleList" overloaded="no">
      <autodoc>_DrawRectangleList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="pyCoords" type="p.PyObject" default=""/>
        <param name="pyPens" type="p.PyObject" default=""/>
        <param name="pyBrushes" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="_DrawEllipseList" overloaded="no">
      <autodoc>_DrawEllipseList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="pyCoords" type="p.PyObject" default=""/>
        <param name="pyPens" type="p.PyObject" default=""/>
        <param name="pyBrushes" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="_DrawPolygonList" overloaded="no">
      <autodoc>_DrawPolygonList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="pyCoords" type="p.PyObject" default=""/>
        <param name="pyPens" type="p.PyObject" default=""/>
        <param name="pyBrushes" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="_DrawTextList" overloaded="no">
      <autodoc>_DrawTextList(PyObject textList, PyObject pyPoints, PyObject foregroundList, 
    PyObject backgroundList) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="textList" type="p.PyObject" default=""/>
        <param name="pyPoints" type="p.PyObject" default=""/>
        <param name="foregroundList" type="p.PyObject" default=""/>
        <param name="backgroundList" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    def DrawPointList(self, points, pens=None):
        if pens is None:
           pens = []
        elif isinstance(pens, wx.Pen):
           pens = [pens]
        elif len(pens) != len(points):
           raise ValueError('points and pens must have same length')
        return self._DrawPointList(points, pens, [])


    def DrawLineList(self, lines, pens=None):
        if pens is None:
           pens = []
        elif isinstance(pens, wx.Pen):
           pens = [pens]
        elif len(pens) != len(lines):
           raise ValueError('lines and pens must have same length')
        return self._DrawLineList(lines, pens, [])


    def DrawRectangleList(self, rectangles, pens=None, brushes=None):
        if pens is None:
           pens = []
        elif isinstance(pens, wx.Pen):
           pens = [pens]
        elif len(pens) != len(rectangles):
           raise ValueError('rectangles and pens must have same length')
        if brushes is None:
           brushes = []
        elif isinstance(brushes, wx.Brush):
           brushes = [brushes]
        elif len(brushes) != len(rectangles):
           raise ValueError('rectangles and brushes must have same length')
        return self._DrawRectangleList(rectangles, pens, brushes)


    def DrawEllipseList(self, ellipses, pens=None, brushes=None):
        if pens is None:
           pens = []
        elif isinstance(pens, wx.Pen):
           pens = [pens]
        elif len(pens) != len(ellipses):
           raise ValueError('ellipses and pens must have same length')
        if brushes is None:
           brushes = []
        elif isinstance(brushes, wx.Brush):
           brushes = [brushes]
        elif len(brushes) != len(ellipses):
           raise ValueError('ellipses and brushes must have same length')
        return self._DrawEllipseList(ellipses, pens, brushes)


    def DrawPolygonList(self, polygons, pens=None, brushes=None):
        ## Note: This does not currently support fill style or offset
        ## you can always use the non-List version if need be.
        if pens is None:
           pens = []
        elif isinstance(pens, wx.Pen):
           pens = [pens]
        elif len(pens) != len(polygons):
           raise ValueError('polygons and pens must have same length')
        if brushes is None:
           brushes = []
        elif isinstance(brushes, wx.Brush):
           brushes = [brushes]
        elif len(brushes) != len(polygons):
           raise ValueError('polygons and brushes must have same length')
        return self._DrawPolygonList(polygons, pens, brushes)


    def DrawTextList(self, textList, coords, foregrounds = None, backgrounds = None, fonts = None):
        ## NOTE: this does not currently support changing the font
        ##       Make sure you set Background mode to wxSolid (DC.SetBackgroundMode)
        ##       If you want backgounds to do anything.
        if type(textList) == type(''):
           textList = [textList]
        elif len(textList) != len(coords):
           raise ValueError('textlist and coords must have same length')
        if foregrounds is None:
           foregrounds = []
        elif isinstance(foregrounds, wx.Colour):
           foregrounds = [foregrounds]
        elif len(foregrounds) != len(coords):
           raise ValueError('foregrounds and coords must have same length')
        if backgrounds is None:
           backgrounds = []
        elif isinstance(backgrounds, wx.Colour):
           backgrounds = [backgrounds]
        elif len(backgrounds) != len(coords):
           raise ValueError('backgrounds and coords must have same length')
        return  self._DrawTextList(textList, coords, foregrounds, backgrounds)
    </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MemoryDC" oldname="wxMemoryDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="MemoryDC" overloaded="no">
      <autodoc>__init__() -&gt; MemoryDC</autodoc>
    </constructor>
    <constructor name="MemoryDCFromDC" overloaded="no">
      <autodoc>MemoryDCFromDC(DC oldDC) -&gt; MemoryDC</autodoc>
      <paramlist>
        <param name="oldDC" type="p.wxDC" default=""/>
      </paramlist>
    </constructor>
    <method name="SelectObject" overloaded="no">
      <autodoc>SelectObject(Bitmap bitmap)</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="BufferedDC" oldname="wxBufferedDC" module="gdi">
    <baseclass name="wxMemoryDC"/>
    <constructor name="BufferedDC" overloaded="yes">
      <paramlist>
        <param name="dc" type="p.wxDC" default=""/>
        <param name="buffer" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </constructor>
    <constructor name="BufferedDC" overloaded="yes">
      <autodoc>__init__(DC dc, Bitmap buffer) -&gt; BufferedDC
__init__(DC dc, Size area, int flags=BUFFER_DC_DEFAULT) -&gt; BufferedDC</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default=""/>
        <param name="area" type="r.q(const).wxSize" default=""/>
        <param name="flags" type="int" default="wxBUFFER_DC_DEFAULT"/>
      </paramlist>
    </constructor>
    <constructor name="BufferedDCInternalBuffer" overloaded="no">
      <autodoc>BufferedDCInternalBuffer(DC dc, Size area, int flags=BUFFER_DC_DEFAULT) -&gt; BufferedDC</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default=""/>
        <param name="area" type="r.q(const).wxSize" default=""/>
        <param name="flags" type="int" default="wxBUFFER_DC_DEFAULT"/>
      </paramlist>
    </constructor>
    <method name="UnMask" overloaded="no">
      <autodoc>UnMask()</autodoc>
    </method>
  </class>
  <class name="BufferedPaintDC" oldname="wxBufferedPaintDC" module="gdi">
    <baseclass name="wxBufferedDC"/>
    <constructor name="BufferedPaintDC" overloaded="yes">
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="buffer" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </constructor>
    <constructor name="BufferedPaintDC" overloaded="yes">
      <autodoc>__init__(Window window, Bitmap buffer) -&gt; BufferedPaintDC
__init__(Window window, int flags=BUFFER_DC_DEFAULT) -&gt; BufferedPaintDC</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="flags" type="int" default="wxBUFFER_DC_DEFAULT"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ScreenDC" oldname="wxScreenDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="ScreenDC" overloaded="no">
      <autodoc>__init__() -&gt; ScreenDC</autodoc>
    </constructor>
    <method name="StartDrawingOnTopWin" overloaded="no">
      <autodoc>StartDrawingOnTopWin(Window window) -&gt; bool</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="StartDrawingOnTop" overloaded="no">
      <autodoc>StartDrawingOnTop(Rect rect=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="rect" type="p.wxRect" default="NULL"/>
      </paramlist>
    </method>
    <method name="EndDrawingOnTop" overloaded="no">
      <autodoc>EndDrawingOnTop() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ClientDC" oldname="wxClientDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="ClientDC" overloaded="no">
      <autodoc>__init__(Window win) -&gt; ClientDC</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PaintDC" oldname="wxPaintDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="PaintDC" overloaded="no">
      <autodoc>__init__(Window win) -&gt; PaintDC</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="WindowDC" oldname="wxWindowDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="WindowDC" overloaded="no">
      <autodoc>__init__(Window win) -&gt; WindowDC</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MirrorDC" oldname="wxMirrorDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="MirrorDC" overloaded="no">
      <autodoc>__init__(DC dc, bool mirror) -&gt; MirrorDC</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="mirror" type="bool" default=""/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PostScriptDC" oldname="wxPostScriptDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="PostScriptDC" overloaded="no">
      <autodoc>__init__(wxPrintData printData) -&gt; PostScriptDC</autodoc>
      <paramlist>
        <param name="printData" type="r.q(const).wxPrintData" default=""/>
      </paramlist>
    </constructor>
    <method name="GetPrintData" overloaded="no">
      <autodoc>GetPrintData() -&gt; wxPrintData</autodoc>
    </method>
    <method name="SetPrintData" overloaded="no">
      <autodoc>SetPrintData(wxPrintData data)</autodoc>
      <paramlist>
        <param name="data" type="r.q(const).wxPrintData" default=""/>
      </paramlist>
    </method>
    <staticmethod name="SetResolution" overloaded="no">
      <autodoc>SetResolution(int ppi)</autodoc>
      <paramlist>
        <param name="ppi" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetResolution" overloaded="no">
      <autodoc>GetResolution() -&gt; int</autodoc>
    </staticmethod>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MetaFile" oldname="wxMetaFile" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="MetaFile" overloaded="no">
      <autodoc>__init__(String filename=EmptyString) -&gt; MetaFile</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
  </class>
  <class name="MetaFileDC" oldname="wxMetaFileDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="MetaFileDC" overloaded="no">
      <autodoc>__init__(String filename=EmptyString, int width=0, int height=0, 
    String description=EmptyString) -&gt; MetaFileDC</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="width" type="int" default="0"/>
        <param name="height" type="int" default="0"/>
        <param name="description" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
  </class>
  <class name="PrinterDC" oldname="wxPrinterDC" module="gdi">
    <baseclass name="wxDC"/>
    <constructor name="PrinterDC" overloaded="no">
      <autodoc>__init__(wxPrintData printData) -&gt; PrinterDC</autodoc>
      <paramlist>
        <param name="printData" type="r.q(const).wxPrintData" default=""/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
    class DC_old(DC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = DC.FloodFillXY
        GetPixel = DC.GetPixelXY
        DrawLine = DC.DrawLineXY
        CrossHair = DC.CrossHairXY
        DrawArc = DC.DrawArcXY
        DrawCheckMark = DC.DrawCheckMarkXY
        DrawEllipticArc = DC.DrawEllipticArcXY
        DrawPoint = DC.DrawPointXY
        DrawRectangle = DC.DrawRectangleXY
        DrawRoundedRectangle = DC.DrawRoundedRectangleXY
        DrawCircle = DC.DrawCircleXY
        DrawEllipse = DC.DrawEllipseXY
        DrawIcon = DC.DrawIconXY
        DrawBitmap = DC.DrawBitmapXY
        DrawText = DC.DrawTextXY
        DrawRotatedText = DC.DrawRotatedTextXY
        Blit = DC.BlitXY
    </pythoncode>
  <pythoncode>
    class MemoryDC_old(MemoryDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = MemoryDC.FloodFillXY
        GetPixel = MemoryDC.GetPixelXY
        DrawLine = MemoryDC.DrawLineXY
        CrossHair = MemoryDC.CrossHairXY
        DrawArc = MemoryDC.DrawArcXY
        DrawCheckMark = MemoryDC.DrawCheckMarkXY
        DrawEllipticArc = MemoryDC.DrawEllipticArcXY
        DrawPoint = MemoryDC.DrawPointXY
        DrawRectangle = MemoryDC.DrawRectangleXY
        DrawRoundedRectangle = MemoryDC.DrawRoundedRectangleXY
        DrawCircle = MemoryDC.DrawCircleXY
        DrawEllipse = MemoryDC.DrawEllipseXY
        DrawIcon = MemoryDC.DrawIconXY
        DrawBitmap = MemoryDC.DrawBitmapXY
        DrawText = MemoryDC.DrawTextXY
        DrawRotatedText = MemoryDC.DrawRotatedTextXY
        Blit = MemoryDC.BlitXY
    </pythoncode>
  <pythoncode>
    class BufferedDC_old(BufferedDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = BufferedDC.FloodFillXY
        GetPixel = BufferedDC.GetPixelXY
        DrawLine = BufferedDC.DrawLineXY
        CrossHair = BufferedDC.CrossHairXY
        DrawArc = BufferedDC.DrawArcXY
        DrawCheckMark = BufferedDC.DrawCheckMarkXY
        DrawEllipticArc = BufferedDC.DrawEllipticArcXY
        DrawPoint = BufferedDC.DrawPointXY
        DrawRectangle = BufferedDC.DrawRectangleXY
        DrawRoundedRectangle = BufferedDC.DrawRoundedRectangleXY
        DrawCircle = BufferedDC.DrawCircleXY
        DrawEllipse = BufferedDC.DrawEllipseXY
        DrawIcon = BufferedDC.DrawIconXY
        DrawBitmap = BufferedDC.DrawBitmapXY
        DrawText = BufferedDC.DrawTextXY
        DrawRotatedText = BufferedDC.DrawRotatedTextXY
        Blit = BufferedDC.BlitXY
    </pythoncode>
  <pythoncode>
    class BufferedPaintDC_old(BufferedPaintDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = BufferedPaintDC.FloodFillXY
        GetPixel = BufferedPaintDC.GetPixelXY
        DrawLine = BufferedPaintDC.DrawLineXY
        CrossHair = BufferedPaintDC.CrossHairXY
        DrawArc = BufferedPaintDC.DrawArcXY
        DrawCheckMark = BufferedPaintDC.DrawCheckMarkXY
        DrawEllipticArc = BufferedPaintDC.DrawEllipticArcXY
        DrawPoint = BufferedPaintDC.DrawPointXY
        DrawRectangle = BufferedPaintDC.DrawRectangleXY
        DrawRoundedRectangle = BufferedPaintDC.DrawRoundedRectangleXY
        DrawCircle = BufferedPaintDC.DrawCircleXY
        DrawEllipse = BufferedPaintDC.DrawEllipseXY
        DrawIcon = BufferedPaintDC.DrawIconXY
        DrawBitmap = BufferedPaintDC.DrawBitmapXY
        DrawText = BufferedPaintDC.DrawTextXY
        DrawRotatedText = BufferedPaintDC.DrawRotatedTextXY
        Blit = BufferedPaintDC.BlitXY
    </pythoncode>
  <pythoncode>
    class ScreenDC_old(ScreenDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = ScreenDC.FloodFillXY
        GetPixel = ScreenDC.GetPixelXY
        DrawLine = ScreenDC.DrawLineXY
        CrossHair = ScreenDC.CrossHairXY
        DrawArc = ScreenDC.DrawArcXY
        DrawCheckMark = ScreenDC.DrawCheckMarkXY
        DrawEllipticArc = ScreenDC.DrawEllipticArcXY
        DrawPoint = ScreenDC.DrawPointXY
        DrawRectangle = ScreenDC.DrawRectangleXY
        DrawRoundedRectangle = ScreenDC.DrawRoundedRectangleXY
        DrawCircle = ScreenDC.DrawCircleXY
        DrawEllipse = ScreenDC.DrawEllipseXY
        DrawIcon = ScreenDC.DrawIconXY
        DrawBitmap = ScreenDC.DrawBitmapXY
        DrawText = ScreenDC.DrawTextXY
        DrawRotatedText = ScreenDC.DrawRotatedTextXY
        Blit = ScreenDC.BlitXY
    </pythoncode>
  <pythoncode>
    class ClientDC_old(ClientDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = ClientDC.FloodFillXY
        GetPixel = ClientDC.GetPixelXY
        DrawLine = ClientDC.DrawLineXY
        CrossHair = ClientDC.CrossHairXY
        DrawArc = ClientDC.DrawArcXY
        DrawCheckMark = ClientDC.DrawCheckMarkXY
        DrawEllipticArc = ClientDC.DrawEllipticArcXY
        DrawPoint = ClientDC.DrawPointXY
        DrawRectangle = ClientDC.DrawRectangleXY
        DrawRoundedRectangle = ClientDC.DrawRoundedRectangleXY
        DrawCircle = ClientDC.DrawCircleXY
        DrawEllipse = ClientDC.DrawEllipseXY
        DrawIcon = ClientDC.DrawIconXY
        DrawBitmap = ClientDC.DrawBitmapXY
        DrawText = ClientDC.DrawTextXY
        DrawRotatedText = ClientDC.DrawRotatedTextXY
        Blit = ClientDC.BlitXY
    </pythoncode>
  <pythoncode>
    class PaintDC_old(PaintDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = PaintDC.FloodFillXY
        GetPixel = PaintDC.GetPixelXY
        DrawLine = PaintDC.DrawLineXY
        CrossHair = PaintDC.CrossHairXY
        DrawArc = PaintDC.DrawArcXY
        DrawCheckMark = PaintDC.DrawCheckMarkXY
        DrawEllipticArc = PaintDC.DrawEllipticArcXY
        DrawPoint = PaintDC.DrawPointXY
        DrawRectangle = PaintDC.DrawRectangleXY
        DrawRoundedRectangle = PaintDC.DrawRoundedRectangleXY
        DrawCircle = PaintDC.DrawCircleXY
        DrawEllipse = PaintDC.DrawEllipseXY
        DrawIcon = PaintDC.DrawIconXY
        DrawBitmap = PaintDC.DrawBitmapXY
        DrawText = PaintDC.DrawTextXY
        DrawRotatedText = PaintDC.DrawRotatedTextXY
        Blit = PaintDC.BlitXY
    </pythoncode>
  <pythoncode>
    class WindowDC_old(WindowDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = WindowDC.FloodFillXY
        GetPixel = WindowDC.GetPixelXY
        DrawLine = WindowDC.DrawLineXY
        CrossHair = WindowDC.CrossHairXY
        DrawArc = WindowDC.DrawArcXY
        DrawCheckMark = WindowDC.DrawCheckMarkXY
        DrawEllipticArc = WindowDC.DrawEllipticArcXY
        DrawPoint = WindowDC.DrawPointXY
        DrawRectangle = WindowDC.DrawRectangleXY
        DrawRoundedRectangle = WindowDC.DrawRoundedRectangleXY
        DrawCircle = WindowDC.DrawCircleXY
        DrawEllipse = WindowDC.DrawEllipseXY
        DrawIcon = WindowDC.DrawIconXY
        DrawBitmap = WindowDC.DrawBitmapXY
        DrawText = WindowDC.DrawTextXY
        DrawRotatedText = WindowDC.DrawRotatedTextXY
        Blit = WindowDC.BlitXY
    </pythoncode>
  <pythoncode>
    class MirrorDC_old(MirrorDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = MirrorDC.FloodFillXY
        GetPixel = MirrorDC.GetPixelXY
        DrawLine = MirrorDC.DrawLineXY
        CrossHair = MirrorDC.CrossHairXY
        DrawArc = MirrorDC.DrawArcXY
        DrawCheckMark = MirrorDC.DrawCheckMarkXY
        DrawEllipticArc = MirrorDC.DrawEllipticArcXY
        DrawPoint = MirrorDC.DrawPointXY
        DrawRectangle = MirrorDC.DrawRectangleXY
        DrawRoundedRectangle = MirrorDC.DrawRoundedRectangleXY
        DrawCircle = MirrorDC.DrawCircleXY
        DrawEllipse = MirrorDC.DrawEllipseXY
        DrawIcon = MirrorDC.DrawIconXY
        DrawBitmap = MirrorDC.DrawBitmapXY
        DrawText = MirrorDC.DrawTextXY
        DrawRotatedText = MirrorDC.DrawRotatedTextXY
        Blit = MirrorDC.BlitXY
    </pythoncode>
  <pythoncode>
    class PostScriptDC_old(PostScriptDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = PostScriptDC.FloodFillXY
        GetPixel = PostScriptDC.GetPixelXY
        DrawLine = PostScriptDC.DrawLineXY
        CrossHair = PostScriptDC.CrossHairXY
        DrawArc = PostScriptDC.DrawArcXY
        DrawCheckMark = PostScriptDC.DrawCheckMarkXY
        DrawEllipticArc = PostScriptDC.DrawEllipticArcXY
        DrawPoint = PostScriptDC.DrawPointXY
        DrawRectangle = PostScriptDC.DrawRectangleXY
        DrawRoundedRectangle = PostScriptDC.DrawRoundedRectangleXY
        DrawCircle = PostScriptDC.DrawCircleXY
        DrawEllipse = PostScriptDC.DrawEllipseXY
        DrawIcon = PostScriptDC.DrawIconXY
        DrawBitmap = PostScriptDC.DrawBitmapXY
        DrawText = PostScriptDC.DrawTextXY
        DrawRotatedText = PostScriptDC.DrawRotatedTextXY
        Blit = PostScriptDC.BlitXY
    </pythoncode>
  <pythoncode>
    class MetaFileDC_old(MetaFileDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = MetaFileDC.FloodFillXY
        GetPixel = MetaFileDC.GetPixelXY
        DrawLine = MetaFileDC.DrawLineXY
        CrossHair = MetaFileDC.CrossHairXY
        DrawArc = MetaFileDC.DrawArcXY
        DrawCheckMark = MetaFileDC.DrawCheckMarkXY
        DrawEllipticArc = MetaFileDC.DrawEllipticArcXY
        DrawPoint = MetaFileDC.DrawPointXY
        DrawRectangle = MetaFileDC.DrawRectangleXY
        DrawRoundedRectangle = MetaFileDC.DrawRoundedRectangleXY
        DrawCircle = MetaFileDC.DrawCircleXY
        DrawEllipse = MetaFileDC.DrawEllipseXY
        DrawIcon = MetaFileDC.DrawIconXY
        DrawBitmap = MetaFileDC.DrawBitmapXY
        DrawText = MetaFileDC.DrawTextXY
        DrawRotatedText = MetaFileDC.DrawRotatedTextXY
        Blit = MetaFileDC.BlitXY
    </pythoncode>
  <pythoncode>
    class PrinterDC_old(PrinterDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = PrinterDC.FloodFillXY
        GetPixel = PrinterDC.GetPixelXY
        DrawLine = PrinterDC.DrawLineXY
        CrossHair = PrinterDC.CrossHairXY
        DrawArc = PrinterDC.DrawArcXY
        DrawCheckMark = PrinterDC.DrawCheckMarkXY
        DrawEllipticArc = PrinterDC.DrawEllipticArcXY
        DrawPoint = PrinterDC.DrawPointXY
        DrawRectangle = PrinterDC.DrawRectangleXY
        DrawRoundedRectangle = PrinterDC.DrawRoundedRectangleXY
        DrawCircle = PrinterDC.DrawCircleXY
        DrawEllipse = PrinterDC.DrawEllipseXY
        DrawIcon = PrinterDC.DrawIconXY
        DrawBitmap = PrinterDC.DrawBitmapXY
        DrawText = PrinterDC.DrawTextXY
        DrawRotatedText = PrinterDC.DrawRotatedTextXY
        Blit = PrinterDC.BlitXY
    </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ImageList" oldname="wxImageList" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="ImageList" overloaded="no">
      <autodoc>__init__(int width, int height, int mask=True, int initialCount=1) -&gt; ImageList</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="mask" type="int" default="True"/>
        <param name="initialCount" type="int" default="1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxImageList">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Add" overloaded="no">
      <autodoc>Add(Bitmap bitmap, Bitmap mask=NullBitmap) -&gt; int</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="mask" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
      </paramlist>
    </method>
    <method name="AddWithColourMask" overloaded="no">
      <autodoc>AddWithColourMask(Bitmap bitmap, Colour maskColour) -&gt; int</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="maskColour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="AddIcon" overloaded="no">
      <autodoc>AddIcon(Icon icon) -&gt; int</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
      </paramlist>
    </method>
    <method name="Replace" overloaded="no">
      <autodoc>Replace(int index, Bitmap bitmap) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="int" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="Draw" overloaded="no">
      <autodoc>Draw(int index, DC dc, int x, int x, int flags=IMAGELIST_DRAW_NORMAL, 
    bool solidBackground=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="int" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="int" default=""/>
        <param name="x" type="int" default=""/>
        <param name="flags" type="int" default="wxIMAGELIST_DRAW_NORMAL"/>
        <param name="solidBackground" type="q(const).bool" default="False"/>
      </paramlist>
    </method>
    <method name="GetImageCount" overloaded="no">
      <autodoc>GetImageCount() -&gt; int</autodoc>
    </method>
    <method name="Remove" overloaded="no">
      <autodoc>Remove(int index) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="int" default=""/>
      </paramlist>
    </method>
    <method name="RemoveAll" overloaded="no">
      <autodoc>RemoveAll() -&gt; bool</autodoc>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; (width,height)</autodoc>
      <paramlist>
        <param name="index" type="int" default=""/>
        <param name="OUTPUT" type="r.int" default=""/>
        <param name="OUTPUT" type="r.int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PenList" oldname="wxPenList" module="gdi">
    <baseclass name="wxObject"/>
    <method name="AddPen" overloaded="no">
      <autodoc>AddPen(Pen pen)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
      </paramlist>
    </method>
    <method name="FindOrCreatePen" overloaded="no">
      <autodoc>FindOrCreatePen(Colour colour, int width, int style) -&gt; Pen</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
        <param name="width" type="int" default=""/>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="RemovePen" overloaded="no">
      <autodoc>RemovePen(Pen pen)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; int</autodoc>
    </method>
  </class>
  <class name="BrushList" oldname="wxBrushList" module="gdi">
    <baseclass name="wxObject"/>
    <method name="AddBrush" overloaded="no">
      <autodoc>AddBrush(Brush brush)</autodoc>
      <paramlist>
        <param name="brush" type="p.wxBrush" default=""/>
      </paramlist>
    </method>
    <method name="FindOrCreateBrush" overloaded="no">
      <autodoc>FindOrCreateBrush(Colour colour, int style) -&gt; Brush</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="RemoveBrush" overloaded="no">
      <autodoc>RemoveBrush(Brush brush)</autodoc>
      <paramlist>
        <param name="brush" type="p.wxBrush" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; int</autodoc>
    </method>
  </class>
  <class name="ColourDatabase" oldname="wxColourDatabase" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="ColourDatabase" overloaded="no">
      <autodoc>__init__() -&gt; ColourDatabase</autodoc>
    </constructor>
    <destructor name="~wxColourDatabase">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Find" overloaded="no">
      <autodoc>Find(String name) -&gt; Colour</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindName" overloaded="no">
      <autodoc>FindName(Colour colour) -&gt; String</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <pythoncode> FindColour = Find </pythoncode>
    <method name="AddColour" overloaded="no">
      <autodoc>AddColour(String name, Colour colour)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="Append" overloaded="no">
      <autodoc>Append(String name, int red, int green, int blue)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="red" type="int" default=""/>
        <param name="green" type="int" default=""/>
        <param name="blue" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="FontList" oldname="wxFontList" module="gdi">
    <baseclass name="wxObject"/>
    <method name="AddFont" overloaded="no">
      <autodoc>AddFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="p.wxFont" default=""/>
      </paramlist>
    </method>
    <method name="FindOrCreateFont" overloaded="no">
      <autodoc>FindOrCreateFont(int point_size, int family, int style, int weight, 
    bool underline=False, String facename=EmptyString, 
    int encoding=FONTENCODING_DEFAULT) -&gt; Font</autodoc>
      <paramlist>
        <param name="point_size" type="int" default=""/>
        <param name="family" type="int" default=""/>
        <param name="style" type="int" default=""/>
        <param name="weight" type="int" default=""/>
        <param name="underline" type="bool" default="False"/>
        <param name="facename" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_DEFAULT"/>
      </paramlist>
    </method>
    <method name="RemoveFont" overloaded="no">
      <autodoc>RemoveFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="p.wxFont" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode> NullColor = NullColour </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Effects" oldname="wxEffects" module="gdi">
    <baseclass name="wxObject"/>
    <constructor name="Effects" overloaded="no">
      <autodoc>__init__() -&gt; Effects</autodoc>
    </constructor>
    <method name="GetHighlightColour" overloaded="no">
      <autodoc>GetHighlightColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetLightShadow" overloaded="no">
      <autodoc>GetLightShadow() -&gt; Colour</autodoc>
    </method>
    <method name="GetFaceColour" overloaded="no">
      <autodoc>GetFaceColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetMediumShadow" overloaded="no">
      <autodoc>GetMediumShadow() -&gt; Colour</autodoc>
    </method>
    <method name="GetDarkShadow" overloaded="no">
      <autodoc>GetDarkShadow() -&gt; Colour</autodoc>
    </method>
    <method name="SetHighlightColour" overloaded="no">
      <autodoc>SetHighlightColour(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetLightShadow" overloaded="no">
      <autodoc>SetLightShadow(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetFaceColour" overloaded="no">
      <autodoc>SetFaceColour(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetMediumShadow" overloaded="no">
      <autodoc>SetMediumShadow(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetDarkShadow" overloaded="no">
      <autodoc>SetDarkShadow(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(Colour highlightColour, Colour lightShadow, Colour faceColour, 
    Colour mediumShadow, Colour darkShadow)</autodoc>
      <paramlist>
        <param name="highlightColour" type="r.q(const).wxColour" default=""/>
        <param name="lightShadow" type="r.q(const).wxColour" default=""/>
        <param name="faceColour" type="r.q(const).wxColour" default=""/>
        <param name="mediumShadow" type="r.q(const).wxColour" default=""/>
        <param name="darkShadow" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="DrawSunkenEdge" overloaded="no">
      <autodoc>DrawSunkenEdge(DC dc, Rect rect, int borderSize=1)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="borderSize" type="int" default="1"/>
      </paramlist>
    </method>
    <method name="TileBitmap" overloaded="no">
      <autodoc>TileBitmap(Rect rect, DC dc, Bitmap bitmap) -&gt; bool</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="bitmap" type="r.wxBitmap" default=""/>
      </paramlist>
    </method>
  </class>
</module>
<module name="windows">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Panel" oldname="wxPanel" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="Panel" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxTAB_TRAVERSAL|wxNO_BORDER, 
    String name=PanelNameStr) -&gt; Panel</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTAB_TRAVERSAL|wxNO_BORDER"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PrePanel" overloaded="no">
      <autodoc>PrePanel() -&gt; Panel</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxTAB_TRAVERSAL|wxNO_BORDER, 
    String name=PanelNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTAB_TRAVERSAL|wxNO_BORDER"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </method>
    <method name="InitDialog" overloaded="no">
      <autodoc>InitDialog()</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ScrolledWindow" oldname="wxScrolledWindow" module="windows">
    <baseclass name="wxPanel"/>
    <constructor name="ScrolledWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxHSCROLL|wxVSCROLL, 
    String name=PanelNameStr) -&gt; ScrolledWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxHSCROLL|wxVSCROLL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreScrolledWindow" overloaded="no">
      <autodoc>PreScrolledWindow() -&gt; ScrolledWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxHSCROLL|wxVSCROLL, 
    String name=PanelNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxHSCROLL|wxVSCROLL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </method>
    <method name="SetScrollbars" overloaded="no">
      <autodoc>SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY, int noUnitsX, 
    int noUnitsY, int xPos=0, int yPos=0, bool noRefresh=False)</autodoc>
      <paramlist>
        <param name="pixelsPerUnitX" type="int" default=""/>
        <param name="pixelsPerUnitY" type="int" default=""/>
        <param name="noUnitsX" type="int" default=""/>
        <param name="noUnitsY" type="int" default=""/>
        <param name="xPos" type="int" default="0"/>
        <param name="yPos" type="int" default="0"/>
        <param name="noRefresh" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="Scroll" overloaded="no">
      <autodoc>Scroll(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetScrollPageSize" overloaded="no">
      <autodoc>GetScrollPageSize(int orient) -&gt; int</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetScrollPageSize" overloaded="no">
      <autodoc>SetScrollPageSize(int orient, int pageSize)</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
        <param name="pageSize" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetScrollRate" overloaded="no">
      <autodoc>SetScrollRate(int xstep, int ystep)</autodoc>
      <paramlist>
        <param name="xstep" type="int" default=""/>
        <param name="ystep" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetScrollPixelsPerUnit" overloaded="no">
      <autodoc>GetScrollPixelsPerUnit() -&gt; (xUnit, yUnit)</autodoc>
      <docstring>Get the size of one logical unit in physical units.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="EnableScrolling" overloaded="no">
      <autodoc>EnableScrolling(bool x_scrolling, bool y_scrolling)</autodoc>
      <paramlist>
        <param name="x_scrolling" type="bool" default=""/>
        <param name="y_scrolling" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetViewStart" overloaded="no">
      <autodoc>GetViewStart() -&gt; (x,y)</autodoc>
      <docstring>Get the view start</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetScale" overloaded="no">
      <autodoc>SetScale(double xs, double ys)</autodoc>
      <paramlist>
        <param name="xs" type="double" default=""/>
        <param name="ys" type="double" default=""/>
      </paramlist>
    </method>
    <method name="GetScaleX" overloaded="no">
      <autodoc>GetScaleX() -&gt; double</autodoc>
    </method>
    <method name="GetScaleY" overloaded="no">
      <autodoc>GetScaleY() -&gt; double</autodoc>
    </method>
    <method name="CalcScrolledPosition" overloaded="yes">
      <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="CalcScrolledPosition" overloaded="yes">
      <autodoc>CalcScrolledPosition(Point pt) -&gt; Point
CalcScrolledPosition(int x, int y) -&gt; (sx, sy)</autodoc>
      <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="CalcUnscrolledPosition" overloaded="yes">
      <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="CalcUnscrolledPosition" overloaded="yes">
      <autodoc>CalcUnscrolledPosition(Point pt) -&gt; Point
CalcUnscrolledPosition(int x, int y) -&gt; (ux, uy)</autodoc>
      <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="AdjustScrollbars" overloaded="no">
      <autodoc>AdjustScrollbars()</autodoc>
    </method>
    <method name="CalcScrollInc" overloaded="no">
      <autodoc>CalcScrollInc(ScrollWinEvent event) -&gt; int</autodoc>
      <paramlist>
        <param name="event" type="r.wxScrollWinEvent" default=""/>
      </paramlist>
    </method>
    <method name="SetTargetWindow" overloaded="no">
      <autodoc>SetTargetWindow(Window target)</autodoc>
      <paramlist>
        <param name="target" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetTargetWindow" overloaded="no">
      <autodoc>GetTargetWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="TopLevelWindow" oldname="wxTopLevelWindow" module="windows">
    <baseclass name="wxWindow"/>
    <method name="Maximize" overloaded="no">
      <autodoc>Maximize(bool maximize=True)</autodoc>
      <paramlist>
        <param name="maximize" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Restore" overloaded="no">
      <autodoc>Restore()</autodoc>
    </method>
    <method name="Iconize" overloaded="no">
      <autodoc>Iconize(bool iconize=True)</autodoc>
      <paramlist>
        <param name="iconize" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="IsMaximized" overloaded="no">
      <autodoc>IsMaximized() -&gt; bool</autodoc>
    </method>
    <method name="IsIconized" overloaded="no">
      <autodoc>IsIconized() -&gt; bool</autodoc>
    </method>
    <method name="GetIcon" overloaded="no">
      <autodoc>GetIcon() -&gt; Icon</autodoc>
    </method>
    <method name="SetIcon" overloaded="no">
      <autodoc>SetIcon(Icon icon)</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
      </paramlist>
    </method>
    <method name="SetIcons" overloaded="no">
      <autodoc>SetIcons(wxIconBundle icons)</autodoc>
      <paramlist>
        <param name="icons" type="r.q(const).wxIconBundle" default=""/>
      </paramlist>
    </method>
    <method name="ShowFullScreen" overloaded="no">
      <autodoc>ShowFullScreen(bool show, long style=FULLSCREEN_ALL) -&gt; bool</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
        <param name="style" type="long" default="wxFULLSCREEN_ALL"/>
      </paramlist>
    </method>
    <method name="IsFullScreen" overloaded="no">
      <autodoc>IsFullScreen() -&gt; bool</autodoc>
    </method>
    <method name="SetTitle" overloaded="no">
      <autodoc>SetTitle(String title)</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTitle" overloaded="no">
      <autodoc>GetTitle() -&gt; String</autodoc>
    </method>
    <method name="SetShape" overloaded="no">
      <autodoc>SetShape(Region region) -&gt; bool</autodoc>
      <paramlist>
        <param name="region" type="r.q(const).wxRegion" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Frame" oldname="wxFrame" module="windows">
    <baseclass name="wxTopLevelWindow"/>
    <constructor name="Frame" overloaded="no">
      <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; Frame</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreFrame" overloaded="no">
      <autodoc>PreFrame() -&gt; Frame</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </method>
    <method name="GetClientAreaOrigin" overloaded="no">
      <autodoc>GetClientAreaOrigin() -&gt; Point</autodoc>
    </method>
    <method name="SendSizeEvent" overloaded="no">
      <autodoc>SendSizeEvent()</autodoc>
    </method>
    <method name="SetMenuBar" overloaded="no">
      <autodoc>SetMenuBar(MenuBar menubar)</autodoc>
      <paramlist>
        <param name="menubar" type="p.wxMenuBar" default=""/>
      </paramlist>
    </method>
    <method name="GetMenuBar" overloaded="no">
      <autodoc>GetMenuBar() -&gt; MenuBar</autodoc>
    </method>
    <method name="ProcessCommand" overloaded="no">
      <autodoc>ProcessCommand(int winid) -&gt; bool</autodoc>
      <paramlist>
        <param name="winid" type="int" default=""/>
      </paramlist>
    </method>
    <pythoncode> Command = ProcessCommand </pythoncode>
    <method name="CreateStatusBar" overloaded="no">
      <autodoc>CreateStatusBar(int number=1, long style=ST_SIZEGRIP, int winid=0, 
    String name=StatusLineNameStr) -&gt; StatusBar</autodoc>
      <paramlist>
        <param name="number" type="int" default="1"/>
        <param name="style" type="long" default="wxST_SIZEGRIP"/>
        <param name="winid" type="int" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStatusLineNameStr"/>
      </paramlist>
    </method>
    <method name="GetStatusBar" overloaded="no">
      <autodoc>GetStatusBar() -&gt; StatusBar</autodoc>
    </method>
    <method name="SetStatusBar" overloaded="no">
      <autodoc>SetStatusBar(StatusBar statBar)</autodoc>
      <paramlist>
        <param name="statBar" type="p.wxStatusBar" default=""/>
      </paramlist>
    </method>
    <method name="SetStatusText" overloaded="no">
      <autodoc>SetStatusText(String text, int number=0)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="number" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetStatusWidths" overloaded="no">
      <autodoc>SetStatusWidths(int widths, int widths_field)</autodoc>
      <paramlist>
        <param name="widths" type="int" default=""/>
        <param name="widths_field" type="p.q(const).int" default=""/>
      </paramlist>
    </method>
    <method name="PushStatusText" overloaded="no">
      <autodoc>PushStatusText(String text, int number=0)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="number" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="PopStatusText" overloaded="no">
      <autodoc>PopStatusText(int number=0)</autodoc>
      <paramlist>
        <param name="number" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetStatusBarPane" overloaded="no">
      <autodoc>SetStatusBarPane(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetStatusBarPane" overloaded="no">
      <autodoc>GetStatusBarPane() -&gt; int</autodoc>
    </method>
    <method name="CreateToolBar" overloaded="no">
      <autodoc>CreateToolBar(long style=-1, int winid=-1, String name=ToolBarNameStr) -&gt; wxToolBar</autodoc>
      <paramlist>
        <param name="style" type="long" default="-1"/>
        <param name="winid" type="int" default="-1"/>
        <param name="name" type="r.q(const).wxString" default="wxPyToolBarNameStr"/>
      </paramlist>
    </method>
    <method name="GetToolBar" overloaded="no">
      <autodoc>GetToolBar() -&gt; wxToolBar</autodoc>
    </method>
    <method name="SetToolBar" overloaded="no">
      <autodoc>SetToolBar(wxToolBar toolbar)</autodoc>
      <paramlist>
        <param name="toolbar" type="p.wxToolBar" default=""/>
      </paramlist>
    </method>
    <method name="DoGiveHelp" overloaded="no">
      <autodoc>DoGiveHelp(String text, bool show)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="DoMenuUpdates" overloaded="no">
      <autodoc>DoMenuUpdates(Menu menu=None)</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default="NULL"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Dialog" oldname="wxDialog" module="windows">
    <baseclass name="wxTopLevelWindow"/>
    <constructor name="Dialog" overloaded="no">
      <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_DIALOG_STYLE, 
    String name=DialogNameStr) -&gt; Dialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_DIALOG_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyDialogNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreDialog" overloaded="no">
      <autodoc>PreDialog() -&gt; Dialog</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_DIALOG_STYLE, 
    String name=DialogNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_DIALOG_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyDialogNameStr"/>
      </paramlist>
    </method>
    <method name="SetReturnCode" overloaded="no">
      <autodoc>SetReturnCode(int returnCode)</autodoc>
      <paramlist>
        <param name="returnCode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetReturnCode" overloaded="no">
      <autodoc>GetReturnCode() -&gt; int</autodoc>
    </method>
    <method name="CreateTextSizer" overloaded="no">
      <autodoc>CreateTextSizer(String message) -&gt; Sizer</autodoc>
      <paramlist>
        <param name="message" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="CreateButtonSizer" overloaded="no">
      <autodoc>CreateButtonSizer(long flags) -&gt; Sizer</autodoc>
      <paramlist>
        <param name="flags" type="long" default=""/>
      </paramlist>
    </method>
    <method name="IsModal" overloaded="no">
      <autodoc>IsModal() -&gt; bool</autodoc>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
    <method name="EndModal" overloaded="no">
      <autodoc>EndModal(int retCode)</autodoc>
      <paramlist>
        <param name="retCode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsModalShowing" overloaded="no">
      <autodoc>IsModalShowing() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MiniFrame" oldname="wxMiniFrame" module="windows">
    <baseclass name="wxFrame"/>
    <constructor name="MiniFrame" overloaded="no">
      <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; MiniFrame</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreMiniFrame" overloaded="no">
      <autodoc>PreMiniFrame() -&gt; MiniFrame</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SplashScreenWindow" oldname="wxSplashScreenWindow" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="SplashScreenWindow" overloaded="no">
      <autodoc>__init__(Bitmap bitmap, Window parent, int id, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=NO_BORDER) -&gt; SplashScreenWindow</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxNO_BORDER"/>
      </paramlist>
    </constructor>
    <method name="SetBitmap" overloaded="no">
      <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
    </method>
  </class>
  <class name="SplashScreen" oldname="wxSplashScreen" module="windows">
    <baseclass name="wxFrame"/>
    <constructor name="SplashScreen" overloaded="no">
      <autodoc>__init__(Bitmap bitmap, long splashStyle, int milliseconds, 
    Window parent, int id, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP) -&gt; SplashScreen</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="splashStyle" type="long" default=""/>
        <param name="milliseconds" type="int" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP"/>
      </paramlist>
    </constructor>
    <method name="GetSplashStyle" overloaded="no">
      <autodoc>GetSplashStyle() -&gt; long</autodoc>
    </method>
    <method name="GetSplashWindow" overloaded="no">
      <autodoc>GetSplashWindow() -&gt; SplashScreenWindow</autodoc>
    </method>
    <method name="GetTimeout" overloaded="no">
      <autodoc>GetTimeout() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="StatusBar" oldname="wxStatusBar" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="StatusBar" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, long style=ST_SIZEGRIP, String name=StatusLineNameStr) -&gt; StatusBar</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="style" type="long" default="wxST_SIZEGRIP"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStatusLineNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreStatusBar" overloaded="no">
      <autodoc>PreStatusBar() -&gt; StatusBar</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, long style=ST_SIZEGRIP, String name=StatusLineNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="style" type="long" default="wxST_SIZEGRIP"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStatusLineNameStr"/>
      </paramlist>
    </method>
    <method name="SetFieldsCount" overloaded="no">
      <autodoc>SetFieldsCount(int number=1)</autodoc>
      <paramlist>
        <param name="number" type="int" default="1"/>
      </paramlist>
    </method>
    <method name="GetFieldsCount" overloaded="no">
      <autodoc>GetFieldsCount() -&gt; int</autodoc>
    </method>
    <method name="SetStatusText" overloaded="no">
      <autodoc>SetStatusText(String text, int number=0)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="number" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetStatusText" overloaded="no">
      <autodoc>GetStatusText(int number=0) -&gt; String</autodoc>
      <paramlist>
        <param name="number" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="PushStatusText" overloaded="no">
      <autodoc>PushStatusText(String text, int number=0)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="number" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="PopStatusText" overloaded="no">
      <autodoc>PopStatusText(int number=0)</autodoc>
      <paramlist>
        <param name="number" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetStatusWidths" overloaded="no">
      <autodoc>SetStatusWidths(int widths, int widths_field)</autodoc>
      <paramlist>
        <param name="widths" type="int" default=""/>
        <param name="widths_field" type="p.q(const).int" default=""/>
      </paramlist>
    </method>
    <method name="GetFieldRect" overloaded="no">
      <autodoc>GetFieldRect(int i) -&gt; Rect</autodoc>
      <paramlist>
        <param name="i" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMinHeight" overloaded="no">
      <autodoc>SetMinHeight(int height)</autodoc>
      <paramlist>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBorderX" overloaded="no">
      <autodoc>GetBorderX() -&gt; int</autodoc>
    </method>
    <method name="GetBorderY" overloaded="no">
      <autodoc>GetBorderY() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SplitterWindow" oldname="wxSplitterWindow" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="SplitterWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_3D, String name=SplitterNameStr) -&gt; SplitterWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSP_3D"/>
        <param name="name" type="r.q(const).wxString" default="wxPySplitterNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreSplitterWindow" overloaded="no">
      <autodoc>PreSplitterWindow() -&gt; SplitterWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_3D, String name=SplitterNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSP_3D"/>
        <param name="name" type="r.q(const).wxString" default="wxPySplitterNameStr"/>
      </paramlist>
    </method>
    <method name="GetWindow1" overloaded="no">
      <autodoc>GetWindow1() -&gt; Window</autodoc>
    </method>
    <method name="GetWindow2" overloaded="no">
      <autodoc>GetWindow2() -&gt; Window</autodoc>
    </method>
    <method name="SetSplitMode" overloaded="no">
      <autodoc>SetSplitMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSplitMode" overloaded="no">
      <autodoc>GetSplitMode() -&gt; int</autodoc>
    </method>
    <method name="Initialize" overloaded="no">
      <autodoc>Initialize(Window window)</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="SplitVertically" overloaded="no">
      <autodoc>SplitVertically(Window window1, Window window2, int sashPosition=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="window1" type="p.wxWindow" default=""/>
        <param name="window2" type="p.wxWindow" default=""/>
        <param name="sashPosition" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SplitHorizontally" overloaded="no">
      <autodoc>SplitHorizontally(Window window1, Window window2, int sashPosition=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="window1" type="p.wxWindow" default=""/>
        <param name="window2" type="p.wxWindow" default=""/>
        <param name="sashPosition" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Unsplit" overloaded="no">
      <autodoc>Unsplit(Window toRemove=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="toRemove" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </method>
    <method name="ReplaceWindow" overloaded="no">
      <autodoc>ReplaceWindow(Window winOld, Window winNew) -&gt; bool</autodoc>
      <paramlist>
        <param name="winOld" type="p.wxWindow" default=""/>
        <param name="winNew" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="IsSplit" overloaded="no">
      <autodoc>IsSplit() -&gt; bool</autodoc>
    </method>
    <method name="SetSashSize" overloaded="no">
      <autodoc>SetSashSize(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetBorderSize" overloaded="no">
      <autodoc>SetBorderSize(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSashSize" overloaded="no">
      <autodoc>GetSashSize() -&gt; int</autodoc>
    </method>
    <method name="GetBorderSize" overloaded="no">
      <autodoc>GetBorderSize() -&gt; int</autodoc>
    </method>
    <method name="SetSashPosition" overloaded="no">
      <autodoc>SetSashPosition(int position, bool redraw=True)</autodoc>
      <paramlist>
        <param name="position" type="int" default=""/>
        <param name="redraw" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetSashPosition" overloaded="no">
      <autodoc>GetSashPosition() -&gt; int</autodoc>
    </method>
    <method name="SetMinimumPaneSize" overloaded="no">
      <autodoc>SetMinimumPaneSize(int min)</autodoc>
      <paramlist>
        <param name="min" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMinimumPaneSize" overloaded="no">
      <autodoc>GetMinimumPaneSize() -&gt; int</autodoc>
    </method>
    <method name="SashHitTest" overloaded="no">
      <autodoc>SashHitTest(int x, int y, int tolerance=5) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="tolerance" type="int" default="5"/>
      </paramlist>
    </method>
    <method name="SizeWindows" overloaded="no">
      <autodoc>SizeWindows()</autodoc>
    </method>
    <method name="SetNeedUpdating" overloaded="no">
      <autodoc>SetNeedUpdating(bool needUpdating)</autodoc>
      <paramlist>
        <param name="needUpdating" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetNeedUpdating" overloaded="no">
      <autodoc>GetNeedUpdating() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="SplitterEvent" oldname="wxSplitterEvent" module="windows">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="SplitterEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, SplitterWindow splitter=(wxSplitterWindow *) NULL) -&gt; SplitterEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="splitter" type="p.wxSplitterWindow" default="(wxSplitterWindow *) NULL"/>
      </paramlist>
    </constructor>
    <method name="SetSashPosition" overloaded="no">
      <autodoc>SetSashPosition(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSashPosition" overloaded="no">
      <autodoc>GetSashPosition() -&gt; int</autodoc>
    </method>
    <method name="GetWindowBeingRemoved" overloaded="no">
      <autodoc>GetWindowBeingRemoved() -&gt; Window</autodoc>
    </method>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; int</autodoc>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
EVT_SPLITTER_SASH_POS_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, 1 )
EVT_SPLITTER_SASH_POS_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING, 1 )
EVT_SPLITTER_DOUBLECLICKED = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_DOUBLECLICKED, 1 )
EVT_SPLITTER_UNSPLIT = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_UNSPLIT, 1 )
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SashWindow" oldname="wxSashWindow" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="SashWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashNameStr) -&gt; SashWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
        <param name="name" type="r.q(const).wxString" default="wxPySashNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreSashWindow" overloaded="no">
      <autodoc>PreSashWindow() -&gt; SashWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
        <param name="name" type="r.q(const).wxString" default="wxPySashNameStr"/>
      </paramlist>
    </method>
    <method name="SetSashVisible" overloaded="no">
      <autodoc>SetSashVisible(int edge, bool sash)</autodoc>
      <paramlist>
        <param name="edge" type="wxSashEdgePosition" default=""/>
        <param name="sash" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetSashVisible" overloaded="no">
      <autodoc>GetSashVisible(int edge) -&gt; bool</autodoc>
      <paramlist>
        <param name="edge" type="wxSashEdgePosition" default=""/>
      </paramlist>
    </method>
    <method name="SetSashBorder" overloaded="no">
      <autodoc>SetSashBorder(int edge, bool border)</autodoc>
      <paramlist>
        <param name="edge" type="wxSashEdgePosition" default=""/>
        <param name="border" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="HasBorder" overloaded="no">
      <autodoc>HasBorder(int edge) -&gt; bool</autodoc>
      <paramlist>
        <param name="edge" type="wxSashEdgePosition" default=""/>
      </paramlist>
    </method>
    <method name="GetEdgeMargin" overloaded="no">
      <autodoc>GetEdgeMargin(int edge) -&gt; int</autodoc>
      <paramlist>
        <param name="edge" type="wxSashEdgePosition" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultBorderSize" overloaded="no">
      <autodoc>SetDefaultBorderSize(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultBorderSize" overloaded="no">
      <autodoc>GetDefaultBorderSize() -&gt; int</autodoc>
    </method>
    <method name="SetExtraBorderSize" overloaded="no">
      <autodoc>SetExtraBorderSize(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetExtraBorderSize" overloaded="no">
      <autodoc>GetExtraBorderSize() -&gt; int</autodoc>
    </method>
    <method name="SetMinimumSizeX" overloaded="no">
      <autodoc>SetMinimumSizeX(int min)</autodoc>
      <paramlist>
        <param name="min" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMinimumSizeY" overloaded="no">
      <autodoc>SetMinimumSizeY(int min)</autodoc>
      <paramlist>
        <param name="min" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMinimumSizeX" overloaded="no">
      <autodoc>GetMinimumSizeX() -&gt; int</autodoc>
    </method>
    <method name="GetMinimumSizeY" overloaded="no">
      <autodoc>GetMinimumSizeY() -&gt; int</autodoc>
    </method>
    <method name="SetMaximumSizeX" overloaded="no">
      <autodoc>SetMaximumSizeX(int max)</autodoc>
      <paramlist>
        <param name="max" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMaximumSizeY" overloaded="no">
      <autodoc>SetMaximumSizeY(int max)</autodoc>
      <paramlist>
        <param name="max" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMaximumSizeX" overloaded="no">
      <autodoc>GetMaximumSizeX() -&gt; int</autodoc>
    </method>
    <method name="GetMaximumSizeY" overloaded="no">
      <autodoc>GetMaximumSizeY() -&gt; int</autodoc>
    </method>
    <method name="SashHitTest" overloaded="no">
      <autodoc>SashHitTest(int x, int y, int tolerance=2) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="tolerance" type="int" default="2"/>
      </paramlist>
    </method>
    <method name="SizeWindows" overloaded="no">
      <autodoc>SizeWindows()</autodoc>
    </method>
  </class>
  <class name="SashEvent" oldname="wxSashEvent" module="windows">
    <baseclass name="wxCommandEvent"/>
    <constructor name="SashEvent" overloaded="no">
      <autodoc>__init__(int id=0, int edge=SASH_NONE) -&gt; SashEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
        <param name="edge" type="wxSashEdgePosition" default="wxSASH_NONE"/>
      </paramlist>
    </constructor>
    <method name="SetEdge" overloaded="no">
      <autodoc>SetEdge(int edge)</autodoc>
      <paramlist>
        <param name="edge" type="wxSashEdgePosition" default=""/>
      </paramlist>
    </method>
    <method name="GetEdge" overloaded="no">
      <autodoc>GetEdge() -&gt; int</autodoc>
    </method>
    <method name="SetDragRect" overloaded="no">
      <autodoc>SetDragRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="GetDragRect" overloaded="no">
      <autodoc>GetDragRect() -&gt; Rect</autodoc>
    </method>
    <method name="SetDragStatus" overloaded="no">
      <autodoc>SetDragStatus(int status)</autodoc>
      <paramlist>
        <param name="status" type="wxSashDragStatus" default=""/>
      </paramlist>
    </method>
    <method name="GetDragStatus" overloaded="no">
      <autodoc>GetDragStatus() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
    EVT_SASH_DRAGGED = wx.PyEventBinder( wxEVT_SASH_DRAGGED, 1 )
    EVT_SASH_DRAGGED_RANGE = wx.PyEventBinder( wxEVT_SASH_DRAGGED, 2 )
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="QueryLayoutInfoEvent" oldname="wxQueryLayoutInfoEvent" module="windows">
    <baseclass name="wxEvent"/>
    <constructor name="QueryLayoutInfoEvent" overloaded="no">
      <autodoc>__init__(int id=0) -&gt; QueryLayoutInfoEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="SetRequestedLength" overloaded="no">
      <autodoc>SetRequestedLength(int length)</autodoc>
      <paramlist>
        <param name="length" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetRequestedLength" overloaded="no">
      <autodoc>GetRequestedLength() -&gt; int</autodoc>
    </method>
    <method name="SetFlags" overloaded="no">
      <autodoc>SetFlags(int flags)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFlags" overloaded="no">
      <autodoc>GetFlags() -&gt; int</autodoc>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
    </method>
    <method name="SetOrientation" overloaded="no">
      <autodoc>SetOrientation(int orient)</autodoc>
      <paramlist>
        <param name="orient" type="wxLayoutOrientation" default=""/>
      </paramlist>
    </method>
    <method name="GetOrientation" overloaded="no">
      <autodoc>GetOrientation() -&gt; int</autodoc>
    </method>
    <method name="SetAlignment" overloaded="no">
      <autodoc>SetAlignment(int align)</autodoc>
      <paramlist>
        <param name="align" type="wxLayoutAlignment" default=""/>
      </paramlist>
    </method>
    <method name="GetAlignment" overloaded="no">
      <autodoc>GetAlignment() -&gt; int</autodoc>
    </method>
  </class>
  <class name="CalculateLayoutEvent" oldname="wxCalculateLayoutEvent" module="windows">
    <baseclass name="wxEvent"/>
    <constructor name="CalculateLayoutEvent" overloaded="no">
      <autodoc>__init__(int id=0) -&gt; CalculateLayoutEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="SetFlags" overloaded="no">
      <autodoc>SetFlags(int flags)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFlags" overloaded="no">
      <autodoc>GetFlags() -&gt; int</autodoc>
    </method>
    <method name="SetRect" overloaded="no">
      <autodoc>SetRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="GetRect" overloaded="no">
      <autodoc>GetRect() -&gt; Rect</autodoc>
    </method>
  </class>
  <pythoncode>
    EVT_QUERY_LAYOUT_INFO = wx.PyEventBinder( wxEVT_QUERY_LAYOUT_INFO )
    EVT_CALCULATE_LAYOUT = wx.PyEventBinder( wxEVT_CALCULATE_LAYOUT )
</pythoncode>
  <class name="SashLayoutWindow" oldname="wxSashLayoutWindow" module="windows">
    <baseclass name="wxSashWindow"/>
    <constructor name="SashLayoutWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashLayoutNameStr) -&gt; SashLayoutWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
        <param name="name" type="r.q(const).wxString" default="wxPySashLayoutNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreSashLayoutWindow" overloaded="no">
      <autodoc>PreSashLayoutWindow() -&gt; SashLayoutWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashLayoutNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
        <param name="name" type="r.q(const).wxString" default="wxPySashLayoutNameStr"/>
      </paramlist>
    </method>
    <method name="GetAlignment" overloaded="no">
      <autodoc>GetAlignment() -&gt; int</autodoc>
    </method>
    <method name="GetOrientation" overloaded="no">
      <autodoc>GetOrientation() -&gt; int</autodoc>
    </method>
    <method name="SetAlignment" overloaded="no">
      <autodoc>SetAlignment(int alignment)</autodoc>
      <paramlist>
        <param name="alignment" type="wxLayoutAlignment" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultSize" overloaded="no">
      <autodoc>SetDefaultSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetOrientation" overloaded="no">
      <autodoc>SetOrientation(int orientation)</autodoc>
      <paramlist>
        <param name="orientation" type="wxLayoutOrientation" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="LayoutAlgorithm" oldname="wxLayoutAlgorithm" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="LayoutAlgorithm" overloaded="no">
      <autodoc>__init__() -&gt; LayoutAlgorithm</autodoc>
    </constructor>
    <destructor name="~wxLayoutAlgorithm">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="LayoutMDIFrame" overloaded="no">
      <autodoc>LayoutMDIFrame(MDIParentFrame frame, Rect rect=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="frame" type="p.wxMDIParentFrame" default=""/>
        <param name="rect" type="p.wxRect" default="NULL"/>
      </paramlist>
    </method>
    <method name="LayoutFrame" overloaded="no">
      <autodoc>LayoutFrame(Frame frame, Window mainWindow=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="frame" type="p.wxFrame" default=""/>
        <param name="mainWindow" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </method>
    <method name="LayoutWindow" overloaded="no">
      <autodoc>LayoutWindow(Window parent, Window mainWindow=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="mainWindow" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PopupWindow" oldname="wxPopupWindow" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="PopupWindow" overloaded="no">
      <autodoc>__init__(Window parent, int flags=BORDER_NONE) -&gt; PopupWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="flags" type="int" default="wxBORDER_NONE"/>
      </paramlist>
    </constructor>
    <constructor name="PrePopupWindow" overloaded="no">
      <autodoc>PrePopupWindow() -&gt; PopupWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int flags=BORDER_NONE) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="flags" type="int" default="wxBORDER_NONE"/>
      </paramlist>
    </method>
    <method name="Position" overloaded="no">
      <autodoc>Position(Point ptOrigin, Size size)</autodoc>
      <paramlist>
        <param name="ptOrigin" type="r.q(const).wxPoint" default=""/>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PopupTransientWindow" oldname="wxPyPopupTransientWindow" module="windows">
    <baseclass name="wxPopupWindow"/>
    <constructor name="wxPyPopupTransientWindow" overloaded="no">
      <autodoc>__init__(Window parent, int style=BORDER_NONE) -&gt; PopupTransientWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="style" type="int" default="wxBORDER_NONE"/>
      </paramlist>
    </constructor>
    <constructor name="PrePopupTransientWindow" overloaded="no">
      <autodoc>PrePopupTransientWindow() -&gt; PopupTransientWindow</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Popup" overloaded="no">
      <autodoc>Popup(Window focus=None)</autodoc>
      <paramlist>
        <param name="focus" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </method>
    <method name="Dismiss" overloaded="no">
      <autodoc>Dismiss()</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="TipWindow" oldname="wxTipWindow" module="windows">
    <baseclass name="wxPyPopupTransientWindow"/>
    <constructor name="TipWindow" overloaded="no">
      <autodoc>__init__(Window parent, String text, int maxLength=100, Rect rectBound=None) -&gt; TipWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="maxLength" type="int" default="100"/>
        <param name="rectBound" type="p.wxRect" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="SetBoundingRect" overloaded="no">
      <autodoc>SetBoundingRect(Rect rectBound)</autodoc>
      <paramlist>
        <param name="rectBound" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="Close" overloaded="no">
      <autodoc>Close()</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="VScrolledWindow" oldname="wxPyVScrolledWindow" module="windows">
    <baseclass name="wxPanel"/>
    <constructor name="wxPyVScrolledWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=PanelNameStr) -&gt; VScrolledWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="wxID_ANY"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreVScrolledWindow" overloaded="no">
      <autodoc>PreVScrolledWindow() -&gt; VScrolledWindow</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=PanelNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="wxID_ANY"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </method>
    <method name="SetLineCount" overloaded="no">
      <autodoc>SetLineCount(size_t count)</autodoc>
      <paramlist>
        <param name="count" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="ScrollToLine" overloaded="no">
      <autodoc>ScrollToLine(size_t line) -&gt; bool</autodoc>
      <paramlist>
        <param name="line" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="ScrollLines" overloaded="no">
      <autodoc>ScrollLines(int lines) -&gt; bool</autodoc>
      <paramlist>
        <param name="lines" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ScrollPages" overloaded="no">
      <autodoc>ScrollPages(int pages) -&gt; bool</autodoc>
      <paramlist>
        <param name="pages" type="int" default=""/>
      </paramlist>
    </method>
    <method name="RefreshLine" overloaded="no">
      <autodoc>RefreshLine(size_t line)</autodoc>
      <paramlist>
        <param name="line" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="RefreshLines" overloaded="no">
      <autodoc>RefreshLines(size_t from, size_t to)</autodoc>
      <paramlist>
        <param name="from" type="size_t" default=""/>
        <param name="to" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="HitTestXT" overloaded="no">
      <autodoc>HitTestXT(int x, int y) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point pt) -&gt; int</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="RefreshAll" overloaded="no">
      <autodoc>RefreshAll()</autodoc>
    </method>
    <method name="GetLineCount" overloaded="no">
      <autodoc>GetLineCount() -&gt; size_t</autodoc>
    </method>
    <method name="GetFirstVisibleLine" overloaded="no">
      <autodoc>GetFirstVisibleLine() -&gt; size_t</autodoc>
    </method>
    <method name="GetLastVisibleLine" overloaded="no">
      <autodoc>GetLastVisibleLine() -&gt; size_t</autodoc>
    </method>
    <method name="IsVisible" overloaded="no">
      <autodoc>IsVisible(size_t line) -&gt; bool</autodoc>
      <paramlist>
        <param name="line" type="size_t" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="VListBox" oldname="wxPyVListBox" module="windows">
    <baseclass name="wxPyVScrolledWindow"/>
    <constructor name="wxPyVListBox" overloaded="no">
      <autodoc>__init__(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; VListBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="wxID_ANY"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyVListBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreVListBox" overloaded="no">
      <autodoc>PreVListBox() -&gt; VListBox</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="wxID_ANY"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyVListBoxNameStr"/>
      </paramlist>
    </method>
    <method name="GetItemCount" overloaded="no">
      <autodoc>GetItemCount() -&gt; size_t</autodoc>
    </method>
    <method name="HasMultipleSelection" overloaded="no">
      <autodoc>HasMultipleSelection() -&gt; bool</autodoc>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; int</autodoc>
    </method>
    <method name="IsCurrent" overloaded="no">
      <autodoc>IsCurrent(size_t item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="IsSelected" overloaded="no">
      <autodoc>IsSelected(size_t item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectedCount" overloaded="no">
      <autodoc>GetSelectedCount() -&gt; size_t</autodoc>
    </method>
    <method name="GetFirstSelected" overloaded="no">
      <autodoc>GetFirstSelected(unsigned long cookie) -&gt; int</autodoc>
      <paramlist>
        <param name="cookie" type="r.unsigned long" default=""/>
      </paramlist>
    </method>
    <method name="GetNextSelected" overloaded="no">
      <autodoc>GetNextSelected(unsigned long cookie) -&gt; int</autodoc>
      <paramlist>
        <param name="cookie" type="r.unsigned long" default=""/>
      </paramlist>
    </method>
    <method name="GetMargins" overloaded="no">
      <autodoc>GetMargins() -&gt; Point</autodoc>
    </method>
    <method name="GetSelectionBackground" overloaded="no">
      <autodoc>GetSelectionBackground() -&gt; Colour</autodoc>
    </method>
    <method name="SetItemCount" overloaded="no">
      <autodoc>SetItemCount(size_t count)</autodoc>
      <paramlist>
        <param name="count" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int selection)</autodoc>
      <paramlist>
        <param name="selection" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Select" overloaded="no">
      <autodoc>Select(size_t item, bool select=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="size_t" default=""/>
        <param name="select" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SelectRange" overloaded="no">
      <autodoc>SelectRange(size_t from, size_t to) -&gt; bool</autodoc>
      <paramlist>
        <param name="from" type="size_t" default=""/>
        <param name="to" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="Toggle" overloaded="no">
      <autodoc>Toggle(size_t item)</autodoc>
      <paramlist>
        <param name="item" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SelectAll" overloaded="no">
      <autodoc>SelectAll() -&gt; bool</autodoc>
    </method>
    <method name="DeselectAll" overloaded="no">
      <autodoc>DeselectAll() -&gt; bool</autodoc>
    </method>
    <method name="SetMargins" overloaded="no">
      <autodoc>SetMargins(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginsXY" overloaded="no">
      <autodoc>SetMarginsXY(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSelectionBackground" overloaded="no">
      <autodoc>SetSelectionBackground(Colour col)</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="HtmlListBox" oldname="wxPyHtmlListBox" module="windows">
    <baseclass name="wxPyVListBox"/>
    <constructor name="wxPyHtmlListBox" overloaded="no">
      <autodoc>__init__(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; HtmlListBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="wxID_ANY"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyVListBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreHtmlListBox" overloaded="no">
      <autodoc>PreHtmlListBox() -&gt; HtmlListBox</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="wxID_ANY"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyVListBoxNameStr"/>
      </paramlist>
    </method>
    <method name="RefreshAll" overloaded="no">
      <autodoc>RefreshAll()</autodoc>
    </method>
    <method name="SetItemCount" overloaded="no">
      <autodoc>SetItemCount(size_t count)</autodoc>
      <paramlist>
        <param name="count" type="size_t" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="TaskBarIcon" oldname="wxTaskBarIcon" module="windows">
    <baseclass name="wxEvtHandler"/>
    <constructor name="TaskBarIcon" overloaded="no">
      <autodoc>__init__() -&gt; TaskBarIcon</autodoc>
    </constructor>
    <destructor name="~wxTaskBarIcon">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <method name="IsIconInstalled" overloaded="no">
      <autodoc>IsIconInstalled() -&gt; bool</autodoc>
    </method>
    <method name="SetIcon" overloaded="no">
      <autodoc>SetIcon(Icon icon, String tooltip=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
        <param name="tooltip" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="RemoveIcon" overloaded="no">
      <autodoc>RemoveIcon() -&gt; bool</autodoc>
    </method>
    <method name="PopupMenu" overloaded="no">
      <autodoc>PopupMenu(Menu menu) -&gt; bool</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="TaskBarIconEvent" oldname="wxTaskBarIconEvent" module="windows">
    <baseclass name="wxEvent"/>
    <constructor name="TaskBarIconEvent" overloaded="no">
      <autodoc>__init__(wxEventType evtType, TaskBarIcon tbIcon) -&gt; TaskBarIconEvent</autodoc>
      <paramlist>
        <param name="evtType" type="wxEventType" default=""/>
        <param name="tbIcon" type="p.wxTaskBarIcon" default=""/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
EVT_TASKBAR_MOVE = wx.PyEventBinder (         wxEVT_TASKBAR_MOVE )
EVT_TASKBAR_LEFT_DOWN = wx.PyEventBinder (    wxEVT_TASKBAR_LEFT_DOWN )
EVT_TASKBAR_LEFT_UP = wx.PyEventBinder (      wxEVT_TASKBAR_LEFT_UP )
EVT_TASKBAR_RIGHT_DOWN = wx.PyEventBinder (   wxEVT_TASKBAR_RIGHT_DOWN )
EVT_TASKBAR_RIGHT_UP = wx.PyEventBinder (     wxEVT_TASKBAR_RIGHT_UP )
EVT_TASKBAR_LEFT_DCLICK = wx.PyEventBinder (  wxEVT_TASKBAR_LEFT_DCLICK )
EVT_TASKBAR_RIGHT_DCLICK = wx.PyEventBinder ( wxEVT_TASKBAR_RIGHT_DCLICK )
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ColourData" oldname="wxColourData" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="ColourData" overloaded="no">
      <autodoc>__init__() -&gt; ColourData</autodoc>
    </constructor>
    <destructor name="~wxColourData">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetChooseFull" overloaded="no">
      <autodoc>GetChooseFull() -&gt; bool</autodoc>
    </method>
    <method name="GetColour" overloaded="no">
      <autodoc>GetColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetCustomColour" overloaded="no">
      <autodoc>GetCustomColour(int i) -&gt; Colour</autodoc>
      <paramlist>
        <param name="i" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetChooseFull" overloaded="no">
      <autodoc>SetChooseFull(int flag)</autodoc>
      <paramlist>
        <param name="flag" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetCustomColour" overloaded="no">
      <autodoc>SetCustomColour(int i, Colour colour)</autodoc>
      <paramlist>
        <param name="i" type="int" default=""/>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="ColourDialog" oldname="wxColourDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="ColourDialog" overloaded="no">
      <autodoc>__init__(Window parent, ColourData data=None) -&gt; ColourDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="data" type="p.wxColourData" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetColourData" overloaded="no">
      <autodoc>GetColourData() -&gt; ColourData</autodoc>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="DirDialog" oldname="wxDirDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="DirDialog" overloaded="no">
      <autodoc>__init__(Window parent, String message=DirSelectorPromptStr, 
    String defaultPath=EmptyString, long style=0, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    String name=DirDialogNameStr) -&gt; DirDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="message" type="r.q(const).wxString" default="wxPyDirSelectorPromptStr"/>
        <param name="defaultPath" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="style" type="long" default="0"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="name" type="r.q(const).wxString" default="wxPyDirDialogNameStr"/>
      </paramlist>
    </constructor>
    <method name="GetPath" overloaded="no">
      <autodoc>GetPath() -&gt; String</autodoc>
    </method>
    <method name="GetMessage" overloaded="no">
      <autodoc>GetMessage() -&gt; String</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; long</autodoc>
    </method>
    <method name="SetMessage" overloaded="no">
      <autodoc>SetMessage(String message)</autodoc>
      <paramlist>
        <param name="message" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetPath" overloaded="no">
      <autodoc>SetPath(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="FileDialog" oldname="wxFileDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="FileDialog" overloaded="no">
      <autodoc>__init__(Window parent, String message=FileSelectorPromptStr, 
    String defaultDir=EmptyString, String defaultFile=EmptyString, 
    String wildcard=FileSelectorDefaultWildcardStr, 
    long style=0, Point pos=DefaultPosition) -&gt; FileDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="message" type="r.q(const).wxString" default="wxPyFileSelectorPromptStr"/>
        <param name="defaultDir" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="defaultFile" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="wildcard" type="r.q(const).wxString" default="wxPyFileSelectorDefaultWildcardStr"/>
        <param name="style" type="long" default="0"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </constructor>
    <method name="SetMessage" overloaded="no">
      <autodoc>SetMessage(String message)</autodoc>
      <paramlist>
        <param name="message" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetPath" overloaded="no">
      <autodoc>SetPath(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetDirectory" overloaded="no">
      <autodoc>SetDirectory(String dir)</autodoc>
      <paramlist>
        <param name="dir" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetFilename" overloaded="no">
      <autodoc>SetFilename(String name)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetWildcard" overloaded="no">
      <autodoc>SetWildcard(String wildCard)</autodoc>
      <paramlist>
        <param name="wildCard" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(long style)</autodoc>
      <paramlist>
        <param name="style" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetFilterIndex" overloaded="no">
      <autodoc>SetFilterIndex(int filterIndex)</autodoc>
      <paramlist>
        <param name="filterIndex" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMessage" overloaded="no">
      <autodoc>GetMessage() -&gt; String</autodoc>
    </method>
    <method name="GetPath" overloaded="no">
      <autodoc>GetPath() -&gt; String</autodoc>
    </method>
    <method name="GetDirectory" overloaded="no">
      <autodoc>GetDirectory() -&gt; String</autodoc>
    </method>
    <method name="GetFilename" overloaded="no">
      <autodoc>GetFilename() -&gt; String</autodoc>
    </method>
    <method name="GetWildcard" overloaded="no">
      <autodoc>GetWildcard() -&gt; String</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; long</autodoc>
    </method>
    <method name="GetFilterIndex" overloaded="no">
      <autodoc>GetFilterIndex() -&gt; int</autodoc>
    </method>
    <method name="GetFilenames" overloaded="no">
      <autodoc>GetFilenames() -&gt; PyObject</autodoc>
    </method>
    <method name="GetPaths" overloaded="no">
      <autodoc>GetPaths() -&gt; PyObject</autodoc>
    </method>
  </class>
  <class name="MultiChoiceDialog" oldname="wxMultiChoiceDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="MultiChoiceDialog" overloaded="no">
      <autodoc>__init__(Window parent, String message, String caption, int choices=0, 
    String choices_array, long style=CHOICEDLG_STYLE, 
    Point pos=DefaultPosition) -&gt; MultiChoiceDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="message" type="r.q(const).wxString" default=""/>
        <param name="caption" type="r.q(const).wxString" default=""/>
        <param name="choices" type="int" default="0"/>
        <param name="choices_array" type="p.wxString" default=""/>
        <param name="style" type="long" default="wxCHOICEDLG_STYLE"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </constructor>
    <method name="SetSelections" overloaded="no">
      <autodoc>SetSelections(wxArrayInt selections)</autodoc>
      <paramlist>
        <param name="selections" type="r.q(const).wxArrayInt" default=""/>
      </paramlist>
    </method>
    <method name="GetSelections" overloaded="no">
      <autodoc>GetSelections() -&gt; PyObject</autodoc>
    </method>
  </class>
  <class name="SingleChoiceDialog" oldname="wxSingleChoiceDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="SingleChoiceDialog" overloaded="no">
      <autodoc>__init__(Window parent, String message, String caption, int choices, 
    String choices_array, long style=CHOICEDLG_STYLE, 
    Point pos=DefaultPosition) -&gt; SingleChoiceDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="message" type="r.q(const).wxString" default=""/>
        <param name="caption" type="r.q(const).wxString" default=""/>
        <param name="choices" type="int" default=""/>
        <param name="choices_array" type="p.wxString" default=""/>
        <param name="style" type="long" default="wxCHOICEDLG_STYLE"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </constructor>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; int</autodoc>
    </method>
    <method name="GetStringSelection" overloaded="no">
      <autodoc>GetStringSelection() -&gt; String</autodoc>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int sel)</autodoc>
      <paramlist>
        <param name="sel" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="TextEntryDialog" oldname="wxTextEntryDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="TextEntryDialog" overloaded="no">
      <autodoc>__init__(Window parent, String message, String caption=GetTextFromUserPromptStr, 
    String defaultValue=EmptyString, 
    long style=wxOK|wxCANCEL|wxCENTRE, Point pos=DefaultPosition) -&gt; TextEntryDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="message" type="r.q(const).wxString" default=""/>
        <param name="caption" type="r.q(const).wxString" default="wxPyGetTextFromUserPromptStr"/>
        <param name="defaultValue" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="style" type="long" default="wxOK|wxCANCEL|wxCENTRE"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(String value)</autodoc>
      <paramlist>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="FontData" oldname="wxFontData" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="FontData" overloaded="no">
      <autodoc>__init__() -&gt; FontData</autodoc>
    </constructor>
    <destructor name="~wxFontData">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="EnableEffects" overloaded="no">
      <autodoc>EnableEffects(bool enable)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetAllowSymbols" overloaded="no">
      <autodoc>GetAllowSymbols() -&gt; bool</autodoc>
    </method>
    <method name="GetColour" overloaded="no">
      <autodoc>GetColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetChosenFont" overloaded="no">
      <autodoc>GetChosenFont() -&gt; Font</autodoc>
    </method>
    <method name="GetEnableEffects" overloaded="no">
      <autodoc>GetEnableEffects() -&gt; bool</autodoc>
    </method>
    <method name="GetInitialFont" overloaded="no">
      <autodoc>GetInitialFont() -&gt; Font</autodoc>
    </method>
    <method name="GetShowHelp" overloaded="no">
      <autodoc>GetShowHelp() -&gt; bool</autodoc>
    </method>
    <method name="SetAllowSymbols" overloaded="no">
      <autodoc>SetAllowSymbols(bool allowSymbols)</autodoc>
      <paramlist>
        <param name="allowSymbols" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetChosenFont" overloaded="no">
      <autodoc>SetChosenFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetInitialFont" overloaded="no">
      <autodoc>SetInitialFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetRange" overloaded="no">
      <autodoc>SetRange(int min, int max)</autodoc>
      <paramlist>
        <param name="min" type="int" default=""/>
        <param name="max" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetShowHelp" overloaded="no">
      <autodoc>SetShowHelp(bool showHelp)</autodoc>
      <paramlist>
        <param name="showHelp" type="bool" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="FontDialog" oldname="wxFontDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="FontDialog" overloaded="no">
      <autodoc>__init__(Window parent, FontData data) -&gt; FontDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="data" type="r.q(const).wxFontData" default=""/>
      </paramlist>
    </constructor>
    <method name="GetFontData" overloaded="no">
      <autodoc>GetFontData() -&gt; FontData</autodoc>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="MessageDialog" oldname="wxMessageDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="MessageDialog" overloaded="no">
      <autodoc>__init__(Window parent, String message, String caption=MessageBoxCaptionStr, 
    long style=wxOK|wxCANCEL|wxCENTRE, 
    Point pos=DefaultPosition) -&gt; MessageDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="message" type="r.q(const).wxString" default=""/>
        <param name="caption" type="r.q(const).wxString" default="wxPyMessageBoxCaptionStr"/>
        <param name="style" type="long" default="wxOK|wxCANCEL|wxCENTRE"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </constructor>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="ProgressDialog" oldname="wxProgressDialog" module="windows">
    <baseclass name="wxFrame"/>
    <constructor name="ProgressDialog" overloaded="no">
      <autodoc>__init__(String title, String message, int maximum=100, Window parent=None, 
    int style=wxPD_AUTO_HIDE|wxPD_APP_MODAL) -&gt; ProgressDialog</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="message" type="r.q(const).wxString" default=""/>
        <param name="maximum" type="int" default="100"/>
        <param name="parent" type="p.wxWindow" default="NULL"/>
        <param name="style" type="int" default="wxPD_AUTO_HIDE|wxPD_APP_MODAL"/>
      </paramlist>
    </constructor>
    <method name="Update" overloaded="no">
      <autodoc>Update(int value, String newmsg=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="value" type="int" default=""/>
        <param name="newmsg" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="Resume" overloaded="no">
      <autodoc>Resume()</autodoc>
    </method>
  </class>
  <pythoncode>
EVT_FIND = wx.PyEventBinder( wxEVT_COMMAND_FIND, 1 )
EVT_FIND_NEXT = wx.PyEventBinder( wxEVT_COMMAND_FIND_NEXT, 1 )
EVT_FIND_REPLACE = wx.PyEventBinder( wxEVT_COMMAND_FIND_REPLACE, 1 )
EVT_FIND_REPLACE_ALL = wx.PyEventBinder( wxEVT_COMMAND_FIND_REPLACE_ALL, 1 )
EVT_FIND_CLOSE = wx.PyEventBinder( wxEVT_COMMAND_FIND_CLOSE, 1 )

# For backwards compatibility.  Should they be removed?
EVT_COMMAND_FIND             = EVT_FIND 
EVT_COMMAND_FIND_NEXT        = EVT_FIND_NEXT
EVT_COMMAND_FIND_REPLACE     = EVT_FIND_REPLACE
EVT_COMMAND_FIND_REPLACE_ALL = EVT_FIND_REPLACE_ALL
EVT_COMMAND_FIND_CLOSE       = EVT_FIND_CLOSE        
</pythoncode>
  <class name="FindDialogEvent" oldname="wxFindDialogEvent" module="windows">
    <baseclass name="wxCommandEvent"/>
    <constructor name="FindDialogEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; FindDialogEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetFlags" overloaded="no">
      <autodoc>GetFlags() -&gt; int</autodoc>
    </method>
    <method name="GetFindString" overloaded="no">
      <autodoc>GetFindString() -&gt; String</autodoc>
    </method>
    <method name="GetReplaceString" overloaded="no">
      <autodoc>GetReplaceString() -&gt; String</autodoc>
    </method>
    <method name="GetDialog" overloaded="no">
      <autodoc>GetDialog() -&gt; FindReplaceDialog</autodoc>
    </method>
    <method name="SetFlags" overloaded="no">
      <autodoc>SetFlags(int flags)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFindString" overloaded="no">
      <autodoc>SetFindString(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetReplaceString" overloaded="no">
      <autodoc>SetReplaceString(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="FindReplaceData" oldname="wxFindReplaceData" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="FindReplaceData" overloaded="no">
      <autodoc>__init__(int flags=0) -&gt; FindReplaceData</autodoc>
      <paramlist>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxFindReplaceData">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetFindString" overloaded="no">
      <autodoc>GetFindString() -&gt; String</autodoc>
    </method>
    <method name="GetReplaceString" overloaded="no">
      <autodoc>GetReplaceString() -&gt; String</autodoc>
    </method>
    <method name="GetFlags" overloaded="no">
      <autodoc>GetFlags() -&gt; int</autodoc>
    </method>
    <method name="SetFlags" overloaded="no">
      <autodoc>SetFlags(int flags)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFindString" overloaded="no">
      <autodoc>SetFindString(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetReplaceString" overloaded="no">
      <autodoc>SetReplaceString(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="FindReplaceDialog" oldname="wxFindReplaceDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="FindReplaceDialog" overloaded="no">
      <autodoc>__init__(Window parent, FindReplaceData data, String title, 
    int style=0) -&gt; FindReplaceDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="data" type="p.wxFindReplaceData" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="style" type="int" default="0"/>
      </paramlist>
    </constructor>
    <constructor name="PreFindReplaceDialog" overloaded="no">
      <autodoc>PreFindReplaceDialog() -&gt; FindReplaceDialog</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, FindReplaceData data, String title, 
    int style=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="data" type="p.wxFindReplaceData" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="style" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; FindReplaceData</autodoc>
    </method>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(FindReplaceData data)</autodoc>
      <paramlist>
        <param name="data" type="p.wxFindReplaceData" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="MDIParentFrame" oldname="wxMDIParentFrame" module="windows">
    <baseclass name="wxFrame"/>
    <constructor name="MDIParentFrame" overloaded="no">
      <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL, 
    String name=FrameNameStr) -&gt; MDIParentFrame</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreMDIParentFrame" overloaded="no">
      <autodoc>PreMDIParentFrame() -&gt; MDIParentFrame</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL, 
    String name=FrameNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </method>
    <method name="ActivateNext" overloaded="no">
      <autodoc>ActivateNext()</autodoc>
    </method>
    <method name="ActivatePrevious" overloaded="no">
      <autodoc>ActivatePrevious()</autodoc>
    </method>
    <method name="ArrangeIcons" overloaded="no">
      <autodoc>ArrangeIcons()</autodoc>
    </method>
    <method name="Cascade" overloaded="no">
      <autodoc>Cascade()</autodoc>
    </method>
    <method name="GetActiveChild" overloaded="no">
      <autodoc>GetActiveChild() -&gt; MDIChildFrame</autodoc>
    </method>
    <method name="GetClientWindow" overloaded="no">
      <autodoc>GetClientWindow() -&gt; MDIClientWindow</autodoc>
    </method>
    <method name="GetToolBar" overloaded="no">
      <autodoc>GetToolBar() -&gt; Window</autodoc>
    </method>
    <method name="Tile" overloaded="no">
      <autodoc>Tile()</autodoc>
    </method>
  </class>
  <class name="MDIChildFrame" oldname="wxMDIChildFrame" module="windows">
    <baseclass name="wxFrame"/>
    <constructor name="MDIChildFrame" overloaded="no">
      <autodoc>__init__(MDIParentFrame parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; MDIChildFrame</autodoc>
      <paramlist>
        <param name="parent" type="p.wxMDIParentFrame" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreMDIChildFrame" overloaded="no">
      <autodoc>PreMDIChildFrame() -&gt; MDIChildFrame</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(MDIParentFrame parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxMDIParentFrame" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </method>
    <method name="Activate" overloaded="no">
      <autodoc>Activate()</autodoc>
    </method>
    <method name="Maximize" overloaded="no">
      <autodoc>Maximize(bool maximize)</autodoc>
      <paramlist>
        <param name="maximize" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Restore" overloaded="no">
      <autodoc>Restore()</autodoc>
    </method>
  </class>
  <class name="MDIClientWindow" oldname="wxMDIClientWindow" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="MDIClientWindow" overloaded="no">
      <autodoc>__init__(MDIParentFrame parent, long style=0) -&gt; MDIClientWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxMDIParentFrame" default=""/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
    <constructor name="PreMDIClientWindow" overloaded="no">
      <autodoc>PreMDIClientWindow() -&gt; MDIClientWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(MDIParentFrame parent, long style=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxMDIParentFrame" default=""/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PyWindow" oldname="wxPyWindow" module="windows">
    <baseclass name="wxWindow"/>
    <constructor name="PyWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; PyWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_DoMoveWindow" overloaded="no">
      <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetSize" overloaded="no">
      <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
      </paramlist>
    </method>
    <method name="base_DoSetClientSize" overloaded="no">
      <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetVirtualSize" overloaded="no">
      <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetSize" overloaded="no">
      <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetClientSize" overloaded="no">
      <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetPosition" overloaded="no">
      <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetVirtualSize" overloaded="no">
      <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
    </method>
    <method name="base_DoGetBestSize" overloaded="no">
      <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
    </method>
    <method name="base_InitDialog" overloaded="no">
      <autodoc>base_InitDialog()</autodoc>
    </method>
    <method name="base_TransferDataToWindow" overloaded="no">
      <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_TransferDataFromWindow" overloaded="no">
      <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_Validate" overloaded="no">
      <autodoc>base_Validate() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocus" overloaded="no">
      <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocusFromKeyboard" overloaded="no">
      <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
    </method>
    <method name="base_GetMaxSize" overloaded="no">
      <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
    </method>
    <method name="base_AddChild" overloaded="no">
      <autodoc>base_AddChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="base_RemoveChild" overloaded="no">
      <autodoc>base_RemoveChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyPanel" oldname="wxPyPanel" module="windows">
    <baseclass name="wxPanel"/>
    <constructor name="PyPanel" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; PyPanel</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_DoMoveWindow" overloaded="no">
      <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetSize" overloaded="no">
      <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
      </paramlist>
    </method>
    <method name="base_DoSetClientSize" overloaded="no">
      <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetVirtualSize" overloaded="no">
      <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetSize" overloaded="no">
      <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetClientSize" overloaded="no">
      <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetPosition" overloaded="no">
      <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetVirtualSize" overloaded="no">
      <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
    </method>
    <method name="base_DoGetBestSize" overloaded="no">
      <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
    </method>
    <method name="base_InitDialog" overloaded="no">
      <autodoc>base_InitDialog()</autodoc>
    </method>
    <method name="base_TransferDataToWindow" overloaded="no">
      <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_TransferDataFromWindow" overloaded="no">
      <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_Validate" overloaded="no">
      <autodoc>base_Validate() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocus" overloaded="no">
      <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocusFromKeyboard" overloaded="no">
      <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
    </method>
    <method name="base_GetMaxSize" overloaded="no">
      <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
    </method>
    <method name="base_AddChild" overloaded="no">
      <autodoc>base_AddChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="base_RemoveChild" overloaded="no">
      <autodoc>base_RemoveChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PrintData" oldname="wxPrintData" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="PrintData" overloaded="no">
      <autodoc>__init__() -&gt; PrintData</autodoc>
    </constructor>
    <destructor name="~wxPrintData">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetNoCopies" overloaded="no">
      <autodoc>GetNoCopies() -&gt; int</autodoc>
    </method>
    <method name="GetCollate" overloaded="no">
      <autodoc>GetCollate() -&gt; bool</autodoc>
    </method>
    <method name="GetOrientation" overloaded="no">
      <autodoc>GetOrientation() -&gt; int</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="GetPrinterName" overloaded="no">
      <autodoc>GetPrinterName() -&gt; String</autodoc>
    </method>
    <method name="GetColour" overloaded="no">
      <autodoc>GetColour() -&gt; bool</autodoc>
    </method>
    <method name="GetDuplex" overloaded="no">
      <autodoc>GetDuplex() -&gt; int</autodoc>
    </method>
    <method name="GetPaperId" overloaded="no">
      <autodoc>GetPaperId() -&gt; int</autodoc>
    </method>
    <method name="GetPaperSize" overloaded="no">
      <autodoc>GetPaperSize() -&gt; Size</autodoc>
    </method>
    <method name="GetQuality" overloaded="no">
      <autodoc>GetQuality() -&gt; int</autodoc>
    </method>
    <method name="SetNoCopies" overloaded="no">
      <autodoc>SetNoCopies(int v)</autodoc>
      <paramlist>
        <param name="v" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetCollate" overloaded="no">
      <autodoc>SetCollate(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetOrientation" overloaded="no">
      <autodoc>SetOrientation(int orient)</autodoc>
      <paramlist>
        <param name="orient" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterName" overloaded="no">
      <autodoc>SetPrinterName(String name)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(bool colour)</autodoc>
      <paramlist>
        <param name="colour" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetDuplex" overloaded="no">
      <autodoc>SetDuplex(int duplex)</autodoc>
      <paramlist>
        <param name="duplex" type="wxDuplexMode" default=""/>
      </paramlist>
    </method>
    <method name="SetPaperId" overloaded="no">
      <autodoc>SetPaperId(int sizeId)</autodoc>
      <paramlist>
        <param name="sizeId" type="wxPaperSize" default=""/>
      </paramlist>
    </method>
    <method name="SetPaperSize" overloaded="no">
      <autodoc>SetPaperSize(Size sz)</autodoc>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetQuality" overloaded="no">
      <autodoc>SetQuality(int quality)</autodoc>
      <paramlist>
        <param name="quality" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPrinterCommand" overloaded="no">
      <autodoc>GetPrinterCommand() -&gt; String</autodoc>
    </method>
    <method name="GetPrinterOptions" overloaded="no">
      <autodoc>GetPrinterOptions() -&gt; String</autodoc>
    </method>
    <method name="GetPreviewCommand" overloaded="no">
      <autodoc>GetPreviewCommand() -&gt; String</autodoc>
    </method>
    <method name="GetFilename" overloaded="no">
      <autodoc>GetFilename() -&gt; String</autodoc>
    </method>
    <method name="GetFontMetricPath" overloaded="no">
      <autodoc>GetFontMetricPath() -&gt; String</autodoc>
    </method>
    <method name="GetPrinterScaleX" overloaded="no">
      <autodoc>GetPrinterScaleX() -&gt; double</autodoc>
    </method>
    <method name="GetPrinterScaleY" overloaded="no">
      <autodoc>GetPrinterScaleY() -&gt; double</autodoc>
    </method>
    <method name="GetPrinterTranslateX" overloaded="no">
      <autodoc>GetPrinterTranslateX() -&gt; long</autodoc>
    </method>
    <method name="GetPrinterTranslateY" overloaded="no">
      <autodoc>GetPrinterTranslateY() -&gt; long</autodoc>
    </method>
    <method name="GetPrintMode" overloaded="no">
      <autodoc>GetPrintMode() -&gt; int</autodoc>
    </method>
    <method name="SetPrinterCommand" overloaded="no">
      <autodoc>SetPrinterCommand(String command)</autodoc>
      <paramlist>
        <param name="command" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterOptions" overloaded="no">
      <autodoc>SetPrinterOptions(String options)</autodoc>
      <paramlist>
        <param name="options" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetPreviewCommand" overloaded="no">
      <autodoc>SetPreviewCommand(String command)</autodoc>
      <paramlist>
        <param name="command" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetFilename" overloaded="no">
      <autodoc>SetFilename(String filename)</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetFontMetricPath" overloaded="no">
      <autodoc>SetFontMetricPath(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterScaleX" overloaded="no">
      <autodoc>SetPrinterScaleX(double x)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterScaleY" overloaded="no">
      <autodoc>SetPrinterScaleY(double y)</autodoc>
      <paramlist>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterScaling" overloaded="no">
      <autodoc>SetPrinterScaling(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterTranslateX" overloaded="no">
      <autodoc>SetPrinterTranslateX(long x)</autodoc>
      <paramlist>
        <param name="x" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterTranslateY" overloaded="no">
      <autodoc>SetPrinterTranslateY(long y)</autodoc>
      <paramlist>
        <param name="y" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetPrinterTranslation" overloaded="no">
      <autodoc>SetPrinterTranslation(long x, long y)</autodoc>
      <paramlist>
        <param name="x" type="long" default=""/>
        <param name="y" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetPrintMode" overloaded="no">
      <autodoc>SetPrintMode(int printMode)</autodoc>
      <paramlist>
        <param name="printMode" type="wxPrintMode" default=""/>
      </paramlist>
    </method>
    <method name="GetOutputStream" overloaded="no">
      <autodoc>GetOutputStream() -&gt; OutputStream</autodoc>
    </method>
    <method name="SetOutputStream" overloaded="no">
      <autodoc>SetOutputStream(OutputStream outputstream)</autodoc>
      <paramlist>
        <param name="outputstream" type="p.wxOutputStream" default=""/>
      </paramlist>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="PageSetupDialogData" oldname="wxPageSetupDialogData" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="PageSetupDialogData" overloaded="no">
      <autodoc>__init__() -&gt; PageSetupDialogData</autodoc>
    </constructor>
    <destructor name="~wxPageSetupDialogData">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="EnableHelp" overloaded="no">
      <autodoc>EnableHelp(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnableMargins" overloaded="no">
      <autodoc>EnableMargins(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnableOrientation" overloaded="no">
      <autodoc>EnableOrientation(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnablePaper" overloaded="no">
      <autodoc>EnablePaper(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnablePrinter" overloaded="no">
      <autodoc>EnablePrinter(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultMinMargins" overloaded="no">
      <autodoc>GetDefaultMinMargins() -&gt; bool</autodoc>
    </method>
    <method name="GetEnableMargins" overloaded="no">
      <autodoc>GetEnableMargins() -&gt; bool</autodoc>
    </method>
    <method name="GetEnableOrientation" overloaded="no">
      <autodoc>GetEnableOrientation() -&gt; bool</autodoc>
    </method>
    <method name="GetEnablePaper" overloaded="no">
      <autodoc>GetEnablePaper() -&gt; bool</autodoc>
    </method>
    <method name="GetEnablePrinter" overloaded="no">
      <autodoc>GetEnablePrinter() -&gt; bool</autodoc>
    </method>
    <method name="GetEnableHelp" overloaded="no">
      <autodoc>GetEnableHelp() -&gt; bool</autodoc>
    </method>
    <method name="GetDefaultInfo" overloaded="no">
      <autodoc>GetDefaultInfo() -&gt; bool</autodoc>
    </method>
    <method name="GetMarginTopLeft" overloaded="no">
      <autodoc>GetMarginTopLeft() -&gt; Point</autodoc>
    </method>
    <method name="GetMarginBottomRight" overloaded="no">
      <autodoc>GetMarginBottomRight() -&gt; Point</autodoc>
    </method>
    <method name="GetMinMarginTopLeft" overloaded="no">
      <autodoc>GetMinMarginTopLeft() -&gt; Point</autodoc>
    </method>
    <method name="GetMinMarginBottomRight" overloaded="no">
      <autodoc>GetMinMarginBottomRight() -&gt; Point</autodoc>
    </method>
    <method name="GetPaperId" overloaded="no">
      <autodoc>GetPaperId() -&gt; int</autodoc>
    </method>
    <method name="GetPaperSize" overloaded="no">
      <autodoc>GetPaperSize() -&gt; Size</autodoc>
    </method>
    <method name="GetPrintData" overloaded="no">
      <autodoc>GetPrintData() -&gt; PrintData</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="SetDefaultInfo" overloaded="no">
      <autodoc>SetDefaultInfo(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultMinMargins" overloaded="no">
      <autodoc>SetDefaultMinMargins(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginTopLeft" overloaded="no">
      <autodoc>SetMarginTopLeft(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginBottomRight" overloaded="no">
      <autodoc>SetMarginBottomRight(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetMinMarginTopLeft" overloaded="no">
      <autodoc>SetMinMarginTopLeft(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetMinMarginBottomRight" overloaded="no">
      <autodoc>SetMinMarginBottomRight(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetPaperId" overloaded="no">
      <autodoc>SetPaperId(int id)</autodoc>
      <paramlist>
        <param name="id" type="wxPaperSize" default=""/>
      </paramlist>
    </method>
    <method name="SetPaperSize" overloaded="no">
      <autodoc>SetPaperSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetPrintData" overloaded="no">
      <autodoc>SetPrintData(PrintData printData)</autodoc>
      <paramlist>
        <param name="printData" type="r.q(const).wxPrintData" default=""/>
      </paramlist>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="PageSetupDialog" oldname="wxPageSetupDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="PageSetupDialog" overloaded="no">
      <autodoc>__init__(Window parent, PageSetupDialogData data=None) -&gt; PageSetupDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="data" type="p.wxPageSetupDialogData" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetPageSetupData" overloaded="no">
      <autodoc>GetPageSetupData() -&gt; PageSetupDialogData</autodoc>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="PrintDialogData" oldname="wxPrintDialogData" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="PrintDialogData" overloaded="no">
      <autodoc>__init__() -&gt; PrintDialogData</autodoc>
    </constructor>
    <destructor name="~wxPrintDialogData">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetFromPage" overloaded="no">
      <autodoc>GetFromPage() -&gt; int</autodoc>
    </method>
    <method name="GetToPage" overloaded="no">
      <autodoc>GetToPage() -&gt; int</autodoc>
    </method>
    <method name="GetMinPage" overloaded="no">
      <autodoc>GetMinPage() -&gt; int</autodoc>
    </method>
    <method name="GetMaxPage" overloaded="no">
      <autodoc>GetMaxPage() -&gt; int</autodoc>
    </method>
    <method name="GetNoCopies" overloaded="no">
      <autodoc>GetNoCopies() -&gt; int</autodoc>
    </method>
    <method name="GetAllPages" overloaded="no">
      <autodoc>GetAllPages() -&gt; bool</autodoc>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; bool</autodoc>
    </method>
    <method name="GetCollate" overloaded="no">
      <autodoc>GetCollate() -&gt; bool</autodoc>
    </method>
    <method name="GetPrintToFile" overloaded="no">
      <autodoc>GetPrintToFile() -&gt; bool</autodoc>
    </method>
    <method name="GetSetupDialog" overloaded="no">
      <autodoc>GetSetupDialog() -&gt; bool</autodoc>
    </method>
    <method name="SetFromPage" overloaded="no">
      <autodoc>SetFromPage(int v)</autodoc>
      <paramlist>
        <param name="v" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetToPage" overloaded="no">
      <autodoc>SetToPage(int v)</autodoc>
      <paramlist>
        <param name="v" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMinPage" overloaded="no">
      <autodoc>SetMinPage(int v)</autodoc>
      <paramlist>
        <param name="v" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMaxPage" overloaded="no">
      <autodoc>SetMaxPage(int v)</autodoc>
      <paramlist>
        <param name="v" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetNoCopies" overloaded="no">
      <autodoc>SetNoCopies(int v)</autodoc>
      <paramlist>
        <param name="v" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAllPages" overloaded="no">
      <autodoc>SetAllPages(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetCollate" overloaded="no">
      <autodoc>SetCollate(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetPrintToFile" overloaded="no">
      <autodoc>SetPrintToFile(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetSetupDialog" overloaded="no">
      <autodoc>SetSetupDialog(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnablePrintToFile" overloaded="no">
      <autodoc>EnablePrintToFile(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnableSelection" overloaded="no">
      <autodoc>EnableSelection(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnablePageNumbers" overloaded="no">
      <autodoc>EnablePageNumbers(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnableHelp" overloaded="no">
      <autodoc>EnableHelp(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetEnablePrintToFile" overloaded="no">
      <autodoc>GetEnablePrintToFile() -&gt; bool</autodoc>
    </method>
    <method name="GetEnableSelection" overloaded="no">
      <autodoc>GetEnableSelection() -&gt; bool</autodoc>
    </method>
    <method name="GetEnablePageNumbers" overloaded="no">
      <autodoc>GetEnablePageNumbers() -&gt; bool</autodoc>
    </method>
    <method name="GetEnableHelp" overloaded="no">
      <autodoc>GetEnableHelp() -&gt; bool</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="GetPrintData" overloaded="no">
      <autodoc>GetPrintData() -&gt; PrintData</autodoc>
    </method>
    <method name="SetPrintData" overloaded="no">
      <autodoc>SetPrintData(PrintData printData)</autodoc>
      <paramlist>
        <param name="printData" type="r.q(const).wxPrintData" default=""/>
      </paramlist>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="PrintDialog" oldname="wxPrintDialog" module="windows">
    <baseclass name="wxDialog"/>
    <constructor name="PrintDialog" overloaded="no">
      <autodoc>__init__(Window parent, PrintDialogData data=None) -&gt; PrintDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="data" type="p.wxPrintDialogData" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetPrintDialogData" overloaded="no">
      <autodoc>GetPrintDialogData() -&gt; PrintDialogData</autodoc>
    </method>
    <method name="GetPrintDC" overloaded="no">
      <autodoc>GetPrintDC() -&gt; DC</autodoc>
    </method>
    <method name="ShowModal" overloaded="no">
      <autodoc>ShowModal() -&gt; int</autodoc>
    </method>
  </class>
  <class name="Printer" oldname="wxPrinter" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="Printer" overloaded="no">
      <autodoc>__init__(PrintDialogData data=None) -&gt; Printer</autodoc>
      <paramlist>
        <param name="data" type="p.wxPrintDialogData" default="NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxPrinter">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="CreateAbortWindow" overloaded="no">
      <autodoc>CreateAbortWindow(Window parent, Printout printout)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="printout" type="p.wxPyPrintout" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintDialogData" overloaded="no">
      <autodoc>GetPrintDialogData() -&gt; PrintDialogData</autodoc>
    </method>
    <method name="Print" overloaded="no">
      <autodoc>Print(Window parent, Printout printout, int prompt=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="printout" type="p.wxPyPrintout" default=""/>
        <param name="prompt" type="int" default="True"/>
      </paramlist>
    </method>
    <method name="PrintDialog" overloaded="no">
      <autodoc>PrintDialog(Window parent) -&gt; DC</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="ReportError" overloaded="no">
      <autodoc>ReportError(Window parent, Printout printout, String message)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="printout" type="p.wxPyPrintout" default=""/>
        <param name="message" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Setup" overloaded="no">
      <autodoc>Setup(Window parent) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetAbort" overloaded="no">
      <autodoc>GetAbort() -&gt; bool</autodoc>
    </method>
    <staticmethod name="GetLastError" overloaded="no">
      <autodoc>GetLastError() -&gt; int</autodoc>
    </staticmethod>
  </class>
  <class name="Printout" oldname="wxPyPrintout" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="wxPyPrintout" overloaded="no">
      <autodoc>__init__(String title=PrintoutTitleStr) -&gt; Printout</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default="wxPyPrintoutTitleStr"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetTitle" overloaded="no">
      <autodoc>GetTitle() -&gt; String</autodoc>
    </method>
    <method name="GetDC" overloaded="no">
      <autodoc>GetDC() -&gt; DC</autodoc>
    </method>
    <method name="SetDC" overloaded="no">
      <autodoc>SetDC(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="SetPageSizePixels" overloaded="no">
      <autodoc>SetPageSizePixels(int w, int h)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPageSizePixels" overloaded="no">
      <autodoc>GetPageSizePixels() -&gt; (w, h)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetPageSizeMM" overloaded="no">
      <autodoc>SetPageSizeMM(int w, int h)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
        <param name="h" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPageSizeMM" overloaded="no">
      <autodoc>GetPageSizeMM() -&gt; (w, h)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetPPIScreen" overloaded="no">
      <autodoc>SetPPIScreen(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPPIScreen" overloaded="no">
      <autodoc>GetPPIScreen() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetPPIPrinter" overloaded="no">
      <autodoc>SetPPIPrinter(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPPIPrinter" overloaded="no">
      <autodoc>GetPPIPrinter() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="IsPreview" overloaded="no">
      <autodoc>IsPreview() -&gt; bool</autodoc>
    </method>
    <method name="SetIsPreview" overloaded="no">
      <autodoc>SetIsPreview(bool p)</autodoc>
      <paramlist>
        <param name="p" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="base_OnBeginDocument" overloaded="no">
      <autodoc>base_OnBeginDocument(int startPage, int endPage) -&gt; bool</autodoc>
      <paramlist>
        <param name="startPage" type="int" default=""/>
        <param name="endPage" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndDocument" overloaded="no">
      <autodoc>base_OnEndDocument()</autodoc>
    </method>
    <method name="base_OnBeginPrinting" overloaded="no">
      <autodoc>base_OnBeginPrinting()</autodoc>
    </method>
    <method name="base_OnEndPrinting" overloaded="no">
      <autodoc>base_OnEndPrinting()</autodoc>
    </method>
    <method name="base_OnPreparePrinting" overloaded="no">
      <autodoc>base_OnPreparePrinting()</autodoc>
    </method>
    <method name="base_HasPage" overloaded="no">
      <autodoc>base_HasPage(int page) -&gt; bool</autodoc>
      <paramlist>
        <param name="page" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_GetPageInfo" overloaded="no">
      <autodoc>base_GetPageInfo() -&gt; (minPage, maxPage, pageFrom, pageTo)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PreviewCanvas" oldname="wxPreviewCanvas" module="windows">
    <baseclass name="wxScrolledWindow"/>
    <constructor name="PreviewCanvas" overloaded="no">
      <autodoc>__init__(PrintPreview preview, Window parent, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=PreviewCanvasNameStr) -&gt; PreviewCanvas</autodoc>
      <paramlist>
        <param name="preview" type="p.wxPrintPreview" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPreviewCanvasNameStr"/>
      </paramlist>
    </constructor>
  </class>
  <class name="PreviewFrame" oldname="wxPreviewFrame" module="windows">
    <baseclass name="wxFrame"/>
    <constructor name="PreviewFrame" overloaded="no">
      <autodoc>__init__(PrintPreview preview, Frame parent, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=DEFAULT_FRAME_STYLE, String name=FrameNameStr) -&gt; PreviewFrame</autodoc>
      <paramlist>
        <param name="preview" type="p.wxPrintPreview" default=""/>
        <param name="parent" type="p.wxFrame" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </constructor>
    <method name="Initialize" overloaded="no">
      <autodoc>Initialize()</autodoc>
    </method>
    <method name="CreateControlBar" overloaded="no">
      <autodoc>CreateControlBar()</autodoc>
    </method>
    <method name="CreateCanvas" overloaded="no">
      <autodoc>CreateCanvas()</autodoc>
    </method>
    <method name="GetControlBar" overloaded="no">
      <autodoc>GetControlBar() -&gt; PreviewControlBar</autodoc>
    </method>
  </class>
  <class name="PreviewControlBar" oldname="wxPreviewControlBar" module="windows">
    <baseclass name="wxPanel"/>
    <constructor name="PreviewControlBar" overloaded="no">
      <autodoc>__init__(PrintPreview preview, long buttons, Window parent, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=TAB_TRAVERSAL, String name=PanelNameStr) -&gt; PreviewControlBar</autodoc>
      <paramlist>
        <param name="preview" type="p.wxPrintPreview" default=""/>
        <param name="buttons" type="long" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTAB_TRAVERSAL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <method name="GetZoomControl" overloaded="no">
      <autodoc>GetZoomControl() -&gt; int</autodoc>
    </method>
    <method name="SetZoomControl" overloaded="no">
      <autodoc>SetZoomControl(int zoom)</autodoc>
      <paramlist>
        <param name="zoom" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintPreview" overloaded="no">
      <autodoc>GetPrintPreview() -&gt; PrintPreview</autodoc>
    </method>
    <method name="OnNext" overloaded="no">
      <autodoc>OnNext()</autodoc>
    </method>
    <method name="OnPrevious" overloaded="no">
      <autodoc>OnPrevious()</autodoc>
    </method>
    <method name="OnFirst" overloaded="no">
      <autodoc>OnFirst()</autodoc>
    </method>
    <method name="OnLast" overloaded="no">
      <autodoc>OnLast()</autodoc>
    </method>
    <method name="OnGoto" overloaded="no">
      <autodoc>OnGoto()</autodoc>
    </method>
  </class>
  <class name="PrintPreview" oldname="wxPrintPreview" module="windows">
    <baseclass name="wxObject"/>
    <constructor name="PrintPreview" overloaded="no">
      <autodoc>__init__(Printout printout, Printout printoutForPrinting, PrintData data=None) -&gt; PrintPreview</autodoc>
      <paramlist>
        <param name="printout" type="p.wxPyPrintout" default=""/>
        <param name="printoutForPrinting" type="p.wxPyPrintout" default=""/>
        <param name="data" type="p.wxPrintData" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="SetCurrentPage" overloaded="no">
      <autodoc>SetCurrentPage(int pageNum) -&gt; bool</autodoc>
      <paramlist>
        <param name="pageNum" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCurrentPage" overloaded="no">
      <autodoc>GetCurrentPage() -&gt; int</autodoc>
    </method>
    <method name="SetPrintout" overloaded="no">
      <autodoc>SetPrintout(Printout printout)</autodoc>
      <paramlist>
        <param name="printout" type="p.wxPyPrintout" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintout" overloaded="no">
      <autodoc>GetPrintout() -&gt; Printout</autodoc>
    </method>
    <method name="GetPrintoutForPrinting" overloaded="no">
      <autodoc>GetPrintoutForPrinting() -&gt; Printout</autodoc>
    </method>
    <method name="SetFrame" overloaded="no">
      <autodoc>SetFrame(Frame frame)</autodoc>
      <paramlist>
        <param name="frame" type="p.wxFrame" default=""/>
      </paramlist>
    </method>
    <method name="SetCanvas" overloaded="no">
      <autodoc>SetCanvas(PreviewCanvas canvas)</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPreviewCanvas" default=""/>
      </paramlist>
    </method>
    <method name="GetFrame" overloaded="no">
      <autodoc>GetFrame() -&gt; Frame</autodoc>
    </method>
    <method name="GetCanvas" overloaded="no">
      <autodoc>GetCanvas() -&gt; PreviewCanvas</autodoc>
    </method>
    <method name="PaintPage" overloaded="no">
      <autodoc>PaintPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPreviewCanvas" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="DrawBlankPage" overloaded="no">
      <autodoc>DrawBlankPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPreviewCanvas" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="RenderPage" overloaded="no">
      <autodoc>RenderPage(int pageNum) -&gt; bool</autodoc>
      <paramlist>
        <param name="pageNum" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AdjustScrollbars" overloaded="no">
      <autodoc>AdjustScrollbars(PreviewCanvas canvas)</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPreviewCanvas" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintDialogData" overloaded="no">
      <autodoc>GetPrintDialogData() -&gt; PrintDialogData</autodoc>
    </method>
    <method name="SetZoom" overloaded="no">
      <autodoc>SetZoom(int percent)</autodoc>
      <paramlist>
        <param name="percent" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetZoom" overloaded="no">
      <autodoc>GetZoom() -&gt; int</autodoc>
    </method>
    <method name="GetMaxPage" overloaded="no">
      <autodoc>GetMaxPage() -&gt; int</autodoc>
    </method>
    <method name="GetMinPage" overloaded="no">
      <autodoc>GetMinPage() -&gt; int</autodoc>
    </method>
    <method name="Ok" overloaded="no">
      <autodoc>Ok() -&gt; bool</autodoc>
    </method>
    <method name="SetOk" overloaded="no">
      <autodoc>SetOk(bool ok)</autodoc>
      <paramlist>
        <param name="ok" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Print" overloaded="no">
      <autodoc>Print(bool interactive) -&gt; bool</autodoc>
      <paramlist>
        <param name="interactive" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="DetermineScaling" overloaded="no">
      <autodoc>DetermineScaling()</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
  </class>
  <class name="PyPrintPreview" oldname="wxPyPrintPreview" module="windows">
    <baseclass name="wxPrintPreview"/>
    <constructor name="PyPrintPreview" overloaded="no">
      <autodoc>__init__(Printout printout, Printout printoutForPrinting, PrintData data=None) -&gt; PyPrintPreview</autodoc>
      <paramlist>
        <param name="printout" type="p.wxPyPrintout" default=""/>
        <param name="printoutForPrinting" type="p.wxPyPrintout" default=""/>
        <param name="data" type="p.wxPrintData" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_SetCurrentPage" overloaded="no">
      <autodoc>base_SetCurrentPage(int pageNum) -&gt; bool</autodoc>
      <paramlist>
        <param name="pageNum" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_PaintPage" overloaded="no">
      <autodoc>base_PaintPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPreviewCanvas" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_DrawBlankPage" overloaded="no">
      <autodoc>base_DrawBlankPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPreviewCanvas" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_RenderPage" overloaded="no">
      <autodoc>base_RenderPage(int pageNum) -&gt; bool</autodoc>
      <paramlist>
        <param name="pageNum" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_SetZoom" overloaded="no">
      <autodoc>base_SetZoom(int percent)</autodoc>
      <paramlist>
        <param name="percent" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_Print" overloaded="no">
      <autodoc>base_Print(bool interactive) -&gt; bool</autodoc>
      <paramlist>
        <param name="interactive" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="base_DetermineScaling" overloaded="no">
      <autodoc>base_DetermineScaling()</autodoc>
    </method>
  </class>
  <class name="PyPreviewFrame" oldname="wxPyPreviewFrame" module="windows">
    <baseclass name="wxPreviewFrame"/>
    <constructor name="PyPreviewFrame" overloaded="no">
      <autodoc>__init__(PrintPreview preview, Frame parent, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=DEFAULT_FRAME_STYLE, String name=FrameNameStr) -&gt; PyPreviewFrame</autodoc>
      <paramlist>
        <param name="preview" type="p.wxPrintPreview" default=""/>
        <param name="parent" type="p.wxFrame" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyFrameNameStr"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetPreviewCanvas" overloaded="no">
      <autodoc>SetPreviewCanvas(PreviewCanvas canvas)</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPreviewCanvas" default=""/>
      </paramlist>
    </method>
    <method name="SetControlBar" overloaded="no">
      <autodoc>SetControlBar(PreviewControlBar bar)</autodoc>
      <paramlist>
        <param name="bar" type="p.wxPreviewControlBar" default=""/>
      </paramlist>
    </method>
    <method name="base_Initialize" overloaded="no">
      <autodoc>base_Initialize()</autodoc>
    </method>
    <method name="base_CreateCanvas" overloaded="no">
      <autodoc>base_CreateCanvas()</autodoc>
    </method>
    <method name="base_CreateControlBar" overloaded="no">
      <autodoc>base_CreateControlBar()</autodoc>
    </method>
  </class>
  <class name="PyPreviewControlBar" oldname="wxPyPreviewControlBar" module="windows">
    <baseclass name="wxPreviewControlBar"/>
    <constructor name="PyPreviewControlBar" overloaded="no">
      <autodoc>__init__(PrintPreview preview, long buttons, Window parent, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; PyPreviewControlBar</autodoc>
      <paramlist>
        <param name="preview" type="p.wxPrintPreview" default=""/>
        <param name="buttons" type="long" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetPrintPreview" overloaded="no">
      <autodoc>SetPrintPreview(PrintPreview preview)</autodoc>
      <paramlist>
        <param name="preview" type="p.wxPrintPreview" default=""/>
      </paramlist>
    </method>
    <method name="base_CreateButtons" overloaded="no">
      <autodoc>base_CreateButtons()</autodoc>
    </method>
    <method name="base_SetZoomControl" overloaded="no">
      <autodoc>base_SetZoomControl(int zoom)</autodoc>
      <paramlist>
        <param name="zoom" type="int" default=""/>
      </paramlist>
    </method>
  </class>
</module>
<module name="controls">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Button" oldname="wxButton" module="controls">
    <docstring>A button is a control that contains a text string, and is one of the most
common elements of a GUI.  It may be placed on a dialog box or panel, or
indeed almost any other window.</docstring>
    <refdoc>
 Styles
    wx.BU_LEFT:     Left-justifies the label. WIN32 only.
    wx.BU_TOP:      Aligns the label to the top of the button. WIN32 only.
    wx.BU_RIGHT:    Right-justifies the bitmap label. WIN32 only.
    wx.BU_BOTTOM:   Aligns the label to the bottom of the button. WIN32 only.
    wx.BU_EXACTFIT: Creates the button as small as possible instead of making
                    it of the standard size (which is the default behaviour.)

 Events
     EVT_BUTTON:    Sent when the button is clicked.
</refdoc>
    <baseclass name="wxControl"/>
    <constructor name="Button" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ButtonNameStr) -&gt; Button</autodoc>
      <docstring>Create and show a button.</docstring>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyButtonNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreButton" overloaded="no">
      <autodoc>PreButton() -&gt; Button</autodoc>
      <docstring>Precreate a Button for 2-phase creation.</docstring>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ButtonNameStr) -&gt; bool</autodoc>
      <docstring>Acutally create the GUI Button for 2-phase creation.</docstring>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyButtonNameStr"/>
      </paramlist>
    </method>
    <method name="SetDefault" overloaded="no">
      <autodoc>SetDefault()</autodoc>
      <docstring>This sets the button to be the default item for the panel or dialog box.</docstring>
    </method>
    <staticmethod name="GetDefaultSize" overloaded="no">
      <autodoc>GetDefaultSize() -&gt; Size</autodoc>
    </staticmethod>
  </class>
  <class name="BitmapButton" oldname="wxBitmapButton" module="controls">
    <docstring>A Button that contains a bitmap.  A bitmap button can be supplied with a
single bitmap, and wxWindows will draw all button states using this bitmap. If
the application needs more control, additional bitmaps for the selected state,
unpressed focused state, and greyed-out state may be supplied.
</docstring>
    <baseclass name="wxButton"/>
    <constructor name="BitmapButton" overloaded="no">
      <autodoc>__init__(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BU_AUTODRAW, 
    Validator validator=DefaultValidator, 
    String name=ButtonNameStr) -&gt; BitmapButton</autodoc>
      <docstring>Create and show a button with a bitmap for the label.</docstring>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxBU_AUTODRAW"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyButtonNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreBitmapButton" overloaded="no">
      <autodoc>PreBitmapButton() -&gt; BitmapButton</autodoc>
      <docstring>Precreate a BitmapButton for 2-phase creation.</docstring>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BU_AUTODRAW, 
    Validator validator=DefaultValidator, 
    String name=ButtonNameStr) -&gt; bool</autodoc>
      <docstring>Acutally create the GUI BitmapButton for 2-phase creation.</docstring>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxBU_AUTODRAW"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyButtonNameStr"/>
      </paramlist>
    </method>
    <method name="GetBitmapLabel" overloaded="no">
      <autodoc>GetBitmapLabel() -&gt; Bitmap</autodoc>
      <docstring>Returns the label bitmap (the one passed to the constructor).</docstring>
    </method>
    <method name="GetBitmapDisabled" overloaded="no">
      <autodoc>GetBitmapDisabled() -&gt; Bitmap</autodoc>
      <docstring>Returns the bitmap for the disabled state.</docstring>
    </method>
    <method name="GetBitmapFocus" overloaded="no">
      <autodoc>GetBitmapFocus() -&gt; Bitmap</autodoc>
      <docstring>Returns the bitmap for the focused state.</docstring>
    </method>
    <method name="GetBitmapSelected" overloaded="no">
      <autodoc>GetBitmapSelected() -&gt; Bitmap</autodoc>
      <docstring>Returns the bitmap for the selected state.</docstring>
    </method>
    <method name="SetBitmapDisabled" overloaded="no">
      <autodoc>SetBitmapDisabled(Bitmap bitmap)</autodoc>
      <docstring>Sets the bitmap for the disabled button appearance.</docstring>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetBitmapFocus" overloaded="no">
      <autodoc>SetBitmapFocus(Bitmap bitmap)</autodoc>
      <docstring>Sets the bitmap for the button appearance when it has the keyboard focus.</docstring>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetBitmapSelected" overloaded="no">
      <autodoc>SetBitmapSelected(Bitmap bitmap)</autodoc>
      <docstring>Sets the bitmap for the selected (depressed) button appearance.</docstring>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetBitmapLabel" overloaded="no">
      <autodoc>SetBitmapLabel(Bitmap bitmap)</autodoc>
      <docstring>Sets the bitmap label for the button.  This is the bitmap used for the
unselected state, and for all other states if no other bitmaps are provided.</docstring>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetMargins" overloaded="no">
      <autodoc>SetMargins(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMarginX" overloaded="no">
      <autodoc>GetMarginX() -&gt; int</autodoc>
    </method>
    <method name="GetMarginY" overloaded="no">
      <autodoc>GetMarginY() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="CheckBox" oldname="wxCheckBox" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="CheckBox" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=CheckBoxNameStr) -&gt; CheckBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyCheckBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreCheckBox" overloaded="no">
      <autodoc>PreCheckBox() -&gt; CheckBox</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=CheckBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyCheckBoxNameStr"/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; bool</autodoc>
    </method>
    <method name="IsChecked" overloaded="no">
      <autodoc>IsChecked() -&gt; bool</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(bool state)</autodoc>
      <paramlist>
        <param name="state" type="q(const).bool" default=""/>
      </paramlist>
    </method>
    <method name="Get3StateValue" overloaded="no">
      <autodoc>Get3StateValue() -&gt; int</autodoc>
    </method>
    <method name="Set3StateValue" overloaded="no">
      <autodoc>Set3StateValue(int state)</autodoc>
      <paramlist>
        <param name="state" type="wxCheckBoxState" default=""/>
      </paramlist>
    </method>
    <method name="Is3State" overloaded="no">
      <autodoc>Is3State() -&gt; bool</autodoc>
    </method>
    <method name="Is3rdStateAllowedForUser" overloaded="no">
      <autodoc>Is3rdStateAllowedForUser() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Choice" oldname="wxChoice" module="controls">
    <baseclass name="wxControlWithItems"/>
    <constructor name="Choice" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ChoiceNameStr) -&gt; Choice</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyChoiceNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreChoice" overloaded="no">
      <autodoc>PreChoice() -&gt; Choice</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ChoiceNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyChoiceNameStr"/>
      </paramlist>
    </method>
    <method name="GetColumns" overloaded="no">
      <autodoc>GetColumns() -&gt; int</autodoc>
    </method>
    <method name="SetColumns" overloaded="no">
      <autodoc>SetColumns(int n=1)</autodoc>
      <paramlist>
        <param name="n" type="q(const).int" default="1"/>
      </paramlist>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int n)</autodoc>
      <paramlist>
        <param name="n" type="q(const).int" default=""/>
      </paramlist>
    </method>
    <method name="SetStringSelection" overloaded="no">
      <autodoc>SetStringSelection(String string)</autodoc>
      <paramlist>
        <param name="string" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetString" overloaded="no">
      <autodoc>SetString(int n, String s)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ComboBox" oldname="wxComboBox" module="controls">
    <baseclass name="wxControl"/>
    <baseclass name="wxItemContainer"/>
    <constructor name="ComboBox" overloaded="no">
      <autodoc>__init__(Window parent, int id, String value=EmptyString, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ComboBoxNameStr) -&gt; ComboBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyComboBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreComboBox" overloaded="no">
      <autodoc>PreComboBox() -&gt; ComboBox</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String value=EmptyString, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ComboBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyComboBoxNameStr"/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(String value)</autodoc>
      <paramlist>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Copy" overloaded="no">
      <autodoc>Copy()</autodoc>
    </method>
    <method name="Cut" overloaded="no">
      <autodoc>Cut()</autodoc>
    </method>
    <method name="Paste" overloaded="no">
      <autodoc>Paste()</autodoc>
    </method>
    <method name="SetInsertionPoint" overloaded="no">
      <autodoc>SetInsertionPoint(long pos)</autodoc>
      <paramlist>
        <param name="pos" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetInsertionPoint" overloaded="no">
      <autodoc>GetInsertionPoint() -&gt; long</autodoc>
    </method>
    <method name="GetLastPosition" overloaded="no">
      <autodoc>GetLastPosition() -&gt; long</autodoc>
    </method>
    <method name="Replace" overloaded="no">
      <autodoc>Replace(long from, long to, String value)</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMark" overloaded="no">
      <autodoc>SetMark(long from, long to)</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetEditable" overloaded="no">
      <autodoc>SetEditable(bool editable)</autodoc>
      <paramlist>
        <param name="editable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetInsertionPointEnd" overloaded="no">
      <autodoc>SetInsertionPointEnd()</autodoc>
    </method>
    <method name="Remove" overloaded="no">
      <autodoc>Remove(long from, long to)</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Gauge" oldname="wxGauge" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="Gauge" overloaded="no">
      <autodoc>__init__(Window parent, int id, int range, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=GA_HORIZONTAL, 
    Validator validator=DefaultValidator, 
    String name=GaugeNameStr) -&gt; Gauge</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="range" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxGA_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyGaugeNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreGauge" overloaded="no">
      <autodoc>PreGauge() -&gt; Gauge</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, int range, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=GA_HORIZONTAL, 
    Validator validator=DefaultValidator, 
    String name=GaugeNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="range" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxGA_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyGaugeNameStr"/>
      </paramlist>
    </method>
    <method name="SetRange" overloaded="no">
      <autodoc>SetRange(int range)</autodoc>
      <paramlist>
        <param name="range" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetRange" overloaded="no">
      <autodoc>GetRange() -&gt; int</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; int</autodoc>
    </method>
    <method name="IsVertical" overloaded="no">
      <autodoc>IsVertical() -&gt; bool</autodoc>
    </method>
    <method name="SetShadowWidth" overloaded="no">
      <autodoc>SetShadowWidth(int w)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetShadowWidth" overloaded="no">
      <autodoc>GetShadowWidth() -&gt; int</autodoc>
    </method>
    <method name="SetBezelFace" overloaded="no">
      <autodoc>SetBezelFace(int w)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBezelFace" overloaded="no">
      <autodoc>GetBezelFace() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="StaticBox" oldname="wxStaticBox" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="StaticBox" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBoxNameStr) -&gt; StaticBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreStaticBox" overloaded="no">
      <autodoc>PreStaticBox() -&gt; StaticBox</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticBoxNameStr"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="StaticLine" oldname="wxStaticLine" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="StaticLine" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=LI_HORIZONTAL, 
    String name=StaticTextNameStr) -&gt; StaticLine</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLI_HORIZONTAL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticTextNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreStaticLine" overloaded="no">
      <autodoc>PreStaticLine() -&gt; StaticLine</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=LI_HORIZONTAL, 
    String name=StaticTextNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLI_HORIZONTAL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticTextNameStr"/>
      </paramlist>
    </method>
    <method name="IsVertical" overloaded="no">
      <autodoc>IsVertical() -&gt; bool</autodoc>
    </method>
    <staticmethod name="GetDefaultSize" overloaded="no">
      <autodoc>GetDefaultSize() -&gt; int</autodoc>
    </staticmethod>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="StaticText" oldname="wxStaticText" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="StaticText" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticTextNameStr) -&gt; StaticText</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticTextNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreStaticText" overloaded="no">
      <autodoc>PreStaticText() -&gt; StaticText</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticTextNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticTextNameStr"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="StaticBitmap" oldname="wxStaticBitmap" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="StaticBitmap" overloaded="no">
      <autodoc>__init__(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBitmapNameStr) -&gt; StaticBitmap</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticBitmapNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreStaticBitmap" overloaded="no">
      <autodoc>PreStaticBitmap() -&gt; StaticBitmap</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBitmapNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyStaticBitmapNameStr"/>
      </paramlist>
    </method>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="SetBitmap" overloaded="no">
      <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetIcon" overloaded="no">
      <autodoc>SetIcon(Icon icon)</autodoc>
      <paramlist>
        <param name="icon" type="r.q(const).wxIcon" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ListBox" oldname="wxListBox" module="controls">
    <baseclass name="wxControlWithItems"/>
    <constructor name="ListBox" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; ListBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreListBox" overloaded="no">
      <autodoc>PreListBox() -&gt; ListBox</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListBoxNameStr"/>
      </paramlist>
    </method>
    <method name="Insert" overloaded="no">
      <autodoc>Insert(String item, int pos, PyObject clientData=None)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxString" default=""/>
        <param name="pos" type="int" default=""/>
        <param name="clientData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="InsertItems" overloaded="no">
      <autodoc>InsertItems(wxArrayString items, int pos)</autodoc>
      <paramlist>
        <param name="items" type="r.q(const).wxArrayString" default=""/>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(wxArrayString items)</autodoc>
      <paramlist>
        <param name="items" type="r.q(const).wxArrayString" default=""/>
      </paramlist>
    </method>
    <method name="IsSelected" overloaded="no">
      <autodoc>IsSelected(int n) -&gt; bool</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int n, bool select=True)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="select" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Select" overloaded="no">
      <autodoc>Select(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Deselect" overloaded="no">
      <autodoc>Deselect(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeselectAll" overloaded="no">
      <autodoc>DeselectAll(int itemToLeaveSelected=-1)</autodoc>
      <paramlist>
        <param name="itemToLeaveSelected" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="SetStringSelection" overloaded="no">
      <autodoc>SetStringSelection(String s, bool select=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
        <param name="select" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetSelections" overloaded="no">
      <autodoc>GetSelections() -&gt; PyObject</autodoc>
    </method>
    <method name="SetFirstItem" overloaded="no">
      <autodoc>SetFirstItem(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFirstItemStr" overloaded="no">
      <autodoc>SetFirstItemStr(String s)</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="EnsureVisible" overloaded="no">
      <autodoc>EnsureVisible(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AppendAndEnsureVisible" overloaded="no">
      <autodoc>AppendAndEnsureVisible(String s)</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="IsSorted" overloaded="no">
      <autodoc>IsSorted() -&gt; bool</autodoc>
    </method>
    <method name="SetItemForegroundColour" overloaded="no">
      <autodoc>SetItemForegroundColour(int item, Colour c)</autodoc>
      <paramlist>
        <param name="item" type="int" default=""/>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetItemBackgroundColour" overloaded="no">
      <autodoc>SetItemBackgroundColour(int item, Colour c)</autodoc>
      <paramlist>
        <param name="item" type="int" default=""/>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetItemFont" overloaded="no">
      <autodoc>SetItemFont(int item, Font f)</autodoc>
      <paramlist>
        <param name="item" type="int" default=""/>
        <param name="f" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="CheckListBox" oldname="wxCheckListBox" module="controls">
    <baseclass name="wxListBox"/>
    <constructor name="CheckListBox" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; CheckListBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreCheckListBox" overloaded="no">
      <autodoc>PreCheckListBox() -&gt; CheckListBox</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListBoxNameStr"/>
      </paramlist>
    </method>
    <method name="IsChecked" overloaded="no">
      <autodoc>IsChecked(int index) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Check" overloaded="no">
      <autodoc>Check(int index, int check=True)</autodoc>
      <paramlist>
        <param name="index" type="int" default=""/>
        <param name="check" type="int" default="True"/>
      </paramlist>
    </method>
    <method name="GetItemHeight" overloaded="no">
      <autodoc>GetItemHeight() -&gt; int</autodoc>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point pt) -&gt; int</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="HitTestXY" overloaded="no">
      <autodoc>HitTestXY(int x, int y) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="TextAttr" oldname="wxTextAttr" module="controls">
    <constructor name="TextAttr" overloaded="yes"/>
    <constructor name="TextAttr" overloaded="yes">
      <autodoc>__init__() -&gt; TextAttr
__init__(Colour colText, Colour colBack=wxNullColour, Font font=wxNullFont, 
    int alignment=TEXT_ALIGNMENT_DEFAULT) -&gt; TextAttr</autodoc>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default=""/>
        <param name="colBack" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="font" type="r.q(const).wxFont" default="wxNullFont"/>
        <param name="alignment" type="wxTextAttrAlignment" default="wxTEXT_ALIGNMENT_DEFAULT"/>
      </paramlist>
    </constructor>
    <destructor name="~wxTextAttr">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Init" overloaded="no">
      <autodoc>Init()</autodoc>
    </method>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(Colour colText)</autodoc>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
      <paramlist>
        <param name="colBack" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font, long flags=TEXT_ATTR_FONT)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
        <param name="flags" type="long" default="wxTEXT_ATTR_FONT"/>
      </paramlist>
    </method>
    <method name="SetAlignment" overloaded="no">
      <autodoc>SetAlignment(int alignment)</autodoc>
      <paramlist>
        <param name="alignment" type="wxTextAttrAlignment" default=""/>
      </paramlist>
    </method>
    <method name="SetTabs" overloaded="no">
      <autodoc>SetTabs(wxArrayInt tabs)</autodoc>
      <paramlist>
        <param name="tabs" type="r.q(const).wxArrayInt" default=""/>
      </paramlist>
    </method>
    <method name="SetLeftIndent" overloaded="no">
      <autodoc>SetLeftIndent(int indent)</autodoc>
      <paramlist>
        <param name="indent" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRightIndent" overloaded="no">
      <autodoc>SetRightIndent(int indent)</autodoc>
      <paramlist>
        <param name="indent" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFlags" overloaded="no">
      <autodoc>SetFlags(long flags)</autodoc>
      <paramlist>
        <param name="flags" type="long" default=""/>
      </paramlist>
    </method>
    <method name="HasTextColour" overloaded="no">
      <autodoc>HasTextColour() -&gt; bool</autodoc>
    </method>
    <method name="HasBackgroundColour" overloaded="no">
      <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
    </method>
    <method name="HasFont" overloaded="no">
      <autodoc>HasFont() -&gt; bool</autodoc>
    </method>
    <method name="HasAlignment" overloaded="no">
      <autodoc>HasAlignment() -&gt; bool</autodoc>
    </method>
    <method name="HasTabs" overloaded="no">
      <autodoc>HasTabs() -&gt; bool</autodoc>
    </method>
    <method name="HasLeftIndent" overloaded="no">
      <autodoc>HasLeftIndent() -&gt; bool</autodoc>
    </method>
    <method name="HasRightIndent" overloaded="no">
      <autodoc>HasRightIndent() -&gt; bool</autodoc>
    </method>
    <method name="HasFlag" overloaded="no">
      <autodoc>HasFlag(long flag) -&gt; bool</autodoc>
      <paramlist>
        <param name="flag" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetTextColour" overloaded="no">
      <autodoc>GetTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetBackgroundColour" overloaded="no">
      <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <method name="GetAlignment" overloaded="no">
      <autodoc>GetAlignment() -&gt; int</autodoc>
    </method>
    <method name="GetTabs" overloaded="no">
      <autodoc>GetTabs() -&gt; wxArrayInt</autodoc>
    </method>
    <method name="GetLeftIndent" overloaded="no">
      <autodoc>GetLeftIndent() -&gt; long</autodoc>
    </method>
    <method name="GetRightIndent" overloaded="no">
      <autodoc>GetRightIndent() -&gt; long</autodoc>
    </method>
    <method name="GetFlags" overloaded="no">
      <autodoc>GetFlags() -&gt; long</autodoc>
    </method>
    <method name="IsDefault" overloaded="no">
      <autodoc>IsDefault() -&gt; bool</autodoc>
    </method>
    <staticmethod name="Combine" overloaded="no">
      <autodoc>Combine(TextAttr attr, TextAttr attrDef, TextCtrl text) -&gt; TextAttr</autodoc>
      <paramlist>
        <param name="attr" type="r.q(const).wxTextAttr" default=""/>
        <param name="attrDef" type="r.q(const).wxTextAttr" default=""/>
        <param name="text" type="p.q(const).wxTextCtrl" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <class name="TextCtrl" oldname="wxTextCtrl" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="TextCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id, String value=EmptyString, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=TextCtrlNameStr) -&gt; TextCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTextCtrlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreTextCtrl" overloaded="no">
      <autodoc>PreTextCtrl() -&gt; TextCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String value=EmptyString, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=TextCtrlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTextCtrlNameStr"/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(String value)</autodoc>
      <paramlist>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetRange" overloaded="no">
      <autodoc>GetRange(long from, long to) -&gt; String</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetLineLength" overloaded="no">
      <autodoc>GetLineLength(long lineNo) -&gt; int</autodoc>
      <paramlist>
        <param name="lineNo" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetLineText" overloaded="no">
      <autodoc>GetLineText(long lineNo) -&gt; String</autodoc>
      <paramlist>
        <param name="lineNo" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetNumberOfLines" overloaded="no">
      <autodoc>GetNumberOfLines() -&gt; int</autodoc>
    </method>
    <method name="IsModified" overloaded="no">
      <autodoc>IsModified() -&gt; bool</autodoc>
    </method>
    <method name="IsEditable" overloaded="no">
      <autodoc>IsEditable() -&gt; bool</autodoc>
    </method>
    <method name="IsSingleLine" overloaded="no">
      <autodoc>IsSingleLine() -&gt; bool</autodoc>
    </method>
    <method name="IsMultiLine" overloaded="no">
      <autodoc>IsMultiLine() -&gt; bool</autodoc>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; (from, to)</autodoc>
      <docstring>If the return values from and to are the same, there is no selection.</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.long" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
      </paramlist>
    </method>
    <method name="GetStringSelection" overloaded="no">
      <autodoc>GetStringSelection() -&gt; String</autodoc>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="Replace" overloaded="no">
      <autodoc>Replace(long from, long to, String value)</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Remove" overloaded="no">
      <autodoc>Remove(long from, long to)</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
      </paramlist>
    </method>
    <method name="LoadFile" overloaded="no">
      <autodoc>LoadFile(String file) -&gt; bool</autodoc>
      <paramlist>
        <param name="file" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SaveFile" overloaded="no">
      <autodoc>SaveFile(String file=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="file" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="MarkDirty" overloaded="no">
      <autodoc>MarkDirty()</autodoc>
    </method>
    <method name="DiscardEdits" overloaded="no">
      <autodoc>DiscardEdits()</autodoc>
    </method>
    <method name="SetMaxLength" overloaded="no">
      <autodoc>SetMaxLength(unsigned long len)</autodoc>
      <paramlist>
        <param name="len" type="unsigned long" default=""/>
      </paramlist>
    </method>
    <method name="WriteText" overloaded="no">
      <autodoc>WriteText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AppendText" overloaded="no">
      <autodoc>AppendText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="EmulateKeyPress" overloaded="no">
      <autodoc>EmulateKeyPress(KeyEvent event) -&gt; bool</autodoc>
      <paramlist>
        <param name="event" type="r.q(const).wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(long start, long end, TextAttr style) -&gt; bool</autodoc>
      <paramlist>
        <param name="start" type="long" default=""/>
        <param name="end" type="long" default=""/>
        <param name="style" type="r.q(const).wxTextAttr" default=""/>
      </paramlist>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle(long position, TextAttr style) -&gt; bool</autodoc>
      <paramlist>
        <param name="position" type="long" default=""/>
        <param name="style" type="r.wxTextAttr" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultStyle" overloaded="no">
      <autodoc>SetDefaultStyle(TextAttr style) -&gt; bool</autodoc>
      <paramlist>
        <param name="style" type="r.q(const).wxTextAttr" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultStyle" overloaded="no">
      <autodoc>GetDefaultStyle() -&gt; TextAttr</autodoc>
    </method>
    <method name="XYToPosition" overloaded="no">
      <autodoc>XYToPosition(long x, long y) -&gt; long</autodoc>
      <paramlist>
        <param name="x" type="long" default=""/>
        <param name="y" type="long" default=""/>
      </paramlist>
    </method>
    <method name="PositionToXY" overloaded="no">
      <autodoc>PositionToXY(long pos) -&gt; (x, y)</autodoc>
      <paramlist>
        <param name="pos" type="long" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
      </paramlist>
    </method>
    <method name="ShowPosition" overloaded="no">
      <autodoc>ShowPosition(long pos)</autodoc>
      <paramlist>
        <param name="pos" type="long" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point pt) -&gt; (result, row, col)</autodoc>
      <docstring>Find the character at position given in pixels.
NB: pt is in device coords (not adjusted for the client area
origin nor scrolling)</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
      </paramlist>
    </method>
    <method name="Copy" overloaded="no">
      <autodoc>Copy()</autodoc>
    </method>
    <method name="Cut" overloaded="no">
      <autodoc>Cut()</autodoc>
    </method>
    <method name="Paste" overloaded="no">
      <autodoc>Paste()</autodoc>
    </method>
    <method name="CanCopy" overloaded="no">
      <autodoc>CanCopy() -&gt; bool</autodoc>
    </method>
    <method name="CanCut" overloaded="no">
      <autodoc>CanCut() -&gt; bool</autodoc>
    </method>
    <method name="CanPaste" overloaded="no">
      <autodoc>CanPaste() -&gt; bool</autodoc>
    </method>
    <method name="Undo" overloaded="no">
      <autodoc>Undo()</autodoc>
    </method>
    <method name="Redo" overloaded="no">
      <autodoc>Redo()</autodoc>
    </method>
    <method name="CanUndo" overloaded="no">
      <autodoc>CanUndo() -&gt; bool</autodoc>
    </method>
    <method name="CanRedo" overloaded="no">
      <autodoc>CanRedo() -&gt; bool</autodoc>
    </method>
    <method name="SetInsertionPoint" overloaded="no">
      <autodoc>SetInsertionPoint(long pos)</autodoc>
      <paramlist>
        <param name="pos" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetInsertionPointEnd" overloaded="no">
      <autodoc>SetInsertionPointEnd()</autodoc>
    </method>
    <method name="GetInsertionPoint" overloaded="no">
      <autodoc>GetInsertionPoint() -&gt; long</autodoc>
    </method>
    <method name="GetLastPosition" overloaded="no">
      <autodoc>GetLastPosition() -&gt; long</autodoc>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(long from, long to)</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SelectAll" overloaded="no">
      <autodoc>SelectAll()</autodoc>
    </method>
    <method name="SetEditable" overloaded="no">
      <autodoc>SetEditable(bool editable)</autodoc>
      <paramlist>
        <param name="editable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="write" overloaded="no">
      <autodoc>write(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetString" overloaded="no">
      <autodoc>GetString(long from, long to) -&gt; String</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="TextUrlEvent" oldname="wxTextUrlEvent" module="controls">
    <baseclass name="wxCommandEvent"/>
    <constructor name="TextUrlEvent" overloaded="no">
      <autodoc>__init__(int winid, MouseEvent evtMouse, long start, long end) -&gt; TextUrlEvent</autodoc>
      <paramlist>
        <param name="winid" type="int" default=""/>
        <param name="evtMouse" type="r.q(const).wxMouseEvent" default=""/>
        <param name="start" type="long" default=""/>
        <param name="end" type="long" default=""/>
      </paramlist>
    </constructor>
    <method name="GetMouseEvent" overloaded="no">
      <autodoc>GetMouseEvent() -&gt; MouseEvent</autodoc>
    </method>
    <method name="GetURLStart" overloaded="no">
      <autodoc>GetURLStart() -&gt; long</autodoc>
    </method>
    <method name="GetURLEnd" overloaded="no">
      <autodoc>GetURLEnd() -&gt; long</autodoc>
    </method>
  </class>
  <pythoncode>
EVT_TEXT        = wx.PyEventBinder( wxEVT_COMMAND_TEXT_UPDATED, 1)
EVT_TEXT_ENTER  = wx.PyEventBinder( wxEVT_COMMAND_TEXT_ENTER, 1)
EVT_TEXT_URL    = wx.PyEventBinder( wxEVT_COMMAND_TEXT_URL, 1) 
EVT_TEXT_MAXLEN = wx.PyEventBinder( wxEVT_COMMAND_TEXT_MAXLEN, 1)
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ScrollBar" oldname="wxScrollBar" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="ScrollBar" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SB_HORIZONTAL, 
    Validator validator=DefaultValidator, String name=ScrollBarNameStr) -&gt; ScrollBar</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSB_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyScrollBarNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreScrollBar" overloaded="no">
      <autodoc>PreScrollBar() -&gt; ScrollBar</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SB_HORIZONTAL, 
    Validator validator=DefaultValidator, String name=ScrollBarNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSB_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyScrollBarNameStr"/>
      </paramlist>
    </method>
    <method name="GetThumbPosition" overloaded="no">
      <autodoc>GetThumbPosition() -&gt; int</autodoc>
    </method>
    <method name="GetThumbSize" overloaded="no">
      <autodoc>GetThumbSize() -&gt; int</autodoc>
    </method>
    <pythoncode> GetThumbLength = GetThumbSize </pythoncode>
    <method name="GetPageSize" overloaded="no">
      <autodoc>GetPageSize() -&gt; int</autodoc>
    </method>
    <method name="GetRange" overloaded="no">
      <autodoc>GetRange() -&gt; int</autodoc>
    </method>
    <method name="IsVertical" overloaded="no">
      <autodoc>IsVertical() -&gt; bool</autodoc>
    </method>
    <method name="SetThumbPosition" overloaded="no">
      <autodoc>SetThumbPosition(int viewStart)</autodoc>
      <paramlist>
        <param name="viewStart" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetScrollbar" overloaded="no">
      <autodoc>SetScrollbar(int position, int thumbSize, int range, int pageSize, 
    bool refresh=True)</autodoc>
      <paramlist>
        <param name="position" type="int" default=""/>
        <param name="thumbSize" type="int" default=""/>
        <param name="range" type="int" default=""/>
        <param name="pageSize" type="int" default=""/>
        <param name="refresh" type="bool" default="True"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SpinButton" oldname="wxSpinButton" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="SpinButton" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SP_HORIZONTAL, 
    String name=SPIN_BUTTON_NAME) -&gt; SpinButton</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSP_HORIZONTAL"/>
        <param name="name" type="r.q(const).wxString" default="wxPySPIN_BUTTON_NAME"/>
      </paramlist>
    </constructor>
    <constructor name="PreSpinButton" overloaded="no">
      <autodoc>PreSpinButton() -&gt; SpinButton</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SP_HORIZONTAL, 
    String name=SPIN_BUTTON_NAME) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSP_HORIZONTAL"/>
        <param name="name" type="r.q(const).wxString" default="wxPySPIN_BUTTON_NAME"/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; int</autodoc>
    </method>
    <method name="GetMin" overloaded="no">
      <autodoc>GetMin() -&gt; int</autodoc>
    </method>
    <method name="GetMax" overloaded="no">
      <autodoc>GetMax() -&gt; int</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMin" overloaded="no">
      <autodoc>SetMin(int minVal)</autodoc>
      <paramlist>
        <param name="minVal" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMax" overloaded="no">
      <autodoc>SetMax(int maxVal)</autodoc>
      <paramlist>
        <param name="maxVal" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRange" overloaded="no">
      <autodoc>SetRange(int minVal, int maxVal)</autodoc>
      <paramlist>
        <param name="minVal" type="int" default=""/>
        <param name="maxVal" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsVertical" overloaded="no">
      <autodoc>IsVertical() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="SpinCtrl" oldname="wxSpinCtrl" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="SpinCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, String value=EmptyString, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_ARROW_KEYS, int min=0, int max=100, 
    int initial=0, String name=SpinCtrlNameStr) -&gt; SpinCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="value" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSP_ARROW_KEYS"/>
        <param name="min" type="int" default="0"/>
        <param name="max" type="int" default="100"/>
        <param name="initial" type="int" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPySpinCtrlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreSpinCtrl" overloaded="no">
      <autodoc>PreSpinCtrl() -&gt; SpinCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, String value=EmptyString, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_ARROW_KEYS, int min=0, int max=100, 
    int initial=0, String name=SpinCtrlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="value" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSP_ARROW_KEYS"/>
        <param name="min" type="int" default="0"/>
        <param name="max" type="int" default="100"/>
        <param name="initial" type="int" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPySpinCtrlNameStr"/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; int</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(int value)</autodoc>
      <paramlist>
        <param name="value" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetValueString" overloaded="no">
      <autodoc>SetValueString(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetRange" overloaded="no">
      <autodoc>SetRange(int minVal, int maxVal)</autodoc>
      <paramlist>
        <param name="minVal" type="int" default=""/>
        <param name="maxVal" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMin" overloaded="no">
      <autodoc>GetMin() -&gt; int</autodoc>
    </method>
    <method name="GetMax" overloaded="no">
      <autodoc>GetMax() -&gt; int</autodoc>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(long from, long to)</autodoc>
      <paramlist>
        <param name="from" type="long" default=""/>
        <param name="to" type="long" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="SpinEvent" oldname="wxSpinEvent" module="controls">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="SpinEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0) -&gt; SpinEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; int</autodoc>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
EVT_SPIN_UP   = wx.PyEventBinder( wx.wxEVT_SCROLL_LINEUP, 1)
EVT_SPIN_DOWN = wx.PyEventBinder( wx.wxEVT_SCROLL_LINEDOWN, 1)
EVT_SPIN      = wx.PyEventBinder( wx.wxEVT_SCROLL_THUMBTRACK, 1)
EVT_SPINCTRL  = wx.PyEventBinder( wxEVT_COMMAND_SPINCTRL_UPDATED, 1)
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="RadioBox" oldname="wxRadioBox" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="RadioBox" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, 
    int majorDimension=0, 
    long style=RA_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=RadioBoxNameStr) -&gt; RadioBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="majorDimension" type="int" default="0"/>
        <param name="style" type="long" default="wxRA_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyRadioBoxNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreRadioBox" overloaded="no">
      <autodoc>PreRadioBox() -&gt; RadioBox</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, 
    int majorDimension=0, 
    long style=RA_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=RadioBoxNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="choices" type="r.q(const).wxArrayString" default="wxPyEmptyStringArray"/>
        <param name="majorDimension" type="int" default="0"/>
        <param name="style" type="long" default="wxRA_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyRadioBoxNameStr"/>
      </paramlist>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; int</autodoc>
    </method>
    <method name="GetStringSelection" overloaded="no">
      <autodoc>GetStringSelection() -&gt; String</autodoc>
    </method>
    <method name="SetStringSelection" overloaded="no">
      <autodoc>SetStringSelection(String s) -&gt; bool</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; int</autodoc>
    </method>
    <method name="FindString" overloaded="no">
      <autodoc>FindString(String s) -&gt; int</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetString" overloaded="no">
      <autodoc>GetString(int n) -&gt; String</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetString" overloaded="no">
      <autodoc>SetString(int n, String label)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <pythoncode> GetItemLabel = GetString </pythoncode>
    <pythoncode> SetItemLabel = SetString </pythoncode>
    <method name="EnableItem" overloaded="no">
      <autodoc>EnableItem(int n, bool enable=True)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="ShowItem" overloaded="no">
      <autodoc>ShowItem(int n, bool show=True)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="show" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetColumnCount" overloaded="no">
      <autodoc>GetColumnCount() -&gt; int</autodoc>
    </method>
    <method name="GetRowCount" overloaded="no">
      <autodoc>GetRowCount() -&gt; int</autodoc>
    </method>
    <method name="GetNextItem" overloaded="no">
      <autodoc>GetNextItem(int item, int dir, long style) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="int" default=""/>
        <param name="dir" type="wxDirection" default=""/>
        <param name="style" type="long" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="RadioButton" oldname="wxRadioButton" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="RadioButton" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=RadioButtonNameStr) -&gt; RadioButton</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyRadioButtonNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreRadioButton" overloaded="no">
      <autodoc>PreRadioButton() -&gt; RadioButton</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=RadioButtonNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyRadioButtonNameStr"/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; bool</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(bool value)</autodoc>
      <paramlist>
        <param name="value" type="bool" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Slider" oldname="wxSlider" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="Slider" overloaded="no">
      <autodoc>__init__(Window parent, int id, int value, int minValue, int maxValue, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SL_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=SliderNameStr) -&gt; Slider</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="value" type="int" default=""/>
        <param name="minValue" type="int" default=""/>
        <param name="maxValue" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSL_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPySliderNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreSlider" overloaded="no">
      <autodoc>PreSlider() -&gt; Slider</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, int value, int minValue, int maxValue, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SL_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=SliderNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="value" type="int" default=""/>
        <param name="minValue" type="int" default=""/>
        <param name="maxValue" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSL_HORIZONTAL"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPySliderNameStr"/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; int</autodoc>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(int value)</autodoc>
      <paramlist>
        <param name="value" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRange" overloaded="no">
      <autodoc>SetRange(int minValue, int maxValue)</autodoc>
      <paramlist>
        <param name="minValue" type="int" default=""/>
        <param name="maxValue" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMin" overloaded="no">
      <autodoc>GetMin() -&gt; int</autodoc>
    </method>
    <method name="GetMax" overloaded="no">
      <autodoc>GetMax() -&gt; int</autodoc>
    </method>
    <method name="SetMin" overloaded="no">
      <autodoc>SetMin(int minValue)</autodoc>
      <paramlist>
        <param name="minValue" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMax" overloaded="no">
      <autodoc>SetMax(int maxValue)</autodoc>
      <paramlist>
        <param name="maxValue" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLineSize" overloaded="no">
      <autodoc>SetLineSize(int lineSize)</autodoc>
      <paramlist>
        <param name="lineSize" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPageSize" overloaded="no">
      <autodoc>SetPageSize(int pageSize)</autodoc>
      <paramlist>
        <param name="pageSize" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineSize" overloaded="no">
      <autodoc>GetLineSize() -&gt; int</autodoc>
    </method>
    <method name="GetPageSize" overloaded="no">
      <autodoc>GetPageSize() -&gt; int</autodoc>
    </method>
    <method name="SetThumbLength" overloaded="no">
      <autodoc>SetThumbLength(int lenPixels)</autodoc>
      <paramlist>
        <param name="lenPixels" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetThumbLength" overloaded="no">
      <autodoc>GetThumbLength() -&gt; int</autodoc>
    </method>
    <method name="SetTickFreq" overloaded="no">
      <autodoc>SetTickFreq(int n, int pos=1)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
        <param name="pos" type="int" default="1"/>
      </paramlist>
    </method>
    <method name="GetTickFreq" overloaded="no">
      <autodoc>GetTickFreq() -&gt; int</autodoc>
    </method>
    <method name="ClearTicks" overloaded="no">
      <autodoc>ClearTicks()</autodoc>
    </method>
    <method name="SetTick" overloaded="no">
      <autodoc>SetTick(int tickPos)</autodoc>
      <paramlist>
        <param name="tickPos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ClearSel" overloaded="no">
      <autodoc>ClearSel()</autodoc>
    </method>
    <method name="GetSelEnd" overloaded="no">
      <autodoc>GetSelEnd() -&gt; int</autodoc>
    </method>
    <method name="GetSelStart" overloaded="no">
      <autodoc>GetSelStart() -&gt; int</autodoc>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int min, int max)</autodoc>
      <paramlist>
        <param name="min" type="int" default=""/>
        <param name="max" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
    EVT_TOGGLEBUTTON = wx.PyEventBinder( wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, 1)
</pythoncode>
  <class name="ToggleButton" oldname="wxToggleButton" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="ToggleButton" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ToggleButtonNameStr) -&gt; ToggleButton</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyToggleButtonNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreToggleButton" overloaded="no">
      <autodoc>PreToggleButton() -&gt; ToggleButton</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ToggleButtonNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyToggleButtonNameStr"/>
      </paramlist>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(bool value)</autodoc>
      <paramlist>
        <param name="value" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; bool</autodoc>
    </method>
    <method name="SetLabel" overloaded="no">
      <autodoc>SetLabel(String label)</autodoc>
      <paramlist>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="BookCtrl" oldname="wxBookCtrl" module="controls">
    <baseclass name="wxControl"/>
    <method name="GetPageCount" overloaded="no">
      <autodoc>GetPageCount() -&gt; size_t</autodoc>
    </method>
    <method name="GetPage" overloaded="no">
      <autodoc>GetPage(size_t n) -&gt; Window</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; int</autodoc>
    </method>
    <method name="SetPageText" overloaded="no">
      <autodoc>SetPageText(size_t n, String strText) -&gt; bool</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
        <param name="strText" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetPageText" overloaded="no">
      <autodoc>GetPageText(size_t n) -&gt; String</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetImageList" overloaded="no">
      <autodoc>SetImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="AssignImageList" overloaded="no">
      <autodoc>AssignImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="GetImageList" overloaded="no">
      <autodoc>GetImageList() -&gt; ImageList</autodoc>
    </method>
    <method name="GetPageImage" overloaded="no">
      <autodoc>GetPageImage(size_t n) -&gt; int</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetPageImage" overloaded="no">
      <autodoc>SetPageImage(size_t n, int imageId) -&gt; bool</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
        <param name="imageId" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPageSize" overloaded="no">
      <autodoc>SetPageSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="CalcSizeFromPage" overloaded="no">
      <autodoc>CalcSizeFromPage(Size sizePage) -&gt; Size</autodoc>
      <paramlist>
        <param name="sizePage" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="DeletePage" overloaded="no">
      <autodoc>DeletePage(size_t n) -&gt; bool</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="RemovePage" overloaded="no">
      <autodoc>RemovePage(size_t n) -&gt; bool</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="DeleteAllPages" overloaded="no">
      <autodoc>DeleteAllPages() -&gt; bool</autodoc>
    </method>
    <method name="AddPage" overloaded="no">
      <autodoc>AddPage(Window page, String text, bool select=False, int imageId=-1) -&gt; bool</autodoc>
      <paramlist>
        <param name="page" type="p.wxWindow" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="select" type="bool" default="False"/>
        <param name="imageId" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="InsertPage" overloaded="no">
      <autodoc>InsertPage(size_t n, Window page, String text, bool select=False, 
    int imageId=-1) -&gt; bool</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
        <param name="page" type="p.wxWindow" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="select" type="bool" default="False"/>
        <param name="imageId" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(size_t n) -&gt; int</autodoc>
      <paramlist>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="AdvanceSelection" overloaded="no">
      <autodoc>AdvanceSelection(bool forward=True)</autodoc>
      <paramlist>
        <param name="forward" type="bool" default="True"/>
      </paramlist>
    </method>
  </class>
  <class name="BookCtrlEvent" oldname="wxBookCtrlEvent" module="controls">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="BookCtrlEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0, int nSel=-1, 
    int nOldSel=-1) -&gt; BookCtrlEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="0"/>
        <param name="nSel" type="int" default="-1"/>
        <param name="nOldSel" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; int</autodoc>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int nSel)</autodoc>
      <paramlist>
        <param name="nSel" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetOldSelection" overloaded="no">
      <autodoc>GetOldSelection() -&gt; int</autodoc>
    </method>
    <method name="SetOldSelection" overloaded="no">
      <autodoc>SetOldSelection(int nOldSel)</autodoc>
      <paramlist>
        <param name="nOldSel" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Notebook" oldname="wxNotebook" module="controls">
    <baseclass name="wxBookCtrl"/>
    <constructor name="Notebook" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=NOTEBOOK_NAME) -&gt; Notebook</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyNOTEBOOK_NAME"/>
      </paramlist>
    </constructor>
    <constructor name="PreNotebook" overloaded="no">
      <autodoc>PreNotebook() -&gt; Notebook</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=NOTEBOOK_NAME) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyNOTEBOOK_NAME"/>
      </paramlist>
    </method>
    <method name="GetRowCount" overloaded="no">
      <autodoc>GetRowCount() -&gt; int</autodoc>
    </method>
    <method name="SetPadding" overloaded="no">
      <autodoc>SetPadding(Size padding)</autodoc>
      <paramlist>
        <param name="padding" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetTabSize" overloaded="no">
      <autodoc>SetTabSize(Size sz)</autodoc>
      <paramlist>
        <param name="sz" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point pt) -&gt; (tab, where)</autodoc>
      <docstring>Returns the tab which is hit, and flags indicating where using wx.NB_HITTEST_ flags.</docstring>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
      </paramlist>
    </method>
    <method name="CalcSizeFromPage" overloaded="no">
      <autodoc>CalcSizeFromPage(Size sizePage) -&gt; Size</autodoc>
      <paramlist>
        <param name="sizePage" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="NotebookEvent" oldname="wxNotebookEvent" module="controls">
    <baseclass name="wxBookCtrlEvent"/>
    <constructor name="NotebookEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0, int nSel=-1, 
    int nOldSel=-1) -&gt; NotebookEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="0"/>
        <param name="nSel" type="int" default="-1"/>
        <param name="nOldSel" type="int" default="-1"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
    # wxNotebook events
    EVT_NOTEBOOK_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, 1 )
    EVT_NOTEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, 1 )
</pythoncode>
  <pythoncode>
#----------------------------------------------------------------------------

class NotebookPage(wx.Panel):
    """
    There is an old (and apparently unsolvable) bug when placing a
    window with a nonstandard background colour in a wxNotebook on
    wxGTK, as the notbooks's background colour would always be used
    when the window is refreshed.  The solution is to place a panel in
    the notbook and the coloured window on the panel, sized to cover
    the panel.  This simple class does that for you, just put an
    instance of this in the notebook and make your regular window a
    child of this one and it will handle the resize for you.
    """
    def __init__(self, parent, id=-1,
                 pos=wx.DefaultPosition, size=wx.DefaultSize,
                 style=wx.TAB_TRAVERSAL, name="panel"):
        wx.Panel.__init__(self, parent, id, pos, size, style, name)
        self.child = None
        EVT_SIZE(self, self.OnSize)
        
    def OnSize(self, evt):
        if self.child is None:
            children = self.GetChildren()
            if len(children):
                self.child = children[0]
        if self.child:
            self.child.SetPosition((0,0))
            self.child.SetSize(self.GetSize())

</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Listbook" oldname="wxListbook" module="controls">
    <baseclass name="wxBookCtrl"/>
    <constructor name="Listbook" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=EmptyString) -&gt; Listbook</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <constructor name="PreListbook" overloaded="no">
      <autodoc>PreListbook() -&gt; Listbook</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="IsVertical" overloaded="no">
      <autodoc>IsVertical() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="ListbookEvent" oldname="wxListbookEvent" module="controls">
    <baseclass name="wxBookCtrlEvent"/>
    <constructor name="ListbookEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0, int nSel=-1, 
    int nOldSel=-1) -&gt; ListbookEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="0"/>
        <param name="nSel" type="int" default="-1"/>
        <param name="nOldSel" type="int" default="-1"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
    EVT_LISTBOOK_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, 1 )
    EVT_LISTBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING, 1 )
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="BookCtrlSizer" oldname="wxBookCtrlSizer" module="controls">
    <baseclass name="wxSizer"/>
    <constructor name="BookCtrlSizer" overloaded="no">
      <autodoc>__init__(BookCtrl nb) -&gt; BookCtrlSizer</autodoc>
      <paramlist>
        <param name="nb" type="p.wxBookCtrl" default=""/>
      </paramlist>
    </constructor>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
    <method name="GetControl" overloaded="no">
      <autodoc>GetControl() -&gt; BookCtrl</autodoc>
    </method>
  </class>
  <class name="NotebookSizer" oldname="wxNotebookSizer" module="controls">
    <baseclass name="wxSizer"/>
    <constructor name="NotebookSizer" overloaded="no">
      <autodoc>__init__(Notebook nb) -&gt; NotebookSizer</autodoc>
      <paramlist>
        <param name="nb" type="p.wxNotebook" default=""/>
      </paramlist>
    </constructor>
    <method name="RecalcSizes" overloaded="no">
      <autodoc>RecalcSizes()</autodoc>
    </method>
    <method name="CalcMin" overloaded="no">
      <autodoc>CalcMin() -&gt; Size</autodoc>
    </method>
    <method name="GetNotebook" overloaded="no">
      <autodoc>GetNotebook() -&gt; Notebook</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ToolBarToolBase" oldname="wxToolBarToolBase" module="controls">
    <baseclass name="wxObject"/>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; int</autodoc>
    </method>
    <method name="GetControl" overloaded="no">
      <autodoc>GetControl() -&gt; Control</autodoc>
    </method>
    <method name="GetToolBar" overloaded="no">
      <autodoc>GetToolBar() -&gt; ToolBarBase</autodoc>
    </method>
    <method name="IsButton" overloaded="no">
      <autodoc>IsButton() -&gt; int</autodoc>
    </method>
    <method name="IsControl" overloaded="no">
      <autodoc>IsControl() -&gt; int</autodoc>
    </method>
    <method name="IsSeparator" overloaded="no">
      <autodoc>IsSeparator() -&gt; int</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; int</autodoc>
    </method>
    <method name="GetKind" overloaded="no">
      <autodoc>GetKind() -&gt; int</autodoc>
    </method>
    <method name="IsEnabled" overloaded="no">
      <autodoc>IsEnabled() -&gt; bool</autodoc>
    </method>
    <method name="IsToggled" overloaded="no">
      <autodoc>IsToggled() -&gt; bool</autodoc>
    </method>
    <method name="CanBeToggled" overloaded="no">
      <autodoc>CanBeToggled() -&gt; bool</autodoc>
    </method>
    <method name="GetNormalBitmap" overloaded="no">
      <autodoc>GetNormalBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="GetDisabledBitmap" overloaded="no">
      <autodoc>GetDisabledBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel() -&gt; String</autodoc>
    </method>
    <method name="GetShortHelp" overloaded="no">
      <autodoc>GetShortHelp() -&gt; String</autodoc>
    </method>
    <method name="GetLongHelp" overloaded="no">
      <autodoc>GetLongHelp() -&gt; String</autodoc>
    </method>
    <method name="Enable" overloaded="no">
      <autodoc>Enable(bool enable) -&gt; bool</autodoc>
      <paramlist>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Toggle" overloaded="no">
      <autodoc>Toggle()</autodoc>
    </method>
    <method name="SetToggle" overloaded="no">
      <autodoc>SetToggle(bool toggle) -&gt; bool</autodoc>
      <paramlist>
        <param name="toggle" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetShortHelp" overloaded="no">
      <autodoc>SetShortHelp(String help) -&gt; bool</autodoc>
      <paramlist>
        <param name="help" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetLongHelp" overloaded="no">
      <autodoc>SetLongHelp(String help) -&gt; bool</autodoc>
      <paramlist>
        <param name="help" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetNormalBitmap" overloaded="no">
      <autodoc>SetNormalBitmap(Bitmap bmp)</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetDisabledBitmap" overloaded="no">
      <autodoc>SetDisabledBitmap(Bitmap bmp)</autodoc>
      <paramlist>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetLabel" overloaded="no">
      <autodoc>SetLabel(String label)</autodoc>
      <paramlist>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Detach" overloaded="no">
      <autodoc>Detach()</autodoc>
    </method>
    <method name="Attach" overloaded="no">
      <autodoc>Attach(ToolBarBase tbar)</autodoc>
      <paramlist>
        <param name="tbar" type="p.wxToolBarBase" default=""/>
      </paramlist>
    </method>
    <method name="GetClientData" overloaded="no">
      <autodoc>GetClientData() -&gt; PyObject</autodoc>
    </method>
    <method name="SetClientData" overloaded="no">
      <autodoc>SetClientData(PyObject clientData)</autodoc>
      <paramlist>
        <param name="clientData" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    GetBitmap1 = GetNormalBitmap
    GetBitmap2 = GetDisabledBitmap
    SetBitmap1 = SetNormalBitmap
    SetBitmap2 = SetDisabledBitmap
    </pythoncode>
  </class>
  <class name="ToolBarBase" oldname="wxToolBarBase" module="controls">
    <baseclass name="wxControl"/>
    <method name="DoAddTool" overloaded="no">
      <autodoc>DoAddTool(int id, String label, Bitmap bitmap, Bitmap bmpDisabled=wxNullBitmap, 
    int kind=ITEM_NORMAL, String shortHelp=EmptyString, 
    String longHelp=EmptyString, 
    PyObject clientData=None) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="bmpDisabled" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
        <param name="shortHelp" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="longHelp" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="clientData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="DoInsertTool" overloaded="no">
      <autodoc>DoInsertTool(size_t pos, int id, String label, Bitmap bitmap, Bitmap bmpDisabled=wxNullBitmap, 
    int kind=ITEM_NORMAL, 
    String shortHelp=EmptyString, String longHelp=EmptyString, 
    PyObject clientData=None) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
        <param name="bmpDisabled" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
        <param name="shortHelp" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="longHelp" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="clientData" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <pythoncode>
    # These match the original Add methods for this class, kept for
    # backwards compatibility with versions &lt; 2.3.3.


    def AddTool(self, id, bitmap,
                pushedBitmap = wx.NullBitmap,
                isToggle = 0,
                clientData = None,
                shortHelpString = '',
                longHelpString = '') :
        '''Old style method to add a tool to the toolbar.'''
        kind = wx.ITEM_NORMAL
        if isToggle: kind = wx.ITEM_CHECK
        return self.DoAddTool(id, '', bitmap, pushedBitmap, kind,
                              shortHelpString, longHelpString, clientData)

    def AddSimpleTool(self, id, bitmap,
                      shortHelpString = '',
                      longHelpString = '',
                      isToggle = 0):
        '''Old style method to add a tool to the toolbar.'''
        kind = wx.ITEM_NORMAL
        if isToggle: kind = wx.ITEM_CHECK
        return self.DoAddTool(id, '', bitmap, wx.NullBitmap, kind,
                              shortHelpString, longHelpString, None)

    def InsertTool(self, pos, id, bitmap,
                   pushedBitmap = wx.NullBitmap,
                   isToggle = 0,
                   clientData = None,
                   shortHelpString = '',
                   longHelpString = ''):
        '''Old style method to insert a tool in the toolbar.'''
        kind = wx.ITEM_NORMAL
        if isToggle: kind = wx.ITEM_CHECK
        return self.DoInsertTool(pos, id, '', bitmap, pushedBitmap, kind,
                                 shortHelpString, longHelpString, clientData)

    def InsertSimpleTool(self, pos, id, bitmap,
                         shortHelpString = '',
                         longHelpString = '',
                         isToggle = 0):
        '''Old style method to insert a tool in the toolbar.'''
        kind = wx.ITEM_NORMAL
        if isToggle: kind = wx.ITEM_CHECK
        return self.DoInsertTool(pos, id, '', bitmap, wx.NullBitmap, kind,
                                 shortHelpString, longHelpString, None)


    # The following are the new toolbar Add methods starting with
    # 2.3.3.  They are renamed to have 'Label' in the name so as to be
    # able to keep backwards compatibility with using the above
    # methods.  Eventually these should migrate to be the methods used
    # primarily and lose the 'Label' in the name...

    def AddLabelTool(self, id, label, bitmap,
                     bmpDisabled = wx.NullBitmap,
                     kind = wx.ITEM_NORMAL,
                     shortHelp = '', longHelp = '',
                     clientData = None):
        '''
        The full AddTool() function.

        If bmpDisabled is wx.NullBitmap, a shadowed version of the normal bitmap
        is created and used as the disabled image.
        '''
        return self.DoAddTool(id, label, bitmap, bmpDisabled, kind,
                              shortHelp, longHelp, clientData)


    def InsertLabelTool(self, pos, id, label, bitmap,
                        bmpDisabled = wx.NullBitmap,
                        kind = wx.ITEM_NORMAL,
                        shortHelp = '', longHelp = '',
                        clientData = None):
        '''
        Insert the new tool at the given position, if pos == GetToolsCount(), it
        is equivalent to AddTool()
        '''
        return self.DoInsertTool(pos, id, label, bitmap, bmpDisabled, kind,
                                 shortHelp, longHelp, clientData)

    def AddCheckLabelTool(self, id, label, bitmap,
                        bmpDisabled = wx.NullBitmap,
                        shortHelp = '', longHelp = '',
                        clientData = None):
        '''Add a check tool, i.e. a tool which can be toggled'''
        return self.DoAddTool(id, label, bitmap, bmpDisabled, wx.ITEM_CHECK,
                              shortHelp, longHelp, clientData)

    def AddRadioLabelTool(self, id, label, bitmap,
                          bmpDisabled = wx.NullBitmap,
                          shortHelp = '', longHelp = '',
                          clientData = None):
        '''
        Add a radio tool, i.e. a tool which can be toggled and releases any
        other toggled radio tools in the same group when it happens
        '''
        return self.DoAddTool(id, label, bitmap, bmpDisabled, wx.ITEM_RADIO,
                              shortHelp, longHelp, clientData)


    # For consistency with the backwards compatible methods above, here are
    # some non-'Label' versions of the Check and Radio methods
    def AddCheckTool(self, id, bitmap,
                     bmpDisabled = wx.NullBitmap,
                     shortHelp = '', longHelp = '',
                     clientData = None):
        '''Add a check tool, i.e. a tool which can be toggled'''
        return self.DoAddTool(id, '', bitmap, bmpDisabled, wx.ITEM_CHECK,
                              shortHelp, longHelp, clientData)

    def AddRadioTool(self, id, bitmap,
                     bmpDisabled = wx.NullBitmap,
                     shortHelp = '', longHelp = '',
                     clientData = None):
        '''
        Add a radio tool, i.e. a tool which can be toggled and releases any
        other toggled radio tools in the same group when it happens
        '''
        return self.DoAddTool(id, '', bitmap, bmpDisabled, wx.ITEM_RADIO,
                              shortHelp, longHelp, clientData)
    </pythoncode>
    <method name="AddToolItem" overloaded="no">
      <autodoc>AddToolItem(ToolBarToolBase tool) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="tool" type="p.wxToolBarToolBase" default=""/>
      </paramlist>
    </method>
    <method name="InsertToolItem" overloaded="no">
      <autodoc>InsertToolItem(size_t pos, ToolBarToolBase tool) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="tool" type="p.wxToolBarToolBase" default=""/>
      </paramlist>
    </method>
    <method name="AddControl" overloaded="no">
      <autodoc>AddControl(Control control) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="control" type="p.wxControl" default=""/>
      </paramlist>
    </method>
    <method name="InsertControl" overloaded="no">
      <autodoc>InsertControl(size_t pos, Control control) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="control" type="p.wxControl" default=""/>
      </paramlist>
    </method>
    <method name="FindControl" overloaded="no">
      <autodoc>FindControl(int id) -&gt; Control</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AddSeparator" overloaded="no">
      <autodoc>AddSeparator() -&gt; ToolBarToolBase</autodoc>
    </method>
    <method name="InsertSeparator" overloaded="no">
      <autodoc>InsertSeparator(size_t pos) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="RemoveTool" overloaded="no">
      <autodoc>RemoveTool(int id) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeleteToolByPos" overloaded="no">
      <autodoc>DeleteToolByPos(size_t pos) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="DeleteTool" overloaded="no">
      <autodoc>DeleteTool(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ClearTools" overloaded="no">
      <autodoc>ClearTools()</autodoc>
    </method>
    <method name="Realize" overloaded="no">
      <autodoc>Realize() -&gt; bool</autodoc>
    </method>
    <method name="EnableTool" overloaded="no">
      <autodoc>EnableTool(int id, bool enable)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="ToggleTool" overloaded="no">
      <autodoc>ToggleTool(int id, bool toggle)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="toggle" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetToggle" overloaded="no">
      <autodoc>SetToggle(int id, bool toggle)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="toggle" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetToolClientData" overloaded="no">
      <autodoc>GetToolClientData(int id) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetToolClientData" overloaded="no">
      <autodoc>SetToolClientData(int id, PyObject clientData)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="clientData" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetToolPos" overloaded="no">
      <autodoc>GetToolPos(int id) -&gt; int</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetToolState" overloaded="no">
      <autodoc>GetToolState(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetToolEnabled" overloaded="no">
      <autodoc>GetToolEnabled(int id) -&gt; bool</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetToolShortHelp" overloaded="no">
      <autodoc>SetToolShortHelp(int id, String helpString)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="helpString" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetToolShortHelp" overloaded="no">
      <autodoc>GetToolShortHelp(int id) -&gt; String</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetToolLongHelp" overloaded="no">
      <autodoc>SetToolLongHelp(int id, String helpString)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="helpString" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetToolLongHelp" overloaded="no">
      <autodoc>GetToolLongHelp(int id) -&gt; String</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginsXY" overloaded="no">
      <autodoc>SetMarginsXY(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMargins" overloaded="no">
      <autodoc>SetMargins(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="SetToolPacking" overloaded="no">
      <autodoc>SetToolPacking(int packing)</autodoc>
      <paramlist>
        <param name="packing" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetToolSeparation" overloaded="no">
      <autodoc>SetToolSeparation(int separation)</autodoc>
      <paramlist>
        <param name="separation" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetToolMargins" overloaded="no">
      <autodoc>GetToolMargins() -&gt; Size</autodoc>
    </method>
    <method name="GetMargins" overloaded="no">
      <autodoc>GetMargins() -&gt; Size</autodoc>
    </method>
    <method name="GetToolPacking" overloaded="no">
      <autodoc>GetToolPacking() -&gt; int</autodoc>
    </method>
    <method name="GetToolSeparation" overloaded="no">
      <autodoc>GetToolSeparation() -&gt; int</autodoc>
    </method>
    <method name="SetRows" overloaded="no">
      <autodoc>SetRows(int nRows)</autodoc>
      <paramlist>
        <param name="nRows" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMaxRowsCols" overloaded="no">
      <autodoc>SetMaxRowsCols(int rows, int cols)</autodoc>
      <paramlist>
        <param name="rows" type="int" default=""/>
        <param name="cols" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMaxRows" overloaded="no">
      <autodoc>GetMaxRows() -&gt; int</autodoc>
    </method>
    <method name="GetMaxCols" overloaded="no">
      <autodoc>GetMaxCols() -&gt; int</autodoc>
    </method>
    <method name="SetToolBitmapSize" overloaded="no">
      <autodoc>SetToolBitmapSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="GetToolBitmapSize" overloaded="no">
      <autodoc>GetToolBitmapSize() -&gt; Size</autodoc>
    </method>
    <method name="GetToolSize" overloaded="no">
      <autodoc>GetToolSize() -&gt; Size</autodoc>
    </method>
    <method name="FindToolForPosition" overloaded="no">
      <autodoc>FindToolForPosition(int x, int y) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="FindById" overloaded="no">
      <autodoc>FindById(int toolid) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="toolid" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsVertical" overloaded="no">
      <autodoc>IsVertical() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="ToolBar" oldname="wxToolBar" module="controls">
    <baseclass name="wxToolBarBase"/>
    <constructor name="ToolBar" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxNO_BORDER|wxTB_HORIZONTAL, 
    String name=wxPyToolBarNameStr) -&gt; ToolBar</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxNO_BORDER|wxTB_HORIZONTAL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyToolBarNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreToolBar" overloaded="no">
      <autodoc>PreToolBar() -&gt; ToolBar</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxNO_BORDER|wxTB_HORIZONTAL, 
    String name=wxPyToolBarNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxNO_BORDER|wxTB_HORIZONTAL"/>
        <param name="name" type="r.q(const).wxString" default="wxPyToolBarNameStr"/>
      </paramlist>
    </method>
    <method name="FindToolForPosition" overloaded="no">
      <autodoc>FindToolForPosition(int x, int y) -&gt; ToolBarToolBase</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ListItemAttr" oldname="wxListItemAttr" module="controls">
    <constructor name="ListItemAttr" overloaded="no">
      <autodoc>__init__(Colour colText=wxNullColour, Colour colBack=wxNullColour, 
    Font font=wxNullFont) -&gt; ListItemAttr</autodoc>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="colBack" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="font" type="r.q(const).wxFont" default="wxNullFont"/>
      </paramlist>
    </constructor>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(Colour colText)</autodoc>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
      <paramlist>
        <param name="colBack" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="HasTextColour" overloaded="no">
      <autodoc>HasTextColour() -&gt; bool</autodoc>
    </method>
    <method name="HasBackgroundColour" overloaded="no">
      <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
    </method>
    <method name="HasFont" overloaded="no">
      <autodoc>HasFont() -&gt; bool</autodoc>
    </method>
    <method name="GetTextColour" overloaded="no">
      <autodoc>GetTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetBackgroundColour" overloaded="no">
      <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ListItem" oldname="wxListItem" module="controls">
    <baseclass name="wxObject"/>
    <constructor name="ListItem" overloaded="no">
      <autodoc>__init__() -&gt; ListItem</autodoc>
    </constructor>
    <destructor name="~wxListItem">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="ClearAttributes" overloaded="no">
      <autodoc>ClearAttributes()</autodoc>
    </method>
    <method name="SetMask" overloaded="no">
      <autodoc>SetMask(long mask)</autodoc>
      <paramlist>
        <param name="mask" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(long id)</autodoc>
      <paramlist>
        <param name="id" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetColumn" overloaded="no">
      <autodoc>SetColumn(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetState" overloaded="no">
      <autodoc>SetState(long state)</autodoc>
      <paramlist>
        <param name="state" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetStateMask" overloaded="no">
      <autodoc>SetStateMask(long stateMask)</autodoc>
      <paramlist>
        <param name="stateMask" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetImage" overloaded="no">
      <autodoc>SetImage(int image)</autodoc>
      <paramlist>
        <param name="image" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(long data)</autodoc>
      <paramlist>
        <param name="data" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAlign" overloaded="no">
      <autodoc>SetAlign(int align)</autodoc>
      <paramlist>
        <param name="align" type="wxListColumnFormat" default=""/>
      </paramlist>
    </method>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(Colour colText)</autodoc>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
      <paramlist>
        <param name="colBack" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="GetMask" overloaded="no">
      <autodoc>GetMask() -&gt; long</autodoc>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; long</autodoc>
    </method>
    <method name="GetColumn" overloaded="no">
      <autodoc>GetColumn() -&gt; int</autodoc>
    </method>
    <method name="GetState" overloaded="no">
      <autodoc>GetState() -&gt; long</autodoc>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="GetImage" overloaded="no">
      <autodoc>GetImage() -&gt; int</autodoc>
    </method>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; long</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="GetAlign" overloaded="no">
      <autodoc>GetAlign() -&gt; int</autodoc>
    </method>
    <method name="GetAttributes" overloaded="no">
      <autodoc>GetAttributes() -&gt; ListItemAttr</autodoc>
    </method>
    <method name="HasAttributes" overloaded="no">
      <autodoc>HasAttributes() -&gt; bool</autodoc>
    </method>
    <method name="GetTextColour" overloaded="no">
      <autodoc>GetTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetBackgroundColour" overloaded="no">
      <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <property name="m_mask" type="long" readonly="no"/>
    <property name="m_itemId" type="long" readonly="no"/>
    <property name="m_col" type="int" readonly="no"/>
    <property name="m_state" type="long" readonly="no"/>
    <property name="m_stateMask" type="long" readonly="no"/>
    <property name="m_text" type="wxString" readonly="no"/>
    <property name="m_image" type="int" readonly="no"/>
    <property name="m_data" type="long" readonly="no"/>
    <property name="m_format" type="int" readonly="no"/>
    <property name="m_width" type="int" readonly="no"/>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ListEvent" oldname="wxListEvent" module="controls">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="ListEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; ListEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <property name="m_code" type="int" readonly="no"/>
    <property name="m_oldItemIndex" type="long" readonly="no"/>
    <property name="m_itemIndex" type="long" readonly="no"/>
    <property name="m_col" type="int" readonly="no"/>
    <property name="m_pointDrag" type="wxPoint" readonly="no"/>
    <property name="m_item" type="wxListItem" readonly="yes"/>
    <method name="GetKeyCode" overloaded="no">
      <autodoc>GetKeyCode() -&gt; int</autodoc>
    </method>
    <pythoncode> GetCode = GetKeyCode </pythoncode>
    <method name="GetIndex" overloaded="no">
      <autodoc>GetIndex() -&gt; long</autodoc>
    </method>
    <method name="GetColumn" overloaded="no">
      <autodoc>GetColumn() -&gt; int</autodoc>
    </method>
    <method name="GetPoint" overloaded="no">
      <autodoc>GetPoint() -&gt; Point</autodoc>
    </method>
    <pythoncode> GetPosition = GetPoint </pythoncode>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel() -&gt; String</autodoc>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="GetImage" overloaded="no">
      <autodoc>GetImage() -&gt; int</autodoc>
    </method>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; long</autodoc>
    </method>
    <method name="GetMask" overloaded="no">
      <autodoc>GetMask() -&gt; long</autodoc>
    </method>
    <method name="GetItem" overloaded="no">
      <autodoc>GetItem() -&gt; ListItem</autodoc>
    </method>
    <method name="GetCacheFrom" overloaded="no">
      <autodoc>GetCacheFrom() -&gt; long</autodoc>
    </method>
    <method name="GetCacheTo" overloaded="no">
      <autodoc>GetCacheTo() -&gt; long</autodoc>
    </method>
    <method name="IsEditCancelled" overloaded="no">
      <autodoc>IsEditCancelled() -&gt; bool</autodoc>
    </method>
    <method name="SetEditCanceled" overloaded="no">
      <autodoc>SetEditCanceled(bool editCancelled)</autodoc>
      <paramlist>
        <param name="editCancelled" type="bool" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>

EVT_LIST_BEGIN_DRAG        = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_DRAG       , 1)
EVT_LIST_BEGIN_RDRAG       = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_RDRAG      , 1)
EVT_LIST_BEGIN_LABEL_EDIT  = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT , 1)
EVT_LIST_END_LABEL_EDIT    = wx.PyEventBinder(wxEVT_COMMAND_LIST_END_LABEL_EDIT   , 1)
EVT_LIST_DELETE_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_LIST_DELETE_ITEM      , 1)
EVT_LIST_DELETE_ALL_ITEMS  = wx.PyEventBinder(wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS , 1)
EVT_LIST_GET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_LIST_GET_INFO         , 1)
EVT_LIST_SET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_LIST_SET_INFO         , 1)
EVT_LIST_ITEM_SELECTED     = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_SELECTED    , 1)
EVT_LIST_ITEM_DESELECTED   = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_DESELECTED  , 1)
EVT_LIST_KEY_DOWN          = wx.PyEventBinder(wxEVT_COMMAND_LIST_KEY_DOWN         , 1)
EVT_LIST_INSERT_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_LIST_INSERT_ITEM      , 1)
EVT_LIST_COL_CLICK         = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_CLICK        , 1)
EVT_LIST_ITEM_RIGHT_CLICK  = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK , 1)
EVT_LIST_ITEM_MIDDLE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK, 1)
EVT_LIST_ITEM_ACTIVATED    = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_ACTIVATED   , 1)
EVT_LIST_CACHE_HINT        = wx.PyEventBinder(wxEVT_COMMAND_LIST_CACHE_HINT       , 1)
EVT_LIST_COL_RIGHT_CLICK   = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_RIGHT_CLICK  , 1)
EVT_LIST_COL_BEGIN_DRAG    = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_BEGIN_DRAG   , 1)
EVT_LIST_COL_DRAGGING      = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_DRAGGING     , 1)
EVT_LIST_COL_END_DRAG      = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_END_DRAG     , 1)
EVT_LIST_ITEM_FOCUSED      = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_FOCUSED     , 1)
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ListCtrl" oldname="wxPyListCtrl" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="wxPyListCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_ICON, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; ListCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLC_ICON"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListCtrlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreListCtrl" overloaded="no">
      <autodoc>PreListCtrl() -&gt; ListCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_ICON, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLC_ICON"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListCtrlNameStr"/>
      </paramlist>
    </method>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetForegroundColour" overloaded="no">
      <autodoc>SetForegroundColour(Colour col) -&gt; bool</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour col) -&gt; bool</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetColumn" overloaded="no">
      <autodoc>GetColumn(int col) -&gt; ListItem</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColumn" overloaded="no">
      <autodoc>SetColumn(int col, ListItem item) -&gt; bool</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="item" type="r.wxListItem" default=""/>
      </paramlist>
    </method>
    <method name="GetColumnWidth" overloaded="no">
      <autodoc>GetColumnWidth(int col) -&gt; int</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColumnWidth" overloaded="no">
      <autodoc>SetColumnWidth(int col, int width) -&gt; bool</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCountPerPage" overloaded="no">
      <autodoc>GetCountPerPage() -&gt; int</autodoc>
    </method>
    <method name="GetViewRect" overloaded="no">
      <autodoc>GetViewRect() -&gt; Rect</autodoc>
    </method>
    <method name="GetItem" overloaded="no">
      <autodoc>GetItem(long itemId, int col=0) -&gt; ListItem</autodoc>
      <paramlist>
        <param name="itemId" type="long" default=""/>
        <param name="col" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetItem" overloaded="no">
      <autodoc>SetItem(ListItem info) -&gt; bool</autodoc>
      <paramlist>
        <param name="info" type="r.wxListItem" default=""/>
      </paramlist>
    </method>
    <method name="SetStringItem" overloaded="no">
      <autodoc>SetStringItem(long index, int col, String label, int imageId=-1) -&gt; long</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
        <param name="col" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="imageId" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="GetItemState" overloaded="no">
      <autodoc>GetItemState(long item, long stateMask) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="stateMask" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetItemState" overloaded="no">
      <autodoc>SetItemState(long item, long state, long stateMask) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="state" type="long" default=""/>
        <param name="stateMask" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetItemImage" overloaded="no">
      <autodoc>SetItemImage(long item, int image, int selImage) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="image" type="int" default=""/>
        <param name="selImage" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetItemText" overloaded="no">
      <autodoc>GetItemText(long item) -&gt; String</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetItemText" overloaded="no">
      <autodoc>SetItemText(long item, String str)</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetItemData" overloaded="no">
      <autodoc>GetItemData(long item) -&gt; long</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetItemData" overloaded="no">
      <autodoc>SetItemData(long item, long data) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="data" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetItemPosition" overloaded="no">
      <autodoc>GetItemPosition(long item) -&gt; Point</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetItemRect" overloaded="no">
      <autodoc>GetItemRect(long item, int code=LIST_RECT_BOUNDS) -&gt; Rect</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="code" type="int" default="wxLIST_RECT_BOUNDS"/>
      </paramlist>
    </method>
    <method name="SetItemPosition" overloaded="no">
      <autodoc>SetItemPosition(long item, Point pos) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetItemCount" overloaded="no">
      <autodoc>GetItemCount() -&gt; int</autodoc>
    </method>
    <method name="GetColumnCount" overloaded="no">
      <autodoc>GetColumnCount() -&gt; int</autodoc>
    </method>
    <method name="GetItemSpacing" overloaded="no">
      <autodoc>GetItemSpacing() -&gt; Size</autodoc>
    </method>
    <method name="SetItemSpacing" overloaded="no">
      <autodoc>SetItemSpacing(int spacing, bool isSmall=False)</autodoc>
      <paramlist>
        <param name="spacing" type="int" default=""/>
        <param name="isSmall" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="GetSelectedItemCount" overloaded="no">
      <autodoc>GetSelectedItemCount() -&gt; int</autodoc>
    </method>
    <method name="GetTextColour" overloaded="no">
      <autodoc>GetTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(Colour col)</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetTopItem" overloaded="no">
      <autodoc>GetTopItem() -&gt; long</autodoc>
    </method>
    <method name="SetSingleStyle" overloaded="no">
      <autodoc>SetSingleStyle(long style, bool add=True)</autodoc>
      <paramlist>
        <param name="style" type="long" default=""/>
        <param name="add" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetWindowStyleFlag" overloaded="no">
      <autodoc>SetWindowStyleFlag(long style)</autodoc>
      <paramlist>
        <param name="style" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetNextItem" overloaded="no">
      <autodoc>GetNextItem(long item, int geometry=LIST_NEXT_ALL, int state=LIST_STATE_DONTCARE) -&gt; long</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="geometry" type="int" default="wxLIST_NEXT_ALL"/>
        <param name="state" type="int" default="wxLIST_STATE_DONTCARE"/>
      </paramlist>
    </method>
    <method name="GetImageList" overloaded="no">
      <autodoc>GetImageList(int which) -&gt; ImageList</autodoc>
      <paramlist>
        <param name="which" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetImageList" overloaded="no">
      <autodoc>SetImageList(ImageList imageList, int which)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
        <param name="which" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AssignImageList" overloaded="no">
      <autodoc>AssignImageList(ImageList imageList, int which)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
        <param name="which" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsVirtual" overloaded="no">
      <autodoc>IsVirtual() -&gt; bool</autodoc>
    </method>
    <method name="RefreshItem" overloaded="no">
      <autodoc>RefreshItem(long item)</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="RefreshItems" overloaded="no">
      <autodoc>RefreshItems(long itemFrom, long itemTo)</autodoc>
      <paramlist>
        <param name="itemFrom" type="long" default=""/>
        <param name="itemTo" type="long" default=""/>
      </paramlist>
    </method>
    <method name="Arrange" overloaded="no">
      <autodoc>Arrange(int flag=LIST_ALIGN_DEFAULT) -&gt; bool</autodoc>
      <paramlist>
        <param name="flag" type="int" default="wxLIST_ALIGN_DEFAULT"/>
      </paramlist>
    </method>
    <method name="DeleteItem" overloaded="no">
      <autodoc>DeleteItem(long item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="DeleteAllItems" overloaded="no">
      <autodoc>DeleteAllItems() -&gt; bool</autodoc>
    </method>
    <method name="DeleteColumn" overloaded="no">
      <autodoc>DeleteColumn(int col) -&gt; bool</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeleteAllColumns" overloaded="no">
      <autodoc>DeleteAllColumns() -&gt; bool</autodoc>
    </method>
    <method name="ClearAll" overloaded="no">
      <autodoc>ClearAll()</autodoc>
    </method>
    <method name="EditLabel" overloaded="no">
      <autodoc>EditLabel(long item)</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="EnsureVisible" overloaded="no">
      <autodoc>EnsureVisible(long item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="FindItem" overloaded="no">
      <autodoc>FindItem(long start, String str, bool partial=False) -&gt; long</autodoc>
      <paramlist>
        <param name="start" type="long" default=""/>
        <param name="str" type="r.q(const).wxString" default=""/>
        <param name="partial" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="FindItemData" overloaded="no">
      <autodoc>FindItemData(long start, long data) -&gt; long</autodoc>
      <paramlist>
        <param name="start" type="long" default=""/>
        <param name="data" type="long" default=""/>
      </paramlist>
    </method>
    <method name="FindItemAtPos" overloaded="no">
      <autodoc>FindItemAtPos(long start, Point pt, int direction) -&gt; long</autodoc>
      <paramlist>
        <param name="start" type="long" default=""/>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
        <param name="direction" type="int" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point point) -&gt; (item, where)</autodoc>
      <docstring>Determines which item (if any) is at the specified point,
giving details in the second return value (see wxLIST_HITTEST_... flags.)</docstring>
      <paramlist>
        <param name="point" type="r.q(const).wxPoint" default=""/>
        <param name="OUTPUT" type="r.int" default=""/>
      </paramlist>
    </method>
    <method name="InsertItem" overloaded="no">
      <autodoc>InsertItem(ListItem info) -&gt; long</autodoc>
      <paramlist>
        <param name="info" type="r.wxListItem" default=""/>
      </paramlist>
    </method>
    <method name="InsertStringItem" overloaded="no">
      <autodoc>InsertStringItem(long index, String label) -&gt; long</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="InsertImageItem" overloaded="no">
      <autodoc>InsertImageItem(long index, int imageIndex) -&gt; long</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
        <param name="imageIndex" type="int" default=""/>
      </paramlist>
    </method>
    <method name="InsertImageStringItem" overloaded="no">
      <autodoc>InsertImageStringItem(long index, String label, int imageIndex) -&gt; long</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="imageIndex" type="int" default=""/>
      </paramlist>
    </method>
    <method name="InsertColumnInfo" overloaded="no">
      <autodoc>InsertColumnInfo(long col, ListItem info) -&gt; long</autodoc>
      <paramlist>
        <param name="col" type="long" default=""/>
        <param name="info" type="r.wxListItem" default=""/>
      </paramlist>
    </method>
    <method name="InsertColumn" overloaded="no">
      <autodoc>InsertColumn(long col, String heading, int format=LIST_FORMAT_LEFT, 
    int width=-1) -&gt; long</autodoc>
      <paramlist>
        <param name="col" type="long" default=""/>
        <param name="heading" type="r.q(const).wxString" default=""/>
        <param name="format" type="int" default="wxLIST_FORMAT_LEFT"/>
        <param name="width" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="SetItemCount" overloaded="no">
      <autodoc>SetItemCount(long count)</autodoc>
      <paramlist>
        <param name="count" type="long" default=""/>
      </paramlist>
    </method>
    <method name="ScrollList" overloaded="no">
      <autodoc>ScrollList(int dx, int dy) -&gt; bool</autodoc>
      <paramlist>
        <param name="dx" type="int" default=""/>
        <param name="dy" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetItemTextColour" overloaded="no">
      <autodoc>SetItemTextColour(long item, Colour col)</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetItemTextColour" overloaded="no">
      <autodoc>GetItemTextColour(long item) -&gt; Colour</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetItemBackgroundColour" overloaded="no">
      <autodoc>SetItemBackgroundColour(long item, Colour col)</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetItemBackgroundColour" overloaded="no">
      <autodoc>GetItemBackgroundColour(long item) -&gt; Colour</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    #
    # Some helpers...
    def Select(self, idx, on=1):
        '''[de]select an item'''
        if on: state = wx.LIST_STATE_SELECTED
        else: state = 0
        self.SetItemState(idx, state, wx.LIST_STATE_SELECTED)

    def Focus(self, idx):
        '''Focus and show the given item'''
        self.SetItemState(idx, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED)
        self.EnsureVisible(idx)

    def GetFocusedItem(self):
        '''get the currently focused item or -1 if none'''
        return self.GetNextItem(-1, wx.LIST_NEXT_ALL, wx.LIST_STATE_FOCUSED)

    def GetFirstSelected(self, *args):
        '''return first selected item, or -1 when none'''
        return self.GetNextSelected(-1)

    def GetNextSelected(self, item):
        '''return subsequent selected items, or -1 when no more'''
        return self.GetNextItem(item, wx.LIST_NEXT_ALL, wx.LIST_STATE_SELECTED)

    def IsSelected(self, idx):
        '''return True if the item is selected'''
        return self.GetItemState(idx, wx.LIST_STATE_SELECTED) != 0

    def SetColumnImage(self, col, image):
        item = self.GetColumn(col)
        # preserve all other attributes too
        item.SetMask( wx.LIST_MASK_STATE |
                      wx.LIST_MASK_TEXT  |
                      wx.LIST_MASK_IMAGE |
                      wx.LIST_MASK_DATA  |
                      wx.LIST_SET_ITEM   |
                      wx.LIST_MASK_WIDTH |
                      wx.LIST_MASK_FORMAT )
        item.SetImage(image)
        self.SetColumn(col, item)

    def ClearColumnImage(self, col):
        self.SetColumnImage(col, -1)

    def Append(self, entry):
        '''Append an item to the list control.  The entry parameter should be a
           sequence with an item for each column'''
        if len(entry):
            if wx.USE_UNICODE:
                cvtfunc = unicode
            else:
                cvtfunc = str
            pos = self.GetItemCount()
            self.InsertStringItem(pos, cvtfunc(entry[0]))
            for i in range(1, len(entry)):
                self.SetStringItem(pos, i, cvtfunc(entry[i]))
            return pos
    </pythoncode>
    <method name="SortItems" overloaded="no">
      <autodoc>SortItems(PyObject func) -&gt; bool</autodoc>
      <paramlist>
        <param name="func" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetMainWindow" overloaded="no">
      <autodoc>GetMainWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ListView" oldname="wxListView" module="controls">
    <baseclass name="wxPyListCtrl"/>
    <constructor name="ListView" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_REPORT, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; ListView</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLC_REPORT"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListCtrlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreListView" overloaded="no">
      <autodoc>PreListView() -&gt; ListView</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_REPORT, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLC_REPORT"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyListCtrlNameStr"/>
      </paramlist>
    </method>
    <method name="Select" overloaded="no">
      <autodoc>Select(long n, bool on=True)</autodoc>
      <paramlist>
        <param name="n" type="long" default=""/>
        <param name="on" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Focus" overloaded="no">
      <autodoc>Focus(long index)</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetFocusedItem" overloaded="no">
      <autodoc>GetFocusedItem() -&gt; long</autodoc>
    </method>
    <method name="GetNextSelected" overloaded="no">
      <autodoc>GetNextSelected(long item) -&gt; long</autodoc>
      <paramlist>
        <param name="item" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstSelected" overloaded="no">
      <autodoc>GetFirstSelected() -&gt; long</autodoc>
    </method>
    <method name="IsSelected" overloaded="no">
      <autodoc>IsSelected(long index) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetColumnImage" overloaded="no">
      <autodoc>SetColumnImage(int col, int image)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="image" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ClearColumnImage" overloaded="no">
      <autodoc>ClearColumnImage(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="TreeItemId" oldname="wxTreeItemId" module="controls">
    <constructor name="TreeItemId" overloaded="no">
      <autodoc>__init__() -&gt; TreeItemId</autodoc>
    </constructor>
    <destructor name="~wxTreeItemId">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(TreeItemId other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="p.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(TreeItemId other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="p.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <property name="m_pItem" type="void" readonly="no"/>
    <pythoncode>
        Ok = IsOk
        def __nonzero__(self): return self.IsOk() </pythoncode>
  </class>
  <class name="TreeItemData" oldname="wxPyTreeItemData" module="controls">
    <constructor name="wxPyTreeItemData" overloaded="no">
      <autodoc>__init__(PyObject obj=None) -&gt; TreeItemData</autodoc>
      <paramlist>
        <param name="obj" type="p.PyObject" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; PyObject</autodoc>
    </method>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(PyObject obj)</autodoc>
      <paramlist>
        <param name="obj" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; TreeItemId</autodoc>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(TreeItemId id)</autodoc>
      <paramlist>
        <param name="id" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode>

EVT_TREE_BEGIN_DRAG        = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_DRAG       , 1)
EVT_TREE_BEGIN_RDRAG       = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_RDRAG      , 1)
EVT_TREE_BEGIN_LABEL_EDIT  = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT , 1)
EVT_TREE_END_LABEL_EDIT    = wx.PyEventBinder(wxEVT_COMMAND_TREE_END_LABEL_EDIT   , 1)
EVT_TREE_DELETE_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_TREE_DELETE_ITEM      , 1)
EVT_TREE_GET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_TREE_GET_INFO         , 1)
EVT_TREE_SET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_TREE_SET_INFO         , 1)
EVT_TREE_ITEM_EXPANDED     = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_EXPANDED    , 1)
EVT_TREE_ITEM_EXPANDING    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_EXPANDING   , 1)
EVT_TREE_ITEM_COLLAPSED    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_COLLAPSED   , 1)
EVT_TREE_ITEM_COLLAPSING   = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_COLLAPSING  , 1)
EVT_TREE_SEL_CHANGED       = wx.PyEventBinder(wxEVT_COMMAND_TREE_SEL_CHANGED      , 1)
EVT_TREE_SEL_CHANGING      = wx.PyEventBinder(wxEVT_COMMAND_TREE_SEL_CHANGING     , 1)
EVT_TREE_KEY_DOWN          = wx.PyEventBinder(wxEVT_COMMAND_TREE_KEY_DOWN         , 1)
EVT_TREE_ITEM_ACTIVATED    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_ACTIVATED   , 1)
EVT_TREE_ITEM_RIGHT_CLICK  = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK , 1)
EVT_TREE_ITEM_MIDDLE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK, 1)
EVT_TREE_END_DRAG          = wx.PyEventBinder(wxEVT_COMMAND_TREE_END_DRAG         , 1)
EVT_TREE_STATE_IMAGE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK, 1)
EVT_TREE_ITEM_GETTOOLTIP   = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP,   1)
</pythoncode>
  <class name="TreeEvent" oldname="wxTreeEvent" module="controls">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="TreeEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; TreeEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetItem" overloaded="no">
      <autodoc>GetItem() -&gt; TreeItemId</autodoc>
    </method>
    <method name="SetItem" overloaded="no">
      <autodoc>SetItem(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetOldItem" overloaded="no">
      <autodoc>GetOldItem() -&gt; TreeItemId</autodoc>
    </method>
    <method name="SetOldItem" overloaded="no">
      <autodoc>SetOldItem(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetPoint" overloaded="no">
      <autodoc>GetPoint() -&gt; Point</autodoc>
    </method>
    <method name="SetPoint" overloaded="no">
      <autodoc>SetPoint(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetKeyEvent" overloaded="no">
      <autodoc>GetKeyEvent() -&gt; KeyEvent</autodoc>
    </method>
    <method name="GetKeyCode" overloaded="no">
      <autodoc>GetKeyCode() -&gt; int</autodoc>
    </method>
    <method name="SetKeyEvent" overloaded="no">
      <autodoc>SetKeyEvent(KeyEvent evt)</autodoc>
      <paramlist>
        <param name="evt" type="r.q(const).wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="GetLabel" overloaded="no">
      <autodoc>GetLabel() -&gt; String</autodoc>
    </method>
    <method name="SetLabel" overloaded="no">
      <autodoc>SetLabel(String label)</autodoc>
      <paramlist>
        <param name="label" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="IsEditCancelled" overloaded="no">
      <autodoc>IsEditCancelled() -&gt; bool</autodoc>
    </method>
    <method name="SetEditCanceled" overloaded="no">
      <autodoc>SetEditCanceled(bool editCancelled)</autodoc>
      <paramlist>
        <param name="editCancelled" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetToolTip" overloaded="no">
      <autodoc>SetToolTip(String toolTip)</autodoc>
      <paramlist>
        <param name="toolTip" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="TreeCtrl" oldname="wxPyTreeCtrl" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="wxPyTreeCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeCtrlNameStr) -&gt; TreeCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTreeCtrlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreTreeCtrl" overloaded="no">
      <autodoc>PreTreeCtrl() -&gt; TreeCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeCtrlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTreeCtrlNameStr"/>
      </paramlist>
    </method>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; size_t</autodoc>
    </method>
    <method name="GetIndent" overloaded="no">
      <autodoc>GetIndent() -&gt; unsigned int</autodoc>
    </method>
    <method name="SetIndent" overloaded="no">
      <autodoc>SetIndent(unsigned int indent)</autodoc>
      <paramlist>
        <param name="indent" type="unsigned int" default=""/>
      </paramlist>
    </method>
    <method name="GetSpacing" overloaded="no">
      <autodoc>GetSpacing() -&gt; unsigned int</autodoc>
    </method>
    <method name="SetSpacing" overloaded="no">
      <autodoc>SetSpacing(unsigned int spacing)</autodoc>
      <paramlist>
        <param name="spacing" type="unsigned int" default=""/>
      </paramlist>
    </method>
    <method name="GetImageList" overloaded="no">
      <autodoc>GetImageList() -&gt; ImageList</autodoc>
    </method>
    <method name="GetStateImageList" overloaded="no">
      <autodoc>GetStateImageList() -&gt; ImageList</autodoc>
    </method>
    <method name="SetImageList" overloaded="no">
      <autodoc>SetImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="SetStateImageList" overloaded="no">
      <autodoc>SetStateImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="AssignImageList" overloaded="no">
      <autodoc>AssignImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="AssignStateImageList" overloaded="no">
      <autodoc>AssignStateImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="GetItemText" overloaded="no">
      <autodoc>GetItemText(TreeItemId item) -&gt; String</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemImage" overloaded="no">
      <autodoc>GetItemImage(TreeItemId item, int which=TreeItemIcon_Normal) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
      </paramlist>
    </method>
    <method name="GetItemData" overloaded="no">
      <autodoc>GetItemData(TreeItemId item) -&gt; TreeItemData</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemPyData" overloaded="no">
      <autodoc>GetItemPyData(TreeItemId item) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <pythoncode> GetPyData = GetItemPyData </pythoncode>
    <method name="GetItemTextColour" overloaded="no">
      <autodoc>GetItemTextColour(TreeItemId item) -&gt; Colour</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemBackgroundColour" overloaded="no">
      <autodoc>GetItemBackgroundColour(TreeItemId item) -&gt; Colour</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemFont" overloaded="no">
      <autodoc>GetItemFont(TreeItemId item) -&gt; Font</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="SetItemText" overloaded="no">
      <autodoc>SetItemText(TreeItemId item, String text)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetItemImage" overloaded="no">
      <autodoc>SetItemImage(TreeItemId item, int image, int which=TreeItemIcon_Normal)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="image" type="int" default=""/>
        <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
      </paramlist>
    </method>
    <method name="SetItemData" overloaded="no">
      <autodoc>SetItemData(TreeItemId item, TreeItemData data)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="data" type="p.wxPyTreeItemData" default=""/>
      </paramlist>
    </method>
    <method name="SetItemPyData" overloaded="no">
      <autodoc>SetItemPyData(TreeItemId item, PyObject obj)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="obj" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode> SetPyData = SetItemPyData </pythoncode>
    <method name="SetItemHasChildren" overloaded="no">
      <autodoc>SetItemHasChildren(TreeItemId item, bool has=True)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="has" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetItemBold" overloaded="no">
      <autodoc>SetItemBold(TreeItemId item, bool bold=True)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="bold" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetItemTextColour" overloaded="no">
      <autodoc>SetItemTextColour(TreeItemId item, Colour col)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetItemBackgroundColour" overloaded="no">
      <autodoc>SetItemBackgroundColour(TreeItemId item, Colour col)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetItemFont" overloaded="no">
      <autodoc>SetItemFont(TreeItemId item, Font font)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="IsVisible" overloaded="no">
      <autodoc>IsVisible(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="ItemHasChildren" overloaded="no">
      <autodoc>ItemHasChildren(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="IsExpanded" overloaded="no">
      <autodoc>IsExpanded(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="IsSelected" overloaded="no">
      <autodoc>IsSelected(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="IsBold" overloaded="no">
      <autodoc>IsBold(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetChildrenCount" overloaded="no">
      <autodoc>GetChildrenCount(TreeItemId item, bool recursively=True) -&gt; size_t</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="recursively" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetRootItem" overloaded="no">
      <autodoc>GetRootItem() -&gt; TreeItemId</autodoc>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; TreeItemId</autodoc>
    </method>
    <method name="GetSelections" overloaded="no">
      <autodoc>GetSelections() -&gt; PyObject</autodoc>
    </method>
    <method name="GetItemParent" overloaded="no">
      <autodoc>GetItemParent(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstChild" overloaded="no">
      <autodoc>GetFirstChild(TreeItemId item) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetNextChild" overloaded="no">
      <autodoc>GetNextChild(TreeItemId item, void cookie) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="cookie" type="p.void" default=""/>
      </paramlist>
    </method>
    <method name="GetLastChild" overloaded="no">
      <autodoc>GetLastChild(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetNextSibling" overloaded="no">
      <autodoc>GetNextSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetPrevSibling" overloaded="no">
      <autodoc>GetPrevSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstVisibleItem" overloaded="no">
      <autodoc>GetFirstVisibleItem() -&gt; TreeItemId</autodoc>
    </method>
    <method name="GetNextVisible" overloaded="no">
      <autodoc>GetNextVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetPrevVisible" overloaded="no">
      <autodoc>GetPrevVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="AddRoot" overloaded="no">
      <autodoc>AddRoot(String text, int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="PrependItem" overloaded="no">
      <autodoc>PrependItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="InsertItem" overloaded="no">
      <autodoc>InsertItem(TreeItemId parent, TreeItemId idPrevious, String text, 
    int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="idPrevious" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="InsertItemBefore" overloaded="no">
      <autodoc>InsertItemBefore(TreeItemId parent, size_t index, String text, int image=-1, 
    int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="index" type="size_t" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="AppendItem" overloaded="no">
      <autodoc>AppendItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="Delete" overloaded="no">
      <autodoc>Delete(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="DeleteChildren" overloaded="no">
      <autodoc>DeleteChildren(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="DeleteAllItems" overloaded="no">
      <autodoc>DeleteAllItems()</autodoc>
    </method>
    <method name="Expand" overloaded="no">
      <autodoc>Expand(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Collapse" overloaded="no">
      <autodoc>Collapse(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="CollapseAndReset" overloaded="no">
      <autodoc>CollapseAndReset(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Toggle" overloaded="no">
      <autodoc>Toggle(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Unselect" overloaded="no">
      <autodoc>Unselect()</autodoc>
    </method>
    <method name="UnselectItem" overloaded="no">
      <autodoc>UnselectItem(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="UnselectAll" overloaded="no">
      <autodoc>UnselectAll()</autodoc>
    </method>
    <method name="SelectItem" overloaded="no">
      <autodoc>SelectItem(TreeItemId item, bool select=True)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="select" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="ToggleItemSelection" overloaded="no">
      <autodoc>ToggleItemSelection(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="EnsureVisible" overloaded="no">
      <autodoc>EnsureVisible(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="ScrollTo" overloaded="no">
      <autodoc>ScrollTo(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="EditLabel" overloaded="no">
      <autodoc>EditLabel(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetEditControl" overloaded="no">
      <autodoc>GetEditControl() -&gt; TextCtrl</autodoc>
    </method>
    <method name="SortChildren" overloaded="no">
      <autodoc>SortChildren(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point point) -&gt; (item, where)</autodoc>
      <docstring>Determine which item (if any) belongs the given point.  The
coordinates specified are relative to the client area of tree ctrl
and the where return value is set to a bitmask of wxTREE_HITTEST_xxx
constants.
</docstring>
      <paramlist>
        <param name="point" type="r.q(const).wxPoint" default=""/>
        <param name="OUTPUT" type="r.int" default=""/>
      </paramlist>
    </method>
    <method name="GetBoundingRect" overloaded="no">
      <autodoc>GetBoundingRect(TreeItemId item, bool textOnly=False) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="textOnly" type="bool" default="False"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="GenericDirCtrl" oldname="wxGenericDirCtrl" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="GenericDirCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, String dir=DirDialogDefaultFolderStr, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER, 
    String filter=EmptyString, 
    int defaultFilter=0, String name=TreeCtrlNameStr) -&gt; GenericDirCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default="-1"/>
        <param name="dir" type="r.q(const).wxString" default="wxPyDirDialogDefaultFolderStr"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER"/>
        <param name="filter" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="defaultFilter" type="int" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTreeCtrlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreGenericDirCtrl" overloaded="no">
      <autodoc>PreGenericDirCtrl() -&gt; GenericDirCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, String dir=DirDialogDefaultFolderStr, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER, 
    String filter=EmptyString, 
    int defaultFilter=0, String name=TreeCtrlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default="-1"/>
        <param name="dir" type="r.q(const).wxString" default="wxPyDirDialogDefaultFolderStr"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER"/>
        <param name="filter" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="defaultFilter" type="int" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTreeCtrlNameStr"/>
      </paramlist>
    </method>
    <method name="ExpandPath" overloaded="no">
      <autodoc>ExpandPath(String path) -&gt; bool</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultPath" overloaded="no">
      <autodoc>GetDefaultPath() -&gt; String</autodoc>
    </method>
    <method name="SetDefaultPath" overloaded="no">
      <autodoc>SetDefaultPath(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetPath" overloaded="no">
      <autodoc>GetPath() -&gt; String</autodoc>
    </method>
    <method name="GetFilePath" overloaded="no">
      <autodoc>GetFilePath() -&gt; String</autodoc>
    </method>
    <method name="SetPath" overloaded="no">
      <autodoc>SetPath(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ShowHidden" overloaded="no">
      <autodoc>ShowHidden(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetShowHidden" overloaded="no">
      <autodoc>GetShowHidden() -&gt; bool</autodoc>
    </method>
    <method name="GetFilter" overloaded="no">
      <autodoc>GetFilter() -&gt; String</autodoc>
    </method>
    <method name="SetFilter" overloaded="no">
      <autodoc>SetFilter(String filter)</autodoc>
      <paramlist>
        <param name="filter" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetFilterIndex" overloaded="no">
      <autodoc>GetFilterIndex() -&gt; int</autodoc>
    </method>
    <method name="SetFilterIndex" overloaded="no">
      <autodoc>SetFilterIndex(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetRootId" overloaded="no">
      <autodoc>GetRootId() -&gt; TreeItemId</autodoc>
    </method>
    <method name="GetTreeCtrl" overloaded="no">
      <autodoc>GetTreeCtrl() -&gt; TreeCtrl</autodoc>
    </method>
    <method name="GetFilterListCtrl" overloaded="no">
      <autodoc>GetFilterListCtrl() -&gt; DirFilterListCtrl</autodoc>
    </method>
    <method name="FindChild" overloaded="no">
      <autodoc>FindChild(wxTreeItemId parentId, wxString path) -&gt; (item, done)</autodoc>
      <docstring>Find the child that matches the first part of 'path'.  E.g. if a child path is
"/usr" and 'path' is "/usr/include" then the child for /usr is returned.
If the path string has been used (we're at the leaf), done is set to True
</docstring>
      <paramlist>
        <param name="parentId" type="wxTreeItemId" default=""/>
        <param name="path" type="r.q(const).wxString" default=""/>
        <param name="OUTPUT" type="r.bool" default=""/>
      </paramlist>
    </method>
    <method name="DoResize" overloaded="no">
      <autodoc>DoResize()</autodoc>
    </method>
    <method name="ReCreateTree" overloaded="no">
      <autodoc>ReCreateTree()</autodoc>
    </method>
  </class>
  <class name="DirFilterListCtrl" oldname="wxDirFilterListCtrl" module="controls">
    <baseclass name="wxChoice"/>
    <constructor name="DirFilterListCtrl" overloaded="no">
      <autodoc>__init__(GenericDirCtrl parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; DirFilterListCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxGenericDirCtrl" default=""/>
        <param name="id" type="q(const).int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
    <constructor name="PreDirFilterListCtrl" overloaded="no">
      <autodoc>PreDirFilterListCtrl() -&gt; DirFilterListCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(GenericDirCtrl parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxGenericDirCtrl" default=""/>
        <param name="id" type="q(const).int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </method>
    <method name="FillFilterList" overloaded="no">
      <autodoc>FillFilterList(String filter, int defaultFilter)</autodoc>
      <paramlist>
        <param name="filter" type="r.q(const).wxString" default=""/>
        <param name="defaultFilter" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="PyControl" oldname="wxPyControl" module="controls">
    <baseclass name="wxControl"/>
    <constructor name="PyControl" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ControlNameStr) -&gt; PyControl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="q(const).int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyControlNameStr"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_DoMoveWindow" overloaded="no">
      <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetSize" overloaded="no">
      <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
      </paramlist>
    </method>
    <method name="base_DoSetClientSize" overloaded="no">
      <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetVirtualSize" overloaded="no">
      <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetSize" overloaded="no">
      <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetClientSize" overloaded="no">
      <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetPosition" overloaded="no">
      <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetVirtualSize" overloaded="no">
      <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
    </method>
    <method name="base_DoGetBestSize" overloaded="no">
      <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
    </method>
    <method name="base_InitDialog" overloaded="no">
      <autodoc>base_InitDialog()</autodoc>
    </method>
    <method name="base_TransferDataToWindow" overloaded="no">
      <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_TransferDataFromWindow" overloaded="no">
      <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_Validate" overloaded="no">
      <autodoc>base_Validate() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocus" overloaded="no">
      <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocusFromKeyboard" overloaded="no">
      <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
    </method>
    <method name="base_GetMaxSize" overloaded="no">
      <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
    </method>
    <method name="base_AddChild" overloaded="no">
      <autodoc>base_AddChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="base_RemoveChild" overloaded="no">
      <autodoc>base_RemoveChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <pythoncode> 
EVT_HELP = wx.PyEventBinder( wxEVT_HELP, 1)
EVT_HELP_RANGE = wx.PyEventBinder(  wxEVT_HELP, 2)
EVT_DETAILED_HELP = wx.PyEventBinder( wxEVT_DETAILED_HELP, 1)
EVT_DETAILED_HELP_RANGE = wx.PyEventBinder( wxEVT_DETAILED_HELP, 2)
</pythoncode>
  <class name="HelpEvent" oldname="wxHelpEvent" module="controls">
    <baseclass name="wxCommandEvent"/>
    <constructor name="HelpEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0, Point pt=DefaultPosition) -&gt; HelpEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="winid" type="int" default="0"/>
        <param name="pt" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </constructor>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetLink" overloaded="no">
      <autodoc>GetLink() -&gt; String</autodoc>
    </method>
    <method name="SetLink" overloaded="no">
      <autodoc>SetLink(String link)</autodoc>
      <paramlist>
        <param name="link" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTarget" overloaded="no">
      <autodoc>GetTarget() -&gt; String</autodoc>
    </method>
    <method name="SetTarget" overloaded="no">
      <autodoc>SetTarget(String target)</autodoc>
      <paramlist>
        <param name="target" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="ContextHelp" oldname="wxContextHelp" module="controls">
    <baseclass name="wxObject"/>
    <constructor name="ContextHelp" overloaded="no">
      <autodoc>__init__(Window window=None, bool doNow=True) -&gt; ContextHelp</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default="NULL"/>
        <param name="doNow" type="bool" default="True"/>
      </paramlist>
    </constructor>
    <destructor name="~wxContextHelp">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="BeginContextHelp" overloaded="no">
      <autodoc>BeginContextHelp(Window window=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </method>
    <method name="EndContextHelp" overloaded="no">
      <autodoc>EndContextHelp() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="ContextHelpButton" oldname="wxContextHelpButton" module="controls">
    <baseclass name="wxBitmapButton"/>
    <constructor name="ContextHelpButton" overloaded="no">
      <autodoc>__init__(Window parent, int id=ID_CONTEXT_HELP, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BU_AUTODRAW) -&gt; ContextHelpButton</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="wxID_CONTEXT_HELP"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxBU_AUTODRAW"/>
      </paramlist>
    </constructor>
  </class>
  <class name="HelpProvider" oldname="wxHelpProvider" module="controls">
    <staticmethod name="Set" overloaded="no">
      <autodoc>Set(HelpProvider helpProvider) -&gt; HelpProvider</autodoc>
      <paramlist>
        <param name="helpProvider" type="p.wxHelpProvider" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Get" overloaded="no">
      <autodoc>Get() -&gt; HelpProvider</autodoc>
    </staticmethod>
    <method name="GetHelp" overloaded="no">
      <autodoc>GetHelp(Window window) -&gt; String</autodoc>
      <paramlist>
        <param name="window" type="p.q(const).wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="ShowHelp" overloaded="no">
      <autodoc>ShowHelp(Window window) -&gt; bool</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="AddHelp" overloaded="no">
      <autodoc>AddHelp(Window window, String text)</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AddHelpById" overloaded="no">
      <autodoc>AddHelpById(int id, String text)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
    </method>
  </class>
  <class name="SimpleHelpProvider" oldname="wxSimpleHelpProvider" module="controls">
    <baseclass name="wxHelpProvider"/>
    <constructor name="SimpleHelpProvider" overloaded="no">
      <autodoc>__init__() -&gt; SimpleHelpProvider</autodoc>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="DragImage" oldname="wxGenericDragImage" module="controls">
    <baseclass name="wxObject"/>
    <constructor name="wxGenericDragImage" overloaded="no">
      <autodoc>__init__(Bitmap image, Cursor cursor=wxNullCursor) -&gt; DragImage</autodoc>
      <paramlist>
        <param name="image" type="r.q(const).wxBitmap" default=""/>
        <param name="cursor" type="r.q(const).wxCursor" default="wxNullCursor"/>
      </paramlist>
    </constructor>
    <constructor name="DragIcon" overloaded="no">
      <autodoc>DragIcon(Icon image, Cursor cursor=wxNullCursor) -&gt; DragImage</autodoc>
      <paramlist>
        <param name="image" type="r.q(const).wxIcon" default=""/>
        <param name="cursor" type="r.q(const).wxCursor" default="wxNullCursor"/>
      </paramlist>
    </constructor>
    <constructor name="DragString" overloaded="no">
      <autodoc>DragString(String str, Cursor cursor=wxNullCursor) -&gt; DragImage</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
        <param name="cursor" type="r.q(const).wxCursor" default="wxNullCursor"/>
      </paramlist>
    </constructor>
    <constructor name="DragTreeItem" overloaded="no">
      <autodoc>DragTreeItem(TreeCtrl treeCtrl, TreeItemId id) -&gt; DragImage</autodoc>
      <paramlist>
        <param name="treeCtrl" type="r.q(const).wxPyTreeCtrl" default=""/>
        <param name="id" type="r.wxTreeItemId" default=""/>
      </paramlist>
    </constructor>
    <constructor name="DragListItem" overloaded="no">
      <autodoc>DragListItem(ListCtrl listCtrl, long id) -&gt; DragImage</autodoc>
      <paramlist>
        <param name="listCtrl" type="r.q(const).wxPyListCtrl" default=""/>
        <param name="id" type="long" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxGenericDragImage">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetBackingBitmap" overloaded="no">
      <autodoc>SetBackingBitmap(Bitmap bitmap)</autodoc>
      <paramlist>
        <param name="bitmap" type="p.wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="BeginDrag" overloaded="no">
      <autodoc>BeginDrag(Point hotspot, Window window, bool fullScreen=False, 
    Rect rect=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="hotspot" type="r.q(const).wxPoint" default=""/>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="fullScreen" type="bool" default="False"/>
        <param name="rect" type="p.wxRect" default="NULL"/>
      </paramlist>
    </method>
    <method name="BeginDragBounded" overloaded="no">
      <autodoc>BeginDragBounded(Point hotspot, Window window, Window boundingWindow) -&gt; bool</autodoc>
      <paramlist>
        <param name="hotspot" type="r.q(const).wxPoint" default=""/>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="boundingWindow" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="EndDrag" overloaded="no">
      <autodoc>EndDrag() -&gt; bool</autodoc>
    </method>
    <method name="Move" overloaded="no">
      <autodoc>Move(Point pt) -&gt; bool</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="Show" overloaded="no">
      <autodoc>Show() -&gt; bool</autodoc>
    </method>
    <method name="Hide" overloaded="no">
      <autodoc>Hide() -&gt; bool</autodoc>
    </method>
    <method name="GetImageRect" overloaded="no">
      <autodoc>GetImageRect(Point pos) -&gt; Rect</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DoDrawImage" overloaded="no">
      <autodoc>DoDrawImage(DC dc, Point pos) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="UpdateBackingFromWindow" overloaded="no">
      <autodoc>UpdateBackingFromWindow(DC windowDC, MemoryDC destDC, Rect sourceRect, Rect destRect) -&gt; bool</autodoc>
      <paramlist>
        <param name="windowDC" type="r.wxDC" default=""/>
        <param name="destDC" type="r.wxMemoryDC" default=""/>
        <param name="sourceRect" type="r.q(const).wxRect" default=""/>
        <param name="destRect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="RedrawImage" overloaded="no">
      <autodoc>RedrawImage(Point oldPos, Point newPos, bool eraseOld, bool drawNew) -&gt; bool</autodoc>
      <paramlist>
        <param name="oldPos" type="r.q(const).wxPoint" default=""/>
        <param name="newPos" type="r.q(const).wxPoint" default=""/>
        <param name="eraseOld" type="bool" default=""/>
        <param name="drawNew" type="bool" default=""/>
      </paramlist>
    </method>
  </class>
</module>
<module name="misc">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="SystemSettings" oldname="wxSystemSettings" module="misc">
    <staticmethod name="GetColour" overloaded="no">
      <autodoc>GetColour(int index) -&gt; Colour</autodoc>
      <paramlist>
        <param name="index" type="wxSystemColour" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetFont" overloaded="no">
      <autodoc>GetFont(int index) -&gt; Font</autodoc>
      <paramlist>
        <param name="index" type="wxSystemFont" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetMetric" overloaded="no">
      <autodoc>GetMetric(int index) -&gt; int</autodoc>
      <paramlist>
        <param name="index" type="wxSystemMetric" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="HasFeature" overloaded="no">
      <autodoc>HasFeature(int index) -&gt; bool</autodoc>
      <paramlist>
        <param name="index" type="wxSystemFeature" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetScreenType" overloaded="no">
      <autodoc>GetScreenType() -&gt; int</autodoc>
    </staticmethod>
    <staticmethod name="SetScreenType" overloaded="no">
      <autodoc>SetScreenType(int screen)</autodoc>
      <paramlist>
        <param name="screen" type="wxSystemScreenType" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <class name="SystemOptions" oldname="wxSystemOptions" module="misc">
    <baseclass name="wxObject"/>
    <constructor name="SystemOptions" overloaded="no">
      <autodoc>__init__() -&gt; SystemOptions</autodoc>
    </constructor>
    <staticmethod name="SetOption" overloaded="no">
      <autodoc>SetOption(String name, String value)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="SetOptionInt" overloaded="no">
      <autodoc>SetOptionInt(String name, int value)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="value" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetOption" overloaded="no">
      <autodoc>GetOption(String name) -&gt; String</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetOptionInt" overloaded="no">
      <autodoc>GetOptionInt(String name) -&gt; int</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="HasOption" overloaded="no">
      <autodoc>HasOption(String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <function oldname="wxNewId" name="NewId" overloaded="no">
    <autodoc>NewId() -&gt; long</autodoc>
  </function>
  <function oldname="wxRegisterId" name="RegisterId" overloaded="no">
    <autodoc>RegisterId(long id)</autodoc>
    <paramlist>
      <param name="id" type="long" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetCurrentId" name="GetCurrentId" overloaded="no">
    <autodoc>GetCurrentId() -&gt; long</autodoc>
  </function>
  <function oldname="wxBell" name="Bell" overloaded="no">
    <autodoc>Bell()</autodoc>
  </function>
  <function oldname="wxEndBusyCursor" name="EndBusyCursor" overloaded="no">
    <autodoc>EndBusyCursor()</autodoc>
  </function>
  <function oldname="wxGetElapsedTime" name="GetElapsedTime" overloaded="no">
    <autodoc>GetElapsedTime(bool resetTimer=True) -&gt; long</autodoc>
    <paramlist>
      <param name="resetTimer" type="bool" default="True"/>
    </paramlist>
  </function>
  <function oldname="wxGetMousePosition" name="GetMousePosition" overloaded="no">
    <autodoc>GetMousePosition() -&gt; (x,y)</autodoc>
    <paramlist>
      <param name="OUTPUT" type="p.int" default=""/>
      <param name="OUTPUT" type="p.int" default=""/>
    </paramlist>
  </function>
  <function oldname="wxIsBusy" name="IsBusy" overloaded="no">
    <autodoc>IsBusy() -&gt; bool</autodoc>
  </function>
  <function oldname="wxNow" name="Now" overloaded="no">
    <autodoc>Now() -&gt; String</autodoc>
  </function>
  <function oldname="wxShell" name="Shell" overloaded="no">
    <autodoc>Shell(String command=EmptyString) -&gt; bool</autodoc>
    <paramlist>
      <param name="command" type="r.q(const).wxString" default="wxPyEmptyString"/>
    </paramlist>
  </function>
  <function oldname="wxStartTimer" name="StartTimer" overloaded="no">
    <autodoc>StartTimer()</autodoc>
  </function>
  <function oldname="wxGetOsVersion" name="GetOsVersion" overloaded="no">
    <autodoc>GetOsVersion() -&gt; (platform, major, minor)</autodoc>
    <paramlist>
      <param name="OUTPUT" type="p.int" default=""/>
      <param name="OUTPUT" type="p.int" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetOsDescription" name="GetOsDescription" overloaded="no">
    <autodoc>GetOsDescription() -&gt; String</autodoc>
  </function>
  <function oldname="wxGetFreeMemory" name="GetFreeMemory" overloaded="no">
    <autodoc>GetFreeMemory() -&gt; long</autodoc>
  </function>
  <function oldname="wxShutdown" name="Shutdown" overloaded="no">
    <autodoc>Shutdown(int wFlags) -&gt; bool</autodoc>
    <paramlist>
      <param name="wFlags" type="wxShutdownFlags" default=""/>
    </paramlist>
  </function>
  <function oldname="wxSleep" name="Sleep" overloaded="no">
    <autodoc>Sleep(int secs)</autodoc>
    <paramlist>
      <param name="secs" type="int" default=""/>
    </paramlist>
  </function>
  <function oldname="wxUsleep" name="Usleep" overloaded="no">
    <autodoc>Usleep(unsigned long milliseconds)</autodoc>
    <paramlist>
      <param name="milliseconds" type="unsigned long" default=""/>
    </paramlist>
  </function>
  <function oldname="wxEnableTopLevelWindows" name="EnableTopLevelWindows" overloaded="no">
    <autodoc>EnableTopLevelWindows(bool enable)</autodoc>
    <paramlist>
      <param name="enable" type="bool" default=""/>
    </paramlist>
  </function>
  <function oldname="wxStripMenuCodes" name="StripMenuCodes" overloaded="no">
    <autodoc>StripMenuCodes(String in) -&gt; String</autodoc>
    <paramlist>
      <param name="in" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetEmailAddress" name="GetEmailAddress" overloaded="no">
    <autodoc>GetEmailAddress() -&gt; String</autodoc>
  </function>
  <function oldname="wxGetHostName" name="GetHostName" overloaded="no">
    <autodoc>GetHostName() -&gt; String</autodoc>
  </function>
  <function oldname="wxGetFullHostName" name="GetFullHostName" overloaded="no">
    <autodoc>GetFullHostName() -&gt; String</autodoc>
  </function>
  <function oldname="wxGetUserId" name="GetUserId" overloaded="no">
    <autodoc>GetUserId() -&gt; String</autodoc>
  </function>
  <function oldname="wxGetUserName" name="GetUserName" overloaded="no">
    <autodoc>GetUserName() -&gt; String</autodoc>
  </function>
  <function oldname="wxGetHomeDir" name="GetHomeDir" overloaded="no">
    <autodoc>GetHomeDir() -&gt; String</autodoc>
  </function>
  <function oldname="wxGetUserHome" name="GetUserHome" overloaded="no">
    <autodoc>GetUserHome(String user=EmptyString) -&gt; String</autodoc>
    <paramlist>
      <param name="user" type="r.q(const).wxString" default="wxPyEmptyString"/>
    </paramlist>
  </function>
  <function oldname="wxGetProcessId" name="GetProcessId" overloaded="no">
    <autodoc>GetProcessId() -&gt; unsigned long</autodoc>
  </function>
  <function oldname="wxTrap" name="Trap" overloaded="no">
    <autodoc>Trap()</autodoc>
  </function>
  <function oldname="wxFileSelector" name="FileSelector" overloaded="no">
    <autodoc>FileSelector(String message=FileSelectorPromptStr, String default_path=EmptyString, 
    String default_filename=EmptyString, 
    String default_extension=EmptyString, 
    String wildcard=FileSelectorDefaultWildcardStr, 
    int flags=0, Window parent=None, int x=-1, 
    int y=-1) -&gt; String</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default="wxPyFileSelectorPromptStr"/>
      <param name="default_path" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="default_filename" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="default_extension" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="wildcard" type="r.q(const).wxString" default="wxPyFileSelectorDefaultWildcardStr"/>
      <param name="flags" type="int" default="0"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
      <param name="x" type="int" default="-1"/>
      <param name="y" type="int" default="-1"/>
    </paramlist>
  </function>
  <function oldname="wxLoadFileSelector" name="LoadFileSelector" overloaded="no">
    <autodoc>LoadFileSelector(String what, String extension, String default_name=EmptyString, 
    Window parent=None) -&gt; String</autodoc>
    <paramlist>
      <param name="what" type="r.q(const).wxString" default=""/>
      <param name="extension" type="r.q(const).wxString" default=""/>
      <param name="default_name" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
    </paramlist>
  </function>
  <function oldname="wxSaveFileSelector" name="SaveFileSelector" overloaded="no">
    <autodoc>SaveFileSelector(String what, String extension, String default_name=EmptyString, 
    Window parent=None) -&gt; String</autodoc>
    <paramlist>
      <param name="what" type="r.q(const).wxString" default=""/>
      <param name="extension" type="r.q(const).wxString" default=""/>
      <param name="default_name" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
    </paramlist>
  </function>
  <function oldname="wxDirSelector" name="DirSelector" overloaded="no">
    <autodoc>DirSelector(String message=DirSelectorPromptStr, String defaultPath=EmptyString, 
    long style=DD_DEFAULT_STYLE, 
    Point pos=DefaultPosition, Window parent=None) -&gt; String</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default="wxPyDirSelectorPromptStr"/>
      <param name="defaultPath" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="style" type="long" default="wxDD_DEFAULT_STYLE"/>
      <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
    </paramlist>
  </function>
  <function oldname="wxGetTextFromUser" name="GetTextFromUser" overloaded="no">
    <autodoc>GetTextFromUser(String message, String caption=EmptyString, String default_value=EmptyString, 
    Window parent=None, 
    int x=-1, int y=-1, bool centre=True) -&gt; String</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default=""/>
      <param name="caption" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="default_value" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
      <param name="x" type="int" default="-1"/>
      <param name="y" type="int" default="-1"/>
      <param name="centre" type="bool" default="True"/>
    </paramlist>
  </function>
  <function oldname="wxGetPasswordFromUser" name="GetPasswordFromUser" overloaded="no">
    <autodoc>GetPasswordFromUser(String message, String caption=EmptyString, String default_value=EmptyString, 
    Window parent=None) -&gt; String</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default=""/>
      <param name="caption" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="default_value" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
    </paramlist>
  </function>
  <function oldname="wxGetSingleChoice" name="GetSingleChoice" overloaded="no">
    <autodoc>GetSingleChoice(String message, String caption, int choices, String choices_array, 
    Window parent=None, int x=-1, 
    int y=-1, bool centre=True, int width=150, int height=200) -&gt; String</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default=""/>
      <param name="caption" type="r.q(const).wxString" default=""/>
      <param name="choices" type="int" default=""/>
      <param name="choices_array" type="p.wxString" default=""/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
      <param name="x" type="int" default="-1"/>
      <param name="y" type="int" default="-1"/>
      <param name="centre" type="bool" default="True"/>
      <param name="width" type="int" default="150"/>
      <param name="height" type="int" default="200"/>
    </paramlist>
  </function>
  <function oldname="wxGetSingleChoiceIndex" name="GetSingleChoiceIndex" overloaded="no">
    <autodoc>GetSingleChoiceIndex(String message, String caption, int choices, String choices_array, 
    Window parent=None, int x=-1, 
    int y=-1, bool centre=True, int width=150, int height=200) -&gt; int</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default=""/>
      <param name="caption" type="r.q(const).wxString" default=""/>
      <param name="choices" type="int" default=""/>
      <param name="choices_array" type="p.wxString" default=""/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
      <param name="x" type="int" default="-1"/>
      <param name="y" type="int" default="-1"/>
      <param name="centre" type="bool" default="True"/>
      <param name="width" type="int" default="150"/>
      <param name="height" type="int" default="200"/>
    </paramlist>
  </function>
  <function oldname="wxMessageBox" name="MessageBox" overloaded="no">
    <autodoc>MessageBox(String message, String caption=EmptyString, int style=wxOK|wxCENTRE, 
    Window parent=None, int x=-1, 
    int y=-1) -&gt; int</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default=""/>
      <param name="caption" type="r.q(const).wxString" default="wxPyEmptyString"/>
      <param name="style" type="int" default="wxOK|wxCENTRE"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
      <param name="x" type="int" default="-1"/>
      <param name="y" type="int" default="-1"/>
    </paramlist>
  </function>
  <function oldname="wxGetNumberFromUser" name="GetNumberFromUser" overloaded="no">
    <autodoc>GetNumberFromUser(String message, String prompt, String caption, long value, 
    long min=0, long max=100, Window parent=None, 
    Point pos=DefaultPosition) -&gt; long</autodoc>
    <paramlist>
      <param name="message" type="r.q(const).wxString" default=""/>
      <param name="prompt" type="r.q(const).wxString" default=""/>
      <param name="caption" type="r.q(const).wxString" default=""/>
      <param name="value" type="long" default=""/>
      <param name="min" type="long" default="0"/>
      <param name="max" type="long" default="100"/>
      <param name="parent" type="p.wxWindow" default="NULL"/>
      <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
    </paramlist>
  </function>
  <function oldname="wxColourDisplay" name="ColourDisplay" overloaded="no">
    <autodoc>ColourDisplay() -&gt; bool</autodoc>
  </function>
  <function oldname="wxDisplayDepth" name="DisplayDepth" overloaded="no">
    <autodoc>DisplayDepth() -&gt; int</autodoc>
  </function>
  <function oldname="wxGetDisplayDepth" name="GetDisplayDepth" overloaded="no">
    <autodoc>GetDisplayDepth() -&gt; int</autodoc>
  </function>
  <function oldname="wxDisplaySize" name="DisplaySize" overloaded="no">
    <autodoc>DisplaySize() -&gt; (width, height)</autodoc>
    <paramlist>
      <param name="OUTPUT" type="p.int" default=""/>
      <param name="OUTPUT" type="p.int" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetDisplaySize" name="GetDisplaySize" overloaded="no">
    <autodoc>GetDisplaySize() -&gt; Size</autodoc>
  </function>
  <function oldname="wxDisplaySizeMM" name="DisplaySizeMM" overloaded="no">
    <autodoc>DisplaySizeMM() -&gt; (width, height)</autodoc>
    <paramlist>
      <param name="OUTPUT" type="p.int" default=""/>
      <param name="OUTPUT" type="p.int" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetDisplaySizeMM" name="GetDisplaySizeMM" overloaded="no">
    <autodoc>GetDisplaySizeMM() -&gt; Size</autodoc>
  </function>
  <function oldname="wxClientDisplayRect" name="ClientDisplayRect" overloaded="no">
    <autodoc>ClientDisplayRect() -&gt; (x, y, width, height)</autodoc>
    <paramlist>
      <param name="OUTPUT" type="p.int" default=""/>
      <param name="OUTPUT" type="p.int" default=""/>
      <param name="OUTPUT" type="p.int" default=""/>
      <param name="OUTPUT" type="p.int" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetClientDisplayRect" name="GetClientDisplayRect" overloaded="no">
    <autodoc>GetClientDisplayRect() -&gt; Rect</autodoc>
  </function>
  <function oldname="wxSetCursor" name="SetCursor" overloaded="no">
    <autodoc>SetCursor(Cursor cursor)</autodoc>
    <paramlist>
      <param name="cursor" type="r.wxCursor" default=""/>
    </paramlist>
  </function>
  <function oldname="wxBeginBusyCursor" name="BeginBusyCursor" overloaded="no">
    <autodoc>BeginBusyCursor(Cursor cursor=wxHOURGLASS_CURSOR)</autodoc>
    <paramlist>
      <param name="cursor" type="p.wxCursor" default="wxHOURGLASS_CURSOR"/>
    </paramlist>
  </function>
  <function oldname="wxGetActiveWindow" name="GetActiveWindow" overloaded="no">
    <autodoc>GetActiveWindow() -&gt; Window</autodoc>
  </function>
  <function oldname="wxGenericFindWindowAtPoint" name="GenericFindWindowAtPoint" overloaded="no">
    <autodoc>GenericFindWindowAtPoint(Point pt) -&gt; Window</autodoc>
    <paramlist>
      <param name="pt" type="r.q(const).wxPoint" default=""/>
    </paramlist>
  </function>
  <function oldname="wxFindWindowAtPoint" name="FindWindowAtPoint" overloaded="no">
    <autodoc>FindWindowAtPoint(Point pt) -&gt; Window</autodoc>
    <paramlist>
      <param name="pt" type="r.q(const).wxPoint" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetTopLevelParent" name="GetTopLevelParent" overloaded="no">
    <autodoc>GetTopLevelParent(Window win) -&gt; Window</autodoc>
    <paramlist>
      <param name="win" type="p.wxWindow" default=""/>
    </paramlist>
  </function>
  <function oldname="wxGetKeyState" name="GetKeyState" overloaded="no">
    <autodoc>GetKeyState(int key) -&gt; bool</autodoc>
    <paramlist>
      <param name="key" type="wxKeyCode" default=""/>
    </paramlist>
  </function>
  <function oldname="wxWakeUpMainThread" name="WakeUpMainThread" overloaded="no">
    <autodoc>WakeUpMainThread()</autodoc>
  </function>
  <function oldname="wxMutexGuiEnter" name="MutexGuiEnter" overloaded="no">
    <autodoc>MutexGuiEnter()</autodoc>
  </function>
  <function oldname="wxMutexGuiLeave" name="MutexGuiLeave" overloaded="no">
    <autodoc>MutexGuiLeave()</autodoc>
  </function>
  <class name="MutexGuiLocker" oldname="wxMutexGuiLocker" module="misc">
    <constructor name="MutexGuiLocker" overloaded="no">
      <autodoc>__init__() -&gt; MutexGuiLocker</autodoc>
    </constructor>
    <destructor name="~wxMutexGuiLocker">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <function oldname="wxThread_IsMain" name="Thread_IsMain" overloaded="no">
    <autodoc>Thread_IsMain() -&gt; bool</autodoc>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ToolTip" oldname="wxToolTip" module="misc">
    <baseclass name="wxObject"/>
    <constructor name="ToolTip" overloaded="no">
      <autodoc>__init__(String tip) -&gt; ToolTip</autodoc>
      <paramlist>
        <param name="tip" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <method name="SetTip" overloaded="no">
      <autodoc>SetTip(String tip)</autodoc>
      <paramlist>
        <param name="tip" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTip" overloaded="no">
      <autodoc>GetTip() -&gt; String</autodoc>
    </method>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
    <staticmethod name="Enable" overloaded="no">
      <autodoc>Enable(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="SetDelay" overloaded="no">
      <autodoc>SetDelay(long milliseconds)</autodoc>
      <paramlist>
        <param name="milliseconds" type="long" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <class name="Caret" oldname="wxCaret" module="misc">
    <constructor name="Caret" overloaded="no">
      <autodoc>__init__(Window window, Size size) -&gt; Caret</autodoc>
      <paramlist>
        <param name="window" type="p.wxWindow" default=""/>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxCaret">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <method name="IsVisible" overloaded="no">
      <autodoc>IsVisible() -&gt; bool</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="GetPositionTuple" overloaded="no">
      <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; Size</autodoc>
    </method>
    <method name="GetSizeTuple" overloaded="no">
      <autodoc>GetSizeTuple() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
    <method name="MoveXY" overloaded="no">
      <autodoc>MoveXY(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Move" overloaded="no">
      <autodoc>Move(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetSizeWH" overloaded="no">
      <autodoc>SetSizeWH(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="Show" overloaded="no">
      <autodoc>Show(int show=True)</autodoc>
      <paramlist>
        <param name="show" type="int" default="True"/>
      </paramlist>
    </method>
    <method name="Hide" overloaded="no">
      <autodoc>Hide()</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.IsOk() </pythoncode>
  </class>
  <function oldname="wxCaret_GetBlinkTime" name="Caret_GetBlinkTime" overloaded="no">
    <autodoc>Caret_GetBlinkTime() -&gt; int</autodoc>
  </function>
  <function oldname="wxCaret_SetBlinkTime" name="Caret_SetBlinkTime" overloaded="no">
    <autodoc>Caret_SetBlinkTime(int milliseconds)</autodoc>
    <paramlist>
      <param name="milliseconds" type="int" default=""/>
    </paramlist>
  </function>
  <class name="BusyCursor" oldname="wxBusyCursor" module="misc">
    <constructor name="BusyCursor" overloaded="no">
      <autodoc>__init__(Cursor cursor=wxHOURGLASS_CURSOR) -&gt; BusyCursor</autodoc>
      <paramlist>
        <param name="cursor" type="p.wxCursor" default="wxHOURGLASS_CURSOR"/>
      </paramlist>
    </constructor>
    <destructor name="~wxBusyCursor">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <class name="WindowDisabler" oldname="wxWindowDisabler" module="misc">
    <constructor name="WindowDisabler" overloaded="no">
      <autodoc>__init__(Window winToSkip=None) -&gt; WindowDisabler</autodoc>
      <paramlist>
        <param name="winToSkip" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxWindowDisabler">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <class name="BusyInfo" oldname="wxBusyInfo" module="misc">
    <baseclass name="wxObject"/>
    <constructor name="BusyInfo" overloaded="no">
      <autodoc>__init__(String message) -&gt; BusyInfo</autodoc>
      <paramlist>
        <param name="message" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxBusyInfo">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <class name="StopWatch" oldname="wxStopWatch" module="misc">
    <constructor name="StopWatch" overloaded="no">
      <autodoc>__init__() -&gt; StopWatch</autodoc>
    </constructor>
    <method name="Start" overloaded="no">
      <autodoc>Start(long t0=0)</autodoc>
      <paramlist>
        <param name="t0" type="long" default="0"/>
      </paramlist>
    </method>
    <method name="Pause" overloaded="no">
      <autodoc>Pause()</autodoc>
    </method>
    <method name="Resume" overloaded="no">
      <autodoc>Resume()</autodoc>
    </method>
    <method name="Time" overloaded="no">
      <autodoc>Time() -&gt; long</autodoc>
    </method>
  </class>
  <class name="FileHistory" oldname="wxFileHistory" module="misc">
    <baseclass name="wxObject"/>
    <constructor name="FileHistory" overloaded="no">
      <autodoc>__init__(int maxFiles=9) -&gt; FileHistory</autodoc>
      <paramlist>
        <param name="maxFiles" type="int" default="9"/>
      </paramlist>
    </constructor>
    <destructor name="~wxFileHistory">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="AddFileToHistory" overloaded="no">
      <autodoc>AddFileToHistory(String file)</autodoc>
      <paramlist>
        <param name="file" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="RemoveFileFromHistory" overloaded="no">
      <autodoc>RemoveFileFromHistory(int i)</autodoc>
      <paramlist>
        <param name="i" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMaxFiles" overloaded="no">
      <autodoc>GetMaxFiles() -&gt; int</autodoc>
    </method>
    <method name="UseMenu" overloaded="no">
      <autodoc>UseMenu(Menu menu)</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
      </paramlist>
    </method>
    <method name="RemoveMenu" overloaded="no">
      <autodoc>RemoveMenu(Menu menu)</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
      </paramlist>
    </method>
    <method name="Load" overloaded="no">
      <autodoc>Load(ConfigBase config)</autodoc>
      <paramlist>
        <param name="config" type="r.wxConfigBase" default=""/>
      </paramlist>
    </method>
    <method name="Save" overloaded="no">
      <autodoc>Save(ConfigBase config)</autodoc>
      <paramlist>
        <param name="config" type="r.wxConfigBase" default=""/>
      </paramlist>
    </method>
    <method name="AddFilesToMenu" overloaded="no">
      <autodoc>AddFilesToMenu()</autodoc>
    </method>
    <method name="AddFilesToThisMenu" overloaded="no">
      <autodoc>AddFilesToThisMenu(Menu menu)</autodoc>
      <paramlist>
        <param name="menu" type="p.wxMenu" default=""/>
      </paramlist>
    </method>
    <method name="GetHistoryFile" overloaded="no">
      <autodoc>GetHistoryFile(int i) -&gt; String</autodoc>
      <paramlist>
        <param name="i" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; int</autodoc>
    </method>
    <pythoncode> GetNoHistoryFiles = GetCount </pythoncode>
  </class>
  <class name="SingleInstanceChecker" oldname="wxSingleInstanceChecker" module="misc">
    <constructor name="SingleInstanceChecker" overloaded="no">
      <autodoc>__init__(String name, String path=EmptyString) -&gt; SingleInstanceChecker</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="path" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <constructor name="PreSingleInstanceChecker" overloaded="no">
      <autodoc>PreSingleInstanceChecker() -&gt; SingleInstanceChecker</autodoc>
    </constructor>
    <destructor name="~wxSingleInstanceChecker">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(String name, String path=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="path" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="IsAnotherRunning" overloaded="no">
      <autodoc>IsAnotherRunning() -&gt; bool</autodoc>
    </method>
  </class>
  <function oldname="wxDrawWindowOnDC" name="DrawWindowOnDC" overloaded="no">
    <autodoc>DrawWindowOnDC(Window window, DC dc, int method)</autodoc>
    <paramlist>
      <param name="window" type="p.wxWindow" default=""/>
      <param name="dc" type="r.q(const).wxDC" default=""/>
      <param name="method" type="int" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="TipProvider" oldname="wxTipProvider" module="misc">
    <destructor name="~wxTipProvider">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetTip" overloaded="no">
      <autodoc>GetTip() -&gt; String</autodoc>
    </method>
    <method name="GetCurrentTip" overloaded="no">
      <autodoc>GetCurrentTip() -&gt; size_t</autodoc>
    </method>
    <method name="PreprocessTip" overloaded="no">
      <autodoc>PreprocessTip(String tip) -&gt; String</autodoc>
      <paramlist>
        <param name="tip" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyTipProvider" oldname="wxPyTipProvider" module="misc">
    <baseclass name="wxTipProvider"/>
    <constructor name="PyTipProvider" overloaded="no">
      <autodoc>__init__(size_t currentTip) -&gt; PyTipProvider</autodoc>
      <paramlist>
        <param name="currentTip" type="size_t" default=""/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <function oldname="wxShowTip" name="ShowTip" overloaded="no">
    <autodoc>ShowTip(Window parent, TipProvider tipProvider, bool showAtStartup=True) -&gt; bool</autodoc>
    <paramlist>
      <param name="parent" type="p.wxWindow" default=""/>
      <param name="tipProvider" type="p.wxTipProvider" default=""/>
      <param name="showAtStartup" type="bool" default="True"/>
    </paramlist>
  </function>
  <function oldname="wxCreateFileTipProvider" name="CreateFileTipProvider" overloaded="no">
    <autodoc>CreateFileTipProvider(String filename, size_t currentTip) -&gt; TipProvider</autodoc>
    <paramlist>
      <param name="filename" type="r.q(const).wxString" default=""/>
      <param name="currentTip" type="size_t" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Timer" oldname="wxPyTimer" module="misc">
    <baseclass name="wxEvtHandler"/>
    <constructor name="wxPyTimer" overloaded="no">
      <autodoc>__init__(EvtHandler owner=None, int id=-1) -&gt; Timer</autodoc>
      <paramlist>
        <param name="owner" type="p.wxEvtHandler" default="NULL"/>
        <param name="id" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxPyTimer">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetOwner" overloaded="no">
      <autodoc>SetOwner(EvtHandler owner, int id=-1)</autodoc>
      <paramlist>
        <param name="owner" type="p.wxEvtHandler" default=""/>
        <param name="id" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="Start" overloaded="no">
      <autodoc>Start(int milliseconds=-1, bool oneShot=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="milliseconds" type="int" default="-1"/>
        <param name="oneShot" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="Stop" overloaded="no">
      <autodoc>Stop()</autodoc>
    </method>
    <method name="IsRunning" overloaded="no">
      <autodoc>IsRunning() -&gt; bool</autodoc>
    </method>
    <method name="GetInterval" overloaded="no">
      <autodoc>GetInterval() -&gt; int</autodoc>
    </method>
    <method name="IsOneShot" overloaded="no">
      <autodoc>IsOneShot() -&gt; bool</autodoc>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>    
# For backwards compatibility with 2.4
class PyTimer(Timer):
    def __init__(self, notify):
        Timer.__init__(self)
        self.notify = notify

    def Notify(self):
        if self.notify:
            self.notify()


EVT_TIMER = wx.PyEventBinder( wxEVT_TIMER, 1 )
                   
</pythoncode>
  <class name="TimerEvent" oldname="wxTimerEvent" module="misc">
    <baseclass name="wxEvent"/>
    <constructor name="TimerEvent" overloaded="no">
      <autodoc>__init__(int timerid=0, int interval=0) -&gt; TimerEvent</autodoc>
      <paramlist>
        <param name="timerid" type="int" default="0"/>
        <param name="interval" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetInterval" overloaded="no">
      <autodoc>GetInterval() -&gt; int</autodoc>
    </method>
  </class>
  <class name="TimerRunner" oldname="wxTimerRunner" module="misc">
    <constructor name="TimerRunner" overloaded="yes">
      <paramlist>
        <param name="timer" type="r.wxTimer" default=""/>
      </paramlist>
    </constructor>
    <constructor name="TimerRunner" overloaded="yes">
      <autodoc>__init__(wxTimer timer) -&gt; TimerRunner
__init__(wxTimer timer, int milli, bool oneShot=False) -&gt; TimerRunner</autodoc>
      <paramlist>
        <param name="timer" type="r.wxTimer" default=""/>
        <param name="milli" type="int" default=""/>
        <param name="oneShot" type="bool" default="False"/>
      </paramlist>
    </constructor>
    <destructor name="~wxTimerRunner">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Start" overloaded="no">
      <autodoc>Start(int milli, bool oneShot=False)</autodoc>
      <paramlist>
        <param name="milli" type="int" default=""/>
        <param name="oneShot" type="bool" default="False"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Log" oldname="wxLog" module="misc">
    <constructor name="Log" overloaded="no">
      <autodoc>__init__() -&gt; Log</autodoc>
    </constructor>
    <staticmethod name="IsEnabled" overloaded="no">
      <autodoc>IsEnabled() -&gt; bool</autodoc>
    </staticmethod>
    <staticmethod name="EnableLogging" overloaded="no">
      <autodoc>EnableLogging(bool doIt=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="doIt" type="bool" default="True"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="OnLog" overloaded="no">
      <autodoc>OnLog(wxLogLevel level, wxChar szString, time_t t)</autodoc>
      <paramlist>
        <param name="level" type="wxLogLevel" default=""/>
        <param name="szString" type="p.q(const).wxChar" default=""/>
        <param name="t" type="time_t" default=""/>
      </paramlist>
    </staticmethod>
    <method name="Flush" overloaded="no">
      <autodoc>Flush()</autodoc>
    </method>
    <staticmethod name="FlushActive" overloaded="no">
      <autodoc>FlushActive()</autodoc>
    </staticmethod>
    <staticmethod name="GetActiveTarget" overloaded="no">
      <autodoc>GetActiveTarget() -&gt; Log</autodoc>
    </staticmethod>
    <staticmethod name="SetActiveTarget" overloaded="no">
      <autodoc>SetActiveTarget(Log pLogger) -&gt; Log</autodoc>
      <paramlist>
        <param name="pLogger" type="p.wxLog" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Suspend" overloaded="no">
      <autodoc>Suspend()</autodoc>
    </staticmethod>
    <staticmethod name="Resume" overloaded="no">
      <autodoc>Resume()</autodoc>
    </staticmethod>
    <staticmethod name="SetVerbose" overloaded="no">
      <autodoc>SetVerbose(bool bVerbose=True)</autodoc>
      <paramlist>
        <param name="bVerbose" type="bool" default="True"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="SetLogLevel" overloaded="no">
      <autodoc>SetLogLevel(wxLogLevel logLevel)</autodoc>
      <paramlist>
        <param name="logLevel" type="wxLogLevel" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="DontCreateOnDemand" overloaded="no">
      <autodoc>DontCreateOnDemand()</autodoc>
    </staticmethod>
    <staticmethod name="SetTraceMask" overloaded="no">
      <autodoc>SetTraceMask(wxTraceMask ulMask)</autodoc>
      <paramlist>
        <param name="ulMask" type="wxTraceMask" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="AddTraceMask" overloaded="no">
      <autodoc>AddTraceMask(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="RemoveTraceMask" overloaded="no">
      <autodoc>RemoveTraceMask(String str)</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="ClearTraceMasks" overloaded="no">
      <autodoc>ClearTraceMasks()</autodoc>
    </staticmethod>
    <staticmethod name="GetTraceMasks" overloaded="no">
      <autodoc>GetTraceMasks() -&gt; wxArrayString</autodoc>
    </staticmethod>
    <staticmethod name="SetTimestamp" overloaded="no">
      <autodoc>SetTimestamp(wxChar ts)</autodoc>
      <paramlist>
        <param name="ts" type="p.q(const).wxChar" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetVerbose" overloaded="no">
      <autodoc>GetVerbose() -&gt; bool</autodoc>
    </staticmethod>
    <staticmethod name="GetTraceMask" overloaded="no">
      <autodoc>GetTraceMask() -&gt; wxTraceMask</autodoc>
    </staticmethod>
    <staticmethod name="IsAllowedTraceMask" overloaded="no">
      <autodoc>IsAllowedTraceMask(wxChar mask) -&gt; bool</autodoc>
      <paramlist>
        <param name="mask" type="p.q(const).wxChar" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetLogLevel" overloaded="no">
      <autodoc>GetLogLevel() -&gt; wxLogLevel</autodoc>
    </staticmethod>
    <staticmethod name="GetTimestamp" overloaded="no">
      <autodoc>GetTimestamp() -&gt; wxChar</autodoc>
    </staticmethod>
    <staticmethod name="TimeStamp" overloaded="no">
      <autodoc>TimeStamp() -&gt; String</autodoc>
    </staticmethod>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
    </method>
  </class>
  <class name="LogStderr" oldname="wxLogStderr" module="misc">
    <baseclass name="wxLog"/>
    <constructor name="LogStderr" overloaded="no">
      <autodoc>__init__() -&gt; LogStderr</autodoc>
    </constructor>
  </class>
  <class name="LogTextCtrl" oldname="wxLogTextCtrl" module="misc">
    <baseclass name="wxLog"/>
    <constructor name="LogTextCtrl" overloaded="no">
      <autodoc>__init__(wxTextCtrl pTextCtrl) -&gt; LogTextCtrl</autodoc>
      <paramlist>
        <param name="pTextCtrl" type="p.wxTextCtrl" default=""/>
      </paramlist>
    </constructor>
  </class>
  <class name="LogGui" oldname="wxLogGui" module="misc">
    <baseclass name="wxLog"/>
    <constructor name="LogGui" overloaded="no">
      <autodoc>__init__() -&gt; LogGui</autodoc>
    </constructor>
  </class>
  <class name="LogWindow" oldname="wxLogWindow" module="misc">
    <baseclass name="wxLog"/>
    <constructor name="LogWindow" overloaded="no">
      <autodoc>__init__(wxFrame pParent, String szTitle, bool bShow=True, bool bPassToOld=True) -&gt; LogWindow</autodoc>
      <paramlist>
        <param name="pParent" type="p.wxFrame" default=""/>
        <param name="szTitle" type="r.q(const).wxString" default=""/>
        <param name="bShow" type="bool" default="True"/>
        <param name="bPassToOld" type="bool" default="True"/>
      </paramlist>
    </constructor>
    <method name="Show" overloaded="no">
      <autodoc>Show(bool bShow=True)</autodoc>
      <paramlist>
        <param name="bShow" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetFrame" overloaded="no">
      <autodoc>GetFrame() -&gt; wxFrame</autodoc>
    </method>
    <method name="GetOldLog" overloaded="no">
      <autodoc>GetOldLog() -&gt; Log</autodoc>
    </method>
    <method name="IsPassingMessages" overloaded="no">
      <autodoc>IsPassingMessages() -&gt; bool</autodoc>
    </method>
    <method name="PassMessages" overloaded="no">
      <autodoc>PassMessages(bool bDoPass)</autodoc>
      <paramlist>
        <param name="bDoPass" type="bool" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="LogChain" oldname="wxLogChain" module="misc">
    <baseclass name="wxLog"/>
    <constructor name="LogChain" overloaded="no">
      <autodoc>__init__(Log logger) -&gt; LogChain</autodoc>
      <paramlist>
        <param name="logger" type="p.wxLog" default=""/>
      </paramlist>
    </constructor>
    <method name="SetLog" overloaded="no">
      <autodoc>SetLog(Log logger)</autodoc>
      <paramlist>
        <param name="logger" type="p.wxLog" default=""/>
      </paramlist>
    </method>
    <method name="PassMessages" overloaded="no">
      <autodoc>PassMessages(bool bDoPass)</autodoc>
      <paramlist>
        <param name="bDoPass" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsPassingMessages" overloaded="no">
      <autodoc>IsPassingMessages() -&gt; bool</autodoc>
    </method>
    <method name="GetOldLog" overloaded="no">
      <autodoc>GetOldLog() -&gt; Log</autodoc>
    </method>
  </class>
  <function oldname="wxSysErrorCode" name="SysErrorCode" overloaded="no">
    <autodoc>SysErrorCode() -&gt; unsigned long</autodoc>
  </function>
  <function oldname="wxSysErrorMsg" name="SysErrorMsg" overloaded="no">
    <autodoc>SysErrorMsg(unsigned long nErrCode=0) -&gt; String</autodoc>
    <paramlist>
      <param name="nErrCode" type="unsigned long" default="0"/>
    </paramlist>
  </function>
  <function oldname="wxLogFatalError" name="LogFatalError" overloaded="no">
    <autodoc>LogFatalError(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogError" name="LogError" overloaded="no">
    <autodoc>LogError(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogWarning" name="LogWarning" overloaded="no">
    <autodoc>LogWarning(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogMessage" name="LogMessage" overloaded="no">
    <autodoc>LogMessage(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogInfo" name="LogInfo" overloaded="no">
    <autodoc>LogInfo(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogDebug" name="LogDebug" overloaded="no">
    <autodoc>LogDebug(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogVerbose" name="LogVerbose" overloaded="no">
    <autodoc>LogVerbose(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogStatus" name="LogStatus" overloaded="no">
    <autodoc>LogStatus(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogStatus" name="LogStatusFrame" overloaded="no">
    <autodoc>LogStatusFrame(wxFrame pFrame, String msg)</autodoc>
    <paramlist>
      <param name="pFrame" type="p.wxFrame" default=""/>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogSysError" name="LogSysError" overloaded="no">
    <autodoc>LogSysError(String msg)</autodoc>
    <paramlist>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogTrace" name="LogTrace" overloaded="yes">
    <paramlist>
      <param name="mask" type="unsigned long" default=""/>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogTrace" name="LogTrace" overloaded="yes">
    <autodoc>LogTrace(unsigned long mask, String msg)
LogTrace(String mask, String msg)</autodoc>
    <paramlist>
      <param name="mask" type="r.q(const).wxString" default=""/>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxLogGeneric" name="LogGeneric" overloaded="no">
    <autodoc>LogGeneric(unsigned long level, String msg)</autodoc>
    <paramlist>
      <param name="level" type="unsigned long" default=""/>
      <param name="msg" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <function oldname="wxSafeShowMessage" name="SafeShowMessage" overloaded="no">
    <autodoc>SafeShowMessage(String title, String text)</autodoc>
    <paramlist>
      <param name="title" type="r.q(const).wxString" default=""/>
      <param name="text" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <class name="LogNull" oldname="wxLogNull" module="misc">
    <constructor name="LogNull" overloaded="no">
      <autodoc>__init__() -&gt; LogNull</autodoc>
    </constructor>
    <destructor name="~wxLogNull">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <class name="PyLog" oldname="wxPyLog" module="misc">
    <baseclass name="wxLog"/>
    <constructor name="PyLog" overloaded="no">
      <autodoc>__init__() -&gt; PyLog</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Process" oldname="wxPyProcess" module="misc">
    <baseclass name="wxEvtHandler"/>
    <staticmethod name="Kill" overloaded="no">
      <autodoc>Kill(int pid, int sig=SIGTERM) -&gt; int</autodoc>
      <paramlist>
        <param name="pid" type="int" default=""/>
        <param name="sig" type="wxSignal" default="wxSIGTERM"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Exists" overloaded="no">
      <autodoc>Exists(int pid) -&gt; bool</autodoc>
      <paramlist>
        <param name="pid" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Open" overloaded="no">
      <autodoc>Open(String cmd, int flags=EXEC_ASYNC) -&gt; Process</autodoc>
      <paramlist>
        <param name="cmd" type="r.q(const).wxString" default=""/>
        <param name="flags" type="int" default="wxEXEC_ASYNC"/>
      </paramlist>
    </staticmethod>
    <constructor name="wxPyProcess" overloaded="no">
      <autodoc>__init__(EvtHandler parent=None, int id=-1) -&gt; Process</autodoc>
      <paramlist>
        <param name="parent" type="p.wxEvtHandler" default="NULL"/>
        <param name="id" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_OnTerminate" overloaded="no">
      <autodoc>base_OnTerminate(int pid, int status)</autodoc>
      <paramlist>
        <param name="pid" type="int" default=""/>
        <param name="status" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Redirect" overloaded="no">
      <autodoc>Redirect()</autodoc>
    </method>
    <method name="IsRedirected" overloaded="no">
      <autodoc>IsRedirected() -&gt; bool</autodoc>
    </method>
    <method name="Detach" overloaded="no">
      <autodoc>Detach()</autodoc>
    </method>
    <method name="GetInputStream" overloaded="no">
      <autodoc>GetInputStream() -&gt; InputStream</autodoc>
    </method>
    <method name="GetErrorStream" overloaded="no">
      <autodoc>GetErrorStream() -&gt; InputStream</autodoc>
    </method>
    <method name="GetOutputStream" overloaded="no">
      <autodoc>GetOutputStream() -&gt; OutputStream</autodoc>
    </method>
    <method name="CloseOutput" overloaded="no">
      <autodoc>CloseOutput()</autodoc>
    </method>
    <method name="IsInputOpened" overloaded="no">
      <autodoc>IsInputOpened() -&gt; bool</autodoc>
    </method>
    <method name="IsInputAvailable" overloaded="no">
      <autodoc>IsInputAvailable() -&gt; bool</autodoc>
    </method>
    <method name="IsErrorAvailable" overloaded="no">
      <autodoc>IsErrorAvailable() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="ProcessEvent" oldname="wxProcessEvent" module="misc">
    <baseclass name="wxEvent"/>
    <constructor name="ProcessEvent" overloaded="no">
      <autodoc>__init__(int id=0, int pid=0, int exitcode=0) -&gt; ProcessEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
        <param name="pid" type="int" default="0"/>
        <param name="exitcode" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetPid" overloaded="no">
      <autodoc>GetPid() -&gt; int</autodoc>
    </method>
    <method name="GetExitCode" overloaded="no">
      <autodoc>GetExitCode() -&gt; int</autodoc>
    </method>
    <property name="m_pid" type="int" readonly="no"/>
    <property name="m_exitcode" type="int" readonly="no"/>
  </class>
  <pythoncode>
EVT_END_PROCESS = wx.PyEventBinder( wxEVT_END_PROCESS, 1 )
</pythoncode>
  <function oldname="wxExecute" name="Execute" overloaded="no">
    <autodoc>Execute(String command, int flags=EXEC_ASYNC, Process process=None) -&gt; long</autodoc>
    <paramlist>
      <param name="command" type="r.q(const).wxString" default=""/>
      <param name="flags" type="int" default="wxEXEC_ASYNC"/>
      <param name="process" type="p.wxPyProcess" default="NULL"/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Joystick" oldname="wxJoystick" module="misc">
    <constructor name="Joystick" overloaded="no">
      <autodoc>__init__(int joystick=JOYSTICK1) -&gt; Joystick</autodoc>
      <paramlist>
        <param name="joystick" type="int" default="wxJOYSTICK1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxJoystick">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="GetZPosition" overloaded="no">
      <autodoc>GetZPosition() -&gt; int</autodoc>
    </method>
    <method name="GetButtonState" overloaded="no">
      <autodoc>GetButtonState() -&gt; int</autodoc>
    </method>
    <method name="GetPOVPosition" overloaded="no">
      <autodoc>GetPOVPosition() -&gt; int</autodoc>
    </method>
    <method name="GetPOVCTSPosition" overloaded="no">
      <autodoc>GetPOVCTSPosition() -&gt; int</autodoc>
    </method>
    <method name="GetRudderPosition" overloaded="no">
      <autodoc>GetRudderPosition() -&gt; int</autodoc>
    </method>
    <method name="GetUPosition" overloaded="no">
      <autodoc>GetUPosition() -&gt; int</autodoc>
    </method>
    <method name="GetVPosition" overloaded="no">
      <autodoc>GetVPosition() -&gt; int</autodoc>
    </method>
    <method name="GetMovementThreshold" overloaded="no">
      <autodoc>GetMovementThreshold() -&gt; int</autodoc>
    </method>
    <method name="SetMovementThreshold" overloaded="no">
      <autodoc>SetMovementThreshold(int threshold)</autodoc>
      <paramlist>
        <param name="threshold" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <method name="GetNumberJoysticks" overloaded="no">
      <autodoc>GetNumberJoysticks() -&gt; int</autodoc>
    </method>
    <method name="GetManufacturerId" overloaded="no">
      <autodoc>GetManufacturerId() -&gt; int</autodoc>
    </method>
    <method name="GetProductId" overloaded="no">
      <autodoc>GetProductId() -&gt; int</autodoc>
    </method>
    <method name="GetProductName" overloaded="no">
      <autodoc>GetProductName() -&gt; String</autodoc>
    </method>
    <method name="GetXMin" overloaded="no">
      <autodoc>GetXMin() -&gt; int</autodoc>
    </method>
    <method name="GetYMin" overloaded="no">
      <autodoc>GetYMin() -&gt; int</autodoc>
    </method>
    <method name="GetZMin" overloaded="no">
      <autodoc>GetZMin() -&gt; int</autodoc>
    </method>
    <method name="GetXMax" overloaded="no">
      <autodoc>GetXMax() -&gt; int</autodoc>
    </method>
    <method name="GetYMax" overloaded="no">
      <autodoc>GetYMax() -&gt; int</autodoc>
    </method>
    <method name="GetZMax" overloaded="no">
      <autodoc>GetZMax() -&gt; int</autodoc>
    </method>
    <method name="GetNumberButtons" overloaded="no">
      <autodoc>GetNumberButtons() -&gt; int</autodoc>
    </method>
    <method name="GetNumberAxes" overloaded="no">
      <autodoc>GetNumberAxes() -&gt; int</autodoc>
    </method>
    <method name="GetMaxButtons" overloaded="no">
      <autodoc>GetMaxButtons() -&gt; int</autodoc>
    </method>
    <method name="GetMaxAxes" overloaded="no">
      <autodoc>GetMaxAxes() -&gt; int</autodoc>
    </method>
    <method name="GetPollingMin" overloaded="no">
      <autodoc>GetPollingMin() -&gt; int</autodoc>
    </method>
    <method name="GetPollingMax" overloaded="no">
      <autodoc>GetPollingMax() -&gt; int</autodoc>
    </method>
    <method name="GetRudderMin" overloaded="no">
      <autodoc>GetRudderMin() -&gt; int</autodoc>
    </method>
    <method name="GetRudderMax" overloaded="no">
      <autodoc>GetRudderMax() -&gt; int</autodoc>
    </method>
    <method name="GetUMin" overloaded="no">
      <autodoc>GetUMin() -&gt; int</autodoc>
    </method>
    <method name="GetUMax" overloaded="no">
      <autodoc>GetUMax() -&gt; int</autodoc>
    </method>
    <method name="GetVMin" overloaded="no">
      <autodoc>GetVMin() -&gt; int</autodoc>
    </method>
    <method name="GetVMax" overloaded="no">
      <autodoc>GetVMax() -&gt; int</autodoc>
    </method>
    <method name="HasRudder" overloaded="no">
      <autodoc>HasRudder() -&gt; bool</autodoc>
    </method>
    <method name="HasZ" overloaded="no">
      <autodoc>HasZ() -&gt; bool</autodoc>
    </method>
    <method name="HasU" overloaded="no">
      <autodoc>HasU() -&gt; bool</autodoc>
    </method>
    <method name="HasV" overloaded="no">
      <autodoc>HasV() -&gt; bool</autodoc>
    </method>
    <method name="HasPOV" overloaded="no">
      <autodoc>HasPOV() -&gt; bool</autodoc>
    </method>
    <method name="HasPOV4Dir" overloaded="no">
      <autodoc>HasPOV4Dir() -&gt; bool</autodoc>
    </method>
    <method name="HasPOVCTS" overloaded="no">
      <autodoc>HasPOVCTS() -&gt; bool</autodoc>
    </method>
    <method name="SetCapture" overloaded="no">
      <autodoc>SetCapture(Window win, int pollingFreq=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
        <param name="pollingFreq" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="ReleaseCapture" overloaded="no">
      <autodoc>ReleaseCapture() -&gt; bool</autodoc>
    </method>
    <pythoncode> def __nonzero__(self): return self.IsOk() </pythoncode>
  </class>
  <class name="JoystickEvent" oldname="wxJoystickEvent" module="misc">
    <baseclass name="wxEvent"/>
    <property name="m_pos" type="wxPoint" readonly="no"/>
    <property name="m_zPosition" type="int" readonly="no"/>
    <property name="m_buttonChange" type="int" readonly="no"/>
    <property name="m_buttonState" type="int" readonly="no"/>
    <property name="m_joyStick" type="int" readonly="no"/>
    <constructor name="JoystickEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, int state=0, int joystick=JOYSTICK1, 
    int change=0) -&gt; JoystickEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="state" type="int" default="0"/>
        <param name="joystick" type="int" default="wxJOYSTICK1"/>
        <param name="change" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="GetZPosition" overloaded="no">
      <autodoc>GetZPosition() -&gt; int</autodoc>
    </method>
    <method name="GetButtonState" overloaded="no">
      <autodoc>GetButtonState() -&gt; int</autodoc>
    </method>
    <method name="GetButtonChange" overloaded="no">
      <autodoc>GetButtonChange() -&gt; int</autodoc>
    </method>
    <method name="GetJoystick" overloaded="no">
      <autodoc>GetJoystick() -&gt; int</autodoc>
    </method>
    <method name="SetJoystick" overloaded="no">
      <autodoc>SetJoystick(int stick)</autodoc>
      <paramlist>
        <param name="stick" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetButtonState" overloaded="no">
      <autodoc>SetButtonState(int state)</autodoc>
      <paramlist>
        <param name="state" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetButtonChange" overloaded="no">
      <autodoc>SetButtonChange(int change)</autodoc>
      <paramlist>
        <param name="change" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetZPosition" overloaded="no">
      <autodoc>SetZPosition(int zPos)</autodoc>
      <paramlist>
        <param name="zPos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsButton" overloaded="no">
      <autodoc>IsButton() -&gt; bool</autodoc>
    </method>
    <method name="IsMove" overloaded="no">
      <autodoc>IsMove() -&gt; bool</autodoc>
    </method>
    <method name="IsZMove" overloaded="no">
      <autodoc>IsZMove() -&gt; bool</autodoc>
    </method>
    <method name="ButtonDown" overloaded="no">
      <autodoc>ButtonDown(int but=JOY_BUTTON_ANY) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default="wxJOY_BUTTON_ANY"/>
      </paramlist>
    </method>
    <method name="ButtonUp" overloaded="no">
      <autodoc>ButtonUp(int but=JOY_BUTTON_ANY) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default="wxJOY_BUTTON_ANY"/>
      </paramlist>
    </method>
    <method name="ButtonIsDown" overloaded="no">
      <autodoc>ButtonIsDown(int but=JOY_BUTTON_ANY) -&gt; bool</autodoc>
      <paramlist>
        <param name="but" type="int" default="wxJOY_BUTTON_ANY"/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
EVT_JOY_BUTTON_DOWN = wx.PyEventBinder( wxEVT_JOY_BUTTON_DOWN )
EVT_JOY_BUTTON_UP = wx.PyEventBinder( wxEVT_JOY_BUTTON_UP )
EVT_JOY_MOVE = wx.PyEventBinder( wxEVT_JOY_MOVE )
EVT_JOY_ZMOVE = wx.PyEventBinder( wxEVT_JOY_ZMOVE )

EVT_JOYSTICK_EVENTS = wx.PyEventBinder([ wxEVT_JOY_BUTTON_DOWN,
                                        wxEVT_JOY_BUTTON_UP, 
                                        wxEVT_JOY_MOVE, 
                                        wxEVT_JOY_ZMOVE,
                                        ])

</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Sound" oldname="wxSound" module="misc">
    <constructor name="Sound" overloaded="yes"/>
    <constructor name="Sound" overloaded="yes">
      <paramlist>
        <param name="fileName" type="r.q(const).wxString" default=""/>
        <param name="isResource" type="bool" default="false"/>
      </paramlist>
    </constructor>
    <constructor name="Sound" overloaded="yes">
      <autodoc>__init__() -&gt; Sound
__init__(String fileName, bool isResource=false) -&gt; Sound
__init__(int size, wxByte data) -&gt; Sound</autodoc>
      <paramlist>
        <param name="size" type="int" default=""/>
        <param name="data" type="p.q(const).wxByte" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxSound">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Create" overloaded="yes">
      <paramlist>
        <param name="fileName" type="r.q(const).wxString" default=""/>
        <param name="isResource" type="bool" default="false"/>
      </paramlist>
    </method>
    <method name="Create" overloaded="yes">
      <autodoc>Create(String fileName, bool isResource=false) -&gt; bool
Create(int size, wxByte data) -&gt; bool</autodoc>
      <paramlist>
        <param name="size" type="int" default=""/>
        <param name="data" type="p.q(const).wxByte" default=""/>
      </paramlist>
    </method>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <method name="Play" overloaded="no">
      <autodoc>Play(unsigned int flags=SOUND_ASYNC) -&gt; bool</autodoc>
      <paramlist>
        <param name="flags" type="unsigned int" default="wxSOUND_ASYNC"/>
      </paramlist>
    </method>
    <staticmethod name="PlaySound" overloaded="no">
      <autodoc>PlaySound(String filename, unsigned int flags=SOUND_ASYNC) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="flags" type="unsigned int" default="wxSOUND_ASYNC"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Stop" overloaded="no">
      <autodoc>Stop()</autodoc>
    </staticmethod>
    <pythoncode> def __nonzero__(self): return self.IsOk() </pythoncode>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="FileTypeInfo" oldname="wxFileTypeInfo" module="misc">
    <constructor name="FileTypeInfo" overloaded="no">
      <autodoc>__init__(String mimeType, String openCmd, String printCmd, String desc) -&gt; FileTypeInfo</autodoc>
      <paramlist>
        <param name="mimeType" type="r.q(const).wxString" default=""/>
        <param name="openCmd" type="r.q(const).wxString" default=""/>
        <param name="printCmd" type="r.q(const).wxString" default=""/>
        <param name="desc" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <constructor name="FileTypeInfoSequence" overloaded="no">
      <autodoc>FileTypeInfoSequence(wxArrayString sArray) -&gt; FileTypeInfo</autodoc>
      <paramlist>
        <param name="sArray" type="r.q(const).wxArrayString" default=""/>
      </paramlist>
    </constructor>
    <constructor name="NullFileTypeInfo" overloaded="no">
      <autodoc>NullFileTypeInfo() -&gt; FileTypeInfo</autodoc>
    </constructor>
    <method name="IsValid" overloaded="no">
      <autodoc>IsValid() -&gt; bool</autodoc>
    </method>
    <method name="SetIcon" overloaded="no">
      <autodoc>SetIcon(String iconFile, int iconIndex=0)</autodoc>
      <paramlist>
        <param name="iconFile" type="r.q(const).wxString" default=""/>
        <param name="iconIndex" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetShortDesc" overloaded="no">
      <autodoc>SetShortDesc(String shortDesc)</autodoc>
      <paramlist>
        <param name="shortDesc" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetMimeType" overloaded="no">
      <autodoc>GetMimeType() -&gt; String</autodoc>
    </method>
    <method name="GetOpenCommand" overloaded="no">
      <autodoc>GetOpenCommand() -&gt; String</autodoc>
    </method>
    <method name="GetPrintCommand" overloaded="no">
      <autodoc>GetPrintCommand() -&gt; String</autodoc>
    </method>
    <method name="GetShortDesc" overloaded="no">
      <autodoc>GetShortDesc() -&gt; String</autodoc>
    </method>
    <method name="GetDescription" overloaded="no">
      <autodoc>GetDescription() -&gt; String</autodoc>
    </method>
    <method name="GetExtensions" overloaded="no">
      <autodoc>GetExtensions() -&gt; wxArrayString</autodoc>
    </method>
    <method name="GetExtensionsCount" overloaded="no">
      <autodoc>GetExtensionsCount() -&gt; int</autodoc>
    </method>
    <method name="GetIconFile" overloaded="no">
      <autodoc>GetIconFile() -&gt; String</autodoc>
    </method>
    <method name="GetIconIndex" overloaded="no">
      <autodoc>GetIconIndex() -&gt; int</autodoc>
    </method>
  </class>
  <class name="FileType" oldname="wxFileType" module="misc">
    <constructor name="FileType" overloaded="no">
      <autodoc>__init__(FileTypeInfo ftInfo) -&gt; FileType</autodoc>
      <paramlist>
        <param name="ftInfo" type="r.q(const).wxFileTypeInfo" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxFileType">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetMimeType" overloaded="no">
      <autodoc>GetMimeType() -&gt; PyObject</autodoc>
    </method>
    <method name="GetMimeTypes" overloaded="no">
      <autodoc>GetMimeTypes() -&gt; PyObject</autodoc>
    </method>
    <method name="GetExtensions" overloaded="no">
      <autodoc>GetExtensions() -&gt; PyObject</autodoc>
    </method>
    <method name="GetIcon" overloaded="no">
      <autodoc>GetIcon() -&gt; Icon</autodoc>
    </method>
    <method name="GetIconInfo" overloaded="no">
      <autodoc>GetIconInfo() -&gt; PyObject</autodoc>
    </method>
    <method name="GetDescription" overloaded="no">
      <autodoc>GetDescription() -&gt; PyObject</autodoc>
    </method>
    <method name="GetOpenCommand" overloaded="no">
      <autodoc>GetOpenCommand(String filename, String mimetype=EmptyString) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetPrintCommand" overloaded="no">
      <autodoc>GetPrintCommand(String filename, String mimetype=EmptyString) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetAllCommands" overloaded="no">
      <autodoc>GetAllCommands(String filename, String mimetype=EmptyString) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="SetCommand" overloaded="no">
      <autodoc>SetCommand(String cmd, String verb, bool overwriteprompt=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="cmd" type="r.q(const).wxString" default=""/>
        <param name="verb" type="r.q(const).wxString" default=""/>
        <param name="overwriteprompt" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetDefaultIcon" overloaded="no">
      <autodoc>SetDefaultIcon(String cmd=EmptyString, int index=0) -&gt; bool</autodoc>
      <paramlist>
        <param name="cmd" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="index" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Unassociate" overloaded="no">
      <autodoc>Unassociate() -&gt; bool</autodoc>
    </method>
    <staticmethod name="ExpandCommand" overloaded="no">
      <autodoc>ExpandCommand(String command, String filename, String mimetype=EmptyString) -&gt; String</autodoc>
      <paramlist>
        <param name="command" type="r.q(const).wxString" default=""/>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="mimetype" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </staticmethod>
  </class>
  <class name="MimeTypesManager" oldname="wxMimeTypesManager" module="misc">
    <staticmethod name="IsOfType" overloaded="no">
      <autodoc>IsOfType(String mimeType, String wildcard) -&gt; bool</autodoc>
      <paramlist>
        <param name="mimeType" type="r.q(const).wxString" default=""/>
        <param name="wildcard" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <constructor name="MimeTypesManager" overloaded="no">
      <autodoc>__init__() -&gt; MimeTypesManager</autodoc>
    </constructor>
    <method name="Initialize" overloaded="no">
      <autodoc>Initialize(int mailcapStyle=MAILCAP_ALL, String extraDir=EmptyString)</autodoc>
      <paramlist>
        <param name="mailcapStyle" type="int" default="wxMAILCAP_ALL"/>
        <param name="extraDir" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="ClearData" overloaded="no">
      <autodoc>ClearData()</autodoc>
    </method>
    <method name="GetFileTypeFromExtension" overloaded="no">
      <autodoc>GetFileTypeFromExtension(String ext) -&gt; FileType</autodoc>
      <paramlist>
        <param name="ext" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetFileTypeFromMimeType" overloaded="no">
      <autodoc>GetFileTypeFromMimeType(String mimeType) -&gt; FileType</autodoc>
      <paramlist>
        <param name="mimeType" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ReadMailcap" overloaded="no">
      <autodoc>ReadMailcap(String filename, bool fallback=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="fallback" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="ReadMimeTypes" overloaded="no">
      <autodoc>ReadMimeTypes(String filename) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="EnumAllFileTypes" overloaded="no">
      <autodoc>EnumAllFileTypes() -&gt; PyObject</autodoc>
    </method>
    <method name="AddFallback" overloaded="no">
      <autodoc>AddFallback(FileTypeInfo ft)</autodoc>
      <paramlist>
        <param name="ft" type="r.q(const).wxFileTypeInfo" default=""/>
      </paramlist>
    </method>
    <method name="Associate" overloaded="no">
      <autodoc>Associate(FileTypeInfo ftInfo) -&gt; FileType</autodoc>
      <paramlist>
        <param name="ftInfo" type="r.q(const).wxFileTypeInfo" default=""/>
      </paramlist>
    </method>
    <method name="Unassociate" overloaded="no">
      <autodoc>Unassociate(FileType ft) -&gt; bool</autodoc>
      <paramlist>
        <param name="ft" type="p.wxFileType" default=""/>
      </paramlist>
    </method>
    <destructor name="~wxMimeTypesManager">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ArtProvider" oldname="wxPyArtProvider" module="misc">
    <constructor name="wxPyArtProvider" overloaded="no">
      <autodoc>__init__() -&gt; ArtProvider</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <staticmethod name="PushProvider" overloaded="no">
      <autodoc>PushProvider(ArtProvider provider)</autodoc>
      <docstring>Add new provider to the top of providers stack.</docstring>
      <paramlist>
        <param name="provider" type="p.wxPyArtProvider" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="PopProvider" overloaded="no">
      <autodoc>PopProvider() -&gt; bool</autodoc>
      <docstring>Remove latest added provider and delete it.</docstring>
    </staticmethod>
    <staticmethod name="RemoveProvider" overloaded="no">
      <autodoc>RemoveProvider(ArtProvider provider) -&gt; bool</autodoc>
      <docstring>Remove provider. The provider must have been added previously!
The provider is _not_ deleted.</docstring>
      <paramlist>
        <param name="provider" type="p.wxPyArtProvider" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap(String id, String client=ART_OTHER, Size size=DefaultSize) -&gt; Bitmap</autodoc>
      <docstring>Query the providers for bitmap with given ID and return it. Return
wx.NullBitmap if no provider provides it.</docstring>
      <paramlist>
        <param name="id" type="r.q(const).wxString" default=""/>
        <param name="client" type="r.q(const).wxString" default="wxPyART_OTHER"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetIcon" overloaded="no">
      <autodoc>GetIcon(String id, String client=ART_OTHER, Size size=DefaultSize) -&gt; Icon</autodoc>
      <docstring>Query the providers for icon with given ID and return it. Return
wx.NullIcon if no provider provides it.</docstring>
      <paramlist>
        <param name="id" type="r.q(const).wxString" default=""/>
        <param name="client" type="r.q(const).wxString" default="wxPyART_OTHER"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
      </paramlist>
    </staticmethod>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ConfigBase" oldname="wxConfigBase" module="misc">
    <destructor name="~wxConfigBase">
      <autodoc>__del__()</autodoc>
    </destructor>
    <staticmethod name="Set" overloaded="no">
      <autodoc>Set(ConfigBase pConfig) -&gt; ConfigBase</autodoc>
      <paramlist>
        <param name="pConfig" type="p.wxConfigBase" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Get" overloaded="no">
      <autodoc>Get(bool createOnDemand=True) -&gt; ConfigBase</autodoc>
      <paramlist>
        <param name="createOnDemand" type="bool" default="True"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Create" overloaded="no">
      <autodoc>Create() -&gt; ConfigBase</autodoc>
    </staticmethod>
    <staticmethod name="DontCreateOnDemand" overloaded="no">
      <autodoc>DontCreateOnDemand()</autodoc>
    </staticmethod>
    <method name="SetPath" overloaded="no">
      <autodoc>SetPath(String strPath)</autodoc>
      <paramlist>
        <param name="strPath" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetPath" overloaded="no">
      <autodoc>GetPath() -&gt; String</autodoc>
    </method>
    <method name="GetFirstGroup" overloaded="no">
      <autodoc>GetFirstGroup() -&gt; PyObject</autodoc>
    </method>
    <method name="GetNextGroup" overloaded="no">
      <autodoc>GetNextGroup(long index) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstEntry" overloaded="no">
      <autodoc>GetFirstEntry() -&gt; PyObject</autodoc>
    </method>
    <method name="GetNextEntry" overloaded="no">
      <autodoc>GetNextEntry(long index) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="index" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetNumberOfEntries" overloaded="no">
      <autodoc>GetNumberOfEntries(bool bRecursive=False) -&gt; size_t</autodoc>
      <paramlist>
        <param name="bRecursive" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="GetNumberOfGroups" overloaded="no">
      <autodoc>GetNumberOfGroups(bool bRecursive=False) -&gt; size_t</autodoc>
      <paramlist>
        <param name="bRecursive" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="HasGroup" overloaded="no">
      <autodoc>HasGroup(String strName) -&gt; bool</autodoc>
      <paramlist>
        <param name="strName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="HasEntry" overloaded="no">
      <autodoc>HasEntry(String strName) -&gt; bool</autodoc>
      <paramlist>
        <param name="strName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Exists" overloaded="no">
      <autodoc>Exists(String strName) -&gt; bool</autodoc>
      <paramlist>
        <param name="strName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetEntryType" overloaded="no">
      <autodoc>GetEntryType(String name) -&gt; int</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Read" overloaded="no">
      <autodoc>Read(String key, String defaultVal=EmptyString) -&gt; String</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="defaultVal" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="ReadInt" overloaded="no">
      <autodoc>ReadInt(String key, long defaultVal=0) -&gt; long</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="defaultVal" type="long" default="0"/>
      </paramlist>
    </method>
    <method name="ReadFloat" overloaded="no">
      <autodoc>ReadFloat(String key, double defaultVal=0.0) -&gt; double</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="defaultVal" type="double" default="0.0"/>
      </paramlist>
    </method>
    <method name="ReadBool" overloaded="no">
      <autodoc>ReadBool(String key, bool defaultVal=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="defaultVal" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="Write" overloaded="no">
      <autodoc>Write(String key, String value) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="WriteInt" overloaded="no">
      <autodoc>WriteInt(String key, long value) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="value" type="long" default=""/>
      </paramlist>
    </method>
    <method name="WriteFloat" overloaded="no">
      <autodoc>WriteFloat(String key, double value) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="value" type="double" default=""/>
      </paramlist>
    </method>
    <method name="WriteBool" overloaded="no">
      <autodoc>WriteBool(String key, bool value) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="value" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Flush" overloaded="no">
      <autodoc>Flush(bool bCurrentOnly=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="bCurrentOnly" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="RenameEntry" overloaded="no">
      <autodoc>RenameEntry(String oldName, String newName) -&gt; bool</autodoc>
      <paramlist>
        <param name="oldName" type="r.q(const).wxString" default=""/>
        <param name="newName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="RenameGroup" overloaded="no">
      <autodoc>RenameGroup(String oldName, String newName) -&gt; bool</autodoc>
      <paramlist>
        <param name="oldName" type="r.q(const).wxString" default=""/>
        <param name="newName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DeleteEntry" overloaded="no">
      <autodoc>DeleteEntry(String key, bool bDeleteGroupIfEmpty=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="bDeleteGroupIfEmpty" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DeleteGroup" overloaded="no">
      <autodoc>DeleteGroup(String key) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DeleteAll" overloaded="no">
      <autodoc>DeleteAll() -&gt; bool</autodoc>
    </method>
    <method name="IsExpandingEnvVars" overloaded="no">
      <autodoc>IsExpandingEnvVars() -&gt; bool</autodoc>
    </method>
    <method name="SetExpandEnvVars" overloaded="no">
      <autodoc>SetExpandEnvVars(bool bDoIt=True)</autodoc>
      <paramlist>
        <param name="bDoIt" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetRecordDefaults" overloaded="no">
      <autodoc>SetRecordDefaults(bool bDoIt=True)</autodoc>
      <paramlist>
        <param name="bDoIt" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="IsRecordingDefaults" overloaded="no">
      <autodoc>IsRecordingDefaults() -&gt; bool</autodoc>
    </method>
    <method name="ExpandEnvVars" overloaded="no">
      <autodoc>ExpandEnvVars(String str) -&gt; String</autodoc>
      <paramlist>
        <param name="str" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetAppName" overloaded="no">
      <autodoc>GetAppName() -&gt; String</autodoc>
    </method>
    <method name="GetVendorName" overloaded="no">
      <autodoc>GetVendorName() -&gt; String</autodoc>
    </method>
    <method name="SetAppName" overloaded="no">
      <autodoc>SetAppName(String appName)</autodoc>
      <paramlist>
        <param name="appName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetVendorName" overloaded="no">
      <autodoc>SetVendorName(String vendorName)</autodoc>
      <paramlist>
        <param name="vendorName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(long style)</autodoc>
      <paramlist>
        <param name="style" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; long</autodoc>
    </method>
  </class>
  <class name="ConfigPathChanger" oldname="wxConfigPathChanger" module="misc">
    <constructor name="ConfigPathChanger" overloaded="no">
      <autodoc>__init__(ConfigBase pContainer, String strEntry) -&gt; ConfigPathChanger</autodoc>
      <paramlist>
        <param name="pContainer" type="p.q(const).wxConfigBase" default=""/>
        <param name="strEntry" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxConfigPathChanger">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Name" overloaded="no">
      <autodoc>Name() -&gt; String</autodoc>
    </method>
  </class>
  <class name="Config" oldname="wxConfig" module="misc">
    <baseclass name="wxConfigBase"/>
    <constructor name="Config" overloaded="no">
      <autodoc>__init__(String appName=EmptyString, String vendorName=EmptyString, 
    String localFilename=EmptyString, String globalFilename=EmptyString, 
    long style=0) -&gt; Config</autodoc>
      <paramlist>
        <param name="appName" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="vendorName" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="localFilename" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="globalFilename" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxConfig">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <class name="FileConfig" oldname="wxFileConfig" module="misc">
    <baseclass name="wxConfigBase"/>
    <constructor name="FileConfig" overloaded="no">
      <autodoc>__init__(String appName=EmptyString, String vendorName=EmptyString, 
    String localFilename=EmptyString, String globalFilename=EmptyString, 
    long style=0) -&gt; FileConfig</autodoc>
      <paramlist>
        <param name="appName" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="vendorName" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="localFilename" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="globalFilename" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxFileConfig">
      <autodoc>__del__()</autodoc>
    </destructor>
  </class>
  <function oldname="wxExpandEnvVars" name="ExpandEnvVars" overloaded="no">
    <autodoc>ExpandEnvVars(String sz) -&gt; String</autodoc>
    <paramlist>
      <param name="sz" type="r.q(const).wxString" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="DateTime" oldname="wxDateTime" module="misc">
    <staticmethod name="SetCountry" overloaded="no">
      <autodoc>SetCountry(int country)</autodoc>
      <paramlist>
        <param name="country" type="wxDateTime::Country" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetCountry" overloaded="no">
      <autodoc>GetCountry() -&gt; int</autodoc>
    </staticmethod>
    <staticmethod name="IsWestEuropeanCountry" overloaded="no">
      <autodoc>IsWestEuropeanCountry(int country=Country_Default) -&gt; bool</autodoc>
      <paramlist>
        <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetCurrentYear" overloaded="no">
      <autodoc>GetCurrentYear(int cal=Gregorian) -&gt; int</autodoc>
      <paramlist>
        <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="ConvertYearToBC" overloaded="no">
      <autodoc>ConvertYearToBC(int year) -&gt; int</autodoc>
      <paramlist>
        <param name="year" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetCurrentMonth" overloaded="no">
      <autodoc>GetCurrentMonth(int cal=Gregorian) -&gt; int</autodoc>
      <paramlist>
        <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="IsLeapYear" overloaded="no">
      <autodoc>IsLeapYear(int year=Inv_Year, int cal=Gregorian) -&gt; bool</autodoc>
      <paramlist>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetCentury" overloaded="no">
      <autodoc>GetCentury(int year=Inv_Year) -&gt; int</autodoc>
      <paramlist>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetNumberOfDaysinYear" overloaded="no">
      <autodoc>GetNumberOfDaysinYear(int year, int cal=Gregorian) -&gt; int</autodoc>
      <paramlist>
        <param name="year" type="int" default=""/>
        <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetNumberOfDaysInMonth" overloaded="no">
      <autodoc>GetNumberOfDaysInMonth(int month, int year=Inv_Year, int cal=Gregorian) -&gt; int</autodoc>
      <paramlist>
        <param name="month" type="wxDateTime::Month" default=""/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetMonthName" overloaded="no">
      <autodoc>GetMonthName(int month, int flags=Name_Full) -&gt; String</autodoc>
      <paramlist>
        <param name="month" type="wxDateTime::Month" default=""/>
        <param name="flags" type="wxDateTime::NameFlags" default="wxDateTime::Name_Full"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetWeekDayName" overloaded="no">
      <autodoc>GetWeekDayName(int weekday, int flags=Name_Full) -&gt; String</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        <param name="flags" type="wxDateTime::NameFlags" default="wxDateTime::Name_Full"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetAmPmStrings" overloaded="no">
      <autodoc>GetAmPmStrings() -&gt; (am, pm)</autodoc>
      <docstring>Get the AM and PM strings in the current locale (may be empty)</docstring>
      <paramlist>
        <param name="OUTPUT" type="p.wxString" default=""/>
        <param name="OUTPUT" type="p.wxString" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="IsDSTApplicable" overloaded="no">
      <autodoc>IsDSTApplicable(int year=Inv_Year, int country=Country_Default) -&gt; bool</autodoc>
      <paramlist>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetBeginDST" overloaded="no">
      <autodoc>GetBeginDST(int year=Inv_Year, int country=Country_Default) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="GetEndDST" overloaded="no">
      <autodoc>GetEndDST(int year=Inv_Year, int country=Country_Default) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Now" overloaded="no">
      <autodoc>Now() -&gt; DateTime</autodoc>
    </staticmethod>
    <staticmethod name="UNow" overloaded="no">
      <autodoc>UNow() -&gt; DateTime</autodoc>
    </staticmethod>
    <staticmethod name="Today" overloaded="no">
      <autodoc>Today() -&gt; DateTime</autodoc>
    </staticmethod>
    <constructor name="DateTime" overloaded="no">
      <autodoc>__init__() -&gt; DateTime</autodoc>
    </constructor>
    <constructor name="DateTimeFromTimeT" overloaded="no">
      <autodoc>DateTimeFromTimeT(time_t timet) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="timet" type="time_t" default=""/>
      </paramlist>
    </constructor>
    <constructor name="DateTimeFromJDN" overloaded="no">
      <autodoc>DateTimeFromJDN(double jdn) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="jdn" type="double" default=""/>
      </paramlist>
    </constructor>
    <constructor name="DateTimeFromHMS" overloaded="no">
      <autodoc>DateTimeFromHMS(int hour, int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="hour" type="int" default=""/>
        <param name="minute" type="int" default="0"/>
        <param name="second" type="int" default="0"/>
        <param name="millisec" type="int" default="0"/>
      </paramlist>
    </constructor>
    <constructor name="DateTimeFromDMY" overloaded="no">
      <autodoc>DateTimeFromDMY(int day, int month=Inv_Month, int year=Inv_Year, int hour=0, 
    int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="day" type="int" default=""/>
        <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        <param name="hour" type="int" default="0"/>
        <param name="minute" type="int" default="0"/>
        <param name="second" type="int" default="0"/>
        <param name="millisec" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxDateTime">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetToCurrent" overloaded="no">
      <autodoc>SetToCurrent() -&gt; DateTime</autodoc>
    </method>
    <method name="SetTimeT" overloaded="no">
      <autodoc>SetTimeT(time_t timet) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="timet" type="time_t" default=""/>
      </paramlist>
    </method>
    <method name="SetJDN" overloaded="no">
      <autodoc>SetJDN(double jdn) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="jdn" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetHMS" overloaded="no">
      <autodoc>SetHMS(int hour, int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="hour" type="int" default=""/>
        <param name="minute" type="int" default="0"/>
        <param name="second" type="int" default="0"/>
        <param name="millisec" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(int day, int month=Inv_Month, int year=Inv_Year, int hour=0, 
    int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="day" type="int" default=""/>
        <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        <param name="hour" type="int" default="0"/>
        <param name="minute" type="int" default="0"/>
        <param name="second" type="int" default="0"/>
        <param name="millisec" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="ResetTime" overloaded="no">
      <autodoc>ResetTime() -&gt; DateTime</autodoc>
    </method>
    <method name="SetYear" overloaded="no">
      <autodoc>SetYear(int year) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="year" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMonth" overloaded="no">
      <autodoc>SetMonth(int month) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="month" type="wxDateTime::Month" default=""/>
      </paramlist>
    </method>
    <method name="SetDay" overloaded="no">
      <autodoc>SetDay(int day) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="day" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetHour" overloaded="no">
      <autodoc>SetHour(int hour) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="hour" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMinute" overloaded="no">
      <autodoc>SetMinute(int minute) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="minute" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSecond" overloaded="no">
      <autodoc>SetSecond(int second) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="second" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMillisecond" overloaded="no">
      <autodoc>SetMillisecond(int millisecond) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="millisecond" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetToWeekDayInSameWeek" overloaded="no">
      <autodoc>SetToWeekDayInSameWeek(int weekday, int flags=Monday_First) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
      </paramlist>
    </method>
    <method name="GetWeekDayInSameWeek" overloaded="no">
      <autodoc>GetWeekDayInSameWeek(int weekday, int flags=Monday_First) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
      </paramlist>
    </method>
    <method name="SetToNextWeekDay" overloaded="no">
      <autodoc>SetToNextWeekDay(int weekday) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
      </paramlist>
    </method>
    <method name="GetNextWeekDay" overloaded="no">
      <autodoc>GetNextWeekDay(int weekday) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
      </paramlist>
    </method>
    <method name="SetToPrevWeekDay" overloaded="no">
      <autodoc>SetToPrevWeekDay(int weekday) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
      </paramlist>
    </method>
    <method name="GetPrevWeekDay" overloaded="no">
      <autodoc>GetPrevWeekDay(int weekday) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
      </paramlist>
    </method>
    <method name="SetToWeekDay" overloaded="no">
      <autodoc>SetToWeekDay(int weekday, int n=1, int month=Inv_Month, int year=Inv_Year) -&gt; bool</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        <param name="n" type="int" default="1"/>
        <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
      </paramlist>
    </method>
    <method name="SetToLastWeekDay" overloaded="no">
      <autodoc>SetToLastWeekDay(int weekday, int month=Inv_Month, int year=Inv_Year) -&gt; bool</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
      </paramlist>
    </method>
    <method name="GetLastWeekDay" overloaded="no">
      <autodoc>GetLastWeekDay(int weekday, int month=Inv_Month, int year=Inv_Year) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
      </paramlist>
    </method>
    <method name="SetToTheWeek" overloaded="no">
      <autodoc>SetToTheWeek(int numWeek, int weekday=Mon, int flags=Monday_First) -&gt; bool</autodoc>
      <paramlist>
        <param name="numWeek" type="int" default=""/>
        <param name="weekday" type="wxDateTime::WeekDay" default="wxDateTime::Mon"/>
        <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
      </paramlist>
    </method>
    <method name="GetWeek" overloaded="no">
      <autodoc>GetWeek(int numWeek, int weekday=Mon, int flags=Monday_First) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="numWeek" type="int" default=""/>
        <param name="weekday" type="wxDateTime::WeekDay" default="wxDateTime::Mon"/>
        <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
      </paramlist>
    </method>
    <method name="SetToLastMonthDay" overloaded="no">
      <autodoc>SetToLastMonthDay(int month=Inv_Month, int year=Inv_Year) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
      </paramlist>
    </method>
    <method name="GetLastMonthDay" overloaded="no">
      <autodoc>GetLastMonthDay(int month=Inv_Month, int year=Inv_Year) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
        <param name="year" type="int" default="wxDateTime::Inv_Year"/>
      </paramlist>
    </method>
    <method name="SetToYearDay" overloaded="no">
      <autodoc>SetToYearDay(int yday) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="yday" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetYearDay" overloaded="no">
      <autodoc>GetYearDay(int yday) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="yday" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetJulianDayNumber" overloaded="no">
      <autodoc>GetJulianDayNumber() -&gt; double</autodoc>
    </method>
    <method name="GetJDN" overloaded="no">
      <autodoc>GetJDN() -&gt; double</autodoc>
    </method>
    <method name="GetModifiedJulianDayNumber" overloaded="no">
      <autodoc>GetModifiedJulianDayNumber() -&gt; double</autodoc>
    </method>
    <method name="GetMJD" overloaded="no">
      <autodoc>GetMJD() -&gt; double</autodoc>
    </method>
    <method name="GetRataDie" overloaded="no">
      <autodoc>GetRataDie() -&gt; double</autodoc>
    </method>
    <method name="ToTimezone" overloaded="no">
      <autodoc>ToTimezone(wxDateTime::TimeZone tz, bool noDST=False) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default=""/>
        <param name="noDST" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="MakeTimezone" overloaded="no">
      <autodoc>MakeTimezone(wxDateTime::TimeZone tz, bool noDST=False) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default=""/>
        <param name="noDST" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="ToGMT" overloaded="no">
      <autodoc>ToGMT(bool noDST=False) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="noDST" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="MakeGMT" overloaded="no">
      <autodoc>MakeGMT(bool noDST=False) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="noDST" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="IsDST" overloaded="no">
      <autodoc>IsDST(int country=Country_Default) -&gt; int</autodoc>
      <paramlist>
        <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
      </paramlist>
    </method>
    <method name="IsValid" overloaded="no">
      <autodoc>IsValid() -&gt; bool</autodoc>
    </method>
    <pythoncode> Ok = IsValid </pythoncode>
    <pythoncode> def __nonzero__(self): return self.Ok() </pythoncode>
    <method name="GetTicks" overloaded="no">
      <autodoc>GetTicks() -&gt; time_t</autodoc>
    </method>
    <method name="GetYear" overloaded="no">
      <autodoc>GetYear(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetMonth" overloaded="no">
      <autodoc>GetMonth(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetDay" overloaded="no">
      <autodoc>GetDay(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetWeekDay" overloaded="no">
      <autodoc>GetWeekDay(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetHour" overloaded="no">
      <autodoc>GetHour(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetMinute" overloaded="no">
      <autodoc>GetMinute(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetSecond" overloaded="no">
      <autodoc>GetSecond(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetMillisecond" overloaded="no">
      <autodoc>GetMillisecond(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetDayOfYear" overloaded="no">
      <autodoc>GetDayOfYear(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetWeekOfYear" overloaded="no">
      <autodoc>GetWeekOfYear(int flags=Monday_First, wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="GetWeekOfMonth" overloaded="no">
      <autodoc>GetWeekOfMonth(int flags=Monday_First, wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
      <paramlist>
        <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="IsWorkDay" overloaded="no">
      <autodoc>IsWorkDay(int country=Country_Default) -&gt; bool</autodoc>
      <paramlist>
        <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
      </paramlist>
    </method>
    <method name="IsEqualTo" overloaded="no">
      <autodoc>IsEqualTo(DateTime datetime) -&gt; bool</autodoc>
      <paramlist>
        <param name="datetime" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="IsEarlierThan" overloaded="no">
      <autodoc>IsEarlierThan(DateTime datetime) -&gt; bool</autodoc>
      <paramlist>
        <param name="datetime" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="IsLaterThan" overloaded="no">
      <autodoc>IsLaterThan(DateTime datetime) -&gt; bool</autodoc>
      <paramlist>
        <param name="datetime" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="IsStrictlyBetween" overloaded="no">
      <autodoc>IsStrictlyBetween(DateTime t1, DateTime t2) -&gt; bool</autodoc>
      <paramlist>
        <param name="t1" type="r.q(const).wxDateTime" default=""/>
        <param name="t2" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="IsBetween" overloaded="no">
      <autodoc>IsBetween(DateTime t1, DateTime t2) -&gt; bool</autodoc>
      <paramlist>
        <param name="t1" type="r.q(const).wxDateTime" default=""/>
        <param name="t2" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="IsSameDate" overloaded="no">
      <autodoc>IsSameDate(DateTime dt) -&gt; bool</autodoc>
      <paramlist>
        <param name="dt" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="IsSameTime" overloaded="no">
      <autodoc>IsSameTime(DateTime dt) -&gt; bool</autodoc>
      <paramlist>
        <param name="dt" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="IsEqualUpTo" overloaded="no">
      <autodoc>IsEqualUpTo(DateTime dt, TimeSpan ts) -&gt; bool</autodoc>
      <paramlist>
        <param name="dt" type="r.q(const).wxDateTime" default=""/>
        <param name="ts" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="AddTS" overloaded="no">
      <autodoc>AddTS(TimeSpan diff) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="AddDS" overloaded="no">
      <autodoc>AddDS(DateSpan diff) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="SubtractTS" overloaded="no">
      <autodoc>SubtractTS(TimeSpan diff) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="SubtractDS" overloaded="no">
      <autodoc>SubtractDS(DateSpan diff) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="Subtract" overloaded="no">
      <autodoc>Subtract(DateTime dt) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="dt" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="__iadd__" overloaded="yes">
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__iadd__" overloaded="yes">
      <autodoc>__iadd__(TimeSpan diff) -&gt; DateTime
__iadd__(DateSpan diff) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__isub__" overloaded="yes">
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__isub__" overloaded="yes">
      <autodoc>__isub__(TimeSpan diff) -&gt; DateTime
__isub__(DateSpan diff) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__add__" overloaded="yes">
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__add__" overloaded="yes">
      <autodoc>__add__(TimeSpan other) -&gt; DateTime
__add__(DateSpan other) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="yes">
      <paramlist>
        <param name="other" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="yes">
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="yes">
      <autodoc>__sub__(DateTime other) -&gt; TimeSpan
__sub__(TimeSpan other) -&gt; DateTime
__sub__(DateSpan other) -&gt; DateTime</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__lt__" overloaded="no">
      <autodoc>__lt__(DateTime other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="__le__" overloaded="no">
      <autodoc>__le__(DateTime other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="__gt__" overloaded="no">
      <autodoc>__gt__(DateTime other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="__ge__" overloaded="no">
      <autodoc>__ge__(DateTime other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(DateTime other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(DateTime other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="ParseRfc822Date" overloaded="no">
      <autodoc>ParseRfc822Date(String date) -&gt; int</autodoc>
      <paramlist>
        <param name="date" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ParseFormat" overloaded="no">
      <autodoc>ParseFormat(String date, String format=DateFormatStr, DateTime dateDef=DefaultDateTime) -&gt; int</autodoc>
      <paramlist>
        <param name="date" type="r.q(const).wxString" default=""/>
        <param name="format" type="r.q(const).wxString" default="wxPyDateFormatStr"/>
        <param name="dateDef" type="r.q(const).wxDateTime" default="wxDefaultDateTime"/>
      </paramlist>
    </method>
    <method name="ParseDateTime" overloaded="no">
      <autodoc>ParseDateTime(String datetime) -&gt; int</autodoc>
      <paramlist>
        <param name="datetime" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ParseDate" overloaded="no">
      <autodoc>ParseDate(String date) -&gt; int</autodoc>
      <paramlist>
        <param name="date" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ParseTime" overloaded="no">
      <autodoc>ParseTime(String time) -&gt; int</autodoc>
      <paramlist>
        <param name="time" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Format" overloaded="no">
      <autodoc>Format(String format=DateFormatStr, wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; String</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxString" default="wxPyDateFormatStr"/>
        <param name="tz" type="r.q(const).wxDateTime::TimeZone" default="LOCAL_TZ"/>
      </paramlist>
    </method>
    <method name="FormatDate" overloaded="no">
      <autodoc>FormatDate() -&gt; String</autodoc>
    </method>
    <method name="FormatTime" overloaded="no">
      <autodoc>FormatTime() -&gt; String</autodoc>
    </method>
    <method name="FormatISODate" overloaded="no">
      <autodoc>FormatISODate() -&gt; String</autodoc>
    </method>
    <method name="FormatISOTime" overloaded="no">
      <autodoc>FormatISOTime() -&gt; String</autodoc>
    </method>
    <pythoncode>
    def __repr__(self):
        return '&lt;wxDateTime: \\"%s\\" at %s&gt;' % ( self.Format(), self.this)
    def __str__(self):
        return self.Format()
    </pythoncode>
  </class>
  <class name="TimeSpan" oldname="wxTimeSpan" module="misc">
    <staticmethod name="Seconds" overloaded="no">
      <autodoc>Seconds(long sec) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="sec" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Second" overloaded="no">
      <autodoc>Second() -&gt; TimeSpan</autodoc>
    </staticmethod>
    <staticmethod name="Minutes" overloaded="no">
      <autodoc>Minutes(long min) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="min" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Minute" overloaded="no">
      <autodoc>Minute() -&gt; TimeSpan</autodoc>
    </staticmethod>
    <staticmethod name="Hours" overloaded="no">
      <autodoc>Hours(long hours) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="hours" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Hour" overloaded="no">
      <autodoc>Hour() -&gt; TimeSpan</autodoc>
    </staticmethod>
    <staticmethod name="Days" overloaded="no">
      <autodoc>Days(long days) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="days" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Day" overloaded="no">
      <autodoc>Day() -&gt; TimeSpan</autodoc>
    </staticmethod>
    <staticmethod name="Weeks" overloaded="no">
      <autodoc>Weeks(long days) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="days" type="long" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Week" overloaded="no">
      <autodoc>Week() -&gt; TimeSpan</autodoc>
    </staticmethod>
    <constructor name="TimeSpan" overloaded="no">
      <autodoc>__init__(long hours=0, long minutes=0, long seconds=0, long milliseconds=0) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="hours" type="long" default="0"/>
        <param name="minutes" type="long" default="0"/>
        <param name="seconds" type="long" default="0"/>
        <param name="milliseconds" type="long" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxTimeSpan">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Add" overloaded="no">
      <autodoc>Add(TimeSpan diff) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="Subtract" overloaded="no">
      <autodoc>Subtract(TimeSpan diff) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="Multiply" overloaded="no">
      <autodoc>Multiply(int n) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Neg" overloaded="no">
      <autodoc>Neg() -&gt; TimeSpan</autodoc>
    </method>
    <method name="Abs" overloaded="no">
      <autodoc>Abs() -&gt; TimeSpan</autodoc>
    </method>
    <method name="__iadd__" overloaded="no">
      <autodoc>__iadd__(TimeSpan diff) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__isub__" overloaded="no">
      <autodoc>__isub__(TimeSpan diff) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="diff" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__imul__" overloaded="no">
      <autodoc>__imul__(int n) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__neg__" overloaded="no">
      <autodoc>__neg__() -&gt; TimeSpan</autodoc>
    </method>
    <method name="__add__" overloaded="no">
      <autodoc>__add__(TimeSpan other) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="no">
      <autodoc>__sub__(TimeSpan other) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__mul__" overloaded="no">
      <autodoc>__mul__(int n) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__rmul__" overloaded="no">
      <autodoc>__rmul__(int n) -&gt; TimeSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__lt__" overloaded="no">
      <autodoc>__lt__(TimeSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__le__" overloaded="no">
      <autodoc>__le__(TimeSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__gt__" overloaded="no">
      <autodoc>__gt__(TimeSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__ge__" overloaded="no">
      <autodoc>__ge__(TimeSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(TimeSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(TimeSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="IsNull" overloaded="no">
      <autodoc>IsNull() -&gt; bool</autodoc>
    </method>
    <method name="IsPositive" overloaded="no">
      <autodoc>IsPositive() -&gt; bool</autodoc>
    </method>
    <method name="IsNegative" overloaded="no">
      <autodoc>IsNegative() -&gt; bool</autodoc>
    </method>
    <method name="IsEqualTo" overloaded="no">
      <autodoc>IsEqualTo(TimeSpan ts) -&gt; bool</autodoc>
      <paramlist>
        <param name="ts" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="IsLongerThan" overloaded="no">
      <autodoc>IsLongerThan(TimeSpan ts) -&gt; bool</autodoc>
      <paramlist>
        <param name="ts" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="IsShorterThan" overloaded="no">
      <autodoc>IsShorterThan(TimeSpan t) -&gt; bool</autodoc>
      <paramlist>
        <param name="t" type="r.q(const).wxTimeSpan" default=""/>
      </paramlist>
    </method>
    <method name="GetWeeks" overloaded="no">
      <autodoc>GetWeeks() -&gt; int</autodoc>
    </method>
    <method name="GetDays" overloaded="no">
      <autodoc>GetDays() -&gt; int</autodoc>
    </method>
    <method name="GetHours" overloaded="no">
      <autodoc>GetHours() -&gt; int</autodoc>
    </method>
    <method name="GetMinutes" overloaded="no">
      <autodoc>GetMinutes() -&gt; int</autodoc>
    </method>
    <method name="GetSeconds" overloaded="no">
      <autodoc>GetSeconds() -&gt; wxLongLong</autodoc>
    </method>
    <method name="GetMilliseconds" overloaded="no">
      <autodoc>GetMilliseconds() -&gt; wxLongLong</autodoc>
    </method>
    <method name="Format" overloaded="no">
      <autodoc>Format(String format=TimeSpanFormatStr) -&gt; String</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxString" default="wxPyTimeSpanFormatStr"/>
      </paramlist>
    </method>
    <pythoncode>
     def __repr__(self):
         return '&lt;wxTimeSpan: \\"%s\\" at %s&gt;' % ( self.Format(), self.this)
     def __str__(self):
         return self.Format()
     </pythoncode>
  </class>
  <class name="DateSpan" oldname="wxDateSpan" module="misc">
    <constructor name="DateSpan" overloaded="no">
      <autodoc>__init__(int years=0, int months=0, int weeks=0, int days=0) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="years" type="int" default="0"/>
        <param name="months" type="int" default="0"/>
        <param name="weeks" type="int" default="0"/>
        <param name="days" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxDateSpan">
      <autodoc>__del__()</autodoc>
    </destructor>
    <staticmethod name="Days" overloaded="no">
      <autodoc>Days(int days) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="days" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Day" overloaded="no">
      <autodoc>Day() -&gt; DateSpan</autodoc>
    </staticmethod>
    <staticmethod name="Weeks" overloaded="no">
      <autodoc>Weeks(int weeks) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="weeks" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Week" overloaded="no">
      <autodoc>Week() -&gt; DateSpan</autodoc>
    </staticmethod>
    <staticmethod name="Months" overloaded="no">
      <autodoc>Months(int mon) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="mon" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Month" overloaded="no">
      <autodoc>Month() -&gt; DateSpan</autodoc>
    </staticmethod>
    <staticmethod name="Years" overloaded="no">
      <autodoc>Years(int years) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="years" type="int" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="Year" overloaded="no">
      <autodoc>Year() -&gt; DateSpan</autodoc>
    </staticmethod>
    <method name="SetYears" overloaded="no">
      <autodoc>SetYears(int n) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMonths" overloaded="no">
      <autodoc>SetMonths(int n) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWeeks" overloaded="no">
      <autodoc>SetWeeks(int n) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDays" overloaded="no">
      <autodoc>SetDays(int n) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetYears" overloaded="no">
      <autodoc>GetYears() -&gt; int</autodoc>
    </method>
    <method name="GetMonths" overloaded="no">
      <autodoc>GetMonths() -&gt; int</autodoc>
    </method>
    <method name="GetWeeks" overloaded="no">
      <autodoc>GetWeeks() -&gt; int</autodoc>
    </method>
    <method name="GetDays" overloaded="no">
      <autodoc>GetDays() -&gt; int</autodoc>
    </method>
    <method name="GetTotalDays" overloaded="no">
      <autodoc>GetTotalDays() -&gt; int</autodoc>
    </method>
    <method name="Add" overloaded="no">
      <autodoc>Add(DateSpan other) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="Subtract" overloaded="no">
      <autodoc>Subtract(DateSpan other) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="Neg" overloaded="no">
      <autodoc>Neg() -&gt; DateSpan</autodoc>
    </method>
    <method name="Multiply" overloaded="no">
      <autodoc>Multiply(int factor) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="factor" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__iadd__" overloaded="no">
      <autodoc>__iadd__(DateSpan other) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__isub__" overloaded="no">
      <autodoc>__isub__(DateSpan other) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__neg__" overloaded="no">
      <autodoc>__neg__() -&gt; DateSpan</autodoc>
    </method>
    <method name="__imul__" overloaded="no">
      <autodoc>__imul__(int factor) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="factor" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__add__" overloaded="no">
      <autodoc>__add__(DateSpan other) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__sub__" overloaded="no">
      <autodoc>__sub__(DateSpan other) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__mul__" overloaded="no">
      <autodoc>__mul__(int n) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__rmul__" overloaded="no">
      <autodoc>__rmul__(int n) -&gt; DateSpan</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(DateSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(DateSpan other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxDateSpan" default=""/>
      </paramlist>
    </method>
  </class>
  <function oldname="wxGetLocalTime" name="GetLocalTime" overloaded="no">
    <autodoc>GetLocalTime() -&gt; long</autodoc>
  </function>
  <function oldname="wxGetUTCTime" name="GetUTCTime" overloaded="no">
    <autodoc>GetUTCTime() -&gt; long</autodoc>
  </function>
  <function oldname="wxGetCurrentTime" name="GetCurrentTime" overloaded="no">
    <autodoc>GetCurrentTime() -&gt; long</autodoc>
  </function>
  <function oldname="wxGetLocalTimeMillis" name="GetLocalTimeMillis" overloaded="no">
    <autodoc>GetLocalTimeMillis() -&gt; wxLongLong</autodoc>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="DataFormat" oldname="wxDataFormat" module="misc">
    <constructor name="DataFormat" overloaded="no">
      <autodoc>__init__(int type) -&gt; DataFormat</autodoc>
      <paramlist>
        <param name="type" type="wxDataFormatId" default=""/>
      </paramlist>
    </constructor>
    <constructor name="CustomDataFormat" overloaded="no">
      <autodoc>CustomDataFormat(String format) -&gt; DataFormat</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <destructor name="~wxDataFormat">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="__eq__" overloaded="yes">
      <paramlist>
        <param name="format" type="wxDataFormatId" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="yes">
      <paramlist>
        <param name="format" type="wxDataFormatId" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="yes">
      <autodoc>__eq__(int format) -&gt; bool
__eq__(DataFormat format) -&gt; bool</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="yes">
      <autodoc>__ne__(int format) -&gt; bool
__ne__(DataFormat format) -&gt; bool</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
      </paramlist>
    </method>
    <method name="SetType" overloaded="no">
      <autodoc>SetType(int format)</autodoc>
      <paramlist>
        <param name="format" type="wxDataFormatId" default=""/>
      </paramlist>
    </method>
    <method name="GetType" overloaded="no">
      <autodoc>GetType() -&gt; int</autodoc>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; String</autodoc>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(String format)</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="DataObject" oldname="wxDataObject" module="misc">
    <destructor name="~wxDataObject">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetPreferredFormat" overloaded="no">
      <autodoc>GetPreferredFormat(int dir=Get) -&gt; DataFormat</autodoc>
      <paramlist>
        <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
      </paramlist>
    </method>
    <method name="GetFormatCount" overloaded="no">
      <autodoc>GetFormatCount(int dir=Get) -&gt; size_t</autodoc>
      <paramlist>
        <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
      </paramlist>
    </method>
    <method name="IsSupported" overloaded="no">
      <autodoc>IsSupported(DataFormat format, int dir=Get) -&gt; bool</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
        <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
      </paramlist>
    </method>
    <method name="GetDataSize" overloaded="no">
      <autodoc>GetDataSize(DataFormat format) -&gt; size_t</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
      </paramlist>
    </method>
    <method name="GetAllFormats" overloaded="no">
      <autodoc>GetAllFormats(DataFormat formats, int dir=Get)</autodoc>
      <paramlist>
        <param name="formats" type="p.wxDataFormat" default=""/>
        <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
      </paramlist>
    </method>
    <method name="GetDataHere" overloaded="no">
      <autodoc>GetDataHere(DataFormat format, void buf) -&gt; bool</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
        <param name="buf" type="p.void" default=""/>
      </paramlist>
    </method>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(DataFormat format, size_t len, void buf) -&gt; bool</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
        <param name="len" type="size_t" default=""/>
        <param name="buf" type="p.q(const).void" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="DataObjectSimple" oldname="wxDataObjectSimple" module="misc">
    <baseclass name="wxDataObject"/>
    <constructor name="DataObjectSimple" overloaded="no">
      <autodoc>__init__(DataFormat format=FormatInvalid) -&gt; DataObjectSimple</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default="wxFormatInvalid"/>
      </paramlist>
    </constructor>
    <method name="GetFormat" overloaded="no">
      <autodoc>GetFormat() -&gt; DataFormat</autodoc>
    </method>
    <method name="SetFormat" overloaded="no">
      <autodoc>SetFormat(DataFormat format)</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyDataObjectSimple" oldname="wxPyDataObjectSimple" module="misc">
    <baseclass name="wxDataObjectSimple"/>
    <constructor name="PyDataObjectSimple" overloaded="no">
      <autodoc>__init__(DataFormat format=FormatInvalid) -&gt; PyDataObjectSimple</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default="wxFormatInvalid"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="DataObjectComposite" oldname="wxDataObjectComposite" module="misc">
    <baseclass name="wxDataObject"/>
    <constructor name="DataObjectComposite" overloaded="no">
      <autodoc>__init__() -&gt; DataObjectComposite</autodoc>
    </constructor>
    <method name="Add" overloaded="no">
      <autodoc>Add(DataObjectSimple dataObject, int preferred=False)</autodoc>
      <paramlist>
        <param name="dataObject" type="p.wxDataObjectSimple" default=""/>
        <param name="preferred" type="int" default="False"/>
      </paramlist>
    </method>
  </class>
  <class name="TextDataObject" oldname="wxTextDataObject" module="misc">
    <baseclass name="wxDataObjectSimple"/>
    <constructor name="TextDataObject" overloaded="no">
      <autodoc>__init__(String text=EmptyString) -&gt; TextDataObject</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <method name="GetTextLength" overloaded="no">
      <autodoc>GetTextLength() -&gt; size_t</autodoc>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyTextDataObject" oldname="wxPyTextDataObject" module="misc">
    <baseclass name="wxTextDataObject"/>
    <constructor name="PyTextDataObject" overloaded="no">
      <autodoc>__init__(String text=EmptyString) -&gt; PyTextDataObject</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="BitmapDataObject" oldname="wxBitmapDataObject" module="misc">
    <baseclass name="wxDataObjectSimple"/>
    <constructor name="BitmapDataObject" overloaded="no">
      <autodoc>__init__(Bitmap bitmap=wxNullBitmap) -&gt; BitmapDataObject</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
      </paramlist>
    </constructor>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="SetBitmap" overloaded="no">
      <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyBitmapDataObject" oldname="wxPyBitmapDataObject" module="misc">
    <baseclass name="wxBitmapDataObject"/>
    <constructor name="PyBitmapDataObject" overloaded="no">
      <autodoc>__init__(Bitmap bitmap=wxNullBitmap) -&gt; PyBitmapDataObject</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="FileDataObject" oldname="wxFileDataObject" module="misc">
    <baseclass name="wxDataObjectSimple"/>
    <constructor name="FileDataObject" overloaded="no">
      <autodoc>__init__() -&gt; FileDataObject</autodoc>
    </constructor>
    <method name="GetFilenames" overloaded="no">
      <autodoc>GetFilenames() -&gt; wxArrayString</autodoc>
    </method>
  </class>
  <class name="CustomDataObject" oldname="wxCustomDataObject" module="misc">
    <baseclass name="wxDataObjectSimple"/>
    <constructor name="CustomDataObject" overloaded="no">
      <autodoc>__init__(DataFormat format=FormatInvalid) -&gt; CustomDataObject</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default="wxFormatInvalid"/>
      </paramlist>
    </constructor>
    <method name="TakeData" overloaded="no">
      <autodoc>TakeData(PyObject data)</autodoc>
      <paramlist>
        <param name="data" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(PyObject data) -&gt; bool</autodoc>
      <paramlist>
        <param name="data" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; size_t</autodoc>
    </method>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; PyObject</autodoc>
    </method>
  </class>
  <class name="URLDataObject" oldname="wxURLDataObject" module="misc">
    <baseclass name="wxDataObjectComposite"/>
    <constructor name="URLDataObject" overloaded="no">
      <autodoc>__init__() -&gt; URLDataObject</autodoc>
    </constructor>
    <method name="GetURL" overloaded="no">
      <autodoc>GetURL() -&gt; String</autodoc>
    </method>
    <method name="SetURL" overloaded="no">
      <autodoc>SetURL(String url)</autodoc>
      <paramlist>
        <param name="url" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="MetafileDataObject" oldname="wxMetafileDataObject" module="misc">
    <baseclass name="wxDataObjectSimple"/>
    <constructor name="MetafileDataObject" overloaded="no">
      <autodoc>__init__() -&gt; MetafileDataObject</autodoc>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <function oldname="wxIsDragResultOk" name="IsDragResultOk" overloaded="no">
    <autodoc>IsDragResultOk(int res) -&gt; bool</autodoc>
    <paramlist>
      <param name="res" type="wxDragResult" default=""/>
    </paramlist>
  </function>
  <class name="DropSource" oldname="wxPyDropSource" module="misc">
    <constructor name="wxPyDropSource" overloaded="no">
      <autodoc>__init__(Window win, Icon copy=wxNullIcon, Icon move=wxNullIcon, 
    Icon none=wxNullIcon) -&gt; DropSource</autodoc>
      <paramlist>
        <param name="win" type="p.wxWindow" default=""/>
        <param name="copy" type="r.q(const).wxIcon" default="wxNullIcon"/>
        <param name="move" type="r.q(const).wxIcon" default="wxNullIcon"/>
        <param name="none" type="r.q(const).wxIcon" default="wxNullIcon"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class, int incref)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
        <param name="incref" type="int" default=""/>
      </paramlist>
    </method>
    <destructor name="~wxPyDropSource">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(DataObject data)</autodoc>
      <paramlist>
        <param name="data" type="r.wxDataObject" default=""/>
      </paramlist>
    </method>
    <method name="GetDataObject" overloaded="no">
      <autodoc>GetDataObject() -&gt; DataObject</autodoc>
    </method>
    <method name="SetCursor" overloaded="no">
      <autodoc>SetCursor(int res, Cursor cursor)</autodoc>
      <paramlist>
        <param name="res" type="wxDragResult" default=""/>
        <param name="cursor" type="r.q(const).wxCursor" default=""/>
      </paramlist>
    </method>
    <method name="DoDragDrop" overloaded="no">
      <autodoc>DoDragDrop(int flags=Drag_CopyOnly) -&gt; int</autodoc>
      <paramlist>
        <param name="flags" type="int" default="wxDrag_CopyOnly"/>
      </paramlist>
    </method>
    <method name="base_GiveFeedback" overloaded="no">
      <autodoc>base_GiveFeedback(int effect) -&gt; bool</autodoc>
      <paramlist>
        <param name="effect" type="wxDragResult" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="DropTarget" oldname="wxPyDropTarget" module="misc">
    <constructor name="PyDropTarget" overloaded="no">
      <autodoc>PyDropTarget(DataObject dataObject=None) -&gt; DropTarget</autodoc>
      <paramlist>
        <param name="dataObject" type="p.wxDataObject" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <destructor name="~wxPyDropTarget">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetDataObject" overloaded="no">
      <autodoc>GetDataObject() -&gt; DataObject</autodoc>
    </method>
    <method name="SetDataObject" overloaded="no">
      <autodoc>SetDataObject(DataObject dataObject)</autodoc>
      <paramlist>
        <param name="dataObject" type="p.wxDataObject" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEnter" overloaded="no">
      <autodoc>base_OnEnter(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDragOver" overloaded="no">
      <autodoc>base_OnDragOver(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeave" overloaded="no">
      <autodoc>base_OnLeave()</autodoc>
    </method>
    <method name="base_OnDrop" overloaded="no">
      <autodoc>base_OnDrop(int x, int y) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; bool</autodoc>
    </method>
  </class>
  <pythoncode> PyDropTarget = DropTarget </pythoncode>
  <class name="TextDropTarget" oldname="wxPyTextDropTarget" module="misc">
    <baseclass name="wxPyDropTarget"/>
    <constructor name="wxPyTextDropTarget" overloaded="no">
      <autodoc>__init__() -&gt; TextDropTarget</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEnter" overloaded="no">
      <autodoc>base_OnEnter(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDragOver" overloaded="no">
      <autodoc>base_OnDragOver(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeave" overloaded="no">
      <autodoc>base_OnLeave()</autodoc>
    </method>
    <method name="base_OnDrop" overloaded="no">
      <autodoc>base_OnDrop(int x, int y) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_OnData" overloaded="no">
      <autodoc>base_OnData(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="FileDropTarget" oldname="wxPyFileDropTarget" module="misc">
    <baseclass name="wxPyDropTarget"/>
    <constructor name="wxPyFileDropTarget" overloaded="no">
      <autodoc>__init__() -&gt; FileDropTarget</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEnter" overloaded="no">
      <autodoc>base_OnEnter(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDragOver" overloaded="no">
      <autodoc>base_OnDragOver(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeave" overloaded="no">
      <autodoc>base_OnLeave()</autodoc>
    </method>
    <method name="base_OnDrop" overloaded="no">
      <autodoc>base_OnDrop(int x, int y) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_OnData" overloaded="no">
      <autodoc>base_OnData(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="Clipboard" oldname="wxClipboard" module="misc">
    <baseclass name="wxObject"/>
    <constructor name="Clipboard" overloaded="no">
      <autodoc>__init__() -&gt; Clipboard</autodoc>
    </constructor>
    <destructor name="~wxClipboard">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Open" overloaded="no">
      <autodoc>Open() -&gt; bool</autodoc>
    </method>
    <method name="Close" overloaded="no">
      <autodoc>Close()</autodoc>
    </method>
    <method name="IsOpened" overloaded="no">
      <autodoc>IsOpened() -&gt; bool</autodoc>
    </method>
    <method name="AddData" overloaded="no">
      <autodoc>AddData(DataObject data) -&gt; bool</autodoc>
      <paramlist>
        <param name="data" type="p.wxDataObject" default=""/>
      </paramlist>
    </method>
    <method name="SetData" overloaded="no">
      <autodoc>SetData(DataObject data) -&gt; bool</autodoc>
      <paramlist>
        <param name="data" type="p.wxDataObject" default=""/>
      </paramlist>
    </method>
    <method name="IsSupported" overloaded="no">
      <autodoc>IsSupported(DataFormat format) -&gt; bool</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxDataFormat" default=""/>
      </paramlist>
    </method>
    <method name="GetData" overloaded="no">
      <autodoc>GetData(DataObject data) -&gt; bool</autodoc>
      <paramlist>
        <param name="data" type="r.wxDataObject" default=""/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="Flush" overloaded="no">
      <autodoc>Flush() -&gt; bool</autodoc>
    </method>
    <method name="UsePrimarySelection" overloaded="no">
      <autodoc>UsePrimarySelection(bool primary=False)</autodoc>
      <paramlist>
        <param name="primary" type="bool" default="False"/>
      </paramlist>
    </method>
  </class>
  <class name="ClipboardLocker" oldname="wxClipboardLocker" module="misc">
    <constructor name="ClipboardLocker" overloaded="no">
      <autodoc>__init__(Clipboard clipboard=None) -&gt; ClipboardLocker</autodoc>
      <paramlist>
        <param name="clipboard" type="p.wxClipboard" default="NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxClipboardLocker">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="__nonzero__" overloaded="no">
      <autodoc>__nonzero__() -&gt; bool</autodoc>
    </method>
  </class>
</module>
<module name="calendar">
  <pythoncode> wx = core </pythoncode>
  <class name="CalendarDateAttr" oldname="wxCalendarDateAttr" module="calendar">
    <docstring>A set of customization attributes for a calendar date, which can be used to
control the look of the Calendar object.</docstring>
    <constructor name="CalendarDateAttr" overloaded="no">
      <autodoc>__init__(Colour colText=wxNullColour, Colour colBack=wxNullColour, 
    Colour colBorder=wxNullColour, Font font=wxNullFont, 
    int border=CAL_BORDER_NONE) -&gt; CalendarDateAttr</autodoc>
      <docstring>Create a CalendarDateAttr.</docstring>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="colBack" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="colBorder" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="font" type="r.q(const).wxFont" default="wxNullFont"/>
        <param name="border" type="wxCalendarDateBorder" default="wxCAL_BORDER_NONE"/>
      </paramlist>
    </constructor>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(Colour colText)</autodoc>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
      <paramlist>
        <param name="colBack" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBorderColour" overloaded="no">
      <autodoc>SetBorderColour(Colour col)</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetBorder" overloaded="no">
      <autodoc>SetBorder(int border)</autodoc>
      <paramlist>
        <param name="border" type="wxCalendarDateBorder" default=""/>
      </paramlist>
    </method>
    <method name="SetHoliday" overloaded="no">
      <autodoc>SetHoliday(bool holiday)</autodoc>
      <paramlist>
        <param name="holiday" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="HasTextColour" overloaded="no">
      <autodoc>HasTextColour() -&gt; bool</autodoc>
    </method>
    <method name="HasBackgroundColour" overloaded="no">
      <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
    </method>
    <method name="HasBorderColour" overloaded="no">
      <autodoc>HasBorderColour() -&gt; bool</autodoc>
    </method>
    <method name="HasFont" overloaded="no">
      <autodoc>HasFont() -&gt; bool</autodoc>
    </method>
    <method name="HasBorder" overloaded="no">
      <autodoc>HasBorder() -&gt; bool</autodoc>
    </method>
    <method name="IsHoliday" overloaded="no">
      <autodoc>IsHoliday() -&gt; bool</autodoc>
    </method>
    <method name="GetTextColour" overloaded="no">
      <autodoc>GetTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetBackgroundColour" overloaded="no">
      <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetBorderColour" overloaded="no">
      <autodoc>GetBorderColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <method name="GetBorder" overloaded="no">
      <autodoc>GetBorder() -&gt; int</autodoc>
    </method>
  </class>
  <class name="CalendarEvent" oldname="wxCalendarEvent" module="calendar">
    <baseclass name="wxCommandEvent"/>
    <constructor name="CalendarEvent" overloaded="no">
      <autodoc>__init__(CalendarCtrl cal, wxEventType type) -&gt; CalendarEvent</autodoc>
      <paramlist>
        <param name="cal" type="p.wxCalendarCtrl" default=""/>
        <param name="type" type="wxEventType" default=""/>
      </paramlist>
    </constructor>
    <method name="GetDate" overloaded="no">
      <autodoc>GetDate() -&gt; DateTime</autodoc>
    </method>
    <method name="SetDate" overloaded="no">
      <autodoc>SetDate(DateTime date)</autodoc>
      <paramlist>
        <param name="date" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="SetWeekDay" overloaded="no">
      <autodoc>SetWeekDay(int wd)</autodoc>
      <paramlist>
        <param name="wd" type="q(const).wxDateTime::WeekDay" default=""/>
      </paramlist>
    </method>
    <method name="GetWeekDay" overloaded="no">
      <autodoc>GetWeekDay() -&gt; int</autodoc>
    </method>
  </class>
  <pythoncode>
EVT_CALENDAR =                 wx.PyEventBinder( wxEVT_CALENDAR_DOUBLECLICKED, 1)
EVT_CALENDAR_SEL_CHANGED =     wx.PyEventBinder( wxEVT_CALENDAR_SEL_CHANGED, 1)
EVT_CALENDAR_DAY =             wx.PyEventBinder( wxEVT_CALENDAR_DAY_CHANGED, 1)
EVT_CALENDAR_MONTH =           wx.PyEventBinder( wxEVT_CALENDAR_MONTH_CHANGED, 1)
EVT_CALENDAR_YEAR =            wx.PyEventBinder( wxEVT_CALENDAR_YEAR_CHANGED, 1)
EVT_CALENDAR_WEEKDAY_CLICKED = wx.PyEventBinder( wxEVT_CALENDAR_WEEKDAY_CLICKED, 1)
</pythoncode>
  <class name="CalendarCtrl" oldname="wxCalendarCtrl" module="calendar">
    <docstring>The calendar control allows the user to pick a date interactively.</docstring>
    <refdoc>The CalendarCtrl displays a window containing several parts: the control to
pick the month and the year at the top (either or both of them may be
disabled) and a month area below them which shows all the days in the
month. The user can move the current selection using the keyboard and select
the date (generating EVT_CALENDAR event) by pressing &lt;Return&gt; or double
clicking it.

It has advanced possibilities for the customization of its display. All global
settings (such as colours and fonts used) can, of course, be changed. But
also, the display style for each day in the month can be set independently
using CalendarDateAttr class.

An item without custom attributes is drawn with the default colours and font
and without border, but setting custom attributes with SetAttr allows to
modify its appearance. Just create a custom attribute object and set it for
the day you want to be displayed specially A day may be marked as being a
holiday, (even if it is not recognized as one by wx.DateTime) by using the
SetHoliday method.

As the attributes are specified for each day, they may change when the month
is changed, so you will often want to update them in an EVT_CALENDAR_MONTH
event handler.

 Styles
    CAL_SUNDAY_FIRST:         Show Sunday as the first day in the week
    CAL_MONDAY_FIRST:         Show Monday as the first day in the week
    CAL_SHOW_HOLIDAYS:         Highlight holidays in the calendar
    CAL_NO_YEAR_CHANGE:         Disable the year changing
    CAL_NO_MONTH_CHANGE: Disable the month (and, implicitly, the year) changing
    CAL_SHOW_SURROUNDING_WEEKS: Show the neighbouring weeks in the previous and next months
    CAL_SEQUENTIAL_MONTH_SELECTION: Use alternative, more compact, style for the month and year selection controls.

The default calendar style is wxCAL_SHOW_HOLIDAYS.

 Events
    EVT_CALENDAR:        A day was double clicked in the calendar.
    EVT_CALENDAR_SEL_CHANGED: The selected date changed.
    EVT_CALENDAR_DAY:     The selected day changed.
    EVT_CALENDAR_MONTH:  The selected month changed.
    EVT_CALENDAR_YEAR:    The selected year changed.
    EVT_CALENDAR_WEEKDAY_CLICKED:  User clicked on the week day header

Note that changing the selected date will result in either of
EVT_CALENDAR_DAY, MONTH or YEAR events and an EVT_CALENDAR_SEL_CHANGED event.
    
</refdoc>
    <baseclass name="wxControl"/>
    <constructor name="CalendarCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id, DateTime date=DefaultDateTime, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS, 
    String name=CalendarNameStr) -&gt; CalendarCtrl</autodoc>
      <docstring>Create and show a calendar control.</docstring>
      <refdoc>The CalendarCtrl displays a window containing several parts: the control to
pick the month and the year at the top (either or both of them may be
disabled) and a month area below them which shows all the days in the
month. The user can move the current selection using the keyboard and select
the date (generating EVT_CALENDAR event) by pressing &lt;Return&gt; or double
clicking it.

It has advanced possibilities for the customization of its display. All global
settings (such as colours and fonts used) can, of course, be changed. But
also, the display style for each day in the month can be set independently
using CalendarDateAttr class.

An item without custom attributes is drawn with the default colours and font
and without border, but setting custom attributes with SetAttr allows to
modify its appearance. Just create a custom attribute object and set it for
the day you want to be displayed specially A day may be marked as being a
holiday, (even if it is not recognized as one by wx.DateTime) by using the
SetHoliday method.

As the attributes are specified for each day, they may change when the month
is changed, so you will often want to update them in an EVT_CALENDAR_MONTH
event handler.

 Styles
    CAL_SUNDAY_FIRST:         Show Sunday as the first day in the week
    CAL_MONDAY_FIRST:         Show Monday as the first day in the week
    CAL_SHOW_HOLIDAYS:         Highlight holidays in the calendar
    CAL_NO_YEAR_CHANGE:         Disable the year changing
    CAL_NO_MONTH_CHANGE: Disable the month (and, implicitly, the year) changing
    CAL_SHOW_SURROUNDING_WEEKS: Show the neighbouring weeks in the previous and next months
    CAL_SEQUENTIAL_MONTH_SELECTION: Use alternative, more compact, style for the month and year selection controls.

The default calendar style is wxCAL_SHOW_HOLIDAYS.

 Events
    EVT_CALENDAR:        A day was double clicked in the calendar.
    EVT_CALENDAR_SEL_CHANGED: The selected date changed.
    EVT_CALENDAR_DAY:     The selected day changed.
    EVT_CALENDAR_MONTH:  The selected month changed.
    EVT_CALENDAR_YEAR:    The selected year changed.
    EVT_CALENDAR_WEEKDAY_CLICKED:  User clicked on the week day header

Note that changing the selected date will result in either of
EVT_CALENDAR_DAY, MONTH or YEAR events and an EVT_CALENDAR_SEL_CHANGED event.
    
</refdoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="date" type="r.q(const).wxDateTime" default="wxDefaultDateTime"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS"/>
        <param name="name" type="r.q(const).wxString" default="wxPyCalendarNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreCalendarCtrl" overloaded="no">
      <autodoc>PreCalendarCtrl() -&gt; CalendarCtrl</autodoc>
      <docstring>Precreate a CalendarCtrl for 2-phase creation.</docstring>
      <refdoc>The CalendarCtrl displays a window containing several parts: the control to
pick the month and the year at the top (either or both of them may be
disabled) and a month area below them which shows all the days in the
month. The user can move the current selection using the keyboard and select
the date (generating EVT_CALENDAR event) by pressing &lt;Return&gt; or double
clicking it.

It has advanced possibilities for the customization of its display. All global
settings (such as colours and fonts used) can, of course, be changed. But
also, the display style for each day in the month can be set independently
using CalendarDateAttr class.

An item without custom attributes is drawn with the default colours and font
and without border, but setting custom attributes with SetAttr allows to
modify its appearance. Just create a custom attribute object and set it for
the day you want to be displayed specially A day may be marked as being a
holiday, (even if it is not recognized as one by wx.DateTime) by using the
SetHoliday method.

As the attributes are specified for each day, they may change when the month
is changed, so you will often want to update them in an EVT_CALENDAR_MONTH
event handler.

 Styles
    CAL_SUNDAY_FIRST:         Show Sunday as the first day in the week
    CAL_MONDAY_FIRST:         Show Monday as the first day in the week
    CAL_SHOW_HOLIDAYS:         Highlight holidays in the calendar
    CAL_NO_YEAR_CHANGE:         Disable the year changing
    CAL_NO_MONTH_CHANGE: Disable the month (and, implicitly, the year) changing
    CAL_SHOW_SURROUNDING_WEEKS: Show the neighbouring weeks in the previous and next months
    CAL_SEQUENTIAL_MONTH_SELECTION: Use alternative, more compact, style for the month and year selection controls.

The default calendar style is wxCAL_SHOW_HOLIDAYS.

 Events
    EVT_CALENDAR:        A day was double clicked in the calendar.
    EVT_CALENDAR_SEL_CHANGED: The selected date changed.
    EVT_CALENDAR_DAY:     The selected day changed.
    EVT_CALENDAR_MONTH:  The selected month changed.
    EVT_CALENDAR_YEAR:    The selected year changed.
    EVT_CALENDAR_WEEKDAY_CLICKED:  User clicked on the week day header

Note that changing the selected date will result in either of
EVT_CALENDAR_DAY, MONTH or YEAR events and an EVT_CALENDAR_SEL_CHANGED event.
    
</refdoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, DateTime date=DefaultDateTime, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS, 
    String name=CalendarNameStr) -&gt; bool</autodoc>
      <docstring>Acutally create the GUI portion of the CalendarCtrl for 2-phase creation.</docstring>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="date" type="r.q(const).wxDateTime" default="wxDefaultDateTime"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS"/>
        <param name="name" type="r.q(const).wxString" default="wxPyCalendarNameStr"/>
      </paramlist>
    </method>
    <method name="SetDate" overloaded="no">
      <autodoc>SetDate(DateTime date)</autodoc>
      <docstring>Sets the current date.</docstring>
      <paramlist>
        <param name="date" type="r.q(const).wxDateTime" default=""/>
      </paramlist>
    </method>
    <method name="GetDate" overloaded="no">
      <autodoc>GetDate() -&gt; DateTime</autodoc>
      <docstring>Gets the currently selected date.</docstring>
    </method>
    <method name="SetLowerDateLimit" overloaded="no">
      <autodoc>SetLowerDateLimit(DateTime date=DefaultDateTime) -&gt; bool</autodoc>
      <docstring>set the range in which selection can occur</docstring>
      <paramlist>
        <param name="date" type="r.q(const).wxDateTime" default="wxDefaultDateTime"/>
      </paramlist>
    </method>
    <method name="SetUpperDateLimit" overloaded="no">
      <autodoc>SetUpperDateLimit(DateTime date=DefaultDateTime) -&gt; bool</autodoc>
      <docstring>set the range in which selection can occur</docstring>
      <paramlist>
        <param name="date" type="r.q(const).wxDateTime" default="wxDefaultDateTime"/>
      </paramlist>
    </method>
    <method name="GetLowerDateLimit" overloaded="no">
      <autodoc>GetLowerDateLimit() -&gt; DateTime</autodoc>
      <docstring>get the range in which selection can occur</docstring>
    </method>
    <method name="GetUpperDateLimit" overloaded="no">
      <autodoc>GetUpperDateLimit() -&gt; DateTime</autodoc>
      <docstring>get the range in which selection can occur</docstring>
    </method>
    <method name="SetDateRange" overloaded="no">
      <autodoc>SetDateRange(DateTime lowerdate=DefaultDateTime, DateTime upperdate=DefaultDateTime) -&gt; bool</autodoc>
      <docstring>set the range in which selection can occur</docstring>
      <paramlist>
        <param name="lowerdate" type="r.q(const).wxDateTime" default="wxDefaultDateTime"/>
        <param name="upperdate" type="r.q(const).wxDateTime" default="wxDefaultDateTime"/>
      </paramlist>
    </method>
    <method name="EnableYearChange" overloaded="no">
      <autodoc>EnableYearChange(bool enable=True)</autodoc>
      <docstring>This function should be used instead of changing CAL_NO_YEAR_CHANGE
style bit directly. It allows or disallows the user to change the year
interactively.</docstring>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="EnableMonthChange" overloaded="no">
      <autodoc>EnableMonthChange(bool enable=True)</autodoc>
      <docstring>This function should be used instead of changing CAL_NO_MONTH_CHANGE style
bit. It allows or disallows the user to change the month interactively. Note
that if the month can not be changed, the year can not be changed either.</docstring>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="EnableHolidayDisplay" overloaded="no">
      <autodoc>EnableHolidayDisplay(bool display=True)</autodoc>
      <docstring>This function should be used instead of changing CAL_SHOW_HOLIDAYS style
bit directly. It enables or disables the special highlighting of the holidays.</docstring>
      <paramlist>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetHeaderColours" overloaded="no">
      <autodoc>SetHeaderColours(Colour colFg, Colour colBg)</autodoc>
      <docstring>header colours are used for painting the weekdays at the top</docstring>
      <paramlist>
        <param name="colFg" type="r.q(const).wxColour" default=""/>
        <param name="colBg" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetHeaderColourFg" overloaded="no">
      <autodoc>GetHeaderColourFg() -&gt; Colour</autodoc>
      <docstring>header colours are used for painting the weekdays at the top</docstring>
    </method>
    <method name="GetHeaderColourBg" overloaded="no">
      <autodoc>GetHeaderColourBg() -&gt; Colour</autodoc>
      <docstring>header colours are used for painting the weekdays at the top</docstring>
    </method>
    <method name="SetHighlightColours" overloaded="no">
      <autodoc>SetHighlightColours(Colour colFg, Colour colBg)</autodoc>
      <docstring>highlight colour is used for the currently selected date</docstring>
      <paramlist>
        <param name="colFg" type="r.q(const).wxColour" default=""/>
        <param name="colBg" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetHighlightColourFg" overloaded="no">
      <autodoc>GetHighlightColourFg() -&gt; Colour</autodoc>
      <docstring>highlight colour is used for the currently selected date</docstring>
    </method>
    <method name="GetHighlightColourBg" overloaded="no">
      <autodoc>GetHighlightColourBg() -&gt; Colour</autodoc>
      <docstring>highlight colour is used for the currently selected date</docstring>
    </method>
    <method name="SetHolidayColours" overloaded="no">
      <autodoc>SetHolidayColours(Colour colFg, Colour colBg)</autodoc>
      <docstring>holiday colour is used for the holidays (if CAL_SHOW_HOLIDAYS style is used)</docstring>
      <paramlist>
        <param name="colFg" type="r.q(const).wxColour" default=""/>
        <param name="colBg" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetHolidayColourFg" overloaded="no">
      <autodoc>GetHolidayColourFg() -&gt; Colour</autodoc>
      <docstring>holiday colour is used for the holidays (if CAL_SHOW_HOLIDAYS style is used)</docstring>
    </method>
    <method name="GetHolidayColourBg" overloaded="no">
      <autodoc>GetHolidayColourBg() -&gt; Colour</autodoc>
      <docstring>holiday colour is used for the holidays (if CAL_SHOW_HOLIDAYS style is used)</docstring>
    </method>
    <method name="GetAttr" overloaded="no">
      <autodoc>GetAttr(size_t day) -&gt; CalendarDateAttr</autodoc>
      <docstring>Returns the attribute for the given date (should be in the range 1...31).
The returned value may be None</docstring>
      <paramlist>
        <param name="day" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetAttr" overloaded="no">
      <autodoc>SetAttr(size_t day, CalendarDateAttr attr)</autodoc>
      <docstring>Associates the attribute with the specified date (in the range 1...31).
If the attribute passed is None, the items attribute is cleared.</docstring>
      <paramlist>
        <param name="day" type="size_t" default=""/>
        <param name="attr" type="p.wxCalendarDateAttr" default=""/>
      </paramlist>
    </method>
    <method name="SetHoliday" overloaded="no">
      <autodoc>SetHoliday(size_t day)</autodoc>
      <docstring>Marks the specified day as being a holiday in the current month.</docstring>
      <paramlist>
        <param name="day" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="ResetAttr" overloaded="no">
      <autodoc>ResetAttr(size_t day)</autodoc>
      <docstring>Clears any attributes associated with the given day (in the range 1...31).</docstring>
      <paramlist>
        <param name="day" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point pos) -&gt; (result, date, weekday)</autodoc>
      <docstring>Returns 3-tuple with information about the given position on the calendar
control.  The first value of the tuple is a result code and determines the
validity of the remaining two values.  The result codes are:

    CAL_HITTEST_NOWHERE:    hit outside of anything
    CAL_HITTEST_HEADER:     hit on the header, weekday is valid
    CAL_HITTEST_DAY:        hit on a day in the calendar, date is set.
</docstring>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetMonthControl" overloaded="no">
      <autodoc>GetMonthControl() -&gt; Control</autodoc>
      <docstring>get the currently shown control for month</docstring>
    </method>
    <method name="GetYearControl" overloaded="no">
      <autodoc>GetYearControl() -&gt; Control</autodoc>
      <docstring>get the currently shown control for year</docstring>
    </method>
  </class>
</module>
<module name="grid">
  <pythoncode> wx = core </pythoncode>
  <class name="GridCellRenderer" oldname="wxGridCellRenderer" module="grid">
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetParameters" overloaded="no">
      <autodoc>SetParameters(String params)</autodoc>
      <paramlist>
        <param name="params" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="IncRef" overloaded="no">
      <autodoc>IncRef()</autodoc>
    </method>
    <method name="DecRef" overloaded="no">
      <autodoc>DecRef()</autodoc>
    </method>
    <method name="Draw" overloaded="no">
      <autodoc>Draw(Grid grid, GridCellAttr attr, DC dc, Rect rect, int row, 
    int col, bool isSelected)</autodoc>
      <paramlist>
        <param name="grid" type="r.wxGrid" default=""/>
        <param name="attr" type="r.wxGridCellAttr" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="isSelected" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetBestSize" overloaded="no">
      <autodoc>GetBestSize(Grid grid, GridCellAttr attr, DC dc, int row, int col) -&gt; Size</autodoc>
      <paramlist>
        <param name="grid" type="r.wxGrid" default=""/>
        <param name="attr" type="r.wxGridCellAttr" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Clone" overloaded="no">
      <autodoc>Clone() -&gt; GridCellRenderer</autodoc>
    </method>
  </class>
  <class name="PyGridCellRenderer" oldname="wxPyGridCellRenderer" module="grid">
    <baseclass name="wxGridCellRenderer"/>
    <constructor name="PyGridCellRenderer" overloaded="no">
      <autodoc>__init__() -&gt; PyGridCellRenderer</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_SetParameters" overloaded="no">
      <autodoc>base_SetParameters(String params)</autodoc>
      <paramlist>
        <param name="params" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="GridCellStringRenderer" oldname="wxGridCellStringRenderer" module="grid">
    <baseclass name="wxGridCellRenderer"/>
    <constructor name="GridCellStringRenderer" overloaded="no">
      <autodoc>__init__() -&gt; GridCellStringRenderer</autodoc>
    </constructor>
  </class>
  <class name="GridCellNumberRenderer" oldname="wxGridCellNumberRenderer" module="grid">
    <baseclass name="wxGridCellStringRenderer"/>
    <constructor name="GridCellNumberRenderer" overloaded="no">
      <autodoc>__init__() -&gt; GridCellNumberRenderer</autodoc>
    </constructor>
  </class>
  <class name="GridCellFloatRenderer" oldname="wxGridCellFloatRenderer" module="grid">
    <baseclass name="wxGridCellStringRenderer"/>
    <constructor name="GridCellFloatRenderer" overloaded="no">
      <autodoc>__init__(int width=-1, int precision=-1) -&gt; GridCellFloatRenderer</autodoc>
      <paramlist>
        <param name="width" type="int" default="-1"/>
        <param name="precision" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPrecision" overloaded="no">
      <autodoc>GetPrecision() -&gt; int</autodoc>
    </method>
    <method name="SetPrecision" overloaded="no">
      <autodoc>SetPrecision(int precision)</autodoc>
      <paramlist>
        <param name="precision" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="GridCellBoolRenderer" oldname="wxGridCellBoolRenderer" module="grid">
    <baseclass name="wxGridCellRenderer"/>
    <constructor name="GridCellBoolRenderer" overloaded="no">
      <autodoc>__init__() -&gt; GridCellBoolRenderer</autodoc>
    </constructor>
  </class>
  <class name="GridCellDateTimeRenderer" oldname="wxGridCellDateTimeRenderer" module="grid">
    <baseclass name="wxGridCellStringRenderer"/>
    <constructor name="GridCellDateTimeRenderer" overloaded="no">
      <autodoc>__init__(String outformat=DateTimeFormatStr, String informat=DateTimeFormatStr) -&gt; GridCellDateTimeRenderer</autodoc>
      <paramlist>
        <param name="outformat" type="wxString" default="wxPyDateTimeFormatStr"/>
        <param name="informat" type="wxString" default="wxPyDateTimeFormatStr"/>
      </paramlist>
    </constructor>
  </class>
  <class name="GridCellEnumRenderer" oldname="wxGridCellEnumRenderer" module="grid">
    <baseclass name="wxGridCellStringRenderer"/>
    <constructor name="GridCellEnumRenderer" overloaded="no">
      <autodoc>__init__(String choices=EmptyString) -&gt; GridCellEnumRenderer</autodoc>
      <paramlist>
        <param name="choices" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
  </class>
  <class name="GridCellAutoWrapStringRenderer" oldname="wxGridCellAutoWrapStringRenderer" module="grid">
    <baseclass name="wxGridCellStringRenderer"/>
    <constructor name="GridCellAutoWrapStringRenderer" overloaded="no">
      <autodoc>__init__() -&gt; GridCellAutoWrapStringRenderer</autodoc>
    </constructor>
  </class>
  <class name="GridCellEditor" oldname="wxGridCellEditor" module="grid">
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="IsCreated" overloaded="no">
      <autodoc>IsCreated() -&gt; bool</autodoc>
    </method>
    <method name="GetControl" overloaded="no">
      <autodoc>GetControl() -&gt; Control</autodoc>
    </method>
    <method name="SetControl" overloaded="no">
      <autodoc>SetControl(Control control)</autodoc>
      <paramlist>
        <param name="control" type="p.wxControl" default=""/>
      </paramlist>
    </method>
    <method name="GetCellAttr" overloaded="no">
      <autodoc>GetCellAttr() -&gt; GridCellAttr</autodoc>
    </method>
    <method name="SetCellAttr" overloaded="no">
      <autodoc>SetCellAttr(GridCellAttr attr)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="SetParameters" overloaded="no">
      <autodoc>SetParameters(String params)</autodoc>
      <paramlist>
        <param name="params" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="IncRef" overloaded="no">
      <autodoc>IncRef()</autodoc>
    </method>
    <method name="DecRef" overloaded="no">
      <autodoc>DecRef()</autodoc>
    </method>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, EvtHandler evtHandler)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="evtHandler" type="p.wxEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="BeginEdit" overloaded="no">
      <autodoc>BeginEdit(int row, int col, Grid grid)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="grid" type="p.wxGrid" default=""/>
      </paramlist>
    </method>
    <method name="EndEdit" overloaded="no">
      <autodoc>EndEdit(int row, int col, Grid grid) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="grid" type="p.wxGrid" default=""/>
      </paramlist>
    </method>
    <method name="Reset" overloaded="no">
      <autodoc>Reset()</autodoc>
    </method>
    <method name="Clone" overloaded="no">
      <autodoc>Clone() -&gt; GridCellEditor</autodoc>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="Show" overloaded="no">
      <autodoc>Show(bool show, GridCellAttr attr=None)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
        <param name="attr" type="p.wxGridCellAttr" default="NULL"/>
      </paramlist>
    </method>
    <method name="PaintBackground" overloaded="no">
      <autodoc>PaintBackground(Rect rectCell, GridCellAttr attr)</autodoc>
      <paramlist>
        <param name="rectCell" type="r.q(const).wxRect" default=""/>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="IsAcceptedKey" overloaded="no">
      <autodoc>IsAcceptedKey(KeyEvent event) -&gt; bool</autodoc>
      <paramlist>
        <param name="event" type="r.wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="StartingKey" overloaded="no">
      <autodoc>StartingKey(KeyEvent event)</autodoc>
      <paramlist>
        <param name="event" type="r.wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="StartingClick" overloaded="no">
      <autodoc>StartingClick()</autodoc>
    </method>
    <method name="HandleReturn" overloaded="no">
      <autodoc>HandleReturn(KeyEvent event)</autodoc>
      <paramlist>
        <param name="event" type="r.wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
    </method>
  </class>
  <class name="PyGridCellEditor" oldname="wxPyGridCellEditor" module="grid">
    <baseclass name="wxGridCellEditor"/>
    <constructor name="PyGridCellEditor" overloaded="no">
      <autodoc>__init__() -&gt; PyGridCellEditor</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_SetSize" overloaded="no">
      <autodoc>base_SetSize(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="base_Show" overloaded="no">
      <autodoc>base_Show(bool show, GridCellAttr attr=None)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
        <param name="attr" type="p.wxGridCellAttr" default="NULL"/>
      </paramlist>
    </method>
    <method name="base_PaintBackground" overloaded="no">
      <autodoc>base_PaintBackground(Rect rectCell, GridCellAttr attr)</autodoc>
      <paramlist>
        <param name="rectCell" type="r.q(const).wxRect" default=""/>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="base_IsAcceptedKey" overloaded="no">
      <autodoc>base_IsAcceptedKey(KeyEvent event) -&gt; bool</autodoc>
      <paramlist>
        <param name="event" type="r.wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="base_StartingKey" overloaded="no">
      <autodoc>base_StartingKey(KeyEvent event)</autodoc>
      <paramlist>
        <param name="event" type="r.wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="base_StartingClick" overloaded="no">
      <autodoc>base_StartingClick()</autodoc>
    </method>
    <method name="base_HandleReturn" overloaded="no">
      <autodoc>base_HandleReturn(KeyEvent event)</autodoc>
      <paramlist>
        <param name="event" type="r.wxKeyEvent" default=""/>
      </paramlist>
    </method>
    <method name="base_Destroy" overloaded="no">
      <autodoc>base_Destroy()</autodoc>
    </method>
    <method name="base_SetParameters" overloaded="no">
      <autodoc>base_SetParameters(String params)</autodoc>
      <paramlist>
        <param name="params" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="GridCellTextEditor" oldname="wxGridCellTextEditor" module="grid">
    <baseclass name="wxGridCellEditor"/>
    <constructor name="GridCellTextEditor" overloaded="no">
      <autodoc>__init__() -&gt; GridCellTextEditor</autodoc>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
  </class>
  <class name="GridCellNumberEditor" oldname="wxGridCellNumberEditor" module="grid">
    <baseclass name="wxGridCellTextEditor"/>
    <constructor name="GridCellNumberEditor" overloaded="no">
      <autodoc>__init__(int min=-1, int max=-1) -&gt; GridCellNumberEditor</autodoc>
      <paramlist>
        <param name="min" type="int" default="-1"/>
        <param name="max" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
  </class>
  <class name="GridCellFloatEditor" oldname="wxGridCellFloatEditor" module="grid">
    <baseclass name="wxGridCellTextEditor"/>
    <constructor name="GridCellFloatEditor" overloaded="no">
      <autodoc>__init__() -&gt; GridCellFloatEditor</autodoc>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
  </class>
  <class name="GridCellBoolEditor" oldname="wxGridCellBoolEditor" module="grid">
    <baseclass name="wxGridCellEditor"/>
    <constructor name="GridCellBoolEditor" overloaded="no">
      <autodoc>__init__() -&gt; GridCellBoolEditor</autodoc>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
  </class>
  <class name="GridCellChoiceEditor" oldname="wxGridCellChoiceEditor" module="grid">
    <baseclass name="wxGridCellEditor"/>
    <constructor name="GridCellChoiceEditor" overloaded="no">
      <autodoc>__init__(int choices=0, String choices_array=None, bool allowOthers=False) -&gt; GridCellChoiceEditor</autodoc>
      <paramlist>
        <param name="choices" type="int" default="0"/>
        <param name="choices_array" type="p.q(const).wxString" default="NULL"/>
        <param name="allowOthers" type="bool" default="False"/>
      </paramlist>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
  </class>
  <class name="GridCellEnumEditor" oldname="wxGridCellEnumEditor" module="grid">
    <baseclass name="wxGridCellChoiceEditor"/>
    <constructor name="GridCellEnumEditor" overloaded="no">
      <autodoc>__init__(String choices=EmptyString) -&gt; GridCellEnumEditor</autodoc>
      <paramlist>
        <param name="choices" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
  </class>
  <class name="GridCellAutoWrapStringEditor" oldname="wxGridCellAutoWrapStringEditor" module="grid">
    <baseclass name="wxGridCellTextEditor"/>
    <constructor name="GridCellAutoWrapStringEditor" overloaded="no">
      <autodoc>__init__() -&gt; GridCellAutoWrapStringEditor</autodoc>
    </constructor>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
  </class>
  <class name="GridCellAttr" oldname="wxGridCellAttr" module="grid">
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <constructor name="GridCellAttr" overloaded="no">
      <autodoc>__init__(GridCellAttr attrDefault=None) -&gt; GridCellAttr</autodoc>
      <paramlist>
        <param name="attrDefault" type="p.wxGridCellAttr" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="Clone" overloaded="no">
      <autodoc>Clone() -&gt; GridCellAttr</autodoc>
    </method>
    <method name="MergeWith" overloaded="no">
      <autodoc>MergeWith(GridCellAttr mergefrom)</autodoc>
      <paramlist>
        <param name="mergefrom" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="IncRef" overloaded="no">
      <autodoc>IncRef()</autodoc>
    </method>
    <method name="DecRef" overloaded="no">
      <autodoc>DecRef()</autodoc>
    </method>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(Colour colText)</autodoc>
      <paramlist>
        <param name="colText" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
      <paramlist>
        <param name="colBack" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetAlignment" overloaded="no">
      <autodoc>SetAlignment(int hAlign, int vAlign)</autodoc>
      <paramlist>
        <param name="hAlign" type="int" default=""/>
        <param name="vAlign" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(int num_rows, int num_cols)</autodoc>
      <paramlist>
        <param name="num_rows" type="int" default=""/>
        <param name="num_cols" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetOverflow" overloaded="no">
      <autodoc>SetOverflow(bool allow=True)</autodoc>
      <paramlist>
        <param name="allow" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetReadOnly" overloaded="no">
      <autodoc>SetReadOnly(bool isReadOnly=True)</autodoc>
      <paramlist>
        <param name="isReadOnly" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetRenderer" overloaded="no">
      <autodoc>SetRenderer(GridCellRenderer renderer)</autodoc>
      <paramlist>
        <param name="renderer" type="p.wxGridCellRenderer" default=""/>
      </paramlist>
    </method>
    <method name="SetEditor" overloaded="no">
      <autodoc>SetEditor(GridCellEditor editor)</autodoc>
      <paramlist>
        <param name="editor" type="p.wxGridCellEditor" default=""/>
      </paramlist>
    </method>
    <method name="SetKind" overloaded="no">
      <autodoc>SetKind(int kind)</autodoc>
      <paramlist>
        <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
      </paramlist>
    </method>
    <method name="HasTextColour" overloaded="no">
      <autodoc>HasTextColour() -&gt; bool</autodoc>
    </method>
    <method name="HasBackgroundColour" overloaded="no">
      <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
    </method>
    <method name="HasFont" overloaded="no">
      <autodoc>HasFont() -&gt; bool</autodoc>
    </method>
    <method name="HasAlignment" overloaded="no">
      <autodoc>HasAlignment() -&gt; bool</autodoc>
    </method>
    <method name="HasRenderer" overloaded="no">
      <autodoc>HasRenderer() -&gt; bool</autodoc>
    </method>
    <method name="HasEditor" overloaded="no">
      <autodoc>HasEditor() -&gt; bool</autodoc>
    </method>
    <method name="HasReadWriteMode" overloaded="no">
      <autodoc>HasReadWriteMode() -&gt; bool</autodoc>
    </method>
    <method name="HasOverflowMode" overloaded="no">
      <autodoc>HasOverflowMode() -&gt; bool</autodoc>
    </method>
    <method name="GetTextColour" overloaded="no">
      <autodoc>GetTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetBackgroundColour" overloaded="no">
      <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <method name="GetAlignment" overloaded="no">
      <autodoc>GetAlignment() -&gt; (hAlign, vAlign)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; (num_rows, num_cols)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetOverflow" overloaded="no">
      <autodoc>GetOverflow() -&gt; bool</autodoc>
    </method>
    <method name="GetRenderer" overloaded="no">
      <autodoc>GetRenderer(Grid grid, int row, int col) -&gt; GridCellRenderer</autodoc>
      <paramlist>
        <param name="grid" type="p.wxGrid" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetEditor" overloaded="no">
      <autodoc>GetEditor(Grid grid, int row, int col) -&gt; GridCellEditor</autodoc>
      <paramlist>
        <param name="grid" type="p.wxGrid" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsReadOnly" overloaded="no">
      <autodoc>IsReadOnly() -&gt; bool</autodoc>
    </method>
    <method name="SetDefAttr" overloaded="no">
      <autodoc>SetDefAttr(GridCellAttr defAttr)</autodoc>
      <paramlist>
        <param name="defAttr" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="GridCellAttrProvider" oldname="wxGridCellAttrProvider" module="grid">
    <constructor name="GridCellAttrProvider" overloaded="no">
      <autodoc>__init__() -&gt; GridCellAttrProvider</autodoc>
    </constructor>
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetAttr" overloaded="no">
      <autodoc>GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
      </paramlist>
    </method>
    <method name="SetAttr" overloaded="no">
      <autodoc>SetAttr(GridCellAttr attr, int row, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRowAttr" overloaded="no">
      <autodoc>SetRowAttr(GridCellAttr attr, int row)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColAttr" overloaded="no">
      <autodoc>SetColAttr(GridCellAttr attr, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="UpdateAttrRows" overloaded="no">
      <autodoc>UpdateAttrRows(size_t pos, int numRows)</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="numRows" type="int" default=""/>
      </paramlist>
    </method>
    <method name="UpdateAttrCols" overloaded="no">
      <autodoc>UpdateAttrCols(size_t pos, int numCols)</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default=""/>
        <param name="numCols" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyGridCellAttrProvider" oldname="wxPyGridCellAttrProvider" module="grid">
    <baseclass name="wxGridCellAttrProvider"/>
    <constructor name="PyGridCellAttrProvider" overloaded="no">
      <autodoc>__init__() -&gt; PyGridCellAttrProvider</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_GetAttr" overloaded="no">
      <autodoc>base_GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
      </paramlist>
    </method>
    <method name="base_SetAttr" overloaded="no">
      <autodoc>base_SetAttr(GridCellAttr attr, int row, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_SetRowAttr" overloaded="no">
      <autodoc>base_SetRowAttr(GridCellAttr attr, int row)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_SetColAttr" overloaded="no">
      <autodoc>base_SetColAttr(GridCellAttr attr, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="GridTableBase" oldname="wxGridTableBase" module="grid">
    <baseclass name="wxObject"/>
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetAttrProvider" overloaded="no">
      <autodoc>SetAttrProvider(GridCellAttrProvider attrProvider)</autodoc>
      <paramlist>
        <param name="attrProvider" type="p.wxGridCellAttrProvider" default=""/>
      </paramlist>
    </method>
    <method name="GetAttrProvider" overloaded="no">
      <autodoc>GetAttrProvider() -&gt; GridCellAttrProvider</autodoc>
    </method>
    <method name="SetView" overloaded="no">
      <autodoc>SetView(Grid grid)</autodoc>
      <paramlist>
        <param name="grid" type="p.wxGrid" default=""/>
      </paramlist>
    </method>
    <method name="GetView" overloaded="no">
      <autodoc>GetView() -&gt; Grid</autodoc>
    </method>
    <method name="GetNumberRows" overloaded="no">
      <autodoc>GetNumberRows() -&gt; int</autodoc>
    </method>
    <method name="GetNumberCols" overloaded="no">
      <autodoc>GetNumberCols() -&gt; int</autodoc>
    </method>
    <method name="IsEmptyCell" overloaded="no">
      <autodoc>IsEmptyCell(int row, int col) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue(int row, int col) -&gt; String</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(int row, int col, String value)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTypeName" overloaded="no">
      <autodoc>GetTypeName(int row, int col) -&gt; String</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CanGetValueAs" overloaded="no">
      <autodoc>CanGetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="typeName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="CanSetValueAs" overloaded="no">
      <autodoc>CanSetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="typeName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetValueAsLong" overloaded="no">
      <autodoc>GetValueAsLong(int row, int col) -&gt; long</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetValueAsDouble" overloaded="no">
      <autodoc>GetValueAsDouble(int row, int col) -&gt; double</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetValueAsBool" overloaded="no">
      <autodoc>GetValueAsBool(int row, int col) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetValueAsLong" overloaded="no">
      <autodoc>SetValueAsLong(int row, int col, long value)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="value" type="long" default=""/>
      </paramlist>
    </method>
    <method name="SetValueAsDouble" overloaded="no">
      <autodoc>SetValueAsDouble(int row, int col, double value)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="value" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetValueAsBool" overloaded="no">
      <autodoc>SetValueAsBool(int row, int col, bool value)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="value" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="InsertRows" overloaded="no">
      <autodoc>InsertRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numRows" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="AppendRows" overloaded="no">
      <autodoc>AppendRows(size_t numRows=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="numRows" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="DeleteRows" overloaded="no">
      <autodoc>DeleteRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numRows" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="InsertCols" overloaded="no">
      <autodoc>InsertCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numCols" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="AppendCols" overloaded="no">
      <autodoc>AppendCols(size_t numCols=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="numCols" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="DeleteCols" overloaded="no">
      <autodoc>DeleteCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numCols" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="GetRowLabelValue" overloaded="no">
      <autodoc>GetRowLabelValue(int row) -&gt; String</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetColLabelValue" overloaded="no">
      <autodoc>GetColLabelValue(int col) -&gt; String</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRowLabelValue" overloaded="no">
      <autodoc>SetRowLabelValue(int row, String value)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetColLabelValue" overloaded="no">
      <autodoc>SetColLabelValue(int col, String value)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="CanHaveAttributes" overloaded="no">
      <autodoc>CanHaveAttributes() -&gt; bool</autodoc>
    </method>
    <method name="GetAttr" overloaded="no">
      <autodoc>GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
      </paramlist>
    </method>
    <method name="SetAttr" overloaded="no">
      <autodoc>SetAttr(GridCellAttr attr, int row, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRowAttr" overloaded="no">
      <autodoc>SetRowAttr(GridCellAttr attr, int row)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColAttr" overloaded="no">
      <autodoc>SetColAttr(GridCellAttr attr, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyGridTableBase" oldname="wxPyGridTableBase" module="grid">
    <baseclass name="wxGridTableBase"/>
    <constructor name="PyGridTableBase" overloaded="no">
      <autodoc>__init__() -&gt; PyGridTableBase</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Destroy" overloaded="no">
      <autodoc>Destroy()</autodoc>
      <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
    </method>
    <method name="base_GetTypeName" overloaded="no">
      <autodoc>base_GetTypeName(int row, int col) -&gt; String</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_CanGetValueAs" overloaded="no">
      <autodoc>base_CanGetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="typeName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="base_CanSetValueAs" overloaded="no">
      <autodoc>base_CanSetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="typeName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="base_Clear" overloaded="no">
      <autodoc>base_Clear()</autodoc>
    </method>
    <method name="base_InsertRows" overloaded="no">
      <autodoc>base_InsertRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numRows" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="base_AppendRows" overloaded="no">
      <autodoc>base_AppendRows(size_t numRows=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="numRows" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="base_DeleteRows" overloaded="no">
      <autodoc>base_DeleteRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numRows" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="base_InsertCols" overloaded="no">
      <autodoc>base_InsertCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numCols" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="base_AppendCols" overloaded="no">
      <autodoc>base_AppendCols(size_t numCols=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="numCols" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="base_DeleteCols" overloaded="no">
      <autodoc>base_DeleteCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="size_t" default="0"/>
        <param name="numCols" type="size_t" default="1"/>
      </paramlist>
    </method>
    <method name="base_GetRowLabelValue" overloaded="no">
      <autodoc>base_GetRowLabelValue(int row) -&gt; String</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_GetColLabelValue" overloaded="no">
      <autodoc>base_GetColLabelValue(int col) -&gt; String</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_SetRowLabelValue" overloaded="no">
      <autodoc>base_SetRowLabelValue(int row, String value)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="base_SetColLabelValue" overloaded="no">
      <autodoc>base_SetColLabelValue(int col, String value)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="base_CanHaveAttributes" overloaded="no">
      <autodoc>base_CanHaveAttributes() -&gt; bool</autodoc>
    </method>
    <method name="base_GetAttr" overloaded="no">
      <autodoc>base_GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
      </paramlist>
    </method>
    <method name="base_SetAttr" overloaded="no">
      <autodoc>base_SetAttr(GridCellAttr attr, int row, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_SetRowAttr" overloaded="no">
      <autodoc>base_SetRowAttr(GridCellAttr attr, int row)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_SetColAttr" overloaded="no">
      <autodoc>base_SetColAttr(GridCellAttr attr, int col)</autodoc>
      <paramlist>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="GridStringTable" oldname="wxGridStringTable" module="grid">
    <baseclass name="wxGridTableBase"/>
    <constructor name="GridStringTable" overloaded="no">
      <autodoc>__init__(int numRows=0, int numCols=0) -&gt; GridStringTable</autodoc>
      <paramlist>
        <param name="numRows" type="int" default="0"/>
        <param name="numCols" type="int" default="0"/>
      </paramlist>
    </constructor>
  </class>
  <class name="GridTableMessage" oldname="wxGridTableMessage" module="grid">
    <constructor name="GridTableMessage" overloaded="no">
      <autodoc>__init__(GridTableBase table, int id, int comInt1=-1, int comInt2=-1) -&gt; GridTableMessage</autodoc>
      <paramlist>
        <param name="table" type="p.wxGridTableBase" default=""/>
        <param name="id" type="int" default=""/>
        <param name="comInt1" type="int" default="-1"/>
        <param name="comInt2" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxGridTableMessage">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetTableObject" overloaded="no">
      <autodoc>SetTableObject(GridTableBase table)</autodoc>
      <paramlist>
        <param name="table" type="p.wxGridTableBase" default=""/>
      </paramlist>
    </method>
    <method name="GetTableObject" overloaded="no">
      <autodoc>GetTableObject() -&gt; GridTableBase</autodoc>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(int id)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; int</autodoc>
    </method>
    <method name="SetCommandInt" overloaded="no">
      <autodoc>SetCommandInt(int comInt1)</autodoc>
      <paramlist>
        <param name="comInt1" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCommandInt" overloaded="no">
      <autodoc>GetCommandInt() -&gt; int</autodoc>
    </method>
    <method name="SetCommandInt2" overloaded="no">
      <autodoc>SetCommandInt2(int comInt2)</autodoc>
      <paramlist>
        <param name="comInt2" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCommandInt2" overloaded="no">
      <autodoc>GetCommandInt2() -&gt; int</autodoc>
    </method>
  </class>
  <class name="GridCellCoords" oldname="wxGridCellCoords" module="grid">
    <constructor name="GridCellCoords" overloaded="no">
      <autodoc>__init__(int r=-1, int c=-1) -&gt; GridCellCoords</autodoc>
      <paramlist>
        <param name="r" type="int" default="-1"/>
        <param name="c" type="int" default="-1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxGridCellCoords">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="GetRow" overloaded="no">
      <autodoc>GetRow() -&gt; int</autodoc>
    </method>
    <method name="SetRow" overloaded="no">
      <autodoc>SetRow(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCol" overloaded="no">
      <autodoc>GetCol() -&gt; int</autodoc>
    </method>
    <method name="SetCol" overloaded="no">
      <autodoc>SetCol(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Set" overloaded="no">
      <autodoc>Set(int row, int col)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="__eq__" overloaded="no">
      <autodoc>__eq__(GridCellCoords other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxGridCellCoords" default=""/>
      </paramlist>
    </method>
    <method name="__ne__" overloaded="no">
      <autodoc>__ne__(GridCellCoords other) -&gt; bool</autodoc>
      <paramlist>
        <param name="other" type="r.q(const).wxGridCellCoords" default=""/>
      </paramlist>
    </method>
    <method name="asTuple" overloaded="no">
      <autodoc>asTuple() -&gt; PyObject</autodoc>
    </method>
    <pythoncode>
    def __str__(self):                   return str(self.asTuple())
    def __repr__(self):                  return 'wxGridCellCoords'+str(self.asTuple())
    def __len__(self):                   return len(self.asTuple())
    def __getitem__(self, index):        return self.asTuple()[index]
    def __setitem__(self, index, val):
        if index == 0: self.SetRow(val)
        elif index == 1: self.SetCol(val)
        else: raise IndexError
    </pythoncode>
  </class>
  <class name="Grid" oldname="wxGrid" module="grid">
    <baseclass name="wxScrolledWindow"/>
    <constructor name="Grid" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=WANTS_CHARS, 
    String name=PanelNameStr) -&gt; Grid</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxWANTS_CHARS"/>
        <param name="name" type="r.q(const).wxString" default="wxPyPanelNameStr"/>
      </paramlist>
    </constructor>
    <pythoncode>
        SelectCells =   wxGridSelectCells
        SelectRows =    wxGridSelectRows
        SelectColumns = wxGridSelectColumns,
    </pythoncode>
    <method name="CreateGrid" overloaded="no">
      <autodoc>CreateGrid(int numRows, int numCols, WXGRIDSELECTIONMODES selmode=wxGridSelectCells) -&gt; bool</autodoc>
      <paramlist>
        <param name="numRows" type="int" default=""/>
        <param name="numCols" type="int" default=""/>
        <param name="selmode" type="WXGRIDSELECTIONMODES" default="wxGrid::wxGridSelectCells"/>
      </paramlist>
    </method>
    <method name="SetSelectionMode" overloaded="no">
      <autodoc>SetSelectionMode(WXGRIDSELECTIONMODES selmode)</autodoc>
      <paramlist>
        <param name="selmode" type="WXGRIDSELECTIONMODES" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectionMode" overloaded="no">
      <autodoc>GetSelectionMode() -&gt; WXGRIDSELECTIONMODES</autodoc>
    </method>
    <method name="GetNumberRows" overloaded="no">
      <autodoc>GetNumberRows() -&gt; int</autodoc>
    </method>
    <method name="GetNumberCols" overloaded="no">
      <autodoc>GetNumberCols() -&gt; int</autodoc>
    </method>
    <method name="ProcessTableMessage" overloaded="no">
      <autodoc>ProcessTableMessage(GridTableMessage ??) -&gt; bool</autodoc>
      <paramlist>
        <param name="" type="r.wxGridTableMessage" default=""/>
      </paramlist>
    </method>
    <method name="GetTable" overloaded="no">
      <autodoc>GetTable() -&gt; GridTableBase</autodoc>
    </method>
    <method name="SetTable" overloaded="no">
      <autodoc>SetTable(GridTableBase table, bool takeOwnership=False, WXGRIDSELECTIONMODES selmode=wxGridSelectCells) -&gt; bool</autodoc>
      <paramlist>
        <param name="table" type="p.wxGridTableBase" default=""/>
        <param name="takeOwnership" type="bool" default="False"/>
        <param name="selmode" type="WXGRIDSELECTIONMODES" default="wxGrid::wxGridSelectCells"/>
      </paramlist>
    </method>
    <method name="ClearGrid" overloaded="no">
      <autodoc>ClearGrid()</autodoc>
    </method>
    <method name="InsertRows" overloaded="no">
      <autodoc>InsertRows(int pos=0, int numRows=1, bool updateLabels=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="int" default="0"/>
        <param name="numRows" type="int" default="1"/>
        <param name="updateLabels" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="AppendRows" overloaded="no">
      <autodoc>AppendRows(int numRows=1, bool updateLabels=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="numRows" type="int" default="1"/>
        <param name="updateLabels" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DeleteRows" overloaded="no">
      <autodoc>DeleteRows(int pos=0, int numRows=1, bool updateLabels=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="int" default="0"/>
        <param name="numRows" type="int" default="1"/>
        <param name="updateLabels" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="InsertCols" overloaded="no">
      <autodoc>InsertCols(int pos=0, int numCols=1, bool updateLabels=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="int" default="0"/>
        <param name="numCols" type="int" default="1"/>
        <param name="updateLabels" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="AppendCols" overloaded="no">
      <autodoc>AppendCols(int numCols=1, bool updateLabels=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="numCols" type="int" default="1"/>
        <param name="updateLabels" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DeleteCols" overloaded="no">
      <autodoc>DeleteCols(int pos=0, int numCols=1, bool updateLabels=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="pos" type="int" default="0"/>
        <param name="numCols" type="int" default="1"/>
        <param name="updateLabels" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DrawCellHighlight" overloaded="no">
      <autodoc>DrawCellHighlight(DC dc, GridCellAttr attr)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="attr" type="p.q(const).wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="DrawTextRectangle" overloaded="no">
      <autodoc>DrawTextRectangle(DC dc, String ??, Rect ??, int horizontalAlignment=LEFT, 
    int verticalAlignment=TOP, int textOrientation=HORIZONTAL)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="" type="r.q(const).wxString" default=""/>
        <param name="" type="r.q(const).wxRect" default=""/>
        <param name="horizontalAlignment" type="int" default="wxLEFT"/>
        <param name="verticalAlignment" type="int" default="wxTOP"/>
        <param name="textOrientation" type="int" default="wxHORIZONTAL"/>
      </paramlist>
    </method>
    <method name="GetTextBoxSize" overloaded="no">
      <autodoc>GetTextBoxSize(DC dc, list lines) -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="lines" type="r.wxArrayString" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
        <param name="OUTPUT" type="p.long" default=""/>
      </paramlist>
    </method>
    <method name="BeginBatch" overloaded="no">
      <autodoc>BeginBatch()</autodoc>
    </method>
    <method name="EndBatch" overloaded="no">
      <autodoc>EndBatch()</autodoc>
    </method>
    <method name="GetBatchCount" overloaded="no">
      <autodoc>GetBatchCount() -&gt; int</autodoc>
    </method>
    <method name="ForceRefresh" overloaded="no">
      <autodoc>ForceRefresh()</autodoc>
    </method>
    <method name="Refresh" overloaded="no">
      <autodoc>Refresh(bool eraseb=True, Rect rect=None)</autodoc>
      <paramlist>
        <param name="eraseb" type="bool" default="True"/>
        <param name="rect" type="p.q(const).wxRect" default="NULL"/>
      </paramlist>
    </method>
    <method name="IsEditable" overloaded="no">
      <autodoc>IsEditable() -&gt; bool</autodoc>
    </method>
    <method name="EnableEditing" overloaded="no">
      <autodoc>EnableEditing(bool edit)</autodoc>
      <paramlist>
        <param name="edit" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="EnableCellEditControl" overloaded="no">
      <autodoc>EnableCellEditControl(bool enable=True)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DisableCellEditControl" overloaded="no">
      <autodoc>DisableCellEditControl()</autodoc>
    </method>
    <method name="CanEnableCellControl" overloaded="no">
      <autodoc>CanEnableCellControl() -&gt; bool</autodoc>
    </method>
    <method name="IsCellEditControlEnabled" overloaded="no">
      <autodoc>IsCellEditControlEnabled() -&gt; bool</autodoc>
    </method>
    <method name="IsCellEditControlShown" overloaded="no">
      <autodoc>IsCellEditControlShown() -&gt; bool</autodoc>
    </method>
    <method name="IsCurrentCellReadOnly" overloaded="no">
      <autodoc>IsCurrentCellReadOnly() -&gt; bool</autodoc>
    </method>
    <method name="ShowCellEditControl" overloaded="no">
      <autodoc>ShowCellEditControl()</autodoc>
    </method>
    <method name="HideCellEditControl" overloaded="no">
      <autodoc>HideCellEditControl()</autodoc>
    </method>
    <method name="SaveEditControlValue" overloaded="no">
      <autodoc>SaveEditControlValue()</autodoc>
    </method>
    <method name="XYToCell" overloaded="no">
      <autodoc>XYToCell(int x, int y) -&gt; GridCellCoords</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="YToRow" overloaded="no">
      <autodoc>YToRow(int y) -&gt; int</autodoc>
      <paramlist>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="XToCol" overloaded="no">
      <autodoc>XToCol(int x) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="YToEdgeOfRow" overloaded="no">
      <autodoc>YToEdgeOfRow(int y) -&gt; int</autodoc>
      <paramlist>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="XToEdgeOfCol" overloaded="no">
      <autodoc>XToEdgeOfCol(int x) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CellToRect" overloaded="no">
      <autodoc>CellToRect(int row, int col) -&gt; Rect</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetGridCursorRow" overloaded="no">
      <autodoc>GetGridCursorRow() -&gt; int</autodoc>
    </method>
    <method name="GetGridCursorCol" overloaded="no">
      <autodoc>GetGridCursorCol() -&gt; int</autodoc>
    </method>
    <method name="IsVisible" overloaded="no">
      <autodoc>IsVisible(int row, int col, bool wholeCellVisible=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="wholeCellVisible" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="MakeCellVisible" overloaded="no">
      <autodoc>MakeCellVisible(int row, int col)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetGridCursor" overloaded="no">
      <autodoc>SetGridCursor(int row, int col)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MoveCursorUp" overloaded="no">
      <autodoc>MoveCursorUp(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="MoveCursorDown" overloaded="no">
      <autodoc>MoveCursorDown(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="MoveCursorLeft" overloaded="no">
      <autodoc>MoveCursorLeft(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="MoveCursorRight" overloaded="no">
      <autodoc>MoveCursorRight(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="MovePageDown" overloaded="no">
      <autodoc>MovePageDown() -&gt; bool</autodoc>
    </method>
    <method name="MovePageUp" overloaded="no">
      <autodoc>MovePageUp() -&gt; bool</autodoc>
    </method>
    <method name="MoveCursorUpBlock" overloaded="no">
      <autodoc>MoveCursorUpBlock(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="MoveCursorDownBlock" overloaded="no">
      <autodoc>MoveCursorDownBlock(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="MoveCursorLeftBlock" overloaded="no">
      <autodoc>MoveCursorLeftBlock(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="MoveCursorRightBlock" overloaded="no">
      <autodoc>MoveCursorRightBlock(bool expandSelection) -&gt; bool</autodoc>
      <paramlist>
        <param name="expandSelection" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultRowLabelSize" overloaded="no">
      <autodoc>GetDefaultRowLabelSize() -&gt; int</autodoc>
    </method>
    <method name="GetRowLabelSize" overloaded="no">
      <autodoc>GetRowLabelSize() -&gt; int</autodoc>
    </method>
    <method name="GetDefaultColLabelSize" overloaded="no">
      <autodoc>GetDefaultColLabelSize() -&gt; int</autodoc>
    </method>
    <method name="GetColLabelSize" overloaded="no">
      <autodoc>GetColLabelSize() -&gt; int</autodoc>
    </method>
    <method name="GetLabelBackgroundColour" overloaded="no">
      <autodoc>GetLabelBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetLabelTextColour" overloaded="no">
      <autodoc>GetLabelTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetLabelFont" overloaded="no">
      <autodoc>GetLabelFont() -&gt; Font</autodoc>
    </method>
    <method name="GetRowLabelAlignment" overloaded="no">
      <autodoc>GetRowLabelAlignment() -&gt; (horiz, vert)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetColLabelAlignment" overloaded="no">
      <autodoc>GetColLabelAlignment() -&gt; (horiz, vert)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetColLabelTextOrientation" overloaded="no">
      <autodoc>GetColLabelTextOrientation() -&gt; int</autodoc>
    </method>
    <method name="GetRowLabelValue" overloaded="no">
      <autodoc>GetRowLabelValue(int row) -&gt; String</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetColLabelValue" overloaded="no">
      <autodoc>GetColLabelValue(int col) -&gt; String</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetGridLineColour" overloaded="no">
      <autodoc>GetGridLineColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetCellHighlightColour" overloaded="no">
      <autodoc>GetCellHighlightColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetCellHighlightPenWidth" overloaded="no">
      <autodoc>GetCellHighlightPenWidth() -&gt; int</autodoc>
    </method>
    <method name="GetCellHighlightROPenWidth" overloaded="no">
      <autodoc>GetCellHighlightROPenWidth() -&gt; int</autodoc>
    </method>
    <method name="SetRowLabelSize" overloaded="no">
      <autodoc>SetRowLabelSize(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColLabelSize" overloaded="no">
      <autodoc>SetColLabelSize(int height)</autodoc>
      <paramlist>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLabelBackgroundColour" overloaded="no">
      <autodoc>SetLabelBackgroundColour(Colour ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetLabelTextColour" overloaded="no">
      <autodoc>SetLabelTextColour(Colour ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetLabelFont" overloaded="no">
      <autodoc>SetLabelFont(Font ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetRowLabelAlignment" overloaded="no">
      <autodoc>SetRowLabelAlignment(int horiz, int vert)</autodoc>
      <paramlist>
        <param name="horiz" type="int" default=""/>
        <param name="vert" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColLabelAlignment" overloaded="no">
      <autodoc>SetColLabelAlignment(int horiz, int vert)</autodoc>
      <paramlist>
        <param name="horiz" type="int" default=""/>
        <param name="vert" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColLabelTextOrientation" overloaded="no">
      <autodoc>SetColLabelTextOrientation(int textOrientation)</autodoc>
      <paramlist>
        <param name="textOrientation" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRowLabelValue" overloaded="no">
      <autodoc>SetRowLabelValue(int row, String ??)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetColLabelValue" overloaded="no">
      <autodoc>SetColLabelValue(int col, String ??)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetGridLineColour" overloaded="no">
      <autodoc>SetGridLineColour(Colour ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetCellHighlightColour" overloaded="no">
      <autodoc>SetCellHighlightColour(Colour ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetCellHighlightPenWidth" overloaded="no">
      <autodoc>SetCellHighlightPenWidth(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetCellHighlightROPenWidth" overloaded="no">
      <autodoc>SetCellHighlightROPenWidth(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="EnableDragRowSize" overloaded="no">
      <autodoc>EnableDragRowSize(bool enable=True)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DisableDragRowSize" overloaded="no">
      <autodoc>DisableDragRowSize()</autodoc>
    </method>
    <method name="CanDragRowSize" overloaded="no">
      <autodoc>CanDragRowSize() -&gt; bool</autodoc>
    </method>
    <method name="EnableDragColSize" overloaded="no">
      <autodoc>EnableDragColSize(bool enable=True)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DisableDragColSize" overloaded="no">
      <autodoc>DisableDragColSize()</autodoc>
    </method>
    <method name="CanDragColSize" overloaded="no">
      <autodoc>CanDragColSize() -&gt; bool</autodoc>
    </method>
    <method name="EnableDragGridSize" overloaded="no">
      <autodoc>EnableDragGridSize(bool enable=True)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="DisableDragGridSize" overloaded="no">
      <autodoc>DisableDragGridSize()</autodoc>
    </method>
    <method name="CanDragGridSize" overloaded="no">
      <autodoc>CanDragGridSize() -&gt; bool</autodoc>
    </method>
    <method name="SetAttr" overloaded="no">
      <autodoc>SetAttr(int row, int col, GridCellAttr attr)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="SetRowAttr" overloaded="no">
      <autodoc>SetRowAttr(int row, GridCellAttr attr)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="SetColAttr" overloaded="no">
      <autodoc>SetColAttr(int col, GridCellAttr attr)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="attr" type="p.wxGridCellAttr" default=""/>
      </paramlist>
    </method>
    <method name="SetColFormatBool" overloaded="no">
      <autodoc>SetColFormatBool(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColFormatNumber" overloaded="no">
      <autodoc>SetColFormatNumber(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColFormatFloat" overloaded="no">
      <autodoc>SetColFormatFloat(int col, int width=-1, int precision=-1)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="width" type="int" default="-1"/>
        <param name="precision" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="SetColFormatCustom" overloaded="no">
      <autodoc>SetColFormatCustom(int col, String typeName)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="typeName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="EnableGridLines" overloaded="no">
      <autodoc>EnableGridLines(bool enable=True)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GridLinesEnabled" overloaded="no">
      <autodoc>GridLinesEnabled() -&gt; bool</autodoc>
    </method>
    <method name="GetDefaultRowSize" overloaded="no">
      <autodoc>GetDefaultRowSize() -&gt; int</autodoc>
    </method>
    <method name="GetRowSize" overloaded="no">
      <autodoc>GetRowSize(int row) -&gt; int</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultColSize" overloaded="no">
      <autodoc>GetDefaultColSize() -&gt; int</autodoc>
    </method>
    <method name="GetColSize" overloaded="no">
      <autodoc>GetColSize(int col) -&gt; int</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultCellBackgroundColour" overloaded="no">
      <autodoc>GetDefaultCellBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetCellBackgroundColour" overloaded="no">
      <autodoc>GetCellBackgroundColour(int row, int col) -&gt; Colour</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultCellTextColour" overloaded="no">
      <autodoc>GetDefaultCellTextColour() -&gt; Colour</autodoc>
    </method>
    <method name="GetCellTextColour" overloaded="no">
      <autodoc>GetCellTextColour(int row, int col) -&gt; Colour</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultCellFont" overloaded="no">
      <autodoc>GetDefaultCellFont() -&gt; Font</autodoc>
    </method>
    <method name="GetCellFont" overloaded="no">
      <autodoc>GetCellFont(int row, int col) -&gt; Font</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultCellAlignment" overloaded="no">
      <autodoc>GetDefaultCellAlignment() -&gt; (horiz, vert)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetCellAlignment" overloaded="no">
      <autodoc>GetCellAlignment() -&gt; (horiz, vert)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultCellOverflow" overloaded="no">
      <autodoc>GetDefaultCellOverflow() -&gt; bool</autodoc>
    </method>
    <method name="GetCellOverflow" overloaded="no">
      <autodoc>GetCellOverflow(int row, int col) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCellSize" overloaded="no">
      <autodoc>GetCellSize(int row, int col) -&gt; (num_rows, num_cols)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultRowSize" overloaded="no">
      <autodoc>SetDefaultRowSize(int height, bool resizeExistingRows=False)</autodoc>
      <paramlist>
        <param name="height" type="int" default=""/>
        <param name="resizeExistingRows" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="SetRowSize" overloaded="no">
      <autodoc>SetRowSize(int row, int height)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultColSize" overloaded="no">
      <autodoc>SetDefaultColSize(int width, bool resizeExistingCols=False)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="resizeExistingCols" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="SetColSize" overloaded="no">
      <autodoc>SetColSize(int col, int width)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AutoSizeColumn" overloaded="no">
      <autodoc>AutoSizeColumn(int col, bool setAsMin=True)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="setAsMin" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="AutoSizeRow" overloaded="no">
      <autodoc>AutoSizeRow(int row, bool setAsMin=True)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="setAsMin" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="AutoSizeColumns" overloaded="no">
      <autodoc>AutoSizeColumns(bool setAsMin=True)</autodoc>
      <paramlist>
        <param name="setAsMin" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="AutoSizeRows" overloaded="no">
      <autodoc>AutoSizeRows(bool setAsMin=True)</autodoc>
      <paramlist>
        <param name="setAsMin" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="AutoSize" overloaded="no">
      <autodoc>AutoSize()</autodoc>
    </method>
    <method name="AutoSizeRowLabelSize" overloaded="no">
      <autodoc>AutoSizeRowLabelSize(int row)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AutoSizeColLabelSize" overloaded="no">
      <autodoc>AutoSizeColLabelSize(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColMinimalWidth" overloaded="no">
      <autodoc>SetColMinimalWidth(int col, int width)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRowMinimalHeight" overloaded="no">
      <autodoc>SetRowMinimalHeight(int row, int width)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetColMinimalAcceptableWidth" overloaded="no">
      <autodoc>SetColMinimalAcceptableWidth(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetRowMinimalAcceptableHeight" overloaded="no">
      <autodoc>SetRowMinimalAcceptableHeight(int width)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetColMinimalAcceptableWidth" overloaded="no">
      <autodoc>GetColMinimalAcceptableWidth() -&gt; int</autodoc>
    </method>
    <method name="GetRowMinimalAcceptableHeight" overloaded="no">
      <autodoc>GetRowMinimalAcceptableHeight() -&gt; int</autodoc>
    </method>
    <method name="SetDefaultCellBackgroundColour" overloaded="no">
      <autodoc>SetDefaultCellBackgroundColour(Colour ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetCellBackgroundColour" overloaded="no">
      <autodoc>SetCellBackgroundColour(int row, int col, Colour ??)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultCellTextColour" overloaded="no">
      <autodoc>SetDefaultCellTextColour(Colour ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetCellTextColour" overloaded="no">
      <autodoc>SetCellTextColour(int row, int col, Colour ??)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultCellFont" overloaded="no">
      <autodoc>SetDefaultCellFont(Font ??)</autodoc>
      <paramlist>
        <param name="" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetCellFont" overloaded="no">
      <autodoc>SetCellFont(int row, int col, Font ??)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultCellAlignment" overloaded="no">
      <autodoc>SetDefaultCellAlignment(int horiz, int vert)</autodoc>
      <paramlist>
        <param name="horiz" type="int" default=""/>
        <param name="vert" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetCellAlignment" overloaded="no">
      <autodoc>SetCellAlignment(int row, int col, int horiz, int vert)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="horiz" type="int" default=""/>
        <param name="vert" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultCellOverflow" overloaded="no">
      <autodoc>SetDefaultCellOverflow(bool allow)</autodoc>
      <paramlist>
        <param name="allow" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetCellOverflow" overloaded="no">
      <autodoc>SetCellOverflow(int row, int col, bool allow)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="allow" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetCellSize" overloaded="no">
      <autodoc>SetCellSize(int row, int col, int num_rows, int num_cols)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="num_rows" type="int" default=""/>
        <param name="num_cols" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultRenderer" overloaded="no">
      <autodoc>SetDefaultRenderer(GridCellRenderer renderer)</autodoc>
      <paramlist>
        <param name="renderer" type="p.wxGridCellRenderer" default=""/>
      </paramlist>
    </method>
    <method name="SetCellRenderer" overloaded="no">
      <autodoc>SetCellRenderer(int row, int col, GridCellRenderer renderer)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="renderer" type="p.wxGridCellRenderer" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultRenderer" overloaded="no">
      <autodoc>GetDefaultRenderer() -&gt; GridCellRenderer</autodoc>
    </method>
    <method name="GetCellRenderer" overloaded="no">
      <autodoc>GetCellRenderer(int row, int col) -&gt; GridCellRenderer</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDefaultEditor" overloaded="no">
      <autodoc>SetDefaultEditor(GridCellEditor editor)</autodoc>
      <paramlist>
        <param name="editor" type="p.wxGridCellEditor" default=""/>
      </paramlist>
    </method>
    <method name="SetCellEditor" overloaded="no">
      <autodoc>SetCellEditor(int row, int col, GridCellEditor editor)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="editor" type="p.wxGridCellEditor" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultEditor" overloaded="no">
      <autodoc>GetDefaultEditor() -&gt; GridCellEditor</autodoc>
    </method>
    <method name="GetCellEditor" overloaded="no">
      <autodoc>GetCellEditor(int row, int col) -&gt; GridCellEditor</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCellValue" overloaded="no">
      <autodoc>GetCellValue(int row, int col) -&gt; String</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetCellValue" overloaded="no">
      <autodoc>SetCellValue(int row, int col, String s)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="IsReadOnly" overloaded="no">
      <autodoc>IsReadOnly(int row, int col) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetReadOnly" overloaded="no">
      <autodoc>SetReadOnly(int row, int col, bool isReadOnly=True)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="isReadOnly" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SelectRow" overloaded="no">
      <autodoc>SelectRow(int row, bool addToSelected=False)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="addToSelected" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="SelectCol" overloaded="no">
      <autodoc>SelectCol(int col, bool addToSelected=False)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
        <param name="addToSelected" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="SelectBlock" overloaded="no">
      <autodoc>SelectBlock(int topRow, int leftCol, int bottomRow, int rightCol, 
    bool addToSelected=False)</autodoc>
      <paramlist>
        <param name="topRow" type="int" default=""/>
        <param name="leftCol" type="int" default=""/>
        <param name="bottomRow" type="int" default=""/>
        <param name="rightCol" type="int" default=""/>
        <param name="addToSelected" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="SelectAll" overloaded="no">
      <autodoc>SelectAll()</autodoc>
    </method>
    <method name="IsSelection" overloaded="no">
      <autodoc>IsSelection() -&gt; bool</autodoc>
    </method>
    <method name="ClearSelection" overloaded="no">
      <autodoc>ClearSelection()</autodoc>
    </method>
    <method name="IsInSelection" overloaded="no">
      <autodoc>IsInSelection(int row, int col) -&gt; bool</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectedCells" overloaded="no">
      <autodoc>GetSelectedCells() -&gt; wxGridCellCoordsArray</autodoc>
    </method>
    <method name="GetSelectionBlockTopLeft" overloaded="no">
      <autodoc>GetSelectionBlockTopLeft() -&gt; wxGridCellCoordsArray</autodoc>
    </method>
    <method name="GetSelectionBlockBottomRight" overloaded="no">
      <autodoc>GetSelectionBlockBottomRight() -&gt; wxGridCellCoordsArray</autodoc>
    </method>
    <method name="GetSelectedRows" overloaded="no">
      <autodoc>GetSelectedRows() -&gt; wxArrayInt</autodoc>
    </method>
    <method name="GetSelectedCols" overloaded="no">
      <autodoc>GetSelectedCols() -&gt; wxArrayInt</autodoc>
    </method>
    <method name="DeselectRow" overloaded="no">
      <autodoc>DeselectRow(int row)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeselectCol" overloaded="no">
      <autodoc>DeselectCol(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DeselectCell" overloaded="no">
      <autodoc>DeselectCell(int row, int col)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="BlockToDeviceRect" overloaded="no">
      <autodoc>BlockToDeviceRect(GridCellCoords topLeft, GridCellCoords bottomRight) -&gt; Rect</autodoc>
      <paramlist>
        <param name="topLeft" type="r.q(const).wxGridCellCoords" default=""/>
        <param name="bottomRight" type="r.q(const).wxGridCellCoords" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectionBackground" overloaded="no">
      <autodoc>GetSelectionBackground() -&gt; Colour</autodoc>
    </method>
    <method name="GetSelectionForeground" overloaded="no">
      <autodoc>GetSelectionForeground() -&gt; Colour</autodoc>
    </method>
    <method name="SetSelectionBackground" overloaded="no">
      <autodoc>SetSelectionBackground(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetSelectionForeground" overloaded="no">
      <autodoc>SetSelectionForeground(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="RegisterDataType" overloaded="no">
      <autodoc>RegisterDataType(String typeName, GridCellRenderer renderer, GridCellEditor editor)</autodoc>
      <paramlist>
        <param name="typeName" type="r.q(const).wxString" default=""/>
        <param name="renderer" type="p.wxGridCellRenderer" default=""/>
        <param name="editor" type="p.wxGridCellEditor" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultEditorForCell" overloaded="no">
      <autodoc>GetDefaultEditorForCell(int row, int col) -&gt; GridCellEditor</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultRendererForCell" overloaded="no">
      <autodoc>GetDefaultRendererForCell(int row, int col) -&gt; GridCellRenderer</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultEditorForType" overloaded="no">
      <autodoc>GetDefaultEditorForType(String typeName) -&gt; GridCellEditor</autodoc>
      <paramlist>
        <param name="typeName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetDefaultRendererForType" overloaded="no">
      <autodoc>GetDefaultRendererForType(String typeName) -&gt; GridCellRenderer</autodoc>
      <paramlist>
        <param name="typeName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetMargins" overloaded="no">
      <autodoc>SetMargins(int extraWidth, int extraHeight)</autodoc>
      <paramlist>
        <param name="extraWidth" type="int" default=""/>
        <param name="extraHeight" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetGridWindow" overloaded="no">
      <autodoc>GetGridWindow() -&gt; Window</autodoc>
    </method>
    <method name="GetGridRowLabelWindow" overloaded="no">
      <autodoc>GetGridRowLabelWindow() -&gt; Window</autodoc>
    </method>
    <method name="GetGridColLabelWindow" overloaded="no">
      <autodoc>GetGridColLabelWindow() -&gt; Window</autodoc>
    </method>
    <method name="GetGridCornerLabelWindow" overloaded="no">
      <autodoc>GetGridCornerLabelWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <class name="GridEvent" oldname="wxGridEvent" module="grid">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="GridEvent" overloaded="no">
      <autodoc>__init__(int id, wxEventType type, Grid obj, int row=-1, int col=-1, 
    int x=-1, int y=-1, bool sel=True, bool control=False, 
    bool shift=False, bool alt=False, 
    bool meta=False) -&gt; GridEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="type" type="wxEventType" default=""/>
        <param name="obj" type="p.wxGrid" default=""/>
        <param name="row" type="int" default="-1"/>
        <param name="col" type="int" default="-1"/>
        <param name="x" type="int" default="-1"/>
        <param name="y" type="int" default="-1"/>
        <param name="sel" type="bool" default="True"/>
        <param name="control" type="bool" default="False"/>
        <param name="shift" type="bool" default="False"/>
        <param name="alt" type="bool" default="False"/>
        <param name="meta" type="bool" default="False"/>
      </paramlist>
    </constructor>
    <method name="GetRow" overloaded="no">
      <autodoc>GetRow() -&gt; int</autodoc>
    </method>
    <method name="GetCol" overloaded="no">
      <autodoc>GetCol() -&gt; int</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="Selecting" overloaded="no">
      <autodoc>Selecting() -&gt; bool</autodoc>
    </method>
    <method name="ControlDown" overloaded="no">
      <autodoc>ControlDown() -&gt; bool</autodoc>
    </method>
    <method name="MetaDown" overloaded="no">
      <autodoc>MetaDown() -&gt; bool</autodoc>
    </method>
    <method name="ShiftDown" overloaded="no">
      <autodoc>ShiftDown() -&gt; bool</autodoc>
    </method>
    <method name="AltDown" overloaded="no">
      <autodoc>AltDown() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="GridSizeEvent" oldname="wxGridSizeEvent" module="grid">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="GridSizeEvent" overloaded="no">
      <autodoc>__init__(int id, wxEventType type, Grid obj, int rowOrCol=-1, 
    int x=-1, int y=-1, bool control=False, bool shift=False, 
    bool alt=False, bool meta=False) -&gt; GridSizeEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="type" type="wxEventType" default=""/>
        <param name="obj" type="p.wxGrid" default=""/>
        <param name="rowOrCol" type="int" default="-1"/>
        <param name="x" type="int" default="-1"/>
        <param name="y" type="int" default="-1"/>
        <param name="control" type="bool" default="False"/>
        <param name="shift" type="bool" default="False"/>
        <param name="alt" type="bool" default="False"/>
        <param name="meta" type="bool" default="False"/>
      </paramlist>
    </constructor>
    <method name="GetRowOrCol" overloaded="no">
      <autodoc>GetRowOrCol() -&gt; int</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; Point</autodoc>
    </method>
    <method name="ControlDown" overloaded="no">
      <autodoc>ControlDown() -&gt; bool</autodoc>
    </method>
    <method name="MetaDown" overloaded="no">
      <autodoc>MetaDown() -&gt; bool</autodoc>
    </method>
    <method name="ShiftDown" overloaded="no">
      <autodoc>ShiftDown() -&gt; bool</autodoc>
    </method>
    <method name="AltDown" overloaded="no">
      <autodoc>AltDown() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="GridRangeSelectEvent" oldname="wxGridRangeSelectEvent" module="grid">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="GridRangeSelectEvent" overloaded="no">
      <autodoc>__init__(int id, wxEventType type, Grid obj, GridCellCoords topLeft, 
    GridCellCoords bottomRight, bool sel=True, 
    bool control=False, bool shift=False, 
    bool alt=False, bool meta=False) -&gt; GridRangeSelectEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="type" type="wxEventType" default=""/>
        <param name="obj" type="p.wxGrid" default=""/>
        <param name="topLeft" type="r.q(const).wxGridCellCoords" default=""/>
        <param name="bottomRight" type="r.q(const).wxGridCellCoords" default=""/>
        <param name="sel" type="bool" default="True"/>
        <param name="control" type="bool" default="False"/>
        <param name="shift" type="bool" default="False"/>
        <param name="alt" type="bool" default="False"/>
        <param name="meta" type="bool" default="False"/>
      </paramlist>
    </constructor>
    <method name="GetTopLeftCoords" overloaded="no">
      <autodoc>GetTopLeftCoords() -&gt; GridCellCoords</autodoc>
    </method>
    <method name="GetBottomRightCoords" overloaded="no">
      <autodoc>GetBottomRightCoords() -&gt; GridCellCoords</autodoc>
    </method>
    <method name="GetTopRow" overloaded="no">
      <autodoc>GetTopRow() -&gt; int</autodoc>
    </method>
    <method name="GetBottomRow" overloaded="no">
      <autodoc>GetBottomRow() -&gt; int</autodoc>
    </method>
    <method name="GetLeftCol" overloaded="no">
      <autodoc>GetLeftCol() -&gt; int</autodoc>
    </method>
    <method name="GetRightCol" overloaded="no">
      <autodoc>GetRightCol() -&gt; int</autodoc>
    </method>
    <method name="Selecting" overloaded="no">
      <autodoc>Selecting() -&gt; bool</autodoc>
    </method>
    <method name="ControlDown" overloaded="no">
      <autodoc>ControlDown() -&gt; bool</autodoc>
    </method>
    <method name="MetaDown" overloaded="no">
      <autodoc>MetaDown() -&gt; bool</autodoc>
    </method>
    <method name="ShiftDown" overloaded="no">
      <autodoc>ShiftDown() -&gt; bool</autodoc>
    </method>
    <method name="AltDown" overloaded="no">
      <autodoc>AltDown() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="GridEditorCreatedEvent" oldname="wxGridEditorCreatedEvent" module="grid">
    <baseclass name="wxCommandEvent"/>
    <constructor name="GridEditorCreatedEvent" overloaded="no">
      <autodoc>__init__(int id, wxEventType type, Object obj, int row, int col, 
    Control ctrl) -&gt; GridEditorCreatedEvent</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
        <param name="type" type="wxEventType" default=""/>
        <param name="obj" type="p.wxObject" default=""/>
        <param name="row" type="int" default=""/>
        <param name="col" type="int" default=""/>
        <param name="ctrl" type="p.wxControl" default=""/>
      </paramlist>
    </constructor>
    <method name="GetRow" overloaded="no">
      <autodoc>GetRow() -&gt; int</autodoc>
    </method>
    <method name="GetCol" overloaded="no">
      <autodoc>GetCol() -&gt; int</autodoc>
    </method>
    <method name="GetControl" overloaded="no">
      <autodoc>GetControl() -&gt; Control</autodoc>
    </method>
    <method name="SetRow" overloaded="no">
      <autodoc>SetRow(int row)</autodoc>
      <paramlist>
        <param name="row" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetCol" overloaded="no">
      <autodoc>SetCol(int col)</autodoc>
      <paramlist>
        <param name="col" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetControl" overloaded="no">
      <autodoc>SetControl(Control ctrl)</autodoc>
      <paramlist>
        <param name="ctrl" type="p.wxControl" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
EVT_GRID_CELL_LEFT_CLICK = wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_CLICK )
EVT_GRID_CELL_RIGHT_CLICK = wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_CLICK )
EVT_GRID_CELL_LEFT_DCLICK = wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_DCLICK )
EVT_GRID_CELL_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_DCLICK )
EVT_GRID_LABEL_LEFT_CLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_CLICK )
EVT_GRID_LABEL_RIGHT_CLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_CLICK )
EVT_GRID_LABEL_LEFT_DCLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_DCLICK )
EVT_GRID_LABEL_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_DCLICK )
EVT_GRID_ROW_SIZE = wx.PyEventBinder( wxEVT_GRID_ROW_SIZE )
EVT_GRID_COL_SIZE = wx.PyEventBinder( wxEVT_GRID_COL_SIZE )
EVT_GRID_RANGE_SELECT = wx.PyEventBinder( wxEVT_GRID_RANGE_SELECT )
EVT_GRID_CELL_CHANGE = wx.PyEventBinder( wxEVT_GRID_CELL_CHANGE )
EVT_GRID_SELECT_CELL = wx.PyEventBinder( wxEVT_GRID_SELECT_CELL )
EVT_GRID_EDITOR_SHOWN = wx.PyEventBinder( wxEVT_GRID_EDITOR_SHOWN )
EVT_GRID_EDITOR_HIDDEN = wx.PyEventBinder( wxEVT_GRID_EDITOR_HIDDEN )
EVT_GRID_EDITOR_CREATED = wx.PyEventBinder( wxEVT_GRID_EDITOR_CREATED )
</pythoncode>
</module>
<module name="html">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="HtmlLinkInfo" oldname="wxHtmlLinkInfo" module="html">
    <baseclass name="wxObject"/>
    <constructor name="HtmlLinkInfo" overloaded="no">
      <autodoc>__init__(String href, String target=EmptyString) -&gt; HtmlLinkInfo</autodoc>
      <paramlist>
        <param name="href" type="r.q(const).wxString" default=""/>
        <param name="target" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <method name="GetHref" overloaded="no">
      <autodoc>GetHref() -&gt; String</autodoc>
    </method>
    <method name="GetTarget" overloaded="no">
      <autodoc>GetTarget() -&gt; String</autodoc>
    </method>
    <method name="GetEvent" overloaded="no">
      <autodoc>GetEvent() -&gt; MouseEvent</autodoc>
    </method>
    <method name="GetHtmlCell" overloaded="no">
      <autodoc>GetHtmlCell() -&gt; HtmlCell</autodoc>
    </method>
    <method name="SetEvent" overloaded="no">
      <autodoc>SetEvent(MouseEvent e)</autodoc>
      <paramlist>
        <param name="e" type="p.q(const).wxMouseEvent" default=""/>
      </paramlist>
    </method>
    <method name="SetHtmlCell" overloaded="no">
      <autodoc>SetHtmlCell(HtmlCell e)</autodoc>
      <paramlist>
        <param name="e" type="p.q(const).wxHtmlCell" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="HtmlTag" oldname="wxHtmlTag" module="html">
    <baseclass name="wxObject"/>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="HasParam" overloaded="no">
      <autodoc>HasParam(String par) -&gt; bool</autodoc>
      <paramlist>
        <param name="par" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetParam" overloaded="no">
      <autodoc>GetParam(String par, int with_commas=False) -&gt; String</autodoc>
      <paramlist>
        <param name="par" type="r.q(const).wxString" default=""/>
        <param name="with_commas" type="int" default="False"/>
      </paramlist>
    </method>
    <method name="GetAllParams" overloaded="no">
      <autodoc>GetAllParams() -&gt; String</autodoc>
    </method>
    <method name="HasEnding" overloaded="no">
      <autodoc>HasEnding() -&gt; bool</autodoc>
    </method>
    <method name="GetBeginPos" overloaded="no">
      <autodoc>GetBeginPos() -&gt; int</autodoc>
    </method>
    <method name="GetEndPos1" overloaded="no">
      <autodoc>GetEndPos1() -&gt; int</autodoc>
    </method>
    <method name="GetEndPos2" overloaded="no">
      <autodoc>GetEndPos2() -&gt; int</autodoc>
    </method>
  </class>
  <class name="HtmlParser" oldname="wxHtmlParser" module="html">
    <baseclass name="wxObject"/>
    <method name="SetFS" overloaded="no">
      <autodoc>SetFS(FileSystem fs)</autodoc>
      <paramlist>
        <param name="fs" type="p.wxFileSystem" default=""/>
      </paramlist>
    </method>
    <method name="GetFS" overloaded="no">
      <autodoc>GetFS() -&gt; FileSystem</autodoc>
    </method>
    <method name="Parse" overloaded="no">
      <autodoc>Parse(String source) -&gt; Object</autodoc>
      <paramlist>
        <param name="source" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="InitParser" overloaded="no">
      <autodoc>InitParser(String source)</autodoc>
      <paramlist>
        <param name="source" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DoneParser" overloaded="no">
      <autodoc>DoneParser()</autodoc>
    </method>
    <method name="DoParsing" overloaded="no">
      <autodoc>DoParsing(int begin_pos, int end_pos)</autodoc>
      <paramlist>
        <param name="begin_pos" type="int" default=""/>
        <param name="end_pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="StopParsing" overloaded="no">
      <autodoc>StopParsing()</autodoc>
    </method>
    <method name="AddTagHandler" overloaded="no">
      <autodoc>AddTagHandler(HtmlTagHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxHtmlTagHandler" default=""/>
      </paramlist>
    </method>
    <method name="GetSource" overloaded="no">
      <autodoc>GetSource() -&gt; String</autodoc>
    </method>
    <method name="PushTagHandler" overloaded="no">
      <autodoc>PushTagHandler(HtmlTagHandler handler, String tags)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxHtmlTagHandler" default=""/>
        <param name="tags" type="wxString" default=""/>
      </paramlist>
    </method>
    <method name="PopTagHandler" overloaded="no">
      <autodoc>PopTagHandler()</autodoc>
    </method>
  </class>
  <class name="HtmlWinParser" oldname="wxHtmlWinParser" module="html">
    <baseclass name="wxHtmlParser"/>
    <constructor name="HtmlWinParser" overloaded="no">
      <autodoc>__init__(HtmlWindow wnd=None) -&gt; HtmlWinParser</autodoc>
      <paramlist>
        <param name="wnd" type="p.wxPyHtmlWindow" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="SetDC" overloaded="no">
      <autodoc>SetDC(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="GetDC" overloaded="no">
      <autodoc>GetDC() -&gt; DC</autodoc>
    </method>
    <method name="GetCharHeight" overloaded="no">
      <autodoc>GetCharHeight() -&gt; int</autodoc>
    </method>
    <method name="GetCharWidth" overloaded="no">
      <autodoc>GetCharWidth() -&gt; int</autodoc>
    </method>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; HtmlWindow</autodoc>
    </method>
    <method name="SetFonts" overloaded="no">
      <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
      <paramlist>
        <param name="normal_face" type="wxString" default=""/>
        <param name="fixed_face" type="wxString" default=""/>
        <param name="sizes" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetContainer" overloaded="no">
      <autodoc>GetContainer() -&gt; HtmlContainerCell</autodoc>
    </method>
    <method name="OpenContainer" overloaded="no">
      <autodoc>OpenContainer() -&gt; HtmlContainerCell</autodoc>
    </method>
    <method name="SetContainer" overloaded="no">
      <autodoc>SetContainer(HtmlContainerCell c) -&gt; HtmlContainerCell</autodoc>
      <paramlist>
        <param name="c" type="p.wxHtmlContainerCell" default=""/>
      </paramlist>
    </method>
    <method name="CloseContainer" overloaded="no">
      <autodoc>CloseContainer() -&gt; HtmlContainerCell</autodoc>
    </method>
    <method name="GetFontSize" overloaded="no">
      <autodoc>GetFontSize() -&gt; int</autodoc>
    </method>
    <method name="SetFontSize" overloaded="no">
      <autodoc>SetFontSize(int s)</autodoc>
      <paramlist>
        <param name="s" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFontBold" overloaded="no">
      <autodoc>GetFontBold() -&gt; int</autodoc>
    </method>
    <method name="SetFontBold" overloaded="no">
      <autodoc>SetFontBold(int x)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFontItalic" overloaded="no">
      <autodoc>GetFontItalic() -&gt; int</autodoc>
    </method>
    <method name="SetFontItalic" overloaded="no">
      <autodoc>SetFontItalic(int x)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFontUnderlined" overloaded="no">
      <autodoc>GetFontUnderlined() -&gt; int</autodoc>
    </method>
    <method name="SetFontUnderlined" overloaded="no">
      <autodoc>SetFontUnderlined(int x)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFontFixed" overloaded="no">
      <autodoc>GetFontFixed() -&gt; int</autodoc>
    </method>
    <method name="SetFontFixed" overloaded="no">
      <autodoc>SetFontFixed(int x)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetAlign" overloaded="no">
      <autodoc>GetAlign() -&gt; int</autodoc>
    </method>
    <method name="SetAlign" overloaded="no">
      <autodoc>SetAlign(int a)</autodoc>
      <paramlist>
        <param name="a" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLinkColor" overloaded="no">
      <autodoc>GetLinkColor() -&gt; Colour</autodoc>
    </method>
    <method name="SetLinkColor" overloaded="no">
      <autodoc>SetLinkColor(Colour clr)</autodoc>
      <paramlist>
        <param name="clr" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetActualColor" overloaded="no">
      <autodoc>GetActualColor() -&gt; Colour</autodoc>
    </method>
    <method name="SetActualColor" overloaded="no">
      <autodoc>SetActualColor(Colour clr)</autodoc>
      <paramlist>
        <param name="clr" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetLink" overloaded="no">
      <autodoc>SetLink(String link)</autodoc>
      <paramlist>
        <param name="link" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="CreateCurrentFont" overloaded="no">
      <autodoc>CreateCurrentFont() -&gt; Font</autodoc>
    </method>
    <method name="GetLink" overloaded="no">
      <autodoc>GetLink() -&gt; HtmlLinkInfo</autodoc>
    </method>
  </class>
  <class name="HtmlTagHandler" oldname="wxPyHtmlTagHandler" module="html">
    <baseclass name="wxObject"/>
    <constructor name="wxPyHtmlTagHandler" overloaded="no">
      <autodoc>__init__() -&gt; HtmlTagHandler</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetParser" overloaded="no">
      <autodoc>SetParser(HtmlParser parser)</autodoc>
      <paramlist>
        <param name="parser" type="p.wxHtmlParser" default=""/>
      </paramlist>
    </method>
    <method name="GetParser" overloaded="no">
      <autodoc>GetParser() -&gt; HtmlParser</autodoc>
    </method>
    <method name="ParseInner" overloaded="no">
      <autodoc>ParseInner(HtmlTag tag)</autodoc>
      <paramlist>
        <param name="tag" type="r.q(const).wxHtmlTag" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="HtmlWinTagHandler" oldname="wxPyHtmlWinTagHandler" module="html">
    <baseclass name="wxPyHtmlTagHandler"/>
    <constructor name="wxPyHtmlWinTagHandler" overloaded="no">
      <autodoc>__init__() -&gt; HtmlWinTagHandler</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetParser" overloaded="no">
      <autodoc>SetParser(HtmlParser parser)</autodoc>
      <paramlist>
        <param name="parser" type="p.wxHtmlParser" default=""/>
      </paramlist>
    </method>
    <method name="GetParser" overloaded="no">
      <autodoc>GetParser() -&gt; HtmlWinParser</autodoc>
    </method>
    <method name="ParseInner" overloaded="no">
      <autodoc>ParseInner(HtmlTag tag)</autodoc>
      <paramlist>
        <param name="tag" type="r.q(const).wxHtmlTag" default=""/>
      </paramlist>
    </method>
  </class>
  <function oldname="wxHtmlWinParser_AddTagHandler" name="HtmlWinParser_AddTagHandler" overloaded="no">
    <autodoc>HtmlWinParser_AddTagHandler(PyObject tagHandlerClass)</autodoc>
    <paramlist>
      <param name="tagHandlerClass" type="p.PyObject" default=""/>
    </paramlist>
  </function>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="HtmlSelection" oldname="wxHtmlSelection" module="html">
    <constructor name="HtmlSelection" overloaded="no">
      <autodoc>__init__() -&gt; HtmlSelection</autodoc>
    </constructor>
    <destructor name="~wxHtmlSelection">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Set" overloaded="no">
      <autodoc>Set(Point fromPos, HtmlCell fromCell, Point toPos, HtmlCell toCell)</autodoc>
      <paramlist>
        <param name="fromPos" type="r.q(const).wxPoint" default=""/>
        <param name="fromCell" type="p.q(const).wxHtmlCell" default=""/>
        <param name="toPos" type="r.q(const).wxPoint" default=""/>
        <param name="toCell" type="p.q(const).wxHtmlCell" default=""/>
      </paramlist>
    </method>
    <method name="SetCells" overloaded="no">
      <autodoc>SetCells(HtmlCell fromCell, HtmlCell toCell)</autodoc>
      <paramlist>
        <param name="fromCell" type="p.q(const).wxHtmlCell" default=""/>
        <param name="toCell" type="p.q(const).wxHtmlCell" default=""/>
      </paramlist>
    </method>
    <method name="GetFromCell" overloaded="no">
      <autodoc>GetFromCell() -&gt; HtmlCell</autodoc>
    </method>
    <method name="GetToCell" overloaded="no">
      <autodoc>GetToCell() -&gt; HtmlCell</autodoc>
    </method>
    <method name="GetFromPos" overloaded="no">
      <autodoc>GetFromPos() -&gt; Point</autodoc>
    </method>
    <method name="GetToPos" overloaded="no">
      <autodoc>GetToPos() -&gt; Point</autodoc>
    </method>
    <method name="GetFromPrivPos" overloaded="no">
      <autodoc>GetFromPrivPos() -&gt; Point</autodoc>
    </method>
    <method name="GetToPrivPos" overloaded="no">
      <autodoc>GetToPrivPos() -&gt; Point</autodoc>
    </method>
    <method name="SetFromPrivPos" overloaded="no">
      <autodoc>SetFromPrivPos(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetToPrivPos" overloaded="no">
      <autodoc>SetToPrivPos(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="ClearPrivPos" overloaded="no">
      <autodoc>ClearPrivPos()</autodoc>
    </method>
    <method name="IsEmpty" overloaded="no">
      <autodoc>IsEmpty() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="HtmlRenderingState" oldname="wxHtmlRenderingState" module="html">
    <constructor name="HtmlRenderingState" overloaded="no">
      <autodoc>__init__() -&gt; HtmlRenderingState</autodoc>
    </constructor>
    <destructor name="~wxHtmlRenderingState">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetSelectionState" overloaded="no">
      <autodoc>SetSelectionState(int s)</autodoc>
      <paramlist>
        <param name="s" type="wxHtmlSelectionState" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectionState" overloaded="no">
      <autodoc>GetSelectionState() -&gt; int</autodoc>
    </method>
    <method name="SetFgColour" overloaded="no">
      <autodoc>SetFgColour(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetFgColour" overloaded="no">
      <autodoc>GetFgColour() -&gt; Colour</autodoc>
    </method>
    <method name="SetBgColour" overloaded="no">
      <autodoc>SetBgColour(Colour c)</autodoc>
      <paramlist>
        <param name="c" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetBgColour" overloaded="no">
      <autodoc>GetBgColour() -&gt; Colour</autodoc>
    </method>
  </class>
  <class name="HtmlRenderingStyle" oldname="wxHtmlRenderingStyle" module="html">
    <method name="GetSelectedTextColour" overloaded="no">
      <autodoc>GetSelectedTextColour(Colour clr) -&gt; Colour</autodoc>
      <paramlist>
        <param name="clr" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectedTextBgColour" overloaded="no">
      <autodoc>GetSelectedTextBgColour(Colour clr) -&gt; Colour</autodoc>
      <paramlist>
        <param name="clr" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="DefaultHtmlRenderingStyle" oldname="wxDefaultHtmlRenderingStyle" module="html">
    <baseclass name="wxHtmlRenderingStyle"/>
    <method name="GetSelectedTextColour" overloaded="no">
      <autodoc>GetSelectedTextColour(Colour clr) -&gt; Colour</autodoc>
      <paramlist>
        <param name="clr" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectedTextBgColour" overloaded="no">
      <autodoc>GetSelectedTextBgColour(Colour clr) -&gt; Colour</autodoc>
      <paramlist>
        <param name="clr" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="HtmlRenderingInfo" oldname="wxHtmlRenderingInfo" module="html">
    <constructor name="HtmlRenderingInfo" overloaded="no">
      <autodoc>__init__() -&gt; HtmlRenderingInfo</autodoc>
    </constructor>
    <destructor name="~wxHtmlRenderingInfo">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(HtmlSelection s)</autodoc>
      <paramlist>
        <param name="s" type="p.wxHtmlSelection" default=""/>
      </paramlist>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; HtmlSelection</autodoc>
    </method>
    <method name="SetStyle" overloaded="no">
      <autodoc>SetStyle(HtmlRenderingStyle style)</autodoc>
      <paramlist>
        <param name="style" type="p.wxHtmlRenderingStyle" default=""/>
      </paramlist>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle() -&gt; HtmlRenderingStyle</autodoc>
    </method>
    <method name="GetState" overloaded="no">
      <autodoc>GetState() -&gt; HtmlRenderingState</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="HtmlCell" oldname="wxHtmlCell" module="html">
    <baseclass name="wxObject"/>
    <constructor name="HtmlCell" overloaded="no">
      <autodoc>__init__() -&gt; HtmlCell</autodoc>
    </constructor>
    <method name="GetPosX" overloaded="no">
      <autodoc>GetPosX() -&gt; int</autodoc>
    </method>
    <method name="GetPosY" overloaded="no">
      <autodoc>GetPosY() -&gt; int</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; int</autodoc>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; int</autodoc>
    </method>
    <method name="GetDescent" overloaded="no">
      <autodoc>GetDescent() -&gt; int</autodoc>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; String</autodoc>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(String id)</autodoc>
      <paramlist>
        <param name="id" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetLink" overloaded="no">
      <autodoc>GetLink(int x=0, int y=0) -&gt; HtmlLinkInfo</autodoc>
      <paramlist>
        <param name="x" type="int" default="0"/>
        <param name="y" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetNext" overloaded="no">
      <autodoc>GetNext() -&gt; HtmlCell</autodoc>
    </method>
    <method name="GetParent" overloaded="no">
      <autodoc>GetParent() -&gt; HtmlContainerCell</autodoc>
    </method>
    <method name="GetFirstChild" overloaded="no">
      <autodoc>GetFirstChild() -&gt; HtmlCell</autodoc>
    </method>
    <method name="GetCursor" overloaded="no">
      <autodoc>GetCursor() -&gt; Cursor</autodoc>
    </method>
    <method name="IsFormattingCell" overloaded="no">
      <autodoc>IsFormattingCell() -&gt; bool</autodoc>
    </method>
    <method name="SetLink" overloaded="no">
      <autodoc>SetLink(HtmlLinkInfo link)</autodoc>
      <paramlist>
        <param name="link" type="r.q(const).wxHtmlLinkInfo" default=""/>
      </paramlist>
    </method>
    <method name="SetNext" overloaded="no">
      <autodoc>SetNext(HtmlCell cell)</autodoc>
      <paramlist>
        <param name="cell" type="p.wxHtmlCell" default=""/>
      </paramlist>
    </method>
    <method name="SetParent" overloaded="no">
      <autodoc>SetParent(HtmlContainerCell p)</autodoc>
      <paramlist>
        <param name="p" type="p.wxHtmlContainerCell" default=""/>
      </paramlist>
    </method>
    <method name="SetPos" overloaded="no">
      <autodoc>SetPos(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Layout" overloaded="no">
      <autodoc>Layout(int w)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Draw" overloaded="no">
      <autodoc>Draw(DC dc, int x, int y, int view_y1, int view_y2, HtmlRenderingInfo info)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="view_y1" type="int" default=""/>
        <param name="view_y2" type="int" default=""/>
        <param name="info" type="r.wxHtmlRenderingInfo" default=""/>
      </paramlist>
    </method>
    <method name="DrawInvisible" overloaded="no">
      <autodoc>DrawInvisible(DC dc, int x, int y, HtmlRenderingInfo info)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="info" type="r.wxHtmlRenderingInfo" default=""/>
      </paramlist>
    </method>
    <method name="Find" overloaded="no">
      <autodoc>Find(int condition, void param) -&gt; HtmlCell</autodoc>
      <paramlist>
        <param name="condition" type="int" default=""/>
        <param name="param" type="p.q(const).void" default=""/>
      </paramlist>
    </method>
    <method name="AdjustPagebreak" overloaded="no">
      <autodoc>AdjustPagebreak(int INOUT) -&gt; bool</autodoc>
      <paramlist>
        <param name="INOUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="SetCanLiveOnPagebreak" overloaded="no">
      <autodoc>SetCanLiveOnPagebreak(bool can)</autodoc>
      <paramlist>
        <param name="can" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsLinebreakAllowed" overloaded="no">
      <autodoc>IsLinebreakAllowed() -&gt; bool</autodoc>
    </method>
    <method name="IsTerminalCell" overloaded="no">
      <autodoc>IsTerminalCell() -&gt; bool</autodoc>
    </method>
    <method name="FindCellByPos" overloaded="no">
      <autodoc>FindCellByPos(int x, int y, unsigned int flags=HTML_FIND_EXACT) -&gt; HtmlCell</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="flags" type="unsigned int" default="wxHTML_FIND_EXACT"/>
      </paramlist>
    </method>
    <method name="GetAbsPos" overloaded="no">
      <autodoc>GetAbsPos() -&gt; Point</autodoc>
    </method>
    <method name="GetFirstTerminal" overloaded="no">
      <autodoc>GetFirstTerminal() -&gt; HtmlCell</autodoc>
    </method>
    <method name="GetLastTerminal" overloaded="no">
      <autodoc>GetLastTerminal() -&gt; HtmlCell</autodoc>
    </method>
    <method name="GetDepth" overloaded="no">
      <autodoc>GetDepth() -&gt; unsigned int</autodoc>
    </method>
    <method name="IsBefore" overloaded="no">
      <autodoc>IsBefore(HtmlCell cell) -&gt; bool</autodoc>
      <paramlist>
        <param name="cell" type="p.wxHtmlCell" default=""/>
      </paramlist>
    </method>
    <method name="ConvertToText" overloaded="no">
      <autodoc>ConvertToText(HtmlSelection sel) -&gt; String</autodoc>
      <paramlist>
        <param name="sel" type="p.wxHtmlSelection" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="HtmlWordCell" oldname="wxHtmlWordCell" module="html">
    <baseclass name="wxHtmlCell"/>
    <constructor name="HtmlWordCell" overloaded="no">
      <autodoc>__init__(String word, DC dc) -&gt; HtmlWordCell</autodoc>
      <paramlist>
        <param name="word" type="r.q(const).wxString" default=""/>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </constructor>
  </class>
  <class name="HtmlContainerCell" oldname="wxHtmlContainerCell" module="html">
    <baseclass name="wxHtmlCell"/>
    <constructor name="HtmlContainerCell" overloaded="no">
      <autodoc>__init__(HtmlContainerCell parent) -&gt; HtmlContainerCell</autodoc>
      <paramlist>
        <param name="parent" type="p.wxHtmlContainerCell" default=""/>
      </paramlist>
    </constructor>
    <method name="InsertCell" overloaded="no">
      <autodoc>InsertCell(HtmlCell cell)</autodoc>
      <paramlist>
        <param name="cell" type="p.wxHtmlCell" default=""/>
      </paramlist>
    </method>
    <method name="SetAlignHor" overloaded="no">
      <autodoc>SetAlignHor(int al)</autodoc>
      <paramlist>
        <param name="al" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetAlignHor" overloaded="no">
      <autodoc>GetAlignHor() -&gt; int</autodoc>
    </method>
    <method name="SetAlignVer" overloaded="no">
      <autodoc>SetAlignVer(int al)</autodoc>
      <paramlist>
        <param name="al" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetAlignVer" overloaded="no">
      <autodoc>GetAlignVer() -&gt; int</autodoc>
    </method>
    <method name="SetIndent" overloaded="no">
      <autodoc>SetIndent(int i, int what, int units=HTML_UNITS_PIXELS)</autodoc>
      <paramlist>
        <param name="i" type="int" default=""/>
        <param name="what" type="int" default=""/>
        <param name="units" type="int" default="wxHTML_UNITS_PIXELS"/>
      </paramlist>
    </method>
    <method name="GetIndent" overloaded="no">
      <autodoc>GetIndent(int ind) -&gt; int</autodoc>
      <paramlist>
        <param name="ind" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetIndentUnits" overloaded="no">
      <autodoc>GetIndentUnits(int ind) -&gt; int</autodoc>
      <paramlist>
        <param name="ind" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAlign" overloaded="no">
      <autodoc>SetAlign(HtmlTag tag)</autodoc>
      <paramlist>
        <param name="tag" type="r.q(const).wxHtmlTag" default=""/>
      </paramlist>
    </method>
    <method name="SetWidthFloat" overloaded="no">
      <autodoc>SetWidthFloat(int w, int units)</autodoc>
      <paramlist>
        <param name="w" type="int" default=""/>
        <param name="units" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWidthFloatFromTag" overloaded="no">
      <autodoc>SetWidthFloatFromTag(HtmlTag tag)</autodoc>
      <paramlist>
        <param name="tag" type="r.q(const).wxHtmlTag" default=""/>
      </paramlist>
    </method>
    <method name="SetMinHeight" overloaded="no">
      <autodoc>SetMinHeight(int h, int align=HTML_ALIGN_TOP)</autodoc>
      <paramlist>
        <param name="h" type="int" default=""/>
        <param name="align" type="int" default="wxHTML_ALIGN_TOP"/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour clr)</autodoc>
      <paramlist>
        <param name="clr" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetBackgroundColour" overloaded="no">
      <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
    </method>
    <method name="SetBorder" overloaded="no">
      <autodoc>SetBorder(Colour clr1, Colour clr2)</autodoc>
      <paramlist>
        <param name="clr1" type="r.q(const).wxColour" default=""/>
        <param name="clr2" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstChild" overloaded="no">
      <autodoc>GetFirstChild() -&gt; HtmlCell</autodoc>
    </method>
  </class>
  <class name="HtmlColourCell" oldname="wxHtmlColourCell" module="html">
    <baseclass name="wxHtmlCell"/>
    <constructor name="HtmlColourCell" overloaded="no">
      <autodoc>__init__(Colour clr, int flags=HTML_CLR_FOREGROUND) -&gt; HtmlColourCell</autodoc>
      <paramlist>
        <param name="clr" type="wxColour" default=""/>
        <param name="flags" type="int" default="wxHTML_CLR_FOREGROUND"/>
      </paramlist>
    </constructor>
  </class>
  <class name="HtmlFontCell" oldname="wxHtmlFontCell" module="html">
    <baseclass name="wxHtmlCell"/>
    <constructor name="HtmlFontCell" overloaded="no">
      <autodoc>__init__(Font font) -&gt; HtmlFontCell</autodoc>
      <paramlist>
        <param name="font" type="p.wxFont" default=""/>
      </paramlist>
    </constructor>
  </class>
  <class name="HtmlWidgetCell" oldname="wxHtmlWidgetCell" module="html">
    <baseclass name="wxHtmlCell"/>
    <constructor name="HtmlWidgetCell" overloaded="no">
      <autodoc>__init__(Window wnd, int w=0) -&gt; HtmlWidgetCell</autodoc>
      <paramlist>
        <param name="wnd" type="p.wxWindow" default=""/>
        <param name="w" type="int" default="0"/>
      </paramlist>
    </constructor>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="HtmlFilter" oldname="wxPyHtmlFilter" module="html">
    <baseclass name="wxObject"/>
    <constructor name="wxPyHtmlFilter" overloaded="no">
      <autodoc>__init__() -&gt; HtmlFilter</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="HtmlWindow" oldname="wxPyHtmlWindow" module="html">
    <baseclass name="wxScrolledWindow"/>
    <constructor name="wxPyHtmlWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, int style=HW_DEFAULT_STYLE, 
    String name=HtmlWindowNameStr) -&gt; HtmlWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="int" default="wxHW_DEFAULT_STYLE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyHtmlWindowNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreHtmlWindow" overloaded="no">
      <autodoc>PreHtmlWindow() -&gt; HtmlWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, int style=HW_SCROLLBAR_AUTO, 
    String name=HtmlWindowNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="int" default="wxHW_SCROLLBAR_AUTO"/>
        <param name="name" type="r.q(const).wxString" default="wxPyHtmlWindowNameStr"/>
      </paramlist>
    </method>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetPage" overloaded="no">
      <autodoc>SetPage(String source) -&gt; bool</autodoc>
      <paramlist>
        <param name="source" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadPage" overloaded="no">
      <autodoc>LoadPage(String location) -&gt; bool</autodoc>
      <paramlist>
        <param name="location" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadFile" overloaded="no">
      <autodoc>LoadFile(String filename) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AppendToPage" overloaded="no">
      <autodoc>AppendToPage(String source) -&gt; bool</autodoc>
      <paramlist>
        <param name="source" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetOpenedPage" overloaded="no">
      <autodoc>GetOpenedPage() -&gt; String</autodoc>
    </method>
    <method name="GetOpenedAnchor" overloaded="no">
      <autodoc>GetOpenedAnchor() -&gt; String</autodoc>
    </method>
    <method name="GetOpenedPageTitle" overloaded="no">
      <autodoc>GetOpenedPageTitle() -&gt; String</autodoc>
    </method>
    <method name="SetRelatedFrame" overloaded="no">
      <autodoc>SetRelatedFrame(Frame frame, String format)</autodoc>
      <paramlist>
        <param name="frame" type="p.wxFrame" default=""/>
        <param name="format" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetRelatedFrame" overloaded="no">
      <autodoc>GetRelatedFrame() -&gt; Frame</autodoc>
    </method>
    <method name="SetRelatedStatusBar" overloaded="no">
      <autodoc>SetRelatedStatusBar(int bar)</autodoc>
      <paramlist>
        <param name="bar" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFonts" overloaded="no">
      <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
      <paramlist>
        <param name="normal_face" type="wxString" default=""/>
        <param name="fixed_face" type="wxString" default=""/>
        <param name="sizes" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="SetTitle" overloaded="no">
      <autodoc>SetTitle(String title)</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetBorders" overloaded="no">
      <autodoc>SetBorders(int b)</autodoc>
      <paramlist>
        <param name="b" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ReadCustomization" overloaded="no">
      <autodoc>ReadCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
      <paramlist>
        <param name="cfg" type="p.wxConfigBase" default=""/>
        <param name="path" type="wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="WriteCustomization" overloaded="no">
      <autodoc>WriteCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
      <paramlist>
        <param name="cfg" type="p.wxConfigBase" default=""/>
        <param name="path" type="wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="HistoryBack" overloaded="no">
      <autodoc>HistoryBack() -&gt; bool</autodoc>
    </method>
    <method name="HistoryForward" overloaded="no">
      <autodoc>HistoryForward() -&gt; bool</autodoc>
    </method>
    <method name="HistoryCanBack" overloaded="no">
      <autodoc>HistoryCanBack() -&gt; bool</autodoc>
    </method>
    <method name="HistoryCanForward" overloaded="no">
      <autodoc>HistoryCanForward() -&gt; bool</autodoc>
    </method>
    <method name="HistoryClear" overloaded="no">
      <autodoc>HistoryClear()</autodoc>
    </method>
    <method name="GetInternalRepresentation" overloaded="no">
      <autodoc>GetInternalRepresentation() -&gt; HtmlContainerCell</autodoc>
    </method>
    <method name="GetParser" overloaded="no">
      <autodoc>GetParser() -&gt; HtmlWinParser</autodoc>
    </method>
    <method name="ScrollToAnchor" overloaded="no">
      <autodoc>ScrollToAnchor(String anchor) -&gt; bool</autodoc>
      <paramlist>
        <param name="anchor" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="HasAnchor" overloaded="no">
      <autodoc>HasAnchor(String anchor) -&gt; bool</autodoc>
      <paramlist>
        <param name="anchor" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <staticmethod name="AddFilter" overloaded="no">
      <autodoc>AddFilter(HtmlFilter filter)</autodoc>
      <paramlist>
        <param name="filter" type="p.wxPyHtmlFilter" default=""/>
      </paramlist>
    </staticmethod>
    <method name="SelectWord" overloaded="no">
      <autodoc>SelectWord(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SelectLine" overloaded="no">
      <autodoc>SelectLine(Point pos)</autodoc>
      <paramlist>
        <param name="pos" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SelectAll" overloaded="no">
      <autodoc>SelectAll()</autodoc>
    </method>
    <method name="base_OnLinkClicked" overloaded="no">
      <autodoc>base_OnLinkClicked(HtmlLinkInfo link)</autodoc>
      <paramlist>
        <param name="link" type="r.q(const).wxHtmlLinkInfo" default=""/>
      </paramlist>
    </method>
    <method name="base_OnSetTitle" overloaded="no">
      <autodoc>base_OnSetTitle(String title)</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="base_OnCellMouseHover" overloaded="no">
      <autodoc>base_OnCellMouseHover(HtmlCell cell, int x, int y)</autodoc>
      <paramlist>
        <param name="cell" type="p.wxHtmlCell" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_OnCellClicked" overloaded="no">
      <autodoc>base_OnCellClicked(HtmlCell cell, int x, int y, MouseEvent event)</autodoc>
      <paramlist>
        <param name="cell" type="p.wxHtmlCell" default=""/>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="event" type="r.q(const).wxMouseEvent" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="HtmlDCRenderer" oldname="wxHtmlDCRenderer" module="html">
    <baseclass name="wxObject"/>
    <constructor name="HtmlDCRenderer" overloaded="no">
      <autodoc>__init__() -&gt; HtmlDCRenderer</autodoc>
    </constructor>
    <destructor name="~wxHtmlDCRenderer">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetDC" overloaded="no">
      <autodoc>SetDC(DC dc, int maxwidth)</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default=""/>
        <param name="maxwidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetHtmlText" overloaded="no">
      <autodoc>SetHtmlText(String html, String basepath=EmptyString, bool isdir=True)</autodoc>
      <paramlist>
        <param name="html" type="r.q(const).wxString" default=""/>
        <param name="basepath" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="isdir" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetFonts" overloaded="no">
      <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
      <paramlist>
        <param name="normal_face" type="wxString" default=""/>
        <param name="fixed_face" type="wxString" default=""/>
        <param name="sizes" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="Render" overloaded="no">
      <autodoc>Render(int x, int y, int from=0, int dont_render=False, int to=INT_MAX, 
    int choices=None, int LCOUNT=0) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="from" type="int" default="0"/>
        <param name="dont_render" type="int" default="False"/>
        <param name="to" type="int" default="INT_MAX"/>
        <param name="choices" type="p.int" default="NULL"/>
        <param name="LCOUNT" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetTotalHeight" overloaded="no">
      <autodoc>GetTotalHeight() -&gt; int</autodoc>
    </method>
  </class>
  <class name="HtmlPrintout" oldname="wxHtmlPrintout" module="html">
    <baseclass name="wxPyPrintout"/>
    <constructor name="HtmlPrintout" overloaded="no">
      <autodoc>__init__(String title=HtmlPrintoutTitleStr) -&gt; HtmlPrintout</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default="wxPyHtmlPrintoutTitleStr"/>
      </paramlist>
    </constructor>
    <method name="SetHtmlText" overloaded="no">
      <autodoc>SetHtmlText(String html, String basepath=EmptyString, bool isdir=True)</autodoc>
      <paramlist>
        <param name="html" type="r.q(const).wxString" default=""/>
        <param name="basepath" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="isdir" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetHtmlFile" overloaded="no">
      <autodoc>SetHtmlFile(String htmlfile)</autodoc>
      <paramlist>
        <param name="htmlfile" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetHeader" overloaded="no">
      <autodoc>SetHeader(String header, int pg=PAGE_ALL)</autodoc>
      <paramlist>
        <param name="header" type="r.q(const).wxString" default=""/>
        <param name="pg" type="int" default="wxPAGE_ALL"/>
      </paramlist>
    </method>
    <method name="SetFooter" overloaded="no">
      <autodoc>SetFooter(String footer, int pg=PAGE_ALL)</autodoc>
      <paramlist>
        <param name="footer" type="r.q(const).wxString" default=""/>
        <param name="pg" type="int" default="wxPAGE_ALL"/>
      </paramlist>
    </method>
    <method name="SetFonts" overloaded="no">
      <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
      <paramlist>
        <param name="normal_face" type="wxString" default=""/>
        <param name="fixed_face" type="wxString" default=""/>
        <param name="sizes" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="SetMargins" overloaded="no">
      <autodoc>SetMargins(float top=25.2, float bottom=25.2, float left=25.2, 
    float right=25.2, float spaces=5)</autodoc>
      <paramlist>
        <param name="top" type="float" default="25.2"/>
        <param name="bottom" type="float" default="25.2"/>
        <param name="left" type="float" default="25.2"/>
        <param name="right" type="float" default="25.2"/>
        <param name="spaces" type="float" default="5"/>
      </paramlist>
    </method>
    <staticmethod name="AddFilter" overloaded="no">
      <autodoc>AddFilter(wxHtmlFilter filter)</autodoc>
      <paramlist>
        <param name="filter" type="p.wxHtmlFilter" default=""/>
      </paramlist>
    </staticmethod>
    <staticmethod name="CleanUpStatics" overloaded="no">
      <autodoc>CleanUpStatics()</autodoc>
    </staticmethod>
  </class>
  <class name="HtmlEasyPrinting" oldname="wxHtmlEasyPrinting" module="html">
    <baseclass name="wxObject"/>
    <constructor name="HtmlEasyPrinting" overloaded="no">
      <autodoc>__init__(String name=HtmlPrintingTitleStr, Window parentWindow=None) -&gt; HtmlEasyPrinting</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default="wxPyHtmlPrintingTitleStr"/>
        <param name="parentWindow" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxHtmlEasyPrinting">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="PreviewFile" overloaded="no">
      <autodoc>PreviewFile(String htmlfile)</autodoc>
      <paramlist>
        <param name="htmlfile" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="PreviewText" overloaded="no">
      <autodoc>PreviewText(String htmltext, String basepath=EmptyString)</autodoc>
      <paramlist>
        <param name="htmltext" type="r.q(const).wxString" default=""/>
        <param name="basepath" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="PrintFile" overloaded="no">
      <autodoc>PrintFile(String htmlfile)</autodoc>
      <paramlist>
        <param name="htmlfile" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="PrintText" overloaded="no">
      <autodoc>PrintText(String htmltext, String basepath=EmptyString)</autodoc>
      <paramlist>
        <param name="htmltext" type="r.q(const).wxString" default=""/>
        <param name="basepath" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="PrinterSetup" overloaded="no">
      <autodoc>PrinterSetup()</autodoc>
    </method>
    <method name="PageSetup" overloaded="no">
      <autodoc>PageSetup()</autodoc>
    </method>
    <method name="SetHeader" overloaded="no">
      <autodoc>SetHeader(String header, int pg=PAGE_ALL)</autodoc>
      <paramlist>
        <param name="header" type="r.q(const).wxString" default=""/>
        <param name="pg" type="int" default="wxPAGE_ALL"/>
      </paramlist>
    </method>
    <method name="SetFooter" overloaded="no">
      <autodoc>SetFooter(String footer, int pg=PAGE_ALL)</autodoc>
      <paramlist>
        <param name="footer" type="r.q(const).wxString" default=""/>
        <param name="pg" type="int" default="wxPAGE_ALL"/>
      </paramlist>
    </method>
    <method name="SetFonts" overloaded="no">
      <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
      <paramlist>
        <param name="normal_face" type="wxString" default=""/>
        <param name="fixed_face" type="wxString" default=""/>
        <param name="sizes" type="p.PyObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetPrintData" overloaded="no">
      <autodoc>GetPrintData() -&gt; PrintData</autodoc>
    </method>
    <method name="GetPageSetupData" overloaded="no">
      <autodoc>GetPageSetupData() -&gt; PageSetupDialogData</autodoc>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="HtmlBookRecord" oldname="wxHtmlBookRecord" module="html">
    <constructor name="HtmlBookRecord" overloaded="no">
      <autodoc>__init__(String bookfile, String basepath, String title, String start) -&gt; HtmlBookRecord</autodoc>
      <paramlist>
        <param name="bookfile" type="r.q(const).wxString" default=""/>
        <param name="basepath" type="r.q(const).wxString" default=""/>
        <param name="title" type="r.q(const).wxString" default=""/>
        <param name="start" type="r.q(const).wxString" default=""/>
      </paramlist>
    </constructor>
    <method name="GetBookFile" overloaded="no">
      <autodoc>GetBookFile() -&gt; String</autodoc>
    </method>
    <method name="GetTitle" overloaded="no">
      <autodoc>GetTitle() -&gt; String</autodoc>
    </method>
    <method name="GetStart" overloaded="no">
      <autodoc>GetStart() -&gt; String</autodoc>
    </method>
    <method name="GetBasePath" overloaded="no">
      <autodoc>GetBasePath() -&gt; String</autodoc>
    </method>
    <method name="SetContentsRange" overloaded="no">
      <autodoc>SetContentsRange(int start, int end)</autodoc>
      <paramlist>
        <param name="start" type="int" default=""/>
        <param name="end" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetContentsStart" overloaded="no">
      <autodoc>GetContentsStart() -&gt; int</autodoc>
    </method>
    <method name="GetContentsEnd" overloaded="no">
      <autodoc>GetContentsEnd() -&gt; int</autodoc>
    </method>
    <method name="SetTitle" overloaded="no">
      <autodoc>SetTitle(String title)</autodoc>
      <paramlist>
        <param name="title" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetBasePath" overloaded="no">
      <autodoc>SetBasePath(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetStart" overloaded="no">
      <autodoc>SetStart(String start)</autodoc>
      <paramlist>
        <param name="start" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetFullPath" overloaded="no">
      <autodoc>GetFullPath(String page) -&gt; String</autodoc>
      <paramlist>
        <param name="page" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="HtmlContentsItem" oldname="wxHtmlContentsItem" module="html">
    <method name="GetLevel" overloaded="no">
      <autodoc>GetLevel() -&gt; int</autodoc>
    </method>
    <method name="GetID" overloaded="no">
      <autodoc>GetID() -&gt; int</autodoc>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="GetPage" overloaded="no">
      <autodoc>GetPage() -&gt; String</autodoc>
    </method>
    <method name="GetBook" overloaded="no">
      <autodoc>GetBook() -&gt; HtmlBookRecord</autodoc>
    </method>
  </class>
  <class name="HtmlSearchStatus" oldname="wxHtmlSearchStatus" module="html">
    <method name="Search" overloaded="no">
      <autodoc>Search() -&gt; bool</autodoc>
    </method>
    <method name="IsActive" overloaded="no">
      <autodoc>IsActive() -&gt; bool</autodoc>
    </method>
    <method name="GetCurIndex" overloaded="no">
      <autodoc>GetCurIndex() -&gt; int</autodoc>
    </method>
    <method name="GetMaxIndex" overloaded="no">
      <autodoc>GetMaxIndex() -&gt; int</autodoc>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="GetContentsItem" overloaded="no">
      <autodoc>GetContentsItem() -&gt; HtmlContentsItem</autodoc>
    </method>
  </class>
  <class name="HtmlHelpData" oldname="wxHtmlHelpData" module="html">
    <constructor name="HtmlHelpData" overloaded="no">
      <autodoc>__init__() -&gt; HtmlHelpData</autodoc>
    </constructor>
    <destructor name="~wxHtmlHelpData">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetTempDir" overloaded="no">
      <autodoc>SetTempDir(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AddBook" overloaded="no">
      <autodoc>AddBook(String book) -&gt; bool</autodoc>
      <paramlist>
        <param name="book" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindPageByName" overloaded="no">
      <autodoc>FindPageByName(String page) -&gt; String</autodoc>
      <paramlist>
        <param name="page" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindPageById" overloaded="no">
      <autodoc>FindPageById(int id) -&gt; String</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBookRecArray" overloaded="no">
      <autodoc>GetBookRecArray() -&gt; wxHtmlBookRecArray</autodoc>
    </method>
    <method name="GetContents" overloaded="no">
      <autodoc>GetContents() -&gt; HtmlContentsItem</autodoc>
    </method>
    <method name="GetContentsCnt" overloaded="no">
      <autodoc>GetContentsCnt() -&gt; int</autodoc>
    </method>
    <method name="GetIndex" overloaded="no">
      <autodoc>GetIndex() -&gt; HtmlContentsItem</autodoc>
    </method>
    <method name="GetIndexCnt" overloaded="no">
      <autodoc>GetIndexCnt() -&gt; int</autodoc>
    </method>
  </class>
  <class name="HtmlHelpFrame" oldname="wxHtmlHelpFrame" module="html">
    <baseclass name="wxFrame"/>
    <constructor name="HtmlHelpFrame" overloaded="no">
      <autodoc>__init__(Window parent, int ??, String title=EmptyString, int style=HF_DEFAULTSTYLE, 
    HtmlHelpData data=None) -&gt; HtmlHelpFrame</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="" type="int" default=""/>
        <param name="title" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="style" type="int" default="wxHF_DEFAULTSTYLE"/>
        <param name="data" type="p.wxHtmlHelpData" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetData" overloaded="no">
      <autodoc>GetData() -&gt; HtmlHelpData</autodoc>
    </method>
    <method name="SetTitleFormat" overloaded="no">
      <autodoc>SetTitleFormat(String format)</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Display" overloaded="no">
      <autodoc>Display(String x)</autodoc>
      <paramlist>
        <param name="x" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DisplayID" overloaded="no">
      <autodoc>DisplayID(int id)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DisplayContents" overloaded="no">
      <autodoc>DisplayContents()</autodoc>
    </method>
    <method name="DisplayIndex" overloaded="no">
      <autodoc>DisplayIndex()</autodoc>
    </method>
    <method name="KeywordSearch" overloaded="no">
      <autodoc>KeywordSearch(String keyword) -&gt; bool</autodoc>
      <paramlist>
        <param name="keyword" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="UseConfig" overloaded="no">
      <autodoc>UseConfig(ConfigBase config, String rootpath=EmptyString)</autodoc>
      <paramlist>
        <param name="config" type="p.wxConfigBase" default=""/>
        <param name="rootpath" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="ReadCustomization" overloaded="no">
      <autodoc>ReadCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
      <paramlist>
        <param name="cfg" type="p.wxConfigBase" default=""/>
        <param name="path" type="wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="WriteCustomization" overloaded="no">
      <autodoc>WriteCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
      <paramlist>
        <param name="cfg" type="p.wxConfigBase" default=""/>
        <param name="path" type="wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
  </class>
  <class name="HtmlHelpController" oldname="wxHtmlHelpController" module="html">
    <baseclass name="wxEvtHandler"/>
    <constructor name="HtmlHelpController" overloaded="no">
      <autodoc>__init__(int style=HF_DEFAULTSTYLE) -&gt; HtmlHelpController</autodoc>
      <paramlist>
        <param name="style" type="int" default="wxHF_DEFAULTSTYLE"/>
      </paramlist>
    </constructor>
    <destructor name="~wxHtmlHelpController">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetTitleFormat" overloaded="no">
      <autodoc>SetTitleFormat(String format)</autodoc>
      <paramlist>
        <param name="format" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetTempDir" overloaded="no">
      <autodoc>SetTempDir(String path)</autodoc>
      <paramlist>
        <param name="path" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AddBook" overloaded="no">
      <autodoc>AddBook(String book, int show_wait_msg=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="book" type="r.q(const).wxString" default=""/>
        <param name="show_wait_msg" type="int" default="False"/>
      </paramlist>
    </method>
    <method name="Display" overloaded="no">
      <autodoc>Display(String x)</autodoc>
      <paramlist>
        <param name="x" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DisplayID" overloaded="no">
      <autodoc>DisplayID(int id)</autodoc>
      <paramlist>
        <param name="id" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DisplayContents" overloaded="no">
      <autodoc>DisplayContents()</autodoc>
    </method>
    <method name="DisplayIndex" overloaded="no">
      <autodoc>DisplayIndex()</autodoc>
    </method>
    <method name="KeywordSearch" overloaded="no">
      <autodoc>KeywordSearch(String keyword) -&gt; bool</autodoc>
      <paramlist>
        <param name="keyword" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="UseConfig" overloaded="no">
      <autodoc>UseConfig(ConfigBase config, String rootpath=EmptyString)</autodoc>
      <paramlist>
        <param name="config" type="p.wxConfigBase" default=""/>
        <param name="rootpath" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="ReadCustomization" overloaded="no">
      <autodoc>ReadCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
      <paramlist>
        <param name="cfg" type="p.wxConfigBase" default=""/>
        <param name="path" type="wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="WriteCustomization" overloaded="no">
      <autodoc>WriteCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
      <paramlist>
        <param name="cfg" type="p.wxConfigBase" default=""/>
        <param name="path" type="wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetFrame" overloaded="no">
      <autodoc>GetFrame() -&gt; HtmlHelpFrame</autodoc>
    </method>
  </class>
</module>
<module name="wizard">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
EVT_WIZARD_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_WIZARD_PAGE_CHANGED, 1)
EVT_WIZARD_PAGE_CHANGING = wx.PyEventBinder( wxEVT_WIZARD_PAGE_CHANGING, 1)
EVT_WIZARD_CANCEL        = wx.PyEventBinder( wxEVT_WIZARD_CANCEL, 1)
EVT_WIZARD_HELP          = wx.PyEventBinder( wxEVT_WIZARD_HELP, 1)
EVT_WIZARD_FINISHED      = wx.PyEventBinder( wxEVT_WIZARD_FINISHED, 1)
</pythoncode>
  <class name="WizardEvent" oldname="wxWizardEvent" module="wizard">
    <baseclass name="wxNotifyEvent"/>
    <constructor name="WizardEvent" overloaded="no">
      <autodoc>__init__(wxEventType type=wxEVT_NULL, int id=-1, bool direction=True, 
    WizardPage page=None) -&gt; WizardEvent</autodoc>
      <paramlist>
        <param name="type" type="wxEventType" default="wxEVT_NULL"/>
        <param name="id" type="int" default="-1"/>
        <param name="direction" type="bool" default="True"/>
        <param name="page" type="p.wxWizardPage" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetDirection" overloaded="no">
      <autodoc>GetDirection() -&gt; bool</autodoc>
    </method>
    <method name="GetPage" overloaded="no">
      <autodoc>GetPage() -&gt; WizardPage</autodoc>
    </method>
  </class>
  <class name="WizardPage" oldname="wxWizardPage" module="wizard">
    <baseclass name="wxPanel"/>
    <method name="Create" overloaded="no">
      <autodoc>Create(Wizard parent, Bitmap bitmap=wxNullBitmap, String resource=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWizard" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="resource" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetPrev" overloaded="no">
      <autodoc>GetPrev() -&gt; WizardPage</autodoc>
    </method>
    <method name="GetNext" overloaded="no">
      <autodoc>GetNext() -&gt; WizardPage</autodoc>
    </method>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
    </method>
  </class>
  <class name="PyWizardPage" oldname="wxPyWizardPage" module="wizard">
    <baseclass name="wxWizardPage"/>
    <constructor name="PyWizardPage" overloaded="no">
      <autodoc>__init__(Wizard parent, Bitmap bitmap=&amp;wxNullBitmap, String resource=&amp;wxPyEmptyString) -&gt; PyWizardPage</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWizard" default=""/>
        <param name="bitmap" type="p.q(const).wxBitmap" default="&amp;wxNullBitmap"/>
        <param name="resource" type="p.q(const).wxString" default="&amp;wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <constructor name="PrePyWizardPage" overloaded="no">
      <autodoc>PrePyWizardPage() -&gt; PyWizardPage</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Wizard parent, Bitmap bitmap=wxNullBitmap, String resource=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWizard" default=""/>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="resource" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_DoMoveWindow" overloaded="no">
      <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetSize" overloaded="no">
      <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
        <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
      </paramlist>
    </method>
    <method name="base_DoSetClientSize" overloaded="no">
      <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
      <paramlist>
        <param name="width" type="int" default=""/>
        <param name="height" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoSetVirtualSize" overloaded="no">
      <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetSize" overloaded="no">
      <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetClientSize" overloaded="no">
      <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetPosition" overloaded="no">
      <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="base_DoGetVirtualSize" overloaded="no">
      <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
    </method>
    <method name="base_DoGetBestSize" overloaded="no">
      <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
    </method>
    <method name="base_InitDialog" overloaded="no">
      <autodoc>base_InitDialog()</autodoc>
    </method>
    <method name="base_TransferDataToWindow" overloaded="no">
      <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_TransferDataFromWindow" overloaded="no">
      <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
    </method>
    <method name="base_Validate" overloaded="no">
      <autodoc>base_Validate() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocus" overloaded="no">
      <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
    </method>
    <method name="base_AcceptsFocusFromKeyboard" overloaded="no">
      <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
    </method>
    <method name="base_GetMaxSize" overloaded="no">
      <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
    </method>
    <method name="base_AddChild" overloaded="no">
      <autodoc>base_AddChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="base_RemoveChild" overloaded="no">
      <autodoc>base_RemoveChild(Window child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="WizardPageSimple" oldname="wxWizardPageSimple" module="wizard">
    <baseclass name="wxWizardPage"/>
    <constructor name="WizardPageSimple" overloaded="no">
      <autodoc>__init__(Wizard parent, WizardPage prev=None, WizardPage next=None, 
    Bitmap bitmap=wxNullBitmap, wxChar resource=None) -&gt; WizardPageSimple</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWizard" default=""/>
        <param name="prev" type="p.wxWizardPage" default="NULL"/>
        <param name="next" type="p.wxWizardPage" default="NULL"/>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="resource" type="p.q(const).wxChar" default="NULL"/>
      </paramlist>
    </constructor>
    <constructor name="PreWizardPageSimple" overloaded="no">
      <autodoc>PreWizardPageSimple() -&gt; WizardPageSimple</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Wizard parent=None, WizardPage prev=None, WizardPage next=None, 
    Bitmap bitmap=wxNullBitmap, wxChar resource=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWizard" default="NULL"/>
        <param name="prev" type="p.wxWizardPage" default="NULL"/>
        <param name="next" type="p.wxWizardPage" default="NULL"/>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="resource" type="p.q(const).wxChar" default="NULL"/>
      </paramlist>
    </method>
    <method name="SetPrev" overloaded="no">
      <autodoc>SetPrev(WizardPage prev)</autodoc>
      <paramlist>
        <param name="prev" type="p.wxWizardPage" default=""/>
      </paramlist>
    </method>
    <method name="SetNext" overloaded="no">
      <autodoc>SetNext(WizardPage next)</autodoc>
      <paramlist>
        <param name="next" type="p.wxWizardPage" default=""/>
      </paramlist>
    </method>
    <staticmethod name="Chain" overloaded="no">
      <autodoc>Chain(WizardPageSimple first, WizardPageSimple second)</autodoc>
      <paramlist>
        <param name="first" type="p.wxWizardPageSimple" default=""/>
        <param name="second" type="p.wxWizardPageSimple" default=""/>
      </paramlist>
    </staticmethod>
  </class>
  <class name="Wizard" oldname="wxWizard" module="wizard">
    <baseclass name="wxDialog"/>
    <constructor name="Wizard" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, String title=EmptyString, 
    Bitmap bitmap=wxNullBitmap, Point pos=DefaultPosition, 
    long style=DEFAULT_DIALOG_STYLE) -&gt; Wizard</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="title" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="style" type="long" default="wxDEFAULT_DIALOG_STYLE"/>
      </paramlist>
    </constructor>
    <constructor name="PreWizard" overloaded="no">
      <autodoc>PreWizard() -&gt; Wizard</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, String title=EmptyString, 
    Bitmap bitmap=wxNullBitmap, Point pos=DefaultPosition) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="title" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="bitmap" type="r.q(const).wxBitmap" default="wxNullBitmap"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
      </paramlist>
    </method>
    <method name="Init" overloaded="no">
      <autodoc>Init()</autodoc>
    </method>
    <method name="RunWizard" overloaded="no">
      <autodoc>RunWizard(WizardPage firstPage) -&gt; bool</autodoc>
      <paramlist>
        <param name="firstPage" type="p.wxWizardPage" default=""/>
      </paramlist>
    </method>
    <method name="GetCurrentPage" overloaded="no">
      <autodoc>GetCurrentPage() -&gt; WizardPage</autodoc>
    </method>
    <method name="SetPageSize" overloaded="no">
      <autodoc>SetPageSize(Size size)</autodoc>
      <paramlist>
        <param name="size" type="r.q(const).wxSize" default=""/>
      </paramlist>
    </method>
    <method name="GetPageSize" overloaded="no">
      <autodoc>GetPageSize() -&gt; Size</autodoc>
    </method>
    <method name="FitToPage" overloaded="no">
      <autodoc>FitToPage(WizardPage firstPage)</autodoc>
      <paramlist>
        <param name="firstPage" type="p.q(const).wxWizardPage" default=""/>
      </paramlist>
    </method>
    <method name="GetPageAreaSizer" overloaded="no">
      <autodoc>GetPageAreaSizer() -&gt; Sizer</autodoc>
    </method>
    <method name="SetBorder" overloaded="no">
      <autodoc>SetBorder(int border)</autodoc>
      <paramlist>
        <param name="border" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsRunning" overloaded="no">
      <autodoc>IsRunning() -&gt; bool</autodoc>
    </method>
    <method name="ShowPage" overloaded="no">
      <autodoc>ShowPage(WizardPage page, bool goingForward=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="page" type="p.wxWizardPage" default=""/>
        <param name="goingForward" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="HasNextPage" overloaded="no">
      <autodoc>HasNextPage(WizardPage page) -&gt; bool</autodoc>
      <paramlist>
        <param name="page" type="p.wxWizardPage" default=""/>
      </paramlist>
    </method>
    <method name="HasPrevPage" overloaded="no">
      <autodoc>HasPrevPage(WizardPage page) -&gt; bool</autodoc>
      <paramlist>
        <param name="page" type="p.wxWizardPage" default=""/>
      </paramlist>
    </method>
  </class>
</module>
<module name="glcanvas">
  <pythoncode> wx = core </pythoncode>
  <class name="GLContext" oldname="wxGLContext" module="glcanvas">
    <baseclass name="wxObject"/>
    <constructor name="GLContext" overloaded="no">
      <autodoc>__init__(bool isRGB, GLCanvas win, wxPalette palette=wxNullPalette, 
    GLContext other=None) -&gt; GLContext</autodoc>
      <paramlist>
        <param name="isRGB" type="bool" default=""/>
        <param name="win" type="p.wxGLCanvas" default=""/>
        <param name="palette" type="r.q(const).wxPalette" default="wxNullPalette"/>
        <param name="other" type="p.q(const).wxGLContext" default="NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxGLContext">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetCurrent" overloaded="no">
      <autodoc>SetCurrent()</autodoc>
    </method>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(String colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SwapBuffers" overloaded="no">
      <autodoc>SwapBuffers()</autodoc>
    </method>
    <method name="SetupPixelFormat" overloaded="no">
      <autodoc>SetupPixelFormat()</autodoc>
    </method>
    <method name="SetupPalette" overloaded="no">
      <autodoc>SetupPalette(wxPalette palette)</autodoc>
      <paramlist>
        <param name="palette" type="r.q(const).wxPalette" default=""/>
      </paramlist>
    </method>
    <method name="CreateDefaultPalette" overloaded="no">
      <autodoc>CreateDefaultPalette() -&gt; wxPalette</autodoc>
    </method>
    <method name="GetPalette" overloaded="no">
      <autodoc>GetPalette() -&gt; wxPalette</autodoc>
    </method>
    <method name="GetWindow" overloaded="no">
      <autodoc>GetWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <class name="GLCanvas" oldname="wxGLCanvas" module="glcanvas">
    <baseclass name="wxWindow"/>
    <constructor name="GLCanvas" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=GLCanvasNameStr, 
    int attribList=None, wxPalette palette=wxNullPalette) -&gt; GLCanvas</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyGLCanvasNameStr"/>
        <param name="attribList" type="p.int" default="NULL"/>
        <param name="palette" type="r.q(const).wxPalette" default="wxNullPalette"/>
      </paramlist>
    </constructor>
    <constructor name="GLCanvasWithContext" overloaded="no">
      <autodoc>GLCanvasWithContext(Window parent, GLContext shared=None, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=0, String name=GLCanvasNameStr, 
    int attribList=None, wxPalette palette=wxNullPalette) -&gt; GLCanvas</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="shared" type="p.q(const).wxGLContext" default="NULL"/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyGLCanvasNameStr"/>
        <param name="attribList" type="p.int" default="NULL"/>
        <param name="palette" type="r.q(const).wxPalette" default="wxNullPalette"/>
      </paramlist>
    </constructor>
    <method name="SetCurrent" overloaded="no">
      <autodoc>SetCurrent()</autodoc>
    </method>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(String colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SwapBuffers" overloaded="no">
      <autodoc>SwapBuffers()</autodoc>
    </method>
    <method name="GetContext" overloaded="no">
      <autodoc>GetContext() -&gt; GLContext</autodoc>
    </method>
  </class>
</module>
<module name="ogl">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="ShapeRegion" oldname="wxShapeRegion" module="ogl">
    <baseclass name="wxObject"/>
    <constructor name="ShapeRegion" overloaded="no">
      <autodoc>__init__() -&gt; ShapeRegion</autodoc>
    </constructor>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String s)</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font f)</autodoc>
      <paramlist>
        <param name="f" type="p.wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetMinSize" overloaded="no">
      <autodoc>SetMinSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetProportions" overloaded="no">
      <autodoc>SetProportions(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetFormatMode" overloaded="no">
      <autodoc>SetFormatMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetName" overloaded="no">
      <autodoc>SetName(String s)</autodoc>
      <paramlist>
        <param name="s" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetColour" overloaded="no">
      <autodoc>SetColour(String col)</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont() -&gt; Font</autodoc>
    </method>
    <method name="GetMinSize" overloaded="no">
      <autodoc>GetMinSize(double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetProportion" overloaded="no">
      <autodoc>GetProportion(double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize(double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition(double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetFormatMode" overloaded="no">
      <autodoc>GetFormatMode() -&gt; int</autodoc>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="GetColour" overloaded="no">
      <autodoc>GetColour() -&gt; String</autodoc>
    </method>
    <method name="GetActualColourObject" overloaded="no">
      <autodoc>GetActualColourObject() -&gt; Colour</autodoc>
    </method>
    <method name="GetFormattedText" overloaded="no">
      <autodoc>GetFormattedText() -&gt; wxList</autodoc>
    </method>
    <method name="GetPenColour" overloaded="no">
      <autodoc>GetPenColour() -&gt; String</autodoc>
    </method>
    <method name="GetPenStyle" overloaded="no">
      <autodoc>GetPenStyle() -&gt; int</autodoc>
    </method>
    <method name="SetPenStyle" overloaded="no">
      <autodoc>SetPenStyle(int style)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPenColour" overloaded="no">
      <autodoc>SetPenColour(String col)</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetActualPen" overloaded="no">
      <autodoc>GetActualPen() -&gt; wxPen</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; double</autodoc>
    </method>
    <method name="GetHeight" overloaded="no">
      <autodoc>GetHeight() -&gt; double</autodoc>
    </method>
    <method name="ClearText" overloaded="no">
      <autodoc>ClearText()</autodoc>
    </method>
  </class>
  <class name="AttachmentPoint" oldname="wxAttachmentPoint" module="ogl">
    <baseclass name="wxObject"/>
    <constructor name="AttachmentPoint" overloaded="no">
      <autodoc>__init__(int id=0, double x=0.0, double y=0.0) -&gt; AttachmentPoint</autodoc>
      <paramlist>
        <param name="id" type="int" default="0"/>
        <param name="x" type="double" default="0.0"/>
        <param name="y" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <property name="m_id" type="int" readonly="no"/>
    <property name="m_x" type="double" readonly="no"/>
    <property name="m_y" type="double" readonly="no"/>
  </class>
  <class name="PyShapeEvtHandler" oldname="wxPyShapeEvtHandler" module="ogl">
    <baseclass name="wxObject"/>
    <constructor name="PyShapeEvtHandler" overloaded="no">
      <autodoc>__init__(PyShapeEvtHandler prev=None, PyShape shape=None) -&gt; PyShapeEvtHandler</autodoc>
      <paramlist>
        <param name="prev" type="p.wxPyShapeEvtHandler" default="NULL"/>
        <param name="shape" type="p.wxPyShape" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="_setOORInfo" overloaded="no">
      <autodoc>_setOORInfo(PyObject _self)</autodoc>
      <paramlist>
        <param name="_self" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    def _setOORandCallbackInfo(self, _class):
        self._setOORInfo(self)
        self._setCallbackInfo(self, _class)
    </pythoncode>
    <method name="SetShape" overloaded="no">
      <autodoc>SetShape(PyShape sh)</autodoc>
      <paramlist>
        <param name="sh" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="GetShape" overloaded="no">
      <autodoc>GetShape() -&gt; PyShape</autodoc>
    </method>
    <method name="SetPreviousHandler" overloaded="no">
      <autodoc>SetPreviousHandler(PyShapeEvtHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxPyShapeEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="GetPreviousHandler" overloaded="no">
      <autodoc>GetPreviousHandler() -&gt; PyShapeEvtHandler</autodoc>
    </method>
    <method name="CreateNewCopy" overloaded="no">
      <autodoc>CreateNewCopy() -&gt; PyShapeEvtHandler</autodoc>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=False)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyShape" oldname="wxPyShape" module="ogl">
    <baseclass name="wxPyShapeEvtHandler"/>
    <constructor name="PyShape" overloaded="no">
      <autodoc>__init__(PyShapeCanvas can=None) -&gt; PyShape</autodoc>
      <paramlist>
        <param name="can" type="p.wxPyShapeCanvas" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetBoundingBoxMax" overloaded="no">
      <autodoc>GetBoundingBoxMax(double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetBoundingBoxMin" overloaded="no">
      <autodoc>GetBoundingBoxMin(double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetPerimeterPoint" overloaded="no">
      <autodoc>GetPerimeterPoint(double x1, double y1, double x2, double y2, double OUTPUT, 
    double OUTPUT) -&gt; bool</autodoc>
      <paramlist>
        <param name="x1" type="double" default=""/>
        <param name="y1" type="double" default=""/>
        <param name="x2" type="double" default=""/>
        <param name="y2" type="double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetCanvas" overloaded="no">
      <autodoc>GetCanvas() -&gt; PyShapeCanvas</autodoc>
    </method>
    <method name="SetCanvas" overloaded="no">
      <autodoc>SetCanvas(PyShapeCanvas the_canvas)</autodoc>
      <paramlist>
        <param name="the_canvas" type="p.wxPyShapeCanvas" default=""/>
      </paramlist>
    </method>
    <method name="AddToCanvas" overloaded="no">
      <autodoc>AddToCanvas(PyShapeCanvas the_canvas, PyShape addAfter=None)</autodoc>
      <paramlist>
        <param name="the_canvas" type="p.wxPyShapeCanvas" default=""/>
        <param name="addAfter" type="p.wxPyShape" default="NULL"/>
      </paramlist>
    </method>
    <method name="InsertInCanvas" overloaded="no">
      <autodoc>InsertInCanvas(PyShapeCanvas the_canvas)</autodoc>
      <paramlist>
        <param name="the_canvas" type="p.wxPyShapeCanvas" default=""/>
      </paramlist>
    </method>
    <method name="RemoveFromCanvas" overloaded="no">
      <autodoc>RemoveFromCanvas(PyShapeCanvas the_canvas)</autodoc>
      <paramlist>
        <param name="the_canvas" type="p.wxPyShapeCanvas" default=""/>
      </paramlist>
    </method>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; double</autodoc>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; double</autodoc>
    </method>
    <method name="SetX" overloaded="no">
      <autodoc>SetX(double x)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetY" overloaded="no">
      <autodoc>SetY(double y)</autodoc>
      <paramlist>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="GetParent" overloaded="no">
      <autodoc>GetParent() -&gt; PyShape</autodoc>
    </method>
    <method name="SetParent" overloaded="no">
      <autodoc>SetParent(PyShape p)</autodoc>
      <paramlist>
        <param name="p" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="GetTopAncestor" overloaded="no">
      <autodoc>GetTopAncestor() -&gt; PyShape</autodoc>
    </method>
    <method name="GetChildren" overloaded="no">
      <autodoc>GetChildren() -&gt; PyObject</autodoc>
    </method>
    <method name="Unlink" overloaded="no">
      <autodoc>Unlink()</autodoc>
    </method>
    <method name="SetDrawHandles" overloaded="no">
      <autodoc>SetDrawHandles(bool drawH)</autodoc>
      <paramlist>
        <param name="drawH" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetDrawHandles" overloaded="no">
      <autodoc>GetDrawHandles() -&gt; bool</autodoc>
    </method>
    <method name="MakeControlPoints" overloaded="no">
      <autodoc>MakeControlPoints()</autodoc>
    </method>
    <method name="DeleteControlPoints" overloaded="no">
      <autodoc>DeleteControlPoints(DC dc=None)</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default="NULL"/>
      </paramlist>
    </method>
    <method name="ResetControlPoints" overloaded="no">
      <autodoc>ResetControlPoints()</autodoc>
    </method>
    <method name="GetEventHandler" overloaded="no">
      <autodoc>GetEventHandler() -&gt; PyShapeEvtHandler</autodoc>
    </method>
    <method name="SetEventHandler" overloaded="no">
      <autodoc>SetEventHandler(PyShapeEvtHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxPyShapeEvtHandler" default=""/>
      </paramlist>
    </method>
    <method name="MakeMandatoryControlPoints" overloaded="no">
      <autodoc>MakeMandatoryControlPoints()</autodoc>
    </method>
    <method name="ResetMandatoryControlPoints" overloaded="no">
      <autodoc>ResetMandatoryControlPoints()</autodoc>
    </method>
    <method name="Recompute" overloaded="no">
      <autodoc>Recompute() -&gt; bool</autodoc>
    </method>
    <method name="CalculateSize" overloaded="no">
      <autodoc>CalculateSize()</autodoc>
    </method>
    <method name="Select" overloaded="no">
      <autodoc>Select(bool select=True, DC dc=None)</autodoc>
      <paramlist>
        <param name="select" type="bool" default="True"/>
        <param name="dc" type="p.wxDC" default="NULL"/>
      </paramlist>
    </method>
    <method name="SetHighlight" overloaded="no">
      <autodoc>SetHighlight(bool hi=True, bool recurse=False)</autodoc>
      <paramlist>
        <param name="hi" type="bool" default="True"/>
        <param name="recurse" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="IsHighlighted" overloaded="no">
      <autodoc>IsHighlighted() -&gt; bool</autodoc>
    </method>
    <method name="Selected" overloaded="no">
      <autodoc>Selected() -&gt; bool</autodoc>
    </method>
    <method name="AncestorSelected" overloaded="no">
      <autodoc>AncestorSelected() -&gt; bool</autodoc>
    </method>
    <method name="SetSensitivityFilter" overloaded="no">
      <autodoc>SetSensitivityFilter(int sens=OP_ALL, bool recursive=False)</autodoc>
      <paramlist>
        <param name="sens" type="int" default="OP_ALL"/>
        <param name="recursive" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="GetSensitivityFilter" overloaded="no">
      <autodoc>GetSensitivityFilter() -&gt; int</autodoc>
    </method>
    <method name="SetDraggable" overloaded="no">
      <autodoc>SetDraggable(bool drag, bool recursive=False)</autodoc>
      <paramlist>
        <param name="drag" type="bool" default=""/>
        <param name="recursive" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="SetFixedSize" overloaded="no">
      <autodoc>SetFixedSize(bool x, bool y)</autodoc>
      <paramlist>
        <param name="x" type="bool" default=""/>
        <param name="y" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetFixedSize" overloaded="no">
      <autodoc>GetFixedSize(bool OUTPUT, bool OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.bool" default=""/>
        <param name="OUTPUT" type="p.bool" default=""/>
      </paramlist>
    </method>
    <method name="GetFixedWidth" overloaded="no">
      <autodoc>GetFixedWidth() -&gt; bool</autodoc>
    </method>
    <method name="GetFixedHeight" overloaded="no">
      <autodoc>GetFixedHeight() -&gt; bool</autodoc>
    </method>
    <method name="SetSpaceAttachments" overloaded="no">
      <autodoc>SetSpaceAttachments(bool sp)</autodoc>
      <paramlist>
        <param name="sp" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetSpaceAttachments" overloaded="no">
      <autodoc>GetSpaceAttachments() -&gt; bool</autodoc>
    </method>
    <method name="SetShadowMode" overloaded="no">
      <autodoc>SetShadowMode(int mode, bool redraw=False)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
        <param name="redraw" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="GetShadowMode" overloaded="no">
      <autodoc>GetShadowMode() -&gt; int</autodoc>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(double x, double y, int OUTPUT, double OUTPUT) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="SetCentreResize" overloaded="no">
      <autodoc>SetCentreResize(bool cr)</autodoc>
      <paramlist>
        <param name="cr" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetCentreResize" overloaded="no">
      <autodoc>GetCentreResize() -&gt; bool</autodoc>
    </method>
    <method name="SetMaintainAspectRatio" overloaded="no">
      <autodoc>SetMaintainAspectRatio(bool ar)</autodoc>
      <paramlist>
        <param name="ar" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetMaintainAspectRatio" overloaded="no">
      <autodoc>GetMaintainAspectRatio() -&gt; bool</autodoc>
    </method>
    <method name="GetLines" overloaded="no">
      <autodoc>GetLines() -&gt; PyObject</autodoc>
    </method>
    <method name="SetDisableLabel" overloaded="no">
      <autodoc>SetDisableLabel(bool flag)</autodoc>
      <paramlist>
        <param name="flag" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetDisableLabel" overloaded="no">
      <autodoc>GetDisableLabel() -&gt; bool</autodoc>
    </method>
    <method name="SetAttachmentMode" overloaded="no">
      <autodoc>SetAttachmentMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetAttachmentMode" overloaded="no">
      <autodoc>GetAttachmentMode() -&gt; int</autodoc>
    </method>
    <method name="SetId" overloaded="no">
      <autodoc>SetId(long i)</autodoc>
      <paramlist>
        <param name="i" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; long</autodoc>
    </method>
    <method name="SetPen" overloaded="no">
      <autodoc>SetPen(wxPen pen)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
      </paramlist>
    </method>
    <method name="SetBrush" overloaded="no">
      <autodoc>SetBrush(wxBrush brush)</autodoc>
      <paramlist>
        <param name="brush" type="p.wxBrush" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    def SetClientData(self, data):
        self.clientData = data
    def GetClientData(self):
        if hasattr(self, 'clientData'):
            return self.clientData
        else:
            return None
    </pythoncode>
    <method name="Show" overloaded="no">
      <autodoc>Show(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="IsShown" overloaded="no">
      <autodoc>IsShown() -&gt; bool</autodoc>
    </method>
    <method name="Move" overloaded="no">
      <autodoc>Move(DC dc, double x1, double y1, bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x1" type="double" default=""/>
        <param name="y1" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Erase" overloaded="no">
      <autodoc>Erase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="EraseContents" overloaded="no">
      <autodoc>EraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="Draw" overloaded="no">
      <autodoc>Draw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="Flash" overloaded="no">
      <autodoc>Flash()</autodoc>
    </method>
    <method name="MoveLinks" overloaded="no">
      <autodoc>MoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="DrawContents" overloaded="no">
      <autodoc>DrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(double x, double y, bool recursive=True)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="recursive" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetAttachmentSize" overloaded="no">
      <autodoc>SetAttachmentSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="Attach" overloaded="no">
      <autodoc>Attach(PyShapeCanvas can)</autodoc>
      <paramlist>
        <param name="can" type="p.wxPyShapeCanvas" default=""/>
      </paramlist>
    </method>
    <method name="Detach" overloaded="no">
      <autodoc>Detach()</autodoc>
    </method>
    <method name="Constrain" overloaded="no">
      <autodoc>Constrain() -&gt; bool</autodoc>
    </method>
    <method name="AddLine" overloaded="no">
      <autodoc>AddLine(PyLineShape line, PyShape other, int attachFrom=0, 
    int attachTo=0, int positionFrom=-1, int positionTo=-1)</autodoc>
      <paramlist>
        <param name="line" type="p.wxPyLineShape" default=""/>
        <param name="other" type="p.wxPyShape" default=""/>
        <param name="attachFrom" type="int" default="0"/>
        <param name="attachTo" type="int" default="0"/>
        <param name="positionFrom" type="int" default="-1"/>
        <param name="positionTo" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="GetLinePosition" overloaded="no">
      <autodoc>GetLinePosition(PyLineShape line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="p.wxPyLineShape" default=""/>
      </paramlist>
    </method>
    <method name="AddText" overloaded="no">
      <autodoc>AddText(String string)</autodoc>
      <paramlist>
        <param name="string" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetPen" overloaded="no">
      <autodoc>GetPen() -&gt; wxPen</autodoc>
    </method>
    <method name="GetBrush" overloaded="no">
      <autodoc>GetBrush() -&gt; wxBrush</autodoc>
    </method>
    <method name="SetDefaultRegionSize" overloaded="no">
      <autodoc>SetDefaultRegionSize()</autodoc>
    </method>
    <method name="FormatText" overloaded="no">
      <autodoc>FormatText(DC dc, String s, int regionId=0)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="s" type="r.q(const).wxString" default=""/>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetFormatMode" overloaded="no">
      <autodoc>SetFormatMode(int mode, int regionId=0)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetFormatMode" overloaded="no">
      <autodoc>GetFormatMode(int regionId=0) -&gt; int</autodoc>
      <paramlist>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font, int regionId=0)</autodoc>
      <paramlist>
        <param name="font" type="p.wxFont" default=""/>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont(int regionId=0) -&gt; Font</autodoc>
      <paramlist>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(String colour, int regionId=0)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxString" default=""/>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetTextColour" overloaded="no">
      <autodoc>GetTextColour(int regionId=0) -&gt; String</autodoc>
      <paramlist>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetNumberOfTextRegions" overloaded="no">
      <autodoc>GetNumberOfTextRegions() -&gt; int</autodoc>
    </method>
    <method name="SetRegionName" overloaded="no">
      <autodoc>SetRegionName(String name, int regionId=0)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetRegionName" overloaded="no">
      <autodoc>GetRegionName(int regionId) -&gt; String</autodoc>
      <paramlist>
        <param name="regionId" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetRegionId" overloaded="no">
      <autodoc>GetRegionId(String name) -&gt; int</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="NameRegions" overloaded="no">
      <autodoc>NameRegions(String parentName=EmptyString)</autodoc>
      <paramlist>
        <param name="parentName" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetRegions" overloaded="no">
      <autodoc>GetRegions() -&gt; PyObject</autodoc>
    </method>
    <method name="AddRegion" overloaded="no">
      <autodoc>AddRegion(ShapeRegion region)</autodoc>
      <paramlist>
        <param name="region" type="p.wxShapeRegion" default=""/>
      </paramlist>
    </method>
    <method name="ClearRegions" overloaded="no">
      <autodoc>ClearRegions()</autodoc>
    </method>
    <method name="AssignNewIds" overloaded="no">
      <autodoc>AssignNewIds()</autodoc>
    </method>
    <method name="FindRegion" overloaded="no">
      <autodoc>FindRegion(String regionName, int OUTPUT) -&gt; PyShape</autodoc>
      <paramlist>
        <param name="regionName" type="r.q(const).wxString" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="FindRegionNames" overloaded="no">
      <autodoc>FindRegionNames(wxStringList list)</autodoc>
      <paramlist>
        <param name="list" type="r.wxStringList" default=""/>
      </paramlist>
    </method>
    <method name="ClearText" overloaded="no">
      <autodoc>ClearText(int regionId=0)</autodoc>
      <paramlist>
        <param name="regionId" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="RemoveLine" overloaded="no">
      <autodoc>RemoveLine(PyLineShape line)</autodoc>
      <paramlist>
        <param name="line" type="p.wxPyLineShape" default=""/>
      </paramlist>
    </method>
    <method name="GetAttachmentPosition" overloaded="no">
      <autodoc>GetAttachmentPosition(int attachment, double OUTPUT, double OUTPUT, int nth=0, 
    int no_arcs=1, PyLineShape line=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="attachment" type="int" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="nth" type="int" default="0"/>
        <param name="no_arcs" type="int" default="1"/>
        <param name="line" type="p.wxPyLineShape" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetNumberOfAttachments" overloaded="no">
      <autodoc>GetNumberOfAttachments() -&gt; int</autodoc>
    </method>
    <method name="AttachmentIsValid" overloaded="no">
      <autodoc>AttachmentIsValid(int attachment) -&gt; bool</autodoc>
      <paramlist>
        <param name="attachment" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetAttachments" overloaded="no">
      <autodoc>GetAttachments() -&gt; PyObject</autodoc>
    </method>
    <method name="GetAttachmentPositionEdge" overloaded="no">
      <autodoc>GetAttachmentPositionEdge(int attachment, double OUTPUT, double OUTPUT, int nth=0, 
    int no_arcs=1, PyLineShape line=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="attachment" type="int" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="nth" type="int" default="0"/>
        <param name="no_arcs" type="int" default="1"/>
        <param name="line" type="p.wxPyLineShape" default="NULL"/>
      </paramlist>
    </method>
    <method name="CalcSimpleAttachment" overloaded="no">
      <autodoc>CalcSimpleAttachment(RealPoint pt1, RealPoint pt2, int nth, int noArcs, 
    PyLineShape line) -&gt; RealPoint</autodoc>
      <paramlist>
        <param name="pt1" type="r.q(const).wxRealPoint" default=""/>
        <param name="pt2" type="r.q(const).wxRealPoint" default=""/>
        <param name="nth" type="int" default=""/>
        <param name="noArcs" type="int" default=""/>
        <param name="line" type="p.wxPyLineShape" default=""/>
      </paramlist>
    </method>
    <method name="AttachmentSortTest" overloaded="no">
      <autodoc>AttachmentSortTest(int attachmentPoint, RealPoint pt1, RealPoint pt2) -&gt; bool</autodoc>
      <paramlist>
        <param name="attachmentPoint" type="int" default=""/>
        <param name="pt1" type="r.q(const).wxRealPoint" default=""/>
        <param name="pt2" type="r.q(const).wxRealPoint" default=""/>
      </paramlist>
    </method>
    <method name="EraseLinks" overloaded="no">
      <autodoc>EraseLinks(DC dc, int attachment=-1, bool recurse=False)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="attachment" type="int" default="-1"/>
        <param name="recurse" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="DrawLinks" overloaded="no">
      <autodoc>DrawLinks(DC dc, int attachment=-1, bool recurse=False)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="attachment" type="int" default="-1"/>
        <param name="recurse" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="MoveLineToNewAttachment" overloaded="no">
      <autodoc>MoveLineToNewAttachment(DC dc, PyLineShape to_move, double x, double y) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="to_move" type="p.wxPyLineShape" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="ApplyAttachmentOrdering" overloaded="no">
      <autodoc>ApplyAttachmentOrdering(PyObject linesToSort)</autodoc>
      <paramlist>
        <param name="linesToSort" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetBranchingAttachmentRoot" overloaded="no">
      <autodoc>GetBranchingAttachmentRoot(int attachment) -&gt; RealPoint</autodoc>
      <paramlist>
        <param name="attachment" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBranchingAttachmentInfo" overloaded="no">
      <autodoc>GetBranchingAttachmentInfo(int attachment, RealPoint root, RealPoint neck, RealPoint shoulder1, 
    RealPoint shoulder2) -&gt; bool</autodoc>
      <paramlist>
        <param name="attachment" type="int" default=""/>
        <param name="root" type="r.wxRealPoint" default=""/>
        <param name="neck" type="r.wxRealPoint" default=""/>
        <param name="shoulder1" type="r.wxRealPoint" default=""/>
        <param name="shoulder2" type="r.wxRealPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetBranchingAttachmentPoint" overloaded="no">
      <autodoc>GetBranchingAttachmentPoint(int attachment, int n, RealPoint attachmentPoint, RealPoint stemPoint) -&gt; bool</autodoc>
      <paramlist>
        <param name="attachment" type="int" default=""/>
        <param name="n" type="int" default=""/>
        <param name="attachmentPoint" type="r.wxRealPoint" default=""/>
        <param name="stemPoint" type="r.wxRealPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetAttachmentLineCount" overloaded="no">
      <autodoc>GetAttachmentLineCount(int attachment) -&gt; int</autodoc>
      <paramlist>
        <param name="attachment" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetBranchNeckLength" overloaded="no">
      <autodoc>SetBranchNeckLength(int len)</autodoc>
      <paramlist>
        <param name="len" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBranchNeckLength" overloaded="no">
      <autodoc>GetBranchNeckLength() -&gt; int</autodoc>
    </method>
    <method name="SetBranchStemLength" overloaded="no">
      <autodoc>SetBranchStemLength(int len)</autodoc>
      <paramlist>
        <param name="len" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBranchStemLength" overloaded="no">
      <autodoc>GetBranchStemLength() -&gt; int</autodoc>
    </method>
    <method name="SetBranchSpacing" overloaded="no">
      <autodoc>SetBranchSpacing(int len)</autodoc>
      <paramlist>
        <param name="len" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBranchSpacing" overloaded="no">
      <autodoc>GetBranchSpacing() -&gt; int</autodoc>
    </method>
    <method name="SetBranchStyle" overloaded="no">
      <autodoc>SetBranchStyle(long style)</autodoc>
      <paramlist>
        <param name="style" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetBranchStyle" overloaded="no">
      <autodoc>GetBranchStyle() -&gt; long</autodoc>
    </method>
    <method name="PhysicalToLogicalAttachment" overloaded="no">
      <autodoc>PhysicalToLogicalAttachment(int physicalAttachment) -&gt; int</autodoc>
      <paramlist>
        <param name="physicalAttachment" type="int" default=""/>
      </paramlist>
    </method>
    <method name="LogicalToPhysicalAttachment" overloaded="no">
      <autodoc>LogicalToPhysicalAttachment(int logicalAttachment) -&gt; int</autodoc>
      <paramlist>
        <param name="logicalAttachment" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Draggable" overloaded="no">
      <autodoc>Draggable() -&gt; bool</autodoc>
    </method>
    <method name="HasDescendant" overloaded="no">
      <autodoc>HasDescendant(PyShape image) -&gt; bool</autodoc>
      <paramlist>
        <param name="image" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="CreateNewCopy" overloaded="no">
      <autodoc>CreateNewCopy(bool resetMapping=True, bool recompute=True) -&gt; PyShape</autodoc>
      <paramlist>
        <param name="resetMapping" type="bool" default="True"/>
        <param name="recompute" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="Copy" overloaded="no">
      <autodoc>Copy(PyShape copy)</autodoc>
      <paramlist>
        <param name="copy" type="r.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="CopyWithHandler" overloaded="no">
      <autodoc>CopyWithHandler(PyShape copy)</autodoc>
      <paramlist>
        <param name="copy" type="r.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="Rotate" overloaded="no">
      <autodoc>Rotate(double x, double y, double theta)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="theta" type="double" default=""/>
      </paramlist>
    </method>
    <method name="GetRotation" overloaded="no">
      <autodoc>GetRotation() -&gt; double</autodoc>
    </method>
    <method name="SetRotation" overloaded="no">
      <autodoc>SetRotation(double rotation)</autodoc>
      <paramlist>
        <param name="rotation" type="double" default=""/>
      </paramlist>
    </method>
    <method name="ClearAttachments" overloaded="no">
      <autodoc>ClearAttachments()</autodoc>
    </method>
    <method name="Recentre" overloaded="no">
      <autodoc>Recentre(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="ClearPointList" overloaded="no">
      <autodoc>ClearPointList(wxList list)</autodoc>
      <paramlist>
        <param name="list" type="r.wxList" default=""/>
      </paramlist>
    </method>
    <method name="GetBackgroundPen" overloaded="no">
      <autodoc>GetBackgroundPen() -&gt; wxPen</autodoc>
    </method>
    <method name="GetBackgroundBrush" overloaded="no">
      <autodoc>GetBackgroundBrush() -&gt; wxBrush</autodoc>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=False)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PseudoMetaFile" oldname="wxPseudoMetaFile" module="ogl">
    <baseclass name="wxObject"/>
    <constructor name="PseudoMetaFile" overloaded="no">
      <autodoc>__init__() -&gt; PseudoMetaFile</autodoc>
    </constructor>
    <destructor name="~wxPseudoMetaFile">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Draw" overloaded="no">
      <autodoc>Draw(DC dc, double xoffset, double yoffset)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="xoffset" type="double" default=""/>
        <param name="yoffset" type="double" default=""/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="Copy" overloaded="no">
      <autodoc>Copy(PseudoMetaFile copy)</autodoc>
      <paramlist>
        <param name="copy" type="r.wxPseudoMetaFile" default=""/>
      </paramlist>
    </method>
    <method name="Scale" overloaded="no">
      <autodoc>Scale(double sx, double sy)</autodoc>
      <paramlist>
        <param name="sx" type="double" default=""/>
        <param name="sy" type="double" default=""/>
      </paramlist>
    </method>
    <method name="ScaleTo" overloaded="no">
      <autodoc>ScaleTo(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="Translate" overloaded="no">
      <autodoc>Translate(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="Rotate" overloaded="no">
      <autodoc>Rotate(double x, double y, double theta)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="theta" type="double" default=""/>
      </paramlist>
    </method>
    <method name="LoadFromMetaFile" overloaded="no">
      <autodoc>LoadFromMetaFile(String filename, double width, double height) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="width" type="p.double" default=""/>
        <param name="height" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetBounds" overloaded="no">
      <autodoc>GetBounds(double minX, double minY, double maxX, double maxY)</autodoc>
      <paramlist>
        <param name="minX" type="p.double" default=""/>
        <param name="minY" type="p.double" default=""/>
        <param name="maxX" type="p.double" default=""/>
        <param name="maxY" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="CalculateSize" overloaded="no">
      <autodoc>CalculateSize(PyDrawnShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyDrawnShape" default=""/>
      </paramlist>
    </method>
    <method name="SetRotateable" overloaded="no">
      <autodoc>SetRotateable(bool rot)</autodoc>
      <paramlist>
        <param name="rot" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetRotateable" overloaded="no">
      <autodoc>GetRotateable() -&gt; bool</autodoc>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetFillBrush" overloaded="no">
      <autodoc>SetFillBrush(wxBrush brush)</autodoc>
      <paramlist>
        <param name="brush" type="p.wxBrush" default=""/>
      </paramlist>
    </method>
    <method name="GetFillBrush" overloaded="no">
      <autodoc>GetFillBrush() -&gt; wxBrush</autodoc>
    </method>
    <method name="SetOutlinePen" overloaded="no">
      <autodoc>SetOutlinePen(wxPen pen)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
      </paramlist>
    </method>
    <method name="GetOutlinePen" overloaded="no">
      <autodoc>GetOutlinePen() -&gt; wxPen</autodoc>
    </method>
    <method name="SetOutlineOp" overloaded="no">
      <autodoc>SetOutlineOp(int op)</autodoc>
      <paramlist>
        <param name="op" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetOutlineOp" overloaded="no">
      <autodoc>GetOutlineOp() -&gt; int</autodoc>
    </method>
    <method name="IsValid" overloaded="no">
      <autodoc>IsValid() -&gt; bool</autodoc>
    </method>
    <method name="DrawLine" overloaded="no">
      <autodoc>DrawLine(Point pt1, Point pt2)</autodoc>
      <paramlist>
        <param name="pt1" type="r.q(const).wxPoint" default=""/>
        <param name="pt2" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawRectangle" overloaded="no">
      <autodoc>DrawRectangle(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="DrawRoundedRectangle" overloaded="no">
      <autodoc>DrawRoundedRectangle(Rect rect, double radius)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="radius" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawArc" overloaded="no">
      <autodoc>DrawArc(Point centrePt, Point startPt, Point endPt)</autodoc>
      <paramlist>
        <param name="centrePt" type="r.q(const).wxPoint" default=""/>
        <param name="startPt" type="r.q(const).wxPoint" default=""/>
        <param name="endPt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipticArc" overloaded="no">
      <autodoc>DrawEllipticArc(Rect rect, double startAngle, double endAngle)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="startAngle" type="double" default=""/>
        <param name="endAngle" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipse" overloaded="no">
      <autodoc>DrawEllipse(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="DrawPoint" overloaded="no">
      <autodoc>DrawPoint(Point pt)</autodoc>
      <paramlist>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawText" overloaded="no">
      <autodoc>DrawText(String text, Point pt)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="pt" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawLines" overloaded="no">
      <autodoc>DrawLines(int PCOUNT, Point points)</autodoc>
      <paramlist>
        <param name="PCOUNT" type="int" default=""/>
        <param name="points" type="p.wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawPolygon" overloaded="no">
      <autodoc>DrawPolygon(int PCOUNT, Point points, int flags=0)</autodoc>
      <paramlist>
        <param name="PCOUNT" type="int" default=""/>
        <param name="points" type="p.wxPoint" default=""/>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="DrawSpline" overloaded="no">
      <autodoc>DrawSpline(int PCOUNT, Point points)</autodoc>
      <paramlist>
        <param name="PCOUNT" type="int" default=""/>
        <param name="points" type="p.wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="SetClippingRect" overloaded="no">
      <autodoc>SetClippingRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="DestroyClippingRect" overloaded="no">
      <autodoc>DestroyClippingRect()</autodoc>
    </method>
    <method name="SetPen" overloaded="no">
      <autodoc>SetPen(wxPen pen, bool isOutline=FALSE)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
        <param name="isOutline" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="SetBrush" overloaded="no">
      <autodoc>SetBrush(wxBrush brush, bool isFill=FALSE)</autodoc>
      <paramlist>
        <param name="brush" type="p.wxBrush" default=""/>
        <param name="isFill" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="SetFont" overloaded="no">
      <autodoc>SetFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="p.wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetTextColour" overloaded="no">
      <autodoc>SetTextColour(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundColour" overloaded="no">
      <autodoc>SetBackgroundColour(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetBackgroundMode" overloaded="no">
      <autodoc>SetBackgroundMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyRectangleShape" oldname="wxPyRectangleShape" module="ogl">
    <baseclass name="wxPyShape"/>
    <constructor name="PyRectangleShape" overloaded="no">
      <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyRectangleShape</autodoc>
      <paramlist>
        <param name="width" type="double" default="0.0"/>
        <param name="height" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetCornerRadius" overloaded="no">
      <autodoc>SetCornerRadius(double radius)</autodoc>
      <paramlist>
        <param name="radius" type="double" default=""/>
      </paramlist>
    </method>
    <method name="GetCornerRadius" overloaded="no">
      <autodoc>GetCornerRadius() -&gt; double</autodoc>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyControlPoint" oldname="wxPyControlPoint" module="ogl">
    <baseclass name="wxPyRectangleShape"/>
    <constructor name="PyControlPoint" overloaded="no">
      <autodoc>__init__(PyShapeCanvas the_canvas=None, PyShape object=None, 
    double size=0.0, double the_xoffset=0.0, double the_yoffset=0.0, 
    int the_type=0) -&gt; PyControlPoint</autodoc>
      <paramlist>
        <param name="the_canvas" type="p.wxPyShapeCanvas" default="NULL"/>
        <param name="object" type="p.wxPyShape" default="NULL"/>
        <param name="size" type="double" default="0.0"/>
        <param name="the_xoffset" type="double" default="0.0"/>
        <param name="the_yoffset" type="double" default="0.0"/>
        <param name="the_type" type="int" default="0"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetCornerRadius" overloaded="no">
      <autodoc>SetCornerRadius(double radius)</autodoc>
      <paramlist>
        <param name="radius" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyBitmapShape" oldname="wxPyBitmapShape" module="ogl">
    <baseclass name="wxPyRectangleShape"/>
    <constructor name="PyBitmapShape" overloaded="no">
      <autodoc>__init__() -&gt; PyBitmapShape</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
    </method>
    <method name="GetFilename" overloaded="no">
      <autodoc>GetFilename() -&gt; String</autodoc>
    </method>
    <method name="SetBitmap" overloaded="no">
      <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
      <paramlist>
        <param name="bitmap" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetFilename" overloaded="no">
      <autodoc>SetFilename(String filename)</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyDrawnShape" oldname="wxPyDrawnShape" module="ogl">
    <baseclass name="wxPyRectangleShape"/>
    <constructor name="PyDrawnShape" overloaded="no">
      <autodoc>__init__() -&gt; PyDrawnShape</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="CalculateSize" overloaded="no">
      <autodoc>CalculateSize()</autodoc>
    </method>
    <method name="DestroyClippingRect" overloaded="no">
      <autodoc>DestroyClippingRect()</autodoc>
    </method>
    <method name="DrawArc" overloaded="no">
      <autodoc>DrawArc(Point centrePoint, Point startPoint, Point endPoint)</autodoc>
      <paramlist>
        <param name="centrePoint" type="r.q(const).wxPoint" default=""/>
        <param name="startPoint" type="r.q(const).wxPoint" default=""/>
        <param name="endPoint" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawAtAngle" overloaded="no">
      <autodoc>DrawAtAngle(int angle)</autodoc>
      <paramlist>
        <param name="angle" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DrawEllipticArc" overloaded="no">
      <autodoc>DrawEllipticArc(Rect rect, double startAngle, double endAngle)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="startAngle" type="double" default=""/>
        <param name="endAngle" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawLine" overloaded="no">
      <autodoc>DrawLine(Point point1, Point point2)</autodoc>
      <paramlist>
        <param name="point1" type="r.q(const).wxPoint" default=""/>
        <param name="point2" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawLines" overloaded="no">
      <autodoc>DrawLines(int PCOUNT, Point points)</autodoc>
      <paramlist>
        <param name="PCOUNT" type="int" default=""/>
        <param name="points" type="p.wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawPoint" overloaded="no">
      <autodoc>DrawPoint(Point point)</autodoc>
      <paramlist>
        <param name="point" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawPolygon" overloaded="no">
      <autodoc>DrawPolygon(int PCOUNT, Point points, int flags=0)</autodoc>
      <paramlist>
        <param name="PCOUNT" type="int" default=""/>
        <param name="points" type="p.wxPoint" default=""/>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="DrawRectangle" overloaded="no">
      <autodoc>DrawRectangle(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="DrawRoundedRectangle" overloaded="no">
      <autodoc>DrawRoundedRectangle(Rect rect, double radius)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
        <param name="radius" type="double" default=""/>
      </paramlist>
    </method>
    <method name="DrawSpline" overloaded="no">
      <autodoc>DrawSpline(int PCOUNT, Point points)</autodoc>
      <paramlist>
        <param name="PCOUNT" type="int" default=""/>
        <param name="points" type="p.wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="DrawText" overloaded="no">
      <autodoc>DrawText(String text, Point point)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="point" type="r.q(const).wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="GetAngle" overloaded="no">
      <autodoc>GetAngle() -&gt; int</autodoc>
    </method>
    <method name="GetMetaFile" overloaded="no">
      <autodoc>GetMetaFile() -&gt; PseudoMetaFile</autodoc>
    </method>
    <method name="GetRotation" overloaded="no">
      <autodoc>GetRotation() -&gt; double</autodoc>
    </method>
    <method name="LoadFromMetaFile" overloaded="no">
      <autodoc>LoadFromMetaFile(String filename) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="Rotate" overloaded="no">
      <autodoc>Rotate(double x, double y, double theta)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="theta" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetClippingRect" overloaded="no">
      <autodoc>SetClippingRect(Rect rect)</autodoc>
      <paramlist>
        <param name="rect" type="r.q(const).wxRect" default=""/>
      </paramlist>
    </method>
    <method name="SetDrawnBackgroundColour" overloaded="no">
      <autodoc>SetDrawnBackgroundColour(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetDrawnBackgroundMode" overloaded="no">
      <autodoc>SetDrawnBackgroundMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDrawnBrush" overloaded="no">
      <autodoc>SetDrawnBrush(wxBrush pen, bool isOutline=FALSE)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxBrush" default=""/>
        <param name="isOutline" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="SetDrawnFont" overloaded="no">
      <autodoc>SetDrawnFont(Font font)</autodoc>
      <paramlist>
        <param name="font" type="p.wxFont" default=""/>
      </paramlist>
    </method>
    <method name="SetDrawnPen" overloaded="no">
      <autodoc>SetDrawnPen(wxPen pen, bool isOutline=FALSE)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
        <param name="isOutline" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="SetDrawnTextColour" overloaded="no">
      <autodoc>SetDrawnTextColour(Colour colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="Scale" overloaded="no">
      <autodoc>Scale(double sx, double sy)</autodoc>
      <paramlist>
        <param name="sx" type="double" default=""/>
        <param name="sy" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetSaveToFile" overloaded="no">
      <autodoc>SetSaveToFile(bool save)</autodoc>
      <paramlist>
        <param name="save" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Translate" overloaded="no">
      <autodoc>Translate(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="OGLConstraint" oldname="wxOGLConstraint" module="ogl">
    <baseclass name="wxObject"/>
    <constructor name="OGLConstraint" overloaded="no">
      <autodoc>__init__(int type, PyShape constraining, PyObject constrained) -&gt; OGLConstraint</autodoc>
      <paramlist>
        <param name="type" type="int" default=""/>
        <param name="constraining" type="p.wxPyShape" default=""/>
        <param name="constrained" type="p.PyObject" default=""/>
      </paramlist>
    </constructor>
    <method name="Evaluate" overloaded="no">
      <autodoc>Evaluate() -&gt; bool</autodoc>
    </method>
    <method name="SetSpacing" overloaded="no">
      <autodoc>SetSpacing(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="Equals" overloaded="no">
      <autodoc>Equals(double a, double b) -&gt; bool</autodoc>
      <paramlist>
        <param name="a" type="double" default=""/>
        <param name="b" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyCompositeShape" oldname="wxPyCompositeShape" module="ogl">
    <baseclass name="wxPyRectangleShape"/>
    <constructor name="PyCompositeShape" overloaded="no">
      <autodoc>__init__() -&gt; PyCompositeShape</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="AddChild" overloaded="no">
      <autodoc>AddChild(PyShape child, PyShape addAfter=None)</autodoc>
      <paramlist>
        <param name="child" type="p.wxPyShape" default=""/>
        <param name="addAfter" type="p.wxPyShape" default="NULL"/>
      </paramlist>
    </method>
    <method name="AddConstraint" overloaded="no">
      <autodoc>AddConstraint(OGLConstraint constraint) -&gt; OGLConstraint</autodoc>
      <paramlist>
        <param name="constraint" type="p.wxOGLConstraint" default=""/>
      </paramlist>
    </method>
    <method name="AddConstrainedShapes" overloaded="no">
      <autodoc>AddConstrainedShapes(int type, PyShape constraining, PyObject constrained) -&gt; OGLConstraint</autodoc>
      <paramlist>
        <param name="type" type="int" default=""/>
        <param name="constraining" type="p.wxPyShape" default=""/>
        <param name="constrained" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="AddSimpleConstraint" overloaded="no">
      <autodoc>AddSimpleConstraint(int type, PyShape constraining, PyShape constrained) -&gt; OGLConstraint</autodoc>
      <paramlist>
        <param name="type" type="int" default=""/>
        <param name="constraining" type="p.wxPyShape" default=""/>
        <param name="constrained" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="CalculateSize" overloaded="no">
      <autodoc>CalculateSize()</autodoc>
    </method>
    <method name="ContainsDivision" overloaded="no">
      <autodoc>ContainsDivision(PyDivisionShape division) -&gt; bool</autodoc>
      <paramlist>
        <param name="division" type="p.wxPyDivisionShape" default=""/>
      </paramlist>
    </method>
    <method name="DeleteConstraint" overloaded="no">
      <autodoc>DeleteConstraint(OGLConstraint constraint)</autodoc>
      <paramlist>
        <param name="constraint" type="p.wxOGLConstraint" default=""/>
      </paramlist>
    </method>
    <method name="DeleteConstraintsInvolvingChild" overloaded="no">
      <autodoc>DeleteConstraintsInvolvingChild(PyShape child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="FindContainerImage" overloaded="no">
      <autodoc>FindContainerImage() -&gt; PyShape</autodoc>
    </method>
    <method name="GetConstraints" overloaded="no">
      <autodoc>GetConstraints() -&gt; PyObject</autodoc>
    </method>
    <method name="GetDivisions" overloaded="no">
      <autodoc>GetDivisions() -&gt; PyObject</autodoc>
    </method>
    <method name="MakeContainer" overloaded="no">
      <autodoc>MakeContainer()</autodoc>
    </method>
    <method name="Recompute" overloaded="no">
      <autodoc>Recompute() -&gt; bool</autodoc>
    </method>
    <method name="RemoveChild" overloaded="no">
      <autodoc>RemoveChild(PyShape child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyDividedShape" oldname="wxPyDividedShape" module="ogl">
    <baseclass name="wxPyRectangleShape"/>
    <constructor name="PyDividedShape" overloaded="no">
      <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyDividedShape</autodoc>
      <paramlist>
        <param name="width" type="double" default="0.0"/>
        <param name="height" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="EditRegions" overloaded="no">
      <autodoc>EditRegions()</autodoc>
    </method>
    <method name="SetRegionSizes" overloaded="no">
      <autodoc>SetRegionSizes()</autodoc>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyDivisionShape" oldname="wxPyDivisionShape" module="ogl">
    <baseclass name="wxPyCompositeShape"/>
    <constructor name="PyDivisionShape" overloaded="no">
      <autodoc>__init__() -&gt; PyDivisionShape</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="AdjustBottom" overloaded="no">
      <autodoc>AdjustBottom(double bottom, bool test)</autodoc>
      <paramlist>
        <param name="bottom" type="double" default=""/>
        <param name="test" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AdjustLeft" overloaded="no">
      <autodoc>AdjustLeft(double left, bool test)</autodoc>
      <paramlist>
        <param name="left" type="double" default=""/>
        <param name="test" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AdjustRight" overloaded="no">
      <autodoc>AdjustRight(double right, bool test)</autodoc>
      <paramlist>
        <param name="right" type="double" default=""/>
        <param name="test" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AdjustTop" overloaded="no">
      <autodoc>AdjustTop(double top, bool test)</autodoc>
      <paramlist>
        <param name="top" type="double" default=""/>
        <param name="test" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Divide" overloaded="no">
      <autodoc>Divide(int direction)</autodoc>
      <paramlist>
        <param name="direction" type="int" default=""/>
      </paramlist>
    </method>
    <method name="EditEdge" overloaded="no">
      <autodoc>EditEdge(int side)</autodoc>
      <paramlist>
        <param name="side" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBottomSide" overloaded="no">
      <autodoc>GetBottomSide() -&gt; PyDivisionShape</autodoc>
    </method>
    <method name="GetHandleSide" overloaded="no">
      <autodoc>GetHandleSide() -&gt; int</autodoc>
    </method>
    <method name="GetLeftSide" overloaded="no">
      <autodoc>GetLeftSide() -&gt; PyDivisionShape</autodoc>
    </method>
    <method name="GetLeftSideColour" overloaded="no">
      <autodoc>GetLeftSideColour() -&gt; String</autodoc>
    </method>
    <method name="GetLeftSidePen" overloaded="no">
      <autodoc>GetLeftSidePen() -&gt; wxPen</autodoc>
    </method>
    <method name="GetRightSide" overloaded="no">
      <autodoc>GetRightSide() -&gt; PyDivisionShape</autodoc>
    </method>
    <method name="GetTopSide" overloaded="no">
      <autodoc>GetTopSide() -&gt; PyDivisionShape</autodoc>
    </method>
    <method name="GetTopSidePen" overloaded="no">
      <autodoc>GetTopSidePen() -&gt; wxPen</autodoc>
    </method>
    <method name="ResizeAdjoining" overloaded="no">
      <autodoc>ResizeAdjoining(int side, double newPos, bool test)</autodoc>
      <paramlist>
        <param name="side" type="int" default=""/>
        <param name="newPos" type="double" default=""/>
        <param name="test" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="PopupMenu" overloaded="no">
      <autodoc>PopupMenu(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetBottomSide" overloaded="no">
      <autodoc>SetBottomSide(PyDivisionShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyDivisionShape" default=""/>
      </paramlist>
    </method>
    <method name="SetHandleSide" overloaded="no">
      <autodoc>SetHandleSide(int side)</autodoc>
      <paramlist>
        <param name="side" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLeftSide" overloaded="no">
      <autodoc>SetLeftSide(PyDivisionShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyDivisionShape" default=""/>
      </paramlist>
    </method>
    <method name="SetLeftSideColour" overloaded="no">
      <autodoc>SetLeftSideColour(String colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetLeftSidePen" overloaded="no">
      <autodoc>SetLeftSidePen(wxPen pen)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
      </paramlist>
    </method>
    <method name="SetRightSide" overloaded="no">
      <autodoc>SetRightSide(PyDivisionShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyDivisionShape" default=""/>
      </paramlist>
    </method>
    <method name="SetTopSide" overloaded="no">
      <autodoc>SetTopSide(PyDivisionShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyDivisionShape" default=""/>
      </paramlist>
    </method>
    <method name="SetTopSideColour" overloaded="no">
      <autodoc>SetTopSideColour(String colour)</autodoc>
      <paramlist>
        <param name="colour" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetTopSidePen" overloaded="no">
      <autodoc>SetTopSidePen(wxPen pen)</autodoc>
      <paramlist>
        <param name="pen" type="p.wxPen" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyEllipseShape" oldname="wxPyEllipseShape" module="ogl">
    <baseclass name="wxPyShape"/>
    <constructor name="PyEllipseShape" overloaded="no">
      <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyEllipseShape</autodoc>
      <paramlist>
        <param name="width" type="double" default="0.0"/>
        <param name="height" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyCircleShape" oldname="wxPyCircleShape" module="ogl">
    <baseclass name="wxPyEllipseShape"/>
    <constructor name="PyCircleShape" overloaded="no">
      <autodoc>__init__(double width=0.0) -&gt; PyCircleShape</autodoc>
      <paramlist>
        <param name="width" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="ArrowHead" oldname="wxArrowHead" module="ogl">
    <baseclass name="wxObject"/>
    <constructor name="ArrowHead" overloaded="no">
      <autodoc>__init__(int type=0, int end=0, double size=0.0, double dist=0.0, 
    String name=EmptyString, PseudoMetaFile mf=None, 
    long arrowId=-1) -&gt; ArrowHead</autodoc>
      <paramlist>
        <param name="type" type="int" default="0"/>
        <param name="end" type="int" default="0"/>
        <param name="size" type="double" default="0.0"/>
        <param name="dist" type="double" default="0.0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="mf" type="p.wxPseudoMetaFile" default="NULL"/>
        <param name="arrowId" type="long" default="-1"/>
      </paramlist>
    </constructor>
    <destructor name="~wxArrowHead">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="_GetType" overloaded="no">
      <autodoc>_GetType() -&gt; int</autodoc>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; int</autodoc>
    </method>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetXOffset" overloaded="no">
      <autodoc>GetXOffset() -&gt; double</autodoc>
    </method>
    <method name="GetYOffset" overloaded="no">
      <autodoc>GetYOffset() -&gt; double</autodoc>
    </method>
    <method name="GetSpacing" overloaded="no">
      <autodoc>GetSpacing() -&gt; double</autodoc>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize() -&gt; double</autodoc>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="SetXOffset" overloaded="no">
      <autodoc>SetXOffset(double x)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetYOffset" overloaded="no">
      <autodoc>SetYOffset(double y)</autodoc>
      <paramlist>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="GetMetaFile" overloaded="no">
      <autodoc>GetMetaFile() -&gt; PseudoMetaFile</autodoc>
    </method>
    <method name="GetId" overloaded="no">
      <autodoc>GetId() -&gt; long</autodoc>
    </method>
    <method name="GetArrowEnd" overloaded="no">
      <autodoc>GetArrowEnd() -&gt; int</autodoc>
    </method>
    <method name="GetArrowSize" overloaded="no">
      <autodoc>GetArrowSize() -&gt; double</autodoc>
    </method>
    <method name="SetSize" overloaded="no">
      <autodoc>SetSize(double size)</autodoc>
      <paramlist>
        <param name="size" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetSpacing" overloaded="no">
      <autodoc>SetSpacing(double sp)</autodoc>
      <paramlist>
        <param name="sp" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyLineShape" oldname="wxPyLineShape" module="ogl">
    <baseclass name="wxPyShape"/>
    <constructor name="PyLineShape" overloaded="no">
      <autodoc>__init__() -&gt; PyLineShape</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="AddArrow" overloaded="no">
      <autodoc>AddArrow(int type, int end=ARROW_POSITION_END, double arrowSize=10.0, 
    double xOffset=0.0, String name=EmptyString, 
    PseudoMetaFile mf=None, long arrowId=-1)</autodoc>
      <paramlist>
        <param name="type" type="int" default=""/>
        <param name="end" type="int" default="ARROW_POSITION_END"/>
        <param name="arrowSize" type="double" default="10.0"/>
        <param name="xOffset" type="double" default="0.0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="mf" type="p.wxPseudoMetaFile" default="NULL"/>
        <param name="arrowId" type="long" default="-1"/>
      </paramlist>
    </method>
    <method name="AddArrowOrdered" overloaded="no">
      <autodoc>AddArrowOrdered(ArrowHead arrow, PyObject referenceList, int end)</autodoc>
      <paramlist>
        <param name="arrow" type="p.wxArrowHead" default=""/>
        <param name="referenceList" type="p.PyObject" default=""/>
        <param name="end" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ClearArrow" overloaded="no">
      <autodoc>ClearArrow(String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ClearArrowsAtPosition" overloaded="no">
      <autodoc>ClearArrowsAtPosition(int position=-1)</autodoc>
      <paramlist>
        <param name="position" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="DrawArrow" overloaded="no">
      <autodoc>DrawArrow(DC dc, ArrowHead arrow, double xOffset, bool proportionalOffset)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="arrow" type="p.wxArrowHead" default=""/>
        <param name="xOffset" type="double" default=""/>
        <param name="proportionalOffset" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="DeleteArrowHeadId" overloaded="no">
      <autodoc>DeleteArrowHeadId(long arrowId) -&gt; bool</autodoc>
      <paramlist>
        <param name="arrowId" type="long" default=""/>
      </paramlist>
    </method>
    <method name="DeleteArrowHead" overloaded="no">
      <autodoc>DeleteArrowHead(int position, String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="position" type="int" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DeleteLineControlPoint" overloaded="no">
      <autodoc>DeleteLineControlPoint() -&gt; bool</autodoc>
    </method>
    <method name="DrawArrows" overloaded="no">
      <autodoc>DrawArrows(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="DrawRegion" overloaded="no">
      <autodoc>DrawRegion(DC dc, ShapeRegion region, double x, double y)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="region" type="p.wxShapeRegion" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="EraseRegion" overloaded="no">
      <autodoc>EraseRegion(DC dc, ShapeRegion region, double x, double y)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="region" type="p.wxShapeRegion" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="FindArrowHeadId" overloaded="no">
      <autodoc>FindArrowHeadId(long arrowId) -&gt; ArrowHead</autodoc>
      <paramlist>
        <param name="arrowId" type="long" default=""/>
      </paramlist>
    </method>
    <method name="FindArrowHead" overloaded="no">
      <autodoc>FindArrowHead(int position, String name) -&gt; ArrowHead</autodoc>
      <paramlist>
        <param name="position" type="int" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="FindLineEndPoints" overloaded="no">
      <autodoc>FindLineEndPoints(double OUTPUT, double OUTPUT, double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="FindLinePosition" overloaded="no">
      <autodoc>FindLinePosition(double x, double y) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="FindMinimumWidth" overloaded="no">
      <autodoc>FindMinimumWidth() -&gt; double</autodoc>
    </method>
    <method name="FindNth" overloaded="no">
      <autodoc>FindNth(PyShape image, int OUTPUT, int OUTPUT, bool incoming)</autodoc>
      <paramlist>
        <param name="image" type="p.wxPyShape" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="incoming" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetAttachmentFrom" overloaded="no">
      <autodoc>GetAttachmentFrom() -&gt; int</autodoc>
    </method>
    <method name="GetAttachmentTo" overloaded="no">
      <autodoc>GetAttachmentTo() -&gt; int</autodoc>
    </method>
    <method name="GetEnds" overloaded="no">
      <autodoc>GetEnds(double OUTPUT, double OUTPUT, double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetFrom" overloaded="no">
      <autodoc>GetFrom() -&gt; PyShape</autodoc>
    </method>
    <method name="GetLabelPosition" overloaded="no">
      <autodoc>GetLabelPosition(int position, double OUTPUT, double OUTPUT)</autodoc>
      <paramlist>
        <param name="position" type="int" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
        <param name="OUTPUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <method name="GetNextControlPoint" overloaded="no">
      <autodoc>GetNextControlPoint(PyShape shape) -&gt; RealPoint</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="GetTo" overloaded="no">
      <autodoc>GetTo() -&gt; PyShape</autodoc>
    </method>
    <method name="Initialise" overloaded="no">
      <autodoc>Initialise()</autodoc>
    </method>
    <method name="InsertLineControlPoint" overloaded="no">
      <autodoc>InsertLineControlPoint(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="IsEnd" overloaded="no">
      <autodoc>IsEnd(PyShape shape) -&gt; bool</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="IsSpline" overloaded="no">
      <autodoc>IsSpline() -&gt; bool</autodoc>
    </method>
    <method name="MakeLineControlPoints" overloaded="no">
      <autodoc>MakeLineControlPoints(int n)</autodoc>
      <paramlist>
        <param name="n" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineControlPoints" overloaded="no">
      <autodoc>GetLineControlPoints() -&gt; PyObject</autodoc>
    </method>
    <method name="SetAttachmentFrom" overloaded="no">
      <autodoc>SetAttachmentFrom(int fromAttach)</autodoc>
      <paramlist>
        <param name="fromAttach" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAttachments" overloaded="no">
      <autodoc>SetAttachments(int fromAttach, int toAttach)</autodoc>
      <paramlist>
        <param name="fromAttach" type="int" default=""/>
        <param name="toAttach" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAttachmentTo" overloaded="no">
      <autodoc>SetAttachmentTo(int toAttach)</autodoc>
      <paramlist>
        <param name="toAttach" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetEnds" overloaded="no">
      <autodoc>SetEnds(double x1, double y1, double x2, double y2)</autodoc>
      <paramlist>
        <param name="x1" type="double" default=""/>
        <param name="y1" type="double" default=""/>
        <param name="x2" type="double" default=""/>
        <param name="y2" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetFrom" overloaded="no">
      <autodoc>SetFrom(PyShape object)</autodoc>
      <paramlist>
        <param name="object" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="SetIgnoreOffsets" overloaded="no">
      <autodoc>SetIgnoreOffsets(bool ignore)</autodoc>
      <paramlist>
        <param name="ignore" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetSpline" overloaded="no">
      <autodoc>SetSpline(bool spline)</autodoc>
      <paramlist>
        <param name="spline" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetTo" overloaded="no">
      <autodoc>SetTo(PyShape object)</autodoc>
      <paramlist>
        <param name="object" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="Straighten" overloaded="no">
      <autodoc>Straighten(DC dc=None)</autodoc>
      <paramlist>
        <param name="dc" type="p.wxDC" default="NULL"/>
      </paramlist>
    </method>
    <method name="Unlink" overloaded="no">
      <autodoc>Unlink()</autodoc>
    </method>
    <method name="SetAlignmentOrientation" overloaded="no">
      <autodoc>SetAlignmentOrientation(bool isEnd, bool isHoriz)</autodoc>
      <paramlist>
        <param name="isEnd" type="bool" default=""/>
        <param name="isHoriz" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetAlignmentType" overloaded="no">
      <autodoc>SetAlignmentType(bool isEnd, int alignType)</autodoc>
      <paramlist>
        <param name="isEnd" type="bool" default=""/>
        <param name="alignType" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetAlignmentOrientation" overloaded="no">
      <autodoc>GetAlignmentOrientation(bool isEnd) -&gt; bool</autodoc>
      <paramlist>
        <param name="isEnd" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetAlignmentType" overloaded="no">
      <autodoc>GetAlignmentType(bool isEnd) -&gt; int</autodoc>
      <paramlist>
        <param name="isEnd" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetAlignmentStart" overloaded="no">
      <autodoc>GetAlignmentStart() -&gt; int</autodoc>
    </method>
    <method name="GetAlignmentEnd" overloaded="no">
      <autodoc>GetAlignmentEnd() -&gt; int</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyPolygonShape" oldname="wxPyPolygonShape" module="ogl">
    <baseclass name="wxPyShape"/>
    <constructor name="PyPolygonShape" overloaded="no">
      <autodoc>__init__() -&gt; PyPolygonShape</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="Create" overloaded="no">
      <autodoc>Create(PyObject points) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="points" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="AddPolygonPoint" overloaded="no">
      <autodoc>AddPolygonPoint(int pos=0)</autodoc>
      <paramlist>
        <param name="pos" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="CalculatePolygonCentre" overloaded="no">
      <autodoc>CalculatePolygonCentre()</autodoc>
    </method>
    <method name="DeletePolygonPoint" overloaded="no">
      <autodoc>DeletePolygonPoint(int pos=0)</autodoc>
      <paramlist>
        <param name="pos" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetPoints" overloaded="no">
      <autodoc>GetPoints() -&gt; PyObject</autodoc>
    </method>
    <method name="GetOriginalPoints" overloaded="no">
      <autodoc>GetOriginalPoints() -&gt; PyObject</autodoc>
    </method>
    <method name="GetOriginalWidth" overloaded="no">
      <autodoc>GetOriginalWidth() -&gt; double</autodoc>
    </method>
    <method name="GetOriginalHeight" overloaded="no">
      <autodoc>GetOriginalHeight() -&gt; double</autodoc>
    </method>
    <method name="SetOriginalWidth" overloaded="no">
      <autodoc>SetOriginalWidth(double w)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetOriginalHeight" overloaded="no">
      <autodoc>SetOriginalHeight(double h)</autodoc>
      <paramlist>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="UpdateOriginalPoints" overloaded="no">
      <autodoc>UpdateOriginalPoints()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyTextShape" oldname="wxPyTextShape" module="ogl">
    <baseclass name="wxPyRectangleShape"/>
    <constructor name="PyTextShape" overloaded="no">
      <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyTextShape</autodoc>
      <paramlist>
        <param name="width" type="double" default="0.0"/>
        <param name="height" type="double" default="0.0"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDelete" overloaded="no">
      <autodoc>base_OnDelete()</autodoc>
    </method>
    <method name="base_OnDraw" overloaded="no">
      <autodoc>base_OnDraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawContents" overloaded="no">
      <autodoc>base_OnDrawContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawBranches" overloaded="no">
      <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="erase" type="bool" default="FALSE"/>
      </paramlist>
    </method>
    <method name="base_OnMoveLinks" overloaded="no">
      <autodoc>base_OnMoveLinks(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnErase" overloaded="no">
      <autodoc>base_OnErase(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseContents" overloaded="no">
      <autodoc>base_OnEraseContents(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnHighlight" overloaded="no">
      <autodoc>base_OnHighlight(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftDoubleClick" overloaded="no">
      <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSize" overloaded="no">
      <autodoc>base_OnSize(double x, double y)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMovePre" overloaded="no">
      <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnMovePost" overloaded="no">
      <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="old_x" type="double" default=""/>
        <param name="old_y" type="double" default=""/>
        <param name="display" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDrawOutline" overloaded="no">
      <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnDrawControlPoints" overloaded="no">
      <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEraseControlPoints" overloaded="no">
      <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="base_OnMoveLink" overloaded="no">
      <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="moveControlPoints" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="base_OnSizingDragLeft" overloaded="no">
      <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingBeginDragLeft" overloaded="no">
      <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnSizingEndDragLeft" overloaded="no">
      <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
      <paramlist>
        <param name="pt" type="p.wxPyControlPoint" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
        <param name="attachment" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginSize" overloaded="no">
      <autodoc>base_OnBeginSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
    <method name="base_OnEndSize" overloaded="no">
      <autodoc>base_OnEndSize(double w, double h)</autodoc>
      <paramlist>
        <param name="w" type="double" default=""/>
        <param name="h" type="double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="Diagram" oldname="wxDiagram" module="ogl">
    <baseclass name="wxObject"/>
    <constructor name="Diagram" overloaded="no">
      <autodoc>__init__() -&gt; Diagram</autodoc>
    </constructor>
    <method name="AddShape" overloaded="no">
      <autodoc>AddShape(PyShape shape, PyShape addAfter=None)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
        <param name="addAfter" type="p.wxPyShape" default="NULL"/>
      </paramlist>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="DeleteAllShapes" overloaded="no">
      <autodoc>DeleteAllShapes()</autodoc>
    </method>
    <method name="DrawOutline" overloaded="no">
      <autodoc>DrawOutline(DC dc, double x1, double y1, double x2, double y2)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
        <param name="x1" type="double" default=""/>
        <param name="y1" type="double" default=""/>
        <param name="x2" type="double" default=""/>
        <param name="y2" type="double" default=""/>
      </paramlist>
    </method>
    <method name="FindShape" overloaded="no">
      <autodoc>FindShape(long id) -&gt; PyShape</autodoc>
      <paramlist>
        <param name="id" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetCanvas" overloaded="no">
      <autodoc>GetCanvas() -&gt; PyShapeCanvas</autodoc>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; int</autodoc>
    </method>
    <method name="GetGridSpacing" overloaded="no">
      <autodoc>GetGridSpacing() -&gt; double</autodoc>
    </method>
    <method name="GetMouseTolerance" overloaded="no">
      <autodoc>GetMouseTolerance() -&gt; int</autodoc>
    </method>
    <method name="GetShapeList" overloaded="no">
      <autodoc>GetShapeList() -&gt; PyObject</autodoc>
    </method>
    <method name="GetQuickEditMode" overloaded="no">
      <autodoc>GetQuickEditMode() -&gt; bool</autodoc>
    </method>
    <method name="GetSnapToGrid" overloaded="no">
      <autodoc>GetSnapToGrid() -&gt; bool</autodoc>
    </method>
    <method name="InsertShape" overloaded="no">
      <autodoc>InsertShape(PyShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="RecentreAll" overloaded="no">
      <autodoc>RecentreAll(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="Redraw" overloaded="no">
      <autodoc>Redraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="RemoveAllShapes" overloaded="no">
      <autodoc>RemoveAllShapes()</autodoc>
    </method>
    <method name="RemoveShape" overloaded="no">
      <autodoc>RemoveShape(PyShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="SetCanvas" overloaded="no">
      <autodoc>SetCanvas(PyShapeCanvas canvas)</autodoc>
      <paramlist>
        <param name="canvas" type="p.wxPyShapeCanvas" default=""/>
      </paramlist>
    </method>
    <method name="SetGridSpacing" overloaded="no">
      <autodoc>SetGridSpacing(double spacing)</autodoc>
      <paramlist>
        <param name="spacing" type="double" default=""/>
      </paramlist>
    </method>
    <method name="SetMouseTolerance" overloaded="no">
      <autodoc>SetMouseTolerance(int tolerance)</autodoc>
      <paramlist>
        <param name="tolerance" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetQuickEditMode" overloaded="no">
      <autodoc>SetQuickEditMode(bool mode)</autodoc>
      <paramlist>
        <param name="mode" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetSnapToGrid" overloaded="no">
      <autodoc>SetSnapToGrid(bool snap)</autodoc>
      <paramlist>
        <param name="snap" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="ShowAll" overloaded="no">
      <autodoc>ShowAll(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="Snap" overloaded="no">
      <autodoc>Snap(double INOUT, double INOUT)</autodoc>
      <paramlist>
        <param name="INOUT" type="p.double" default=""/>
        <param name="INOUT" type="p.double" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="PyShapeCanvas" oldname="wxPyShapeCanvas" module="ogl">
    <baseclass name="wxScrolledWindow"/>
    <constructor name="PyShapeCanvas" overloaded="no">
      <autodoc>__init__(Window parent=None, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BORDER, 
    String name=wxPyShapeCanvasNameStr) -&gt; PyShapeCanvas</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default="NULL"/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxBORDER"/>
        <param name="name" type="r.q(const).wxString" default="wxPyShapeCanvasNameStr"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    def _setOORandCallbackInfo(self, _class):
        self._setOORInfo(self)
        self._setCallbackInfo(self, _class)
    </pythoncode>
    <method name="AddShape" overloaded="no">
      <autodoc>AddShape(PyShape shape, PyShape addAfter=None)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
        <param name="addAfter" type="p.wxPyShape" default="NULL"/>
      </paramlist>
    </method>
    <method name="FindShape" overloaded="no">
      <autodoc>FindShape(double x1, double y, int OUTPUT, wxClassInfo info=None, 
    PyShape notImage=None) -&gt; PyShape</autodoc>
      <paramlist>
        <param name="x1" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="info" type="p.wxClassInfo" default="NULL"/>
        <param name="notImage" type="p.wxPyShape" default="NULL"/>
      </paramlist>
    </method>
    <method name="FindFirstSensitiveShape" overloaded="no">
      <autodoc>FindFirstSensitiveShape(double x1, double y, int OUTPUT, int op) -&gt; PyShape</autodoc>
      <paramlist>
        <param name="x1" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="op" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDiagram" overloaded="no">
      <autodoc>GetDiagram() -&gt; Diagram</autodoc>
    </method>
    <method name="GetQuickEditMode" overloaded="no">
      <autodoc>GetQuickEditMode() -&gt; bool</autodoc>
    </method>
    <method name="InsertShape" overloaded="no">
      <autodoc>InsertShape(PyShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragLeft" overloaded="no">
      <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnBeginDragRight" overloaded="no">
      <autodoc>base_OnBeginDragRight(double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragLeft" overloaded="no">
      <autodoc>base_OnEndDragLeft(double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnEndDragRight" overloaded="no">
      <autodoc>base_OnEndDragRight(double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragLeft" overloaded="no">
      <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnDragRight" overloaded="no">
      <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="draw" type="bool" default=""/>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnLeftClick" overloaded="no">
      <autodoc>base_OnLeftClick(double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="base_OnRightClick" overloaded="no">
      <autodoc>base_OnRightClick(double x, double y, int keys=0)</autodoc>
      <paramlist>
        <param name="x" type="double" default=""/>
        <param name="y" type="double" default=""/>
        <param name="keys" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="Redraw" overloaded="no">
      <autodoc>Redraw(DC dc)</autodoc>
      <paramlist>
        <param name="dc" type="r.wxDC" default=""/>
      </paramlist>
    </method>
    <method name="RemoveShape" overloaded="no">
      <autodoc>RemoveShape(PyShape shape)</autodoc>
      <paramlist>
        <param name="shape" type="p.wxPyShape" default=""/>
      </paramlist>
    </method>
    <method name="SetDiagram" overloaded="no">
      <autodoc>SetDiagram(Diagram diagram)</autodoc>
      <paramlist>
        <param name="diagram" type="p.wxDiagram" default=""/>
      </paramlist>
    </method>
    <method name="Snap" overloaded="no">
      <autodoc>Snap(double INOUT, double INOUT)</autodoc>
      <paramlist>
        <param name="INOUT" type="p.double" default=""/>
        <param name="INOUT" type="p.double" default=""/>
      </paramlist>
    </method>
    <pythoncode>
    def GetShapeList(self):
        return self.GetDiagram().GetShapeList()
    </pythoncode>
  </class>
  <pythoncode>
# Aliases    
ShapeCanvas =       PyShapeCanvas
ShapeEvtHandler =   PyShapeEvtHandler
Shape =             PyShape
RectangleShape =    PyRectangleShape
BitmapShape =       PyBitmapShape
DrawnShape =        PyDrawnShape
CompositeShape =    PyCompositeShape
DividedShape =      PyDividedShape
DivisionShape =     PyDivisionShape
EllipseShape =      PyEllipseShape
CircleShape =       PyCircleShape
LineShape =         PyLineShape
PolygonShape =      PyPolygonShape
TextShape =         PyTextShape
ControlPoint =      PyControlPoint
</pythoncode>
  <function oldname="wxOGLInitialize" name="OGLInitialize" overloaded="no">
    <autodoc>OGLInitialize()</autodoc>
  </function>
  <function oldname="wxOGLCleanUp" name="OGLCleanUp" overloaded="no">
    <autodoc>OGLCleanUp()</autodoc>
  </function>
</module>
<module name="stc">
  <pythoncode> wx = core </pythoncode>
  <class name="StyledTextCtrl" oldname="wxStyledTextCtrl" module="stc">
    <baseclass name="wxControl"/>
    <constructor name="StyledTextCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=STCNameStr) -&gt; StyledTextCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPySTCNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreStyledTextCtrl" overloaded="no">
      <autodoc>PreStyledTextCtrl() -&gt; StyledTextCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=wxSTCNameStr)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxSTCNameStr"/>
      </paramlist>
    </method>
    <method name="AddText" overloaded="no">
      <autodoc>AddText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AddStyledText" overloaded="no">
      <autodoc>AddStyledText(wxMemoryBuffer data)</autodoc>
      <paramlist>
        <param name="data" type="r.q(const).wxMemoryBuffer" default=""/>
      </paramlist>
    </method>
    <method name="InsertText" overloaded="no">
      <autodoc>InsertText(int pos, String text)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ClearAll" overloaded="no">
      <autodoc>ClearAll()</autodoc>
    </method>
    <method name="ClearDocumentStyle" overloaded="no">
      <autodoc>ClearDocumentStyle()</autodoc>
    </method>
    <method name="GetLength" overloaded="no">
      <autodoc>GetLength() -&gt; int</autodoc>
    </method>
    <method name="GetCharAt" overloaded="no">
      <autodoc>GetCharAt(int pos) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCurrentPos" overloaded="no">
      <autodoc>GetCurrentPos() -&gt; int</autodoc>
    </method>
    <method name="GetAnchor" overloaded="no">
      <autodoc>GetAnchor() -&gt; int</autodoc>
    </method>
    <method name="GetStyleAt" overloaded="no">
      <autodoc>GetStyleAt(int pos) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Redo" overloaded="no">
      <autodoc>Redo()</autodoc>
    </method>
    <method name="SetUndoCollection" overloaded="no">
      <autodoc>SetUndoCollection(bool collectUndo)</autodoc>
      <paramlist>
        <param name="collectUndo" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SelectAll" overloaded="no">
      <autodoc>SelectAll()</autodoc>
    </method>
    <method name="SetSavePoint" overloaded="no">
      <autodoc>SetSavePoint()</autodoc>
    </method>
    <method name="GetStyledText" overloaded="no">
      <autodoc>GetStyledText(int startPos, int endPos) -&gt; wxMemoryBuffer</autodoc>
      <paramlist>
        <param name="startPos" type="int" default=""/>
        <param name="endPos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CanRedo" overloaded="no">
      <autodoc>CanRedo() -&gt; bool</autodoc>
    </method>
    <method name="MarkerLineFromHandle" overloaded="no">
      <autodoc>MarkerLineFromHandle(int handle) -&gt; int</autodoc>
      <paramlist>
        <param name="handle" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerDeleteHandle" overloaded="no">
      <autodoc>MarkerDeleteHandle(int handle)</autodoc>
      <paramlist>
        <param name="handle" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetUndoCollection" overloaded="no">
      <autodoc>GetUndoCollection() -&gt; bool</autodoc>
    </method>
    <method name="GetViewWhiteSpace" overloaded="no">
      <autodoc>GetViewWhiteSpace() -&gt; int</autodoc>
    </method>
    <method name="SetViewWhiteSpace" overloaded="no">
      <autodoc>SetViewWhiteSpace(int viewWS)</autodoc>
      <paramlist>
        <param name="viewWS" type="int" default=""/>
      </paramlist>
    </method>
    <method name="PositionFromPoint" overloaded="no">
      <autodoc>PositionFromPoint(Point pt) -&gt; int</autodoc>
      <paramlist>
        <param name="pt" type="wxPoint" default=""/>
      </paramlist>
    </method>
    <method name="PositionFromPointClose" overloaded="no">
      <autodoc>PositionFromPointClose(int x, int y) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GotoLine" overloaded="no">
      <autodoc>GotoLine(int line)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GotoPos" overloaded="no">
      <autodoc>GotoPos(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetAnchor" overloaded="no">
      <autodoc>SetAnchor(int posAnchor)</autodoc>
      <paramlist>
        <param name="posAnchor" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCurLine" overloaded="no">
      <autodoc>GetCurLine(int OUTPUT) -&gt; String</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="GetEndStyled" overloaded="no">
      <autodoc>GetEndStyled() -&gt; int</autodoc>
    </method>
    <method name="ConvertEOLs" overloaded="no">
      <autodoc>ConvertEOLs(int eolMode)</autodoc>
      <paramlist>
        <param name="eolMode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetEOLMode" overloaded="no">
      <autodoc>GetEOLMode() -&gt; int</autodoc>
    </method>
    <method name="SetEOLMode" overloaded="no">
      <autodoc>SetEOLMode(int eolMode)</autodoc>
      <paramlist>
        <param name="eolMode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="StartStyling" overloaded="no">
      <autodoc>StartStyling(int pos, int mask)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
        <param name="mask" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetStyling" overloaded="no">
      <autodoc>SetStyling(int length, int style)</autodoc>
      <paramlist>
        <param name="length" type="int" default=""/>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetBufferedDraw" overloaded="no">
      <autodoc>GetBufferedDraw() -&gt; bool</autodoc>
    </method>
    <method name="SetBufferedDraw" overloaded="no">
      <autodoc>SetBufferedDraw(bool buffered)</autodoc>
      <paramlist>
        <param name="buffered" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetTabWidth" overloaded="no">
      <autodoc>SetTabWidth(int tabWidth)</autodoc>
      <paramlist>
        <param name="tabWidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetTabWidth" overloaded="no">
      <autodoc>GetTabWidth() -&gt; int</autodoc>
    </method>
    <method name="SetCodePage" overloaded="no">
      <autodoc>SetCodePage(int codePage)</autodoc>
      <paramlist>
        <param name="codePage" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerDefine" overloaded="no">
      <autodoc>MarkerDefine(int markerNumber, int markerSymbol, Colour foreground=wxNullColour, 
    Colour background=wxNullColour)</autodoc>
      <paramlist>
        <param name="markerNumber" type="int" default=""/>
        <param name="markerSymbol" type="int" default=""/>
        <param name="foreground" type="r.q(const).wxColour" default="wxNullColour"/>
        <param name="background" type="r.q(const).wxColour" default="wxNullColour"/>
      </paramlist>
    </method>
    <method name="MarkerSetForeground" overloaded="no">
      <autodoc>MarkerSetForeground(int markerNumber, Colour fore)</autodoc>
      <paramlist>
        <param name="markerNumber" type="int" default=""/>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="MarkerSetBackground" overloaded="no">
      <autodoc>MarkerSetBackground(int markerNumber, Colour back)</autodoc>
      <paramlist>
        <param name="markerNumber" type="int" default=""/>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="MarkerAdd" overloaded="no">
      <autodoc>MarkerAdd(int line, int markerNumber) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
        <param name="markerNumber" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerDelete" overloaded="no">
      <autodoc>MarkerDelete(int line, int markerNumber)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
        <param name="markerNumber" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerDeleteAll" overloaded="no">
      <autodoc>MarkerDeleteAll(int markerNumber)</autodoc>
      <paramlist>
        <param name="markerNumber" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerGet" overloaded="no">
      <autodoc>MarkerGet(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerNext" overloaded="no">
      <autodoc>MarkerNext(int lineStart, int markerMask) -&gt; int</autodoc>
      <paramlist>
        <param name="lineStart" type="int" default=""/>
        <param name="markerMask" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerPrevious" overloaded="no">
      <autodoc>MarkerPrevious(int lineStart, int markerMask) -&gt; int</autodoc>
      <paramlist>
        <param name="lineStart" type="int" default=""/>
        <param name="markerMask" type="int" default=""/>
      </paramlist>
    </method>
    <method name="MarkerDefineBitmap" overloaded="no">
      <autodoc>MarkerDefineBitmap(int markerNumber, Bitmap bmp)</autodoc>
      <paramlist>
        <param name="markerNumber" type="int" default=""/>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginType" overloaded="no">
      <autodoc>SetMarginType(int margin, int marginType)</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
        <param name="marginType" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMarginType" overloaded="no">
      <autodoc>GetMarginType(int margin) -&gt; int</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginWidth" overloaded="no">
      <autodoc>SetMarginWidth(int margin, int pixelWidth)</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
        <param name="pixelWidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMarginWidth" overloaded="no">
      <autodoc>GetMarginWidth(int margin) -&gt; int</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginMask" overloaded="no">
      <autodoc>SetMarginMask(int margin, int mask)</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
        <param name="mask" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMarginMask" overloaded="no">
      <autodoc>GetMarginMask(int margin) -&gt; int</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMarginSensitive" overloaded="no">
      <autodoc>SetMarginSensitive(int margin, bool sensitive)</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
        <param name="sensitive" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetMarginSensitive" overloaded="no">
      <autodoc>GetMarginSensitive(int margin) -&gt; bool</autodoc>
      <paramlist>
        <param name="margin" type="int" default=""/>
      </paramlist>
    </method>
    <method name="StyleClearAll" overloaded="no">
      <autodoc>StyleClearAll()</autodoc>
    </method>
    <method name="StyleSetForeground" overloaded="no">
      <autodoc>StyleSetForeground(int style, Colour fore)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetBackground" overloaded="no">
      <autodoc>StyleSetBackground(int style, Colour back)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetBold" overloaded="no">
      <autodoc>StyleSetBold(int style, bool bold)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="bold" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetItalic" overloaded="no">
      <autodoc>StyleSetItalic(int style, bool italic)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="italic" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetSize" overloaded="no">
      <autodoc>StyleSetSize(int style, int sizePoints)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="sizePoints" type="int" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetFaceName" overloaded="no">
      <autodoc>StyleSetFaceName(int style, String fontName)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="fontName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetEOLFilled" overloaded="no">
      <autodoc>StyleSetEOLFilled(int style, bool filled)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="filled" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="StyleResetDefault" overloaded="no">
      <autodoc>StyleResetDefault()</autodoc>
    </method>
    <method name="StyleSetUnderline" overloaded="no">
      <autodoc>StyleSetUnderline(int style, bool underline)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="underline" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetCase" overloaded="no">
      <autodoc>StyleSetCase(int style, int caseForce)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="caseForce" type="int" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetCharacterSet" overloaded="no">
      <autodoc>StyleSetCharacterSet(int style, int characterSet)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="characterSet" type="int" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetHotSpot" overloaded="no">
      <autodoc>StyleSetHotSpot(int style, bool hotspot)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="hotspot" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetSelForeground" overloaded="no">
      <autodoc>SetSelForeground(bool useSetting, Colour fore)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetSelBackground" overloaded="no">
      <autodoc>SetSelBackground(bool useSetting, Colour back)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetCaretForeground" overloaded="no">
      <autodoc>SetCaretForeground(Colour fore)</autodoc>
      <paramlist>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="CmdKeyAssign" overloaded="no">
      <autodoc>CmdKeyAssign(int key, int modifiers, int cmd)</autodoc>
      <paramlist>
        <param name="key" type="int" default=""/>
        <param name="modifiers" type="int" default=""/>
        <param name="cmd" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CmdKeyClear" overloaded="no">
      <autodoc>CmdKeyClear(int key, int modifiers)</autodoc>
      <paramlist>
        <param name="key" type="int" default=""/>
        <param name="modifiers" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CmdKeyClearAll" overloaded="no">
      <autodoc>CmdKeyClearAll()</autodoc>
    </method>
    <method name="SetStyleBytes" overloaded="no">
      <autodoc>SetStyleBytes(int length, char styleBytes)</autodoc>
      <paramlist>
        <param name="length" type="int" default=""/>
        <param name="styleBytes" type="p.char" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetVisible" overloaded="no">
      <autodoc>StyleSetVisible(int style, bool visible)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="visible" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetCaretPeriod" overloaded="no">
      <autodoc>GetCaretPeriod() -&gt; int</autodoc>
    </method>
    <method name="SetCaretPeriod" overloaded="no">
      <autodoc>SetCaretPeriod(int periodMilliseconds)</autodoc>
      <paramlist>
        <param name="periodMilliseconds" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWordChars" overloaded="no">
      <autodoc>SetWordChars(String characters)</autodoc>
      <paramlist>
        <param name="characters" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="BeginUndoAction" overloaded="no">
      <autodoc>BeginUndoAction()</autodoc>
    </method>
    <method name="EndUndoAction" overloaded="no">
      <autodoc>EndUndoAction()</autodoc>
    </method>
    <method name="IndicatorSetStyle" overloaded="no">
      <autodoc>IndicatorSetStyle(int indic, int style)</autodoc>
      <paramlist>
        <param name="indic" type="int" default=""/>
        <param name="style" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IndicatorGetStyle" overloaded="no">
      <autodoc>IndicatorGetStyle(int indic) -&gt; int</autodoc>
      <paramlist>
        <param name="indic" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IndicatorSetForeground" overloaded="no">
      <autodoc>IndicatorSetForeground(int indic, Colour fore)</autodoc>
      <paramlist>
        <param name="indic" type="int" default=""/>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="IndicatorGetForeground" overloaded="no">
      <autodoc>IndicatorGetForeground(int indic) -&gt; Colour</autodoc>
      <paramlist>
        <param name="indic" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWhitespaceForeground" overloaded="no">
      <autodoc>SetWhitespaceForeground(bool useSetting, Colour fore)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetWhitespaceBackground" overloaded="no">
      <autodoc>SetWhitespaceBackground(bool useSetting, Colour back)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetStyleBits" overloaded="no">
      <autodoc>SetStyleBits(int bits)</autodoc>
      <paramlist>
        <param name="bits" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetStyleBits" overloaded="no">
      <autodoc>GetStyleBits() -&gt; int</autodoc>
    </method>
    <method name="SetLineState" overloaded="no">
      <autodoc>SetLineState(int line, int state)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
        <param name="state" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineState" overloaded="no">
      <autodoc>GetLineState(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMaxLineState" overloaded="no">
      <autodoc>GetMaxLineState() -&gt; int</autodoc>
    </method>
    <method name="GetCaretLineVisible" overloaded="no">
      <autodoc>GetCaretLineVisible() -&gt; bool</autodoc>
    </method>
    <method name="SetCaretLineVisible" overloaded="no">
      <autodoc>SetCaretLineVisible(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetCaretLineBack" overloaded="no">
      <autodoc>GetCaretLineBack() -&gt; Colour</autodoc>
    </method>
    <method name="SetCaretLineBack" overloaded="no">
      <autodoc>SetCaretLineBack(Colour back)</autodoc>
      <paramlist>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetChangeable" overloaded="no">
      <autodoc>StyleSetChangeable(int style, bool changeable)</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="changeable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompShow" overloaded="no">
      <autodoc>AutoCompShow(int lenEntered, String itemList)</autodoc>
      <paramlist>
        <param name="lenEntered" type="int" default=""/>
        <param name="itemList" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompCancel" overloaded="no">
      <autodoc>AutoCompCancel()</autodoc>
    </method>
    <method name="AutoCompActive" overloaded="no">
      <autodoc>AutoCompActive() -&gt; bool</autodoc>
    </method>
    <method name="AutoCompPosStart" overloaded="no">
      <autodoc>AutoCompPosStart() -&gt; int</autodoc>
    </method>
    <method name="AutoCompComplete" overloaded="no">
      <autodoc>AutoCompComplete()</autodoc>
    </method>
    <method name="AutoCompStops" overloaded="no">
      <autodoc>AutoCompStops(String characterSet)</autodoc>
      <paramlist>
        <param name="characterSet" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompSetSeparator" overloaded="no">
      <autodoc>AutoCompSetSeparator(int separatorCharacter)</autodoc>
      <paramlist>
        <param name="separatorCharacter" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompGetSeparator" overloaded="no">
      <autodoc>AutoCompGetSeparator() -&gt; int</autodoc>
    </method>
    <method name="AutoCompSelect" overloaded="no">
      <autodoc>AutoCompSelect(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompSetCancelAtStart" overloaded="no">
      <autodoc>AutoCompSetCancelAtStart(bool cancel)</autodoc>
      <paramlist>
        <param name="cancel" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompGetCancelAtStart" overloaded="no">
      <autodoc>AutoCompGetCancelAtStart() -&gt; bool</autodoc>
    </method>
    <method name="AutoCompSetFillUps" overloaded="no">
      <autodoc>AutoCompSetFillUps(String characterSet)</autodoc>
      <paramlist>
        <param name="characterSet" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompSetChooseSingle" overloaded="no">
      <autodoc>AutoCompSetChooseSingle(bool chooseSingle)</autodoc>
      <paramlist>
        <param name="chooseSingle" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompGetChooseSingle" overloaded="no">
      <autodoc>AutoCompGetChooseSingle() -&gt; bool</autodoc>
    </method>
    <method name="AutoCompSetIgnoreCase" overloaded="no">
      <autodoc>AutoCompSetIgnoreCase(bool ignoreCase)</autodoc>
      <paramlist>
        <param name="ignoreCase" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompGetIgnoreCase" overloaded="no">
      <autodoc>AutoCompGetIgnoreCase() -&gt; bool</autodoc>
    </method>
    <method name="UserListShow" overloaded="no">
      <autodoc>UserListShow(int listType, String itemList)</autodoc>
      <paramlist>
        <param name="listType" type="int" default=""/>
        <param name="itemList" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompSetAutoHide" overloaded="no">
      <autodoc>AutoCompSetAutoHide(bool autoHide)</autodoc>
      <paramlist>
        <param name="autoHide" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompGetAutoHide" overloaded="no">
      <autodoc>AutoCompGetAutoHide() -&gt; bool</autodoc>
    </method>
    <method name="AutoCompSetDropRestOfWord" overloaded="no">
      <autodoc>AutoCompSetDropRestOfWord(bool dropRestOfWord)</autodoc>
      <paramlist>
        <param name="dropRestOfWord" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="AutoCompGetDropRestOfWord" overloaded="no">
      <autodoc>AutoCompGetDropRestOfWord() -&gt; bool</autodoc>
    </method>
    <method name="RegisterImage" overloaded="no">
      <autodoc>RegisterImage(int type, Bitmap bmp)</autodoc>
      <paramlist>
        <param name="type" type="int" default=""/>
        <param name="bmp" type="r.q(const).wxBitmap" default=""/>
      </paramlist>
    </method>
    <method name="ClearRegisteredImages" overloaded="no">
      <autodoc>ClearRegisteredImages()</autodoc>
    </method>
    <method name="AutoCompGetTypeSeparator" overloaded="no">
      <autodoc>AutoCompGetTypeSeparator() -&gt; int</autodoc>
    </method>
    <method name="AutoCompSetTypeSeparator" overloaded="no">
      <autodoc>AutoCompSetTypeSeparator(int separatorCharacter)</autodoc>
      <paramlist>
        <param name="separatorCharacter" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetIndent" overloaded="no">
      <autodoc>SetIndent(int indentSize)</autodoc>
      <paramlist>
        <param name="indentSize" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetIndent" overloaded="no">
      <autodoc>GetIndent() -&gt; int</autodoc>
    </method>
    <method name="SetUseTabs" overloaded="no">
      <autodoc>SetUseTabs(bool useTabs)</autodoc>
      <paramlist>
        <param name="useTabs" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetUseTabs" overloaded="no">
      <autodoc>GetUseTabs() -&gt; bool</autodoc>
    </method>
    <method name="SetLineIndentation" overloaded="no">
      <autodoc>SetLineIndentation(int line, int indentSize)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
        <param name="indentSize" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineIndentation" overloaded="no">
      <autodoc>GetLineIndentation(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineIndentPosition" overloaded="no">
      <autodoc>GetLineIndentPosition(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetColumn" overloaded="no">
      <autodoc>GetColumn(int pos) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetUseHorizontalScrollBar" overloaded="no">
      <autodoc>SetUseHorizontalScrollBar(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetUseHorizontalScrollBar" overloaded="no">
      <autodoc>GetUseHorizontalScrollBar() -&gt; bool</autodoc>
    </method>
    <method name="SetIndentationGuides" overloaded="no">
      <autodoc>SetIndentationGuides(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetIndentationGuides" overloaded="no">
      <autodoc>GetIndentationGuides() -&gt; bool</autodoc>
    </method>
    <method name="SetHighlightGuide" overloaded="no">
      <autodoc>SetHighlightGuide(int column)</autodoc>
      <paramlist>
        <param name="column" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetHighlightGuide" overloaded="no">
      <autodoc>GetHighlightGuide() -&gt; int</autodoc>
    </method>
    <method name="GetLineEndPosition" overloaded="no">
      <autodoc>GetLineEndPosition(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCodePage" overloaded="no">
      <autodoc>GetCodePage() -&gt; int</autodoc>
    </method>
    <method name="GetCaretForeground" overloaded="no">
      <autodoc>GetCaretForeground() -&gt; Colour</autodoc>
    </method>
    <method name="GetReadOnly" overloaded="no">
      <autodoc>GetReadOnly() -&gt; bool</autodoc>
    </method>
    <method name="SetCurrentPos" overloaded="no">
      <autodoc>SetCurrentPos(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSelectionStart" overloaded="no">
      <autodoc>SetSelectionStart(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectionStart" overloaded="no">
      <autodoc>GetSelectionStart() -&gt; int</autodoc>
    </method>
    <method name="SetSelectionEnd" overloaded="no">
      <autodoc>SetSelectionEnd(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectionEnd" overloaded="no">
      <autodoc>GetSelectionEnd() -&gt; int</autodoc>
    </method>
    <method name="SetPrintMagnification" overloaded="no">
      <autodoc>SetPrintMagnification(int magnification)</autodoc>
      <paramlist>
        <param name="magnification" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintMagnification" overloaded="no">
      <autodoc>GetPrintMagnification() -&gt; int</autodoc>
    </method>
    <method name="SetPrintColourMode" overloaded="no">
      <autodoc>SetPrintColourMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintColourMode" overloaded="no">
      <autodoc>GetPrintColourMode() -&gt; int</autodoc>
    </method>
    <method name="FindText" overloaded="no">
      <autodoc>FindText(int minPos, int maxPos, String text, int flags=0) -&gt; int</autodoc>
      <paramlist>
        <param name="minPos" type="int" default=""/>
        <param name="maxPos" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="flags" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="FormatRange" overloaded="no">
      <autodoc>FormatRange(bool doDraw, int startPos, int endPos, DC draw, DC target, 
    Rect renderRect, Rect pageRect) -&gt; int</autodoc>
      <paramlist>
        <param name="doDraw" type="bool" default=""/>
        <param name="startPos" type="int" default=""/>
        <param name="endPos" type="int" default=""/>
        <param name="draw" type="p.wxDC" default=""/>
        <param name="target" type="p.wxDC" default=""/>
        <param name="renderRect" type="wxRect" default=""/>
        <param name="pageRect" type="wxRect" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstVisibleLine" overloaded="no">
      <autodoc>GetFirstVisibleLine() -&gt; int</autodoc>
    </method>
    <method name="GetLine" overloaded="no">
      <autodoc>GetLine(int line) -&gt; String</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineCount" overloaded="no">
      <autodoc>GetLineCount() -&gt; int</autodoc>
    </method>
    <method name="SetMarginLeft" overloaded="no">
      <autodoc>SetMarginLeft(int pixelWidth)</autodoc>
      <paramlist>
        <param name="pixelWidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMarginLeft" overloaded="no">
      <autodoc>GetMarginLeft() -&gt; int</autodoc>
    </method>
    <method name="SetMarginRight" overloaded="no">
      <autodoc>SetMarginRight(int pixelWidth)</autodoc>
      <paramlist>
        <param name="pixelWidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMarginRight" overloaded="no">
      <autodoc>GetMarginRight() -&gt; int</autodoc>
    </method>
    <method name="GetModify" overloaded="no">
      <autodoc>GetModify() -&gt; bool</autodoc>
    </method>
    <method name="SetSelection" overloaded="no">
      <autodoc>SetSelection(int start, int end)</autodoc>
      <paramlist>
        <param name="start" type="int" default=""/>
        <param name="end" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectedText" overloaded="no">
      <autodoc>GetSelectedText() -&gt; String</autodoc>
    </method>
    <method name="GetTextRange" overloaded="no">
      <autodoc>GetTextRange(int startPos, int endPos) -&gt; String</autodoc>
      <paramlist>
        <param name="startPos" type="int" default=""/>
        <param name="endPos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="HideSelection" overloaded="no">
      <autodoc>HideSelection(bool normal)</autodoc>
      <paramlist>
        <param name="normal" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="LineFromPosition" overloaded="no">
      <autodoc>LineFromPosition(int pos) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="PositionFromLine" overloaded="no">
      <autodoc>PositionFromLine(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="LineScroll" overloaded="no">
      <autodoc>LineScroll(int columns, int lines)</autodoc>
      <paramlist>
        <param name="columns" type="int" default=""/>
        <param name="lines" type="int" default=""/>
      </paramlist>
    </method>
    <method name="EnsureCaretVisible" overloaded="no">
      <autodoc>EnsureCaretVisible()</autodoc>
    </method>
    <method name="ReplaceSelection" overloaded="no">
      <autodoc>ReplaceSelection(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetReadOnly" overloaded="no">
      <autodoc>SetReadOnly(bool readOnly)</autodoc>
      <paramlist>
        <param name="readOnly" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="CanPaste" overloaded="no">
      <autodoc>CanPaste() -&gt; bool</autodoc>
    </method>
    <method name="CanUndo" overloaded="no">
      <autodoc>CanUndo() -&gt; bool</autodoc>
    </method>
    <method name="EmptyUndoBuffer" overloaded="no">
      <autodoc>EmptyUndoBuffer()</autodoc>
    </method>
    <method name="Undo" overloaded="no">
      <autodoc>Undo()</autodoc>
    </method>
    <method name="Cut" overloaded="no">
      <autodoc>Cut()</autodoc>
    </method>
    <method name="Copy" overloaded="no">
      <autodoc>Copy()</autodoc>
    </method>
    <method name="Paste" overloaded="no">
      <autodoc>Paste()</autodoc>
    </method>
    <method name="Clear" overloaded="no">
      <autodoc>Clear()</autodoc>
    </method>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="GetTextLength" overloaded="no">
      <autodoc>GetTextLength() -&gt; int</autodoc>
    </method>
    <method name="SetOvertype" overloaded="no">
      <autodoc>SetOvertype(bool overtype)</autodoc>
      <paramlist>
        <param name="overtype" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetOvertype" overloaded="no">
      <autodoc>GetOvertype() -&gt; bool</autodoc>
    </method>
    <method name="SetCaretWidth" overloaded="no">
      <autodoc>SetCaretWidth(int pixelWidth)</autodoc>
      <paramlist>
        <param name="pixelWidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetCaretWidth" overloaded="no">
      <autodoc>GetCaretWidth() -&gt; int</autodoc>
    </method>
    <method name="SetTargetStart" overloaded="no">
      <autodoc>SetTargetStart(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetTargetStart" overloaded="no">
      <autodoc>GetTargetStart() -&gt; int</autodoc>
    </method>
    <method name="SetTargetEnd" overloaded="no">
      <autodoc>SetTargetEnd(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetTargetEnd" overloaded="no">
      <autodoc>GetTargetEnd() -&gt; int</autodoc>
    </method>
    <method name="ReplaceTarget" overloaded="no">
      <autodoc>ReplaceTarget(String text) -&gt; int</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="ReplaceTargetRE" overloaded="no">
      <autodoc>ReplaceTargetRE(String text) -&gt; int</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SearchInTarget" overloaded="no">
      <autodoc>SearchInTarget(String text) -&gt; int</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetSearchFlags" overloaded="no">
      <autodoc>SetSearchFlags(int flags)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSearchFlags" overloaded="no">
      <autodoc>GetSearchFlags() -&gt; int</autodoc>
    </method>
    <method name="CallTipShow" overloaded="no">
      <autodoc>CallTipShow(int pos, String definition)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
        <param name="definition" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="CallTipCancel" overloaded="no">
      <autodoc>CallTipCancel()</autodoc>
    </method>
    <method name="CallTipActive" overloaded="no">
      <autodoc>CallTipActive() -&gt; bool</autodoc>
    </method>
    <method name="CallTipPosAtStart" overloaded="no">
      <autodoc>CallTipPosAtStart() -&gt; int</autodoc>
    </method>
    <method name="CallTipSetHighlight" overloaded="no">
      <autodoc>CallTipSetHighlight(int start, int end)</autodoc>
      <paramlist>
        <param name="start" type="int" default=""/>
        <param name="end" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CallTipSetBackground" overloaded="no">
      <autodoc>CallTipSetBackground(Colour back)</autodoc>
      <paramlist>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="CallTipSetForeground" overloaded="no">
      <autodoc>CallTipSetForeground(Colour fore)</autodoc>
      <paramlist>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="CallTipSetForegroundHighlight" overloaded="no">
      <autodoc>CallTipSetForegroundHighlight(Colour fore)</autodoc>
      <paramlist>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="VisibleFromDocLine" overloaded="no">
      <autodoc>VisibleFromDocLine(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DocLineFromVisible" overloaded="no">
      <autodoc>DocLineFromVisible(int lineDisplay) -&gt; int</autodoc>
      <paramlist>
        <param name="lineDisplay" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFoldLevel" overloaded="no">
      <autodoc>SetFoldLevel(int line, int level)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
        <param name="level" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFoldLevel" overloaded="no">
      <autodoc>GetFoldLevel(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLastChild" overloaded="no">
      <autodoc>GetLastChild(int line, int level) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
        <param name="level" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetFoldParent" overloaded="no">
      <autodoc>GetFoldParent(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ShowLines" overloaded="no">
      <autodoc>ShowLines(int lineStart, int lineEnd)</autodoc>
      <paramlist>
        <param name="lineStart" type="int" default=""/>
        <param name="lineEnd" type="int" default=""/>
      </paramlist>
    </method>
    <method name="HideLines" overloaded="no">
      <autodoc>HideLines(int lineStart, int lineEnd)</autodoc>
      <paramlist>
        <param name="lineStart" type="int" default=""/>
        <param name="lineEnd" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineVisible" overloaded="no">
      <autodoc>GetLineVisible(int line) -&gt; bool</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFoldExpanded" overloaded="no">
      <autodoc>SetFoldExpanded(int line, bool expanded)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
        <param name="expanded" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetFoldExpanded" overloaded="no">
      <autodoc>GetFoldExpanded(int line) -&gt; bool</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ToggleFold" overloaded="no">
      <autodoc>ToggleFold(int line)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="EnsureVisible" overloaded="no">
      <autodoc>EnsureVisible(int line)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFoldFlags" overloaded="no">
      <autodoc>SetFoldFlags(int flags)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
      </paramlist>
    </method>
    <method name="EnsureVisibleEnforcePolicy" overloaded="no">
      <autodoc>EnsureVisibleEnforcePolicy(int line)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetTabIndents" overloaded="no">
      <autodoc>SetTabIndents(bool tabIndents)</autodoc>
      <paramlist>
        <param name="tabIndents" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetTabIndents" overloaded="no">
      <autodoc>GetTabIndents() -&gt; bool</autodoc>
    </method>
    <method name="SetBackSpaceUnIndents" overloaded="no">
      <autodoc>SetBackSpaceUnIndents(bool bsUnIndents)</autodoc>
      <paramlist>
        <param name="bsUnIndents" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetBackSpaceUnIndents" overloaded="no">
      <autodoc>GetBackSpaceUnIndents() -&gt; bool</autodoc>
    </method>
    <method name="SetMouseDwellTime" overloaded="no">
      <autodoc>SetMouseDwellTime(int periodMilliseconds)</autodoc>
      <paramlist>
        <param name="periodMilliseconds" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetMouseDwellTime" overloaded="no">
      <autodoc>GetMouseDwellTime() -&gt; int</autodoc>
    </method>
    <method name="WordStartPosition" overloaded="no">
      <autodoc>WordStartPosition(int pos, bool onlyWordCharacters) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
        <param name="onlyWordCharacters" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="WordEndPosition" overloaded="no">
      <autodoc>WordEndPosition(int pos, bool onlyWordCharacters) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
        <param name="onlyWordCharacters" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetWrapMode" overloaded="no">
      <autodoc>SetWrapMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetWrapMode" overloaded="no">
      <autodoc>GetWrapMode() -&gt; int</autodoc>
    </method>
    <method name="SetLayoutCache" overloaded="no">
      <autodoc>SetLayoutCache(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLayoutCache" overloaded="no">
      <autodoc>GetLayoutCache() -&gt; int</autodoc>
    </method>
    <method name="SetScrollWidth" overloaded="no">
      <autodoc>SetScrollWidth(int pixelWidth)</autodoc>
      <paramlist>
        <param name="pixelWidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetScrollWidth" overloaded="no">
      <autodoc>GetScrollWidth() -&gt; int</autodoc>
    </method>
    <method name="TextWidth" overloaded="no">
      <autodoc>TextWidth(int style, String text) -&gt; int</autodoc>
      <paramlist>
        <param name="style" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetEndAtLastLine" overloaded="no">
      <autodoc>SetEndAtLastLine(bool endAtLastLine)</autodoc>
      <paramlist>
        <param name="endAtLastLine" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetEndAtLastLine" overloaded="no">
      <autodoc>GetEndAtLastLine() -&gt; int</autodoc>
    </method>
    <method name="TextHeight" overloaded="no">
      <autodoc>TextHeight(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetUseVerticalScrollBar" overloaded="no">
      <autodoc>SetUseVerticalScrollBar(bool show)</autodoc>
      <paramlist>
        <param name="show" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetUseVerticalScrollBar" overloaded="no">
      <autodoc>GetUseVerticalScrollBar() -&gt; bool</autodoc>
    </method>
    <method name="AppendText" overloaded="no">
      <autodoc>AppendText(int length, String text)</autodoc>
      <paramlist>
        <param name="length" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetTwoPhaseDraw" overloaded="no">
      <autodoc>GetTwoPhaseDraw() -&gt; bool</autodoc>
    </method>
    <method name="SetTwoPhaseDraw" overloaded="no">
      <autodoc>SetTwoPhaseDraw(bool twoPhase)</autodoc>
      <paramlist>
        <param name="twoPhase" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="TargetFromSelection" overloaded="no">
      <autodoc>TargetFromSelection()</autodoc>
    </method>
    <method name="LinesJoin" overloaded="no">
      <autodoc>LinesJoin()</autodoc>
    </method>
    <method name="LinesSplit" overloaded="no">
      <autodoc>LinesSplit(int pixelWidth)</autodoc>
      <paramlist>
        <param name="pixelWidth" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFoldMarginColour" overloaded="no">
      <autodoc>SetFoldMarginColour(bool useSetting, Colour back)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetFoldMarginHiColour" overloaded="no">
      <autodoc>SetFoldMarginHiColour(bool useSetting, Colour fore)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="LineDuplicate" overloaded="no">
      <autodoc>LineDuplicate()</autodoc>
    </method>
    <method name="HomeDisplay" overloaded="no">
      <autodoc>HomeDisplay()</autodoc>
    </method>
    <method name="HomeDisplayExtend" overloaded="no">
      <autodoc>HomeDisplayExtend()</autodoc>
    </method>
    <method name="LineEndDisplay" overloaded="no">
      <autodoc>LineEndDisplay()</autodoc>
    </method>
    <method name="LineEndDisplayExtend" overloaded="no">
      <autodoc>LineEndDisplayExtend()</autodoc>
    </method>
    <method name="LineCopy" overloaded="no">
      <autodoc>LineCopy()</autodoc>
    </method>
    <method name="MoveCaretInsideView" overloaded="no">
      <autodoc>MoveCaretInsideView()</autodoc>
    </method>
    <method name="LineLength" overloaded="no">
      <autodoc>LineLength(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="BraceHighlight" overloaded="no">
      <autodoc>BraceHighlight(int pos1, int pos2)</autodoc>
      <paramlist>
        <param name="pos1" type="int" default=""/>
        <param name="pos2" type="int" default=""/>
      </paramlist>
    </method>
    <method name="BraceBadLight" overloaded="no">
      <autodoc>BraceBadLight(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="BraceMatch" overloaded="no">
      <autodoc>BraceMatch(int pos) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetViewEOL" overloaded="no">
      <autodoc>GetViewEOL() -&gt; bool</autodoc>
    </method>
    <method name="SetViewEOL" overloaded="no">
      <autodoc>SetViewEOL(bool visible)</autodoc>
      <paramlist>
        <param name="visible" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetDocPointer" overloaded="no">
      <autodoc>GetDocPointer() -&gt; void</autodoc>
    </method>
    <method name="SetDocPointer" overloaded="no">
      <autodoc>SetDocPointer(void docPointer)</autodoc>
      <paramlist>
        <param name="docPointer" type="p.void" default=""/>
      </paramlist>
    </method>
    <method name="SetModEventMask" overloaded="no">
      <autodoc>SetModEventMask(int mask)</autodoc>
      <paramlist>
        <param name="mask" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetEdgeColumn" overloaded="no">
      <autodoc>GetEdgeColumn() -&gt; int</autodoc>
    </method>
    <method name="SetEdgeColumn" overloaded="no">
      <autodoc>SetEdgeColumn(int column)</autodoc>
      <paramlist>
        <param name="column" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetEdgeMode" overloaded="no">
      <autodoc>GetEdgeMode() -&gt; int</autodoc>
    </method>
    <method name="SetEdgeMode" overloaded="no">
      <autodoc>SetEdgeMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetEdgeColour" overloaded="no">
      <autodoc>GetEdgeColour() -&gt; Colour</autodoc>
    </method>
    <method name="SetEdgeColour" overloaded="no">
      <autodoc>SetEdgeColour(Colour edgeColour)</autodoc>
      <paramlist>
        <param name="edgeColour" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SearchAnchor" overloaded="no">
      <autodoc>SearchAnchor()</autodoc>
    </method>
    <method name="SearchNext" overloaded="no">
      <autodoc>SearchNext(int flags, String text) -&gt; int</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SearchPrev" overloaded="no">
      <autodoc>SearchPrev(int flags, String text) -&gt; int</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LinesOnScreen" overloaded="no">
      <autodoc>LinesOnScreen() -&gt; int</autodoc>
    </method>
    <method name="UsePopUp" overloaded="no">
      <autodoc>UsePopUp(bool allowPopUp)</autodoc>
      <paramlist>
        <param name="allowPopUp" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SelectionIsRectangle" overloaded="no">
      <autodoc>SelectionIsRectangle() -&gt; bool</autodoc>
    </method>
    <method name="SetZoom" overloaded="no">
      <autodoc>SetZoom(int zoom)</autodoc>
      <paramlist>
        <param name="zoom" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetZoom" overloaded="no">
      <autodoc>GetZoom() -&gt; int</autodoc>
    </method>
    <method name="CreateDocument" overloaded="no">
      <autodoc>CreateDocument() -&gt; void</autodoc>
    </method>
    <method name="AddRefDocument" overloaded="no">
      <autodoc>AddRefDocument(void docPointer)</autodoc>
      <paramlist>
        <param name="docPointer" type="p.void" default=""/>
      </paramlist>
    </method>
    <method name="ReleaseDocument" overloaded="no">
      <autodoc>ReleaseDocument(void docPointer)</autodoc>
      <paramlist>
        <param name="docPointer" type="p.void" default=""/>
      </paramlist>
    </method>
    <method name="GetModEventMask" overloaded="no">
      <autodoc>GetModEventMask() -&gt; int</autodoc>
    </method>
    <method name="SetSTCFocus" overloaded="no">
      <autodoc>SetSTCFocus(bool focus)</autodoc>
      <paramlist>
        <param name="focus" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetSTCFocus" overloaded="no">
      <autodoc>GetSTCFocus() -&gt; bool</autodoc>
    </method>
    <method name="SetStatus" overloaded="no">
      <autodoc>SetStatus(int statusCode)</autodoc>
      <paramlist>
        <param name="statusCode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetStatus" overloaded="no">
      <autodoc>GetStatus() -&gt; int</autodoc>
    </method>
    <method name="SetMouseDownCaptures" overloaded="no">
      <autodoc>SetMouseDownCaptures(bool captures)</autodoc>
      <paramlist>
        <param name="captures" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetMouseDownCaptures" overloaded="no">
      <autodoc>GetMouseDownCaptures() -&gt; bool</autodoc>
    </method>
    <method name="SetSTCCursor" overloaded="no">
      <autodoc>SetSTCCursor(int cursorType)</autodoc>
      <paramlist>
        <param name="cursorType" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSTCCursor" overloaded="no">
      <autodoc>GetSTCCursor() -&gt; int</autodoc>
    </method>
    <method name="SetControlCharSymbol" overloaded="no">
      <autodoc>SetControlCharSymbol(int symbol)</autodoc>
      <paramlist>
        <param name="symbol" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetControlCharSymbol" overloaded="no">
      <autodoc>GetControlCharSymbol() -&gt; int</autodoc>
    </method>
    <method name="WordPartLeft" overloaded="no">
      <autodoc>WordPartLeft()</autodoc>
    </method>
    <method name="WordPartLeftExtend" overloaded="no">
      <autodoc>WordPartLeftExtend()</autodoc>
    </method>
    <method name="WordPartRight" overloaded="no">
      <autodoc>WordPartRight()</autodoc>
    </method>
    <method name="WordPartRightExtend" overloaded="no">
      <autodoc>WordPartRightExtend()</autodoc>
    </method>
    <method name="SetVisiblePolicy" overloaded="no">
      <autodoc>SetVisiblePolicy(int visiblePolicy, int visibleSlop)</autodoc>
      <paramlist>
        <param name="visiblePolicy" type="int" default=""/>
        <param name="visibleSlop" type="int" default=""/>
      </paramlist>
    </method>
    <method name="DelLineLeft" overloaded="no">
      <autodoc>DelLineLeft()</autodoc>
    </method>
    <method name="DelLineRight" overloaded="no">
      <autodoc>DelLineRight()</autodoc>
    </method>
    <method name="SetXOffset" overloaded="no">
      <autodoc>SetXOffset(int newOffset)</autodoc>
      <paramlist>
        <param name="newOffset" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetXOffset" overloaded="no">
      <autodoc>GetXOffset() -&gt; int</autodoc>
    </method>
    <method name="ChooseCaretX" overloaded="no">
      <autodoc>ChooseCaretX()</autodoc>
    </method>
    <method name="SetXCaretPolicy" overloaded="no">
      <autodoc>SetXCaretPolicy(int caretPolicy, int caretSlop)</autodoc>
      <paramlist>
        <param name="caretPolicy" type="int" default=""/>
        <param name="caretSlop" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetYCaretPolicy" overloaded="no">
      <autodoc>SetYCaretPolicy(int caretPolicy, int caretSlop)</autodoc>
      <paramlist>
        <param name="caretPolicy" type="int" default=""/>
        <param name="caretSlop" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetPrintWrapMode" overloaded="no">
      <autodoc>SetPrintWrapMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetPrintWrapMode" overloaded="no">
      <autodoc>GetPrintWrapMode() -&gt; int</autodoc>
    </method>
    <method name="SetHotspotActiveForeground" overloaded="no">
      <autodoc>SetHotspotActiveForeground(bool useSetting, Colour fore)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="fore" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetHotspotActiveBackground" overloaded="no">
      <autodoc>SetHotspotActiveBackground(bool useSetting, Colour back)</autodoc>
      <paramlist>
        <param name="useSetting" type="bool" default=""/>
        <param name="back" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetHotspotActiveUnderline" overloaded="no">
      <autodoc>SetHotspotActiveUnderline(bool underline)</autodoc>
      <paramlist>
        <param name="underline" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetHotspotSingleLine" overloaded="no">
      <autodoc>SetHotspotSingleLine(bool singleLine)</autodoc>
      <paramlist>
        <param name="singleLine" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="PositionBefore" overloaded="no">
      <autodoc>PositionBefore(int pos) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="PositionAfter" overloaded="no">
      <autodoc>PositionAfter(int pos) -&gt; int</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CopyRange" overloaded="no">
      <autodoc>CopyRange(int start, int end)</autodoc>
      <paramlist>
        <param name="start" type="int" default=""/>
        <param name="end" type="int" default=""/>
      </paramlist>
    </method>
    <method name="CopyText" overloaded="no">
      <autodoc>CopyText(int length, String text)</autodoc>
      <paramlist>
        <param name="length" type="int" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetSelectionMode" overloaded="no">
      <autodoc>SetSelectionMode(int mode)</autodoc>
      <paramlist>
        <param name="mode" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelectionMode" overloaded="no">
      <autodoc>GetSelectionMode() -&gt; int</autodoc>
    </method>
    <method name="GetLineSelStartPosition" overloaded="no">
      <autodoc>GetLineSelStartPosition(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineSelEndPosition" overloaded="no">
      <autodoc>GetLineSelEndPosition(int line) -&gt; int</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWhitespaceChars" overloaded="no">
      <autodoc>SetWhitespaceChars(String characters)</autodoc>
      <paramlist>
        <param name="characters" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetCharsDefault" overloaded="no">
      <autodoc>SetCharsDefault()</autodoc>
    </method>
    <method name="AutoCompGetCurrent" overloaded="no">
      <autodoc>AutoCompGetCurrent() -&gt; int</autodoc>
    </method>
    <method name="StartRecord" overloaded="no">
      <autodoc>StartRecord()</autodoc>
    </method>
    <method name="StopRecord" overloaded="no">
      <autodoc>StopRecord()</autodoc>
    </method>
    <method name="SetLexer" overloaded="no">
      <autodoc>SetLexer(int lexer)</autodoc>
      <paramlist>
        <param name="lexer" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetLexer" overloaded="no">
      <autodoc>GetLexer() -&gt; int</autodoc>
    </method>
    <method name="Colourise" overloaded="no">
      <autodoc>Colourise(int start, int end)</autodoc>
      <paramlist>
        <param name="start" type="int" default=""/>
        <param name="end" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetProperty" overloaded="no">
      <autodoc>SetProperty(String key, String value)</autodoc>
      <paramlist>
        <param name="key" type="r.q(const).wxString" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetKeyWords" overloaded="no">
      <autodoc>SetKeyWords(int keywordSet, String keyWords)</autodoc>
      <paramlist>
        <param name="keywordSet" type="int" default=""/>
        <param name="keyWords" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetLexerLanguage" overloaded="no">
      <autodoc>SetLexerLanguage(String language)</autodoc>
      <paramlist>
        <param name="language" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetCurrentLine" overloaded="no">
      <autodoc>GetCurrentLine() -&gt; int</autodoc>
    </method>
    <method name="StyleSetSpec" overloaded="no">
      <autodoc>StyleSetSpec(int styleNum, String spec)</autodoc>
      <paramlist>
        <param name="styleNum" type="int" default=""/>
        <param name="spec" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetFont" overloaded="no">
      <autodoc>StyleSetFont(int styleNum, Font font)</autodoc>
      <paramlist>
        <param name="styleNum" type="int" default=""/>
        <param name="font" type="r.wxFont" default=""/>
      </paramlist>
    </method>
    <method name="StyleSetFontAttr" overloaded="no">
      <autodoc>StyleSetFontAttr(int styleNum, int size, String faceName, bool bold, 
    bool italic, bool underline)</autodoc>
      <paramlist>
        <param name="styleNum" type="int" default=""/>
        <param name="size" type="int" default=""/>
        <param name="faceName" type="r.q(const).wxString" default=""/>
        <param name="bold" type="bool" default=""/>
        <param name="italic" type="bool" default=""/>
        <param name="underline" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="CmdKeyExecute" overloaded="no">
      <autodoc>CmdKeyExecute(int cmd)</autodoc>
      <paramlist>
        <param name="cmd" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMargins" overloaded="no">
      <autodoc>SetMargins(int left, int right)</autodoc>
      <paramlist>
        <param name="left" type="int" default=""/>
        <param name="right" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection(int OUTPUT, int OUTPUT)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="p.int" default=""/>
        <param name="OUTPUT" type="p.int" default=""/>
      </paramlist>
    </method>
    <method name="PointFromPosition" overloaded="no">
      <autodoc>PointFromPosition(int pos) -&gt; Point</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ScrollToLine" overloaded="no">
      <autodoc>ScrollToLine(int line)</autodoc>
      <paramlist>
        <param name="line" type="int" default=""/>
      </paramlist>
    </method>
    <method name="ScrollToColumn" overloaded="no">
      <autodoc>ScrollToColumn(int column)</autodoc>
      <paramlist>
        <param name="column" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SendMsg" overloaded="no">
      <autodoc>SendMsg(int msg, long wp=0, long lp=0) -&gt; long</autodoc>
      <paramlist>
        <param name="msg" type="int" default=""/>
        <param name="wp" type="long" default="0"/>
        <param name="lp" type="long" default="0"/>
      </paramlist>
    </method>
    <method name="SetVScrollBar" overloaded="no">
      <autodoc>SetVScrollBar(wxScrollBar bar)</autodoc>
      <paramlist>
        <param name="bar" type="p.wxScrollBar" default=""/>
      </paramlist>
    </method>
    <method name="SetHScrollBar" overloaded="no">
      <autodoc>SetHScrollBar(wxScrollBar bar)</autodoc>
      <paramlist>
        <param name="bar" type="p.wxScrollBar" default=""/>
      </paramlist>
    </method>
    <method name="GetLastKeydownProcessed" overloaded="no">
      <autodoc>GetLastKeydownProcessed() -&gt; bool</autodoc>
    </method>
    <method name="SetLastKeydownProcessed" overloaded="no">
      <autodoc>SetLastKeydownProcessed(bool val)</autodoc>
      <paramlist>
        <param name="val" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SaveFile" overloaded="no">
      <autodoc>SaveFile(String filename) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadFile" overloaded="no">
      <autodoc>LoadFile(String filename) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DoDragOver" overloaded="no">
      <autodoc>DoDragOver(int x, int y, int def) -&gt; int</autodoc>
      <paramlist>
        <param name="x" type="int" default=""/>
        <param name="y" type="int" default=""/>
        <param name="def" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="DoDropText" overloaded="no">
      <autodoc>DoDropText(long x, long y, String data) -&gt; bool</autodoc>
      <paramlist>
        <param name="x" type="long" default=""/>
        <param name="y" type="long" default=""/>
        <param name="data" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetUseAntiAliasing" overloaded="no">
      <autodoc>SetUseAntiAliasing(bool useAA)</autodoc>
      <paramlist>
        <param name="useAA" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="GetUseAntiAliasing" overloaded="no">
      <autodoc>GetUseAntiAliasing() -&gt; bool</autodoc>
    </method>
  </class>
  <class name="StyledTextEvent" oldname="wxStyledTextEvent" module="stc">
    <baseclass name="wxCommandEvent"/>
    <constructor name="StyledTextEvent" overloaded="no">
      <autodoc>__init__(wxEventType commandType=0, int id=0) -&gt; StyledTextEvent</autodoc>
      <paramlist>
        <param name="commandType" type="wxEventType" default="0"/>
        <param name="id" type="int" default="0"/>
      </paramlist>
    </constructor>
    <destructor name="~wxStyledTextEvent">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="SetPosition" overloaded="no">
      <autodoc>SetPosition(int pos)</autodoc>
      <paramlist>
        <param name="pos" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetKey" overloaded="no">
      <autodoc>SetKey(int k)</autodoc>
      <paramlist>
        <param name="k" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetModifiers" overloaded="no">
      <autodoc>SetModifiers(int m)</autodoc>
      <paramlist>
        <param name="m" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetModificationType" overloaded="no">
      <autodoc>SetModificationType(int t)</autodoc>
      <paramlist>
        <param name="t" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String t)</autodoc>
      <paramlist>
        <param name="t" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetLength" overloaded="no">
      <autodoc>SetLength(int len)</autodoc>
      <paramlist>
        <param name="len" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLinesAdded" overloaded="no">
      <autodoc>SetLinesAdded(int num)</autodoc>
      <paramlist>
        <param name="num" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLine" overloaded="no">
      <autodoc>SetLine(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFoldLevelNow" overloaded="no">
      <autodoc>SetFoldLevelNow(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetFoldLevelPrev" overloaded="no">
      <autodoc>SetFoldLevelPrev(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMargin" overloaded="no">
      <autodoc>SetMargin(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetMessage" overloaded="no">
      <autodoc>SetMessage(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWParam" overloaded="no">
      <autodoc>SetWParam(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetLParam" overloaded="no">
      <autodoc>SetLParam(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetListType" overloaded="no">
      <autodoc>SetListType(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetX" overloaded="no">
      <autodoc>SetX(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetY" overloaded="no">
      <autodoc>SetY(int val)</autodoc>
      <paramlist>
        <param name="val" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetDragText" overloaded="no">
      <autodoc>SetDragText(String val)</autodoc>
      <paramlist>
        <param name="val" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetDragAllowMove" overloaded="no">
      <autodoc>SetDragAllowMove(bool val)</autodoc>
      <paramlist>
        <param name="val" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="SetDragResult" overloaded="no">
      <autodoc>SetDragResult(int val)</autodoc>
      <paramlist>
        <param name="val" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition() -&gt; int</autodoc>
    </method>
    <method name="GetKey" overloaded="no">
      <autodoc>GetKey() -&gt; int</autodoc>
    </method>
    <method name="GetModifiers" overloaded="no">
      <autodoc>GetModifiers() -&gt; int</autodoc>
    </method>
    <method name="GetModificationType" overloaded="no">
      <autodoc>GetModificationType() -&gt; int</autodoc>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="GetLength" overloaded="no">
      <autodoc>GetLength() -&gt; int</autodoc>
    </method>
    <method name="GetLinesAdded" overloaded="no">
      <autodoc>GetLinesAdded() -&gt; int</autodoc>
    </method>
    <method name="GetLine" overloaded="no">
      <autodoc>GetLine() -&gt; int</autodoc>
    </method>
    <method name="GetFoldLevelNow" overloaded="no">
      <autodoc>GetFoldLevelNow() -&gt; int</autodoc>
    </method>
    <method name="GetFoldLevelPrev" overloaded="no">
      <autodoc>GetFoldLevelPrev() -&gt; int</autodoc>
    </method>
    <method name="GetMargin" overloaded="no">
      <autodoc>GetMargin() -&gt; int</autodoc>
    </method>
    <method name="GetMessage" overloaded="no">
      <autodoc>GetMessage() -&gt; int</autodoc>
    </method>
    <method name="GetWParam" overloaded="no">
      <autodoc>GetWParam() -&gt; int</autodoc>
    </method>
    <method name="GetLParam" overloaded="no">
      <autodoc>GetLParam() -&gt; int</autodoc>
    </method>
    <method name="GetListType" overloaded="no">
      <autodoc>GetListType() -&gt; int</autodoc>
    </method>
    <method name="GetX" overloaded="no">
      <autodoc>GetX() -&gt; int</autodoc>
    </method>
    <method name="GetY" overloaded="no">
      <autodoc>GetY() -&gt; int</autodoc>
    </method>
    <method name="GetDragText" overloaded="no">
      <autodoc>GetDragText() -&gt; String</autodoc>
    </method>
    <method name="GetDragAllowMove" overloaded="no">
      <autodoc>GetDragAllowMove() -&gt; bool</autodoc>
    </method>
    <method name="GetDragResult" overloaded="no">
      <autodoc>GetDragResult() -&gt; int</autodoc>
    </method>
    <method name="GetShift" overloaded="no">
      <autodoc>GetShift() -&gt; bool</autodoc>
    </method>
    <method name="GetControl" overloaded="no">
      <autodoc>GetControl() -&gt; bool</autodoc>
    </method>
    <method name="GetAlt" overloaded="no">
      <autodoc>GetAlt() -&gt; bool</autodoc>
    </method>
    <method name="Clone" overloaded="no">
      <autodoc>Clone() -&gt; Event</autodoc>
    </method>
  </class>
  <pythoncode>
EVT_STC_CHANGE = wx.PyEventBinder( wxEVT_STC_CHANGE, 1 )
EVT_STC_STYLENEEDED = wx.PyEventBinder( wxEVT_STC_STYLENEEDED, 1 )
EVT_STC_CHARADDED = wx.PyEventBinder( wxEVT_STC_CHARADDED, 1 )
EVT_STC_SAVEPOINTREACHED = wx.PyEventBinder( wxEVT_STC_SAVEPOINTREACHED, 1 )
EVT_STC_SAVEPOINTLEFT = wx.PyEventBinder( wxEVT_STC_SAVEPOINTLEFT, 1 )
EVT_STC_ROMODIFYATTEMPT = wx.PyEventBinder( wxEVT_STC_ROMODIFYATTEMPT, 1 )
EVT_STC_KEY = wx.PyEventBinder( wxEVT_STC_KEY, 1 )
EVT_STC_DOUBLECLICK = wx.PyEventBinder( wxEVT_STC_DOUBLECLICK, 1 )
EVT_STC_UPDATEUI = wx.PyEventBinder( wxEVT_STC_UPDATEUI, 1 )
EVT_STC_MODIFIED = wx.PyEventBinder( wxEVT_STC_MODIFIED, 1 )
EVT_STC_MACRORECORD = wx.PyEventBinder( wxEVT_STC_MACRORECORD, 1 )
EVT_STC_MARGINCLICK = wx.PyEventBinder( wxEVT_STC_MARGINCLICK, 1 )
EVT_STC_NEEDSHOWN = wx.PyEventBinder( wxEVT_STC_NEEDSHOWN, 1 )
EVT_STC_POSCHANGED = wx.PyEventBinder( wxEVT_STC_POSCHANGED, 1 )
EVT_STC_PAINTED = wx.PyEventBinder( wxEVT_STC_PAINTED, 1 )
EVT_STC_USERLISTSELECTION = wx.PyEventBinder( wxEVT_STC_USERLISTSELECTION, 1 )
EVT_STC_URIDROPPED = wx.PyEventBinder( wxEVT_STC_URIDROPPED, 1 )
EVT_STC_DWELLSTART = wx.PyEventBinder( wxEVT_STC_DWELLSTART, 1 )
EVT_STC_DWELLEND = wx.PyEventBinder( wxEVT_STC_DWELLEND, 1 )
EVT_STC_START_DRAG = wx.PyEventBinder( wxEVT_STC_START_DRAG, 1 )
EVT_STC_DRAG_OVER = wx.PyEventBinder( wxEVT_STC_DRAG_OVER, 1 )
EVT_STC_DO_DROP = wx.PyEventBinder( wxEVT_STC_DO_DROP, 1 )
EVT_STC_ZOOM = wx.PyEventBinder( wxEVT_STC_ZOOM, 1 )
EVT_STC_HOTSPOT_CLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_CLICK, 1 )
EVT_STC_HOTSPOT_DCLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_DCLICK, 1 )
EVT_STC_CALLTIP_CLICK = wx.PyEventBinder( wxEVT_STC_CALLTIP_CLICK, 1 )
</pythoncode>
</module>
<module name="xrc">
  <pythoncode> wx = core </pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="XmlResource" oldname="wxXmlResource" module="xrc">
    <baseclass name="wxObject"/>
    <constructor name="XmlResource" overloaded="no">
      <autodoc>__init__(String filemask, int flags=XRC_USE_LOCALE) -&gt; XmlResource</autodoc>
      <paramlist>
        <param name="filemask" type="r.q(const).wxString" default=""/>
        <param name="flags" type="int" default="wxXRC_USE_LOCALE"/>
      </paramlist>
    </constructor>
    <constructor name="EmptyXmlResource" overloaded="no">
      <autodoc>EmptyXmlResource(int flags=XRC_USE_LOCALE) -&gt; XmlResource</autodoc>
      <paramlist>
        <param name="flags" type="int" default="wxXRC_USE_LOCALE"/>
      </paramlist>
    </constructor>
    <destructor name="~wxXmlResource">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Load" overloaded="no">
      <autodoc>Load(String filemask) -&gt; bool</autodoc>
      <paramlist>
        <param name="filemask" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadFromString" overloaded="no">
      <autodoc>LoadFromString(String data) -&gt; bool</autodoc>
      <paramlist>
        <param name="data" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="InitAllHandlers" overloaded="no">
      <autodoc>InitAllHandlers()</autodoc>
    </method>
    <method name="AddHandler" overloaded="no">
      <autodoc>AddHandler(XmlResourceHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxPyXmlResourceHandler" default=""/>
      </paramlist>
    </method>
    <method name="InsertHandler" overloaded="no">
      <autodoc>InsertHandler(XmlResourceHandler handler)</autodoc>
      <paramlist>
        <param name="handler" type="p.wxPyXmlResourceHandler" default=""/>
      </paramlist>
    </method>
    <method name="ClearHandlers" overloaded="no">
      <autodoc>ClearHandlers()</autodoc>
    </method>
    <staticmethod name="AddSubclassFactory" overloaded="no">
      <autodoc>AddSubclassFactory(XmlSubclassFactory factory)</autodoc>
      <paramlist>
        <param name="factory" type="p.wxPyXmlSubclassFactory" default=""/>
      </paramlist>
    </staticmethod>
    <method name="LoadMenu" overloaded="no">
      <autodoc>LoadMenu(String name) -&gt; Menu</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadMenuBar" overloaded="no">
      <autodoc>LoadMenuBar(String name) -&gt; MenuBar</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadMenuBarOnFrame" overloaded="no">
      <autodoc>LoadMenuBarOnFrame(Window parent, String name) -&gt; MenuBar</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadToolBar" overloaded="no">
      <autodoc>LoadToolBar(Window parent, String name) -&gt; wxToolBar</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadDialog" overloaded="no">
      <autodoc>LoadDialog(Window parent, String name) -&gt; wxDialog</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadOnDialog" overloaded="no">
      <autodoc>LoadOnDialog(wxDialog dlg, Window parent, String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="dlg" type="p.wxDialog" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadPanel" overloaded="no">
      <autodoc>LoadPanel(Window parent, String name) -&gt; wxPanel</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadOnPanel" overloaded="no">
      <autodoc>LoadOnPanel(wxPanel panel, Window parent, String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="panel" type="p.wxPanel" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadFrame" overloaded="no">
      <autodoc>LoadFrame(Window parent, String name) -&gt; wxFrame</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadOnFrame" overloaded="no">
      <autodoc>LoadOnFrame(wxFrame frame, Window parent, String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="frame" type="p.wxFrame" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadObject" overloaded="no">
      <autodoc>LoadObject(Window parent, String name, String classname) -&gt; Object</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="classname" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadOnObject" overloaded="no">
      <autodoc>LoadOnObject(Object instance, Window parent, String name, String classname) -&gt; bool</autodoc>
      <paramlist>
        <param name="instance" type="p.wxObject" default=""/>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="classname" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadBitmap" overloaded="no">
      <autodoc>LoadBitmap(String name) -&gt; Bitmap</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="LoadIcon" overloaded="no">
      <autodoc>LoadIcon(String name) -&gt; Icon</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AttachUnknownControl" overloaded="no">
      <autodoc>AttachUnknownControl(String name, Window control, Window parent=None) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="control" type="p.wxWindow" default=""/>
        <param name="parent" type="p.wxWindow" default="NULL"/>
      </paramlist>
    </method>
    <staticmethod name="GetXRCID" overloaded="no">
      <autodoc>GetXRCID(String str_id) -&gt; int</autodoc>
      <paramlist>
        <param name="str_id" type="r.q(const).wxString" default=""/>
      </paramlist>
    </staticmethod>
    <method name="GetVersion" overloaded="no">
      <autodoc>GetVersion() -&gt; long</autodoc>
    </method>
    <method name="CompareVersion" overloaded="no">
      <autodoc>CompareVersion(int major, int minor, int release, int revision) -&gt; int</autodoc>
      <paramlist>
        <param name="major" type="int" default=""/>
        <param name="minor" type="int" default=""/>
        <param name="release" type="int" default=""/>
        <param name="revision" type="int" default=""/>
      </paramlist>
    </method>
    <staticmethod name="Get" overloaded="no">
      <autodoc>Get() -&gt; XmlResource</autodoc>
    </staticmethod>
    <staticmethod name="Set" overloaded="no">
      <autodoc>Set(XmlResource res) -&gt; XmlResource</autodoc>
      <paramlist>
        <param name="res" type="p.wxXmlResource" default=""/>
      </paramlist>
    </staticmethod>
    <method name="GetFlags" overloaded="no">
      <autodoc>GetFlags() -&gt; int</autodoc>
    </method>
    <method name="SetFlags" overloaded="no">
      <autodoc>SetFlags(int flags)</autodoc>
      <paramlist>
        <param name="flags" type="int" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
def XRCID(str_id):
    return XmlResource_GetXRCID(str_id)

def XRCCTRL(window, str_id, *ignoreargs):
    return window.FindWindowById(XRCID(str_id))
</pythoncode>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="XmlSubclassFactory" oldname="wxPyXmlSubclassFactory" module="xrc">
    <constructor name="wxPyXmlSubclassFactory" overloaded="no">
      <autodoc>__init__() -&gt; XmlSubclassFactory</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="XmlProperty" oldname="wxXmlProperty" module="xrc">
    <constructor name="XmlProperty" overloaded="no">
      <autodoc>__init__(String name=EmptyString, String value=EmptyString, 
    XmlProperty next=None) -&gt; XmlProperty</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="value" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="next" type="p.wxXmlProperty" default="NULL"/>
      </paramlist>
    </constructor>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
    <method name="GetNext" overloaded="no">
      <autodoc>GetNext() -&gt; XmlProperty</autodoc>
    </method>
    <method name="SetName" overloaded="no">
      <autodoc>SetName(String name)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(String value)</autodoc>
      <paramlist>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetNext" overloaded="no">
      <autodoc>SetNext(XmlProperty next)</autodoc>
      <paramlist>
        <param name="next" type="p.wxXmlProperty" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="XmlNode" oldname="wxXmlNode" module="xrc">
    <constructor name="XmlNode" overloaded="no">
      <autodoc>__init__(XmlNode parent=None, int type=0, String name=EmptyString, 
    String content=EmptyString, XmlProperty props=None, 
    XmlNode next=None) -&gt; XmlNode</autodoc>
      <paramlist>
        <param name="parent" type="p.wxXmlNode" default="NULL"/>
        <param name="type" type="wxXmlNodeType" default="0"/>
        <param name="name" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="content" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="props" type="p.wxXmlProperty" default="NULL"/>
        <param name="next" type="p.wxXmlNode" default="NULL"/>
      </paramlist>
    </constructor>
    <destructor name="~wxXmlNode">
      <autodoc>__del__()</autodoc>
    </destructor>
    <constructor name="XmlNodeEasy" overloaded="no">
      <autodoc>XmlNodeEasy(int type, String name, String content=EmptyString) -&gt; XmlNode</autodoc>
      <paramlist>
        <param name="type" type="wxXmlNodeType" default=""/>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="content" type="r.q(const).wxString" default="wxPyEmptyString"/>
      </paramlist>
    </constructor>
    <method name="AddChild" overloaded="no">
      <autodoc>AddChild(XmlNode child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="InsertChild" overloaded="no">
      <autodoc>InsertChild(XmlNode child, XmlNode before_node)</autodoc>
      <paramlist>
        <param name="child" type="p.wxXmlNode" default=""/>
        <param name="before_node" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="RemoveChild" overloaded="no">
      <autodoc>RemoveChild(XmlNode child) -&gt; bool</autodoc>
      <paramlist>
        <param name="child" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="AddProperty" overloaded="no">
      <autodoc>AddProperty(XmlProperty prop)</autodoc>
      <paramlist>
        <param name="prop" type="p.wxXmlProperty" default=""/>
      </paramlist>
    </method>
    <method name="AddPropertyName" overloaded="no">
      <autodoc>AddPropertyName(String name, String value)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="value" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="DeleteProperty" overloaded="no">
      <autodoc>DeleteProperty(String name) -&gt; bool</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetType" overloaded="no">
      <autodoc>GetType() -&gt; int</autodoc>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="GetContent" overloaded="no">
      <autodoc>GetContent() -&gt; String</autodoc>
    </method>
    <method name="GetParent" overloaded="no">
      <autodoc>GetParent() -&gt; XmlNode</autodoc>
    </method>
    <method name="GetNext" overloaded="no">
      <autodoc>GetNext() -&gt; XmlNode</autodoc>
    </method>
    <method name="GetChildren" overloaded="no">
      <autodoc>GetChildren() -&gt; XmlNode</autodoc>
    </method>
    <method name="GetProperties" overloaded="no">
      <autodoc>GetProperties() -&gt; XmlProperty</autodoc>
    </method>
    <method name="GetPropVal" overloaded="no">
      <autodoc>GetPropVal(String propName, String defaultVal) -&gt; String</autodoc>
      <paramlist>
        <param name="propName" type="r.q(const).wxString" default=""/>
        <param name="defaultVal" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="HasProp" overloaded="no">
      <autodoc>HasProp(String propName) -&gt; bool</autodoc>
      <paramlist>
        <param name="propName" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetType" overloaded="no">
      <autodoc>SetType(int type)</autodoc>
      <paramlist>
        <param name="type" type="wxXmlNodeType" default=""/>
      </paramlist>
    </method>
    <method name="SetName" overloaded="no">
      <autodoc>SetName(String name)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetContent" overloaded="no">
      <autodoc>SetContent(String con)</autodoc>
      <paramlist>
        <param name="con" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetParent" overloaded="no">
      <autodoc>SetParent(XmlNode parent)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="SetNext" overloaded="no">
      <autodoc>SetNext(XmlNode next)</autodoc>
      <paramlist>
        <param name="next" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="SetChildren" overloaded="no">
      <autodoc>SetChildren(XmlNode child)</autodoc>
      <paramlist>
        <param name="child" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="SetProperties" overloaded="no">
      <autodoc>SetProperties(XmlProperty prop)</autodoc>
      <paramlist>
        <param name="prop" type="p.wxXmlProperty" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="XmlDocument" oldname="wxXmlDocument" module="xrc">
    <baseclass name="wxObject"/>
    <constructor name="XmlDocument" overloaded="no">
      <autodoc>__init__(String filename, String encoding=UTF8String) -&gt; XmlDocument</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="encoding" type="r.q(const).wxString" default="wxPyUTF8String"/>
      </paramlist>
    </constructor>
    <constructor name="XmlDocumentFromStream" overloaded="no">
      <autodoc>XmlDocumentFromStream(InputStream stream, String encoding=UTF8String) -&gt; XmlDocument</autodoc>
      <paramlist>
        <param name="stream" type="r.wxInputStream" default=""/>
        <param name="encoding" type="r.q(const).wxString" default="wxPyUTF8String"/>
      </paramlist>
    </constructor>
    <constructor name="EmptyXmlDocument" overloaded="no">
      <autodoc>EmptyXmlDocument() -&gt; XmlDocument</autodoc>
    </constructor>
    <destructor name="~wxXmlDocument">
      <autodoc>__del__()</autodoc>
    </destructor>
    <method name="Load" overloaded="no">
      <autodoc>Load(String filename, String encoding=UTF8String) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
        <param name="encoding" type="r.q(const).wxString" default="wxPyUTF8String"/>
      </paramlist>
    </method>
    <method name="LoadFromStream" overloaded="no">
      <autodoc>LoadFromStream(InputStream stream, String encoding=UTF8String) -&gt; bool</autodoc>
      <paramlist>
        <param name="stream" type="r.wxInputStream" default=""/>
        <param name="encoding" type="r.q(const).wxString" default="wxPyUTF8String"/>
      </paramlist>
    </method>
    <method name="Save" overloaded="no">
      <autodoc>Save(String filename) -&gt; bool</autodoc>
      <paramlist>
        <param name="filename" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SaveToStream" overloaded="no">
      <autodoc>SaveToStream(OutputStream stream) -&gt; bool</autodoc>
      <paramlist>
        <param name="stream" type="r.wxOutputStream" default=""/>
      </paramlist>
    </method>
    <method name="IsOk" overloaded="no">
      <autodoc>IsOk() -&gt; bool</autodoc>
    </method>
    <method name="GetRoot" overloaded="no">
      <autodoc>GetRoot() -&gt; XmlNode</autodoc>
    </method>
    <method name="GetVersion" overloaded="no">
      <autodoc>GetVersion() -&gt; String</autodoc>
    </method>
    <method name="GetFileEncoding" overloaded="no">
      <autodoc>GetFileEncoding() -&gt; String</autodoc>
    </method>
    <method name="SetRoot" overloaded="no">
      <autodoc>SetRoot(XmlNode node)</autodoc>
      <paramlist>
        <param name="node" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="SetVersion" overloaded="no">
      <autodoc>SetVersion(String version)</autodoc>
      <paramlist>
        <param name="version" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetFileEncoding" overloaded="no">
      <autodoc>SetFileEncoding(String encoding)</autodoc>
      <paramlist>
        <param name="encoding" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
  <class name="XmlResourceHandler" oldname="wxPyXmlResourceHandler" module="xrc">
    <baseclass name="wxObject"/>
    <constructor name="wxPyXmlResourceHandler" overloaded="no">
      <autodoc>__init__() -&gt; XmlResourceHandler</autodoc>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="CreateResource" overloaded="no">
      <autodoc>CreateResource(XmlNode node, Object parent, Object instance) -&gt; Object</autodoc>
      <paramlist>
        <param name="node" type="p.wxXmlNode" default=""/>
        <param name="parent" type="p.wxObject" default=""/>
        <param name="instance" type="p.wxObject" default=""/>
      </paramlist>
    </method>
    <method name="SetParentResource" overloaded="no">
      <autodoc>SetParentResource(XmlResource res)</autodoc>
      <paramlist>
        <param name="res" type="p.wxXmlResource" default=""/>
      </paramlist>
    </method>
    <method name="GetResource" overloaded="no">
      <autodoc>GetResource() -&gt; XmlResource</autodoc>
    </method>
    <method name="GetNode" overloaded="no">
      <autodoc>GetNode() -&gt; XmlNode</autodoc>
    </method>
    <method name="GetClass" overloaded="no">
      <autodoc>GetClass() -&gt; String</autodoc>
    </method>
    <method name="GetParent" overloaded="no">
      <autodoc>GetParent() -&gt; Object</autodoc>
    </method>
    <method name="GetInstance" overloaded="no">
      <autodoc>GetInstance() -&gt; Object</autodoc>
    </method>
    <method name="GetParentAsWindow" overloaded="no">
      <autodoc>GetParentAsWindow() -&gt; Window</autodoc>
    </method>
    <method name="GetInstanceAsWindow" overloaded="no">
      <autodoc>GetInstanceAsWindow() -&gt; Window</autodoc>
    </method>
    <method name="IsOfClass" overloaded="no">
      <autodoc>IsOfClass(XmlNode node, String classname) -&gt; bool</autodoc>
      <paramlist>
        <param name="node" type="p.wxXmlNode" default=""/>
        <param name="classname" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetNodeContent" overloaded="no">
      <autodoc>GetNodeContent(XmlNode node) -&gt; String</autodoc>
      <paramlist>
        <param name="node" type="p.wxXmlNode" default=""/>
      </paramlist>
    </method>
    <method name="HasParam" overloaded="no">
      <autodoc>HasParam(String param) -&gt; bool</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetParamNode" overloaded="no">
      <autodoc>GetParamNode(String param) -&gt; XmlNode</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetParamValue" overloaded="no">
      <autodoc>GetParamValue(String param) -&gt; String</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AddStyle" overloaded="no">
      <autodoc>AddStyle(String name, int value)</autodoc>
      <paramlist>
        <param name="name" type="r.q(const).wxString" default=""/>
        <param name="value" type="int" default=""/>
      </paramlist>
    </method>
    <method name="AddWindowStyles" overloaded="no">
      <autodoc>AddWindowStyles()</autodoc>
    </method>
    <method name="GetStyle" overloaded="no">
      <autodoc>GetStyle(String param=StyleString, int defaults=0) -&gt; int</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default="wxPyStyleString"/>
        <param name="defaults" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText(String param, bool translate=True) -&gt; String</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
        <param name="translate" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetID" overloaded="no">
      <autodoc>GetID() -&gt; int</autodoc>
    </method>
    <method name="GetName" overloaded="no">
      <autodoc>GetName() -&gt; String</autodoc>
    </method>
    <method name="GetBool" overloaded="no">
      <autodoc>GetBool(String param, bool defaultv=False) -&gt; bool</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
        <param name="defaultv" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="GetLong" overloaded="no">
      <autodoc>GetLong(String param, long defaultv=0) -&gt; long</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
        <param name="defaultv" type="long" default="0"/>
      </paramlist>
    </method>
    <method name="GetColour" overloaded="no">
      <autodoc>GetColour(String param) -&gt; Colour</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetSize" overloaded="no">
      <autodoc>GetSize(String param=SizeString) -&gt; Size</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default="wxPySizeString"/>
      </paramlist>
    </method>
    <method name="GetPosition" overloaded="no">
      <autodoc>GetPosition(String param=PosString) -&gt; Point</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default="wxPyPosString"/>
      </paramlist>
    </method>
    <method name="GetDimension" overloaded="no">
      <autodoc>GetDimension(String param, int defaultv=0) -&gt; int</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default=""/>
        <param name="defaultv" type="int" default="0"/>
      </paramlist>
    </method>
    <method name="GetBitmap" overloaded="no">
      <autodoc>GetBitmap(String param=BitmapString, wxArtClient defaultArtClient=wxART_OTHER, 
    Size size=DefaultSize) -&gt; Bitmap</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default="wxPyBitmapString"/>
        <param name="defaultArtClient" type="r.q(const).wxArtClient" default="wxART_OTHER"/>
        <param name="size" type="wxSize" default="wxDefaultSize"/>
      </paramlist>
    </method>
    <method name="GetIcon" overloaded="no">
      <autodoc>GetIcon(String param=IconString, wxArtClient defaultArtClient=wxART_OTHER, 
    Size size=DefaultSize) -&gt; Icon</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default="wxPyIconString"/>
        <param name="defaultArtClient" type="r.q(const).wxArtClient" default="wxART_OTHER"/>
        <param name="size" type="wxSize" default="wxDefaultSize"/>
      </paramlist>
    </method>
    <method name="GetFont" overloaded="no">
      <autodoc>GetFont(String param=FontString) -&gt; Font</autodoc>
      <paramlist>
        <param name="param" type="r.q(const).wxString" default="wxPyFontString"/>
      </paramlist>
    </method>
    <method name="SetupWindow" overloaded="no">
      <autodoc>SetupWindow(Window wnd)</autodoc>
      <paramlist>
        <param name="wnd" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="CreateChildren" overloaded="no">
      <autodoc>CreateChildren(Object parent, bool this_hnd_only=False)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxObject" default=""/>
        <param name="this_hnd_only" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="CreateChildrenPrivately" overloaded="no">
      <autodoc>CreateChildrenPrivately(Object parent, XmlNode rootnode=None)</autodoc>
      <paramlist>
        <param name="parent" type="p.wxObject" default=""/>
        <param name="rootnode" type="p.wxXmlNode" default="NULL"/>
      </paramlist>
    </method>
    <method name="CreateResFromNode" overloaded="no">
      <autodoc>CreateResFromNode(XmlNode node, Object parent, Object instance=None) -&gt; Object</autodoc>
      <paramlist>
        <param name="node" type="p.wxXmlNode" default=""/>
        <param name="parent" type="p.wxObject" default=""/>
        <param name="instance" type="p.wxObject" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetCurFileSystem" overloaded="no">
      <autodoc>GetCurFileSystem() -&gt; FileSystem</autodoc>
    </method>
  </class>
  <pythoncode>#----------------------------------------------------------------------------
# The global was removed  in favor of static accessor functions.  This is for
# backwards compatibility:

TheXmlResource = XmlResource_Get()


#----------------------------------------------------------------------------
#  Create a factory for handling the subclass property of the object tag.


def _my_import(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod


class XmlSubclassFactory_Python(XmlSubclassFactory):
    def __init__(self):
        XmlSubclassFactory.__init__(self)

    def Create(self, className):
        assert className.find('.') != -1, "Module name must be specified!"
        mname = className[:className.rfind('.')]
        cname = className[className.rfind('.')+1:]
        module = _my_import(mname)
        klass = getattr(module, cname)
        inst = klass()
        return inst


XmlResource_AddSubclassFactory(XmlSubclassFactory_Python())

#----------------------------------------------------------------------------
</pythoncode>
</module>
<module name="gizmos">
  <pythoncode> wx = core </pythoncode>
  <class name="DynamicSashSplitEvent" oldname="wxDynamicSashSplitEvent" module="gizmos">
    <baseclass name="wxCommandEvent"/>
    <constructor name="DynamicSashSplitEvent" overloaded="no">
      <autodoc>__init__(Object target) -&gt; DynamicSashSplitEvent</autodoc>
      <paramlist>
        <param name="target" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
  </class>
  <class name="DynamicSashUnifyEvent" oldname="wxDynamicSashUnifyEvent" module="gizmos">
    <baseclass name="wxCommandEvent"/>
    <constructor name="DynamicSashUnifyEvent" overloaded="no">
      <autodoc>__init__(Object target) -&gt; DynamicSashUnifyEvent</autodoc>
      <paramlist>
        <param name="target" type="p.wxObject" default=""/>
      </paramlist>
    </constructor>
  </class>
  <class name="DynamicSashWindow" oldname="wxDynamicSashWindow" module="gizmos">
    <baseclass name="wxWindow"/>
    <constructor name="DynamicSashWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER, 
    String name=DynamicSashNameStr) -&gt; DynamicSashWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER"/>
        <param name="name" type="r.q(const).wxString" default="wxPyDynamicSashNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreDynamicSashWindow" overloaded="no">
      <autodoc>PreDynamicSashWindow() -&gt; DynamicSashWindow</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER, 
    String name=DynamicSashNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER"/>
        <param name="name" type="r.q(const).wxString" default="wxPyDynamicSashNameStr"/>
      </paramlist>
    </method>
    <method name="GetHScrollBar" overloaded="no">
      <autodoc>GetHScrollBar(Window child) -&gt; ScrollBar</autodoc>
      <paramlist>
        <param name="child" type="p.q(const).wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetVScrollBar" overloaded="no">
      <autodoc>GetVScrollBar(Window child) -&gt; ScrollBar</autodoc>
      <paramlist>
        <param name="child" type="p.q(const).wxWindow" default=""/>
      </paramlist>
    </method>
  </class>
  <pythoncode>
EVT_DYNAMIC_SASH_SPLIT = wx.PyEventBinder( wxEVT_DYNAMIC_SASH_SPLIT, 1 )
EVT_DYNAMIC_SASH_UNIFY = wx.PyEventBinder( wxEVT_DYNAMIC_SASH_UNIFY, 1 )
</pythoncode>
  <class name="EditableListBox" oldname="wxEditableListBox" module="gizmos">
    <baseclass name="wxPanel"/>
    <constructor name="EditableListBox" overloaded="no">
      <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxEL_ALLOW_NEW|wxEL_ALLOW_EDIT|wxEL_ALLOW_DELETE, 
    String name=EditableListBoxNameStr) -&gt; EditableListBox</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="label" type="r.q(const).wxString" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxEL_ALLOW_NEW|wxEL_ALLOW_EDIT|wxEL_ALLOW_DELETE"/>
        <param name="name" type="r.q(const).wxString" default="wxPyEditableListBoxNameStr"/>
      </paramlist>
    </constructor>
    <method name="SetStrings" overloaded="no">
      <autodoc>SetStrings(wxArrayString strings)</autodoc>
      <paramlist>
        <param name="strings" type="r.q(const).wxArrayString" default=""/>
      </paramlist>
    </method>
    <method name="GetStrings" overloaded="no">
      <autodoc>GetStrings() -&gt; PyObject</autodoc>
    </method>
    <method name="GetListCtrl" overloaded="no">
      <autodoc>GetListCtrl() -&gt; wxListCtrl</autodoc>
    </method>
    <method name="GetDelButton" overloaded="no">
      <autodoc>GetDelButton() -&gt; BitmapButton</autodoc>
    </method>
    <method name="GetNewButton" overloaded="no">
      <autodoc>GetNewButton() -&gt; BitmapButton</autodoc>
    </method>
    <method name="GetUpButton" overloaded="no">
      <autodoc>GetUpButton() -&gt; BitmapButton</autodoc>
    </method>
    <method name="GetDownButton" overloaded="no">
      <autodoc>GetDownButton() -&gt; BitmapButton</autodoc>
    </method>
    <method name="GetEditButton" overloaded="no">
      <autodoc>GetEditButton() -&gt; BitmapButton</autodoc>
    </method>
  </class>
  <class name="RemotelyScrolledTreeCtrl" oldname="wxRemotelyScrolledTreeCtrl" module="gizmos">
    <baseclass name="wxPyTreeCtrl"/>
    <constructor name="RemotelyScrolledTreeCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=TR_HAS_BUTTONS) -&gt; RemotelyScrolledTreeCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default=""/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTR_HAS_BUTTONS"/>
      </paramlist>
    </constructor>
    <method name="HideVScrollbar" overloaded="no">
      <autodoc>HideVScrollbar()</autodoc>
    </method>
    <method name="AdjustRemoteScrollbars" overloaded="no">
      <autodoc>AdjustRemoteScrollbars()</autodoc>
    </method>
    <method name="GetScrolledWindow" overloaded="no">
      <autodoc>GetScrolledWindow() -&gt; ScrolledWindow</autodoc>
    </method>
    <method name="ScrollToLine" overloaded="no">
      <autodoc>ScrollToLine(int posHoriz, int posVert)</autodoc>
      <paramlist>
        <param name="posHoriz" type="int" default=""/>
        <param name="posVert" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetCompanionWindow" overloaded="no">
      <autodoc>SetCompanionWindow(Window companion)</autodoc>
      <paramlist>
        <param name="companion" type="p.wxWindow" default=""/>
      </paramlist>
    </method>
    <method name="GetCompanionWindow" overloaded="no">
      <autodoc>GetCompanionWindow() -&gt; Window</autodoc>
    </method>
  </class>
  <class name="TreeCompanionWindow" oldname="wxPyTreeCompanionWindow" module="gizmos">
    <baseclass name="wxWindow"/>
    <constructor name="wxPyTreeCompanionWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; TreeCompanionWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetTreeCtrl" overloaded="no">
      <autodoc>GetTreeCtrl() -&gt; RemotelyScrolledTreeCtrl</autodoc>
    </method>
    <method name="SetTreeCtrl" overloaded="no">
      <autodoc>SetTreeCtrl(RemotelyScrolledTreeCtrl treeCtrl)</autodoc>
      <paramlist>
        <param name="treeCtrl" type="p.wxRemotelyScrolledTreeCtrl" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="ThinSplitterWindow" oldname="wxThinSplitterWindow" module="gizmos">
    <baseclass name="wxSplitterWindow"/>
    <constructor name="ThinSplitterWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxSP_3D|wxCLIP_CHILDREN) -&gt; ThinSplitterWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxSP_3D|wxCLIP_CHILDREN"/>
      </paramlist>
    </constructor>
  </class>
  <class name="SplitterScrolledWindow" oldname="wxSplitterScrolledWindow" module="gizmos">
    <baseclass name="wxScrolledWindow"/>
    <constructor name="SplitterScrolledWindow" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; SplitterScrolledWindow</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="0"/>
      </paramlist>
    </constructor>
  </class>
  <class name="LEDNumberCtrl" oldname="wxLEDNumberCtrl" module="gizmos">
    <baseclass name="wxControl"/>
    <constructor name="LEDNumberCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxLED_ALIGN_LEFT|wxLED_DRAW_FADED) -&gt; LEDNumberCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLED_ALIGN_LEFT|wxLED_DRAW_FADED"/>
      </paramlist>
    </constructor>
    <constructor name="PreLEDNumberCtrl" overloaded="no">
      <autodoc>PreLEDNumberCtrl() -&gt; LEDNumberCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxLED_ALIGN_LEFT|wxLED_DRAW_FADED) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxLED_ALIGN_LEFT|wxLED_DRAW_FADED"/>
      </paramlist>
    </method>
    <method name="GetAlignment" overloaded="no">
      <autodoc>GetAlignment() -&gt; int</autodoc>
    </method>
    <method name="GetDrawFaded" overloaded="no">
      <autodoc>GetDrawFaded() -&gt; bool</autodoc>
    </method>
    <method name="GetValue" overloaded="no">
      <autodoc>GetValue() -&gt; String</autodoc>
    </method>
    <method name="SetAlignment" overloaded="no">
      <autodoc>SetAlignment(int Alignment, bool Redraw=true)</autodoc>
      <paramlist>
        <param name="Alignment" type="wxLEDValueAlign" default=""/>
        <param name="Redraw" type="bool" default="true"/>
      </paramlist>
    </method>
    <method name="SetDrawFaded" overloaded="no">
      <autodoc>SetDrawFaded(bool DrawFaded, bool Redraw=true)</autodoc>
      <paramlist>
        <param name="DrawFaded" type="bool" default=""/>
        <param name="Redraw" type="bool" default="true"/>
      </paramlist>
    </method>
    <method name="SetValue" overloaded="no">
      <autodoc>SetValue(String Value, bool Redraw=true)</autodoc>
      <paramlist>
        <param name="Value" type="r.q(const).wxString" default=""/>
        <param name="Redraw" type="bool" default="true"/>
      </paramlist>
    </method>
  </class>
  <class name="TreeListColumnInfo" oldname="wxTreeListColumnInfo" module="gizmos">
    <baseclass name="wxObject"/>
    <constructor name="TreeListColumnInfo" overloaded="no">
      <autodoc>__init__(String text=EmptyString, int image=-1, size_t width=100, 
    int alignment=TL_ALIGN_LEFT) -&gt; TreeListColumnInfo</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default="wxPyEmptyString"/>
        <param name="image" type="int" default="-1"/>
        <param name="width" type="size_t" default="100"/>
        <param name="alignment" type="wxTreeListColumnAlign" default="wxTL_ALIGN_LEFT"/>
      </paramlist>
    </constructor>
    <method name="GetAlignment" overloaded="no">
      <autodoc>GetAlignment() -&gt; int</autodoc>
    </method>
    <method name="GetText" overloaded="no">
      <autodoc>GetText() -&gt; String</autodoc>
    </method>
    <method name="GetImage" overloaded="no">
      <autodoc>GetImage() -&gt; int</autodoc>
    </method>
    <method name="GetSelectedImage" overloaded="no">
      <autodoc>GetSelectedImage() -&gt; int</autodoc>
    </method>
    <method name="GetWidth" overloaded="no">
      <autodoc>GetWidth() -&gt; size_t</autodoc>
    </method>
    <method name="SetAlignment" overloaded="no">
      <autodoc>SetAlignment(int alignment)</autodoc>
      <paramlist>
        <param name="alignment" type="wxTreeListColumnAlign" default=""/>
      </paramlist>
    </method>
    <method name="SetText" overloaded="no">
      <autodoc>SetText(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="SetImage" overloaded="no">
      <autodoc>SetImage(int image)</autodoc>
      <paramlist>
        <param name="image" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetSelectedImage" overloaded="no">
      <autodoc>SetSelectedImage(int image)</autodoc>
      <paramlist>
        <param name="image" type="int" default=""/>
      </paramlist>
    </method>
    <method name="SetWidth" overloaded="no">
      <autodoc>SetWidth(size_t with)</autodoc>
      <paramlist>
        <param name="with" type="size_t" default=""/>
      </paramlist>
    </method>
  </class>
  <class name="TreeListCtrl" oldname="wxPyTreeListCtrl" module="gizmos">
    <baseclass name="wxControl"/>
    <constructor name="wxPyTreeListCtrl" overloaded="no">
      <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeListCtrlNameStr) -&gt; TreeListCtrl</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTreeListCtrlNameStr"/>
      </paramlist>
    </constructor>
    <constructor name="PreTreeListCtrl" overloaded="no">
      <autodoc>PreTreeListCtrl() -&gt; TreeListCtrl</autodoc>
    </constructor>
    <method name="Create" overloaded="no">
      <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeListCtrlNameStr) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="p.wxWindow" default=""/>
        <param name="id" type="int" default="-1"/>
        <param name="pos" type="r.q(const).wxPoint" default="wxDefaultPosition"/>
        <param name="size" type="r.q(const).wxSize" default="wxDefaultSize"/>
        <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
        <param name="validator" type="r.q(const).wxValidator" default="wxDefaultValidator"/>
        <param name="name" type="r.q(const).wxString" default="wxPyTreeListCtrlNameStr"/>
      </paramlist>
    </method>
    <method name="_setCallbackInfo" overloaded="no">
      <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
      <paramlist>
        <param name="self" type="p.PyObject" default=""/>
        <param name="_class" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="GetCount" overloaded="no">
      <autodoc>GetCount() -&gt; size_t</autodoc>
    </method>
    <method name="GetIndent" overloaded="no">
      <autodoc>GetIndent() -&gt; unsigned int</autodoc>
    </method>
    <method name="SetIndent" overloaded="no">
      <autodoc>SetIndent(unsigned int indent)</autodoc>
      <paramlist>
        <param name="indent" type="unsigned int" default=""/>
      </paramlist>
    </method>
    <method name="GetSpacing" overloaded="no">
      <autodoc>GetSpacing() -&gt; unsigned int</autodoc>
    </method>
    <method name="SetSpacing" overloaded="no">
      <autodoc>SetSpacing(unsigned int spacing)</autodoc>
      <paramlist>
        <param name="spacing" type="unsigned int" default=""/>
      </paramlist>
    </method>
    <method name="GetLineSpacing" overloaded="no">
      <autodoc>GetLineSpacing() -&gt; unsigned int</autodoc>
    </method>
    <method name="SetLineSpacing" overloaded="no">
      <autodoc>SetLineSpacing(unsigned int spacing)</autodoc>
      <paramlist>
        <param name="spacing" type="unsigned int" default=""/>
      </paramlist>
    </method>
    <method name="GetImageList" overloaded="no">
      <autodoc>GetImageList() -&gt; ImageList</autodoc>
    </method>
    <method name="GetStateImageList" overloaded="no">
      <autodoc>GetStateImageList() -&gt; ImageList</autodoc>
    </method>
    <method name="GetButtonsImageList" overloaded="no">
      <autodoc>GetButtonsImageList() -&gt; ImageList</autodoc>
    </method>
    <method name="SetImageList" overloaded="no">
      <autodoc>SetImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="SetStateImageList" overloaded="no">
      <autodoc>SetStateImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="SetButtonsImageList" overloaded="no">
      <autodoc>SetButtonsImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="AssignImageList" overloaded="no">
      <autodoc>AssignImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="AssignStateImageList" overloaded="no">
      <autodoc>AssignStateImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="AssignButtonsImageList" overloaded="no">
      <autodoc>AssignButtonsImageList(ImageList imageList)</autodoc>
      <paramlist>
        <param name="imageList" type="p.wxImageList" default=""/>
      </paramlist>
    </method>
    <method name="AddColumn" overloaded="no">
      <autodoc>AddColumn(String text)</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="AddColumnInfo" overloaded="no">
      <autodoc>AddColumnInfo(TreeListColumnInfo col)</autodoc>
      <paramlist>
        <param name="col" type="r.q(const).wxTreeListColumnInfo" default=""/>
      </paramlist>
    </method>
    <method name="InsertColumn" overloaded="no">
      <autodoc>InsertColumn(size_t before, String text)</autodoc>
      <paramlist>
        <param name="before" type="size_t" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="InsertColumnInfo" overloaded="no">
      <autodoc>InsertColumnInfo(size_t before, TreeListColumnInfo col)</autodoc>
      <paramlist>
        <param name="before" type="size_t" default=""/>
        <param name="col" type="r.q(const).wxTreeListColumnInfo" default=""/>
      </paramlist>
    </method>
    <method name="RemoveColumn" overloaded="no">
      <autodoc>RemoveColumn(size_t column)</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="GetColumnCount" overloaded="no">
      <autodoc>GetColumnCount() -&gt; size_t</autodoc>
    </method>
    <method name="SetColumnWidth" overloaded="no">
      <autodoc>SetColumnWidth(size_t column, size_t width)</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
        <param name="width" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="GetColumnWidth" overloaded="no">
      <autodoc>GetColumnWidth(size_t column) -&gt; int</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetMainColumn" overloaded="no">
      <autodoc>SetMainColumn(size_t column)</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="GetMainColumn" overloaded="no">
      <autodoc>GetMainColumn() -&gt; size_t</autodoc>
    </method>
    <method name="SetColumnText" overloaded="no">
      <autodoc>SetColumnText(size_t column, String text)</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
      </paramlist>
    </method>
    <method name="GetColumnText" overloaded="no">
      <autodoc>GetColumnText(size_t column) -&gt; String</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetColumn" overloaded="no">
      <autodoc>SetColumn(size_t column, TreeListColumnInfo info)</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
        <param name="info" type="r.q(const).wxTreeListColumnInfo" default=""/>
      </paramlist>
    </method>
    <method name="GetColumn" overloaded="no">
      <autodoc>GetColumn(size_t column) -&gt; TreeListColumnInfo</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetColumnAlignment" overloaded="no">
      <autodoc>SetColumnAlignment(size_t column, int align)</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
        <param name="align" type="wxTreeListColumnAlign" default=""/>
      </paramlist>
    </method>
    <method name="GetColumnAlignment" overloaded="no">
      <autodoc>GetColumnAlignment(size_t column) -&gt; int</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="SetColumnImage" overloaded="no">
      <autodoc>SetColumnImage(size_t column, int image)</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
        <param name="image" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetColumnImage" overloaded="no">
      <autodoc>GetColumnImage(size_t column) -&gt; int</autodoc>
      <paramlist>
        <param name="column" type="size_t" default=""/>
      </paramlist>
    </method>
    <method name="GetItemText" overloaded="no">
      <autodoc>GetItemText(TreeItemId item, int column=-1) -&gt; String</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="column" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="GetItemImage" overloaded="no">
      <autodoc>GetItemImage(TreeItemId item, int column=-1, int which=TreeItemIcon_Normal) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="column" type="int" default="-1"/>
        <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
      </paramlist>
    </method>
    <method name="SetItemText" overloaded="no">
      <autodoc>SetItemText(TreeItemId item, String text, int column=-1)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="column" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="SetItemImage" overloaded="no">
      <autodoc>SetItemImage(TreeItemId item, int image, int column=-1, int which=TreeItemIcon_Normal)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="image" type="int" default=""/>
        <param name="column" type="int" default="-1"/>
        <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
      </paramlist>
    </method>
    <method name="GetItemData" overloaded="no">
      <autodoc>GetItemData(TreeItemId item) -&gt; TreeItemData</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="SetItemData" overloaded="no">
      <autodoc>SetItemData(TreeItemId item, TreeItemData data)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="data" type="p.wxPyTreeItemData" default=""/>
      </paramlist>
    </method>
    <method name="GetItemPyData" overloaded="no">
      <autodoc>GetItemPyData(TreeItemId item) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="SetItemPyData" overloaded="no">
      <autodoc>SetItemPyData(TreeItemId item, PyObject obj)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="obj" type="p.PyObject" default=""/>
      </paramlist>
    </method>
    <method name="SetItemHasChildren" overloaded="no">
      <autodoc>SetItemHasChildren(TreeItemId item, bool has=True)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="has" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetItemBold" overloaded="no">
      <autodoc>SetItemBold(TreeItemId item, bool bold=True)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="bold" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="SetItemTextColour" overloaded="no">
      <autodoc>SetItemTextColour(TreeItemId item, Colour col)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetItemBackgroundColour" overloaded="no">
      <autodoc>SetItemBackgroundColour(TreeItemId item, Colour col)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="col" type="r.q(const).wxColour" default=""/>
      </paramlist>
    </method>
    <method name="SetItemFont" overloaded="no">
      <autodoc>SetItemFont(TreeItemId item, Font font)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="font" type="r.q(const).wxFont" default=""/>
      </paramlist>
    </method>
    <method name="GetItemBold" overloaded="no">
      <autodoc>GetItemBold(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemTextColour" overloaded="no">
      <autodoc>GetItemTextColour(TreeItemId item) -&gt; Colour</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemBackgroundColour" overloaded="no">
      <autodoc>GetItemBackgroundColour(TreeItemId item) -&gt; Colour</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemFont" overloaded="no">
      <autodoc>GetItemFont(TreeItemId item) -&gt; Font</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="IsVisible" overloaded="no">
      <autodoc>IsVisible(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="ItemHasChildren" overloaded="no">
      <autodoc>ItemHasChildren(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="IsExpanded" overloaded="no">
      <autodoc>IsExpanded(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="IsSelected" overloaded="no">
      <autodoc>IsSelected(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="IsBold" overloaded="no">
      <autodoc>IsBold(TreeItemId item) -&gt; bool</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetChildrenCount" overloaded="no">
      <autodoc>GetChildrenCount(TreeItemId item, bool recursively=True) -&gt; size_t</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="recursively" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetRootItem" overloaded="no">
      <autodoc>GetRootItem() -&gt; TreeItemId</autodoc>
    </method>
    <method name="GetSelection" overloaded="no">
      <autodoc>GetSelection() -&gt; TreeItemId</autodoc>
    </method>
    <method name="GetSelections" overloaded="no">
      <autodoc>GetSelections() -&gt; PyObject</autodoc>
    </method>
    <method name="GetItemParent" overloaded="no">
      <autodoc>GetItemParent(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstChild" overloaded="no">
      <autodoc>GetFirstChild(TreeItemId item) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetNextChild" overloaded="no">
      <autodoc>GetNextChild(TreeItemId item, long cookie) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="cookie" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetLastChild" overloaded="no">
      <autodoc>GetLastChild(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetNextSibling" overloaded="no">
      <autodoc>GetNextSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetPrevSibling" overloaded="no">
      <autodoc>GetPrevSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetFirstVisibleItem" overloaded="no">
      <autodoc>GetFirstVisibleItem() -&gt; TreeItemId</autodoc>
    </method>
    <method name="GetNextVisible" overloaded="no">
      <autodoc>GetNextVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetPrevVisible" overloaded="no">
      <autodoc>GetPrevVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetNext" overloaded="no">
      <autodoc>GetNext(TreeItemId item) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="AddRoot" overloaded="no">
      <autodoc>AddRoot(String text, int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="PrependItem" overloaded="no">
      <autodoc>PrependItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="InsertItem" overloaded="no">
      <autodoc>InsertItem(TreeItemId parent, TreeItemId idPrevious, String text, 
    int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="idPrevious" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="InsertItemBefore" overloaded="no">
      <autodoc>InsertItemBefore(TreeItemId parent, size_t index, String text, int image=-1, 
    int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="index" type="size_t" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="AppendItem" overloaded="no">
      <autodoc>AppendItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="parent" type="r.q(const).wxTreeItemId" default=""/>
        <param name="text" type="r.q(const).wxString" default=""/>
        <param name="image" type="int" default="-1"/>
        <param name="selectedImage" type="int" default="-1"/>
        <param name="data" type="p.wxPyTreeItemData" default="NULL"/>
      </paramlist>
    </method>
    <method name="Delete" overloaded="no">
      <autodoc>Delete(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="DeleteChildren" overloaded="no">
      <autodoc>DeleteChildren(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="DeleteAllItems" overloaded="no">
      <autodoc>DeleteAllItems()</autodoc>
    </method>
    <method name="Expand" overloaded="no">
      <autodoc>Expand(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="ExpandAll" overloaded="no">
      <autodoc>ExpandAll(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Collapse" overloaded="no">
      <autodoc>Collapse(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="CollapseAndReset" overloaded="no">
      <autodoc>CollapseAndReset(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Toggle" overloaded="no">
      <autodoc>Toggle(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Unselect" overloaded="no">
      <autodoc>Unselect()</autodoc>
    </method>
    <method name="UnselectAll" overloaded="no">
      <autodoc>UnselectAll()</autodoc>
    </method>
    <method name="SelectItem" overloaded="no">
      <autodoc>SelectItem(TreeItemId item, bool unselect_others=True, bool extended_select=False)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="unselect_others" type="bool" default="True"/>
        <param name="extended_select" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="EnsureVisible" overloaded="no">
      <autodoc>EnsureVisible(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="ScrollTo" overloaded="no">
      <autodoc>ScrollTo(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="HitTest" overloaded="no">
      <autodoc>HitTest(Point point, int OUTPUT, int OUTPUT) -&gt; TreeItemId</autodoc>
      <paramlist>
        <param name="point" type="r.q(const).wxPoint" default=""/>
        <param name="OUTPUT" type="r.int" default=""/>
        <param name="OUTPUT" type="r.int" default=""/>
      </paramlist>
    </method>
    <method name="GetBoundingRect" overloaded="no">
      <autodoc>GetBoundingRect(TreeItemId item, bool textOnly=False) -&gt; PyObject</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="textOnly" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="EditLabel" overloaded="no">
      <autodoc>EditLabel(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="Edit" overloaded="no">
      <autodoc>Edit(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="SortChildren" overloaded="no">
      <autodoc>SortChildren(TreeItemId item)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="GetItemSelectedImage" overloaded="no">
      <autodoc>GetItemSelectedImage(TreeItemId item) -&gt; int</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
      </paramlist>
    </method>
    <method name="SetItemSelectedImage" overloaded="no">
      <autodoc>SetItemSelectedImage(TreeItemId item, int image)</autodoc>
      <paramlist>
        <param name="item" type="r.q(const).wxTreeItemId" default=""/>
        <param name="image" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetHeaderWindow" overloaded="no">
      <autodoc>GetHeaderWindow() -&gt; Window</autodoc>
    </method>
    <method name="GetMainWindow" overloaded="no">
      <autodoc>GetMainWindow() -&gt; Window</autodoc>
    </method>
  </class>
</module>
</wxPython-metadata>
