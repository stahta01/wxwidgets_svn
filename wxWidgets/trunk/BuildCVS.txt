------------------------------------------------------------------------
                How to build the sources from CVS
------------------------------------------------------------------------

I) Windows using plain makefiles
----------------------------------------

a) If using Microsoft Visual C++ 5.0 or 6.0

Ensure that the command-line compiler and tools (including
nmake) are installed and ready to run.  Depending on your
installation there may be a batch file (named something like
VCVARS32.BAT) that needs to be run to set correct environment
varaibles and PATH entries.

Continue with item c) below.


b) If using the GNU MinGW32 or GNU CygWin32 compilers

You'll need the compiler itself which is available from

  http://www.cygwin.com

When using MingW32 you'll need GNU make which is a part
of the CygWin32 toolchain and is also available as a stand
alone port without the infamous Cygwin.dll from

  http://agnes.dida.physik.uni-essen.de/~janjaap/mingw32

The makefile has small problems with Cygwin´s tools
so it is recommended not to use these (but MingGW32
and its make.exe).

-> Set your path so that it includes the directory
   where your compiler and tools reside

b-2) Using Mingw32 with gcc-2.95 and Anders Norlander's 
	Win32 headers

Using the newer gcc-2.95/Noralander header combination
will allow you to compile more of the MSW code, such
as OLE and Drag-n-Drop.

Instructions are similar to those for Regular Mingw32 except

->Get the compiler from 
    ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/gcc-2.95/

->patch the gcc headers with info in wxWin\Mingw32-gcc295.patches. 
  PLEASE APPLY THESE PATCHES BY HAND! There are apparently a few
  different versions of the headers floating around.

->copy wxWin\src\makeg295.env to wxWin\src\makeg95.env

    
c) Build instructions

-> Assumming that you installed the wxWindows sources
   into c:\wxWin
-> Copy c:\wxWin\include\wx\msw\setup0.h
   to   c:\wxWin\include\wx\msw\setup.h
-> Edit c:\wxWin\include\wx\msw\setup.h so that
   most features are enabled (i.e. defined to 1) with
   #define wxUSE_ODBC          0	
   #define wxUSE_SOCKETS       0
   #define wxUSE_HTML          1
   #define wxUSE_THREADS       1
   #define wxUSE_FS_INET       0
   #define wxUSE_FS_ZIP        1
   #define wxUSE_BUSYINFO      1
   #define wxUSE_DYNLIB_CLASS  1
   #define wxUSE_ZIPSTREAM     1
   #define wxUSE_LIBJPEG       1
   #define wxUSE_LIBPNG        1

   and iostreams ares disabled with
   #define wxUSE_STD_IOSTREAM   0
   
   note: ODBC and SOCKETS can be 1 for gcc-2.95
   
-> type: cd c:\wxWin\src\msw
-> type: make -f makefile.g95  (if using GNU tools)
or type: make -f makefile.g295 (if using Mingw32/gcc-2.95)	
or type: make -f makefile.vc   (if using MS VC++)


II) Unix ports
--------------

Building wxGTK or wxMotif completely without configure
won't ever work, but there is now a new makefile system
that works without libtool and automake, using only
configure to create what is needed.

In order to create configure, you need to have the
GNU autoconf package (version 2.13 or 2.14) installed
on your system and type run "autoconf" in the base
directory (or run the autogen.sh script in the same
directory, which just calls autoconf).

Set WXWIN environment variable to the base directory such
as ~/wxWindows (this is actually not really needed).

-> type: export WXWIN=~/wxWindows
-> type: md mybuild
-> type: cd mybuild
-> type: ../configure --with-motif
or type: ../configure --with-gtk
-> type: make
-> type: su <type root password>
-> type: make install
-> type: ldconfig
-> type: exit

Call configure with --disable-shared to create a static
library. Calling "make uninstall" will remove the installed
library and "make dist" will create a distribution (not
yet complete).

III) Windows using configure
----------------------------------------

Take a look at Unix->Windows cross compiling. With minor
modifications, this should work in Windows if you've got the cygnus
utilities (bash, GNU make, etc) and either mingw32 or cygwin32 installed.
See http://www.cygnus.com for these programs, or go straight to their
ftp server at ftp://sourceware.cygnus.com/pub/cygwin/.

Of course, you can also build the library using plain makefiles (see
section I).

V) MacOS
----------------------------------------

VI) OS/2
----------------------------------------

VII) Unix->Windows cross-compiling using configure
--------------------------------------------------

First you'll need a cross-compiler; linux glibc binaries of mingw32 and
cygwin32 (both based on egcs) can be found at
ftp://ftp.objsw.com/pub/crossgcc/linux-x-win32. Otherwise you can
compile one yourself. Check the relevant FAQs.

[ A Note about cygwin32 and mingw32: the main difference is that cygwin32
binaries are always linked against cygwin.dll. This dll encapsulates most
standard Unix C extensions, which is very handy if you're porting unix
software to windows. However, wxMSW doesn't need this, so mingw32 is
preferable if you write portable C(++). ]

You might want to build both Unix and Windows binaries in the same source
tree; to do this make subdirs for each e.g. unix and win32. If you've
already build wxWindows in the main dir, do a 'make distclean' there,
otherwise configure will get confused. (In any case, read the section 'Unix
using configure' and make sure you're able to build a native wxWindows
library; cross-compiling errors can be pretty obscure and you'll want to be
sure that your configure setup is basically sound.)

To cross compile the windows library, do
-> cd win32
(or whatever you called it)
Now run configure. There are two ways to do this
-> ../configure --host=i586-mingw32 --build=i586-linux --with-mingw \
   --enable-dnd=no
where --build= should read whatever platform you're building on. Configure
will notice that build and host platforms differ, and automatically prepend
i586-mingw32- to gcc, ar, ld, etc (make sure they're in the PATH!).
The other way to run configure is by specifying the names of the binaries
yourself:
-> CC=i586-mingw32-gcc CXX=i586-mingw32-g++ RANLIB=i586-mingw32-ranlib \
   DLLTOOL=i586-mingw32-dlltool LD=i586-mingw32-ld NM=i586-mingw32-nm \
   ../configure --host=i586-mingw32 --with-mingw --enable-dnd=no

(all assuming you're using mingw32)
Drag'n'drop is disabled because mingw32 lacks (AFAIK) OLE headers.

[ Update: some new mingw32 versions now have a new set of windows header
files, which apparently can handle ole. Untested at the moment ]

Configure will conclude that shared libraries are out of the question and
opt for a static one. I haven't looked into DLL creation yet.

Type
-> make
and wait, wait, wait. Don't leave the room, because the minute you do there
will be a compile error :-)

If this is successful, you end up with a libwx_msw.a in win32/lib.  Now try
building the minimal sample:

-> cd samples/minimal
-> make
-> mv minimal minimal.exe

and run it with wine, for example
-> wine minimal.exe

If all is well, do an install; from win32
-> make install

Native and cross-compiled installations can co-exist peacefully
(as long as their widget sets differ), except for wx-config. You might
want to rename the cross-compiled one to i586-mingw32-wx-config, or something.

Cross-compiling TODO:
---------------------
- resource compiling must be done manually for now (should/can we link the
default wx resources into libwx_msw.a?) [ No we can't; the linker won't
link it in... you have to supply an object file ]
- dynamic libraries
- static executables are HUGE -- there must be room for improvement.

