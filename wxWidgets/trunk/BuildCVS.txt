------------------------------------------------------------------------
                How to build the sources from CVS
------------------------------------------------------------------------

Please use the install.txt files in docs/gtk, docs/msw, docs/motif, docs/mac
etc. alongside these instructions.

I) Windows using plain makefiles
----------------------------------------

a) If using Microsoft Visual C++ 5.0 or 6.0

Ensure that the command-line compiler and tools (including
nmake) are installed and ready to run.  Depending on your
installation there may be a batch file (named something like
VCVARS32.BAT) that needs to be run to set correct environment
varaibles and PATH entries.

Continue with item c) below.


b) If using the GNU Mingw32 or GNU Cygwin32 compilers

You can get Mingw32 from  http://www.mingw.org

Cygwin32 is available at  http://www.cygwin.com

The makefile might have small problems with Cygwin's tools
so it is recommended to use Mingw32 and its toolchain instead
if possible.

-> Set your path so that it includes the directory
   where your compiler and tools reside

-> If your are using an old Mingw32 version (gcc-2.95 or older),
   you might need to fix some headers with the patches contained
   in the wxWin\Mingw32-gcc295.patches file. PLEASE APPLY THESE
   PATCHES BY HAND! There are apparently a few different versions
   of the headers floating around. Note that these patches are
   not needed if you are using Mingw32 gcc-2.95.2 or newer.
  
-> Edit wx/src/makeg95.env and set the MINGW32 variable at the top of
   the file to either 1 (you have Mingw32) or 0 (you have Cygwin32).
   If using MINGW32, also set the MINGW32VERSION variable
   appropiately.


c) Build instructions

-> Assumming that you installed the wxWindows sources
   into c:\wxWin
-> Copy c:\wxWin\include\wx\msw\setup0.h
   to   c:\wxWin\include\wx\msw\setup.h
-> Edit c:\wxWin\include\wx\msw\setup.h so that
   most features are enabled (i.e. defined to 1), for example:
   #define wxUSE_ODBC          0
   #define wxUSE_SOCKETS       1
   #define wxUSE_HTML          1
   #define wxUSE_THREADS       1
   #define wxUSE_FS_INET       0
   #define wxUSE_FS_ZIP        1
   #define wxUSE_BUSYINFO      1
   #define wxUSE_DYNLIB_CLASS  1
   #define wxUSE_ZIPSTREAM     1
   #define wxUSE_LIBJPEG       1
   #define wxUSE_LIBPNG        1

   and std iostreams are disabled with
   #define wxUSE_STD_IOSTREAM   0
 
-> type: cd c:\wxWin\src\msw
-> type: make -f makefile.g95  (if using GNU tools)
or type: nmake -f makefile.vc   (if using MS VC++)


II) Unix ports
--------------

Building wxGTK or wxMotif completely without configure
won't ever work, but there is now a new makefile system
that works without libtool and automake, using only
configure to create what is needed.

In order to create configure, you need to have the
GNU autoconf package (version 2.13 or 2.14) installed
on your system and type run "autoconf" in the base
directory (or run the autogen.sh script in the same
directory, which just calls autoconf).

Set WXWIN environment variable to the base directory such
as ~/wxWindows (this is actually not really needed).

-> type: export WXWIN=~/wxWindows
-> type: md mybuild
-> type: cd mybuild
-> type: ../configure --with-motif
or type: ../configure --with-gtk
-> type: make
-> type: su <type root password>
-> type: make install
-> type: ldconfig
-> type: exit

Call configure with --disable-shared to create a static
library. Calling "make uninstall" will remove the installed
library and "make dist" will create a distribution (not
yet complete).

III) Windows using configure
----------------------------------------

Take a look at Unix->Windows cross compiling. With minor
modifications, this should work in Windows if you've got the cygnus
utilities (bash, GNU make, etc) and either mingw32 or cygwin32 installed.
See http://www.cygnus.com for these programs, or go straight to their
ftp server at ftp://sourceware.cygnus.com/pub/cygwin/.

Of course, you can also build the library using plain makefiles (see
section I).

IV) Classic MacOS using CodeWarrior (eg MacOS 8.x/9.x)
----------------------------------------

Refer to the readme.txt and install.txt files in docs/mac to build
wxWindows under Classic Mac OS using CodeWarrior.

If you are checking out the CVS sources using cvs under Mac OS X and
compiling under Classic Mac OS:

- make sure that all text files have a Mac OS type of 'TEXT' otherwise
  CodeWarrior may ignore them. Checking out the CVS sources using cvs
  under Mac OS X creates untyped files which can lead to compilation
  errors under CodeWarrior which are hard to track down.

- convert the xml files to CodeWarrior binary projects using the supplied
  AppleScript in docs/mac (M5xml2mcp.applescript for CodeWarrior 5.3)

V) MacOS X using configure and the Developer Tools
----------------------------------------

You need to have the Developer Tools installed. If this is not the case,
you will need to register at the Apple Developer web site (this is a free
registration) in order to download the Developer Tools installer.

In order to create configure, you need to have the
GNU autoconf package (version 2.13 or 2.14) installed
on your system and type run "autoconf" in the base
directory (or run the autogen.sh script in the same
directory, which just calls autoconf).

-> type: mkdir macbuild
-> type: cd macbuild
-> type: ../configure --with-mac
or type: ../configure
-> type: make

VI) OS/2
----------------------------------------

VII) Unix->Windows cross-compiling using configure
--------------------------------------------------

First you'll need a cross-compiler; linux glibc binaries of mingw32 and
cygwin32 (both based on egcs) can be found at
ftp://ftp.objsw.com/pub/crossgcc/linux-x-win32. Alternative binaries,
based on the latest MinGW release can be found at
http://members.telering.at/jessich/mingw/mingwcross/mingw_cross.html 
Otherwise you can compile one yourself.

[ A Note about cygwin32 and mingw32: the main difference is that cygwin32
binaries are always linked against cygwin.dll. This dll encapsulates most
standard Unix C extensions, which is very handy if you're porting unix
software to windows. However, wxMSW doesn't need this, so mingw32 is
preferable if you write portable C(++). ]

You might want to build both Unix and Windows binaries in the same source
tree; to do this make subdirs for each e.g. unix and win32. If you've
already build wxWindows in the main dir, do a 'make distclean' there,
otherwise configure will get confused. (In any case, read the section 'Unix
using configure' and make sure you're able to build a native wxWindows
library; cross-compiling errors can be pretty obscure and you'll want to be
sure that your configure setup is basically sound.)

To cross compile the windows library, do
-> cd win32
(or whatever you called it)
Now run configure. There are two ways to do this
-> ../configure --host=i586-mingw32 --build=i586-linux --with-mingw
where --build= should read whatever platform you're building on. Configure
will notice that build and host platforms differ, and automatically prepend
i586-mingw32- to gcc, ar, ld, etc (make sure they're in the PATH!).
The other way to run configure is by specifying the names of the binaries
yourself:
-> CC=i586-mingw32-gcc CXX=i586-mingw32-g++ RANLIB=i586-mingw32-ranlib \
   DLLTOOL=i586-mingw32-dlltool LD=i586-mingw32-ld NM=i586-mingw32-nm \
   ../configure --host=i586-mingw32 --with-mingw

(all assuming you're using mingw32)
By default this will compile a DLL, if you want a static library,
specify --disable-shared.

Type
-> make
and wait, wait, wait. Don't leave the room, because the minute you do there
will be a compile error :-)

NB: if you are using a very old compiler you risk to get quite a few warnings
    about "ANSI C++ forbids implicit conversion from 'void *'" in all places
    where va_arg macro is used. This is due to a bug in (some versions of)
    mingw32 headers which may be corrected by upgrading your compier,
    otherwise you might edit the file

    ${install_prefix}/lib/gcc-lib/i586-mingw32/egcs-2.91.57/include/stdarg.h

    (instead of egcs-2.91.57 you may have something different), searching for
    the lines

/* Define __gnuc_va_list.  */

#ifndef __GNUC_VA_LIST
#define __GNUC_VA_LIST
#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__NetBSD__)
typedef char *__gnuc_va_list;
#else
typedef void *__gnuc_va_list;
#endif
#endif

    and adding "|| defined(_WIN32)" to the list of platforms on which
    __gnuc_va_list is char *.

If this is successful, you end up with a wx23_2.dll/libwx23_2.a in win32/lib
( or just libwx_msw.a if you opted for a static build ).
Now try building the minimal sample:

-> cd samples/minimal
-> make

and run it with wine, for example (or copy to a Windows box)
-> wine minimal.exe

If all is well, do an install; from win32
-> make install

Native and cross-compiled installations can co-exist peacefully
(as long as their widget sets differ), except for wx-config. You might
want to rename the cross-compiled one to i586-mingw32-wx-config, or something.

Cross-compiling TODO:
---------------------
- resource compiling must be done manually for now (should/can we link the
default wx resources into libwx_msw.a?) [ No we can't; the linker won't
link it in... you have to supply an object file ]
- static executables are HUGE -- there must be room for improvement.

