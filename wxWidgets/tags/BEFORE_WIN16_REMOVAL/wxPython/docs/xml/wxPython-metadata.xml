<?xml version="1.0"?>
<wxPython-metadata>
  <module name="core">
    <pythoncode>
#// Give a reference to the dictionary of this module to the C++ extension
#// code.
_core._wxPySetDictionary(vars())

#// A little trick to make 'wx' be a reference to this module so wx.Names can
#// be used here.
import sys as _sys
wx = _sys.modules[__name__]
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Object" oldname="wxObject" module="core">
      <docstring>The base class for most wx objects, although in wxPython not
much functionality is needed nor exposed.</docstring>
      <method name="GetClassName" type="String" overloaded="no">
        <autodoc>GetClassName() -&gt; String</autodoc>
        <docstring>Returns the class name of the C++ object using wxRTTI.</docstring>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
        <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Size" oldname="wxSize" module="core">
      <docstring>wx.Size is a useful data structure used to represent the size of something.
It simply contians integer width and height proprtites.  In most places in
wxPython where a wx.Size is expected a (width,height) tuple can be used
instead.</docstring>
      <constructor name="Size" overloaded="no">
        <autodoc>__init__(int w=0, int h=0) -&gt; Size</autodoc>
        <docstring>Creates a size object.</docstring>
        <paramlist>
          <param name="w" type="int" default="0"/>
          <param name="h" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxSize" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <property name="width" type="int" readonly="no"/>
      <property name="height" type="int" readonly="no"/>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Size sz) -&gt; bool</autodoc>
        <docstring>Test for equality of wx.Size objects.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Size sz) -&gt; bool</autodoc>
        <docstring>Test for inequality.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="__add__" type="Size" overloaded="no">
        <autodoc>__add__(Size sz) -&gt; Size</autodoc>
        <docstring>Add sz's proprties to this and return the result.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="Size" overloaded="no">
        <autodoc>__sub__(Size sz) -&gt; Size</autodoc>
        <docstring>Subtract sz's properties from this and return the result.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="IncTo" type="" overloaded="no">
        <autodoc>IncTo(Size sz)</autodoc>
        <docstring>Increments this object so that both of its dimensions are not less
than the corresponding dimensions of the size.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="DecTo" type="" overloaded="no">
        <autodoc>DecTo(Size sz)</autodoc>
        <docstring>Decrements this object so that both of its dimensions are not greater
than the corresponding dimensions of the size.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(int w, int h)</autodoc>
        <docstring>Set both width and height.</docstring>
        <paramlist>
          <param name="w" type="int" default=""/>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(int w)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetHeight" type="" overloaded="no">
        <autodoc>SetHeight(int h)</autodoc>
        <paramlist>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; (width,height)</autodoc>
        <docstring>Returns the width and height properties as a tuple.</docstring>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="RealPoint" oldname="wxRealPoint" module="core">
      <docstring>A data structure for representing a point or position with floating point x
and y properties.  In wxPython most places that expect a wx.RealPoint can also
accept a (x,y) tuple.</docstring>
      <constructor name="RealPoint" overloaded="no">
        <autodoc>__init__(double x=0.0, double y=0.0) -&gt; RealPoint</autodoc>
        <docstring>Create a wx.RealPoint object</docstring>
        <paramlist>
          <param name="x" type="double" default="0.0"/>
          <param name="y" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxRealPoint" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <property name="x" type="double" readonly="no"/>
      <property name="y" type="double" readonly="no"/>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(RealPoint pt) -&gt; bool</autodoc>
        <docstring>Test for equality of wx.RealPoint objects.</docstring>
        <paramlist>
          <param name="pt" type="RealPoint" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(RealPoint pt) -&gt; bool</autodoc>
        <docstring>Test for inequality of wx.RealPoint objects.</docstring>
        <paramlist>
          <param name="pt" type="RealPoint" default=""/>
        </paramlist>
      </method>
      <method name="__add__" type="RealPoint" overloaded="no">
        <autodoc>__add__(RealPoint pt) -&gt; RealPoint</autodoc>
        <docstring>Add pt's proprties to this and return the result.</docstring>
        <paramlist>
          <param name="pt" type="RealPoint" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="RealPoint" overloaded="no">
        <autodoc>__sub__(RealPoint pt) -&gt; RealPoint</autodoc>
        <docstring>Subtract pt's proprties from this and return the result</docstring>
        <paramlist>
          <param name="pt" type="RealPoint" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(double x, double y)</autodoc>
        <docstring>Set both the x and y properties</docstring>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; (x,y)</autodoc>
        <docstring>Return the x and y properties as a tuple. </docstring>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Point" oldname="wxPoint" module="core">
      <docstring>A data structure for representing a point or position with integer x and y
properties.  Most places in wxPython that expect a wx.Point can also accept a
(x,y) tuple.</docstring>
      <constructor name="Point" overloaded="no">
        <autodoc>__init__(int x=0, int y=0) -&gt; Point</autodoc>
        <docstring>Create a wx.Point object</docstring>
        <paramlist>
          <param name="x" type="int" default="0"/>
          <param name="y" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPoint" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <property name="x" type="int" readonly="no"/>
      <property name="y" type="int" readonly="no"/>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Point pt) -&gt; bool</autodoc>
        <docstring>Test for equality of wx.Point objects.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Point pt) -&gt; bool</autodoc>
        <docstring>Test for inequality of wx.Point objects.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="__add__" type="Point" overloaded="no">
        <autodoc>__add__(Point pt) -&gt; Point</autodoc>
        <docstring>Add pt's proprties to this and return the result.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="Point" overloaded="no">
        <autodoc>__sub__(Point pt) -&gt; Point</autodoc>
        <docstring>Subtract pt's proprties from this and return the result</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="__iadd__" type="Point" overloaded="no">
        <autodoc>__iadd__(Point pt) -&gt; Point</autodoc>
        <docstring>Add pt to this object.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="__isub__" type="Point" overloaded="no">
        <autodoc>__isub__(Point pt) -&gt; Point</autodoc>
        <docstring>Subtract pt from this object.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(long x, long y)</autodoc>
        <docstring>Set both the x and y properties</docstring>
        <paramlist>
          <param name="x" type="long" default=""/>
          <param name="y" type="long" default=""/>
        </paramlist>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; (x,y)</autodoc>
        <docstring>Return the x and y properties as a tuple. </docstring>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Rect" oldname="wxRect" module="core">
      <docstring>A class for representing and manipulating rectangles.  It has x, y, width and
height properties.  In wxPython most palces that expect a wx.Rect can also
accept a (x,y,width,height) tuple.</docstring>
      <constructor name="Rect" overloaded="no">
        <autodoc>__init__(int x=0, int y=0, int width=0, int height=0) -&gt; Rect</autodoc>
        <docstring>Create a new Rect object.</docstring>
        <paramlist>
          <param name="x" type="int" default="0"/>
          <param name="y" type="int" default="0"/>
          <param name="width" type="int" default="0"/>
          <param name="height" type="int" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="RectPP" overloaded="no">
        <autodoc>RectPP(Point topLeft, Point bottomRight) -&gt; Rect</autodoc>
        <docstring>Create a new Rect object from Points representing two corners.</docstring>
        <paramlist>
          <param name="topLeft" type="Point" default=""/>
          <param name="bottomRight" type="Point" default=""/>
        </paramlist>
      </constructor>
      <constructor name="RectPS" overloaded="no">
        <autodoc>RectPS(Point pos, Size size) -&gt; Rect</autodoc>
        <docstring>Create a new Rect from a position and size.</docstring>
        <paramlist>
          <param name="pos" type="Point" default=""/>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxRect" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetX" type="int" overloaded="no">
        <autodoc>GetX() -&gt; int</autodoc>
      </method>
      <method name="SetX" type="" overloaded="no">
        <autodoc>SetX(int x)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetY" type="int" overloaded="no">
        <autodoc>GetY() -&gt; int</autodoc>
      </method>
      <method name="SetY" type="" overloaded="no">
        <autodoc>SetY(int y)</autodoc>
        <paramlist>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(int w)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
      </method>
      <method name="SetHeight" type="" overloaded="no">
        <autodoc>SetHeight(int h)</autodoc>
        <paramlist>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(Point p)</autodoc>
        <paramlist>
          <param name="p" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(Size s)</autodoc>
        <paramlist>
          <param name="s" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="GetTopLeft" type="Point" overloaded="no">
        <autodoc>GetTopLeft() -&gt; Point</autodoc>
      </method>
      <method name="SetTopLeft" type="" overloaded="no">
        <autodoc>SetTopLeft(Point p)</autodoc>
        <paramlist>
          <param name="p" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetBottomRight" type="Point" overloaded="no">
        <autodoc>GetBottomRight() -&gt; Point</autodoc>
      </method>
      <method name="SetBottomRight" type="" overloaded="no">
        <autodoc>SetBottomRight(Point p)</autodoc>
        <paramlist>
          <param name="p" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetLeft" type="int" overloaded="no">
        <autodoc>GetLeft() -&gt; int</autodoc>
      </method>
      <method name="GetTop" type="int" overloaded="no">
        <autodoc>GetTop() -&gt; int</autodoc>
      </method>
      <method name="GetBottom" type="int" overloaded="no">
        <autodoc>GetBottom() -&gt; int</autodoc>
      </method>
      <method name="GetRight" type="int" overloaded="no">
        <autodoc>GetRight() -&gt; int</autodoc>
      </method>
      <method name="SetLeft" type="" overloaded="no">
        <autodoc>SetLeft(int left)</autodoc>
        <paramlist>
          <param name="left" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRight" type="" overloaded="no">
        <autodoc>SetRight(int right)</autodoc>
        <paramlist>
          <param name="right" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetTop" type="" overloaded="no">
        <autodoc>SetTop(int top)</autodoc>
        <paramlist>
          <param name="top" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetBottom" type="" overloaded="no">
        <autodoc>SetBottom(int bottom)</autodoc>
        <paramlist>
          <param name="bottom" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Inflate" type="Rect" overloaded="no">
        <autodoc>Inflate(int dx, int dy) -&gt; Rect</autodoc>
        <docstring>Increase the rectangle size by dx in x direction and dy in y direction. Both
(or one of) parameters may be negative to decrease the rectangle size.</docstring>
        <paramlist>
          <param name="dx" type="int" default=""/>
          <param name="dy" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Deflate" type="Rect" overloaded="no">
        <autodoc>Deflate(int dx, int dy) -&gt; Rect</autodoc>
        <docstring>Decrease the rectangle size by dx in x direction and dy in y direction. Both
(or one of) parameters may be negative to increase the rectngle size. This
method is the opposite of Inflate.</docstring>
        <paramlist>
          <param name="dx" type="int" default=""/>
          <param name="dy" type="int" default=""/>
        </paramlist>
      </method>
      <method name="OffsetXY" type="" overloaded="no">
        <autodoc>OffsetXY(int dx, int dy)</autodoc>
        <docstring>Moves the rectangle by the specified offset. If dx is positive, the rectangle
is moved to the right, if dy is positive, it is moved to the bottom, otherwise
it is moved to the left or top respectively.</docstring>
        <paramlist>
          <param name="dx" type="int" default=""/>
          <param name="dy" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Offset" type="" overloaded="no">
        <autodoc>Offset(Point pt)</autodoc>
        <docstring>Same as OffsetXY but uses dx,dy from Point</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="Intersect" type="Rect" overloaded="no">
        <autodoc>Intersect(Rect rect) -&gt; Rect</autodoc>
        <docstring>Return the intersectsion of this rectangle and rect.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="__add__" type="Rect" overloaded="no">
        <autodoc>__add__(Rect rect) -&gt; Rect</autodoc>
        <docstring>Add the properties of rect to this rectangle and return the result.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="__iadd__" type="Rect" overloaded="no">
        <autodoc>__iadd__(Rect rect) -&gt; Rect</autodoc>
        <docstring>Add the properties of rect to this rectangle, updating this rectangle.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Rect rect) -&gt; bool</autodoc>
        <docstring>Test for equality.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Rect rect) -&gt; bool</autodoc>
        <docstring>Test for inequality.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="InsideXY" type="bool" overloaded="no">
        <autodoc>InsideXY(int x, int y) -&gt; bool</autodoc>
        <docstring>Return True if the point is (not strcitly) inside the rect.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Inside" type="bool" overloaded="no">
        <autodoc>Inside(Point pt) -&gt; bool</autodoc>
        <docstring>Return True if the point is (not strcitly) inside the rect.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="Intersects" type="bool" overloaded="no">
        <autodoc>Intersects(Rect rect) -&gt; bool</autodoc>
        <docstring>Returns True if the rectangles have a non empty intersection.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <property name="x" type="int" readonly="no"/>
      <property name="y" type="int" readonly="no"/>
      <property name="width" type="int" readonly="no"/>
      <property name="height" type="int" readonly="no"/>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(int x=0, int y=0, int width=0, int height=0)</autodoc>
        <docstring>Set all rectangle properties.</docstring>
        <paramlist>
          <param name="x" type="int" default="0"/>
          <param name="y" type="int" default="0"/>
          <param name="width" type="int" default="0"/>
          <param name="height" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; (x,y,width,height)</autodoc>
        <docstring>Return the rectangle properties as a tuple.</docstring>
      </method>
    </class>
    <method name="IntersectRect" oldname="wxIntersectRect" type="PyObject" overloaded="no">
      <autodoc>IntersectRect(Rect r1, Rect r2) -&gt; Rect</autodoc>
      <docstring>Calculate and return the intersection of r1 and r2.</docstring>
      <paramlist>
        <param name="r1" type="Rect" default=""/>
        <param name="r2" type="Rect" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Point2D" oldname="wxPoint2D" module="core">
      <docstring>wx.Point2Ds represent a point or a vector in a 2d coordinate system with floating point values.</docstring>
      <constructor name="Point2D" overloaded="no">
        <autodoc>__init__(double x=0.0, double y=0.0) -&gt; Point2D</autodoc>
        <docstring>Create a w.Point2D object.</docstring>
        <paramlist>
          <param name="x" type="double" default="0.0"/>
          <param name="y" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <constructor name="Point2DCopy" overloaded="no">
        <autodoc>Point2DCopy(Point2D pt) -&gt; Point2D</autodoc>
        <docstring>Create a w.Point2D object.</docstring>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </constructor>
      <constructor name="Point2DFromPoint" overloaded="no">
        <autodoc>Point2DFromPoint(Point pt) -&gt; Point2D</autodoc>
        <docstring>Create a w.Point2D object.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </constructor>
      <method name="GetFloor" type="" overloaded="no">
        <autodoc>GetFloor() -&gt; (x,y)</autodoc>
        <docstring>Convert to integer</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetRounded" type="" overloaded="no">
        <autodoc>GetRounded() -&gt; (x,y)</autodoc>
        <docstring>Convert to integer</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetVectorLength" type="double" overloaded="no">
        <autodoc>GetVectorLength() -&gt; double</autodoc>
      </method>
      <method name="GetVectorAngle" type="double" overloaded="no">
        <autodoc>GetVectorAngle() -&gt; double</autodoc>
      </method>
      <method name="SetVectorLength" type="" overloaded="no">
        <autodoc>SetVectorLength(double length)</autodoc>
        <paramlist>
          <param name="length" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetVectorAngle" type="" overloaded="no">
        <autodoc>SetVectorAngle(double degrees)</autodoc>
        <paramlist>
          <param name="degrees" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetDistance" type="double" overloaded="no">
        <autodoc>GetDistance(Point2D pt) -&gt; double</autodoc>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="GetDistanceSquare" type="double" overloaded="no">
        <autodoc>GetDistanceSquare(Point2D pt) -&gt; double</autodoc>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="GetDotProduct" type="double" overloaded="no">
        <autodoc>GetDotProduct(Point2D vec) -&gt; double</autodoc>
        <paramlist>
          <param name="vec" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="GetCrossProduct" type="double" overloaded="no">
        <autodoc>GetCrossProduct(Point2D vec) -&gt; double</autodoc>
        <paramlist>
          <param name="vec" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="__neg__" type="Point2D" overloaded="no">
        <autodoc>__neg__() -&gt; Point2D</autodoc>
        <docstring>the reflection of this point</docstring>
      </method>
      <method name="__iadd__" type="Point2D" overloaded="no">
        <autodoc>__iadd__(Point2D pt) -&gt; Point2D</autodoc>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="__isub__" type="Point2D" overloaded="no">
        <autodoc>__isub__(Point2D pt) -&gt; Point2D</autodoc>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="__imul__" type="Point2D" overloaded="no">
        <autodoc>__imul__(Point2D pt) -&gt; Point2D</autodoc>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="__idiv__" type="Point2D" overloaded="no">
        <autodoc>__idiv__(Point2D pt) -&gt; Point2D</autodoc>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Point2D pt) -&gt; bool</autodoc>
        <docstring>Test for equality</docstring>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Point2D pt) -&gt; bool</autodoc>
        <docstring>Test for inequality</docstring>
        <paramlist>
          <param name="pt" type="Point2D" default=""/>
        </paramlist>
      </method>
      <property name="x" type="double" readonly="no"/>
      <property name="y" type="double" readonly="no"/>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(double x=0, double y=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default="0"/>
          <param name="y" type="double" default="0"/>
        </paramlist>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; (x,y)</autodoc>
        <docstring>Return x and y properties as a tuple.</docstring>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="InputStream" oldname="wxPyInputStream" module="core">
      <constructor name="wxPyInputStream" overloaded="no">
        <autodoc>__init__(PyObject p) -&gt; InputStream</autodoc>
        <paramlist>
          <param name="p" type="PyObject" default=""/>
        </paramlist>
      </constructor>
      <method name="close" type="" overloaded="no">
        <autodoc>close()</autodoc>
      </method>
      <method name="flush" type="" overloaded="no">
        <autodoc>flush()</autodoc>
      </method>
      <method name="eof" type="bool" overloaded="no">
        <autodoc>eof() -&gt; bool</autodoc>
      </method>
      <method name="read" type="PyObject" overloaded="no">
        <autodoc>read(int size=-1) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="size" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="readline" type="PyObject" overloaded="no">
        <autodoc>readline(int size=-1) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="size" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="readlines" type="PyObject" overloaded="no">
        <autodoc>readlines(int sizehint=-1) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="sizehint" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="seek" type="" overloaded="no">
        <autodoc>seek(int offset, int whence=0)</autodoc>
        <paramlist>
          <param name="offset" type="int" default=""/>
          <param name="whence" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="tell" type="int" overloaded="no">
        <autodoc>tell() -&gt; int</autodoc>
      </method>
      <method name="Peek" type="char" overloaded="no">
        <autodoc>Peek() -&gt; char</autodoc>
      </method>
      <method name="GetC" type="char" overloaded="no">
        <autodoc>GetC() -&gt; char</autodoc>
      </method>
      <method name="LastRead" type="size_t" overloaded="no">
        <autodoc>LastRead() -&gt; size_t</autodoc>
      </method>
      <method name="CanRead" type="bool" overloaded="no">
        <autodoc>CanRead() -&gt; bool</autodoc>
      </method>
      <method name="Eof" type="bool" overloaded="no">
        <autodoc>Eof() -&gt; bool</autodoc>
      </method>
      <method name="Ungetch" type="bool" overloaded="no">
        <autodoc>Ungetch(char c) -&gt; bool</autodoc>
        <paramlist>
          <param name="c" type="char" default=""/>
        </paramlist>
      </method>
      <method name="SeekI" type="long" overloaded="no">
        <autodoc>SeekI(long pos, int mode=FromStart) -&gt; long</autodoc>
        <paramlist>
          <param name="pos" type="long" default=""/>
          <param name="mode" type="wxSeekMode" default="wxFromStart"/>
        </paramlist>
      </method>
      <method name="TellI" type="long" overloaded="no">
        <autodoc>TellI() -&gt; long</autodoc>
      </method>
    </class>
    <class name="OutputStream" oldname="wxOutputStream" module="core">
      <method name="write" type="" overloaded="no">
        <autodoc>write(PyObject obj)</autodoc>
        <paramlist>
          <param name="obj" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="FSFile" oldname="wxFSFile" module="core">
      <baseclass name="Object"/>
      <constructor name="FSFile" overloaded="no">
        <autodoc>__init__(InputStream stream, String loc, String mimetype, String anchor, 
    DateTime modif) -&gt; FSFile</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
          <param name="loc" type="String" default=""/>
          <param name="mimetype" type="String" default=""/>
          <param name="anchor" type="String" default=""/>
          <param name="modif" type="wxDateTime" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxFSFile" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetStream" type="wxInputStream" overloaded="no">
        <autodoc>GetStream() -&gt; InputStream</autodoc>
      </method>
      <method name="GetMimeType" type="String" overloaded="no">
        <autodoc>GetMimeType() -&gt; String</autodoc>
      </method>
      <method name="GetLocation" type="String" overloaded="no">
        <autodoc>GetLocation() -&gt; String</autodoc>
      </method>
      <method name="GetAnchor" type="String" overloaded="no">
        <autodoc>GetAnchor() -&gt; String</autodoc>
      </method>
      <method name="GetModificationTime" type="wxDateTime" overloaded="no">
        <autodoc>GetModificationTime() -&gt; DateTime</autodoc>
      </method>
    </class>
    <class name="CPPFileSystemHandler" oldname="wxFileSystemHandler" module="core"/>
    <class name="FileSystemHandler" oldname="wxPyFileSystemHandler" module="core">
      <baseclass name="CPPFileSystemHandler"/>
      <constructor name="wxPyFileSystemHandler" overloaded="no">
        <autodoc>__init__() -&gt; FileSystemHandler</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="CanOpen" type="bool" overloaded="no">
        <autodoc>CanOpen(String location) -&gt; bool</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="OpenFile" type="FSFile" overloaded="no">
        <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
        <paramlist>
          <param name="fs" type="wxFileSystem" default=""/>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindFirst" type="String" overloaded="no">
        <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
        <paramlist>
          <param name="spec" type="String" default=""/>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="FindNext" type="String" overloaded="no">
        <autodoc>FindNext() -&gt; String</autodoc>
      </method>
      <method name="GetProtocol" type="String" overloaded="no">
        <autodoc>GetProtocol(String location) -&gt; String</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetLeftLocation" type="String" overloaded="no">
        <autodoc>GetLeftLocation(String location) -&gt; String</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetAnchor" type="String" overloaded="no">
        <autodoc>GetAnchor(String location) -&gt; String</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetRightLocation" type="String" overloaded="no">
        <autodoc>GetRightLocation(String location) -&gt; String</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetMimeTypeFromExt" type="String" overloaded="no">
        <autodoc>GetMimeTypeFromExt(String location) -&gt; String</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FileSystem" oldname="wxFileSystem" module="core">
      <baseclass name="Object"/>
      <constructor name="FileSystem" overloaded="no">
        <autodoc>__init__() -&gt; FileSystem</autodoc>
      </constructor>
      <destructor name="~wxFileSystem" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="ChangePathTo" type="" overloaded="no">
        <autodoc>ChangePathTo(String location, bool is_dir=False)</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
          <param name="is_dir" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="GetPath" type="String" overloaded="no">
        <autodoc>GetPath() -&gt; String</autodoc>
      </method>
      <method name="OpenFile" type="FSFile" overloaded="no">
        <autodoc>OpenFile(String location) -&gt; FSFile</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindFirst" type="String" overloaded="no">
        <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
        <paramlist>
          <param name="spec" type="String" default=""/>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="FindNext" type="String" overloaded="no">
        <autodoc>FindNext() -&gt; String</autodoc>
      </method>
      <staticmethod name="AddHandler" type="" overloaded="no">
        <autodoc>AddHandler(CPPFileSystemHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="CPPFileSystemHandler" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="CleanUpHandlers" type="" overloaded="no">
        <autodoc>CleanUpHandlers()</autodoc>
      </staticmethod>
      <staticmethod name="FileNameToURL" type="String" overloaded="no">
        <autodoc>FileNameToURL(String filename) -&gt; String</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <method name="FileSystem_URLToFileName" oldname="wxFileSystem_URLToFileName" type="String" overloaded="no">
      <autodoc>FileSystem_URLToFileName(String url) -&gt; String</autodoc>
      <paramlist>
        <param name="url" type="String" default=""/>
      </paramlist>
    </method>
    <class name="InternetFSHandler" oldname="wxInternetFSHandler" module="core">
      <baseclass name="CPPFileSystemHandler"/>
      <constructor name="InternetFSHandler" overloaded="no">
        <autodoc>__init__() -&gt; InternetFSHandler</autodoc>
      </constructor>
      <method name="CanOpen" type="bool" overloaded="no">
        <autodoc>CanOpen(String location) -&gt; bool</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="OpenFile" type="FSFile" overloaded="no">
        <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
        <paramlist>
          <param name="fs" type="FileSystem" default=""/>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="ZipFSHandler" oldname="wxZipFSHandler" module="core">
      <baseclass name="CPPFileSystemHandler"/>
      <constructor name="ZipFSHandler" overloaded="no">
        <autodoc>__init__() -&gt; ZipFSHandler</autodoc>
      </constructor>
      <method name="CanOpen" type="bool" overloaded="no">
        <autodoc>CanOpen(String location) -&gt; bool</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="OpenFile" type="FSFile" overloaded="no">
        <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
        <paramlist>
          <param name="fs" type="FileSystem" default=""/>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindFirst" type="String" overloaded="no">
        <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
        <paramlist>
          <param name="spec" type="String" default=""/>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="FindNext" type="String" overloaded="no">
        <autodoc>FindNext() -&gt; String</autodoc>
      </method>
    </class>
    <method name="__wxMemoryFSHandler_AddFile_wxImage" oldname="__wxMemoryFSHandler_AddFile_wxImage" type="" overloaded="no">
      <autodoc>__wxMemoryFSHandler_AddFile_wxImage(String filename, Image image, long type)</autodoc>
      <paramlist>
        <param name="filename" type="String" default=""/>
        <param name="image" type="wxImage" default=""/>
        <param name="type" type="long" default=""/>
      </paramlist>
    </method>
    <method name="__wxMemoryFSHandler_AddFile_wxBitmap" oldname="__wxMemoryFSHandler_AddFile_wxBitmap" type="" overloaded="no">
      <autodoc>__wxMemoryFSHandler_AddFile_wxBitmap(String filename, Bitmap bitmap, long type)</autodoc>
      <paramlist>
        <param name="filename" type="String" default=""/>
        <param name="bitmap" type="wxBitmap" default=""/>
        <param name="type" type="long" default=""/>
      </paramlist>
    </method>
    <method name="__wxMemoryFSHandler_AddFile_Data" oldname="__wxMemoryFSHandler_AddFile_Data" type="" overloaded="no">
      <autodoc>__wxMemoryFSHandler_AddFile_Data(String filename, PyObject data)</autodoc>
      <paramlist>
        <param name="filename" type="String" default=""/>
        <param name="data" type="PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode>
def MemoryFSHandler_AddFile(filename, a, b=''):
    if isinstance(a, wx.Image):
        __wxMemoryFSHandler_AddFile_wxImage(filename, a, b)
    elif isinstance(a, wx.Bitmap):
        __wxMemoryFSHandler_AddFile_wxBitmap(filename, a, b)
    elif type(a) == str:
        __wxMemoryFSHandler_AddFile_Data(filename, a)
    else: raise TypeError, 'wx.Image, wx.Bitmap or string expected'
</pythoncode>
    <class name="MemoryFSHandler" oldname="wxMemoryFSHandler" module="core">
      <baseclass name="CPPFileSystemHandler"/>
      <constructor name="MemoryFSHandler" overloaded="no">
        <autodoc>__init__() -&gt; MemoryFSHandler</autodoc>
      </constructor>
      <staticmethod name="RemoveFile" type="" overloaded="no">
        <autodoc>RemoveFile(String filename)</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <method name="CanOpen" type="bool" overloaded="no">
        <autodoc>CanOpen(String location) -&gt; bool</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="OpenFile" type="FSFile" overloaded="no">
        <autodoc>OpenFile(FileSystem fs, String location) -&gt; FSFile</autodoc>
        <paramlist>
          <param name="fs" type="FileSystem" default=""/>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindFirst" type="String" overloaded="no">
        <autodoc>FindFirst(String spec, int flags=0) -&gt; String</autodoc>
        <paramlist>
          <param name="spec" type="String" default=""/>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="FindNext" type="String" overloaded="no">
        <autodoc>FindNext() -&gt; String</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ImageHandler" oldname="wxImageHandler" module="core">
      <baseclass name="Object"/>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="GetExtension" type="String" overloaded="no">
        <autodoc>GetExtension() -&gt; String</autodoc>
      </method>
      <method name="GetType" type="long" overloaded="no">
        <autodoc>GetType() -&gt; long</autodoc>
      </method>
      <method name="GetMimeType" type="String" overloaded="no">
        <autodoc>GetMimeType() -&gt; String</autodoc>
      </method>
      <method name="CanRead" type="bool" overloaded="no">
        <autodoc>CanRead(String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetName" type="" overloaded="no">
        <autodoc>SetName(String name)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetExtension" type="" overloaded="no">
        <autodoc>SetExtension(String extension)</autodoc>
        <paramlist>
          <param name="extension" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetType" type="" overloaded="no">
        <autodoc>SetType(long type)</autodoc>
        <paramlist>
          <param name="type" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetMimeType" type="" overloaded="no">
        <autodoc>SetMimeType(String mimetype)</autodoc>
        <paramlist>
          <param name="mimetype" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="ImageHistogram" oldname="wxImageHistogram" module="core">
      <constructor name="ImageHistogram" overloaded="no">
        <autodoc>__init__() -&gt; ImageHistogram</autodoc>
      </constructor>
      <staticmethod name="MakeKey" type="unsigned long" overloaded="no">
        <autodoc>MakeKey(unsigned char r, unsigned char g, unsigned char b) -&gt; unsigned long</autodoc>
        <docstring>Get the key in the histogram for the given RGB values</docstring>
        <paramlist>
          <param name="r" type="unsigned char" default=""/>
          <param name="g" type="unsigned char" default=""/>
          <param name="b" type="unsigned char" default=""/>
        </paramlist>
      </staticmethod>
      <method name="FindFirstUnusedColour" type="bool" overloaded="no">
        <autodoc>FindFirstUnusedColour(int startR=1, int startG=0, int startB=0) -&gt; (success, r, g, b)</autodoc>
        <docstring>Find first colour that is not used in the image and has higher RGB values than
startR, startG, startB.  Returns a tuple consisting of a success flag and rgb
values.</docstring>
        <paramlist>
          <param name="OUTPUT" type="unsigned char" default=""/>
          <param name="OUTPUT" type="unsigned char" default=""/>
          <param name="OUTPUT" type="unsigned char" default=""/>
          <param name="startR" type="unsigned char" default="1"/>
          <param name="startG" type="unsigned char" default="0"/>
          <param name="startB" type="unsigned char" default="0"/>
        </paramlist>
      </method>
    </class>
    <class name="Image" oldname="wxImage" module="core">
      <baseclass name="Object"/>
      <constructor name="Image" overloaded="no">
        <autodoc>__init__(String name, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; Image</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <constructor name="ImageFromMime" overloaded="no">
        <autodoc>ImageFromMime(String name, String mimetype, int index=-1) -&gt; Image</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="mimetype" type="String" default=""/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <constructor name="ImageFromStream" overloaded="no">
        <autodoc>ImageFromStream(InputStream stream, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; Image</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
          <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <constructor name="ImageFromStreamMime" overloaded="no">
        <autodoc>ImageFromStreamMime(InputStream stream, String mimetype, int index=-1) -&gt; Image</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
          <param name="mimetype" type="String" default=""/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <constructor name="EmptyImage" overloaded="no">
        <autodoc>EmptyImage(int width=0, int height=0, bool clear=True) -&gt; Image</autodoc>
        <paramlist>
          <param name="width" type="int" default="0"/>
          <param name="height" type="int" default="0"/>
          <param name="clear" type="bool" default="True"/>
        </paramlist>
      </constructor>
      <constructor name="ImageFromBitmap" overloaded="no">
        <autodoc>ImageFromBitmap(Bitmap bitmap) -&gt; Image</autodoc>
        <paramlist>
          <param name="bitmap" type="wxBitmap" default=""/>
        </paramlist>
      </constructor>
      <constructor name="ImageFromData" overloaded="no">
        <autodoc>ImageFromData(int width, int height, unsigned char data) -&gt; Image</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="data" type="unsigned char" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxImage" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Create" type="" overloaded="no">
        <autodoc>Create(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
        <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
      </method>
      <method name="Scale" type="Image" overloaded="no">
        <autodoc>Scale(int width, int height) -&gt; Image</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ShrinkBy" type="Image" overloaded="no">
        <autodoc>ShrinkBy(int xFactor, int yFactor) -&gt; Image</autodoc>
        <paramlist>
          <param name="xFactor" type="int" default=""/>
          <param name="yFactor" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Rescale" type="Image" overloaded="no">
        <autodoc>Rescale(int width, int height) -&gt; Image</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRGB" type="" overloaded="no">
        <autodoc>SetRGB(int x, int y, unsigned char r, unsigned char g, unsigned char b)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="r" type="unsigned char" default=""/>
          <param name="g" type="unsigned char" default=""/>
          <param name="b" type="unsigned char" default=""/>
        </paramlist>
      </method>
      <method name="GetRed" type="unsigned char" overloaded="no">
        <autodoc>GetRed(int x, int y) -&gt; unsigned char</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetGreen" type="unsigned char" overloaded="no">
        <autodoc>GetGreen(int x, int y) -&gt; unsigned char</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBlue" type="unsigned char" overloaded="no">
        <autodoc>GetBlue(int x, int y) -&gt; unsigned char</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAlpha" type="" overloaded="no">
        <autodoc>SetAlpha(int x, int y, unsigned char alpha)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="alpha" type="unsigned char" default=""/>
        </paramlist>
      </method>
      <method name="GetAlpha" type="unsigned char" overloaded="no">
        <autodoc>GetAlpha(int x, int y) -&gt; unsigned char</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="HasAlpha" type="bool" overloaded="no">
        <autodoc>HasAlpha() -&gt; bool</autodoc>
      </method>
      <method name="FindFirstUnusedColour" type="bool" overloaded="no">
        <autodoc>FindFirstUnusedColour(int startR=1, int startG=0, int startB=0) -&gt; (success, r, g, b)</autodoc>
        <docstring>Find first colour that is not used in the image and has higher RGB values than
startR, startG, startB.  Returns a tuple consisting of a success flag and rgb
values.</docstring>
        <paramlist>
          <param name="OUTPUT" type="byte" default=""/>
          <param name="OUTPUT" type="byte" default=""/>
          <param name="OUTPUT" type="byte" default=""/>
          <param name="startR" type="byte" default="0"/>
          <param name="startG" type="byte" default="0"/>
          <param name="startB" type="byte" default="0"/>
        </paramlist>
      </method>
      <method name="SetMaskFromImage" type="bool" overloaded="no">
        <autodoc>SetMaskFromImage(Image mask, byte mr, byte mg, byte mb) -&gt; bool</autodoc>
        <paramlist>
          <param name="mask" type="Image" default=""/>
          <param name="mr" type="byte" default=""/>
          <param name="mg" type="byte" default=""/>
          <param name="mb" type="byte" default=""/>
        </paramlist>
      </method>
      <staticmethod name="CanRead" type="bool" overloaded="no">
        <autodoc>CanRead(String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetImageCount" type="int" overloaded="no">
        <autodoc>GetImageCount(String name, long type=BITMAP_TYPE_ANY) -&gt; int</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
        </paramlist>
      </staticmethod>
      <method name="LoadFile" type="bool" overloaded="no">
        <autodoc>LoadFile(String name, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="LoadMimeFile" type="bool" overloaded="no">
        <autodoc>LoadMimeFile(String name, String mimetype, int index=-1) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="mimetype" type="String" default=""/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="SaveFile" type="bool" overloaded="no">
        <autodoc>SaveFile(String name, int type) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SaveMimeFile" type="bool" overloaded="no">
        <autodoc>SaveMimeFile(String name, String mimetype) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="mimetype" type="String" default=""/>
        </paramlist>
      </method>
      <staticmethod name="CanReadStream" type="bool" overloaded="no">
        <autodoc>CanReadStream(InputStream stream) -&gt; bool</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
        </paramlist>
      </staticmethod>
      <method name="LoadStream" type="bool" overloaded="no">
        <autodoc>LoadStream(InputStream stream, long type=BITMAP_TYPE_ANY, int index=-1) -&gt; bool</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
          <param name="type" type="long" default="wxBITMAP_TYPE_ANY"/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="LoadMimeStream" type="bool" overloaded="no">
        <autodoc>LoadMimeStream(InputStream stream, String mimetype, int index=-1) -&gt; bool</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
          <param name="mimetype" type="String" default=""/>
          <param name="index" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
      </method>
      <method name="GetSubImage" type="Image" overloaded="no">
        <autodoc>GetSubImage(Rect rect) -&gt; Image</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="Copy" type="Image" overloaded="no">
        <autodoc>Copy() -&gt; Image</autodoc>
      </method>
      <method name="Paste" type="" overloaded="no">
        <autodoc>Paste(Image image, int x, int y)</autodoc>
        <paramlist>
          <param name="image" type="Image" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetData" type="PyObject" overloaded="no">
        <autodoc>GetData() -&gt; PyObject</autodoc>
      </method>
      <method name="SetData" type="" overloaded="no">
        <autodoc>SetData(PyObject data)</autodoc>
        <paramlist>
          <param name="data" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetDataBuffer" type="PyObject" overloaded="no">
        <autodoc>GetDataBuffer() -&gt; PyObject</autodoc>
      </method>
      <method name="SetDataBuffer" type="" overloaded="no">
        <autodoc>SetDataBuffer(PyObject data)</autodoc>
        <paramlist>
          <param name="data" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetAlphaData" type="PyObject" overloaded="no">
        <autodoc>GetAlphaData() -&gt; PyObject</autodoc>
      </method>
      <method name="SetAlphaData" type="" overloaded="no">
        <autodoc>SetAlphaData(PyObject data)</autodoc>
        <paramlist>
          <param name="data" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetAlphaBuffer" type="PyObject" overloaded="no">
        <autodoc>GetAlphaBuffer() -&gt; PyObject</autodoc>
      </method>
      <method name="SetAlphaBuffer" type="" overloaded="no">
        <autodoc>SetAlphaBuffer(PyObject data)</autodoc>
        <paramlist>
          <param name="data" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetMaskColour" type="" overloaded="no">
        <autodoc>SetMaskColour(unsigned char r, unsigned char g, unsigned char b)</autodoc>
        <paramlist>
          <param name="r" type="unsigned char" default=""/>
          <param name="g" type="unsigned char" default=""/>
          <param name="b" type="unsigned char" default=""/>
        </paramlist>
      </method>
      <method name="GetMaskRed" type="unsigned char" overloaded="no">
        <autodoc>GetMaskRed() -&gt; unsigned char</autodoc>
      </method>
      <method name="GetMaskGreen" type="unsigned char" overloaded="no">
        <autodoc>GetMaskGreen() -&gt; unsigned char</autodoc>
      </method>
      <method name="GetMaskBlue" type="unsigned char" overloaded="no">
        <autodoc>GetMaskBlue() -&gt; unsigned char</autodoc>
      </method>
      <method name="SetMask" type="" overloaded="no">
        <autodoc>SetMask(bool mask=True)</autodoc>
        <paramlist>
          <param name="mask" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="HasMask" type="bool" overloaded="no">
        <autodoc>HasMask() -&gt; bool</autodoc>
      </method>
      <method name="Rotate" type="Image" overloaded="no">
        <autodoc>Rotate(double angle, Point centre_of_rotation, bool interpolating=True, 
    Point offset_after_rotation=None) -&gt; Image</autodoc>
        <paramlist>
          <param name="angle" type="double" default=""/>
          <param name="centre_of_rotation" type="Point" default=""/>
          <param name="interpolating" type="bool" default="True"/>
          <param name="offset_after_rotation" type="Point" default="NULL"/>
        </paramlist>
      </method>
      <method name="Rotate90" type="Image" overloaded="no">
        <autodoc>Rotate90(bool clockwise=True) -&gt; Image</autodoc>
        <paramlist>
          <param name="clockwise" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Mirror" type="Image" overloaded="no">
        <autodoc>Mirror(bool horizontally=True) -&gt; Image</autodoc>
        <paramlist>
          <param name="horizontally" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Replace" type="" overloaded="no">
        <autodoc>Replace(unsigned char r1, unsigned char g1, unsigned char b1, 
    unsigned char r2, unsigned char g2, unsigned char b2)</autodoc>
        <paramlist>
          <param name="r1" type="unsigned char" default=""/>
          <param name="g1" type="unsigned char" default=""/>
          <param name="b1" type="unsigned char" default=""/>
          <param name="r2" type="unsigned char" default=""/>
          <param name="g2" type="unsigned char" default=""/>
          <param name="b2" type="unsigned char" default=""/>
        </paramlist>
      </method>
      <method name="ConvertToMono" type="Image" overloaded="no">
        <autodoc>ConvertToMono(unsigned char r, unsigned char g, unsigned char b) -&gt; Image</autodoc>
        <paramlist>
          <param name="r" type="unsigned char" default=""/>
          <param name="g" type="unsigned char" default=""/>
          <param name="b" type="unsigned char" default=""/>
        </paramlist>
      </method>
      <method name="SetOption" type="" overloaded="no">
        <autodoc>SetOption(String name, String value)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetOptionInt" type="" overloaded="no">
        <autodoc>SetOptionInt(String name, int value)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="value" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetOption" type="String" overloaded="no">
        <autodoc>GetOption(String name) -&gt; String</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetOptionInt" type="int" overloaded="no">
        <autodoc>GetOptionInt(String name) -&gt; int</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="HasOption" type="bool" overloaded="no">
        <autodoc>HasOption(String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="CountColours" type="unsigned long" overloaded="no">
        <autodoc>CountColours(unsigned long stopafter=(unsigned long) -1) -&gt; unsigned long</autodoc>
        <paramlist>
          <param name="stopafter" type="unsigned long" default="(unsigned long) -1"/>
        </paramlist>
      </method>
      <method name="ComputeHistogram" type="unsigned long" overloaded="no">
        <autodoc>ComputeHistogram(ImageHistogram h) -&gt; unsigned long</autodoc>
        <paramlist>
          <param name="h" type="ImageHistogram" default=""/>
        </paramlist>
      </method>
      <staticmethod name="AddHandler" type="" overloaded="no">
        <autodoc>AddHandler(ImageHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="ImageHandler" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="InsertHandler" type="" overloaded="no">
        <autodoc>InsertHandler(ImageHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="ImageHandler" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="RemoveHandler" type="bool" overloaded="no">
        <autodoc>RemoveHandler(String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetImageExtWildcard" type="String" overloaded="no">
        <autodoc>GetImageExtWildcard() -&gt; String</autodoc>
      </staticmethod>
      <method name="ConvertToBitmap" type="wxBitmap" overloaded="no">
        <autodoc>ConvertToBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="ConvertToMonoBitmap" type="wxBitmap" overloaded="no">
        <autodoc>ConvertToMonoBitmap(unsigned char red, unsigned char green, unsigned char blue) -&gt; Bitmap</autodoc>
        <paramlist>
          <param name="red" type="unsigned char" default=""/>
          <param name="green" type="unsigned char" default=""/>
          <param name="blue" type="unsigned char" default=""/>
        </paramlist>
      </method>
    </class>
    <method name="InitAllImageHandlers" oldname="wxInitAllImageHandlers" type="" overloaded="no">
      <autodoc>InitAllImageHandlers()</autodoc>
    </method>
    <class name="BMPHandler" oldname="wxBMPHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="BMPHandler" overloaded="no">
        <autodoc>__init__() -&gt; BMPHandler</autodoc>
      </constructor>
    </class>
    <class name="ICOHandler" oldname="wxICOHandler" module="core">
      <baseclass name="BMPHandler"/>
      <constructor name="ICOHandler" overloaded="no">
        <autodoc>__init__() -&gt; ICOHandler</autodoc>
      </constructor>
    </class>
    <class name="CURHandler" oldname="wxCURHandler" module="core">
      <baseclass name="ICOHandler"/>
      <constructor name="CURHandler" overloaded="no">
        <autodoc>__init__() -&gt; CURHandler</autodoc>
      </constructor>
    </class>
    <class name="ANIHandler" oldname="wxANIHandler" module="core">
      <baseclass name="CURHandler"/>
      <constructor name="ANIHandler" overloaded="no">
        <autodoc>__init__() -&gt; ANIHandler</autodoc>
      </constructor>
    </class>
    <class name="PNGHandler" oldname="wxPNGHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="PNGHandler" overloaded="no">
        <autodoc>__init__() -&gt; PNGHandler</autodoc>
      </constructor>
    </class>
    <class name="GIFHandler" oldname="wxGIFHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="GIFHandler" overloaded="no">
        <autodoc>__init__() -&gt; GIFHandler</autodoc>
      </constructor>
    </class>
    <class name="PCXHandler" oldname="wxPCXHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="PCXHandler" overloaded="no">
        <autodoc>__init__() -&gt; PCXHandler</autodoc>
      </constructor>
    </class>
    <class name="JPEGHandler" oldname="wxJPEGHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="JPEGHandler" overloaded="no">
        <autodoc>__init__() -&gt; JPEGHandler</autodoc>
      </constructor>
    </class>
    <class name="PNMHandler" oldname="wxPNMHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="PNMHandler" overloaded="no">
        <autodoc>__init__() -&gt; PNMHandler</autodoc>
      </constructor>
    </class>
    <class name="XPMHandler" oldname="wxXPMHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="XPMHandler" overloaded="no">
        <autodoc>__init__() -&gt; XPMHandler</autodoc>
      </constructor>
    </class>
    <class name="TIFFHandler" oldname="wxTIFFHandler" module="core">
      <baseclass name="ImageHandler"/>
      <constructor name="TIFFHandler" overloaded="no">
        <autodoc>__init__() -&gt; TIFFHandler</autodoc>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="EvtHandler" oldname="wxEvtHandler" module="core">
      <baseclass name="Object"/>
      <constructor name="EvtHandler" overloaded="no">
        <autodoc>__init__() -&gt; EvtHandler</autodoc>
      </constructor>
      <method name="GetNextHandler" type="EvtHandler" overloaded="no">
        <autodoc>GetNextHandler() -&gt; EvtHandler</autodoc>
      </method>
      <method name="GetPreviousHandler" type="EvtHandler" overloaded="no">
        <autodoc>GetPreviousHandler() -&gt; EvtHandler</autodoc>
      </method>
      <method name="SetNextHandler" type="" overloaded="no">
        <autodoc>SetNextHandler(EvtHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="EvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="SetPreviousHandler" type="" overloaded="no">
        <autodoc>SetPreviousHandler(EvtHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="EvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="GetEvtHandlerEnabled" type="bool" overloaded="no">
        <autodoc>GetEvtHandlerEnabled() -&gt; bool</autodoc>
      </method>
      <method name="SetEvtHandlerEnabled" type="" overloaded="no">
        <autodoc>SetEvtHandlerEnabled(bool enabled)</autodoc>
        <paramlist>
          <param name="enabled" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="ProcessEvent" type="bool" overloaded="no">
        <autodoc>ProcessEvent(Event event) -&gt; bool</autodoc>
        <paramlist>
          <param name="event" type="wxEvent" default=""/>
        </paramlist>
      </method>
      <method name="AddPendingEvent" type="" overloaded="no">
        <autodoc>AddPendingEvent(Event event)</autodoc>
        <paramlist>
          <param name="event" type="wxEvent" default=""/>
        </paramlist>
      </method>
      <method name="ProcessPendingEvents" type="" overloaded="no">
        <autodoc>ProcessPendingEvents()</autodoc>
      </method>
      <method name="Connect" type="" overloaded="no">
        <autodoc>Connect(int id, int lastId, int eventType, PyObject func)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="lastId" type="int" default=""/>
          <param name="eventType" type="int" default=""/>
          <param name="func" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Disconnect" type="bool" overloaded="no">
        <autodoc>Disconnect(int id, int lastId=-1, wxEventType eventType=wxEVT_NULL) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="lastId" type="int" default="-1"/>
          <param name="eventType" type="wxEventType" default="wxEVT_NULL"/>
        </paramlist>
      </method>
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>

#---------------------------------------------------------------------------

class PyEventBinder(object):
    """
    Instances of this class are used to bind specific events to event
    handlers.
    """
    def __init__(self, evtType, expectedIDs=0):
        if expectedIDs not in [0, 1, 2]:
            raise ValueError, "Invalid number of expectedIDs"
        self.expectedIDs = expectedIDs

        if type(evtType) == list or type(evtType) == tuple:
            self.evtType = evtType
        else:
            self.evtType = [evtType]


    def Bind(self, target, id1, id2, function):
        """Bind this set of event types to target."""
        for et in self.evtType:
            target.Connect(id1, id2, et, function)

    
    def __call__(self, *args):
        """
        For backwards compatibility with the old EVT_* functions.
        Should be called with either (window, func), (window, ID,
        func) or (window, ID1, ID2, func) parameters depending on the
        type of the event.
        """
        assert len(args) == 2 + self.expectedIDs
        id1 = wx.ID_ANY
        id2 = wx.ID_ANY
        target = args[0]
        if self.expectedIDs == 0:
            func = args[1]
        elif self.expectedIDs == 1:
            id1 = args[1]
            func = args[2]
        elif self.expectedIDs == 2:
            id1 = args[1]
            id2 = args[2]
            func = args[3]
        else:
            raise ValueError, "Unexpected number of IDs"

        self.Bind(target, id1, id2, func)


# These two are square pegs that don't fit the PyEventBinder hole...
def EVT_COMMAND(win, id, cmd, func):
    win.Connect(id, -1, cmd, func)
def EVT_COMMAND_RANGE(win, id1, id2, cmd, func):
    win.Connect(id1, id2, cmd, func)

    
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <method name="NewEventType" oldname="wxNewEventType" type="wxEventType" overloaded="no">
      <autodoc>NewEventType() -&gt; wxEventType</autodoc>
    </method>
    <pythoncode>
#
# Create some event binders
EVT_SIZE = wx.PyEventBinder( wxEVT_SIZE )
EVT_SIZING = wx.PyEventBinder( wxEVT_SIZING )
EVT_MOVE = wx.PyEventBinder( wxEVT_MOVE )
EVT_MOVING = wx.PyEventBinder( wxEVT_MOVING )
EVT_CLOSE = wx.PyEventBinder( wxEVT_CLOSE_WINDOW )
EVT_END_SESSION = wx.PyEventBinder( wxEVT_END_SESSION )
EVT_QUERY_END_SESSION = wx.PyEventBinder( wxEVT_QUERY_END_SESSION )
EVT_PAINT = wx.PyEventBinder( wxEVT_PAINT )
EVT_NC_PAINT = wx.PyEventBinder( wxEVT_NC_PAINT )
EVT_ERASE_BACKGROUND = wx.PyEventBinder( wxEVT_ERASE_BACKGROUND )
EVT_CHAR = wx.PyEventBinder( wxEVT_CHAR )
EVT_KEY_DOWN = wx.PyEventBinder( wxEVT_KEY_DOWN )
EVT_KEY_UP = wx.PyEventBinder( wxEVT_KEY_UP )
EVT_HOTKEY = wx.PyEventBinder( wxEVT_HOTKEY, 1) 
EVT_CHAR_HOOK = wx.PyEventBinder( wxEVT_CHAR_HOOK )
EVT_MENU_OPEN = wx.PyEventBinder( wxEVT_MENU_OPEN )
EVT_MENU_CLOSE = wx.PyEventBinder( wxEVT_MENU_CLOSE )
EVT_MENU_HIGHLIGHT = wx.PyEventBinder( wxEVT_MENU_HIGHLIGHT, 1)
EVT_MENU_HIGHLIGHT_ALL = wx.PyEventBinder( wxEVT_MENU_HIGHLIGHT )
EVT_SET_FOCUS = wx.PyEventBinder( wxEVT_SET_FOCUS )
EVT_KILL_FOCUS = wx.PyEventBinder( wxEVT_KILL_FOCUS )
EVT_CHILD_FOCUS = wx.PyEventBinder( wxEVT_CHILD_FOCUS )
EVT_ACTIVATE = wx.PyEventBinder( wxEVT_ACTIVATE )
EVT_ACTIVATE_APP = wx.PyEventBinder( wxEVT_ACTIVATE_APP )
EVT_END_SESSION = wx.PyEventBinder( wxEVT_END_SESSION )
EVT_QUERY_END_SESSION = wx.PyEventBinder( wxEVT_QUERY_END_SESSION )
EVT_DROP_FILES = wx.PyEventBinder( wxEVT_DROP_FILES )
EVT_INIT_DIALOG = wx.PyEventBinder( wxEVT_INIT_DIALOG )
EVT_SYS_COLOUR_CHANGED = wx.PyEventBinder( wxEVT_SYS_COLOUR_CHANGED )
EVT_DISPLAY_CHANGED = wx.PyEventBinder( wxEVT_DISPLAY_CHANGED )
EVT_SHOW = wx.PyEventBinder( wxEVT_SHOW )
EVT_MAXIMIZE = wx.PyEventBinder( wxEVT_MAXIMIZE )
EVT_ICONIZE = wx.PyEventBinder( wxEVT_ICONIZE )
EVT_NAVIGATION_KEY = wx.PyEventBinder( wxEVT_NAVIGATION_KEY )
EVT_PALETTE_CHANGED = wx.PyEventBinder( wxEVT_PALETTE_CHANGED )
EVT_QUERY_NEW_PALETTE = wx.PyEventBinder( wxEVT_QUERY_NEW_PALETTE )
EVT_WINDOW_CREATE = wx.PyEventBinder( wxEVT_CREATE )
EVT_WINDOW_DESTROY = wx.PyEventBinder( wxEVT_DESTROY )
EVT_SET_CURSOR = wx.PyEventBinder( wxEVT_SET_CURSOR )
EVT_MOUSE_CAPTURE_CHANGED = wx.PyEventBinder( wxEVT_MOUSE_CAPTURE_CHANGED )

EVT_LEFT_DOWN = wx.PyEventBinder( wxEVT_LEFT_DOWN )
EVT_LEFT_UP = wx.PyEventBinder( wxEVT_LEFT_UP )
EVT_MIDDLE_DOWN = wx.PyEventBinder( wxEVT_MIDDLE_DOWN )
EVT_MIDDLE_UP = wx.PyEventBinder( wxEVT_MIDDLE_UP )
EVT_RIGHT_DOWN = wx.PyEventBinder( wxEVT_RIGHT_DOWN )
EVT_RIGHT_UP = wx.PyEventBinder( wxEVT_RIGHT_UP )
EVT_MOTION = wx.PyEventBinder( wxEVT_MOTION )
EVT_LEFT_DCLICK = wx.PyEventBinder( wxEVT_LEFT_DCLICK )
EVT_MIDDLE_DCLICK = wx.PyEventBinder( wxEVT_MIDDLE_DCLICK )
EVT_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_RIGHT_DCLICK )
EVT_LEAVE_WINDOW = wx.PyEventBinder( wxEVT_LEAVE_WINDOW )
EVT_ENTER_WINDOW = wx.PyEventBinder( wxEVT_ENTER_WINDOW )
EVT_MOUSEWHEEL = wx.PyEventBinder( wxEVT_MOUSEWHEEL )

EVT_MOUSE_EVENTS = wx.PyEventBinder([ wxEVT_LEFT_DOWN,
                                     wxEVT_LEFT_UP,
                                     wxEVT_MIDDLE_DOWN,
                                     wxEVT_MIDDLE_UP,
                                     wxEVT_RIGHT_DOWN,
                                     wxEVT_RIGHT_UP,
                                     wxEVT_MOTION,
                                     wxEVT_LEFT_DCLICK,
                                     wxEVT_MIDDLE_DCLICK,
                                     wxEVT_RIGHT_DCLICK,
                                     wxEVT_ENTER_WINDOW,
                                     wxEVT_LEAVE_WINDOW,
                                     wxEVT_MOUSEWHEEL
                                     ])


# Scrolling from wxWindow (sent to wxScrolledWindow)
EVT_SCROLLWIN = wx.PyEventBinder([ wxEVT_SCROLLWIN_TOP, 
                                  wxEVT_SCROLLWIN_BOTTOM,
                                  wxEVT_SCROLLWIN_LINEUP,
                                  wxEVT_SCROLLWIN_LINEDOWN,
                                  wxEVT_SCROLLWIN_PAGEUP, 
                                  wxEVT_SCROLLWIN_PAGEDOWN,
                                  wxEVT_SCROLLWIN_THUMBTRACK,
                                  wxEVT_SCROLLWIN_THUMBRELEASE,
                                  ])

EVT_SCROLLWIN_TOP = wx.PyEventBinder( wxEVT_SCROLLWIN_TOP )
EVT_SCROLLWIN_BOTTOM = wx.PyEventBinder( wxEVT_SCROLLWIN_BOTTOM )
EVT_SCROLLWIN_LINEUP = wx.PyEventBinder( wxEVT_SCROLLWIN_LINEUP )
EVT_SCROLLWIN_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLLWIN_LINEDOWN )
EVT_SCROLLWIN_PAGEUP = wx.PyEventBinder( wxEVT_SCROLLWIN_PAGEUP )
EVT_SCROLLWIN_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLLWIN_PAGEDOWN )
EVT_SCROLLWIN_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLLWIN_THUMBTRACK )
EVT_SCROLLWIN_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLLWIN_THUMBRELEASE )

# Scrolling from wxSlider and wxScrollBar
EVT_SCROLL = wx.PyEventBinder([ wxEVT_SCROLL_TOP, 
                               wxEVT_SCROLL_BOTTOM, 
                               wxEVT_SCROLL_LINEUP, 
                               wxEVT_SCROLL_LINEDOWN, 
                               wxEVT_SCROLL_PAGEUP, 
                               wxEVT_SCROLL_PAGEDOWN, 
                               wxEVT_SCROLL_THUMBTRACK, 
                               wxEVT_SCROLL_THUMBRELEASE, 
                               wxEVT_SCROLL_ENDSCROLL,
                               ])

EVT_SCROLL_TOP = wx.PyEventBinder( wxEVT_SCROLL_TOP )
EVT_SCROLL_BOTTOM = wx.PyEventBinder( wxEVT_SCROLL_BOTTOM )
EVT_SCROLL_LINEUP = wx.PyEventBinder( wxEVT_SCROLL_LINEUP )
EVT_SCROLL_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLL_LINEDOWN )
EVT_SCROLL_PAGEUP = wx.PyEventBinder( wxEVT_SCROLL_PAGEUP )
EVT_SCROLL_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLL_PAGEDOWN )
EVT_SCROLL_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLL_THUMBTRACK )
EVT_SCROLL_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLL_THUMBRELEASE )
EVT_SCROLL_ENDSCROLL = wx.PyEventBinder( wxEVT_SCROLL_ENDSCROLL )

# Scrolling from wxSlider and wxScrollBar, with an id
EVT_COMMAND_SCROLL = wx.PyEventBinder([ wxEVT_SCROLL_TOP, 
                                       wxEVT_SCROLL_BOTTOM, 
                                       wxEVT_SCROLL_LINEUP, 
                                       wxEVT_SCROLL_LINEDOWN, 
                                       wxEVT_SCROLL_PAGEUP, 
                                       wxEVT_SCROLL_PAGEDOWN, 
                                       wxEVT_SCROLL_THUMBTRACK, 
                                       wxEVT_SCROLL_THUMBRELEASE,
                                       wxEVT_SCROLL_ENDSCROLL,
                                       ], 1)

EVT_COMMAND_SCROLL_TOP = wx.PyEventBinder( wxEVT_SCROLL_TOP, 1)
EVT_COMMAND_SCROLL_BOTTOM = wx.PyEventBinder( wxEVT_SCROLL_BOTTOM, 1)
EVT_COMMAND_SCROLL_LINEUP = wx.PyEventBinder( wxEVT_SCROLL_LINEUP, 1)
EVT_COMMAND_SCROLL_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLL_LINEDOWN, 1)
EVT_COMMAND_SCROLL_PAGEUP = wx.PyEventBinder( wxEVT_SCROLL_PAGEUP, 1)
EVT_COMMAND_SCROLL_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLL_PAGEDOWN, 1)
EVT_COMMAND_SCROLL_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLL_THUMBTRACK, 1)
EVT_COMMAND_SCROLL_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLL_THUMBRELEASE, 1)
EVT_COMMAND_SCROLL_ENDSCROLL = wx.PyEventBinder( wxEVT_SCROLL_ENDSCROLL, 1)

EVT_BUTTON = wx.PyEventBinder( wxEVT_COMMAND_BUTTON_CLICKED, 1)
EVT_CHECKBOX = wx.PyEventBinder( wxEVT_COMMAND_CHECKBOX_CLICKED, 1)
EVT_CHOICE = wx.PyEventBinder( wxEVT_COMMAND_CHOICE_SELECTED, 1)
EVT_LISTBOX = wx.PyEventBinder( wxEVT_COMMAND_LISTBOX_SELECTED, 1)
EVT_LISTBOX_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, 1)
EVT_MENU = wx.PyEventBinder( wxEVT_COMMAND_MENU_SELECTED, 1)
EVT_MENU_RANGE = wx.PyEventBinder( wxEVT_COMMAND_MENU_SELECTED, 2)
EVT_SLIDER = wx.PyEventBinder( wxEVT_COMMAND_SLIDER_UPDATED, 1)
EVT_RADIOBOX = wx.PyEventBinder( wxEVT_COMMAND_RADIOBOX_SELECTED, 1)
EVT_RADIOBUTTON = wx.PyEventBinder( wxEVT_COMMAND_RADIOBUTTON_SELECTED, 1)

EVT_SCROLLBAR = wx.PyEventBinder( wxEVT_COMMAND_SCROLLBAR_UPDATED, 1)
EVT_VLBOX = wx.PyEventBinder( wxEVT_COMMAND_VLBOX_SELECTED, 1)
EVT_COMBOBOX = wx.PyEventBinder( wxEVT_COMMAND_COMBOBOX_SELECTED, 1)
EVT_TOOL = wx.PyEventBinder( wxEVT_COMMAND_TOOL_CLICKED, 1)
EVT_TOOL_RANGE = wx.PyEventBinder( wxEVT_COMMAND_TOOL_CLICKED, 2)
EVT_TOOL_RCLICKED = wx.PyEventBinder( wxEVT_COMMAND_TOOL_RCLICKED, 1)
EVT_TOOL_RCLICKED_RANGE = wx.PyEventBinder( wxEVT_COMMAND_TOOL_RCLICKED, 2)
EVT_TOOL_ENTER = wx.PyEventBinder( wxEVT_COMMAND_TOOL_ENTER, 1)
EVT_CHECKLISTBOX = wx.PyEventBinder( wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, 1)


EVT_COMMAND_LEFT_CLICK = wx.PyEventBinder( wxEVT_COMMAND_LEFT_CLICK, 1)
EVT_COMMAND_LEFT_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_LEFT_DCLICK, 1)
EVT_COMMAND_RIGHT_CLICK = wx.PyEventBinder( wxEVT_COMMAND_RIGHT_CLICK, 1)
EVT_COMMAND_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_RIGHT_DCLICK, 1)
EVT_COMMAND_SET_FOCUS = wx.PyEventBinder( wxEVT_COMMAND_SET_FOCUS, 1)
EVT_COMMAND_KILL_FOCUS = wx.PyEventBinder( wxEVT_COMMAND_KILL_FOCUS, 1)
EVT_COMMAND_ENTER = wx.PyEventBinder( wxEVT_COMMAND_ENTER, 1)

EVT_IDLE = wx.PyEventBinder( wxEVT_IDLE )

EVT_UPDATE_UI = wx.PyEventBinder( wxEVT_UPDATE_UI, 1)
EVT_UPDATE_UI_RANGE = wx.PyEventBinder( wxEVT_UPDATE_UI, 2)

EVT_CONTEXT_MENU = wx.PyEventBinder( wxEVT_CONTEXT_MENU )


</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Event" oldname="wxEvent" module="core">
      <baseclass name="Object"/>
      <destructor name="~wxEvent" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetEventType" type="" overloaded="no">
        <autodoc>SetEventType(wxEventType typ)</autodoc>
        <paramlist>
          <param name="typ" type="wxEventType" default=""/>
        </paramlist>
      </method>
      <method name="GetEventType" type="wxEventType" overloaded="no">
        <autodoc>GetEventType() -&gt; wxEventType</autodoc>
      </method>
      <method name="GetEventObject" type="Object" overloaded="no">
        <autodoc>GetEventObject() -&gt; Object</autodoc>
      </method>
      <method name="SetEventObject" type="" overloaded="no">
        <autodoc>SetEventObject(Object obj)</autodoc>
        <paramlist>
          <param name="obj" type="Object" default=""/>
        </paramlist>
      </method>
      <method name="GetTimestamp" type="long" overloaded="no">
        <autodoc>GetTimestamp() -&gt; long</autodoc>
      </method>
      <method name="SetTimestamp" type="" overloaded="no">
        <autodoc>SetTimestamp(long ts=0)</autodoc>
        <paramlist>
          <param name="ts" type="long" default="0"/>
        </paramlist>
      </method>
      <method name="GetId" type="int" overloaded="no">
        <autodoc>GetId() -&gt; int</autodoc>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(int Id)</autodoc>
        <paramlist>
          <param name="Id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsCommandEvent" type="bool" overloaded="no">
        <autodoc>IsCommandEvent() -&gt; bool</autodoc>
      </method>
      <method name="Skip" type="" overloaded="no">
        <autodoc>Skip(bool skip=True)</autodoc>
        <paramlist>
          <param name="skip" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetSkipped" type="bool" overloaded="no">
        <autodoc>GetSkipped() -&gt; bool</autodoc>
      </method>
      <method name="ShouldPropagate" type="bool" overloaded="no">
        <autodoc>ShouldPropagate() -&gt; bool</autodoc>
      </method>
      <method name="StopPropagation" type="int" overloaded="no">
        <autodoc>StopPropagation() -&gt; int</autodoc>
      </method>
      <method name="ResumePropagation" type="" overloaded="no">
        <autodoc>ResumePropagation(int propagationLevel)</autodoc>
        <paramlist>
          <param name="propagationLevel" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Clone" type="Event" overloaded="no">
        <autodoc>Clone() -&gt; Event</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PropagationDisabler" oldname="wxPropagationDisabler" module="core">
      <constructor name="PropagationDisabler" overloaded="no">
        <autodoc>__init__(Event event) -&gt; PropagationDisabler</autodoc>
        <paramlist>
          <param name="event" type="Event" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxPropagationDisabler" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <class name="PropagateOnce" oldname="wxPropagateOnce" module="core">
      <constructor name="PropagateOnce" overloaded="no">
        <autodoc>__init__(Event event) -&gt; PropagateOnce</autodoc>
        <paramlist>
          <param name="event" type="Event" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxPropagateOnce" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="CommandEvent" oldname="wxCommandEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="CommandEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0) -&gt; CommandEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetSelection" type="int" overloaded="no">
        <autodoc>GetSelection() -&gt; int</autodoc>
      </method>
      <method name="SetString" type="" overloaded="no">
        <autodoc>SetString(String s)</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetString" type="String" overloaded="no">
        <autodoc>GetString() -&gt; String</autodoc>
      </method>
      <method name="IsChecked" type="bool" overloaded="no">
        <autodoc>IsChecked() -&gt; bool</autodoc>
      </method>
      <method name="IsSelection" type="bool" overloaded="no">
        <autodoc>IsSelection() -&gt; bool</autodoc>
      </method>
      <method name="SetExtraLong" type="" overloaded="no">
        <autodoc>SetExtraLong(long extraLong)</autodoc>
        <paramlist>
          <param name="extraLong" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetExtraLong" type="long" overloaded="no">
        <autodoc>GetExtraLong() -&gt; long</autodoc>
      </method>
      <method name="SetInt" type="" overloaded="no">
        <autodoc>SetInt(int i)</autodoc>
        <paramlist>
          <param name="i" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetInt" type="long" overloaded="no">
        <autodoc>GetInt() -&gt; long</autodoc>
      </method>
      <method name="Clone" type="Event" overloaded="no">
        <autodoc>Clone() -&gt; Event</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="NotifyEvent" oldname="wxNotifyEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="NotifyEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0) -&gt; NotifyEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="Veto" type="" overloaded="no">
        <autodoc>Veto()</autodoc>
      </method>
      <method name="Allow" type="" overloaded="no">
        <autodoc>Allow()</autodoc>
      </method>
      <method name="IsAllowed" type="bool" overloaded="no">
        <autodoc>IsAllowed() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ScrollEvent" oldname="wxScrollEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="ScrollEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0, int pos=0, 
    int orient=0) -&gt; ScrollEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
          <param name="pos" type="int" default="0"/>
          <param name="orient" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetOrientation" type="int" overloaded="no">
        <autodoc>GetOrientation() -&gt; int</autodoc>
      </method>
      <method name="GetPosition" type="int" overloaded="no">
        <autodoc>GetPosition() -&gt; int</autodoc>
      </method>
      <method name="SetOrientation" type="" overloaded="no">
        <autodoc>SetOrientation(int orient)</autodoc>
        <paramlist>
          <param name="orient" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ScrollWinEvent" oldname="wxScrollWinEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="ScrollWinEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int pos=0, int orient=0) -&gt; ScrollWinEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="pos" type="int" default="0"/>
          <param name="orient" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetOrientation" type="int" overloaded="no">
        <autodoc>GetOrientation() -&gt; int</autodoc>
      </method>
      <method name="GetPosition" type="int" overloaded="no">
        <autodoc>GetPosition() -&gt; int</autodoc>
      </method>
      <method name="SetOrientation" type="" overloaded="no">
        <autodoc>SetOrientation(int orient)</autodoc>
        <paramlist>
          <param name="orient" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MouseEvent" oldname="wxMouseEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="MouseEvent" overloaded="no">
        <autodoc>__init__(wxEventType mouseType=wxEVT_NULL) -&gt; MouseEvent</autodoc>
        <paramlist>
          <param name="mouseType" type="wxEventType" default="wxEVT_NULL"/>
        </paramlist>
      </constructor>
      <method name="IsButton" type="bool" overloaded="no">
        <autodoc>IsButton() -&gt; bool</autodoc>
      </method>
      <method name="ButtonDown" type="bool" overloaded="no">
        <autodoc>ButtonDown(int but=MOUSE_BTN_ANY) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default="wxMOUSE_BTN_ANY"/>
        </paramlist>
      </method>
      <method name="ButtonDClick" type="bool" overloaded="no">
        <autodoc>ButtonDClick(int but=MOUSE_BTN_ANY) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default="wxMOUSE_BTN_ANY"/>
        </paramlist>
      </method>
      <method name="ButtonUp" type="bool" overloaded="no">
        <autodoc>ButtonUp(int but=MOUSE_BTN_ANY) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default="wxMOUSE_BTN_ANY"/>
        </paramlist>
      </method>
      <method name="Button" type="bool" overloaded="no">
        <autodoc>Button(int but) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ButtonIsDown" type="bool" overloaded="no">
        <autodoc>ButtonIsDown(int but) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetButton" type="int" overloaded="no">
        <autodoc>GetButton() -&gt; int</autodoc>
      </method>
      <method name="ControlDown" type="bool" overloaded="no">
        <autodoc>ControlDown() -&gt; bool</autodoc>
      </method>
      <method name="MetaDown" type="bool" overloaded="no">
        <autodoc>MetaDown() -&gt; bool</autodoc>
      </method>
      <method name="AltDown" type="bool" overloaded="no">
        <autodoc>AltDown() -&gt; bool</autodoc>
      </method>
      <method name="ShiftDown" type="bool" overloaded="no">
        <autodoc>ShiftDown() -&gt; bool</autodoc>
      </method>
      <method name="LeftDown" type="bool" overloaded="no">
        <autodoc>LeftDown() -&gt; bool</autodoc>
      </method>
      <method name="MiddleDown" type="bool" overloaded="no">
        <autodoc>MiddleDown() -&gt; bool</autodoc>
      </method>
      <method name="RightDown" type="bool" overloaded="no">
        <autodoc>RightDown() -&gt; bool</autodoc>
      </method>
      <method name="LeftUp" type="bool" overloaded="no">
        <autodoc>LeftUp() -&gt; bool</autodoc>
      </method>
      <method name="MiddleUp" type="bool" overloaded="no">
        <autodoc>MiddleUp() -&gt; bool</autodoc>
      </method>
      <method name="RightUp" type="bool" overloaded="no">
        <autodoc>RightUp() -&gt; bool</autodoc>
      </method>
      <method name="LeftDClick" type="bool" overloaded="no">
        <autodoc>LeftDClick() -&gt; bool</autodoc>
      </method>
      <method name="MiddleDClick" type="bool" overloaded="no">
        <autodoc>MiddleDClick() -&gt; bool</autodoc>
      </method>
      <method name="RightDClick" type="bool" overloaded="no">
        <autodoc>RightDClick() -&gt; bool</autodoc>
      </method>
      <method name="LeftIsDown" type="bool" overloaded="no">
        <autodoc>LeftIsDown() -&gt; bool</autodoc>
      </method>
      <method name="MiddleIsDown" type="bool" overloaded="no">
        <autodoc>MiddleIsDown() -&gt; bool</autodoc>
      </method>
      <method name="RightIsDown" type="bool" overloaded="no">
        <autodoc>RightIsDown() -&gt; bool</autodoc>
      </method>
      <method name="Dragging" type="bool" overloaded="no">
        <autodoc>Dragging() -&gt; bool</autodoc>
      </method>
      <method name="Moving" type="bool" overloaded="no">
        <autodoc>Moving() -&gt; bool</autodoc>
      </method>
      <method name="Entering" type="bool" overloaded="no">
        <autodoc>Entering() -&gt; bool</autodoc>
      </method>
      <method name="Leaving" type="bool" overloaded="no">
        <autodoc>Leaving() -&gt; bool</autodoc>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
        <docstring>Returns the position of the mouse in window coordinates when the event happened.</docstring>
      </method>
      <method name="GetPositionTuple" type="" overloaded="no">
        <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
        <docstring>Returns the position of the mouse in window coordinates when the event happened.</docstring>
        <paramlist>
          <param name="OUTPUT" type="long" default=""/>
          <param name="OUTPUT" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetLogicalPosition" type="Point" overloaded="no">
        <autodoc>GetLogicalPosition(DC dc) -&gt; Point</autodoc>
        <paramlist>
          <param name="dc" type="wxDC" default=""/>
        </paramlist>
      </method>
      <method name="GetX" type="int" overloaded="no">
        <autodoc>GetX() -&gt; int</autodoc>
      </method>
      <method name="GetY" type="int" overloaded="no">
        <autodoc>GetY() -&gt; int</autodoc>
      </method>
      <method name="GetWheelRotation" type="int" overloaded="no">
        <autodoc>GetWheelRotation() -&gt; int</autodoc>
      </method>
      <method name="GetWheelDelta" type="int" overloaded="no">
        <autodoc>GetWheelDelta() -&gt; int</autodoc>
      </method>
      <method name="GetLinesPerAction" type="int" overloaded="no">
        <autodoc>GetLinesPerAction() -&gt; int</autodoc>
      </method>
      <method name="IsPageScroll" type="bool" overloaded="no">
        <autodoc>IsPageScroll() -&gt; bool</autodoc>
      </method>
      <property name="m_x" type="int" readonly="no"/>
      <property name="m_y" type="int" readonly="no"/>
      <property name="m_leftDown" type="bool" readonly="no"/>
      <property name="m_middleDown" type="bool" readonly="no"/>
      <property name="m_rightDown" type="bool" readonly="no"/>
      <property name="m_controlDown" type="bool" readonly="no"/>
      <property name="m_shiftDown" type="bool" readonly="no"/>
      <property name="m_altDown" type="bool" readonly="no"/>
      <property name="m_metaDown" type="bool" readonly="no"/>
      <property name="m_wheelRotation" type="int" readonly="no"/>
      <property name="m_wheelDelta" type="int" readonly="no"/>
      <property name="m_linesPerAction" type="int" readonly="no"/>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SetCursorEvent" oldname="wxSetCursorEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="SetCursorEvent" overloaded="no">
        <autodoc>__init__(int x=0, int y=0) -&gt; SetCursorEvent</autodoc>
        <paramlist>
          <param name="x" type="int" default="0"/>
          <param name="y" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetX" type="int" overloaded="no">
        <autodoc>GetX() -&gt; int</autodoc>
      </method>
      <method name="GetY" type="int" overloaded="no">
        <autodoc>GetY() -&gt; int</autodoc>
      </method>
      <method name="SetCursor" type="" overloaded="no">
        <autodoc>SetCursor(Cursor cursor)</autodoc>
        <paramlist>
          <param name="cursor" type="wxCursor" default=""/>
        </paramlist>
      </method>
      <method name="GetCursor" type="wxCursor" overloaded="no">
        <autodoc>GetCursor() -&gt; Cursor</autodoc>
      </method>
      <method name="HasCursor" type="bool" overloaded="no">
        <autodoc>HasCursor() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="KeyEvent" oldname="wxKeyEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="KeyEvent" overloaded="no">
        <autodoc>__init__(wxEventType keyType=wxEVT_NULL) -&gt; KeyEvent</autodoc>
        <paramlist>
          <param name="keyType" type="wxEventType" default="wxEVT_NULL"/>
        </paramlist>
      </constructor>
      <method name="ControlDown" type="bool" overloaded="no">
        <autodoc>ControlDown() -&gt; bool</autodoc>
      </method>
      <method name="MetaDown" type="bool" overloaded="no">
        <autodoc>MetaDown() -&gt; bool</autodoc>
      </method>
      <method name="AltDown" type="bool" overloaded="no">
        <autodoc>AltDown() -&gt; bool</autodoc>
      </method>
      <method name="ShiftDown" type="bool" overloaded="no">
        <autodoc>ShiftDown() -&gt; bool</autodoc>
      </method>
      <method name="HasModifiers" type="bool" overloaded="no">
        <autodoc>HasModifiers() -&gt; bool</autodoc>
      </method>
      <method name="GetKeyCode" type="int" overloaded="no">
        <autodoc>GetKeyCode() -&gt; int</autodoc>
      </method>
      <method name="GetUniChar" type="int" overloaded="no">
        <autodoc>GetUniChar() -&gt; int</autodoc>
      </method>
      <method name="GetRawKeyCode" type="unsigned int" overloaded="no">
        <autodoc>GetRawKeyCode() -&gt; unsigned int</autodoc>
      </method>
      <method name="GetRawKeyFlags" type="unsigned int" overloaded="no">
        <autodoc>GetRawKeyFlags() -&gt; unsigned int</autodoc>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
        <docstring>Find the position of the event.</docstring>
      </method>
      <method name="GetPositionTuple" type="" overloaded="no">
        <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
        <docstring>Find the position of the event.</docstring>
        <paramlist>
          <param name="OUTPUT" type="long" default=""/>
          <param name="OUTPUT" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetX" type="int" overloaded="no">
        <autodoc>GetX() -&gt; int</autodoc>
      </method>
      <method name="GetY" type="int" overloaded="no">
        <autodoc>GetY() -&gt; int</autodoc>
      </method>
      <property name="m_x" type="int" readonly="no"/>
      <property name="m_y" type="int" readonly="no"/>
      <property name="m_keyCode" type="long" readonly="no"/>
      <property name="m_controlDown" type="bool" readonly="no"/>
      <property name="m_shiftDown" type="bool" readonly="no"/>
      <property name="m_altDown" type="bool" readonly="no"/>
      <property name="m_metaDown" type="bool" readonly="no"/>
      <property name="m_scanCode" type="bool" readonly="no"/>
      <property name="m_rawCode" type="unsigned int" readonly="no"/>
      <property name="m_rawFlags" type="unsigned int" readonly="no"/>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SizeEvent" oldname="wxSizeEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="SizeEvent" overloaded="no">
        <autodoc>__init__(Size sz=DefaultSize, int winid=0) -&gt; SizeEvent</autodoc>
        <paramlist>
          <param name="sz" type="Size" default="wxDefaultSize"/>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
      </method>
      <method name="GetRect" type="Rect" overloaded="no">
        <autodoc>GetRect() -&gt; Rect</autodoc>
      </method>
      <method name="SetRect" type="" overloaded="no">
        <autodoc>SetRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <property name="m_size" type="Size" readonly="no"/>
      <property name="m_rect" type="Rect" readonly="no"/>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MoveEvent" oldname="wxMoveEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="MoveEvent" overloaded="no">
        <autodoc>__init__(Point pos=DefaultPosition, int winid=0) -&gt; MoveEvent</autodoc>
        <paramlist>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="GetRect" type="Rect" overloaded="no">
        <autodoc>GetRect() -&gt; Rect</autodoc>
      </method>
      <method name="SetRect" type="" overloaded="no">
        <autodoc>SetRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(Point pos)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <property name="m_pos" type="Point" readonly="no"/>
      <property name="m_rect" type="Rect" readonly="no"/>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PaintEvent" oldname="wxPaintEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="PaintEvent" overloaded="no">
        <autodoc>__init__(int Id=0) -&gt; PaintEvent</autodoc>
        <paramlist>
          <param name="Id" type="int" default="0"/>
        </paramlist>
      </constructor>
    </class>
    <class name="NcPaintEvent" oldname="wxNcPaintEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="NcPaintEvent" overloaded="no">
        <autodoc>__init__(int winid=0) -&gt; NcPaintEvent</autodoc>
        <paramlist>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="EraseEvent" oldname="wxEraseEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="EraseEvent" overloaded="no">
        <autodoc>__init__(int Id=0, DC dc=(wxDC *) NULL) -&gt; EraseEvent</autodoc>
        <paramlist>
          <param name="Id" type="int" default="0"/>
          <param name="dc" type="wxDC" default="(wxDC *) NULL"/>
        </paramlist>
      </constructor>
      <method name="GetDC" type="wxDC" overloaded="no">
        <autodoc>GetDC() -&gt; DC</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="FocusEvent" oldname="wxFocusEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="FocusEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0) -&gt; FocusEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetWindow" type="wxWindow" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
      <method name="SetWindow" type="" overloaded="no">
        <autodoc>SetWindow(Window win)</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ChildFocusEvent" oldname="wxChildFocusEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="ChildFocusEvent" overloaded="no">
        <autodoc>__init__(Window win=None) -&gt; ChildFocusEvent</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetWindow" type="wxWindow" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ActivateEvent" oldname="wxActivateEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="ActivateEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, bool active=True, int Id=0) -&gt; ActivateEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="active" type="bool" default="True"/>
          <param name="Id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetActive" type="bool" overloaded="no">
        <autodoc>GetActive() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="InitDialogEvent" oldname="wxInitDialogEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="InitDialogEvent" overloaded="no">
        <autodoc>__init__(int Id=0) -&gt; InitDialogEvent</autodoc>
        <paramlist>
          <param name="Id" type="int" default="0"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MenuEvent" oldname="wxMenuEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="MenuEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0, Menu menu=None) -&gt; MenuEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
          <param name="menu" type="wxMenu" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetMenuId" type="int" overloaded="no">
        <autodoc>GetMenuId() -&gt; int</autodoc>
      </method>
      <method name="IsPopup" type="bool" overloaded="no">
        <autodoc>IsPopup() -&gt; bool</autodoc>
      </method>
      <method name="GetMenu" type="wxMenu" overloaded="no">
        <autodoc>GetMenu() -&gt; Menu</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="CloseEvent" oldname="wxCloseEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="CloseEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0) -&gt; CloseEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="SetLoggingOff" type="" overloaded="no">
        <autodoc>SetLoggingOff(bool logOff)</autodoc>
        <paramlist>
          <param name="logOff" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetLoggingOff" type="bool" overloaded="no">
        <autodoc>GetLoggingOff() -&gt; bool</autodoc>
      </method>
      <method name="Veto" type="" overloaded="no">
        <autodoc>Veto(bool veto=True)</autodoc>
        <paramlist>
          <param name="veto" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetCanVeto" type="" overloaded="no">
        <autodoc>SetCanVeto(bool canVeto)</autodoc>
        <paramlist>
          <param name="canVeto" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="CanVeto" type="bool" overloaded="no">
        <autodoc>CanVeto() -&gt; bool</autodoc>
      </method>
      <method name="GetVeto" type="bool" overloaded="no">
        <autodoc>GetVeto() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ShowEvent" oldname="wxShowEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="ShowEvent" overloaded="no">
        <autodoc>__init__(int winid=0, bool show=False) -&gt; ShowEvent</autodoc>
        <paramlist>
          <param name="winid" type="int" default="0"/>
          <param name="show" type="bool" default="False"/>
        </paramlist>
      </constructor>
      <method name="SetShow" type="" overloaded="no">
        <autodoc>SetShow(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetShow" type="bool" overloaded="no">
        <autodoc>GetShow() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="IconizeEvent" oldname="wxIconizeEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="IconizeEvent" overloaded="no">
        <autodoc>__init__(int id=0, bool iconized=True) -&gt; IconizeEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
          <param name="iconized" type="bool" default="True"/>
        </paramlist>
      </constructor>
      <method name="Iconized" type="bool" overloaded="no">
        <autodoc>Iconized() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MaximizeEvent" oldname="wxMaximizeEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="MaximizeEvent" overloaded="no">
        <autodoc>__init__(int id=0) -&gt; MaximizeEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="DropFilesEvent" oldname="wxDropFilesEvent" module="core">
      <baseclass name="Event"/>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="GetNumberOfFiles" type="int" overloaded="no">
        <autodoc>GetNumberOfFiles() -&gt; int</autodoc>
      </method>
      <method name="GetFiles" type="PyObject" overloaded="no">
        <autodoc>GetFiles() -&gt; PyObject</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="UpdateUIEvent" oldname="wxUpdateUIEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="UpdateUIEvent" overloaded="no">
        <autodoc>__init__(int commandId=0) -&gt; UpdateUIEvent</autodoc>
        <paramlist>
          <param name="commandId" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetChecked" type="bool" overloaded="no">
        <autodoc>GetChecked() -&gt; bool</autodoc>
      </method>
      <method name="GetEnabled" type="bool" overloaded="no">
        <autodoc>GetEnabled() -&gt; bool</autodoc>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="GetSetText" type="bool" overloaded="no">
        <autodoc>GetSetText() -&gt; bool</autodoc>
      </method>
      <method name="GetSetChecked" type="bool" overloaded="no">
        <autodoc>GetSetChecked() -&gt; bool</autodoc>
      </method>
      <method name="GetSetEnabled" type="bool" overloaded="no">
        <autodoc>GetSetEnabled() -&gt; bool</autodoc>
      </method>
      <method name="Check" type="" overloaded="no">
        <autodoc>Check(bool check)</autodoc>
        <paramlist>
          <param name="check" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Enable" type="" overloaded="no">
        <autodoc>Enable(bool enable)</autodoc>
        <paramlist>
          <param name="enable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <staticmethod name="SetUpdateInterval" type="" overloaded="no">
        <autodoc>SetUpdateInterval(long updateInterval)</autodoc>
        <paramlist>
          <param name="updateInterval" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetUpdateInterval" type="long" overloaded="no">
        <autodoc>GetUpdateInterval() -&gt; long</autodoc>
      </staticmethod>
      <staticmethod name="CanUpdate" type="bool" overloaded="no">
        <autodoc>CanUpdate(Window win) -&gt; bool</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="ResetUpdateTime" type="" overloaded="no">
        <autodoc>ResetUpdateTime()</autodoc>
      </staticmethod>
      <staticmethod name="SetMode" type="" overloaded="no">
        <autodoc>SetMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="wxUpdateUIMode" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetMode" type="wxUpdateUIMode" overloaded="no">
        <autodoc>GetMode() -&gt; int</autodoc>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SysColourChangedEvent" oldname="wxSysColourChangedEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="SysColourChangedEvent" overloaded="no">
        <autodoc>__init__() -&gt; SysColourChangedEvent</autodoc>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MouseCaptureChangedEvent" oldname="wxMouseCaptureChangedEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="MouseCaptureChangedEvent" overloaded="no">
        <autodoc>__init__(int winid=0, Window gainedCapture=None) -&gt; MouseCaptureChangedEvent</autodoc>
        <paramlist>
          <param name="winid" type="int" default="0"/>
          <param name="gainedCapture" type="wxWindow" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetCapturedWindow" type="wxWindow" overloaded="no">
        <autodoc>GetCapturedWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="DisplayChangedEvent" oldname="wxDisplayChangedEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="DisplayChangedEvent" overloaded="no">
        <autodoc>__init__() -&gt; DisplayChangedEvent</autodoc>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PaletteChangedEvent" oldname="wxPaletteChangedEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="PaletteChangedEvent" overloaded="no">
        <autodoc>__init__(int id=0) -&gt; PaletteChangedEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="SetChangedWindow" type="" overloaded="no">
        <autodoc>SetChangedWindow(Window win)</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default=""/>
        </paramlist>
      </method>
      <method name="GetChangedWindow" type="wxWindow" overloaded="no">
        <autodoc>GetChangedWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="QueryNewPaletteEvent" oldname="wxQueryNewPaletteEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="QueryNewPaletteEvent" overloaded="no">
        <autodoc>__init__(int winid=0) -&gt; QueryNewPaletteEvent</autodoc>
        <paramlist>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="SetPaletteRealized" type="" overloaded="no">
        <autodoc>SetPaletteRealized(bool realized)</autodoc>
        <paramlist>
          <param name="realized" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetPaletteRealized" type="bool" overloaded="no">
        <autodoc>GetPaletteRealized() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="NavigationKeyEvent" oldname="wxNavigationKeyEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="NavigationKeyEvent" overloaded="no">
        <autodoc>__init__() -&gt; NavigationKeyEvent</autodoc>
      </constructor>
      <method name="GetDirection" type="bool" overloaded="no">
        <autodoc>GetDirection() -&gt; bool</autodoc>
      </method>
      <method name="SetDirection" type="" overloaded="no">
        <autodoc>SetDirection(bool bForward)</autodoc>
        <paramlist>
          <param name="bForward" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsWindowChange" type="bool" overloaded="no">
        <autodoc>IsWindowChange() -&gt; bool</autodoc>
      </method>
      <method name="SetWindowChange" type="" overloaded="no">
        <autodoc>SetWindowChange(bool bIs)</autodoc>
        <paramlist>
          <param name="bIs" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetCurrentFocus" type="wxWindow" overloaded="no">
        <autodoc>GetCurrentFocus() -&gt; Window</autodoc>
      </method>
      <method name="SetCurrentFocus" type="" overloaded="no">
        <autodoc>SetCurrentFocus(Window win)</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="WindowCreateEvent" oldname="wxWindowCreateEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="WindowCreateEvent" overloaded="no">
        <autodoc>__init__(Window win=None) -&gt; WindowCreateEvent</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetWindow" type="wxWindow" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <class name="WindowDestroyEvent" oldname="wxWindowDestroyEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="WindowDestroyEvent" overloaded="no">
        <autodoc>__init__(Window win=None) -&gt; WindowDestroyEvent</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetWindow" type="wxWindow" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ContextMenuEvent" oldname="wxContextMenuEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="ContextMenuEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0, Point pt=DefaultPosition) -&gt; ContextMenuEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
          <param name="pt" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </constructor>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(Point pos)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="IdleEvent" oldname="wxIdleEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="IdleEvent" overloaded="no">
        <autodoc>__init__() -&gt; IdleEvent</autodoc>
      </constructor>
      <method name="RequestMore" type="" overloaded="no">
        <autodoc>RequestMore(bool needMore=True)</autodoc>
        <paramlist>
          <param name="needMore" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="MoreRequested" type="bool" overloaded="no">
        <autodoc>MoreRequested() -&gt; bool</autodoc>
      </method>
      <staticmethod name="SetMode" type="" overloaded="no">
        <autodoc>SetMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="wxIdleMode" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetMode" type="wxIdleMode" overloaded="no">
        <autodoc>GetMode() -&gt; int</autodoc>
      </staticmethod>
      <staticmethod name="CanSend" type="bool" overloaded="no">
        <autodoc>CanSend(Window win) -&gt; bool</autodoc>
        <paramlist>
          <param name="win" type="wxWindow" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PyEvent" oldname="wxPyEvent" module="core">
      <baseclass name="Event"/>
      <constructor name="PyEvent" overloaded="no">
        <autodoc>__init__(int winid=0, wxEventType commandType=wxEVT_NULL) -&gt; PyEvent</autodoc>
        <paramlist>
          <param name="winid" type="int" default="0"/>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPyEvent" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetSelf" type="" overloaded="no">
        <autodoc>SetSelf(PyObject self)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetSelf" type="PyObject" overloaded="no">
        <autodoc>GetSelf() -&gt; PyObject</autodoc>
      </method>
    </class>
    <class name="PyCommandEvent" oldname="wxPyCommandEvent" module="core">
      <baseclass name="CommandEvent"/>
      <constructor name="PyCommandEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; PyCommandEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPyCommandEvent" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetSelf" type="" overloaded="no">
        <autodoc>SetSelf(PyObject self)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetSelf" type="PyObject" overloaded="no">
        <autodoc>GetSelf() -&gt; PyObject</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PyApp" oldname="wxPyApp" module="core">
      <baseclass name="EvtHandler"/>
      <constructor name="PyApp" overloaded="no">
        <autodoc>__init__() -&gt; PyApp</autodoc>
        <docstring>Create a new application object, starting the bootstrap process.</docstring>
      </constructor>
      <destructor name="~wxPyApp" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetAppName" type="String" overloaded="no">
        <autodoc>GetAppName() -&gt; String</autodoc>
        <docstring>Get the application name.</docstring>
      </method>
      <method name="SetAppName" type="" overloaded="no">
        <autodoc>SetAppName(String name)</autodoc>
        <docstring>Set the application name. This value may be used automatically
by wx.Config and such.</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetClassName" type="String" overloaded="no">
        <autodoc>GetClassName() -&gt; String</autodoc>
        <docstring>Get the application's class name.</docstring>
      </method>
      <method name="SetClassName" type="" overloaded="no">
        <autodoc>SetClassName(String name)</autodoc>
        <docstring>Set the application's class name. This value may be used for X-resources if
applicable for the platform</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetVendorName" type="String" overloaded="no">
        <autodoc>GetVendorName() -&gt; String</autodoc>
        <docstring>Get the application's vendor name.</docstring>
      </method>
      <method name="SetVendorName" type="" overloaded="no">
        <autodoc>SetVendorName(String name)</autodoc>
        <docstring>Set the application's vendor name. This value may be used automatically
by wx.Config and such.</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTraits" type="wxAppTraits" overloaded="no">
        <autodoc>GetTraits() -&gt; wxAppTraits</autodoc>
        <docstring>Create the app traits object to which we delegate for everything which either
should be configurable by the user (then he can change the default behaviour
simply by overriding CreateTraits() and returning his own traits object) or
which is GUI/console dependent as then wx.AppTraits allows us to abstract the
differences behind the common facade</docstring>
      </method>
      <method name="ProcessPendingEvents" type="" overloaded="no">
        <autodoc>ProcessPendingEvents()</autodoc>
        <docstring>Process all events in the Pending Events list -- it is necessary to call this
function to process posted events. This happens during each event loop
iteration.</docstring>
      </method>
      <method name="Yield" type="bool" overloaded="no">
        <autodoc>Yield(bool onlyIfNeeded=False) -&gt; bool</autodoc>
        <docstring>Process all currently pending events right now, instead of waiting until
return to the event loop.  It is an error to call Yield() recursively unless
the value of onlyIfNeeded is True.

WARNING: This function is dangerous as it can lead to unexpected
         reentrancies (i.e. when called from an event handler it
         may result in calling the same event handler again), use
         with _extreme_ care or, better, don't use at all!
</docstring>
        <paramlist>
          <param name="onlyIfNeeded" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="WakeUpIdle" type="" overloaded="no">
        <autodoc>WakeUpIdle()</autodoc>
        <docstring>Make sure that idle events are sent again</docstring>
      </method>
      <method name="MainLoop" type="int" overloaded="no">
        <autodoc>MainLoop() -&gt; int</autodoc>
        <docstring>Execute the main GUI loop, the function returns when the loop ends.</docstring>
      </method>
      <method name="Exit" type="" overloaded="no">
        <autodoc>Exit()</autodoc>
        <docstring>Exit the main loop thus terminating the application.</docstring>
      </method>
      <method name="ExitMainLoop" type="" overloaded="no">
        <autodoc>ExitMainLoop()</autodoc>
        <docstring>Exit the main GUI loop during the next iteration (i.e. it does not
stop the program immediately!)</docstring>
      </method>
      <method name="Pending" type="bool" overloaded="no">
        <autodoc>Pending() -&gt; bool</autodoc>
        <docstring>Returns True if there are unprocessed events in the event queue.</docstring>
      </method>
      <method name="Dispatch" type="bool" overloaded="no">
        <autodoc>Dispatch() -&gt; bool</autodoc>
        <docstring>Process the first event in the event queue (blocks until an event
appears if there are none currently)</docstring>
      </method>
      <method name="ProcessIdle" type="bool" overloaded="no">
        <autodoc>ProcessIdle() -&gt; bool</autodoc>
        <docstring>Called from the MainLoop when the application becomes idle and sends an
IdleEvent to all interested parties.  Returns True is more idle events are
needed, False if not.</docstring>
      </method>
      <method name="SendIdleEvents" type="bool" overloaded="no">
        <autodoc>SendIdleEvents(Window win, IdleEvent event) -&gt; bool</autodoc>
        <docstring>Send idle event to window and all subwindows.  Returns True if more idle time
is requested.</docstring>
        <paramlist>
          <param name="win" type="wxWindow" default=""/>
          <param name="event" type="IdleEvent" default=""/>
        </paramlist>
      </method>
      <method name="IsActive" type="bool" overloaded="no">
        <autodoc>IsActive() -&gt; bool</autodoc>
        <docstring>Return True if our app has focus.</docstring>
      </method>
      <method name="SetTopWindow" type="" overloaded="no">
        <autodoc>SetTopWindow(Window win)</autodoc>
        <docstring>Set the "main" top level window</docstring>
        <paramlist>
          <param name="win" type="wxWindow" default=""/>
        </paramlist>
      </method>
      <method name="GetTopWindow" type="wxWindow" overloaded="no">
        <autodoc>GetTopWindow() -&gt; Window</autodoc>
        <docstring>Return the "main" top level window (if it hadn't been set previously with
SetTopWindow(), will return just some top level window and, if there not any,
will return None)</docstring>
      </method>
      <method name="SetExitOnFrameDelete" type="" overloaded="no">
        <autodoc>SetExitOnFrameDelete(bool flag)</autodoc>
        <docstring>Control the exit behaviour: by default, the program will exit the main loop
(and so, usually, terminate) when the last top-level program window is
deleted.  Beware that if you disable this behaviour (with
SetExitOnFrameDelete(False)), you'll have to call ExitMainLoop() explicitly
from somewhere.
</docstring>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetExitOnFrameDelete" type="bool" overloaded="no">
        <autodoc>GetExitOnFrameDelete() -&gt; bool</autodoc>
        <docstring>Get the current exit behaviour setting.</docstring>
      </method>
      <method name="SetUseBestVisual" type="" overloaded="no">
        <autodoc>SetUseBestVisual(bool flag)</autodoc>
        <docstring>Set whether the app should try to use the best available visual on systems
where more than one is available, (Sun, SGI, XFree86 4, etc.)</docstring>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetUseBestVisual" type="bool" overloaded="no">
        <autodoc>GetUseBestVisual() -&gt; bool</autodoc>
        <docstring>Get current UseBestVisual setting.</docstring>
      </method>
      <method name="SetPrintMode" type="" overloaded="no">
        <autodoc>SetPrintMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintMode" type="int" overloaded="no">
        <autodoc>GetPrintMode() -&gt; int</autodoc>
      </method>
      <method name="SetAssertMode" type="" overloaded="no">
        <autodoc>SetAssertMode(int mode)</autodoc>
        <docstring>Set the OnAssert behaviour for debug and hybrid builds.  The following flags
may be or'd together:

 wx.PYAPP_ASSERT_SUPPRESS         Don't do anything
 wx.PYAPP_ASSERT_EXCEPTION        Turn it into a Python exception if possible (default)
 wx.PYAPP_ASSERT_DIALOG           Display a message dialog
 wx.PYAPP_ASSERT_LOG              Write the assertion info to the wx.Log
</docstring>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAssertMode" type="int" overloaded="no">
        <autodoc>GetAssertMode() -&gt; int</autodoc>
        <docstring>Get the current OnAssert behaviour setting.</docstring>
      </method>
      <staticmethod name="GetMacSupportPCMenuShortcuts" type="bool" overloaded="no">
        <autodoc>GetMacSupportPCMenuShortcuts() -&gt; bool</autodoc>
      </staticmethod>
      <staticmethod name="GetMacAboutMenuItemId" type="long" overloaded="no">
        <autodoc>GetMacAboutMenuItemId() -&gt; long</autodoc>
      </staticmethod>
      <staticmethod name="GetMacPreferencesMenuItemId" type="long" overloaded="no">
        <autodoc>GetMacPreferencesMenuItemId() -&gt; long</autodoc>
      </staticmethod>
      <staticmethod name="GetMacExitMenuItemId" type="long" overloaded="no">
        <autodoc>GetMacExitMenuItemId() -&gt; long</autodoc>
      </staticmethod>
      <staticmethod name="GetMacHelpMenuTitleName" type="String" overloaded="no">
        <autodoc>GetMacHelpMenuTitleName() -&gt; String</autodoc>
      </staticmethod>
      <staticmethod name="SetMacSupportPCMenuShortcuts" type="" overloaded="no">
        <autodoc>SetMacSupportPCMenuShortcuts(bool val)</autodoc>
        <paramlist>
          <param name="val" type="bool" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="SetMacAboutMenuItemId" type="" overloaded="no">
        <autodoc>SetMacAboutMenuItemId(long val)</autodoc>
        <paramlist>
          <param name="val" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="SetMacPreferencesMenuItemId" type="" overloaded="no">
        <autodoc>SetMacPreferencesMenuItemId(long val)</autodoc>
        <paramlist>
          <param name="val" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="SetMacExitMenuItemId" type="" overloaded="no">
        <autodoc>SetMacExitMenuItemId(long val)</autodoc>
        <paramlist>
          <param name="val" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="SetMacHelpMenuTitleName" type="" overloaded="no">
        <autodoc>SetMacHelpMenuTitleName(String val)</autodoc>
        <paramlist>
          <param name="val" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <method name="_BootstrapApp" type="" overloaded="no">
        <autodoc>_BootstrapApp()</autodoc>
        <docstring>For internal use only</docstring>
      </method>
      <staticmethod name="GetComCtl32Version" type="int" overloaded="no">
        <autodoc>GetComCtl32Version() -&gt; int</autodoc>
        <docstring>Returns 400, 470, 471 for comctl32.dll 4.00, 4.70, 4.71 or 0 if it
wasn't found at all.  Raises an exception on non-Windows platforms.</docstring>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <method name="Exit" oldname="wxExit" type="" overloaded="no">
      <autodoc>Exit()</autodoc>
      <docstring>Force an exit of the application.  Convenience for wx.GetApp().Exit()</docstring>
    </method>
    <method name="Yield" oldname="wxYield" type="bool" overloaded="no">
      <autodoc>Yield() -&gt; bool</autodoc>
      <docstring>Yield to other apps/messages.  Convenience for wx.GetApp().Yield()</docstring>
    </method>
    <method name="YieldIfNeeded" oldname="wxYieldIfNeeded" type="bool" overloaded="no">
      <autodoc>YieldIfNeeded() -&gt; bool</autodoc>
      <docstring>Yield to other apps/messages.  Convenience for wx.GetApp().Yield(True)</docstring>
    </method>
    <method name="SafeYield" oldname="wxSafeYield" type="bool" overloaded="no">
      <autodoc>SafeYield(Window win=None, bool onlyIfNeeded=False) -&gt; bool</autodoc>
      <docstring>This function is similar to wx.Yield, except that it disables the user input
to all program windows before calling wx.Yield and re-enables it again
afterwards. If win is not None, this window will remain enabled, allowing the
implementation of some limited user interaction.

Returns the result of the call to wx.Yield.</docstring>
      <paramlist>
        <param name="win" type="wxWindow" default="NULL"/>
        <param name="onlyIfNeeded" type="bool" default="False"/>
      </paramlist>
    </method>
    <method name="WakeUpIdle" oldname="wxWakeUpIdle" type="" overloaded="no">
      <autodoc>WakeUpIdle()</autodoc>
      <docstring>Cause the message queue to become empty again, so idle events will be sent.</docstring>
    </method>
    <method name="PostEvent" oldname="wxPostEvent" type="" overloaded="no">
      <autodoc>PostEvent(EvtHandler dest, Event event)</autodoc>
      <docstring>Send an event to a window or other wx.EvtHandler to be processed later.</docstring>
      <paramlist>
        <param name="dest" type="EvtHandler" default=""/>
        <param name="event" type="Event" default=""/>
      </paramlist>
    </method>
    <method name="App_CleanUp" oldname="wxApp_CleanUp" type="" overloaded="no">
      <autodoc>App_CleanUp()</autodoc>
      <docstring>For internal use only, it is used to cleanup after wxWindows when Python shuts down.</docstring>
    </method>
    <method name="GetApp" oldname="wxGetApp" type="PyApp" overloaded="no">
      <autodoc>GetApp() -&gt; PyApp</autodoc>
      <docstring>Return a reference to the current wx.App object.</docstring>
    </method>
    <pythoncode>
#----------------------------------------------------------------------

class PyOnDemandOutputWindow:
    """
    A class that can be used for redirecting Python's stdout and
    stderr streams.  It will do nothing until something is wrriten to
    the stream at which point it will create a Frame with a text area
    and write the text there.
    """
    def __init__(self, title = "wxPython: stdout/stderr"):
        self.frame  = None
        self.title  = title
        self.parent = None

    def SetParent(self, parent):
        """Set the window to be used as the popup Frame's parent."""
        self.parent = parent


    def CreateOutputWindow(self, st):
        self.frame = wx.Frame(self.parent, -1, self.title,
                              style=wx.DEFAULT_FRAME_STYLE | wx.NO_FULL_REPAINT_ON_RESIZE)
        self.text  = wx.TextCtrl(self.frame, -1, "",
                                 style = wx.TE_MULTILINE | wx.TE_READONLY)
        self.text.AppendText(st)
        self.frame.SetSize((450, 300))
        self.frame.Show(True)
        EVT_CLOSE(self.frame, self.OnCloseWindow)
        

    def OnCloseWindow(self, event):
        if self.frame is not None:
            self.frame.Destroy()
        self.frame = None
        self.text  = None


    # These methods provide the file-like output behaviour.
    def write(self, text):
        """
        Create the output window if needed and write the string to it.
        If not called in the context of the gui thread then uses
        CallAfter to do the work there.
        """        
        if self.frame is None:
            if not wx.Thread_IsMain():
                wx.CallAfter(self.CreateOutputWindow, text)
            else:
                self.CreateOutputWindow(text)
        else:
            if not wx.Thread_IsMain():
                wx.CallAfter(self.text.AppendText, text)
            else:
                self.text.AppendText(text)


    def close(self):
        if self.frame is not None:
            wx.CallAfter(self.frame.Close)



#----------------------------------------------------------------------

_defRedirect = (wx.Platform == '__WXMSW__' or wx.Platform == '__WXMAC__')

class App(wx.PyApp):
    """
    The main application class.  Derive from this and implement an OnInit
    method that creates a frame and then calls self.SetTopWindow(frame)
    """
    outputWindowClass = PyOnDemandOutputWindow

    def __init__(self, redirect=_defRedirect, filename=None, useBestVisual=False):
        wx.PyApp.__init__(self)

        if wx.Platform == "__WXMAC__":
            try:
                import MacOS
                if not MacOS.WMAvailable():
                    print """\\
This program needs access to the screen. Please run with 'pythonw',
not 'python', and only when you are logged in on the main display of
your Mac."""
                    _sys.exit(1)
            except:
                pass

        # This has to be done before OnInit
        self.SetUseBestVisual(useBestVisual)

        # Set the default handler for SIGINT.  This fixes a problem
        # where if Ctrl-C is pressed in the console that started this
        # app then it will not appear to do anything, (not even send
        # KeyboardInterrupt???)  but will later segfault on exit.  By
        # setting the default handler then the app will exit, as
        # expected (depending on platform.)
        try:
            import signal
            signal.signal(signal.SIGINT, signal.SIG_DFL)
        except:
            pass

        # Save and redirect the stdio to a window?
        self.stdioWin = None
        self.saveStdio = (_sys.stdout, _sys.stderr)
        if redirect:
            self.RedirectStdio(filename)

        # This finishes the initialization of wxWindows and then calls
        # the OnInit that should be present in the derived class
        self._BootstrapApp()


    def __del__(self):
        try:
            self.RestoreStdio()  # Just in case the MainLoop was overridden
        except:
            pass


    def SetTopWindow(self, frame):
        """Set the \\"main\\" top level window"""
        if self.stdioWin:
            self.stdioWin.SetParent(frame)
        wx.PyApp.SetTopWindow(self, frame)


    def MainLoop(self):
        """Execute the main GUI event loop"""
        wx.PyApp.MainLoop(self)
        self.RestoreStdio()


    def RedirectStdio(self, filename=None):
        """Redirect sys.stdout and sys.stderr to a file or a popup window."""
        if filename:
            _sys.stdout = _sys.stderr = open(filename, 'a')
        else:
            self.stdioWin = self.outputWindowClass()
            _sys.stdout = _sys.stderr = self.stdioWin


    def RestoreStdio(self):
        _sys.stdout, _sys.stderr = self.saveStdio



# change from wxPyApp_ to wxApp_
App_GetMacSupportPCMenuShortcuts = _core.PyApp_GetMacSupportPCMenuShortcuts
App_GetMacAboutMenuItemId        = _core.PyApp_GetMacAboutMenuItemId
App_GetMacPreferencesMenuItemId  = _core.PyApp_GetMacPreferencesMenuItemId
App_GetMacExitMenuItemId         = _core.PyApp_GetMacExitMenuItemId
App_GetMacHelpMenuTitleName      = _core.PyApp_GetMacHelpMenuTitleName
App_SetMacSupportPCMenuShortcuts = _core.PyApp_SetMacSupportPCMenuShortcuts
App_SetMacAboutMenuItemId        = _core.PyApp_SetMacAboutMenuItemId
App_SetMacPreferencesMenuItemId  = _core.PyApp_SetMacPreferencesMenuItemId
App_SetMacExitMenuItemId         = _core.PyApp_SetMacExitMenuItemId
App_SetMacHelpMenuTitleName      = _core.PyApp_SetMacHelpMenuTitleName
App_GetComCtl32Version           = _core.PyApp_GetComCtl32Version

#----------------------------------------------------------------------------

class PySimpleApp(wx.App):
    """
    A simple application class.  You can just create one of these and
    then then make your top level windows later, and not have to worry
    about OnInit."""

    def __init__(self, redirect=False, filename=None, useBestVisual=False):
        wx.App.__init__(self, redirect, filename, useBestVisual)
        
    def OnInit(self):
        wx.InitAllImageHandlers()
        return True


# Is anybody using this one?
class PyWidgetTester(wx.App):
    def __init__(self, size = (250, 100)):
        self.size = size
        wx.App.__init__(self, 0)

    def OnInit(self):
        self.frame = wx.Frame(None, -1, "Widget Tester", pos=(0,0), size=self.size)
        self.SetTopWindow(self.frame)
        return True

    def SetWidget(self, widgetClass, *args):
        w = widgetClass(self.frame, *args)
        self.frame.Show(True)

#----------------------------------------------------------------------------
# DO NOT hold any other references to this object.  This is how we
# know when to cleanup system resources that wxWin is holding.  When
# the sys module is unloaded, the refcount on sys.__wxPythonCleanup
# goes to zero and it calls the wxApp_CleanUp function.

class __wxPyCleanup:
    def __init__(self):
        self.cleanup = _core.App_CleanUp
    def __del__(self):
        self.cleanup()

_sys.__wxPythonCleanup = __wxPyCleanup()

## # another possible solution, but it gets called too early...
## if sys.version[0] == '2':
##     import atexit
##     atexit.register(_core.wxApp_CleanUp)
## else:
##     sys.exitfunc = _core.wxApp_CleanUp


#----------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="AcceleratorEntry" oldname="wxAcceleratorEntry" module="core">
      <constructor name="AcceleratorEntry" overloaded="no">
        <autodoc>__init__(int flags=0, int keyCode=0, int cmd=0, MenuItem item=None) -&gt; AcceleratorEntry</autodoc>
        <paramlist>
          <param name="flags" type="int" default="0"/>
          <param name="keyCode" type="int" default="0"/>
          <param name="cmd" type="int" default="0"/>
          <param name="item" type="wxMenuItem" default="NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxAcceleratorEntry" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(int flags, int keyCode, int cmd, MenuItem item=None)</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
          <param name="keyCode" type="int" default=""/>
          <param name="cmd" type="int" default=""/>
          <param name="item" type="wxMenuItem" default="NULL"/>
        </paramlist>
      </method>
      <method name="SetMenuItem" type="" overloaded="no">
        <autodoc>SetMenuItem(MenuItem item)</autodoc>
        <paramlist>
          <param name="item" type="wxMenuItem" default=""/>
        </paramlist>
      </method>
      <method name="GetMenuItem" type="wxMenuItem" overloaded="no">
        <autodoc>GetMenuItem() -&gt; MenuItem</autodoc>
      </method>
      <method name="GetFlags" type="int" overloaded="no">
        <autodoc>GetFlags() -&gt; int</autodoc>
      </method>
      <method name="GetKeyCode" type="int" overloaded="no">
        <autodoc>GetKeyCode() -&gt; int</autodoc>
      </method>
      <method name="GetCommand" type="int" overloaded="no">
        <autodoc>GetCommand() -&gt; int</autodoc>
      </method>
    </class>
    <class name="AcceleratorTable" oldname="wxAcceleratorTable" module="core">
      <baseclass name="Object"/>
      <constructor name="AcceleratorTable" overloaded="no">
        <autodoc>__init__(entries) -&gt; AcceleratorTable</autodoc>
        <docstring>Construct an AcceleratorTable from a list of AcceleratorEntry items or
3-tuples (flags, keyCode, cmdID)</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="entries" type="AcceleratorEntry" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxAcceleratorTable" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
    </class>
    <method name="GetAccelFromString" oldname="wxGetAccelFromString" type="AcceleratorEntry" overloaded="no">
      <autodoc>GetAccelFromString(String label) -&gt; AcceleratorEntry</autodoc>
      <paramlist>
        <param name="label" type="String" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Window" oldname="wxWindow" module="core">
      <docstring>
wx.Window is the base class for all windows and represents any visible
object on the screen. All controls, top level windows and so on are
wx.Windows. Sizers and device contexts are not however, as they don't
appear on screen themselves.
</docstring>
      <refdoc>
  Styles

    wx.SIMPLE_BORDER:          Displays a thin border around the window.

    wx.DOUBLE_BORDER:          Displays a double border. Windows and Mac only.

    wx.SUNKEN_BORDER:          Displays a sunken border.

    wx.RAISED_BORDER:          Displays a raised border.

    wx.STATIC_BORDER:           Displays a border suitable for a static
                                control. Windows only.

    wx.NO_BORDER:               Displays no border, overriding the default
                                border style for the window.

    wx.TRANSPARENT_WINDOW:      The window is transparent, that is, it
                                will not receive paint events. Windows only.

    wx.TAB_TRAVERSAL:           Use this to enable tab traversal for
                                non-dialog windows.

    wx.WANTS_CHARS:             Use this to indicate that the window
                                wants to get all char/key events for
                                all keys - even for keys like TAB or
                                ENTER which are usually used for
                                dialog navigation and which wouldn't
                                be generated without this style. If
                                you need to use this style in order to
                                get the arrows or etc., but would
                                still like to have normal keyboard
                                navigation take place, you should
                                create and send a wxNavigationKeyEvent
                                in response to the key events for Tab
                                and Shift-Tab.

    wx.NO_FULL_REPAINT_ON_RESIZE: Disables repainting the window
                                  completely when its size is changed
                                  - you will have to repaint the new
                                  window area manually if you use this
                                  style. As of version 2.5.1 this
                                  style is on by default.  Use
                                  wx.FULL_REPAINT_ON_RESIZE to
                                  deactivate it.

    wx.VSCROLL:          Use this style to enable a vertical scrollbar.

    wx.HSCROLL:          Use this style to enable a horizontal scrollbar.

    wx.ALWAYS_SHOW_SB:          If a window has scrollbars, disable them
                                instead of hiding them when they are
                                not needed (i.e. when the size of the
                                window is big enough to not require
                                the scrollbars to navigate it). This
                                style is currently only implemented
                                for wxMSW and wxUniversal and does
                                nothing on the other platforms.

    wx.CLIP_CHILDREN:           Use this style to eliminate flicker caused by
                                the background being repainted, then
                                children being painted over
                                them. Windows only.

    wx.FULL_REPAINT_ON_RESIZE:  Use this style to force a complete
                                redraw of the window whenever it is
                                resized instead of redrawing just the
                                part of the window affected by
                                resizing. Note that this was the
                                behaviour by default before 2.5.1
                                release and that if you experience
                                redraw problems with the code which
                                previously used to work you may want
                                to try this.

  Extra Styles

    wx.WS_EX_VALIDATE_RECURSIVELY:  By default,
                                    Validate/TransferDataTo/FromWindow()
                                    only work on direct children of
                                    the window (compatible
                                    behaviour). Set this flag to make
                                    them recursively descend into all
                                    subwindows.

    wx.WS_EX_BLOCK_EVENTS:          wx.CommandEvents and the objects of the
                                    derived classes are forwarded to
                                    the parent window and so on
                                    recursively by default. Using this
                                    flag for the given window allows
                                    to block this propagation at this
                                    window, i.e. prevent the events
                                    from being propagated further
                                    upwards. Dialogs have this flag on
                                    by default.

    wx.WS_EX_TRANSIENT              Don't use this window as an implicit parent for
                                    the other windows: this must be
                                    used with transient windows as
                                    otherwise there is the risk of
                                    creating a dialog/frame with this
                                    window as a parent which would
                                    lead to a crash if the parent is
                                    destroyed before the child.

    wx.WS_EX_PROCESS_IDLE:          This window should always process idle
                                    events, even if the mode set by
                                    wx.IdleEvent.SetMode is
                                    wx.IDLE_PROCESS_SPECIFIED.

    wx.WS_EX_PROCESS_UI_UPDATES     This window should always process UI
                                    update events, even if the mode
                                    set by wxUpdateUIEvent::SetMode is
                                    wxUPDATE_UI_PROCESS_SPECIFIED.

</refdoc>
      <baseclass name="EvtHandler"/>
      <constructor name="Window" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; Window</autodoc>
        <docstring>Construct and show a generic Window.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreWindow" overloaded="no">
        <autodoc>PreWindow() -&gt; Window</autodoc>
        <docstring>Precreate a Window for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; bool</autodoc>
        <docstring>Create the GUI part of the Window for 2-phase creation mode.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </method>
      <method name="Close" type="bool" overloaded="no">
        <autodoc>Close(bool force=False) -&gt; bool</autodoc>
        <docstring>This function simply generates a EVT_CLOSE event whose handler usually
tries to close the window. It doesn't close the window itself,
however.  If force is False (the default) then the window's close
handler will be allowed to veto the destruction of the window.

Usually Close is only used with the top level windows (wx.Frame and
wx.Dialog classes) as the others are not supposed to have any special
EVT_CLOSE logic.

The close handler should check whether the window is being deleted
forcibly, using wx.CloseEvent.GetForce, in which case it should
destroy the window using wx.Window.Destroy.

Note that calling Close does not guarantee that the window will be
destroyed; but it provides a way to simulate a manual close of a
window, which may or may not be implemented by destroying the
window. The default EVT_CLOSE handler for wx.Dialog does not
necessarily delete the dialog, since it will simply simulate an
wxID_CANCEL event which is handled by the appropriate button event
handler and may do anything at all.

To guarantee that the window will be destroyed, call wx.Window.Destroy
instead.</docstring>
        <paramlist>
          <param name="force" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="Destroy" type="bool" overloaded="no">
        <autodoc>Destroy() -&gt; bool</autodoc>
        <docstring>Destroys the window safely.  Frames and dialogs are not destroyed
immediately when this function is called -- they are added to a list
of windows to be deleted on idle time, when all the window's events
have been processed. This prevents problems with events being sent to
non-existent windows.

Returns True if the window has either been successfully deleted, or it
has been added to the list of windows pending real deletion.</docstring>
      </method>
      <method name="DestroyChildren" type="bool" overloaded="no">
        <autodoc>DestroyChildren() -&gt; bool</autodoc>
        <docstring>Destroys all children of a window. Called automatically by the destructor.</docstring>
      </method>
      <method name="IsBeingDeleted" type="bool" overloaded="no">
        <autodoc>IsBeingDeleted() -&gt; bool</autodoc>
        <docstring>Is the window in the process of being deleted?</docstring>
      </method>
      <method name="SetTitle" type="" overloaded="no">
        <autodoc>SetTitle(String title)</autodoc>
        <docstring>Sets the window's title. Applicable only to frames and dialogs.</docstring>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTitle" type="String" overloaded="no">
        <autodoc>GetTitle() -&gt; String</autodoc>
        <docstring>Gets the window's title. Applicable only to frames and dialogs.</docstring>
      </method>
      <method name="SetLabel" type="" overloaded="no">
        <autodoc>SetLabel(String label)</autodoc>
        <docstring>Set the text which the window shows in its label if applicable.</docstring>
        <paramlist>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel() -&gt; String</autodoc>
        <docstring>Generic way of getting a label from any window, for
identification purposes.  The interpretation of this function
differs from class to class. For frames and dialogs, the value
returned is the title. For buttons or static text controls, it is
the button text. This function can be useful for meta-programs
(such as testing tools or special-needs access programs) which
need to identify windows by name.</docstring>
      </method>
      <method name="SetName" type="" overloaded="no">
        <autodoc>SetName(String name)</autodoc>
        <docstring>Sets the window's name.  The window name is used for ressource
setting in X, it is not the same as the window title/label</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
        <docstring>Returns the window's name.  This name is not guaranteed to be
unique; it is up to the programmer to supply an appropriate name
in the window constructor or via wx.Window.SetName.</docstring>
      </method>
      <method name="SetWindowVariant" type="" overloaded="no">
        <autodoc>SetWindowVariant(int variant)</autodoc>
        <docstring>Sets the variant of the window/font size to use for this window,
if the platform supports variants, (for example, wxMac.)</docstring>
        <paramlist>
          <param name="variant" type="wxWindowVariant" default=""/>
        </paramlist>
      </method>
      <method name="GetWindowVariant" type="wxWindowVariant" overloaded="no">
        <autodoc>GetWindowVariant() -&gt; int</autodoc>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(int winid)</autodoc>
        <docstring>Sets the identifier of the window.  Each window has an integer
identifier. If the application has not provided one, an identifier
will be generated. Normally, the identifier should be provided on
creation and should not be modified subsequently.</docstring>
        <paramlist>
          <param name="winid" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetId" type="int" overloaded="no">
        <autodoc>GetId() -&gt; int</autodoc>
        <docstring>Returns the identifier of the window.  Each window has an integer
identifier. If the application has not provided one (or the default Id
-1 is used) then an unique identifier with a negative value will be
generated.</docstring>
      </method>
      <staticmethod name="NewControlId" type="int" overloaded="no">
        <autodoc>NewControlId() -&gt; int</autodoc>
        <docstring>Generate a control id for the controls which were not given one.</docstring>
      </staticmethod>
      <staticmethod name="NextControlId" type="int" overloaded="no">
        <autodoc>NextControlId(int winid) -&gt; int</autodoc>
        <docstring>Get the id of the control following the one with the given
(autogenerated) id</docstring>
        <paramlist>
          <param name="winid" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="PrevControlId" type="int" overloaded="no">
        <autodoc>PrevControlId(int winid) -&gt; int</autodoc>
        <docstring>Get the id of the control preceding the one with the given
(autogenerated) id</docstring>
        <paramlist>
          <param name="winid" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(Size size)</autodoc>
        <docstring>Sets the size of the window in pixels.</docstring>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetDimensions" type="" overloaded="no">
        <autodoc>SetDimensions(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
        <docstring>Sets the position and size of the window in pixels.  The sizeFlags
parameter indicates the interpretation of the other params if they are
-1.  wx.SIZE_AUTO*: a -1 indicates that a class-specific default
shoudl be used.  wx.SIZE_USE_EXISTING: existing dimensions should be
used if -1 values are supplied.  wxSIZE_ALLOW_MINUS_ONE: allow
dimensions of -1 and less to be interpreted as real dimensions, not
default values.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
        </paramlist>
      </method>
      <method name="SetRect" type="" overloaded="no">
        <autodoc>SetRect(Rect rect, int sizeFlags=SIZE_AUTO)</autodoc>
        <docstring>Sets the position and size of the window in pixels using a wx.Rect.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
          <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
        </paramlist>
      </method>
      <method name="SetSizeWH" type="" overloaded="no">
        <autodoc>SetSizeWH(int width, int height)</autodoc>
        <docstring>Sets the size of the window in pixels.</docstring>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Move" type="" overloaded="no">
        <autodoc>Move(Point pt, int flags=SIZE_USE_EXISTING)</autodoc>
        <docstring>Moves the window to the given position.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="flags" type="int" default="wxSIZE_USE_EXISTING"/>
        </paramlist>
      </method>
      <method name="MoveXY" type="" overloaded="no">
        <autodoc>MoveXY(int x, int y, int flags=SIZE_USE_EXISTING)</autodoc>
        <docstring>Moves the window to the given position.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="flags" type="int" default="wxSIZE_USE_EXISTING"/>
        </paramlist>
      </method>
      <method name="Raise" type="" overloaded="no">
        <autodoc>Raise()</autodoc>
        <docstring>Raises the window to the top of the window hierarchy if it is a
managed window (dialog or frame).</docstring>
      </method>
      <method name="Lower" type="" overloaded="no">
        <autodoc>Lower()</autodoc>
        <docstring>Lowers the window to the bottom of the window hierarchy if it is a
managed window (dialog or frame).</docstring>
      </method>
      <method name="SetClientSize" type="" overloaded="no">
        <autodoc>SetClientSize(Size size)</autodoc>
        <docstring>This sets the size of the window client area in pixels. Using this
function to size a window tends to be more device-independent than
wx.Window.SetSize, since the application need not worry about what
dimensions the border or title bar have when trying to fit the window
around panel items, for example.</docstring>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetClientSizeWH" type="" overloaded="no">
        <autodoc>SetClientSizeWH(int width, int height)</autodoc>
        <docstring>This sets the size of the window client area in pixels. Using this
function to size a window tends to be more device-independent than
wx.Window.SetSize, since the application need not worry about what
dimensions the border or title bar have when trying to fit the window
around panel items, for example.</docstring>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetClientRect" type="" overloaded="no">
        <autodoc>SetClientRect(Rect rect)</autodoc>
        <docstring>This sets the size of the window client area in pixels. Using this
function to size a window tends to be more device-independent than
wx.Window.SetSize, since the application need not worry about what
dimensions the border or title bar have when trying to fit the window
around panel items, for example.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
        <docstring>Get the window's position.</docstring>
      </method>
      <method name="GetPositionTuple" type="" overloaded="no">
        <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
        <docstring>Get the window's position.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
        <docstring>Get the window size.</docstring>
      </method>
      <method name="GetSizeTuple" type="" overloaded="no">
        <autodoc>GetSizeTuple() -&gt; (width, height)</autodoc>
        <docstring>Get the window size.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetRect" type="Rect" overloaded="no">
        <autodoc>GetRect() -&gt; Rect</autodoc>
        <docstring>Returns the size and position of the window as a wx.Rect object.</docstring>
      </method>
      <method name="GetClientSize" type="Size" overloaded="no">
        <autodoc>GetClientSize() -&gt; Size</autodoc>
        <docstring>This gets the size of the window's 'client area' in pixels. The client
area is the area which may be drawn on by the programmer, excluding
title bar, border, scrollbars, etc.</docstring>
      </method>
      <method name="GetClientSizeTuple" type="" overloaded="no">
        <autodoc>GetClientSizeTuple() -&gt; (width, height)</autodoc>
        <docstring>This gets the size of the window's 'client area' in pixels. The client
area is the area which may be drawn on by the programmer, excluding
title bar, border, scrollbars, etc.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetClientAreaOrigin" type="Point" overloaded="no">
        <autodoc>GetClientAreaOrigin() -&gt; Point</autodoc>
        <docstring>Get the origin of the client area of the window relative to the
window's top left corner (the client area may be shifted because of
the borders, scrollbars, other decorations...)</docstring>
      </method>
      <method name="GetClientRect" type="Rect" overloaded="no">
        <autodoc>GetClientRect() -&gt; Rect</autodoc>
        <docstring>Get the client area position and size as a wx.Rect object.</docstring>
      </method>
      <method name="GetBestSize" type="Size" overloaded="no">
        <autodoc>GetBestSize() -&gt; Size</autodoc>
        <docstring>This functions returns the best acceptable minimal size for the
window, if applicable. For example, for a static text control, it will be
the minimal size such that the control label is not truncated. For
windows containing subwindows (suzh aswx.Panel), the size returned
by this function will be the same as the size the window would have
had after calling Fit.</docstring>
      </method>
      <method name="GetBestSizeTuple" type="" overloaded="no">
        <autodoc>GetBestSizeTuple() -&gt; (width, height)</autodoc>
        <docstring>This functions returns the best acceptable minimal size for the
window, if applicable. For example, for a static text control, it will be
the minimal size such that the control label is not truncated. For
windows containing subwindows (suzh aswx.Panel), the size returned
by this function will be the same as the size the window would have
had after calling Fit.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAdjustedBestSize" type="Size" overloaded="no">
        <autodoc>GetAdjustedBestSize() -&gt; Size</autodoc>
        <docstring>This method is similar to GetBestSize, except in one
thing. GetBestSize should return the minimum untruncated size of the
window, while this method will return the largest of BestSize and any
user specified minimum size. ie. it is the minimum size the window
should currently be drawn at, not the minimal size it can possibly
tolerate.</docstring>
      </method>
      <method name="Center" type="" overloaded="no">
        <autodoc>Center(int direction=BOTH)</autodoc>
        <docstring>Centers the window.  The parameter specifies the direction for
cetering, and may be wx.HORIZONTAL, wx.VERTICAL or wx.BOTH. It may
also include wx.CENTER_ON_SCREEN flag if you want to center the window
on the entire screen and not on its parent window.  If it is a
top-level window and has no parent then it will always be centered
relative to the screen.</docstring>
        <paramlist>
          <param name="direction" type="int" default="wxBOTH"/>
        </paramlist>
      </method>
      <method name="CenterOnScreen" type="" overloaded="no">
        <autodoc>CenterOnScreen(int dir=BOTH)</autodoc>
        <docstring>Center on screen (only works for top level windows)</docstring>
        <paramlist>
          <param name="dir" type="int" default="wxBOTH"/>
        </paramlist>
      </method>
      <method name="CenterOnParent" type="" overloaded="no">
        <autodoc>CenterOnParent(int dir=BOTH)</autodoc>
        <docstring>Center with respect to the the parent window</docstring>
        <paramlist>
          <param name="dir" type="int" default="wxBOTH"/>
        </paramlist>
      </method>
      <method name="Fit" type="" overloaded="no">
        <autodoc>Fit()</autodoc>
        <docstring>Sizes the window so that it fits around its subwindows. This function
won't do anything if there are no subwindows and will only really work
correctly if sizers are used for the subwindows layout. Also, if the
window has exactly one subwindow it is better (faster and the result
is more precise as Fit adds some margin to account for fuzziness of
its calculations) to call window.SetClientSize(child.GetSize())
instead of calling Fit.</docstring>
      </method>
      <method name="FitInside" type="" overloaded="no">
        <autodoc>FitInside()</autodoc>
        <docstring>Similar to Fit, but sizes the interior (virtual) size of a
window. Mainly useful with scrolled windows to reset scrollbars after
sizing changes that do not trigger a size event, and/or scrolled
windows without an interior sizer. This function similarly won't do
anything if there are no subwindows.</docstring>
      </method>
      <method name="SetSizeHints" type="" overloaded="no">
        <autodoc>SetSizeHints(int minW, int minH, int maxW=-1, int maxH=-1, int incW=-1, 
    int incH=-1)</autodoc>
        <docstring>Allows specification of minimum and maximum window sizes, and window
size increments. If a pair of values is not set (or set to -1), the
default values will be used.  If this function is called, the user
will not be able to size the window outside the given bounds. The
resizing increments are only significant under Motif or Xt.</docstring>
        <paramlist>
          <param name="minW" type="int" default=""/>
          <param name="minH" type="int" default=""/>
          <param name="maxW" type="int" default="-1"/>
          <param name="maxH" type="int" default="-1"/>
          <param name="incW" type="int" default="-1"/>
          <param name="incH" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="SetVirtualSizeHints" type="" overloaded="no">
        <autodoc>SetVirtualSizeHints(int minW, int minH, int maxW=-1, int maxH=-1)</autodoc>
        <docstring>Allows specification of minimum and maximum virtual window sizes. If a
pair of values is not set (or set to -1), the default values will be
used.  If this function is called, the user will not be able to size
the virtual area of the window outside the given bounds.</docstring>
        <paramlist>
          <param name="minW" type="int" default=""/>
          <param name="minH" type="int" default=""/>
          <param name="maxW" type="int" default="-1"/>
          <param name="maxH" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="GetMinWidth" type="int" overloaded="no">
        <autodoc>GetMinWidth() -&gt; int</autodoc>
      </method>
      <method name="GetMinHeight" type="int" overloaded="no">
        <autodoc>GetMinHeight() -&gt; int</autodoc>
      </method>
      <method name="GetMaxWidth" type="int" overloaded="no">
        <autodoc>GetMaxWidth() -&gt; int</autodoc>
      </method>
      <method name="GetMaxHeight" type="int" overloaded="no">
        <autodoc>GetMaxHeight() -&gt; int</autodoc>
      </method>
      <method name="GetMaxSize" type="Size" overloaded="no">
        <autodoc>GetMaxSize() -&gt; Size</autodoc>
      </method>
      <method name="SetVirtualSize" type="" overloaded="no">
        <autodoc>SetVirtualSize(Size size)</autodoc>
        <docstring>Set the the virtual size of a window in pixels.  For most windows this
is just the client area of the window, but for some like scrolled
windows it is more or less independent of the screen window size.</docstring>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetVirtualSizeWH" type="" overloaded="no">
        <autodoc>SetVirtualSizeWH(int w, int h)</autodoc>
        <docstring>Set the the virtual size of a window in pixels.  For most windows this
is just the client area of the window, but for some like scrolled
windows it is more or less independent of the screen window size.</docstring>
        <paramlist>
          <param name="w" type="int" default=""/>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetVirtualSize" type="Size" overloaded="no">
        <autodoc>GetVirtualSize() -&gt; Size</autodoc>
        <docstring>Get the the virtual size of the window in pixels.  For most windows
this is just the client area of the window, but for some like scrolled
windows it is more or less independent of the screen window size.</docstring>
      </method>
      <method name="GetVirtualSizeTuple" type="" overloaded="no">
        <autodoc>GetVirtualSizeTuple() -&gt; (width, height)</autodoc>
        <docstring>Get the the virtual size of the window in pixels.  For most windows
this is just the client area of the window, but for some like scrolled
windows it is more or less independent of the screen window size.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBestVirtualSize" type="Size" overloaded="no">
        <autodoc>GetBestVirtualSize() -&gt; Size</autodoc>
        <docstring>Return the largest of ClientSize and BestSize (as determined by a
sizer, interior children, or other means)</docstring>
      </method>
      <method name="Show" type="bool" overloaded="no">
        <autodoc>Show(bool show=True) -&gt; bool</autodoc>
        <docstring>Shows or hides the window. You may need to call Raise for a top level
window if you want to bring it to top, although this is not needed if
Show is called immediately after the frame creation.  Returns True if
the window has been shown or hidden or False if nothing was done
because it already was in the requested state.</docstring>
        <paramlist>
          <param name="show" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Hide" type="bool" overloaded="no">
        <autodoc>Hide() -&gt; bool</autodoc>
        <docstring>Equivalent to calling Show(False).</docstring>
      </method>
      <method name="Enable" type="bool" overloaded="no">
        <autodoc>Enable(bool enable=True) -&gt; bool</autodoc>
        <docstring>Enable or disable the window for user input. Note that when a parent
window is disabled, all of its children are disabled as well and they
are reenabled again when the parent is.  Returns true if the window
has been enabled or disabled, false if nothing was done, i.e. if the
window had already been in the specified state.</docstring>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Disable" type="bool" overloaded="no">
        <autodoc>Disable() -&gt; bool</autodoc>
        <docstring>Disables the window, same as Enable(false).</docstring>
      </method>
      <method name="IsShown" type="bool" overloaded="no">
        <autodoc>IsShown() -&gt; bool</autodoc>
        <docstring>Returns true if the window is shown, false if it has been hidden.</docstring>
      </method>
      <method name="IsEnabled" type="bool" overloaded="no">
        <autodoc>IsEnabled() -&gt; bool</autodoc>
        <docstring>Returns true if the window is enabled for input, false otherwise.</docstring>
      </method>
      <method name="SetWindowStyleFlag" type="" overloaded="no">
        <autodoc>SetWindowStyleFlag(long style)</autodoc>
        <docstring>Sets the style of the window. Please note that some styles cannot be
changed after the window creation and that Refresh() might be called
after changing the others for the change to take place immediately.</docstring>
        <paramlist>
          <param name="style" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetWindowStyleFlag" type="long" overloaded="no">
        <autodoc>GetWindowStyleFlag() -&gt; long</autodoc>
        <docstring>Gets the window style that was passed to the constructor or Create
method.</docstring>
      </method>
      <method name="HasFlag" type="bool" overloaded="no">
        <autodoc>HasFlag(int flag) -&gt; bool</autodoc>
        <docstring>Test if the given style is set for this window.</docstring>
        <paramlist>
          <param name="flag" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsRetained" type="bool" overloaded="no">
        <autodoc>IsRetained() -&gt; bool</autodoc>
        <docstring>Returns true if the window is retained, false otherwise.  Retained
windows are only available on X platforms.</docstring>
      </method>
      <method name="SetExtraStyle" type="" overloaded="no">
        <autodoc>SetExtraStyle(long exStyle)</autodoc>
        <docstring>Sets the extra style bits for the window.  Extra styles are the less
often used style bits which can't be set with the constructor or with
SetWindowStyleFlag()</docstring>
        <paramlist>
          <param name="exStyle" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetExtraStyle" type="long" overloaded="no">
        <autodoc>GetExtraStyle() -&gt; long</autodoc>
        <docstring>Returns the extra style bits for the window.</docstring>
      </method>
      <method name="MakeModal" type="" overloaded="no">
        <autodoc>MakeModal(bool modal=True)</autodoc>
        <docstring>Disables all other windows in the application so that the user can
only interact with this window.  Passing False will reverse this
effect.</docstring>
        <paramlist>
          <param name="modal" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetThemeEnabled" type="" overloaded="no">
        <autodoc>SetThemeEnabled(bool enableTheme)</autodoc>
        <docstring>This function tells a window if it should use the system's "theme"
 code to draw the windows' background instead if its own background
 drawing code. This will only have an effect on platforms that support
 the notion of themes in user defined windows. One such platform is
 GTK+ where windows can have (very colourful) backgrounds defined by a
 user's selected theme.

Dialogs, notebook pages and the status bar have this flag set to true
by default so that the default look and feel is simulated best.</docstring>
        <paramlist>
          <param name="enableTheme" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetThemeEnabled" type="bool" overloaded="no">
        <autodoc>GetThemeEnabled() -&gt; bool</autodoc>
        <docstring>Return the themeEnabled flag.</docstring>
      </method>
      <method name="SetFocus" type="" overloaded="no">
        <autodoc>SetFocus()</autodoc>
        <docstring>Set's the focus to this window, allowing it to receive keyboard input.</docstring>
      </method>
      <method name="SetFocusFromKbd" type="" overloaded="no">
        <autodoc>SetFocusFromKbd()</autodoc>
        <docstring>Set focus to this window as the result of a keyboard action.  Normally
only called internally.</docstring>
      </method>
      <staticmethod name="FindFocus" type="Window" overloaded="no">
        <autodoc>FindFocus() -&gt; Window</autodoc>
        <docstring>Returns the window or control that currently has the keyboard focus,
or None.</docstring>
      </staticmethod>
      <method name="AcceptsFocus" type="bool" overloaded="no">
        <autodoc>AcceptsFocus() -&gt; bool</autodoc>
        <docstring>Can this window have focus?</docstring>
      </method>
      <method name="AcceptsFocusFromKeyboard" type="bool" overloaded="no">
        <autodoc>AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
        <docstring>Can this window be given focus by keyboard navigation? if not, the
only way to give it focus (provided it accepts it at all) is to click
it.</docstring>
      </method>
      <method name="GetDefaultItem" type="Window" overloaded="no">
        <autodoc>GetDefaultItem() -&gt; Window</autodoc>
        <docstring>Get the default child of this parent, i.e. the one which is activated
by pressing &lt;Enter&gt; such as the OK button on a wx.Dialog.</docstring>
      </method>
      <method name="SetDefaultItem" type="Window" overloaded="no">
        <autodoc>SetDefaultItem(Window child) -&gt; Window</autodoc>
        <docstring>Set this child as default, return the old default.</docstring>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="SetTmpDefaultItem" type="" overloaded="no">
        <autodoc>SetTmpDefaultItem(Window win)</autodoc>
        <docstring>Set this child as temporary default</docstring>
        <paramlist>
          <param name="win" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetChildren" type="PyObject" overloaded="no">
        <autodoc>GetChildren() -&gt; PyObject</autodoc>
        <docstring>Returns a list of the window's children.  NOTE: Currently this is a
copy of the child window list maintained by the window, so the return
value of this function is only valid as long as the window's children
do not change.</docstring>
      </method>
      <method name="GetParent" type="Window" overloaded="no">
        <autodoc>GetParent() -&gt; Window</autodoc>
        <docstring>Returns the parent window of this window, or None if there isn't one.</docstring>
      </method>
      <method name="GetGrandParent" type="Window" overloaded="no">
        <autodoc>GetGrandParent() -&gt; Window</autodoc>
        <docstring>Returns the parent of the parent of this window, or None if there isn't one.</docstring>
      </method>
      <method name="IsTopLevel" type="bool" overloaded="no">
        <autodoc>IsTopLevel() -&gt; bool</autodoc>
        <docstring>Returns true if the given window is a top-level one. Currently all
frames and dialogs are always considered to be top-level windows (even
if they have a parent window).</docstring>
      </method>
      <method name="Reparent" type="bool" overloaded="no">
        <autodoc>Reparent(Window newParent) -&gt; bool</autodoc>
        <docstring>Reparents the window, i.e the window will be removed from its current
parent window (e.g. a non-standard toolbar in a wxFrame) and then
re-inserted into another. Available on Windows and GTK.  Returns True
if the parent was changed, False otherwise (error or newParent ==
oldParent)</docstring>
        <paramlist>
          <param name="newParent" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="AddChild" type="" overloaded="no">
        <autodoc>AddChild(Window child)</autodoc>
        <docstring>Adds a child window. This is called automatically by window creation
functions so should not be required by the application programmer.</docstring>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="RemoveChild" type="" overloaded="no">
        <autodoc>RemoveChild(Window child)</autodoc>
        <docstring>Removes a child window. This is called automatically by window
deletion functions so should not be required by the application
programmer.</docstring>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="FindWindowById" type="Window" overloaded="no">
        <autodoc>FindWindowById(long winid) -&gt; Window</autodoc>
        <docstring>Find a chld of this window by window ID</docstring>
        <paramlist>
          <param name="winid" type="long" default=""/>
        </paramlist>
      </method>
      <method name="FindWindowByName" type="Window" overloaded="no">
        <autodoc>FindWindowByName(String name) -&gt; Window</autodoc>
        <docstring>Find a child of this window by name</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetEventHandler" type="EvtHandler" overloaded="no">
        <autodoc>GetEventHandler() -&gt; EvtHandler</autodoc>
        <docstring>Returns the event handler for this window. By default, the window is
its own event handler.</docstring>
      </method>
      <method name="SetEventHandler" type="" overloaded="no">
        <autodoc>SetEventHandler(EvtHandler handler)</autodoc>
        <docstring>Sets the event handler for this window.  An event handler is an object
that is capable of processing the events sent to a window. By default,
the window is its own event handler, but an application may wish to
substitute another, for example to allow central implementation of
event-handling for a variety of different window classes.

It is usually better to use wx.Window.PushEventHandler since this sets
up a chain of event handlers, where an event not handled by one event
handler is handed to the next one in the chain.</docstring>
        <paramlist>
          <param name="handler" type="EvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="PushEventHandler" type="" overloaded="no">
        <autodoc>PushEventHandler(EvtHandler handler)</autodoc>
        <docstring>Pushes this event handler onto the event handler stack for the window.
An event handler is an object that is capable of processing the events
sent to a window. By default, the window is its own event handler, but
an application may wish to substitute another, for example to allow
central implementation of event-handling for a variety of different
window classes.

wx.Window.PushEventHandler allows an application to set up a chain of
event handlers, where an event not handled by one event handler is
handed to the next one in the chain. Use wx.Window.PopEventHandler to
remove the event handler.</docstring>
        <paramlist>
          <param name="handler" type="EvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="PopEventHandler" type="EvtHandler" overloaded="no">
        <autodoc>PopEventHandler(bool deleteHandler=False) -&gt; EvtHandler</autodoc>
        <docstring>Removes and returns the top-most event handler on the event handler
stack.  If deleteHandler is True then the wx.EvtHandler object will be
destroyed after it is popped.</docstring>
        <paramlist>
          <param name="deleteHandler" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="RemoveEventHandler" type="bool" overloaded="no">
        <autodoc>RemoveEventHandler(EvtHandler handler) -&gt; bool</autodoc>
        <docstring>Find the given handler in the event handler chain and remove (but
not delete) it from the event handler chain, return True if it was
found and False otherwise (this also results in an assert failure so
this function should only be called when the handler is supposed to
be there.)</docstring>
        <paramlist>
          <param name="handler" type="EvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="SetValidator" type="" overloaded="no">
        <autodoc>SetValidator(Validator validator)</autodoc>
        <docstring>Deletes the current validator (if any) and sets the window validator,
having called wx.Validator.Clone to create a new validator of this
type.</docstring>
        <paramlist>
          <param name="validator" type="wxValidator" default=""/>
        </paramlist>
      </method>
      <method name="GetValidator" type="wxValidator" overloaded="no">
        <autodoc>GetValidator() -&gt; Validator</autodoc>
        <docstring>Returns a pointer to the current validator for the window, or None if
there is none.</docstring>
      </method>
      <method name="SetAcceleratorTable" type="" overloaded="no">
        <autodoc>SetAcceleratorTable(AcceleratorTable accel)</autodoc>
        <docstring>Sets the accelerator table for this window.</docstring>
        <paramlist>
          <param name="accel" type="AcceleratorTable" default=""/>
        </paramlist>
      </method>
      <method name="GetAcceleratorTable" type="AcceleratorTable" overloaded="no">
        <autodoc>GetAcceleratorTable() -&gt; AcceleratorTable</autodoc>
        <docstring>Gets the accelerator table for this window.</docstring>
      </method>
      <method name="RegisterHotKey" type="bool" overloaded="no">
        <autodoc>RegisterHotKey(int hotkeyId, int modifiers, int keycode) -&gt; bool</autodoc>
        <docstring>Registers a system wide hotkey. Every time the user presses the hotkey
registered here, this window will receive a hotkey event. It will
receive the event even if the application is in the background and
does not have the input focus because the user is working with some
other application.  To bind an event handler function to this hotkey
use EVT_HOTKEY with an id equal to hotkeyId.  Returns True if the
hotkey was registered successfully.</docstring>
        <paramlist>
          <param name="hotkeyId" type="int" default=""/>
          <param name="modifiers" type="int" default=""/>
          <param name="keycode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="UnregisterHotKey" type="bool" overloaded="no">
        <autodoc>UnregisterHotKey(int hotkeyId) -&gt; bool</autodoc>
        <docstring>Unregisters a system wide hotkey.</docstring>
        <paramlist>
          <param name="hotkeyId" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ConvertDialogPointToPixels" type="Point" overloaded="no">
        <autodoc>ConvertDialogPointToPixels(Point pt) -&gt; Point</autodoc>
        <docstring>Converts a point or size from dialog units to pixels.  Dialog units
are used for maintaining a dialog's proportions even if the font
changes. For the x dimension, the dialog units are multiplied by the
average character width and then divided by 4. For the y dimension,
the dialog units are multiplied by the average character height and
then divided by 8.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="ConvertDialogSizeToPixels" type="Size" overloaded="no">
        <autodoc>ConvertDialogSizeToPixels(Size sz) -&gt; Size</autodoc>
        <docstring>Converts a point or size from dialog units to pixels.  Dialog units
are used for maintaining a dialog's proportions even if the font
changes. For the x dimension, the dialog units are multiplied by the
average character width and then divided by 4. For the y dimension,
the dialog units are multiplied by the average character height and
then divided by 8.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="DLG_PNT" type="Point" overloaded="no">
        <autodoc>DLG_PNT(Point pt) -&gt; Point</autodoc>
        <docstring>Converts a point or size from dialog units to pixels.  Dialog units
are used for maintaining a dialog's proportions even if the font
changes. For the x dimension, the dialog units are multiplied by the
average character width and then divided by 4. For the y dimension,
the dialog units are multiplied by the average character height and
then divided by 8.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DLG_SZE" type="Size" overloaded="no">
        <autodoc>DLG_SZE(Size sz) -&gt; Size</autodoc>
        <docstring>Converts a point or size from dialog units to pixels.  Dialog units
are used for maintaining a dialog's proportions even if the font
changes. For the x dimension, the dialog units are multiplied by the
average character width and then divided by 4. For the y dimension,
the dialog units are multiplied by the average character height and
then divided by 8.</docstring>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="ConvertPixelPointToDialog" type="Point" overloaded="no">
        <autodoc>ConvertPixelPointToDialog(Point pt) -&gt; Point</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="ConvertPixelSizeToDialog" type="Size" overloaded="no">
        <autodoc>ConvertPixelSizeToDialog(Size sz) -&gt; Size</autodoc>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="WarpPointer" type="" overloaded="no">
        <autodoc>WarpPointer(int x, int y)</autodoc>
        <docstring>Moves the pointer to the given position on the window.

NOTE: This function is not supported under Mac because Apple Human
Interface Guidelines forbid moving the mouse cursor programmatically.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CaptureMouse" type="" overloaded="no">
        <autodoc>CaptureMouse()</autodoc>
        <docstring>Directs all mouse input to this window. Call wx.Window.ReleaseMouse to
release the capture.

Note that wxWindows maintains the stack of windows having captured the
mouse and when the mouse is released the capture returns to the window
which had had captured it previously and it is only really released if
there were no previous window. In particular, this means that you must
release the mouse as many times as you capture it.</docstring>
      </method>
      <method name="ReleaseMouse" type="" overloaded="no">
        <autodoc>ReleaseMouse()</autodoc>
        <docstring>Releases mouse input captured with wx.Window.CaptureMouse.</docstring>
      </method>
      <staticmethod name="GetCapture" type="Window" overloaded="no">
        <autodoc>GetCapture() -&gt; Window</autodoc>
        <docstring>Returns the window which currently captures the mouse or None</docstring>
      </staticmethod>
      <method name="HasCapture" type="bool" overloaded="no">
        <autodoc>HasCapture() -&gt; bool</autodoc>
        <docstring>Returns true if this window has the current mouse capture.</docstring>
      </method>
      <method name="Refresh" type="" overloaded="no">
        <autodoc>Refresh(bool eraseBackground=True, Rect rect=None)</autodoc>
        <docstring>Mark the specified rectangle (or the whole window) as "dirty" so it
will be repainted.  Causes an EVT_PAINT event to be generated and sent
to the window.</docstring>
        <paramlist>
          <param name="eraseBackground" type="bool" default="True"/>
          <param name="rect" type="Rect" default="NULL"/>
        </paramlist>
      </method>
      <method name="RefreshRect" type="" overloaded="no">
        <autodoc>RefreshRect(Rect rect)</autodoc>
        <docstring>Redraws the contents of the given rectangle: the area inside it will
be repainted.  This is the same as Refresh but has a nicer syntax.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="Update" type="" overloaded="no">
        <autodoc>Update()</autodoc>
        <docstring>Calling this method immediately repaints the invalidated area of the
window instead of waiting for the EVT_PAINT event to happen, (normally
this would usually only happen when the flow of control returns to the
event loop.)  Notice that this function doesn't refresh the window and
does nothing if the window has been already repainted.  Use Refresh
first if you want to immediately redraw the window (or some portion of
it) unconditionally.</docstring>
      </method>
      <method name="ClearBackground" type="" overloaded="no">
        <autodoc>ClearBackground()</autodoc>
        <docstring>Clears the window by filling it with the current background
colour. Does not cause an erase background event to be generated.</docstring>
      </method>
      <method name="Freeze" type="" overloaded="no">
        <autodoc>Freeze()</autodoc>
        <docstring>Freezes the window or, in other words, prevents any updates from taking place
on screen, the window is not redrawn at all. Thaw must be called to reenable
window redrawing.  Calls to Freeze/Thaw may be nested, with the actual Thaw
being delayed until all the nesting has been undone.

This method is useful for visual appearance optimization (for example,
it is a good idea to use it before inserting large amount of text into
a wxTextCtrl under wxGTK) but is not implemented on all platforms nor
for all controls so it is mostly just a hint to wxWindows and not a
mandatory directive.</docstring>
      </method>
      <method name="Thaw" type="" overloaded="no">
        <autodoc>Thaw()</autodoc>
        <docstring>Reenables window updating after a previous call to Freeze.  Calls to
Freeze/Thaw may be nested, so Thaw must be called the same number of times
that Freeze was before the window will be updated.</docstring>
      </method>
      <method name="PrepareDC" type="" overloaded="no">
        <autodoc>PrepareDC(DC dc)</autodoc>
        <docstring>Call this function to prepare the device context for drawing a
scrolled image. It sets the device origin according to the current
scroll position.</docstring>
        <paramlist>
          <param name="dc" type="wxDC" default=""/>
        </paramlist>
      </method>
      <method name="GetUpdateRegion" type="wxRegion" overloaded="no">
        <autodoc>GetUpdateRegion() -&gt; Region</autodoc>
        <docstring>Returns the region specifying which parts of the window have been
damaged. Should only be called within an EVT_PAINT handler.</docstring>
      </method>
      <method name="GetUpdateClientRect" type="Rect" overloaded="no">
        <autodoc>GetUpdateClientRect() -&gt; Rect</autodoc>
        <docstring>Get the update rectangle region bounding box in client coords.</docstring>
      </method>
      <method name="IsExposed" type="bool" overloaded="no">
        <autodoc>IsExposed(int x, int y, int w=1, int h=1) -&gt; bool</autodoc>
        <docstring>Returns true if the given point or rectangle area has been exposed
since the last repaint. Call this in an paint event handler to
optimize redrawing by only redrawing those areas, which have been
exposed.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="w" type="int" default="1"/>
          <param name="h" type="int" default="1"/>
        </paramlist>
      </method>
      <method name="IsExposedPoint" type="bool" overloaded="no">
        <autodoc>IsExposedPoint(Point pt) -&gt; bool</autodoc>
        <docstring>Returns true if the given point or rectangle area has been exposed
since the last repaint. Call this in an paint event handler to
optimize redrawing by only redrawing those areas, which have been
exposed.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="IsExposedRect" type="bool" overloaded="no">
        <autodoc>IsExposedRect(Rect rect) -&gt; bool</autodoc>
        <docstring>Returns true if the given point or rectangle area has been exposed
since the last repaint. Call this in an paint event handler to
optimize redrawing by only redrawing those areas, which have been
exposed.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="bool" overloaded="no">
        <autodoc>SetBackgroundColour(Colour colour) -&gt; bool</autodoc>
        <docstring>Sets the background colour of the window.  Returns True if the colour
was changed.  The background colour is usually painted by the default
EVT_ERASE_BACKGROUND event handler function under Windows and
automatically under GTK.

Note that setting the background colour does not cause an immediate
refresh, so you may wish to call ClearBackground or Refresh after
calling this function.

Use this function with care under GTK+ as the new appearance of the
window might not look equally well when used with themes, i.e GTK+'s
ability to change its look as the user wishes with run-time loadable
modules.</docstring>
        <paramlist>
          <param name="colour" type="wxColour" default=""/>
        </paramlist>
      </method>
      <method name="SetForegroundColour" type="bool" overloaded="no">
        <autodoc>SetForegroundColour(Colour colour) -&gt; bool</autodoc>
        <docstring>Sets the foreground colour of the window.  Returns True is the colour
was changed.  The interpretation of foreground colour is dependent on
the window class; it may be the text colour or other colour, or it may
not be used at all.</docstring>
        <paramlist>
          <param name="colour" type="wxColour" default=""/>
        </paramlist>
      </method>
      <method name="GetBackgroundColour" type="wxColour" overloaded="no">
        <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
        <docstring>Returns the background colour of the window.</docstring>
      </method>
      <method name="GetForegroundColour" type="wxColour" overloaded="no">
        <autodoc>GetForegroundColour() -&gt; Colour</autodoc>
        <docstring>Returns the foreground colour of the window.  The interpretation of
foreground colour is dependent on the window class; it may be the text
colour or other colour, or it may not be used at all.</docstring>
      </method>
      <method name="SetCursor" type="bool" overloaded="no">
        <autodoc>SetCursor(Cursor cursor) -&gt; bool</autodoc>
        <docstring>Sets the window's cursor. Notice that the window cursor also sets it
for the children of the window implicitly.

The cursor may be wx.NullCursor in which case the window cursor will
be reset back to default.</docstring>
        <paramlist>
          <param name="cursor" type="wxCursor" default=""/>
        </paramlist>
      </method>
      <method name="GetCursor" type="wxCursor" overloaded="no">
        <autodoc>GetCursor() -&gt; Cursor</autodoc>
        <docstring>Return the cursor associated with this window.</docstring>
      </method>
      <method name="SetFont" type="bool" overloaded="no">
        <autodoc>SetFont(Font font) -&gt; bool</autodoc>
        <docstring>Sets the font for this window.</docstring>
        <paramlist>
          <param name="font" type="wxFont" default=""/>
        </paramlist>
      </method>
      <method name="GetFont" type="wxFont" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
        <docstring>Returns the default font used for this window.</docstring>
      </method>
      <method name="SetCaret" type="" overloaded="no">
        <autodoc>SetCaret(Caret caret)</autodoc>
        <docstring>Sets the caret associated with the window.</docstring>
        <paramlist>
          <param name="caret" type="wxCaret" default=""/>
        </paramlist>
      </method>
      <method name="GetCaret" type="wxCaret" overloaded="no">
        <autodoc>GetCaret() -&gt; Caret</autodoc>
        <docstring>Returns the caret associated with the window.</docstring>
      </method>
      <method name="GetCharHeight" type="int" overloaded="no">
        <autodoc>GetCharHeight() -&gt; int</autodoc>
        <docstring>Get the (average) character size for the current font.</docstring>
      </method>
      <method name="GetCharWidth" type="int" overloaded="no">
        <autodoc>GetCharWidth() -&gt; int</autodoc>
        <docstring>Get the (average) character size for the current font.</docstring>
      </method>
      <method name="GetTextExtent" type="" overloaded="no">
        <autodoc>GetTextExtent(String string) -&gt; (width, height)</autodoc>
        <docstring>Get the width and height of the text using the current font.</docstring>
        <paramlist>
          <param name="string" type="String" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFullTextExtent" type="" overloaded="no">
        <autodoc>GetFullTextExtent(String string, Font font=None) -&gt;
   (width, height, descent, externalLeading)</autodoc>
        <docstring>Get the width, height, decent and leading of the text using the
current or specified font.</docstring>
        <paramlist>
          <param name="string" type="String" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="font" type="wxFont" default="NULL"/>
        </paramlist>
      </method>
      <method name="ClientToScreenXY" type="" overloaded="no">
        <autodoc>ClientToScreenXY(int x, int y) -&gt; (x,y)</autodoc>
        <docstring>Converts to screen coordinates from coordinates relative to this window.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ScreenToClientXY" type="" overloaded="no">
        <autodoc>ScreenToClientXY(int x, int y) -&gt; (x,y)</autodoc>
        <docstring>Converts from screen to client window coordinates.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ClientToScreen" type="Point" overloaded="no">
        <autodoc>ClientToScreen(Point pt) -&gt; Point</autodoc>
        <docstring>Converts to screen coordinates from coordinates relative to this window.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="ScreenToClient" type="Point" overloaded="no">
        <autodoc>ScreenToClient(Point pt) -&gt; Point</autodoc>
        <docstring>Converts from screen to client window coordinates.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="HitTestXY" type="wxHitTest" overloaded="no">
        <autodoc>HitTestXY(int x, int y) -&gt; int</autodoc>
        <docstring>Test where the given (in client coords) point lies</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="wxHitTest" overloaded="no">
        <autodoc>HitTest(Point pt) -&gt; int</autodoc>
        <docstring>Test where the given (in client coords) point lies</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetBorder" type="wxBorder" overloaded="yes">
        <docstring>Get the window border style from the given flags: this is different
from simply doing flags &amp; wxBORDER_MASK because it uses
GetDefaultBorder() to translate wxBORDER_DEFAULT to something
reasonable.
</docstring>
        <paramlist>
          <param name="flags" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetBorder" type="wxBorder" overloaded="yes">
        <autodoc>GetBorder(long flags) -&gt; int
GetBorder() -&gt; int</autodoc>
        <docstring>Get border for the flags of this window</docstring>
      </method>
      <method name="UpdateWindowUI" type="" overloaded="no">
        <autodoc>UpdateWindowUI(long flags=UPDATE_UI_NONE)</autodoc>
        <docstring>This function sends EVT_UPDATE_UI events to the window. The particular
implementation depends on the window; for example a wx.ToolBar will
send an update UI event for each toolbar button, and a wx.Frame will
send an update UI event for each menubar menu item. You can call this
function from your application to ensure that your UI is up-to-date at
a particular point in time (as far as your EVT_UPDATE_UI handlers are
concerned). This may be necessary if you have called
wx.UpdateUIEvent.SetMode or wx.UpdateUIEvent.SetUpdateInterval to
limit the overhead that wxWindows incurs by sending update UI events
in idle time.

The flags should be a bitlist of one or more of the following values:

    wx.UPDATE_UI_NONE          No particular value
    wx.UPDATE_UI_RECURSE       Call the function for descendants
    wx.UPDATE_UI_FROMIDLE      Invoked from OnIdle

If you are calling this function from an OnIdle function, make sure
you pass the wx.UPDATE_UI_FROMIDLE flag, since this tells the window to
only update the UI elements that need to be updated in idle time. Some
windows update their elements only when necessary, for example when a
menu is about to be shown. The following is an example of how to call
UpdateWindowUI from an idle function.

    def OnIdle(self, evt):
        if wx.UpdateUIEvent.CanUpdate(self):
            self.UpdateWindowUI(wx.UPDATE_UI_FROMIDLE);
</docstring>
        <paramlist>
          <param name="flags" type="long" default="wxUPDATE_UI_NONE"/>
        </paramlist>
      </method>
      <method name="PopupMenuXY" type="bool" overloaded="no">
        <autodoc>PopupMenuXY(Menu menu, int x, int y) -&gt; bool</autodoc>
        <docstring>Pops up the given menu at the specified coordinates, relative to this
window, and returns control when the user has dismissed the menu. If a
menu item is selected, the corresponding menu event is generated and
will be processed as usual.</docstring>
        <paramlist>
          <param name="menu" type="wxMenu" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="PopupMenu" type="bool" overloaded="no">
        <autodoc>PopupMenu(Menu menu, Point pos) -&gt; bool</autodoc>
        <docstring>Pops up the given menu at the specified coordinates, relative to this
window, and returns control when the user has dismissed the menu. If a
menu item is selected, the corresponding menu event is generated and
will be processed as usual.</docstring>
        <paramlist>
          <param name="menu" type="wxMenu" default=""/>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetHandle" type="long" overloaded="no">
        <autodoc>GetHandle() -&gt; long</autodoc>
        <docstring>Returns the platform-specific handle (as a long integer) of the
physical window.  Currently on wxMac it returns the handle of the
toplevel parent of the window.</docstring>
      </method>
      <method name="HasScrollbar" type="bool" overloaded="no">
        <autodoc>HasScrollbar(int orient) -&gt; bool</autodoc>
        <docstring>Does the window have the scrollbar for this orientation?</docstring>
        <paramlist>
          <param name="orient" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetScrollbar" type="" overloaded="no">
        <autodoc>SetScrollbar(int orientation, int pos, int thumbvisible, int range, 
    bool refresh=True)</autodoc>
        <docstring>Sets the scrollbar properties of a built-in scrollbar.

    orientation: Determines the scrollbar whose page size is to be
                 set. May be wx.HORIZONTAL or wx.VERTICAL.

    position:    The position of the scrollbar in scroll units.

    thumbSize:   The size of the thumb, or visible portion of the
                 scrollbar, in scroll units.

    range:       The maximum position of the scrollbar.

    refresh:     True to redraw the scrollbar, false otherwise.</docstring>
        <paramlist>
          <param name="orientation" type="int" default=""/>
          <param name="pos" type="int" default=""/>
          <param name="thumbvisible" type="int" default=""/>
          <param name="range" type="int" default=""/>
          <param name="refresh" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetScrollPos" type="" overloaded="no">
        <autodoc>SetScrollPos(int orientation, int pos, bool refresh=True)</autodoc>
        <docstring>Sets the position of one of the built-in scrollbars.</docstring>
        <paramlist>
          <param name="orientation" type="int" default=""/>
          <param name="pos" type="int" default=""/>
          <param name="refresh" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetScrollPos" type="int" overloaded="no">
        <autodoc>GetScrollPos(int orientation) -&gt; int</autodoc>
        <docstring>Returns the built-in scrollbar position.</docstring>
        <paramlist>
          <param name="orientation" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetScrollThumb" type="int" overloaded="no">
        <autodoc>GetScrollThumb(int orientation) -&gt; int</autodoc>
        <docstring>Returns the built-in scrollbar thumb size.</docstring>
        <paramlist>
          <param name="orientation" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetScrollRange" type="int" overloaded="no">
        <autodoc>GetScrollRange(int orientation) -&gt; int</autodoc>
        <docstring>Returns the built-in scrollbar range.</docstring>
        <paramlist>
          <param name="orientation" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ScrollWindow" type="" overloaded="no">
        <autodoc>ScrollWindow(int dx, int dy, Rect rect=None)</autodoc>
        <docstring>Physically scrolls the pixels in the window and move child windows
accordingly.  Use this function to optimise your scrolling
implementations, to minimise the area that must be redrawn. Note that
it is rarely required to call this function from a user program.

    dx:   Amount to scroll horizontally.

    dy:   Amount to scroll vertically.

    rect: Rectangle to invalidate. If this is None, the whole window
          is invalidated. If you pass a rectangle corresponding to the
          area of the window exposed by the scroll, your painting
          handler can optimize painting by checking for the
          invalidated region.</docstring>
        <paramlist>
          <param name="dx" type="int" default=""/>
          <param name="dy" type="int" default=""/>
          <param name="rect" type="Rect" default="NULL"/>
        </paramlist>
      </method>
      <method name="ScrollLines" type="bool" overloaded="no">
        <autodoc>ScrollLines(int lines) -&gt; bool</autodoc>
        <docstring>If the platform and window class supports it, scrolls the window by
the given number of lines down, if lines is positive, or up if lines
is negative.  Returns True if the window was scrolled, False if it was
already on top/bottom and nothing was done.</docstring>
        <paramlist>
          <param name="lines" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ScrollPages" type="bool" overloaded="no">
        <autodoc>ScrollPages(int pages) -&gt; bool</autodoc>
        <docstring>If the platform and window class supports it,  scrolls the window by
the given number of pages down, if pages is positive, or up if pages
is negative.  Returns True if the window was scrolled, False if it was
already on top/bottom and nothing was done.</docstring>
        <paramlist>
          <param name="pages" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LineUp" type="bool" overloaded="no">
        <autodoc>LineUp() -&gt; bool</autodoc>
        <docstring>This is just a wrapper for ScrollLines(-1).</docstring>
      </method>
      <method name="LineDown" type="bool" overloaded="no">
        <autodoc>LineDown() -&gt; bool</autodoc>
        <docstring>This is just a wrapper for ScrollLines(1).</docstring>
      </method>
      <method name="PageUp" type="bool" overloaded="no">
        <autodoc>PageUp() -&gt; bool</autodoc>
        <docstring>This is just a wrapper for ScrollPages(-1).</docstring>
      </method>
      <method name="PageDown" type="bool" overloaded="no">
        <autodoc>PageDown() -&gt; bool</autodoc>
        <docstring>This is just a wrapper for ScrollPages(1).</docstring>
      </method>
      <method name="SetHelpText" type="" overloaded="no">
        <autodoc>SetHelpText(String text)</autodoc>
        <docstring>Sets the help text to be used as context-sensitive help for this
window.  Note that the text is actually stored by the current
wxHelpProvider implementation, and not in the window object itself.</docstring>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetHelpTextForId" type="" overloaded="no">
        <autodoc>SetHelpTextForId(String text)</autodoc>
        <docstring>Associate this help text with all windows with the same id as this
one.</docstring>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetHelpText" type="String" overloaded="no">
        <autodoc>GetHelpText() -&gt; String</autodoc>
        <docstring>Gets the help text to be used as context-sensitive help for this
window.  Note that the text is actually stored by the current
wxHelpProvider implementation, and not in the window object itself.</docstring>
      </method>
      <method name="SetToolTipString" type="" overloaded="no">
        <autodoc>SetToolTipString(String tip)</autodoc>
        <docstring>Attach a tooltip to the window.</docstring>
        <paramlist>
          <param name="tip" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetToolTip" type="" overloaded="no">
        <autodoc>SetToolTip(ToolTip tip)</autodoc>
        <docstring>Attach a tooltip to the window.</docstring>
        <paramlist>
          <param name="tip" type="wxToolTip" default=""/>
        </paramlist>
      </method>
      <method name="GetToolTip" type="wxToolTip" overloaded="no">
        <autodoc>GetToolTip() -&gt; ToolTip</autodoc>
        <docstring>get the associated tooltip or None if none</docstring>
      </method>
      <method name="SetDropTarget" type="" overloaded="no">
        <autodoc>SetDropTarget(DropTarget dropTarget)</autodoc>
        <docstring>Associates a drop target with this window.  If the window already has
a drop target, it is deleted.</docstring>
        <paramlist>
          <param name="dropTarget" type="wxPyDropTarget" default=""/>
        </paramlist>
      </method>
      <method name="GetDropTarget" type="wxPyDropTarget" overloaded="no">
        <autodoc>GetDropTarget() -&gt; DropTarget</autodoc>
        <docstring>Returns the associated drop target, which may be None.</docstring>
      </method>
      <method name="SetConstraints" type="" overloaded="no">
        <autodoc>SetConstraints(LayoutConstraints constraints)</autodoc>
        <docstring>Sets the window to have the given layout constraints. If an existing
layout constraints object is already owned by the window, it will be
deleted.  Pass None to disassociate and delete the window's current
constraints.

You must call SetAutoLayout to tell a window to use the constraints
automatically in its default EVT_SIZE handler; otherwise, you must
handle EVT_SIZE yourself and call Layout() explicitly. When setting
both a wx.LayoutConstraints and a wx.Sizer, only the sizer will have
effect.</docstring>
        <paramlist>
          <param name="constraints" type="wxLayoutConstraints" default=""/>
        </paramlist>
      </method>
      <method name="GetConstraints" type="wxLayoutConstraints" overloaded="no">
        <autodoc>GetConstraints() -&gt; LayoutConstraints</autodoc>
        <docstring>Returns a pointer to the window's layout constraints, or None if there
are none.</docstring>
      </method>
      <method name="SetAutoLayout" type="" overloaded="no">
        <autodoc>SetAutoLayout(bool autoLayout)</autodoc>
        <docstring>Determines whether the Layout function will be called automatically
when the window is resized.  It is called implicitly by SetSizer but
if you use SetConstraints you should call it manually or otherwise the
window layout won't be correctly updated when its size changes.</docstring>
        <paramlist>
          <param name="autoLayout" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetAutoLayout" type="bool" overloaded="no">
        <autodoc>GetAutoLayout() -&gt; bool</autodoc>
        <docstring>Returns the current autoLayout setting</docstring>
      </method>
      <method name="Layout" type="bool" overloaded="no">
        <autodoc>Layout() -&gt; bool</autodoc>
        <docstring>Invokes the constraint-based layout algorithm or the sizer-based
algorithm for this window.  See SetAutoLayout: when auto layout is on,
this function gets called automatically by the default EVT_SIZE
handler when the window is resized.</docstring>
      </method>
      <method name="SetSizer" type="" overloaded="no">
        <autodoc>SetSizer(Sizer sizer, bool deleteOld=True)</autodoc>
        <docstring>Sets the window to have the given layout sizer. The window will then
own the object, and will take care of its deletion. If an existing
layout sizer object is already owned by the window, it will be deleted
if the deleteOld parameter is true. Note that this function will also
call SetAutoLayout implicitly with a True parameter if the sizer is
non-NoneL and False otherwise.</docstring>
        <paramlist>
          <param name="sizer" type="wxSizer" default=""/>
          <param name="deleteOld" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetSizerAndFit" type="" overloaded="no">
        <autodoc>SetSizerAndFit(Sizer sizer, bool deleteOld=True)</autodoc>
        <docstring>The same as SetSizer, except it also sets the size hints for the
window based on the sizer's minimum size.</docstring>
        <paramlist>
          <param name="sizer" type="wxSizer" default=""/>
          <param name="deleteOld" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetSizer" type="wxSizer" overloaded="no">
        <autodoc>GetSizer() -&gt; Sizer</autodoc>
        <docstring>Return the sizer associated with the window by a previous call to
SetSizer or None if there isn't one.</docstring>
      </method>
      <method name="SetContainingSizer" type="" overloaded="no">
        <autodoc>SetContainingSizer(Sizer sizer)</autodoc>
        <docstring>This normally does not need to be called by application code. It is
called internally when a window is added to a sizer, and is used so
the window can remove itself from the sizer when it is destroyed.</docstring>
        <paramlist>
          <param name="sizer" type="wxSizer" default=""/>
        </paramlist>
      </method>
      <method name="GetContainingSizer" type="wxSizer" overloaded="no">
        <autodoc>GetContainingSizer() -&gt; Sizer</autodoc>
        <docstring>Return the sizer that this window is a member of, if any, otherwise None.</docstring>
      </method>
    </class>
    <pythoncode>
def DLG_PNT(win, point_or_x, y=None):
    """
    Convenience function for converting a Point or (x,y) in
    dialog units to pixel units.
    """
    if y is None:
        return win.ConvertDialogPointToPixels(point_or_x)
    else:
        return win.ConvertDialogPointToPixels(wx.Point(point_or_x, y))

def DLG_SZE(win, size_width, height=None):
    """
    Convenience function for converting a Size or (w,h) in
    dialog units to pixel units.
    """
    if height is None:
        return win.ConvertDialogSizeToPixels(size_width)
    else:
        return win.ConvertDialogSizeToPixels(wx.Size(size_width, height))
</pythoncode>
    <method name="FindWindowById" oldname="wxFindWindowById" type="Window" overloaded="no">
      <autodoc>FindWindowById(long id, Window parent=None) -&gt; Window</autodoc>
      <docstring>Find the first window in the application with the given id. If parent
is None, the search will start from all top-level frames and dialog
boxes; if non-None, the search will be limited to the given window
hierarchy. The search is recursive in both cases.</docstring>
      <paramlist>
        <param name="id" type="long" default=""/>
        <param name="parent" type="Window" default="NULL"/>
      </paramlist>
    </method>
    <method name="FindWindowByName" oldname="wxFindWindowByName" type="Window" overloaded="no">
      <autodoc>FindWindowByName(String name, Window parent=None) -&gt; Window</autodoc>
      <docstring>Find a window by its name (as given in a window constructor or Create
function call). If parent is None, the search will start from all
top-level frames and dialog boxes; if non-None, the search will be
limited to the given window hierarchy. The search is recursive in both
cases.

If no window with such name is found, wx.FindWindowByLabel is called.</docstring>
      <paramlist>
        <param name="name" type="String" default=""/>
        <param name="parent" type="Window" default="NULL"/>
      </paramlist>
    </method>
    <method name="FindWindowByLabel" oldname="wxFindWindowByLabel" type="Window" overloaded="no">
      <autodoc>FindWindowByLabel(String label, Window parent=None) -&gt; Window</autodoc>
      <docstring>Find a window by its label. Depending on the type of window, the label
may be a window title or panel item label. If parent is None, the
search will start from all top-level frames and dialog boxes; if
non-None, the search will be limited to the given window
hierarchy. The search is recursive in both cases.</docstring>
      <paramlist>
        <param name="label" type="String" default=""/>
        <param name="parent" type="Window" default="NULL"/>
      </paramlist>
    </method>
    <method name="Window_FromHWND" oldname="wxWindow_FromHWND" type="Window" overloaded="no">
      <autodoc>Window_FromHWND(Window parent, unsigned long _hWnd) -&gt; Window</autodoc>
      <paramlist>
        <param name="parent" type="Window" default=""/>
        <param name="_hWnd" type="unsigned long" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Validator" oldname="wxValidator" module="core">
      <baseclass name="EvtHandler"/>
      <constructor name="Validator" overloaded="no">
        <autodoc>__init__() -&gt; Validator</autodoc>
      </constructor>
      <method name="Clone" type="Validator" overloaded="no">
        <autodoc>Clone() -&gt; Validator</autodoc>
      </method>
      <method name="Validate" type="bool" overloaded="no">
        <autodoc>Validate(Window parent) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="TransferToWindow" type="bool" overloaded="no">
        <autodoc>TransferToWindow() -&gt; bool</autodoc>
      </method>
      <method name="TransferFromWindow" type="bool" overloaded="no">
        <autodoc>TransferFromWindow() -&gt; bool</autodoc>
      </method>
      <method name="GetWindow" type="Window" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
      <method name="SetWindow" type="" overloaded="no">
        <autodoc>SetWindow(Window window)</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <staticmethod name="IsSilent" type="bool" overloaded="no">
        <autodoc>IsSilent() -&gt; bool</autodoc>
      </staticmethod>
      <staticmethod name="SetBellOnError" type="" overloaded="no">
        <autodoc>SetBellOnError(int doIt=True)</autodoc>
        <paramlist>
          <param name="doIt" type="int" default="True"/>
        </paramlist>
      </staticmethod>
    </class>
    <class name="PyValidator" oldname="wxPyValidator" module="core">
      <baseclass name="Validator"/>
      <constructor name="PyValidator" overloaded="no">
        <autodoc>__init__() -&gt; PyValidator</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class, int incref=True)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
          <param name="incref" type="int" default="True"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Menu" oldname="wxMenu" module="core">
      <baseclass name="EvtHandler"/>
      <constructor name="Menu" overloaded="no">
        <autodoc>__init__(String title=EmptyString, long style=0) -&gt; Menu</autodoc>
        <paramlist>
          <param name="title" type="String" default="wxPyEmptyString"/>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </constructor>
      <method name="Append" type="wxMenuItem" overloaded="no">
        <autodoc>Append(int id, String text, String help=EmptyString, int kind=ITEM_NORMAL) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
          <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
        </paramlist>
      </method>
      <method name="AppendSeparator" type="wxMenuItem" overloaded="no">
        <autodoc>AppendSeparator() -&gt; MenuItem</autodoc>
      </method>
      <method name="AppendCheckItem" type="wxMenuItem" overloaded="no">
        <autodoc>AppendCheckItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="AppendRadioItem" type="wxMenuItem" overloaded="no">
        <autodoc>AppendRadioItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="AppendMenu" type="wxMenuItem" overloaded="no">
        <autodoc>AppendMenu(int id, String text, Menu submenu, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="submenu" type="Menu" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="AppendItem" type="wxMenuItem" overloaded="no">
        <autodoc>AppendItem(MenuItem item) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="item" type="wxMenuItem" default=""/>
        </paramlist>
      </method>
      <method name="Break" type="" overloaded="no">
        <autodoc>Break()</autodoc>
      </method>
      <method name="InsertItem" type="wxMenuItem" overloaded="no">
        <autodoc>InsertItem(size_t pos, MenuItem item) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="item" type="wxMenuItem" default=""/>
        </paramlist>
      </method>
      <method name="Insert" type="wxMenuItem" overloaded="no">
        <autodoc>Insert(size_t pos, int id, String text, String help=EmptyString, 
    int kind=ITEM_NORMAL) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
          <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
        </paramlist>
      </method>
      <method name="InsertSeparator" type="wxMenuItem" overloaded="no">
        <autodoc>InsertSeparator(size_t pos) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="InsertCheckItem" type="wxMenuItem" overloaded="no">
        <autodoc>InsertCheckItem(size_t pos, int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="InsertRadioItem" type="wxMenuItem" overloaded="no">
        <autodoc>InsertRadioItem(size_t pos, int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="InsertMenu" type="wxMenuItem" overloaded="no">
        <autodoc>InsertMenu(size_t pos, int id, String text, Menu submenu, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="submenu" type="Menu" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="PrependItem" type="wxMenuItem" overloaded="no">
        <autodoc>PrependItem(MenuItem item) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="item" type="wxMenuItem" default=""/>
        </paramlist>
      </method>
      <method name="Prepend" type="wxMenuItem" overloaded="no">
        <autodoc>Prepend(int id, String text, String help=EmptyString, int kind=ITEM_NORMAL) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
          <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
        </paramlist>
      </method>
      <method name="PrependSeparator" type="wxMenuItem" overloaded="no">
        <autodoc>PrependSeparator() -&gt; MenuItem</autodoc>
      </method>
      <method name="PrependCheckItem" type="wxMenuItem" overloaded="no">
        <autodoc>PrependCheckItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="PrependRadioItem" type="wxMenuItem" overloaded="no">
        <autodoc>PrependRadioItem(int id, String text, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="PrependMenu" type="wxMenuItem" overloaded="no">
        <autodoc>PrependMenu(int id, String text, Menu submenu, String help=EmptyString) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="submenu" type="Menu" default=""/>
          <param name="help" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="Remove" type="wxMenuItem" overloaded="no">
        <autodoc>Remove(int id) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="RemoveItem" type="wxMenuItem" overloaded="no">
        <autodoc>RemoveItem(MenuItem item) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="item" type="wxMenuItem" default=""/>
        </paramlist>
      </method>
      <method name="Delete" type="bool" overloaded="no">
        <autodoc>Delete(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeleteItem" type="bool" overloaded="no">
        <autodoc>DeleteItem(MenuItem item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="wxMenuItem" default=""/>
        </paramlist>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
        <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
      </method>
      <method name="DestroyId" type="bool" overloaded="no">
        <autodoc>DestroyId(int id) -&gt; bool</autodoc>
        <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DestroyItem" type="bool" overloaded="no">
        <autodoc>DestroyItem(MenuItem item) -&gt; bool</autodoc>
        <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
        <paramlist>
          <param name="item" type="wxMenuItem" default=""/>
        </paramlist>
      </method>
      <method name="GetMenuItemCount" type="size_t" overloaded="no">
        <autodoc>GetMenuItemCount() -&gt; size_t</autodoc>
      </method>
      <method name="GetMenuItems" type="PyObject" overloaded="no">
        <autodoc>GetMenuItems() -&gt; PyObject</autodoc>
      </method>
      <method name="FindItem" type="int" overloaded="no">
        <autodoc>FindItem(String item) -&gt; int</autodoc>
        <paramlist>
          <param name="item" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindItemById" type="wxMenuItem" overloaded="no">
        <autodoc>FindItemById(int id) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="FindItemByPosition" type="wxMenuItem" overloaded="no">
        <autodoc>FindItemByPosition(size_t position) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="position" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="Enable" type="" overloaded="no">
        <autodoc>Enable(int id, bool enable)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="enable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsEnabled" type="bool" overloaded="no">
        <autodoc>IsEnabled(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Check" type="" overloaded="no">
        <autodoc>Check(int id, bool check)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="check" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsChecked" type="bool" overloaded="no">
        <autodoc>IsChecked(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLabel" type="" overloaded="no">
        <autodoc>SetLabel(int id, String label)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel(int id) -&gt; String</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetHelpString" type="" overloaded="no">
        <autodoc>SetHelpString(int id, String helpString)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="helpString" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetHelpString" type="String" overloaded="no">
        <autodoc>GetHelpString(int id) -&gt; String</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetTitle" type="" overloaded="no">
        <autodoc>SetTitle(String title)</autodoc>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTitle" type="String" overloaded="no">
        <autodoc>GetTitle() -&gt; String</autodoc>
      </method>
      <method name="SetEventHandler" type="" overloaded="no">
        <autodoc>SetEventHandler(EvtHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="EvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="GetEventHandler" type="EvtHandler" overloaded="no">
        <autodoc>GetEventHandler() -&gt; EvtHandler</autodoc>
      </method>
      <method name="SetInvokingWindow" type="" overloaded="no">
        <autodoc>SetInvokingWindow(Window win)</autodoc>
        <paramlist>
          <param name="win" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetInvokingWindow" type="Window" overloaded="no">
        <autodoc>GetInvokingWindow() -&gt; Window</autodoc>
      </method>
      <method name="GetStyle" type="long" overloaded="no">
        <autodoc>GetStyle() -&gt; long</autodoc>
      </method>
      <method name="UpdateUI" type="" overloaded="no">
        <autodoc>UpdateUI(EvtHandler source=None)</autodoc>
        <paramlist>
          <param name="source" type="EvtHandler" default="NULL"/>
        </paramlist>
      </method>
      <method name="GetMenuBar" type="wxMenuBar" overloaded="no">
        <autodoc>GetMenuBar() -&gt; MenuBar</autodoc>
      </method>
      <method name="Attach" type="" overloaded="no">
        <autodoc>Attach(wxMenuBarBase menubar)</autodoc>
        <paramlist>
          <param name="menubar" type="wxMenuBarBase" default=""/>
        </paramlist>
      </method>
      <method name="Detach" type="" overloaded="no">
        <autodoc>Detach()</autodoc>
      </method>
      <method name="IsAttached" type="bool" overloaded="no">
        <autodoc>IsAttached() -&gt; bool</autodoc>
      </method>
      <method name="SetParent" type="" overloaded="no">
        <autodoc>SetParent(Menu parent)</autodoc>
        <paramlist>
          <param name="parent" type="Menu" default=""/>
        </paramlist>
      </method>
      <method name="GetParent" type="Menu" overloaded="no">
        <autodoc>GetParent() -&gt; Menu</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MenuBar" oldname="wxMenuBar" module="core">
      <baseclass name="Window"/>
      <constructor name="MenuBar" overloaded="no">
        <autodoc>__init__(long style=0) -&gt; MenuBar</autodoc>
        <paramlist>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </constructor>
      <method name="Append" type="bool" overloaded="no">
        <autodoc>Append(Menu menu, String title) -&gt; bool</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default=""/>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Insert" type="bool" overloaded="no">
        <autodoc>Insert(size_t pos, Menu menu, String title) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="menu" type="Menu" default=""/>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetMenuCount" type="size_t" overloaded="no">
        <autodoc>GetMenuCount() -&gt; size_t</autodoc>
      </method>
      <method name="GetMenu" type="Menu" overloaded="no">
        <autodoc>GetMenu(size_t pos) -&gt; Menu</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="Replace" type="Menu" overloaded="no">
        <autodoc>Replace(size_t pos, Menu menu, String title) -&gt; Menu</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="menu" type="Menu" default=""/>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Remove" type="Menu" overloaded="no">
        <autodoc>Remove(size_t pos) -&gt; Menu</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="EnableTop" type="" overloaded="no">
        <autodoc>EnableTop(size_t pos, bool enable)</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="enable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsEnabledTop" type="bool" overloaded="no">
        <autodoc>IsEnabledTop(size_t pos) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetLabelTop" type="" overloaded="no">
        <autodoc>SetLabelTop(size_t pos, String label)</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetLabelTop" type="String" overloaded="no">
        <autodoc>GetLabelTop(size_t pos) -&gt; String</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="FindMenuItem" type="int" overloaded="no">
        <autodoc>FindMenuItem(String menu, String item) -&gt; int</autodoc>
        <paramlist>
          <param name="menu" type="String" default=""/>
          <param name="item" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindItemById" type="wxMenuItem" overloaded="no">
        <autodoc>FindItemById(int id) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="FindMenu" type="int" overloaded="no">
        <autodoc>FindMenu(String title) -&gt; int</autodoc>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Enable" type="" overloaded="no">
        <autodoc>Enable(int id, bool enable)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="enable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Check" type="" overloaded="no">
        <autodoc>Check(int id, bool check)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="check" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsChecked" type="bool" overloaded="no">
        <autodoc>IsChecked(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsEnabled" type="bool" overloaded="no">
        <autodoc>IsEnabled(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLabel" type="" overloaded="no">
        <autodoc>SetLabel(int id, String label)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel(int id) -&gt; String</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetHelpString" type="" overloaded="no">
        <autodoc>SetHelpString(int id, String helpString)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="helpString" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetHelpString" type="String" overloaded="no">
        <autodoc>GetHelpString(int id) -&gt; String</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFrame" type="wxFrame" overloaded="no">
        <autodoc>GetFrame() -&gt; wxFrame</autodoc>
      </method>
      <method name="IsAttached" type="bool" overloaded="no">
        <autodoc>IsAttached() -&gt; bool</autodoc>
      </method>
      <method name="Attach" type="" overloaded="no">
        <autodoc>Attach(wxFrame frame)</autodoc>
        <paramlist>
          <param name="frame" type="wxFrame" default=""/>
        </paramlist>
      </method>
      <method name="Detach" type="" overloaded="no">
        <autodoc>Detach()</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MenuItem" oldname="wxMenuItem" module="core">
      <baseclass name="Object"/>
      <constructor name="MenuItem" overloaded="no">
        <autodoc>__init__(Menu parentMenu=None, int id=ID_SEPARATOR, String text=EmptyString, 
    String help=EmptyString, int kind=ITEM_NORMAL, 
    Menu subMenu=None) -&gt; MenuItem</autodoc>
        <paramlist>
          <param name="parentMenu" type="Menu" default="NULL"/>
          <param name="id" type="int" default="wxID_SEPARATOR"/>
          <param name="text" type="String" default="wxPyEmptyString"/>
          <param name="help" type="String" default="wxPyEmptyString"/>
          <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
          <param name="subMenu" type="Menu" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetMenu" type="Menu" overloaded="no">
        <autodoc>GetMenu() -&gt; Menu</autodoc>
      </method>
      <method name="SetMenu" type="" overloaded="no">
        <autodoc>SetMenu(Menu menu)</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default=""/>
        </paramlist>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(int id)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetId" type="int" overloaded="no">
        <autodoc>GetId() -&gt; int</autodoc>
      </method>
      <method name="IsSeparator" type="bool" overloaded="no">
        <autodoc>IsSeparator() -&gt; bool</autodoc>
      </method>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String str)</autodoc>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel() -&gt; String</autodoc>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <staticmethod name="GetLabelFromText" type="String" overloaded="no">
        <autodoc>GetLabelFromText(String text) -&gt; String</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <method name="GetKind" type="wxItemKind" overloaded="no">
        <autodoc>GetKind() -&gt; int</autodoc>
      </method>
      <method name="SetCheckable" type="" overloaded="no">
        <autodoc>SetCheckable(bool checkable)</autodoc>
        <paramlist>
          <param name="checkable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsCheckable" type="bool" overloaded="no">
        <autodoc>IsCheckable() -&gt; bool</autodoc>
      </method>
      <method name="IsSubMenu" type="bool" overloaded="no">
        <autodoc>IsSubMenu() -&gt; bool</autodoc>
      </method>
      <method name="SetSubMenu" type="" overloaded="no">
        <autodoc>SetSubMenu(Menu menu)</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default=""/>
        </paramlist>
      </method>
      <method name="GetSubMenu" type="Menu" overloaded="no">
        <autodoc>GetSubMenu() -&gt; Menu</autodoc>
      </method>
      <method name="Enable" type="" overloaded="no">
        <autodoc>Enable(bool enable=True)</autodoc>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="IsEnabled" type="bool" overloaded="no">
        <autodoc>IsEnabled() -&gt; bool</autodoc>
      </method>
      <method name="Check" type="" overloaded="no">
        <autodoc>Check(bool check=True)</autodoc>
        <paramlist>
          <param name="check" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="IsChecked" type="bool" overloaded="no">
        <autodoc>IsChecked() -&gt; bool</autodoc>
      </method>
      <method name="Toggle" type="" overloaded="no">
        <autodoc>Toggle()</autodoc>
      </method>
      <method name="SetHelp" type="" overloaded="no">
        <autodoc>SetHelp(String str)</autodoc>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetHelp" type="String" overloaded="no">
        <autodoc>GetHelp() -&gt; String</autodoc>
      </method>
      <method name="GetAccel" type="AcceleratorEntry" overloaded="no">
        <autodoc>GetAccel() -&gt; AcceleratorEntry</autodoc>
      </method>
      <method name="SetAccel" type="" overloaded="no">
        <autodoc>SetAccel(AcceleratorEntry accel)</autodoc>
        <paramlist>
          <param name="accel" type="AcceleratorEntry" default=""/>
        </paramlist>
      </method>
      <staticmethod name="GetDefaultMarginWidth" type="int" overloaded="no">
        <autodoc>GetDefaultMarginWidth() -&gt; int</autodoc>
      </staticmethod>
      <method name="SetBitmap" type="" overloaded="no">
        <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
        <paramlist>
          <param name="bitmap" type="wxBitmap" default=""/>
        </paramlist>
      </method>
      <method name="GetBitmap" type="wxBitmap" overloaded="no">
        <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Control" oldname="wxControl" module="core">
      <docstring>This is the base class for a control or 'widget'.

A control is generally a small window which processes user input and/or
displays one or more item of data.</docstring>
      <baseclass name="Window"/>
      <constructor name="Control" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ControlNameStr) -&gt; Control</autodoc>
        <docstring>Create a Control.  Normally you should only call this from a
subclass' __init__ as a plain old wx.Control is not very useful.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyControlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreControl" overloaded="no">
        <autodoc>PreControl() -&gt; Control</autodoc>
        <docstring>Precreate a Control control for 2-phase creation</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ControlNameStr) -&gt; bool</autodoc>
        <docstring>Do the 2nd phase and create the GUI control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyControlNameStr"/>
        </paramlist>
      </method>
      <method name="Command" type="" overloaded="no">
        <autodoc>Command(CommandEvent event)</autodoc>
        <docstring>Simulates the effect of the user issuing a command to the
item. See wxCommandEvent.</docstring>
        <paramlist>
          <param name="event" type="CommandEvent" default=""/>
        </paramlist>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel() -&gt; String</autodoc>
        <docstring>Return a control's text.</docstring>
      </method>
      <method name="SetLabel" type="" overloaded="no">
        <autodoc>SetLabel(String label)</autodoc>
        <docstring>Sets the item's text.</docstring>
        <paramlist>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ItemContainer" oldname="wxItemContainer" module="core">
      <docstring>wx.ItemContainer defines an interface which is implemented by all
controls which have string subitems, each of which may be
selected, such as wx.ListBox, wx.CheckListBox, wx.Choice and
wx.ComboBox (which implements an extended interface deriving from
this one)

It defines the methods for accessing the control's items and
although each of the derived classes implements them differently,
they still all conform to the same interface.

The items in a wx.ItemContainer have (non empty) string labels
and, optionally, client data associated with them.
</docstring>
      <method name="Append" type="int" overloaded="no">
        <autodoc>Append(String item, PyObject clientData=None) -&gt; int</autodoc>
        <docstring>Adds the item to the control, associating the given data with the
item if not None.  The return value is the index of the newly
added item which may be different from the last one if the
control is sorted (e.g. has wx.LB_SORT or wx.CB_SORT style).</docstring>
        <paramlist>
          <param name="item" type="String" default=""/>
          <param name="clientData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="AppendItems" type="" overloaded="no">
        <autodoc>AppendItems(wxArrayString strings)</autodoc>
        <docstring>Apend several items at once to the control.  Notice that calling
this method may be much faster than appending the items one by
one if you need to add a lot of items.</docstring>
        <paramlist>
          <param name="strings" type="wxArrayString" default=""/>
        </paramlist>
      </method>
      <method name="Insert" type="int" overloaded="no">
        <autodoc>Insert(String item, int pos, PyObject clientData=None) -&gt; int</autodoc>
        <docstring>Insert an item into the control before the item at the pos index,
optionally associating some data object with the item.</docstring>
        <paramlist>
          <param name="item" type="String" default=""/>
          <param name="pos" type="int" default=""/>
          <param name="clientData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
        <docstring>Removes all items from the control.</docstring>
      </method>
      <method name="Delete" type="" overloaded="no">
        <autodoc>Delete(int n)</autodoc>
        <docstring>Deletes the item at the zero-based index 'n' from the control.
Note that it is an error (signalled by a PyAssertionError
exception if enabled) to remove an item with the index negative
or greater or equal than the number of items in the control.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="int" overloaded="no">
        <autodoc>GetCount() -&gt; int</autodoc>
        <docstring>Returns the number of items in the control.</docstring>
      </method>
      <method name="IsEmpty" type="bool" overloaded="no">
        <autodoc>IsEmpty() -&gt; bool</autodoc>
        <docstring>Returns True if the control is empty or False if it has some items.</docstring>
      </method>
      <method name="GetString" type="String" overloaded="no">
        <autodoc>GetString(int n) -&gt; String</autodoc>
        <docstring>Returns the label of the item with the given index.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetStrings" type="wxArrayString" overloaded="no">
        <autodoc>GetStrings() -&gt; wxArrayString</autodoc>
      </method>
      <method name="SetString" type="" overloaded="no">
        <autodoc>SetString(int n, String s)</autodoc>
        <docstring>Sets the label for the given item.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindString" type="int" overloaded="no">
        <autodoc>FindString(String s) -&gt; int</autodoc>
        <docstring>Finds an item whose label matches the given string.  Returns the
zero-based position of the item, or wx.NOT_FOUND if the string
was not found.</docstring>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Select" type="" overloaded="no">
        <autodoc>Select(int n)</autodoc>
        <docstring>Sets the item at index 'n' to be the selected item.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelection" type="int" overloaded="no">
        <autodoc>GetSelection() -&gt; int</autodoc>
        <docstring>Returns the index of the selected item or wx.NOT_FOUND if no item is selected.</docstring>
      </method>
      <method name="GetStringSelection" type="String" overloaded="no">
        <autodoc>GetStringSelection() -&gt; String</autodoc>
        <docstring>Returns the label of the selected item or an empty string if no item is selected.</docstring>
      </method>
      <method name="GetClientData" type="PyObject" overloaded="no">
        <autodoc>GetClientData(int n) -&gt; PyObject</autodoc>
        <docstring>Returns the client data associated with the given item, (if any.)</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetClientData" type="" overloaded="no">
        <autodoc>SetClientData(int n, PyObject clientData)</autodoc>
        <docstring>Associate the given client data with the item at position n.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="clientData" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ControlWithItems" oldname="wxControlWithItems" module="core">
      <docstring>wx.ControlWithItems combines the wx.ItemContainer class with the
wx.Control class, and is used for the base class of various
controls that have items.</docstring>
      <baseclass name="Control"/>
      <baseclass name="ItemContainer"/>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SizerItem" oldname="wxSizerItem" module="core">
      <baseclass name="Object"/>
      <constructor name="SizerItem" overloaded="no">
        <autodoc>__init__() -&gt; SizerItem</autodoc>
      </constructor>
      <constructor name="SizerItemSpacer" overloaded="no">
        <autodoc>SizerItemSpacer(int width, int height, int proportion, int flag, int border, 
    Object userData) -&gt; SizerItem</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="proportion" type="int" default=""/>
          <param name="flag" type="int" default=""/>
          <param name="border" type="int" default=""/>
          <param name="userData" type="Object" default=""/>
        </paramlist>
      </constructor>
      <constructor name="SizerItemWindow" overloaded="no">
        <autodoc>SizerItemWindow(Window window, int proportion, int flag, int border, 
    Object userData) -&gt; SizerItem</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
          <param name="proportion" type="int" default=""/>
          <param name="flag" type="int" default=""/>
          <param name="border" type="int" default=""/>
          <param name="userData" type="Object" default=""/>
        </paramlist>
      </constructor>
      <constructor name="SizerItemSizer" overloaded="no">
        <autodoc>SizerItemSizer(Sizer sizer, int proportion, int flag, int border, 
    Object userData) -&gt; SizerItem</autodoc>
        <paramlist>
          <param name="sizer" type="wxSizer" default=""/>
          <param name="proportion" type="int" default=""/>
          <param name="flag" type="int" default=""/>
          <param name="border" type="int" default=""/>
          <param name="userData" type="Object" default=""/>
        </paramlist>
      </constructor>
      <method name="DeleteWindows" type="" overloaded="no">
        <autodoc>DeleteWindows()</autodoc>
      </method>
      <method name="DetachSizer" type="" overloaded="no">
        <autodoc>DetachSizer()</autodoc>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
      <method name="SetDimension" type="" overloaded="no">
        <autodoc>SetDimension(Point pos, Size size)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="GetMinSize" type="Size" overloaded="no">
        <autodoc>GetMinSize() -&gt; Size</autodoc>
      </method>
      <method name="SetInitSize" type="" overloaded="no">
        <autodoc>SetInitSize(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRatioWH" type="" overloaded="no">
        <autodoc>SetRatioWH(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRatioSize" type="" overloaded="no">
        <autodoc>SetRatioSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetRatio" type="" overloaded="no">
        <autodoc>SetRatio(float ratio)</autodoc>
        <paramlist>
          <param name="ratio" type="float" default=""/>
        </paramlist>
      </method>
      <method name="GetRatio" type="float" overloaded="no">
        <autodoc>GetRatio() -&gt; float</autodoc>
      </method>
      <method name="IsWindow" type="bool" overloaded="no">
        <autodoc>IsWindow() -&gt; bool</autodoc>
      </method>
      <method name="IsSizer" type="bool" overloaded="no">
        <autodoc>IsSizer() -&gt; bool</autodoc>
      </method>
      <method name="IsSpacer" type="bool" overloaded="no">
        <autodoc>IsSpacer() -&gt; bool</autodoc>
      </method>
      <method name="SetProportion" type="" overloaded="no">
        <autodoc>SetProportion(int proportion)</autodoc>
        <paramlist>
          <param name="proportion" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetProportion" type="int" overloaded="no">
        <autodoc>GetProportion() -&gt; int</autodoc>
      </method>
      <method name="SetFlag" type="" overloaded="no">
        <autodoc>SetFlag(int flag)</autodoc>
        <paramlist>
          <param name="flag" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFlag" type="int" overloaded="no">
        <autodoc>GetFlag() -&gt; int</autodoc>
      </method>
      <method name="SetBorder" type="" overloaded="no">
        <autodoc>SetBorder(int border)</autodoc>
        <paramlist>
          <param name="border" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBorder" type="int" overloaded="no">
        <autodoc>GetBorder() -&gt; int</autodoc>
      </method>
      <method name="GetWindow" type="Window" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
      <method name="SetWindow" type="" overloaded="no">
        <autodoc>SetWindow(Window window)</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetSizer" type="wxSizer" overloaded="no">
        <autodoc>GetSizer() -&gt; Sizer</autodoc>
      </method>
      <method name="SetSizer" type="" overloaded="no">
        <autodoc>SetSizer(Sizer sizer)</autodoc>
        <paramlist>
          <param name="sizer" type="wxSizer" default=""/>
        </paramlist>
      </method>
      <method name="GetSpacer" type="Size" overloaded="no">
        <autodoc>GetSpacer() -&gt; Size</autodoc>
      </method>
      <method name="SetSpacer" type="" overloaded="no">
        <autodoc>SetSpacer(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="Show" type="" overloaded="no">
        <autodoc>Show(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsShown" type="bool" overloaded="no">
        <autodoc>IsShown() -&gt; bool</autodoc>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="GetUserData" type="PyObject" overloaded="no">
        <autodoc>GetUserData() -&gt; PyObject</autodoc>
      </method>
    </class>
    <class name="Sizer" oldname="wxSizer" module="core">
      <baseclass name="Object"/>
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Add" type="" overloaded="no">
        <autodoc>Add(PyObject item, int proportion=0, int flag=0, int border=0, 
    PyObject userData=None)</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
          <param name="proportion" type="int" default="0"/>
          <param name="flag" type="int" default="0"/>
          <param name="border" type="int" default="0"/>
          <param name="userData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="Insert" type="" overloaded="no">
        <autodoc>Insert(int before, PyObject item, int proportion=0, int flag=0, 
    int border=0, PyObject userData=None)</autodoc>
        <paramlist>
          <param name="before" type="int" default=""/>
          <param name="item" type="PyObject" default=""/>
          <param name="proportion" type="int" default="0"/>
          <param name="flag" type="int" default="0"/>
          <param name="border" type="int" default="0"/>
          <param name="userData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="Prepend" type="" overloaded="no">
        <autodoc>Prepend(PyObject item, int proportion=0, int flag=0, int border=0, 
    PyObject userData=None)</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
          <param name="proportion" type="int" default="0"/>
          <param name="flag" type="int" default="0"/>
          <param name="border" type="int" default="0"/>
          <param name="userData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="Remove" type="bool" overloaded="no">
        <autodoc>Remove(PyObject item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="_SetItemMinSize" type="" overloaded="no">
        <autodoc>_SetItemMinSize(PyObject item, Size size)</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="AddItem" type="" overloaded="no">
        <autodoc>AddItem(SizerItem item)</autodoc>
        <paramlist>
          <param name="item" type="SizerItem" default=""/>
        </paramlist>
      </method>
      <method name="InsertItem" type="" overloaded="no">
        <autodoc>InsertItem(size_t index, SizerItem item)</autodoc>
        <paramlist>
          <param name="index" type="size_t" default=""/>
          <param name="item" type="SizerItem" default=""/>
        </paramlist>
      </method>
      <method name="PrependItem" type="" overloaded="no">
        <autodoc>PrependItem(SizerItem item)</autodoc>
        <paramlist>
          <param name="item" type="SizerItem" default=""/>
        </paramlist>
      </method>
      <method name="SetDimension" type="" overloaded="no">
        <autodoc>SetDimension(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMinSize" type="" overloaded="no">
        <autodoc>SetMinSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="GetMinSize" type="Size" overloaded="no">
        <autodoc>GetMinSize() -&gt; Size</autodoc>
      </method>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
      <method name="Layout" type="" overloaded="no">
        <autodoc>Layout()</autodoc>
      </method>
      <method name="Fit" type="Size" overloaded="no">
        <autodoc>Fit(Window window) -&gt; Size</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="FitInside" type="" overloaded="no">
        <autodoc>FitInside(Window window)</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="SetSizeHints" type="" overloaded="no">
        <autodoc>SetSizeHints(Window window)</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="SetVirtualSizeHints" type="" overloaded="no">
        <autodoc>SetVirtualSizeHints(Window window)</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear(bool delete_windows=False)</autodoc>
        <paramlist>
          <param name="delete_windows" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="DeleteWindows" type="" overloaded="no">
        <autodoc>DeleteWindows()</autodoc>
      </method>
      <method name="GetChildren" type="PyObject" overloaded="no">
        <autodoc>GetChildren() -&gt; PyObject</autodoc>
      </method>
      <method name="Show" type="" overloaded="no">
        <autodoc>Show(PyObject item, bool show=True)</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
          <param name="show" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Hide" type="" overloaded="no">
        <autodoc>Hide(PyObject item)</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="IsShown" type="bool" overloaded="no">
        <autodoc>IsShown(PyObject item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="ShowItems" type="" overloaded="no">
        <autodoc>ShowItems(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PySizer" oldname="wxPySizer" module="core">
      <baseclass name="Sizer"/>
      <constructor name="PySizer" overloaded="no">
        <autodoc>__init__() -&gt; PySizer</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="BoxSizer" oldname="wxBoxSizer" module="core">
      <baseclass name="Sizer"/>
      <constructor name="BoxSizer" overloaded="no">
        <autodoc>__init__(int orient=HORIZONTAL) -&gt; BoxSizer</autodoc>
        <paramlist>
          <param name="orient" type="int" default="wxHORIZONTAL"/>
        </paramlist>
      </constructor>
      <method name="GetOrientation" type="int" overloaded="no">
        <autodoc>GetOrientation() -&gt; int</autodoc>
      </method>
      <method name="SetOrientation" type="" overloaded="no">
        <autodoc>SetOrientation(int orient)</autodoc>
        <paramlist>
          <param name="orient" type="int" default=""/>
        </paramlist>
      </method>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="StaticBoxSizer" oldname="wxStaticBoxSizer" module="core">
      <baseclass name="BoxSizer"/>
      <constructor name="StaticBoxSizer" overloaded="no">
        <autodoc>__init__(wxStaticBox box, int orient=HORIZONTAL) -&gt; StaticBoxSizer</autodoc>
        <paramlist>
          <param name="box" type="wxStaticBox" default=""/>
          <param name="orient" type="int" default="wxHORIZONTAL"/>
        </paramlist>
      </constructor>
      <method name="GetStaticBox" type="wxStaticBox" overloaded="no">
        <autodoc>GetStaticBox() -&gt; wxStaticBox</autodoc>
      </method>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="GridSizer" oldname="wxGridSizer" module="core">
      <baseclass name="Sizer"/>
      <constructor name="GridSizer" overloaded="no">
        <autodoc>__init__(int rows=1, int cols=0, int vgap=0, int hgap=0) -&gt; GridSizer</autodoc>
        <paramlist>
          <param name="rows" type="int" default="1"/>
          <param name="cols" type="int" default="0"/>
          <param name="vgap" type="int" default="0"/>
          <param name="hgap" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
      <method name="SetCols" type="" overloaded="no">
        <autodoc>SetCols(int cols)</autodoc>
        <paramlist>
          <param name="cols" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRows" type="" overloaded="no">
        <autodoc>SetRows(int rows)</autodoc>
        <paramlist>
          <param name="rows" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetVGap" type="" overloaded="no">
        <autodoc>SetVGap(int gap)</autodoc>
        <paramlist>
          <param name="gap" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetHGap" type="" overloaded="no">
        <autodoc>SetHGap(int gap)</autodoc>
        <paramlist>
          <param name="gap" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCols" type="int" overloaded="no">
        <autodoc>GetCols() -&gt; int</autodoc>
      </method>
      <method name="GetRows" type="int" overloaded="no">
        <autodoc>GetRows() -&gt; int</autodoc>
      </method>
      <method name="GetVGap" type="int" overloaded="no">
        <autodoc>GetVGap() -&gt; int</autodoc>
      </method>
      <method name="GetHGap" type="int" overloaded="no">
        <autodoc>GetHGap() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="FlexGridSizer" oldname="wxFlexGridSizer" module="core">
      <baseclass name="GridSizer"/>
      <constructor name="FlexGridSizer" overloaded="no">
        <autodoc>__init__(int rows=1, int cols=0, int vgap=0, int hgap=0) -&gt; FlexGridSizer</autodoc>
        <paramlist>
          <param name="rows" type="int" default="1"/>
          <param name="cols" type="int" default="0"/>
          <param name="vgap" type="int" default="0"/>
          <param name="hgap" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
      <method name="AddGrowableRow" type="" overloaded="no">
        <autodoc>AddGrowableRow(size_t idx, int proportion=0)</autodoc>
        <paramlist>
          <param name="idx" type="size_t" default=""/>
          <param name="proportion" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="RemoveGrowableRow" type="" overloaded="no">
        <autodoc>RemoveGrowableRow(size_t idx)</autodoc>
        <paramlist>
          <param name="idx" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="AddGrowableCol" type="" overloaded="no">
        <autodoc>AddGrowableCol(size_t idx, int proportion=0)</autodoc>
        <paramlist>
          <param name="idx" type="size_t" default=""/>
          <param name="proportion" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="RemoveGrowableCol" type="" overloaded="no">
        <autodoc>RemoveGrowableCol(size_t idx)</autodoc>
        <paramlist>
          <param name="idx" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetFlexibleDirection" type="" overloaded="no">
        <autodoc>SetFlexibleDirection(int direction)</autodoc>
        <paramlist>
          <param name="direction" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFlexibleDirection" type="int" overloaded="no">
        <autodoc>GetFlexibleDirection() -&gt; int</autodoc>
      </method>
      <method name="SetNonFlexibleGrowMode" type="" overloaded="no">
        <autodoc>SetNonFlexibleGrowMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="wxFlexSizerGrowMode" default=""/>
        </paramlist>
      </method>
      <method name="GetNonFlexibleGrowMode" type="wxFlexSizerGrowMode" overloaded="no">
        <autodoc>GetNonFlexibleGrowMode() -&gt; int</autodoc>
      </method>
      <method name="GetRowHeights" type="wxArrayInt" overloaded="no">
        <autodoc>GetRowHeights() -&gt; wxArrayInt</autodoc>
      </method>
      <method name="GetColWidths" type="wxArrayInt" overloaded="no">
        <autodoc>GetColWidths() -&gt; wxArrayInt</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="GBPosition" oldname="wxGBPosition" module="core">
      <constructor name="GBPosition" overloaded="no">
        <autodoc>__init__(int row=0, int col=0) -&gt; GBPosition</autodoc>
        <paramlist>
          <param name="row" type="int" default="0"/>
          <param name="col" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetRow" type="int" overloaded="no">
        <autodoc>GetRow() -&gt; int</autodoc>
      </method>
      <method name="GetCol" type="int" overloaded="no">
        <autodoc>GetCol() -&gt; int</autodoc>
      </method>
      <method name="SetRow" type="" overloaded="no">
        <autodoc>SetRow(int row)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCol" type="" overloaded="no">
        <autodoc>SetCol(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(GBPosition other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="GBPosition" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(GBPosition other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="GBPosition" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(int row=0, int col=0)</autodoc>
        <paramlist>
          <param name="row" type="int" default="0"/>
          <param name="col" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; PyObject</autodoc>
      </method>
    </class>
    <class name="GBSpan" oldname="wxGBSpan" module="core">
      <constructor name="GBSpan" overloaded="no">
        <autodoc>__init__(int rowspan=1, int colspan=1) -&gt; GBSpan</autodoc>
        <paramlist>
          <param name="rowspan" type="int" default="1"/>
          <param name="colspan" type="int" default="1"/>
        </paramlist>
      </constructor>
      <method name="GetRowspan" type="int" overloaded="no">
        <autodoc>GetRowspan() -&gt; int</autodoc>
      </method>
      <method name="GetColspan" type="int" overloaded="no">
        <autodoc>GetColspan() -&gt; int</autodoc>
      </method>
      <method name="SetRowspan" type="" overloaded="no">
        <autodoc>SetRowspan(int rowspan)</autodoc>
        <paramlist>
          <param name="rowspan" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColspan" type="" overloaded="no">
        <autodoc>SetColspan(int colspan)</autodoc>
        <paramlist>
          <param name="colspan" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(GBSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="GBSpan" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(GBSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="GBSpan" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(int rowspan=1, int colspan=1)</autodoc>
        <paramlist>
          <param name="rowspan" type="int" default="1"/>
          <param name="colspan" type="int" default="1"/>
        </paramlist>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; PyObject</autodoc>
      </method>
    </class>
    <class name="GBSizerItem" oldname="wxGBSizerItem" module="core">
      <baseclass name="SizerItem"/>
      <constructor name="GBSizerItem" overloaded="no">
        <autodoc>__init__() -&gt; GBSizerItem</autodoc>
      </constructor>
      <constructor name="GBSizerItemWindow" overloaded="no">
        <autodoc>GBSizerItemWindow(Window window, GBPosition pos, GBSpan span, int flag, 
    int border, Object userData) -&gt; GBSizerItem</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
          <param name="pos" type="GBPosition" default=""/>
          <param name="span" type="GBSpan" default=""/>
          <param name="flag" type="int" default=""/>
          <param name="border" type="int" default=""/>
          <param name="userData" type="Object" default=""/>
        </paramlist>
      </constructor>
      <constructor name="GBSizerItemSizer" overloaded="no">
        <autodoc>GBSizerItemSizer(Sizer sizer, GBPosition pos, GBSpan span, int flag, 
    int border, Object userData) -&gt; GBSizerItem</autodoc>
        <paramlist>
          <param name="sizer" type="Sizer" default=""/>
          <param name="pos" type="GBPosition" default=""/>
          <param name="span" type="GBSpan" default=""/>
          <param name="flag" type="int" default=""/>
          <param name="border" type="int" default=""/>
          <param name="userData" type="Object" default=""/>
        </paramlist>
      </constructor>
      <constructor name="GBSizerItemSpacer" overloaded="no">
        <autodoc>GBSizerItemSpacer(int width, int height, GBPosition pos, GBSpan span, 
    int flag, int border, Object userData) -&gt; GBSizerItem</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="pos" type="GBPosition" default=""/>
          <param name="span" type="GBSpan" default=""/>
          <param name="flag" type="int" default=""/>
          <param name="border" type="int" default=""/>
          <param name="userData" type="Object" default=""/>
        </paramlist>
      </constructor>
      <method name="GetPos" type="GBPosition" overloaded="no">
        <autodoc>GetPos() -&gt; GBPosition</autodoc>
      </method>
      <method name="GetSpan" type="GBSpan" overloaded="no">
        <autodoc>GetSpan() -&gt; GBSpan</autodoc>
      </method>
      <method name="SetPos" type="bool" overloaded="no">
        <autodoc>SetPos(GBPosition pos) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="GBPosition" default=""/>
        </paramlist>
      </method>
      <method name="SetSpan" type="bool" overloaded="no">
        <autodoc>SetSpan(GBSpan span) -&gt; bool</autodoc>
        <paramlist>
          <param name="span" type="GBSpan" default=""/>
        </paramlist>
      </method>
      <method name="Intersects" type="bool" overloaded="yes">
        <paramlist>
          <param name="other" type="GBSizerItem" default=""/>
        </paramlist>
      </method>
      <method name="Intersects" type="bool" overloaded="yes">
        <autodoc>Intersects(GBSizerItem other) -&gt; bool
Intersects(GBPosition pos, GBSpan span) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="GBPosition" default=""/>
          <param name="span" type="GBSpan" default=""/>
        </paramlist>
      </method>
      <method name="GetEndPos" type="" overloaded="no">
        <autodoc>GetEndPos(int row, int col)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetGBSizer" type="wxGridBagSizer" overloaded="no">
        <autodoc>GetGBSizer() -&gt; GridBagSizer</autodoc>
      </method>
      <method name="SetGBSizer" type="" overloaded="no">
        <autodoc>SetGBSizer(GridBagSizer sizer)</autodoc>
        <paramlist>
          <param name="sizer" type="wxGridBagSizer" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="GridBagSizer" oldname="wxGridBagSizer" module="core">
      <baseclass name="FlexGridSizer"/>
      <constructor name="GridBagSizer" overloaded="no">
        <autodoc>__init__(int vgap=0, int hgap=0) -&gt; GridBagSizer</autodoc>
        <paramlist>
          <param name="vgap" type="int" default="0"/>
          <param name="hgap" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="Add" type="bool" overloaded="no">
        <autodoc>Add(PyObject item, GBPosition pos, GBSpan span=DefaultSpan, 
    int flag=0, int border=0, PyObject userData=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="PyObject" default=""/>
          <param name="pos" type="GBPosition" default=""/>
          <param name="span" type="GBSpan" default="wxDefaultSpan"/>
          <param name="flag" type="int" default="0"/>
          <param name="border" type="int" default="0"/>
          <param name="userData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="AddItem" type="bool" overloaded="no">
        <autodoc>AddItem(GBSizerItem item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="GBSizerItem" default=""/>
        </paramlist>
      </method>
      <method name="GetEmptyCellSize" type="Size" overloaded="no">
        <autodoc>GetEmptyCellSize() -&gt; Size</autodoc>
      </method>
      <method name="SetEmptyCellSize" type="" overloaded="no">
        <autodoc>SetEmptyCellSize(Size sz)</autodoc>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="GetItemPosition" type="GBPosition" overloaded="yes">
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetItemPosition" type="GBPosition" overloaded="yes">
        <paramlist>
          <param name="sizer" type="Sizer" default=""/>
        </paramlist>
      </method>
      <method name="GetItemPosition" type="GBPosition" overloaded="yes">
        <autodoc>GetItemPosition(Window window) -&gt; GBPosition
GetItemPosition(Sizer sizer) -&gt; GBPosition
GetItemPosition(size_t index) -&gt; GBPosition</autodoc>
        <paramlist>
          <param name="index" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetItemPosition" type="bool" overloaded="yes">
        <paramlist>
          <param name="window" type="Window" default=""/>
          <param name="pos" type="GBPosition" default=""/>
        </paramlist>
      </method>
      <method name="SetItemPosition" type="bool" overloaded="yes">
        <paramlist>
          <param name="sizer" type="Sizer" default=""/>
          <param name="pos" type="GBPosition" default=""/>
        </paramlist>
      </method>
      <method name="SetItemPosition" type="bool" overloaded="yes">
        <autodoc>SetItemPosition(Window window, GBPosition pos) -&gt; bool
SetItemPosition(Sizer sizer, GBPosition pos) -&gt; bool
SetItemPosition(size_t index, GBPosition pos) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="size_t" default=""/>
          <param name="pos" type="GBPosition" default=""/>
        </paramlist>
      </method>
      <method name="GetItemSpan" type="GBSpan" overloaded="yes">
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetItemSpan" type="GBSpan" overloaded="yes">
        <paramlist>
          <param name="sizer" type="Sizer" default=""/>
        </paramlist>
      </method>
      <method name="GetItemSpan" type="GBSpan" overloaded="yes">
        <autodoc>GetItemSpan(Window window) -&gt; GBSpan
GetItemSpan(Sizer sizer) -&gt; GBSpan
GetItemSpan(size_t index) -&gt; GBSpan</autodoc>
        <paramlist>
          <param name="index" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetItemSpan" type="bool" overloaded="yes">
        <paramlist>
          <param name="window" type="Window" default=""/>
          <param name="span" type="GBSpan" default=""/>
        </paramlist>
      </method>
      <method name="SetItemSpan" type="bool" overloaded="yes">
        <paramlist>
          <param name="sizer" type="Sizer" default=""/>
          <param name="span" type="GBSpan" default=""/>
        </paramlist>
      </method>
      <method name="SetItemSpan" type="bool" overloaded="yes">
        <autodoc>SetItemSpan(Window window, GBSpan span) -&gt; bool
SetItemSpan(Sizer sizer, GBSpan span) -&gt; bool
SetItemSpan(size_t index, GBSpan span) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="size_t" default=""/>
          <param name="span" type="GBSpan" default=""/>
        </paramlist>
      </method>
      <method name="FindItem" type="GBSizerItem" overloaded="yes">
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="FindItem" type="GBSizerItem" overloaded="yes">
        <autodoc>FindItem(Window window) -&gt; GBSizerItem
FindItem(Sizer sizer) -&gt; GBSizerItem</autodoc>
        <paramlist>
          <param name="sizer" type="Sizer" default=""/>
        </paramlist>
      </method>
      <method name="FindItemAtPosition" type="GBSizerItem" overloaded="no">
        <autodoc>FindItemAtPosition(GBPosition pos) -&gt; GBSizerItem</autodoc>
        <paramlist>
          <param name="pos" type="GBPosition" default=""/>
        </paramlist>
      </method>
      <method name="FindItemAtPoint" type="GBSizerItem" overloaded="no">
        <autodoc>FindItemAtPoint(Point pt) -&gt; GBSizerItem</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="FindItemWithData" type="GBSizerItem" overloaded="no">
        <autodoc>FindItemWithData(Object userData) -&gt; GBSizerItem</autodoc>
        <paramlist>
          <param name="userData" type="Object" default=""/>
        </paramlist>
      </method>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
      <method name="CheckForIntersection" type="bool" overloaded="yes">
        <paramlist>
          <param name="item" type="GBSizerItem" default=""/>
          <param name="excludeItem" type="GBSizerItem" default="NULL"/>
        </paramlist>
      </method>
      <method name="CheckForIntersection" type="bool" overloaded="yes">
        <autodoc>CheckForIntersection(GBSizerItem item, GBSizerItem excludeItem=None) -&gt; bool
CheckForIntersection(GBPosition pos, GBSpan span, GBSizerItem excludeItem=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="GBPosition" default=""/>
          <param name="span" type="GBSpan" default=""/>
          <param name="excludeItem" type="GBSizerItem" default="NULL"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="IndividualLayoutConstraint" oldname="wxIndividualLayoutConstraint" module="core">
      <docstring>Objects of this class are stored in the wx.LayoutConstraint class as one of
eight possible constraints that a window can be involved in.  You will never
need to create an instance of wx.IndividualLayoutConstraint, rather you should
use create a wx.LayoutContstraints instance and use the individual contstraints
that it contains.

Constraints are initially set to have the relationship wx.Unconstrained, which
means that their values should be calculated by looking at known constraints.

The Edge specifies the type of edge or dimension of a window.

 Edges

    wx.Left  The left edge.
    wx.Top  The top edge.
    wx.Right  The right edge.
    wx.Bottom  The bottom edge.
    wx.CentreX  The x-coordinate of the centre of the window.
    wx.CentreY  The y-coordinate of the centre of the window. 


The Relationship specifies the relationship that this edge or dimension has
with another specified edge or dimension. Normally, the user doesn't use these
directly because functions such as Below and RightOf are a convenience for
using the more general Set function.

 Relationships

    wx.Unconstrained  The edge or dimension is unconstrained
                        (the default for edges.)
    wx.AsIs          The edge or dimension is to be taken from the current
                        window position or size (the default for dimensions.)
    wx.Above          The edge should be above another edge.
    wx.Below          The edge should be below another edge.
    wx.LeftOf          The edge should be to the left of another edge.
    wx.RightOf          The edge should be to the right of another edge.
    wx.SameAs          The edge or dimension should be the same as another edge
                        or dimension.
    wx.PercentOf  The edge or dimension should be a percentage of another
                        edge or dimension.
    wx.Absolute  The edge or dimension should be a given absolute value.

</docstring>
      <baseclass name="Object"/>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(int rel, Window otherW, int otherE, int val=0, int marg=wxLAYOUT_DEFAULT_MARGIN)</autodoc>
        <paramlist>
          <param name="rel" type="wxRelationship" default=""/>
          <param name="otherW" type="Window" default=""/>
          <param name="otherE" type="wxEdge" default=""/>
          <param name="val" type="int" default="0"/>
          <param name="marg" type="int" default="wxLAYOUT_DEFAULT_MARGIN"/>
        </paramlist>
      </method>
      <method name="LeftOf" type="" overloaded="no">
        <autodoc>LeftOf(Window sibling, int marg=0)</autodoc>
        <docstring>Sibling relationship</docstring>
        <paramlist>
          <param name="sibling" type="Window" default=""/>
          <param name="marg" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="RightOf" type="" overloaded="no">
        <autodoc>RightOf(Window sibling, int marg=0)</autodoc>
        <docstring>Sibling relationship</docstring>
        <paramlist>
          <param name="sibling" type="Window" default=""/>
          <param name="marg" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Above" type="" overloaded="no">
        <autodoc>Above(Window sibling, int marg=0)</autodoc>
        <docstring>Sibling relationship</docstring>
        <paramlist>
          <param name="sibling" type="Window" default=""/>
          <param name="marg" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Below" type="" overloaded="no">
        <autodoc>Below(Window sibling, int marg=0)</autodoc>
        <docstring>Sibling relationship</docstring>
        <paramlist>
          <param name="sibling" type="Window" default=""/>
          <param name="marg" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SameAs" type="" overloaded="no">
        <autodoc>SameAs(Window otherW, int edge, int marg=0)</autodoc>
        <docstring>'Same edge' alignment</docstring>
        <paramlist>
          <param name="otherW" type="Window" default=""/>
          <param name="edge" type="wxEdge" default=""/>
          <param name="marg" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="PercentOf" type="" overloaded="no">
        <autodoc>PercentOf(Window otherW, int wh, int per)</autodoc>
        <docstring>The edge is a percentage of the other window's edge</docstring>
        <paramlist>
          <param name="otherW" type="Window" default=""/>
          <param name="wh" type="wxEdge" default=""/>
          <param name="per" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Absolute" type="" overloaded="no">
        <autodoc>Absolute(int val)</autodoc>
        <docstring>Edge has absolute value</docstring>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Unconstrained" type="" overloaded="no">
        <autodoc>Unconstrained()</autodoc>
        <docstring>Dimension is unconstrained</docstring>
      </method>
      <method name="AsIs" type="" overloaded="no">
        <autodoc>AsIs()</autodoc>
        <docstring>Dimension is 'as is' (use current size settings)</docstring>
      </method>
      <method name="GetOtherWindow" type="Window" overloaded="no">
        <autodoc>GetOtherWindow() -&gt; Window</autodoc>
      </method>
      <method name="GetMyEdge" type="wxEdge" overloaded="no">
        <autodoc>GetMyEdge() -&gt; int</autodoc>
      </method>
      <method name="SetEdge" type="" overloaded="no">
        <autodoc>SetEdge(int which)</autodoc>
        <paramlist>
          <param name="which" type="wxEdge" default=""/>
        </paramlist>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(int v)</autodoc>
        <paramlist>
          <param name="v" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMargin" type="int" overloaded="no">
        <autodoc>GetMargin() -&gt; int</autodoc>
      </method>
      <method name="SetMargin" type="" overloaded="no">
        <autodoc>SetMargin(int m)</autodoc>
        <paramlist>
          <param name="m" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetValue" type="int" overloaded="no">
        <autodoc>GetValue() -&gt; int</autodoc>
      </method>
      <method name="GetPercent" type="int" overloaded="no">
        <autodoc>GetPercent() -&gt; int</autodoc>
      </method>
      <method name="GetOtherEdge" type="int" overloaded="no">
        <autodoc>GetOtherEdge() -&gt; int</autodoc>
      </method>
      <method name="GetDone" type="bool" overloaded="no">
        <autodoc>GetDone() -&gt; bool</autodoc>
      </method>
      <method name="SetDone" type="" overloaded="no">
        <autodoc>SetDone(bool d)</autodoc>
        <paramlist>
          <param name="d" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetRelationship" type="wxRelationship" overloaded="no">
        <autodoc>GetRelationship() -&gt; int</autodoc>
      </method>
      <method name="SetRelationship" type="" overloaded="no">
        <autodoc>SetRelationship(int r)</autodoc>
        <paramlist>
          <param name="r" type="wxRelationship" default=""/>
        </paramlist>
      </method>
      <method name="ResetIfWin" type="bool" overloaded="no">
        <autodoc>ResetIfWin(Window otherW) -&gt; bool</autodoc>
        <docstring>Reset constraint if it mentions otherWin</docstring>
        <paramlist>
          <param name="otherW" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="SatisfyConstraint" type="bool" overloaded="no">
        <autodoc>SatisfyConstraint(LayoutConstraints constraints, Window win) -&gt; bool</autodoc>
        <docstring>Try to satisfy constraint</docstring>
        <paramlist>
          <param name="constraints" type="wxLayoutConstraints" default=""/>
          <param name="win" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetEdge" type="int" overloaded="no">
        <autodoc>GetEdge(int which, Window thisWin, Window other) -&gt; int</autodoc>
        <docstring>Get the value of this edge or dimension, or if this
is not determinable, -1.</docstring>
        <paramlist>
          <param name="which" type="wxEdge" default=""/>
          <param name="thisWin" type="Window" default=""/>
          <param name="other" type="Window" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="LayoutConstraints" oldname="wxLayoutConstraints" module="core">
      <docstring>Note: constraints are now deprecated and you should use sizers instead.

Objects of this class can be associated with a window to define its layout
constraints, with respect to siblings or its parent.

The class consists of the following eight constraints of class
wx.IndividualLayoutConstraint, some or all of which should be accessed
directly to set the appropriate constraints.

    * left: represents the left hand edge of the window
    * right: represents the right hand edge of the window
    * top: represents the top edge of the window
    * bottom: represents the bottom edge of the window
    * width: represents the width of the window
    * height: represents the height of the window
    * centreX: represents the horizontal centre point of the window
    * centreY: represents the vertical centre point of the window 

Most constraints are initially set to have the relationship wxUnconstrained,
which means that their values should be calculated by looking at known
constraints. The exceptions are width and height, which are set to wxAsIs to
ensure that if the user does not specify a constraint, the existing width and
height will be used, to be compatible with panel items which often have take a
default size. If the constraint is wxAsIs, the dimension will not be changed.
</docstring>
      <baseclass name="Object"/>
      <constructor name="LayoutConstraints" overloaded="no">
        <autodoc>__init__() -&gt; LayoutConstraints</autodoc>
      </constructor>
      <property name="left" type="IndividualLayoutConstraint" readonly="yes"/>
      <property name="top" type="IndividualLayoutConstraint" readonly="yes"/>
      <property name="right" type="IndividualLayoutConstraint" readonly="yes"/>
      <property name="bottom" type="IndividualLayoutConstraint" readonly="yes"/>
      <property name="width" type="IndividualLayoutConstraint" readonly="yes"/>
      <property name="height" type="IndividualLayoutConstraint" readonly="yes"/>
      <property name="centreX" type="IndividualLayoutConstraint" readonly="yes"/>
      <property name="centreY" type="IndividualLayoutConstraint" readonly="yes"/>
      <method name="SatisfyConstraints" type="bool" overloaded="no">
        <autodoc>SatisfyConstraints(Window win) -&gt; (areSatisfied, noChanges)</autodoc>
        <paramlist>
          <param name="win" type="Window" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AreSatisfied" type="bool" overloaded="no">
        <autodoc>AreSatisfied() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>#----------------------------------------------------------------------------

# Use Python's bool constants if available, make some if not
try:
    True
except NameError:
    __builtins__.True = 1==1
    __builtins__.False = 1==0
    def bool(value): return not not value
    __builtins__.bool = bool



# workarounds for bad wxRTTI names
__wxPyPtrTypeMap['wxGauge95']    = 'wxGauge'
__wxPyPtrTypeMap['wxSlider95']   = 'wxSlider'
__wxPyPtrTypeMap['wxStatusBar95']   = 'wxStatusBar'


#----------------------------------------------------------------------------
# Load version numbers from __version__...  Ensure that major and minor
# versions are the same for both wxPython and wxWindows.

from __version__ import *
__version__ = VERSION_STRING

assert MAJOR_VERSION == _core.MAJOR_VERSION, "wxPython/wxWindows version mismatch"
assert MINOR_VERSION == _core.MINOR_VERSION, "wxPython/wxWindows version mismatch"
if RELEASE_VERSION != _core.RELEASE_VERSION:
    import warnings
    warnings.warn("wxPython/wxWindows release number mismatch")

#----------------------------------------------------------------------------

class PyDeadObjectError(AttributeError):
    pass

class _wxPyDeadObject(object):
    """
    Instances of wx objects that are OOR capable will have their __class__
    changed to this class when the C++ object is deleted.  This should help
    prevent crashes due to referencing a bogus C++ pointer.
    """
    reprStr = "wxPython wrapper for DELETED %s object! (The C++ object no longer exists.)"
    attrStr = "The C++ part of the %s object has been deleted, attribute access no longer allowed."

    def __repr__(self):
        if not hasattr(self, "_name"):
            self._name = "[unknown]"
        return self.reprStr % self._name

    def __getattr__(self, *args):
        if not hasattr(self, "_name"):
            self._name = "[unknown]"
        raise PyDeadObjectError(self.attrStr % self._name)

    def __nonzero__(self):
        return 0



class PyUnbornObjectError(AttributeError):
    pass

class _wxPyUnbornObject(object):
    """
    Some stock objects are created when the wx.core module is
    imported, but their C++ instance is not created until the wx.App
    object is created and initialized.  These object instances will
    temporarily have their __class__ changed to this class so an
    exception will be raised if they are used before the C++ instance
    is ready.
    """

    reprStr = "wxPython wrapper for UNBORN object! (The C++ object is not initialized yet.)"
    attrStr = "The C++ part of this object has not been initialized, attribute access not allowed."

    def __repr__(self):
        #if not hasattr(self, "_name"):
        #    self._name = "[unknown]"
        return self.reprStr #% self._name

    def __getattr__(self, *args):
        #if not hasattr(self, "_name"):
        #    self._name = "[unknown]"
        raise PyUnbornObjectError(self.attrStr) # % self._name )

    def __nonzero__(self):
        return 0


#----------------------------------------------------------------------------
_wxPyCallAfterId = None

def CallAfter(callable, *args, **kw):
    """
    Call the specified function after the current and pending event
    handlers have been completed.  This is also good for making GUI
    method calls from non-GUI threads.
    """
    app = wx.GetApp()
    assert app, 'No wxApp created yet'

    global _wxPyCallAfterId
    if _wxPyCallAfterId is None:
        _wxPyCallAfterId = wx.NewEventType()
        app.Connect(-1, -1, _wxPyCallAfterId,
              lambda event: event.callable(*event.args, **event.kw) )
    evt = wx.PyEvent()
    evt.SetEventType(_wxPyCallAfterId)
    evt.callable = callable
    evt.args = args
    evt.kw = kw
    wx.PostEvent(app, evt)


#----------------------------------------------------------------------------


class FutureCall:
    """
    A convenience class for wx.Timer, that calls the given callable
    object once after the given amount of milliseconds, passing any
    positional or keyword args.  The return value of the callable is
    availbale after it has been run with the GetResult method.

    If you don't need to get the return value or restart the timer
    then there is no need to hold a reference to this object.  It will
    hold a reference to itself while the timer is running (the timer
    has a reference to self.Notify) but the cycle will be broken when
    the timer completes, automatically cleaning up the wx.FutureCall
    object.
    """
    def __init__(self, millis, callable, *args, **kwargs):
        self.millis = millis
        self.callable = callable
        self.SetArgs(*args, **kwargs)
        self.runCount = 0
        self.running = False
        self.hasRun = False
        self.result = None
        self.timer = None
        self.Start()

    def __del__(self):
        self.Stop()


    def Start(self, millis=None, *args, **kwargs):
        """
        (Re)start the timer
        """
        self.hasRun = False
        if millis is not None:
            self.millis = millis
        if args or kwargs:
            self.SetArgs(*args, **kwargs)
        self.Stop()
        self.timer = wx.PyTimer(self.Notify)
        self.timer.Start(self.millis, wx.TIMER_ONE_SHOT)
        self.running = True
    Restart = Start


    def Stop(self):
        """
        Stop and destroy the timer.
        """
        if self.timer is not None:
            self.timer.Stop()
            self.timer = None


    def GetInterval(self):
        if self.timer is not None:
            return self.timer.GetInterval()
        else:
            return 0


    def IsRunning(self):
        return self.timer is not None and self.timer.IsRunning()


    def SetArgs(self, *args, **kwargs):
        """
        (Re)set the args passed to the callable object.  This is
        useful in conjunction with Restart if you want to schedule a
        new call to the same callable object but with different
        parameters.
        """
        self.args = args
        self.kwargs = kwargs


    def HasRun(self):
        return self.hasRun

    def GetResult(self):
        return self.result

    def Notify(self):
        """
        The timer has expired so call the callable.
        """
        if self.callable and getattr(self.callable, 'im_self', True):
            self.runCount += 1
            self.running = False
            self.result = self.callable(*self.args, **self.kwargs)
        self.hasRun = True
        if not self.running:
            # if it wasn't restarted, then cleanup
            wx.CallAfter(self.Stop)


#----------------------------------------------------------------------------
#----------------------------------------------------------------------------

# Import other modules in this package that should show up in the
# "core" wx namespace
from gdi import *
from windows import *
from controls import *
from misc import *


# Fixup the stock objects since they can't be used yet.  (They will be
# restored in wx.PyApp.OnInit.)
_core._wxPyFixStockObjects()

#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
</pythoncode>
  </module>
  <module name="gdi">
    <import name="core"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="GDIObject" oldname="wxGDIObject" module="gdi">
      <baseclass name="Object"/>
      <constructor name="GDIObject" overloaded="no">
        <autodoc>__init__() -&gt; GDIObject</autodoc>
      </constructor>
      <destructor name="~wxGDIObject" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetVisible" type="bool" overloaded="no">
        <autodoc>GetVisible() -&gt; bool</autodoc>
      </method>
      <method name="SetVisible" type="" overloaded="no">
        <autodoc>SetVisible(bool visible)</autodoc>
        <paramlist>
          <param name="visible" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsNull" type="bool" overloaded="no">
        <autodoc>IsNull() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Colour" oldname="wxColour" module="gdi">
      <docstring>A colour is an object representing a combination of Red, Green, and Blue (RGB)
intensity values, and is used to determine drawing colours, window colours,
etc.  Valid RGB values are in the range 0 to 255.

In wxPython there are typemaps that will automatically convert from a colour
name, or from a "#RRGGBB" colour hex value string to a wx.Colour object when
calling C++ methods that expect a wxColour.  This means that the following are
all equivallent:

    win.SetBackgroundColour(wxColour(0,0,255))
    win.SetBackgroundColour("BLUE")
    win.SetBackgroundColour("#0000FF")

You can retrieve the various current system colour settings with
wx.SystemSettings.GetColour.</docstring>
      <baseclass name="Object"/>
      <constructor name="Colour" overloaded="no">
        <autodoc>__init__(unsigned char red=0, unsigned char green=0, unsigned char blue=0) -&gt; Colour</autodoc>
        <docstring>Constructs a colour from red, green and blue values.</docstring>
        <paramlist>
          <param name="red" type="unsigned char" default="0"/>
          <param name="green" type="unsigned char" default="0"/>
          <param name="blue" type="unsigned char" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="NamedColour" overloaded="no">
        <autodoc>NamedColour(String colorName) -&gt; Colour</autodoc>
        <docstring>Constructs a colour object using a colour name listed in wx.TheColourDatabase.</docstring>
        <paramlist>
          <param name="colorName" type="String" default=""/>
        </paramlist>
      </constructor>
      <constructor name="ColourRGB" overloaded="no">
        <autodoc>ColourRGB(unsigned long colRGB) -&gt; Colour</autodoc>
        <docstring>Constructs a colour from a packed RGB value.</docstring>
        <paramlist>
          <param name="colRGB" type="unsigned long" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxColour" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Red" type="unsigned char" overloaded="no">
        <autodoc>Red() -&gt; unsigned char</autodoc>
        <docstring>Returns the red intensity.</docstring>
      </method>
      <method name="Green" type="unsigned char" overloaded="no">
        <autodoc>Green() -&gt; unsigned char</autodoc>
        <docstring>Returns the green intensity.</docstring>
      </method>
      <method name="Blue" type="unsigned char" overloaded="no">
        <autodoc>Blue() -&gt; unsigned char</autodoc>
        <docstring>Returns the blue intensity.</docstring>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
        <docstring>Returns True if the colour object is valid (the colour has been
initialised with RGB values).</docstring>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(unsigned char red, unsigned char green, unsigned char blue)</autodoc>
        <docstring>Sets the RGB intensity values.</docstring>
        <paramlist>
          <param name="red" type="unsigned char" default=""/>
          <param name="green" type="unsigned char" default=""/>
          <param name="blue" type="unsigned char" default=""/>
        </paramlist>
      </method>
      <method name="SetRGB" type="" overloaded="no">
        <autodoc>SetRGB(unsigned long colRGB)</autodoc>
        <docstring>Sets the RGB intensity values from a packed RGB value.</docstring>
        <paramlist>
          <param name="colRGB" type="unsigned long" default=""/>
        </paramlist>
      </method>
      <method name="SetFromName" type="" overloaded="no">
        <autodoc>SetFromName(String colourName)</autodoc>
        <docstring>Sets the RGB intensity values using a colour name listed in wx.TheColourDatabase.</docstring>
        <paramlist>
          <param name="colourName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetPixel" type="long" overloaded="no">
        <autodoc>GetPixel() -&gt; long</autodoc>
        <docstring>Returns a pixel value which is platform-dependent. On Windows, a
COLORREF is returned. On X, an allocated pixel value is returned.
-1 is returned if the pixel is invalid (on X, unallocated).</docstring>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Colour colour) -&gt; bool</autodoc>
        <docstring>Compare colours for equality</docstring>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Colour colour) -&gt; bool</autodoc>
        <docstring>Compare colours for inequality</docstring>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="Get" type="PyObject" overloaded="no">
        <autodoc>Get() -&gt; (r, g, b)</autodoc>
        <docstring>Returns the RGB intensity values as a tuple.</docstring>
      </method>
      <method name="GetRGB" type="unsigned long" overloaded="no">
        <autodoc>GetRGB() -&gt; unsigned long</autodoc>
        <docstring>Return the colour as a packed RGB value</docstring>
      </method>
    </class>
    <pythoncode>
    Color = Colour
    NamedColor = NamedColour
    ColorRGB = ColourRGB
</pythoncode>
    <class name="Palette" oldname="wxPalette" module="gdi">
      <baseclass name="GDIObject"/>
      <constructor name="Palette" overloaded="no">
        <autodoc>__init__(int n, unsigned char red, unsigned char green, unsigned char blue) -&gt; Palette</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="red" type="unsigned char" default=""/>
          <param name="green" type="unsigned char" default=""/>
          <param name="blue" type="unsigned char" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxPalette" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetPixel" type="int" overloaded="no">
        <autodoc>GetPixel(byte red, byte green, byte blue) -&gt; int</autodoc>
        <paramlist>
          <param name="red" type="byte" default=""/>
          <param name="green" type="byte" default=""/>
          <param name="blue" type="byte" default=""/>
        </paramlist>
      </method>
      <method name="GetRGB" type="bool" overloaded="no">
        <autodoc>GetRGB(int pixel) -&gt; (R,G,B)</autodoc>
        <paramlist>
          <param name="pixel" type="int" default=""/>
          <param name="OUTPUT" type="byte" default=""/>
          <param name="OUTPUT" type="byte" default=""/>
          <param name="OUTPUT" type="byte" default=""/>
        </paramlist>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Pen" oldname="wxPen" module="gdi">
      <baseclass name="GDIObject"/>
      <constructor name="Pen" overloaded="no">
        <autodoc>__init__(Colour colour, int width=1, int style=SOLID) -&gt; Pen</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
          <param name="width" type="int" default="1"/>
          <param name="style" type="int" default="wxSOLID"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPen" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetCap" type="int" overloaded="no">
        <autodoc>GetCap() -&gt; int</autodoc>
      </method>
      <method name="GetColour" type="Colour" overloaded="no">
        <autodoc>GetColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetJoin" type="int" overloaded="no">
        <autodoc>GetJoin() -&gt; int</autodoc>
      </method>
      <method name="GetStyle" type="int" overloaded="no">
        <autodoc>GetStyle() -&gt; int</autodoc>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="SetCap" type="" overloaded="no">
        <autodoc>SetCap(int cap_style)</autodoc>
        <paramlist>
          <param name="cap_style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(Colour colour)</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetJoin" type="" overloaded="no">
        <autodoc>SetJoin(int join_style)</autodoc>
        <paramlist>
          <param name="join_style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetStyle" type="" overloaded="no">
        <autodoc>SetStyle(int style)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDashes" type="" overloaded="no">
        <autodoc>SetDashes(int dashes, wxDash dashes_array)</autodoc>
        <paramlist>
          <param name="dashes" type="int" default=""/>
          <param name="dashes_array" type="wxDash" default=""/>
        </paramlist>
      </method>
      <method name="GetDashes" type="PyObject" overloaded="no">
        <autodoc>GetDashes() -&gt; PyObject</autodoc>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Pen other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Pen other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="GetDashCount" type="int" overloaded="no">
        <autodoc>GetDashCount() -&gt; int</autodoc>
      </method>
    </class>
    <class name="PyPen" oldname="wxPyPen" module="gdi">
      <baseclass name="Pen"/>
      <constructor name="PyPen" overloaded="no">
        <autodoc>__init__(Colour colour, int width=1, int style=SOLID) -&gt; PyPen</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
          <param name="width" type="int" default="1"/>
          <param name="style" type="int" default="wxSOLID"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPyPen" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetDashes" type="" overloaded="no">
        <autodoc>SetDashes(int dashes, wxDash dashes_array)</autodoc>
        <paramlist>
          <param name="dashes" type="int" default=""/>
          <param name="dashes_array" type="wxDash" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode> Pen = PyPen </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Brush" oldname="wxBrush" module="gdi">
      <docstring>A brush is a drawing tool for filling in areas. It is used for painting the
background of rectangles, ellipses, etc. It has a colour and a style.</docstring>
      <baseclass name="GDIObject"/>
      <constructor name="Brush" overloaded="no">
        <autodoc>__init__(Colour colour, int style=SOLID) -&gt; Brush</autodoc>
        <docstring>Constructs a brush from a colour object and style.</docstring>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
          <param name="style" type="int" default="wxSOLID"/>
        </paramlist>
      </constructor>
      <destructor name="~wxBrush" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(Colour col)</autodoc>
        <paramlist>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetStyle" type="" overloaded="no">
        <autodoc>SetStyle(int style)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetStipple" type="" overloaded="no">
        <autodoc>SetStipple(Bitmap stipple)</autodoc>
        <paramlist>
          <param name="stipple" type="wxBitmap" default=""/>
        </paramlist>
      </method>
      <method name="GetColour" type="Colour" overloaded="no">
        <autodoc>GetColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetStyle" type="int" overloaded="no">
        <autodoc>GetStyle() -&gt; int</autodoc>
      </method>
      <method name="GetStipple" type="wxBitmap" overloaded="no">
        <autodoc>GetStipple() -&gt; Bitmap</autodoc>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="Bitmap" oldname="wxBitmap" module="gdi">
      <baseclass name="GDIObject"/>
      <constructor name="Bitmap" overloaded="no">
        <autodoc>__init__(String name, int type=BITMAP_TYPE_ANY) -&gt; Bitmap</autodoc>
        <docstring>Loads a bitmap from a file.</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="wxBitmapType" default="wxBITMAP_TYPE_ANY"/>
        </paramlist>
      </constructor>
      <constructor name="EmptyBitmap" overloaded="no">
        <autodoc>EmptyBitmap(int width, int height, int depth=-1) -&gt; Bitmap</autodoc>
        <docstring>Creates a new bitmap of the given size.  A depth of -1 indicates the depth of
the current screen or visual. Some platforms only support 1 for monochrome and
-1 for the current colour setting.</docstring>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="depth" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <constructor name="BitmapFromIcon" overloaded="no">
        <autodoc>BitmapFromIcon(Icon icon) -&gt; Bitmap</autodoc>
        <docstring>Create a new bitmap from an Icon object.</docstring>
        <paramlist>
          <param name="icon" type="wxIcon" default=""/>
        </paramlist>
      </constructor>
      <constructor name="BitmapFromImage" overloaded="no">
        <autodoc>BitmapFromImage(Image image, int depth=-1) -&gt; Bitmap</autodoc>
        <docstring>Creates bitmap object from the image. This has to be done to actually display
an image as you cannot draw an image directly on a window. The resulting
bitmap will use the provided colour depth (or that of the current system if
depth is -1) which entails that a colour reduction has to take place.</docstring>
        <paramlist>
          <param name="image" type="Image" default=""/>
          <param name="depth" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <constructor name="BitmapFromXPMData" overloaded="no">
        <autodoc>BitmapFromXPMData(PyObject listOfStrings) -&gt; Bitmap</autodoc>
        <docstring>Construct a Bitmap from a list of strings formatted as XPM data.</docstring>
        <paramlist>
          <param name="listOfStrings" type="PyObject" default=""/>
        </paramlist>
      </constructor>
      <constructor name="BitmapFromBits" overloaded="no">
        <autodoc>BitmapFromBits(PyObject bits, int width, int height, int depth=1) -&gt; Bitmap</autodoc>
        <docstring>Creates a bitmap from an array of bits.  You should only use this function for
monochrome bitmaps (depth 1) in portable programs: in this case the bits
parameter should contain an XBM image.  For other bit depths, the behaviour is
platform dependent.</docstring>
        <paramlist>
          <param name="bits" type="PyObject" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="depth" type="int" default="1"/>
        </paramlist>
      </constructor>
      <destructor name="~wxBitmap" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
        <docstring>Gets the width of the bitmap in pixels.</docstring>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
        <docstring>Gets the height of the bitmap in pixels.</docstring>
      </method>
      <method name="GetDepth" type="int" overloaded="no">
        <autodoc>GetDepth() -&gt; int</autodoc>
        <docstring>Gets the colour depth of the bitmap. A value of 1 indicates a
monochrome bitmap.</docstring>
      </method>
      <method name="ConvertToImage" type="Image" overloaded="no">
        <autodoc>ConvertToImage() -&gt; Image</autodoc>
        <docstring>Creates a platform-independent image from a platform-dependent bitmap. This
preserves mask information so that bitmaps and images can be converted back
and forth without loss in that respect.</docstring>
      </method>
      <method name="GetMask" type="wxMask" overloaded="no">
        <autodoc>GetMask() -&gt; Mask</autodoc>
        <docstring>Gets the associated mask (if any) which may have been loaded from a file
or explpicitly set for the bitmap.</docstring>
      </method>
      <method name="SetMask" type="" overloaded="no">
        <autodoc>SetMask(Mask mask)</autodoc>
        <docstring>Sets the mask for this bitmap.</docstring>
        <paramlist>
          <param name="mask" type="wxMask" default=""/>
        </paramlist>
      </method>
      <method name="SetMaskColour" type="" overloaded="no">
        <autodoc>SetMaskColour(Colour colour)</autodoc>
        <docstring>Create a Mask based on a specified colour in the Bitmap.</docstring>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetSubBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetSubBitmap(Rect rect) -&gt; Bitmap</autodoc>
        <docstring>Returns a sub bitmap of the current one as long as the rect belongs entirely
to the bitmap. This function preserves bit depth and mask information.</docstring>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="SaveFile" type="bool" overloaded="no">
        <autodoc>SaveFile(String name, int type, Palette palette=(wxPalette *) NULL) -&gt; bool</autodoc>
        <docstring>Saves a bitmap in the named file.</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="wxBitmapType" default=""/>
          <param name="palette" type="Palette" default="(wxPalette *) NULL"/>
        </paramlist>
      </method>
      <method name="LoadFile" type="bool" overloaded="no">
        <autodoc>LoadFile(String name, int type) -&gt; bool</autodoc>
        <docstring>Loads a bitmap from a file</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="wxBitmapType" default=""/>
        </paramlist>
      </method>
      <method name="CopyFromIcon" type="bool" overloaded="no">
        <autodoc>CopyFromIcon(Icon icon) -&gt; bool</autodoc>
        <paramlist>
          <param name="icon" type="wxIcon" default=""/>
        </paramlist>
      </method>
      <method name="SetHeight" type="" overloaded="no">
        <autodoc>SetHeight(int height)</autodoc>
        <docstring>Set the height property (does not affect the bitmap data).</docstring>
        <paramlist>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(int width)</autodoc>
        <docstring>Set the width property (does not affect the bitmap data).</docstring>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDepth" type="" overloaded="no">
        <autodoc>SetDepth(int depth)</autodoc>
        <docstring>Set the depth property (does not affect the bitmap data).</docstring>
        <paramlist>
          <param name="depth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Bitmap other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Bitmap other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="Bitmap" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="Mask" oldname="wxMask" module="gdi">
      <docstring>This class encapsulates a monochrome mask bitmap, where the masked area is
black and the unmasked area is white. When associated with a bitmap and drawn
in a device context, the unmasked area of the bitmap will be drawn, and the
masked area will not be drawn.</docstring>
      <baseclass name="Object"/>
      <constructor name="Mask" overloaded="no">
        <autodoc>__init__(Bitmap bitmap, Colour colour=NullColour) -&gt; Mask</autodoc>
        <docstring>Constructs a mask from a bitmap and a colour in that bitmap that indicates
the transparent portions of the mask, by default BLACK is used.</docstring>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="colour" type="Colour" default="wxNullColour"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode> MaskColour = Mask </pythoncode>
    <class name="Icon" oldname="wxIcon" module="gdi">
      <baseclass name="GDIObject"/>
      <constructor name="Icon" overloaded="no">
        <autodoc>__init__(String name, int type, int desiredWidth=-1, int desiredHeight=-1) -&gt; Icon</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="wxBitmapType" default=""/>
          <param name="desiredWidth" type="int" default="-1"/>
          <param name="desiredHeight" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <constructor name="EmptyIcon" overloaded="no">
        <autodoc>EmptyIcon() -&gt; Icon</autodoc>
      </constructor>
      <constructor name="IconFromLocation" overloaded="no">
        <autodoc>IconFromLocation(IconLocation loc) -&gt; Icon</autodoc>
        <paramlist>
          <param name="loc" type="wxIconLocation" default=""/>
        </paramlist>
      </constructor>
      <constructor name="IconFromBitmap" overloaded="no">
        <autodoc>IconFromBitmap(Bitmap bmp) -&gt; Icon</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
        </paramlist>
      </constructor>
      <constructor name="IconFromXPMData" overloaded="no">
        <autodoc>IconFromXPMData(PyObject listOfStrings) -&gt; Icon</autodoc>
        <paramlist>
          <param name="listOfStrings" type="PyObject" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxIcon" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="LoadFile" type="bool" overloaded="no">
        <autodoc>LoadFile(String name, int type) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="type" type="wxBitmapType" default=""/>
        </paramlist>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
      </method>
      <method name="GetDepth" type="int" overloaded="no">
        <autodoc>GetDepth() -&gt; int</autodoc>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(int w)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetHeight" type="" overloaded="no">
        <autodoc>SetHeight(int h)</autodoc>
        <paramlist>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDepth" type="" overloaded="no">
        <autodoc>SetDepth(int d)</autodoc>
        <paramlist>
          <param name="d" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CopyFromBitmap" type="" overloaded="no">
        <autodoc>CopyFromBitmap(Bitmap bmp)</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="IconLocation" oldname="wxIconLocation" module="gdi">
      <constructor name="IconLocation" overloaded="no">
        <autodoc>__init__(String filename=&amp;wxPyEmptyString, int num=0) -&gt; IconLocation</autodoc>
        <paramlist>
          <param name="filename" type="String" default="&amp;wxPyEmptyString"/>
          <param name="num" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxIconLocation" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="SetFileName" type="" overloaded="no">
        <autodoc>SetFileName(String filename)</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetFileName" type="String" overloaded="no">
        <autodoc>GetFileName() -&gt; String</autodoc>
      </method>
      <method name="SetIndex" type="" overloaded="no">
        <autodoc>SetIndex(int num)</autodoc>
        <paramlist>
          <param name="num" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetIndex" type="int" overloaded="no">
        <autodoc>GetIndex() -&gt; int</autodoc>
      </method>
    </class>
    <class name="IconBundle" oldname="wxIconBundle" module="gdi">
      <constructor name="IconBundle" overloaded="no">
        <autodoc>__init__() -&gt; IconBundle</autodoc>
      </constructor>
      <constructor name="IconBundleFromFile" overloaded="no">
        <autodoc>IconBundleFromFile(String file, long type) -&gt; IconBundle</autodoc>
        <paramlist>
          <param name="file" type="String" default=""/>
          <param name="type" type="long" default=""/>
        </paramlist>
      </constructor>
      <constructor name="IconBundleFromIcon" overloaded="no">
        <autodoc>IconBundleFromIcon(Icon icon) -&gt; IconBundle</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxIconBundle" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="AddIcon" type="" overloaded="no">
        <autodoc>AddIcon(Icon icon)</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
        </paramlist>
      </method>
      <method name="AddIconFromFile" type="" overloaded="no">
        <autodoc>AddIconFromFile(String file, long type)</autodoc>
        <paramlist>
          <param name="file" type="String" default=""/>
          <param name="type" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetIcon" type="Icon" overloaded="no">
        <autodoc>GetIcon(Size size) -&gt; Icon</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="Cursor" oldname="wxCursor" module="gdi">
      <docstring>A cursor is a small bitmap usually used for denoting where the
mouse pointer is, with a picture that might indicate the
interpretation of a mouse click.

A single cursor object may be used in many windows (any subwindow
type). The wxWindows convention is to set the cursor for a
window, as in X, rather than to set it globally as in MS Windows,
although a global wx.SetCursor function is also available for use
on MS Windows.</docstring>
      <baseclass name="GDIObject"/>
      <constructor name="Cursor" overloaded="no">
        <autodoc>__init__(String cursorName, long type, int hotSpotX=0, int hotSpotY=0) -&gt; Cursor</autodoc>
        <docstring>Construct a Cursor from a file.  Specify the type of file using
wx.BITAMP_TYPE* constants, and specify the hotspot if not using a
.cur file.

This cursor is not available on wxGTK, use wx.StockCursor,
wx.CursorFromImage, or wx.CursorFromBits instead.</docstring>
        <paramlist>
          <param name="cursorName" type="String" default=""/>
          <param name="type" type="long" default=""/>
          <param name="hotSpotX" type="int" default="0"/>
          <param name="hotSpotY" type="int" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="StockCursor" overloaded="no">
        <autodoc>StockCursor(int id) -&gt; Cursor</autodoc>
        <docstring>Create a cursor using one of the stock cursors.  Note that not
all cursors are available on all platforms.</docstring>
        <refdoc>
  Stock Cursor IDs

    wx.CURSOR_ARROW             A standard arrow cursor.
    wx.CURSOR_RIGHT_ARROW       A standard arrow cursor pointing to the right.
    wx.CURSOR_BLANK             Transparent cursor.
    wx.CURSOR_BULLSEYE          Bullseye cursor.
    wx.CURSOR_CHAR              Rectangular character cursor.
    wx.CURSOR_CROSS             A cross cursor.
    wx.CURSOR_HAND              A hand cursor.
    wx.CURSOR_IBEAM             An I-beam cursor (vertical line).
    wx.CURSOR_LEFT_BUTTON       Represents a mouse with the left button depressed.
    wx.CURSOR_MAGNIFIER         A magnifier icon.
    wx.CURSOR_MIDDLE_BUTTON     Represents a mouse with the middle button depressed.
    wx.CURSOR_NO_ENTRY          A no-entry sign cursor.
    wx.CURSOR_PAINT_BRUSH       A paintbrush cursor.
    wx.CURSOR_PENCIL            A pencil cursor.
    wx.CURSOR_POINT_LEFT        A cursor that points left.
    wx.CURSOR_POINT_RIGHT       A cursor that points right.
    wx.CURSOR_QUESTION_ARROW    An arrow and question mark.
    wx.CURSOR_RIGHT_BUTTON      Represents a mouse with the right button depressed.
    wx.CURSOR_SIZENESW          A sizing cursor pointing NE-SW.
    wx.CURSOR_SIZENS            A sizing cursor pointing N-S.
    wx.CURSOR_SIZENWSE          A sizing cursor pointing NW-SE.
    wx.CURSOR_SIZEWE            A sizing cursor pointing W-E.
    wx.CURSOR_SIZING            A general sizing cursor.
    wx.CURSOR_SPRAYCAN          A spraycan cursor.
    wx.CURSOR_WAIT              A wait cursor.
    wx.CURSOR_WATCH             A watch cursor.
    wx.CURSOR_ARROWWAIT         A cursor with both an arrow and an hourglass, (windows.)

</refdoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </constructor>
      <constructor name="CursorFromImage" overloaded="no">
        <autodoc>CursorFromImage(Image image) -&gt; Cursor</autodoc>
        <docstring>Constructs a cursor from a wxImage. The cursor is monochrome,
colors with the RGB elements all greater than 127 will be
foreground, colors less than this background. The mask (if any)
will be used as transparent.

In MSW the foreground will be white and the background black. The
cursor is resized to 32x32 In GTK, the two most frequent colors
will be used for foreground and background. The cursor will be
displayed at the size of the image. On MacOS the cursor is
resized to 16x16 and currently only shown as black/white (mask
respected).</docstring>
        <paramlist>
          <param name="image" type="Image" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxCursor" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Region" oldname="wxRegion" module="gdi">
      <baseclass name="GDIObject"/>
      <constructor name="Region" overloaded="no">
        <autodoc>__init__(int x=0, int y=0, int width=0, int height=0) -&gt; Region</autodoc>
        <paramlist>
          <param name="x" type="int" default="0"/>
          <param name="y" type="int" default="0"/>
          <param name="width" type="int" default="0"/>
          <param name="height" type="int" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="RegionFromBitmap" overloaded="no">
        <autodoc>RegionFromBitmap(Bitmap bmp, Colour transColour=NullColour, int tolerance=0) -&gt; Region</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
          <param name="transColour" type="Colour" default="wxNullColour"/>
          <param name="tolerance" type="int" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="RegionFromPoints" overloaded="no">
        <autodoc>RegionFromPoints(int points, Point points_array, int fillStyle=WINDING_RULE) -&gt; Region</autodoc>
        <paramlist>
          <param name="points" type="int" default=""/>
          <param name="points_array" type="Point" default=""/>
          <param name="fillStyle" type="int" default="wxWINDING_RULE"/>
        </paramlist>
      </constructor>
      <destructor name="~wxRegion" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="Offset" type="bool" overloaded="no">
        <autodoc>Offset(int x, int y) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Contains" type="wxRegionContain" overloaded="no">
        <autodoc>Contains(int x, int y) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ContainsPoint" type="wxRegionContain" overloaded="no">
        <autodoc>ContainsPoint(Point pt) -&gt; int</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="ContainsRect" type="wxRegionContain" overloaded="no">
        <autodoc>ContainsRect(Rect rect) -&gt; int</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="ContainsRectDim" type="wxRegionContain" overloaded="no">
        <autodoc>ContainsRectDim(int x, int y, int w, int h) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="w" type="int" default=""/>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBox" type="Rect" overloaded="no">
        <autodoc>GetBox() -&gt; Rect</autodoc>
      </method>
      <method name="Intersect" type="bool" overloaded="no">
        <autodoc>Intersect(int x, int y, int width, int height) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IntersectRect" type="bool" overloaded="no">
        <autodoc>IntersectRect(Rect rect) -&gt; bool</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="IntersectRegion" type="bool" overloaded="no">
        <autodoc>IntersectRegion(Region region) -&gt; bool</autodoc>
        <paramlist>
          <param name="region" type="Region" default=""/>
        </paramlist>
      </method>
      <method name="IsEmpty" type="bool" overloaded="no">
        <autodoc>IsEmpty() -&gt; bool</autodoc>
      </method>
      <method name="Union" type="bool" overloaded="no">
        <autodoc>Union(int x, int y, int width, int height) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="UnionRect" type="bool" overloaded="no">
        <autodoc>UnionRect(Rect rect) -&gt; bool</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="UnionRegion" type="bool" overloaded="no">
        <autodoc>UnionRegion(Region region) -&gt; bool</autodoc>
        <paramlist>
          <param name="region" type="Region" default=""/>
        </paramlist>
      </method>
      <method name="Subtract" type="bool" overloaded="no">
        <autodoc>Subtract(int x, int y, int width, int height) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SubtractRect" type="bool" overloaded="no">
        <autodoc>SubtractRect(Rect rect) -&gt; bool</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="SubtractRegion" type="bool" overloaded="no">
        <autodoc>SubtractRegion(Region region) -&gt; bool</autodoc>
        <paramlist>
          <param name="region" type="Region" default=""/>
        </paramlist>
      </method>
      <method name="Xor" type="bool" overloaded="no">
        <autodoc>Xor(int x, int y, int width, int height) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="XorRect" type="bool" overloaded="no">
        <autodoc>XorRect(Rect rect) -&gt; bool</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="XorRegion" type="bool" overloaded="no">
        <autodoc>XorRegion(Region region) -&gt; bool</autodoc>
        <paramlist>
          <param name="region" type="Region" default=""/>
        </paramlist>
      </method>
      <method name="ConvertToBitmap" type="Bitmap" overloaded="no">
        <autodoc>ConvertToBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="UnionBitmap" type="bool" overloaded="no">
        <autodoc>UnionBitmap(Bitmap bmp, Colour transColour=NullColour, int tolerance=0) -&gt; bool</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
          <param name="transColour" type="Colour" default="wxNullColour"/>
          <param name="tolerance" type="int" default="0"/>
        </paramlist>
      </method>
    </class>
    <class name="RegionIterator" oldname="wxRegionIterator" module="gdi">
      <baseclass name="Object"/>
      <constructor name="RegionIterator" overloaded="no">
        <autodoc>__init__(Region region) -&gt; RegionIterator</autodoc>
        <paramlist>
          <param name="region" type="Region" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxRegionIterator" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetX" type="int" overloaded="no">
        <autodoc>GetX() -&gt; int</autodoc>
      </method>
      <method name="GetY" type="int" overloaded="no">
        <autodoc>GetY() -&gt; int</autodoc>
      </method>
      <method name="GetW" type="int" overloaded="no">
        <autodoc>GetW() -&gt; int</autodoc>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="GetH" type="int" overloaded="no">
        <autodoc>GetH() -&gt; int</autodoc>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
      </method>
      <method name="GetRect" type="Rect" overloaded="no">
        <autodoc>GetRect() -&gt; Rect</autodoc>
      </method>
      <method name="HaveRects" type="bool" overloaded="no">
        <autodoc>HaveRects() -&gt; bool</autodoc>
      </method>
      <method name="Reset" type="" overloaded="no">
        <autodoc>Reset()</autodoc>
      </method>
      <method name="Next" type="" overloaded="no">
        <autodoc>Next()</autodoc>
      </method>
      <method name="__nonzero__" type="bool" overloaded="no">
        <autodoc>__nonzero__() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="NativeFontInfo" oldname="wxNativeFontInfo" module="gdi">
      <constructor name="NativeFontInfo" overloaded="no">
        <autodoc>__init__() -&gt; NativeFontInfo</autodoc>
      </constructor>
      <destructor name="~wxNativeFontInfo" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Init" type="" overloaded="no">
        <autodoc>Init()</autodoc>
      </method>
      <method name="InitFromFont" type="" overloaded="no">
        <autodoc>InitFromFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="wxFont" default=""/>
        </paramlist>
      </method>
      <method name="GetPointSize" type="int" overloaded="no">
        <autodoc>GetPointSize() -&gt; int</autodoc>
      </method>
      <method name="GetStyle" type="wxFontStyle" overloaded="no">
        <autodoc>GetStyle() -&gt; int</autodoc>
      </method>
      <method name="GetWeight" type="wxFontWeight" overloaded="no">
        <autodoc>GetWeight() -&gt; int</autodoc>
      </method>
      <method name="GetUnderlined" type="bool" overloaded="no">
        <autodoc>GetUnderlined() -&gt; bool</autodoc>
      </method>
      <method name="GetFaceName" type="String" overloaded="no">
        <autodoc>GetFaceName() -&gt; String</autodoc>
      </method>
      <method name="GetFamily" type="wxFontFamily" overloaded="no">
        <autodoc>GetFamily() -&gt; int</autodoc>
      </method>
      <method name="GetEncoding" type="wxFontEncoding" overloaded="no">
        <autodoc>GetEncoding() -&gt; int</autodoc>
      </method>
      <method name="SetPointSize" type="" overloaded="no">
        <autodoc>SetPointSize(int pointsize)</autodoc>
        <paramlist>
          <param name="pointsize" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetStyle" type="" overloaded="no">
        <autodoc>SetStyle(int style)</autodoc>
        <paramlist>
          <param name="style" type="wxFontStyle" default=""/>
        </paramlist>
      </method>
      <method name="SetWeight" type="" overloaded="no">
        <autodoc>SetWeight(int weight)</autodoc>
        <paramlist>
          <param name="weight" type="wxFontWeight" default=""/>
        </paramlist>
      </method>
      <method name="SetUnderlined" type="" overloaded="no">
        <autodoc>SetUnderlined(bool underlined)</autodoc>
        <paramlist>
          <param name="underlined" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetFaceName" type="" overloaded="no">
        <autodoc>SetFaceName(String facename)</autodoc>
        <paramlist>
          <param name="facename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetFamily" type="" overloaded="no">
        <autodoc>SetFamily(int family)</autodoc>
        <paramlist>
          <param name="family" type="wxFontFamily" default=""/>
        </paramlist>
      </method>
      <method name="SetEncoding" type="" overloaded="no">
        <autodoc>SetEncoding(int encoding)</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default=""/>
        </paramlist>
      </method>
      <method name="FromString" type="bool" overloaded="no">
        <autodoc>FromString(String s) -&gt; bool</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ToString" type="String" overloaded="no">
        <autodoc>ToString() -&gt; String</autodoc>
      </method>
      <method name="__str__" type="String" overloaded="no">
        <autodoc>__str__() -&gt; String</autodoc>
      </method>
      <method name="FromUserString" type="bool" overloaded="no">
        <autodoc>FromUserString(String s) -&gt; bool</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ToUserString" type="String" overloaded="no">
        <autodoc>ToUserString() -&gt; String</autodoc>
      </method>
    </class>
    <class name="NativeEncodingInfo" oldname="wxNativeEncodingInfo" module="gdi">
      <constructor name="NativeEncodingInfo" overloaded="no">
        <autodoc>__init__() -&gt; NativeEncodingInfo</autodoc>
      </constructor>
      <destructor name="~wxNativeEncodingInfo" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <property name="facename" type="String" readonly="no"/>
      <property name="encoding" type="wxFontEncoding" readonly="no"/>
      <method name="FromString" type="bool" overloaded="no">
        <autodoc>FromString(String s) -&gt; bool</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ToString" type="String" overloaded="no">
        <autodoc>ToString() -&gt; String</autodoc>
      </method>
    </class>
    <method name="GetNativeFontEncoding" oldname="wxGetNativeFontEncoding" type="NativeEncodingInfo" overloaded="no">
      <autodoc>GetNativeFontEncoding(int encoding) -&gt; NativeEncodingInfo</autodoc>
      <paramlist>
        <param name="encoding" type="wxFontEncoding" default=""/>
      </paramlist>
    </method>
    <method name="TestFontEncoding" oldname="wxTestFontEncoding" type="bool" overloaded="no">
      <autodoc>TestFontEncoding(NativeEncodingInfo info) -&gt; bool</autodoc>
      <paramlist>
        <param name="info" type="NativeEncodingInfo" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="FontMapper" oldname="wxFontMapper" module="gdi">
      <constructor name="FontMapper" overloaded="no">
        <autodoc>__init__() -&gt; FontMapper</autodoc>
      </constructor>
      <destructor name="~wxFontMapper" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <staticmethod name="Get" type="FontMapper" overloaded="no">
        <autodoc>Get() -&gt; FontMapper</autodoc>
      </staticmethod>
      <staticmethod name="Set" type="FontMapper" overloaded="no">
        <autodoc>Set(FontMapper mapper) -&gt; FontMapper</autodoc>
        <paramlist>
          <param name="mapper" type="FontMapper" default=""/>
        </paramlist>
      </staticmethod>
      <method name="CharsetToEncoding" type="wxFontEncoding" overloaded="no">
        <autodoc>CharsetToEncoding(String charset, bool interactive=True) -&gt; int</autodoc>
        <paramlist>
          <param name="charset" type="String" default=""/>
          <param name="interactive" type="bool" default="True"/>
        </paramlist>
      </method>
      <staticmethod name="GetSupportedEncodingsCount" type="size_t" overloaded="no">
        <autodoc>GetSupportedEncodingsCount() -&gt; size_t</autodoc>
      </staticmethod>
      <staticmethod name="GetEncoding" type="wxFontEncoding" overloaded="no">
        <autodoc>GetEncoding(size_t n) -&gt; int</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetEncodingName" type="String" overloaded="no">
        <autodoc>GetEncodingName(int encoding) -&gt; String</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetEncodingDescription" type="String" overloaded="no">
        <autodoc>GetEncodingDescription(int encoding) -&gt; String</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default=""/>
        </paramlist>
      </staticmethod>
      <method name="SetConfig" type="" overloaded="no">
        <autodoc>SetConfig(ConfigBase config)</autodoc>
        <paramlist>
          <param name="config" type="wxConfigBase" default=""/>
        </paramlist>
      </method>
      <method name="SetConfigPath" type="" overloaded="no">
        <autodoc>SetConfigPath(String prefix)</autodoc>
        <paramlist>
          <param name="prefix" type="String" default=""/>
        </paramlist>
      </method>
      <staticmethod name="GetDefaultConfigPath" type="String" overloaded="no">
        <autodoc>GetDefaultConfigPath() -&gt; String</autodoc>
      </staticmethod>
      <method name="GetAltForEncoding" type="PyObject" overloaded="no">
        <autodoc>GetAltForEncoding(int encoding, String facename=EmptyString, bool interactive=True) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default=""/>
          <param name="facename" type="String" default="wxPyEmptyString"/>
          <param name="interactive" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="IsEncodingAvailable" type="bool" overloaded="no">
        <autodoc>IsEncodingAvailable(int encoding, String facename=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default=""/>
          <param name="facename" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="SetDialogParent" type="" overloaded="no">
        <autodoc>SetDialogParent(Window parent)</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="SetDialogTitle" type="" overloaded="no">
        <autodoc>SetDialogTitle(String title)</autodoc>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Font" oldname="wxFont" module="gdi">
      <baseclass name="GDIObject"/>
      <constructor name="Font" overloaded="no">
        <autodoc>__init__(int pointSize, int family, int style, int weight, bool underline=False, 
    String face=EmptyString, 
    int encoding=FONTENCODING_DEFAULT) -&gt; Font</autodoc>
        <paramlist>
          <param name="pointSize" type="int" default=""/>
          <param name="family" type="int" default=""/>
          <param name="style" type="int" default=""/>
          <param name="weight" type="int" default=""/>
          <param name="underline" type="bool" default="False"/>
          <param name="face" type="String" default="wxPyEmptyString"/>
          <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_DEFAULT"/>
        </paramlist>
      </constructor>
      <constructor name="FontFromNativeInfo" overloaded="no">
        <autodoc>FontFromNativeInfo(NativeFontInfo info) -&gt; Font</autodoc>
        <paramlist>
          <param name="info" type="NativeFontInfo" default=""/>
        </paramlist>
      </constructor>
      <constructor name="FontFromNativeInfoString" overloaded="no">
        <autodoc>FontFromNativeInfoString(String info) -&gt; Font</autodoc>
        <paramlist>
          <param name="info" type="String" default=""/>
        </paramlist>
      </constructor>
      <constructor name="Font2" overloaded="no">
        <autodoc>Font2(int pointSize, int family, int flags=FONTFLAG_DEFAULT, 
    String face=EmptyString, int encoding=FONTENCODING_DEFAULT) -&gt; Font</autodoc>
        <paramlist>
          <param name="pointSize" type="int" default=""/>
          <param name="family" type="wxFontFamily" default=""/>
          <param name="flags" type="int" default="wxFONTFLAG_DEFAULT"/>
          <param name="face" type="String" default="wxPyEmptyString"/>
          <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_DEFAULT"/>
        </paramlist>
      </constructor>
      <destructor name="~wxFont" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(Font other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(Font other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="GetPointSize" type="int" overloaded="no">
        <autodoc>GetPointSize() -&gt; int</autodoc>
      </method>
      <method name="GetFamily" type="int" overloaded="no">
        <autodoc>GetFamily() -&gt; int</autodoc>
      </method>
      <method name="GetStyle" type="int" overloaded="no">
        <autodoc>GetStyle() -&gt; int</autodoc>
      </method>
      <method name="GetWeight" type="int" overloaded="no">
        <autodoc>GetWeight() -&gt; int</autodoc>
      </method>
      <method name="GetUnderlined" type="bool" overloaded="no">
        <autodoc>GetUnderlined() -&gt; bool</autodoc>
      </method>
      <method name="GetFaceName" type="String" overloaded="no">
        <autodoc>GetFaceName() -&gt; String</autodoc>
      </method>
      <method name="GetEncoding" type="wxFontEncoding" overloaded="no">
        <autodoc>GetEncoding() -&gt; int</autodoc>
      </method>
      <method name="GetNativeFontInfo" type="NativeFontInfo" overloaded="no">
        <autodoc>GetNativeFontInfo() -&gt; NativeFontInfo</autodoc>
      </method>
      <method name="IsFixedWidth" type="bool" overloaded="no">
        <autodoc>IsFixedWidth() -&gt; bool</autodoc>
      </method>
      <method name="GetNativeFontInfoDesc" type="String" overloaded="no">
        <autodoc>GetNativeFontInfoDesc() -&gt; String</autodoc>
      </method>
      <method name="GetNativeFontInfoUserDesc" type="String" overloaded="no">
        <autodoc>GetNativeFontInfoUserDesc() -&gt; String</autodoc>
      </method>
      <method name="SetPointSize" type="" overloaded="no">
        <autodoc>SetPointSize(int pointSize)</autodoc>
        <paramlist>
          <param name="pointSize" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFamily" type="" overloaded="no">
        <autodoc>SetFamily(int family)</autodoc>
        <paramlist>
          <param name="family" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetStyle" type="" overloaded="no">
        <autodoc>SetStyle(int style)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWeight" type="" overloaded="no">
        <autodoc>SetWeight(int weight)</autodoc>
        <paramlist>
          <param name="weight" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFaceName" type="" overloaded="no">
        <autodoc>SetFaceName(String faceName)</autodoc>
        <paramlist>
          <param name="faceName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetUnderlined" type="" overloaded="no">
        <autodoc>SetUnderlined(bool underlined)</autodoc>
        <paramlist>
          <param name="underlined" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetEncoding" type="" overloaded="no">
        <autodoc>SetEncoding(int encoding)</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default=""/>
        </paramlist>
      </method>
      <method name="SetNativeFontInfo" type="" overloaded="no">
        <autodoc>SetNativeFontInfo(NativeFontInfo info)</autodoc>
        <paramlist>
          <param name="info" type="NativeFontInfo" default=""/>
        </paramlist>
      </method>
      <method name="SetNativeFontInfoFromString" type="" overloaded="no">
        <autodoc>SetNativeFontInfoFromString(String info)</autodoc>
        <paramlist>
          <param name="info" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetNativeFontInfoUserDesc" type="" overloaded="no">
        <autodoc>SetNativeFontInfoUserDesc(String info)</autodoc>
        <paramlist>
          <param name="info" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetFamilyString" type="String" overloaded="no">
        <autodoc>GetFamilyString() -&gt; String</autodoc>
      </method>
      <method name="GetStyleString" type="String" overloaded="no">
        <autodoc>GetStyleString() -&gt; String</autodoc>
      </method>
      <method name="GetWeightString" type="String" overloaded="no">
        <autodoc>GetWeightString() -&gt; String</autodoc>
      </method>
      <method name="SetNoAntiAliasing" type="" overloaded="no">
        <autodoc>SetNoAntiAliasing(bool no=True)</autodoc>
        <paramlist>
          <param name="no" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetNoAntiAliasing" type="bool" overloaded="no">
        <autodoc>GetNoAntiAliasing() -&gt; bool</autodoc>
      </method>
      <staticmethod name="GetDefaultEncoding" type="wxFontEncoding" overloaded="no">
        <autodoc>GetDefaultEncoding() -&gt; int</autodoc>
      </staticmethod>
      <staticmethod name="SetDefaultEncoding" type="" overloaded="no">
        <autodoc>SetDefaultEncoding(int encoding)</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="FontEnumerator" oldname="wxPyFontEnumerator" module="gdi">
      <constructor name="wxPyFontEnumerator" overloaded="no">
        <autodoc>__init__() -&gt; FontEnumerator</autodoc>
      </constructor>
      <destructor name="~wxPyFontEnumerator" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class, bool incref)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
          <param name="incref" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnumerateFacenames" type="bool" overloaded="no">
        <autodoc>EnumerateFacenames(int encoding=FONTENCODING_SYSTEM, bool fixedWidthOnly=False) -&gt; bool</autodoc>
        <paramlist>
          <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_SYSTEM"/>
          <param name="fixedWidthOnly" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="EnumerateEncodings" type="bool" overloaded="no">
        <autodoc>EnumerateEncodings(String facename=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="facename" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="GetEncodings" type="PyObject" overloaded="no">
        <autodoc>GetEncodings() -&gt; PyObject</autodoc>
      </method>
      <method name="GetFacenames" type="PyObject" overloaded="no">
        <autodoc>GetFacenames() -&gt; PyObject</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="LanguageInfo" oldname="wxLanguageInfo" module="gdi">
      <property name="Language" type="int" readonly="no"/>
      <property name="CanonicalName" type="String" readonly="no"/>
      <property name="Description" type="String" readonly="no"/>
    </class>
    <class name="Locale" oldname="wxLocale" module="gdi">
      <constructor name="Locale" overloaded="no">
        <autodoc>__init__(int language=LANGUAGE_DEFAULT, int flags=wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING) -&gt; Locale</autodoc>
        <paramlist>
          <param name="language" type="int" default="wxLANGUAGE_DEFAULT"/>
          <param name="flags" type="int" default="wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING"/>
        </paramlist>
      </constructor>
      <destructor name="~wxLocale" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Init1" type="bool" overloaded="no">
        <autodoc>Init1(String szName, String szShort=EmptyString, String szLocale=EmptyString, 
    bool bLoadDefault=True, 
    bool bConvertEncoding=False) -&gt; bool</autodoc>
        <paramlist>
          <param name="szName" type="String" default=""/>
          <param name="szShort" type="String" default="wxPyEmptyString"/>
          <param name="szLocale" type="String" default="wxPyEmptyString"/>
          <param name="bLoadDefault" type="bool" default="True"/>
          <param name="bConvertEncoding" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="Init2" type="bool" overloaded="no">
        <autodoc>Init2(int language=LANGUAGE_DEFAULT, int flags=wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING) -&gt; bool</autodoc>
        <paramlist>
          <param name="language" type="int" default="wxLANGUAGE_DEFAULT"/>
          <param name="flags" type="int" default="wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING"/>
        </paramlist>
      </method>
      <staticmethod name="GetSystemLanguage" type="int" overloaded="no">
        <autodoc>GetSystemLanguage() -&gt; int</autodoc>
      </staticmethod>
      <staticmethod name="GetSystemEncoding" type="wxFontEncoding" overloaded="no">
        <autodoc>GetSystemEncoding() -&gt; int</autodoc>
      </staticmethod>
      <staticmethod name="GetSystemEncodingName" type="String" overloaded="no">
        <autodoc>GetSystemEncodingName() -&gt; String</autodoc>
      </staticmethod>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="GetLocale" type="String" overloaded="no">
        <autodoc>GetLocale() -&gt; String</autodoc>
      </method>
      <method name="GetLanguage" type="int" overloaded="no">
        <autodoc>GetLanguage() -&gt; int</autodoc>
      </method>
      <method name="GetSysName" type="String" overloaded="no">
        <autodoc>GetSysName() -&gt; String</autodoc>
      </method>
      <method name="GetCanonicalName" type="String" overloaded="no">
        <autodoc>GetCanonicalName() -&gt; String</autodoc>
      </method>
      <staticmethod name="AddCatalogLookupPathPrefix" type="" overloaded="no">
        <autodoc>AddCatalogLookupPathPrefix(String prefix)</autodoc>
        <paramlist>
          <param name="prefix" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <method name="AddCatalog" type="bool" overloaded="no">
        <autodoc>AddCatalog(String szDomain) -&gt; bool</autodoc>
        <paramlist>
          <param name="szDomain" type="String" default=""/>
        </paramlist>
      </method>
      <method name="IsLoaded" type="bool" overloaded="no">
        <autodoc>IsLoaded(String szDomain) -&gt; bool</autodoc>
        <paramlist>
          <param name="szDomain" type="String" default=""/>
        </paramlist>
      </method>
      <staticmethod name="GetLanguageInfo" type="LanguageInfo" overloaded="no">
        <autodoc>GetLanguageInfo(int lang) -&gt; LanguageInfo</autodoc>
        <paramlist>
          <param name="lang" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetLanguageName" type="String" overloaded="no">
        <autodoc>GetLanguageName(int lang) -&gt; String</autodoc>
        <paramlist>
          <param name="lang" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="FindLanguageInfo" type="LanguageInfo" overloaded="no">
        <autodoc>FindLanguageInfo(String locale) -&gt; LanguageInfo</autodoc>
        <paramlist>
          <param name="locale" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="AddLanguage" type="" overloaded="no">
        <autodoc>AddLanguage(LanguageInfo info)</autodoc>
        <paramlist>
          <param name="info" type="LanguageInfo" default=""/>
        </paramlist>
      </staticmethod>
      <method name="GetString" type="String" overloaded="no">
        <autodoc>GetString(String szOrigString, String szDomain=EmptyString) -&gt; String</autodoc>
        <paramlist>
          <param name="szOrigString" type="String" default=""/>
          <param name="szDomain" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
    </class>
    <method name="GetLocale" oldname="wxGetLocale" type="Locale" overloaded="no">
      <autodoc>GetLocale() -&gt; Locale</autodoc>
    </method>
    <method name="GetTranslation" oldname="wxGetTranslation" type="String" overloaded="yes">
      <paramlist>
        <param name="str" type="String" default=""/>
      </paramlist>
    </method>
    <method name="GetTranslation" oldname="wxGetTranslation" type="String" overloaded="yes">
      <autodoc>GetTranslation(String str) -&gt; String
GetTranslation(String str, String strPlural, size_t n) -&gt; String</autodoc>
      <paramlist>
        <param name="str" type="String" default=""/>
        <param name="strPlural" type="String" default=""/>
        <param name="n" type="size_t" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="EncodingConverter" oldname="wxEncodingConverter" module="gdi">
      <baseclass name="Object"/>
      <constructor name="EncodingConverter" overloaded="no">
        <autodoc>__init__() -&gt; EncodingConverter</autodoc>
      </constructor>
      <destructor name="~wxEncodingConverter" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Init" type="bool" overloaded="no">
        <autodoc>Init(int input_enc, int output_enc, int method=CONVERT_STRICT) -&gt; bool</autodoc>
        <paramlist>
          <param name="input_enc" type="wxFontEncoding" default=""/>
          <param name="output_enc" type="wxFontEncoding" default=""/>
          <param name="method" type="int" default="wxCONVERT_STRICT"/>
        </paramlist>
      </method>
      <method name="Convert" type="String" overloaded="no">
        <autodoc>Convert(String input) -&gt; String</autodoc>
        <paramlist>
          <param name="input" type="String" default=""/>
        </paramlist>
      </method>
      <staticmethod name="GetPlatformEquivalents" type="wxFontEncodingArray" overloaded="no">
        <autodoc>GetPlatformEquivalents(int enc, int platform=PLATFORM_CURRENT) -&gt; wxFontEncodingArray</autodoc>
        <paramlist>
          <param name="enc" type="wxFontEncoding" default=""/>
          <param name="platform" type="int" default="wxPLATFORM_CURRENT"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetAllEquivalents" type="wxFontEncodingArray" overloaded="no">
        <autodoc>GetAllEquivalents(int enc) -&gt; wxFontEncodingArray</autodoc>
        <paramlist>
          <param name="enc" type="wxFontEncoding" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="CanConvert" type="bool" overloaded="no">
        <autodoc>CanConvert(int encIn, int encOut) -&gt; bool</autodoc>
        <paramlist>
          <param name="encIn" type="wxFontEncoding" default=""/>
          <param name="encOut" type="wxFontEncoding" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <pythoncode>#----------------------------------------------------------------------------
# wxGTK sets the locale when initialized.  Doing this at the Python
# level should set it up to match what GTK is doing at the C level.
if wx.Platform == "__WXGTK__":
    try:
        import locale
        locale.setlocale(locale.LC_ALL, "")
    except:
        pass

# On MSW add the directory where the wxWindows catalogs were installed
# to the default catalog path.
if wx.Platform == "__WXMSW__":
    import os
    localedir = os.path.join(os.path.split(__file__)[0], "locale")
    Locale_AddCatalogLookupPathPrefix(localedir)
    del os

#----------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="DC" oldname="wxDC" module="gdi">
      <baseclass name="Object"/>
      <destructor name="~wxDC" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="BeginDrawing" type="" overloaded="no">
        <autodoc>BeginDrawing()</autodoc>
      </method>
      <method name="EndDrawing" type="" overloaded="no">
        <autodoc>EndDrawing()</autodoc>
      </method>
      <method name="FloodFillXY" type="bool" overloaded="no">
        <autodoc>FloodFillXY(int x, int y, Colour col, int style=FLOOD_SURFACE) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="col" type="Colour" default=""/>
          <param name="style" type="int" default="wxFLOOD_SURFACE"/>
        </paramlist>
      </method>
      <method name="FloodFill" type="bool" overloaded="no">
        <autodoc>FloodFill(Point pt, Colour col, int style=FLOOD_SURFACE) -&gt; bool</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="col" type="Colour" default=""/>
          <param name="style" type="int" default="wxFLOOD_SURFACE"/>
        </paramlist>
      </method>
      <method name="GetPixelXY" type="Colour" overloaded="no">
        <autodoc>GetPixelXY(int x, int y) -&gt; Colour</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPixel" type="Colour" overloaded="no">
        <autodoc>GetPixel(Point pt) -&gt; Colour</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawLineXY" type="" overloaded="no">
        <autodoc>DrawLineXY(int x1, int y1, int x2, int y2)</autodoc>
        <paramlist>
          <param name="x1" type="int" default=""/>
          <param name="y1" type="int" default=""/>
          <param name="x2" type="int" default=""/>
          <param name="y2" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawLine" type="" overloaded="no">
        <autodoc>DrawLine(Point pt1, Point pt2)</autodoc>
        <paramlist>
          <param name="pt1" type="Point" default=""/>
          <param name="pt2" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="CrossHairXY" type="" overloaded="no">
        <autodoc>CrossHairXY(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CrossHair" type="" overloaded="no">
        <autodoc>CrossHair(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawArcXY" type="" overloaded="no">
        <autodoc>DrawArcXY(int x1, int y1, int x2, int y2, int xc, int yc)</autodoc>
        <paramlist>
          <param name="x1" type="int" default=""/>
          <param name="y1" type="int" default=""/>
          <param name="x2" type="int" default=""/>
          <param name="y2" type="int" default=""/>
          <param name="xc" type="int" default=""/>
          <param name="yc" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawArc" type="" overloaded="no">
        <autodoc>DrawArc(Point pt1, Point pt2, Point centre)</autodoc>
        <paramlist>
          <param name="pt1" type="Point" default=""/>
          <param name="pt2" type="Point" default=""/>
          <param name="centre" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawCheckMarkXY" type="" overloaded="no">
        <autodoc>DrawCheckMarkXY(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawCheckMark" type="" overloaded="no">
        <autodoc>DrawCheckMark(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipticArcXY" type="" overloaded="no">
        <autodoc>DrawEllipticArcXY(int x, int y, int w, int h, double sa, double ea)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="w" type="int" default=""/>
          <param name="h" type="int" default=""/>
          <param name="sa" type="double" default=""/>
          <param name="ea" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipticArc" type="" overloaded="no">
        <autodoc>DrawEllipticArc(Point pt, Size sz, double sa, double ea)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="sz" type="Size" default=""/>
          <param name="sa" type="double" default=""/>
          <param name="ea" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawPointXY" type="" overloaded="no">
        <autodoc>DrawPointXY(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawPoint" type="" overloaded="no">
        <autodoc>DrawPoint(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawRectangleXY" type="" overloaded="no">
        <autodoc>DrawRectangleXY(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawRectangle" type="" overloaded="no">
        <autodoc>DrawRectangle(Point pt, Size sz)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="DrawRectangleRect" type="" overloaded="no">
        <autodoc>DrawRectangleRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="DrawRoundedRectangleXY" type="" overloaded="no">
        <autodoc>DrawRoundedRectangleXY(int x, int y, int width, int height, double radius)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="radius" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawRoundedRectangle" type="" overloaded="no">
        <autodoc>DrawRoundedRectangle(Point pt, Size sz, double radius)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="sz" type="Size" default=""/>
          <param name="radius" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawRoundedRectangleRect" type="" overloaded="no">
        <autodoc>DrawRoundedRectangleRect(Rect r, double radius)</autodoc>
        <paramlist>
          <param name="r" type="Rect" default=""/>
          <param name="radius" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawCircleXY" type="" overloaded="no">
        <autodoc>DrawCircleXY(int x, int y, int radius)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="radius" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawCircle" type="" overloaded="no">
        <autodoc>DrawCircle(Point pt, int radius)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="radius" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipseXY" type="" overloaded="no">
        <autodoc>DrawEllipseXY(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipse" type="" overloaded="no">
        <autodoc>DrawEllipse(Point pt, Size sz)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipseRect" type="" overloaded="no">
        <autodoc>DrawEllipseRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="DrawIconXY" type="" overloaded="no">
        <autodoc>DrawIconXY(Icon icon, int x, int y)</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawIcon" type="" overloaded="no">
        <autodoc>DrawIcon(Icon icon, Point pt)</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawBitmapXY" type="" overloaded="no">
        <autodoc>DrawBitmapXY(Bitmap bmp, int x, int y, bool useMask=False)</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="useMask" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="DrawBitmap" type="" overloaded="no">
        <autodoc>DrawBitmap(Bitmap bmp, Point pt, bool useMask=False)</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
          <param name="pt" type="Point" default=""/>
          <param name="useMask" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="DrawTextXY" type="" overloaded="no">
        <autodoc>DrawTextXY(String text, int x, int y)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawText" type="" overloaded="no">
        <autodoc>DrawText(String text, Point pt)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawRotatedTextXY" type="" overloaded="no">
        <autodoc>DrawRotatedTextXY(String text, int x, int y, double angle)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="angle" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawRotatedText" type="" overloaded="no">
        <autodoc>DrawRotatedText(String text, Point pt, double angle)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="pt" type="Point" default=""/>
          <param name="angle" type="double" default=""/>
        </paramlist>
      </method>
      <method name="BlitXY" type="bool" overloaded="no">
        <autodoc>BlitXY(int xdest, int ydest, int width, int height, DC source, 
    int xsrc, int ysrc, int rop=COPY, bool useMask=False, 
    int xsrcMask=-1, int ysrcMask=-1) -&gt; bool</autodoc>
        <paramlist>
          <param name="xdest" type="int" default=""/>
          <param name="ydest" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="source" type="DC" default=""/>
          <param name="xsrc" type="int" default=""/>
          <param name="ysrc" type="int" default=""/>
          <param name="rop" type="int" default="wxCOPY"/>
          <param name="useMask" type="bool" default="False"/>
          <param name="xsrcMask" type="int" default="-1"/>
          <param name="ysrcMask" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="Blit" type="bool" overloaded="no">
        <autodoc>Blit(Point destPt, Size sz, DC source, Point srcPt, int rop=COPY, 
    bool useMask=False, Point srcPtMask=DefaultPosition) -&gt; bool</autodoc>
        <paramlist>
          <param name="destPt" type="Point" default=""/>
          <param name="sz" type="Size" default=""/>
          <param name="source" type="DC" default=""/>
          <param name="srcPt" type="Point" default=""/>
          <param name="rop" type="int" default="wxCOPY"/>
          <param name="useMask" type="bool" default="False"/>
          <param name="srcPtMask" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </method>
      <method name="DrawLines" type="" overloaded="no">
        <autodoc>DrawLines(int points, Point points_array, int xoffset=0, int yoffset=0)</autodoc>
        <paramlist>
          <param name="points" type="int" default=""/>
          <param name="points_array" type="Point" default=""/>
          <param name="xoffset" type="int" default="0"/>
          <param name="yoffset" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="DrawPolygon" type="" overloaded="no">
        <autodoc>DrawPolygon(int points, Point points_array, int xoffset=0, int yoffset=0, 
    int fillStyle=ODDEVEN_RULE)</autodoc>
        <paramlist>
          <param name="points" type="int" default=""/>
          <param name="points_array" type="Point" default=""/>
          <param name="xoffset" type="int" default="0"/>
          <param name="yoffset" type="int" default="0"/>
          <param name="fillStyle" type="int" default="wxODDEVEN_RULE"/>
        </paramlist>
      </method>
      <method name="DrawLabel" type="" overloaded="no">
        <autodoc>DrawLabel(String text, Rect rect, int alignment=wxALIGN_LEFT|wxALIGN_TOP, 
    int indexAccel=-1)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="rect" type="Rect" default=""/>
          <param name="alignment" type="int" default="wxALIGN_LEFT|wxALIGN_TOP"/>
          <param name="indexAccel" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="DrawImageLabel" type="Rect" overloaded="no">
        <autodoc>DrawImageLabel(String text, Bitmap image, Rect rect, int alignment=wxALIGN_LEFT|wxALIGN_TOP, 
    int indexAccel=-1) -&gt; Rect</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="image" type="Bitmap" default=""/>
          <param name="rect" type="Rect" default=""/>
          <param name="alignment" type="int" default="wxALIGN_LEFT|wxALIGN_TOP"/>
          <param name="indexAccel" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="DrawSpline" type="" overloaded="no">
        <autodoc>DrawSpline(int points, Point points_array)</autodoc>
        <paramlist>
          <param name="points" type="int" default=""/>
          <param name="points_array" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="StartDoc" type="bool" overloaded="no">
        <autodoc>StartDoc(String message) -&gt; bool</autodoc>
        <paramlist>
          <param name="message" type="String" default=""/>
        </paramlist>
      </method>
      <method name="EndDoc" type="" overloaded="no">
        <autodoc>EndDoc()</autodoc>
      </method>
      <method name="StartPage" type="" overloaded="no">
        <autodoc>StartPage()</autodoc>
      </method>
      <method name="EndPage" type="" overloaded="no">
        <autodoc>EndPage()</autodoc>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetPen" type="" overloaded="no">
        <autodoc>SetPen(Pen pen)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="SetBrush" type="" overloaded="no">
        <autodoc>SetBrush(Brush brush)</autodoc>
        <paramlist>
          <param name="brush" type="Brush" default=""/>
        </paramlist>
      </method>
      <method name="SetBackground" type="" overloaded="no">
        <autodoc>SetBackground(Brush brush)</autodoc>
        <paramlist>
          <param name="brush" type="Brush" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundMode" type="" overloaded="no">
        <autodoc>SetBackgroundMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPalette" type="" overloaded="no">
        <autodoc>SetPalette(Palette palette)</autodoc>
        <paramlist>
          <param name="palette" type="Palette" default=""/>
        </paramlist>
      </method>
      <method name="SetClippingRegionXY" type="" overloaded="no">
        <autodoc>SetClippingRegionXY(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetClippingRegion" type="" overloaded="no">
        <autodoc>SetClippingRegion(Point pt, Size sz)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetClippingRect" type="" overloaded="no">
        <autodoc>SetClippingRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="SetClippingRegionAsRegion" type="" overloaded="no">
        <autodoc>SetClippingRegionAsRegion(Region region)</autodoc>
        <paramlist>
          <param name="region" type="Region" default=""/>
        </paramlist>
      </method>
      <method name="DestroyClippingRegion" type="" overloaded="no">
        <autodoc>DestroyClippingRegion()</autodoc>
      </method>
      <method name="GetClippingBox" type="" overloaded="no">
        <autodoc>GetClippingBox() -&gt; (x, y, width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetClippingRect" type="Rect" overloaded="no">
        <autodoc>GetClippingRect() -&gt; Rect</autodoc>
      </method>
      <method name="GetCharHeight" type="int" overloaded="no">
        <autodoc>GetCharHeight() -&gt; int</autodoc>
      </method>
      <method name="GetCharWidth" type="int" overloaded="no">
        <autodoc>GetCharWidth() -&gt; int</autodoc>
      </method>
      <method name="GetTextExtent" type="" overloaded="no">
        <autodoc>GetTextExtent(wxString string) -&gt; (width, height)</autodoc>
        <docstring>Get the width and height of the text using the current font.
Only works for single line strings.</docstring>
        <paramlist>
          <param name="string" type="String" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFullTextExtent" type="" overloaded="no">
        <autodoc>GetFullTextExtent(wxString string, Font font=None) -&gt;
   (width, height, descent, externalLeading)</autodoc>
        <docstring>Get the width, height, decent and leading of the text using the current or specified font.
Only works for single line strings.</docstring>
        <paramlist>
          <param name="string" type="String" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="font" type="Font" default="NULL"/>
        </paramlist>
      </method>
      <method name="GetMultiLineTextExtent" type="" overloaded="no">
        <autodoc>GetMultiLineTextExtent(wxString string, Font font=None) -&gt;
   (width, height, descent, externalLeading)</autodoc>
        <docstring>Get the width, height, decent and leading of the text using the current or specified font.
Works for single as well as multi-line strings.</docstring>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="font" type="Font" default="NULL"/>
        </paramlist>
      </method>
      <method name="GetPartialTextExtents" type="wxArrayInt" overloaded="no">
        <autodoc>GetPartialTextExtents(String text) -&gt; wxArrayInt</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
        <docstring>Get the DC size in device units.</docstring>
      </method>
      <method name="GetSizeTuple" type="" overloaded="no">
        <autodoc>GetSizeTuple() -&gt; (width, height)</autodoc>
        <docstring>Get the DC size in device units.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSizeMM" type="Size" overloaded="no">
        <autodoc>GetSizeMM() -&gt; Size</autodoc>
        <docstring>Get the DC size in milimeters.</docstring>
      </method>
      <method name="GetSizeMMTuple" type="" overloaded="no">
        <autodoc>GetSizeMMTuple() -&gt; (width, height)</autodoc>
        <docstring>Get the DC size in milimeters.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeviceToLogicalX" type="int" overloaded="no">
        <autodoc>DeviceToLogicalX(int x) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeviceToLogicalY" type="int" overloaded="no">
        <autodoc>DeviceToLogicalY(int y) -&gt; int</autodoc>
        <paramlist>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeviceToLogicalXRel" type="int" overloaded="no">
        <autodoc>DeviceToLogicalXRel(int x) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeviceToLogicalYRel" type="int" overloaded="no">
        <autodoc>DeviceToLogicalYRel(int y) -&gt; int</autodoc>
        <paramlist>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LogicalToDeviceX" type="int" overloaded="no">
        <autodoc>LogicalToDeviceX(int x) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LogicalToDeviceY" type="int" overloaded="no">
        <autodoc>LogicalToDeviceY(int y) -&gt; int</autodoc>
        <paramlist>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LogicalToDeviceXRel" type="int" overloaded="no">
        <autodoc>LogicalToDeviceXRel(int x) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LogicalToDeviceYRel" type="int" overloaded="no">
        <autodoc>LogicalToDeviceYRel(int y) -&gt; int</autodoc>
        <paramlist>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CanDrawBitmap" type="bool" overloaded="no">
        <autodoc>CanDrawBitmap() -&gt; bool</autodoc>
      </method>
      <method name="CanGetTextExtent" type="bool" overloaded="no">
        <autodoc>CanGetTextExtent() -&gt; bool</autodoc>
      </method>
      <method name="GetDepth" type="int" overloaded="no">
        <autodoc>GetDepth() -&gt; int</autodoc>
      </method>
      <method name="GetPPI" type="Size" overloaded="no">
        <autodoc>GetPPI() -&gt; Size</autodoc>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="GetBackgroundMode" type="int" overloaded="no">
        <autodoc>GetBackgroundMode() -&gt; int</autodoc>
      </method>
      <method name="GetBackground" type="Brush" overloaded="no">
        <autodoc>GetBackground() -&gt; Brush</autodoc>
      </method>
      <method name="GetBrush" type="Brush" overloaded="no">
        <autodoc>GetBrush() -&gt; Brush</autodoc>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
      </method>
      <method name="GetPen" type="Pen" overloaded="no">
        <autodoc>GetPen() -&gt; Pen</autodoc>
      </method>
      <method name="GetTextBackground" type="Colour" overloaded="no">
        <autodoc>GetTextBackground() -&gt; Colour</autodoc>
      </method>
      <method name="GetTextForeground" type="Colour" overloaded="no">
        <autodoc>GetTextForeground() -&gt; Colour</autodoc>
      </method>
      <method name="SetTextForeground" type="" overloaded="no">
        <autodoc>SetTextForeground(Colour colour)</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetTextBackground" type="" overloaded="no">
        <autodoc>SetTextBackground(Colour colour)</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetMapMode" type="int" overloaded="no">
        <autodoc>GetMapMode() -&gt; int</autodoc>
      </method>
      <method name="SetMapMode" type="" overloaded="no">
        <autodoc>SetMapMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetUserScale" type="" overloaded="no">
        <autodoc>GetUserScale() -&gt; (xScale, yScale)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetUserScale" type="" overloaded="no">
        <autodoc>SetUserScale(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetLogicalScale" type="" overloaded="no">
        <autodoc>GetLogicalScale() -&gt; (xScale, yScale)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetLogicalScale" type="" overloaded="no">
        <autodoc>SetLogicalScale(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetLogicalOrigin" type="Point" overloaded="no">
        <autodoc>GetLogicalOrigin() -&gt; Point</autodoc>
      </method>
      <method name="GetLogicalOriginTuple" type="" overloaded="no">
        <autodoc>GetLogicalOriginTuple() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLogicalOrigin" type="" overloaded="no">
        <autodoc>SetLogicalOrigin(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDeviceOrigin" type="Point" overloaded="no">
        <autodoc>GetDeviceOrigin() -&gt; Point</autodoc>
      </method>
      <method name="GetDeviceOriginTuple" type="" overloaded="no">
        <autodoc>GetDeviceOriginTuple() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDeviceOrigin" type="" overloaded="no">
        <autodoc>SetDeviceOrigin(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAxisOrientation" type="" overloaded="no">
        <autodoc>SetAxisOrientation(bool xLeftRight, bool yBottomUp)</autodoc>
        <paramlist>
          <param name="xLeftRight" type="bool" default=""/>
          <param name="yBottomUp" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetLogicalFunction" type="int" overloaded="no">
        <autodoc>GetLogicalFunction() -&gt; int</autodoc>
      </method>
      <method name="SetLogicalFunction" type="" overloaded="no">
        <autodoc>SetLogicalFunction(int function)</autodoc>
        <paramlist>
          <param name="function" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetOptimization" type="" overloaded="no">
        <autodoc>SetOptimization(bool opt)</autodoc>
        <paramlist>
          <param name="opt" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetOptimization" type="bool" overloaded="no">
        <autodoc>GetOptimization() -&gt; bool</autodoc>
      </method>
      <method name="CalcBoundingBox" type="" overloaded="no">
        <autodoc>CalcBoundingBox(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ResetBoundingBox" type="" overloaded="no">
        <autodoc>ResetBoundingBox()</autodoc>
      </method>
      <method name="MinX" type="int" overloaded="no">
        <autodoc>MinX() -&gt; int</autodoc>
      </method>
      <method name="MaxX" type="int" overloaded="no">
        <autodoc>MaxX() -&gt; int</autodoc>
      </method>
      <method name="MinY" type="int" overloaded="no">
        <autodoc>MinY() -&gt; int</autodoc>
      </method>
      <method name="MaxY" type="int" overloaded="no">
        <autodoc>MaxY() -&gt; int</autodoc>
      </method>
      <method name="GetBoundingBox" type="" overloaded="no">
        <autodoc>GetBoundingBox() -&gt; (x1,y1, x2,y2)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="_DrawPointList" type="PyObject" overloaded="no">
        <autodoc>_DrawPointList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="pyCoords" type="PyObject" default=""/>
          <param name="pyPens" type="PyObject" default=""/>
          <param name="pyBrushes" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="_DrawLineList" type="PyObject" overloaded="no">
        <autodoc>_DrawLineList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="pyCoords" type="PyObject" default=""/>
          <param name="pyPens" type="PyObject" default=""/>
          <param name="pyBrushes" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="_DrawRectangleList" type="PyObject" overloaded="no">
        <autodoc>_DrawRectangleList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="pyCoords" type="PyObject" default=""/>
          <param name="pyPens" type="PyObject" default=""/>
          <param name="pyBrushes" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="_DrawEllipseList" type="PyObject" overloaded="no">
        <autodoc>_DrawEllipseList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="pyCoords" type="PyObject" default=""/>
          <param name="pyPens" type="PyObject" default=""/>
          <param name="pyBrushes" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="_DrawPolygonList" type="PyObject" overloaded="no">
        <autodoc>_DrawPolygonList(PyObject pyCoords, PyObject pyPens, PyObject pyBrushes) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="pyCoords" type="PyObject" default=""/>
          <param name="pyPens" type="PyObject" default=""/>
          <param name="pyBrushes" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="_DrawTextList" type="PyObject" overloaded="no">
        <autodoc>_DrawTextList(PyObject textList, PyObject pyPoints, PyObject foregroundList, 
    PyObject backgroundList) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="textList" type="PyObject" default=""/>
          <param name="pyPoints" type="PyObject" default=""/>
          <param name="foregroundList" type="PyObject" default=""/>
          <param name="backgroundList" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MemoryDC" oldname="wxMemoryDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="MemoryDC" overloaded="no">
        <autodoc>__init__() -&gt; MemoryDC</autodoc>
      </constructor>
      <constructor name="MemoryDCFromDC" overloaded="no">
        <autodoc>MemoryDCFromDC(DC oldDC) -&gt; MemoryDC</autodoc>
        <paramlist>
          <param name="oldDC" type="DC" default=""/>
        </paramlist>
      </constructor>
      <method name="SelectObject" type="" overloaded="no">
        <autodoc>SelectObject(Bitmap bitmap)</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="BufferedDC" oldname="wxBufferedDC" module="gdi">
      <baseclass name="MemoryDC"/>
      <constructor name="BufferedDC" overloaded="yes">
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="buffer" type="Bitmap" default=""/>
        </paramlist>
      </constructor>
      <constructor name="BufferedDC" overloaded="yes">
        <autodoc>__init__(DC dc, Bitmap buffer) -&gt; BufferedDC
__init__(DC dc, Size area) -&gt; BufferedDC</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="area" type="Size" default=""/>
        </paramlist>
      </constructor>
      <constructor name="BufferedDCInternalBuffer" overloaded="no">
        <autodoc>BufferedDCInternalBuffer(DC dc, Size area) -&gt; BufferedDC</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="area" type="Size" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxBufferedDC" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="UnMask" type="" overloaded="no">
        <autodoc>UnMask()</autodoc>
      </method>
    </class>
    <class name="BufferedPaintDC" oldname="wxBufferedPaintDC" module="gdi">
      <baseclass name="BufferedDC"/>
      <constructor name="BufferedPaintDC" overloaded="no">
        <autodoc>__init__(Window window, Bitmap buffer=NullBitmap) -&gt; BufferedPaintDC</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
          <param name="buffer" type="Bitmap" default="wxNullBitmap"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ScreenDC" oldname="wxScreenDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="ScreenDC" overloaded="no">
        <autodoc>__init__() -&gt; ScreenDC</autodoc>
      </constructor>
      <method name="StartDrawingOnTopWin" type="bool" overloaded="no">
        <autodoc>StartDrawingOnTopWin(Window window) -&gt; bool</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="StartDrawingOnTop" type="bool" overloaded="no">
        <autodoc>StartDrawingOnTop(Rect rect=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default="NULL"/>
        </paramlist>
      </method>
      <method name="EndDrawingOnTop" type="bool" overloaded="no">
        <autodoc>EndDrawingOnTop() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ClientDC" oldname="wxClientDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="ClientDC" overloaded="no">
        <autodoc>__init__(Window win) -&gt; ClientDC</autodoc>
        <paramlist>
          <param name="win" type="Window" default=""/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PaintDC" oldname="wxPaintDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="PaintDC" overloaded="no">
        <autodoc>__init__(Window win) -&gt; PaintDC</autodoc>
        <paramlist>
          <param name="win" type="Window" default=""/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="WindowDC" oldname="wxWindowDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="WindowDC" overloaded="no">
        <autodoc>__init__(Window win) -&gt; WindowDC</autodoc>
        <paramlist>
          <param name="win" type="Window" default=""/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MirrorDC" oldname="wxMirrorDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="MirrorDC" overloaded="no">
        <autodoc>__init__(DC dc, bool mirror) -&gt; MirrorDC</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="mirror" type="bool" default=""/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PostScriptDC" oldname="wxPostScriptDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="PostScriptDC" overloaded="no">
        <autodoc>__init__(wxPrintData printData) -&gt; PostScriptDC</autodoc>
        <paramlist>
          <param name="printData" type="wxPrintData" default=""/>
        </paramlist>
      </constructor>
      <method name="GetPrintData" type="wxPrintData" overloaded="no">
        <autodoc>GetPrintData() -&gt; wxPrintData</autodoc>
      </method>
      <method name="SetPrintData" type="" overloaded="no">
        <autodoc>SetPrintData(wxPrintData data)</autodoc>
        <paramlist>
          <param name="data" type="wxPrintData" default=""/>
        </paramlist>
      </method>
      <staticmethod name="SetResolution" type="" overloaded="no">
        <autodoc>SetResolution(int ppi)</autodoc>
        <paramlist>
          <param name="ppi" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetResolution" type="int" overloaded="no">
        <autodoc>GetResolution() -&gt; int</autodoc>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MetaFile" oldname="wxMetaFile" module="gdi">
      <baseclass name="Object"/>
      <constructor name="MetaFile" overloaded="no">
        <autodoc>__init__(String filename=EmptyString) -&gt; MetaFile</autodoc>
        <paramlist>
          <param name="filename" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
    </class>
    <class name="MetaFileDC" oldname="wxMetaFileDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="MetaFileDC" overloaded="no">
        <autodoc>__init__(String filename=EmptyString, int width=0, int height=0, 
    String description=EmptyString) -&gt; MetaFileDC</autodoc>
        <paramlist>
          <param name="filename" type="String" default="wxPyEmptyString"/>
          <param name="width" type="int" default="0"/>
          <param name="height" type="int" default="0"/>
          <param name="description" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
    </class>
    <class name="PrinterDC" oldname="wxPrinterDC" module="gdi">
      <baseclass name="DC"/>
      <constructor name="PrinterDC" overloaded="no">
        <autodoc>__init__(wxPrintData printData) -&gt; PrinterDC</autodoc>
        <paramlist>
          <param name="printData" type="wxPrintData" default=""/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
    class DC_old(DC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = DC.FloodFillXY
        GetPixel = DC.GetPixelXY
        DrawLine = DC.DrawLineXY
        CrossHair = DC.CrossHairXY
        DrawArc = DC.DrawArcXY
        DrawCheckMark = DC.DrawCheckMarkXY
        DrawEllipticArc = DC.DrawEllipticArcXY
        DrawPoint = DC.DrawPointXY
        DrawRectangle = DC.DrawRectangleXY
        DrawRoundedRectangle = DC.DrawRoundedRectangleXY
        DrawCircle = DC.DrawCircleXY
        DrawEllipse = DC.DrawEllipseXY
        DrawIcon = DC.DrawIconXY
        DrawBitmap = DC.DrawBitmapXY
        DrawText = DC.DrawTextXY
        DrawRotatedText = DC.DrawRotatedTextXY
        Blit = DC.BlitXY
    </pythoncode>
    <pythoncode>
    class MemoryDC_old(MemoryDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = MemoryDC.FloodFillXY
        GetPixel = MemoryDC.GetPixelXY
        DrawLine = MemoryDC.DrawLineXY
        CrossHair = MemoryDC.CrossHairXY
        DrawArc = MemoryDC.DrawArcXY
        DrawCheckMark = MemoryDC.DrawCheckMarkXY
        DrawEllipticArc = MemoryDC.DrawEllipticArcXY
        DrawPoint = MemoryDC.DrawPointXY
        DrawRectangle = MemoryDC.DrawRectangleXY
        DrawRoundedRectangle = MemoryDC.DrawRoundedRectangleXY
        DrawCircle = MemoryDC.DrawCircleXY
        DrawEllipse = MemoryDC.DrawEllipseXY
        DrawIcon = MemoryDC.DrawIconXY
        DrawBitmap = MemoryDC.DrawBitmapXY
        DrawText = MemoryDC.DrawTextXY
        DrawRotatedText = MemoryDC.DrawRotatedTextXY
        Blit = MemoryDC.BlitXY
    </pythoncode>
    <pythoncode>
    class BufferedDC_old(BufferedDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = BufferedDC.FloodFillXY
        GetPixel = BufferedDC.GetPixelXY
        DrawLine = BufferedDC.DrawLineXY
        CrossHair = BufferedDC.CrossHairXY
        DrawArc = BufferedDC.DrawArcXY
        DrawCheckMark = BufferedDC.DrawCheckMarkXY
        DrawEllipticArc = BufferedDC.DrawEllipticArcXY
        DrawPoint = BufferedDC.DrawPointXY
        DrawRectangle = BufferedDC.DrawRectangleXY
        DrawRoundedRectangle = BufferedDC.DrawRoundedRectangleXY
        DrawCircle = BufferedDC.DrawCircleXY
        DrawEllipse = BufferedDC.DrawEllipseXY
        DrawIcon = BufferedDC.DrawIconXY
        DrawBitmap = BufferedDC.DrawBitmapXY
        DrawText = BufferedDC.DrawTextXY
        DrawRotatedText = BufferedDC.DrawRotatedTextXY
        Blit = BufferedDC.BlitXY
    </pythoncode>
    <pythoncode>
    class BufferedPaintDC_old(BufferedPaintDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = BufferedPaintDC.FloodFillXY
        GetPixel = BufferedPaintDC.GetPixelXY
        DrawLine = BufferedPaintDC.DrawLineXY
        CrossHair = BufferedPaintDC.CrossHairXY
        DrawArc = BufferedPaintDC.DrawArcXY
        DrawCheckMark = BufferedPaintDC.DrawCheckMarkXY
        DrawEllipticArc = BufferedPaintDC.DrawEllipticArcXY
        DrawPoint = BufferedPaintDC.DrawPointXY
        DrawRectangle = BufferedPaintDC.DrawRectangleXY
        DrawRoundedRectangle = BufferedPaintDC.DrawRoundedRectangleXY
        DrawCircle = BufferedPaintDC.DrawCircleXY
        DrawEllipse = BufferedPaintDC.DrawEllipseXY
        DrawIcon = BufferedPaintDC.DrawIconXY
        DrawBitmap = BufferedPaintDC.DrawBitmapXY
        DrawText = BufferedPaintDC.DrawTextXY
        DrawRotatedText = BufferedPaintDC.DrawRotatedTextXY
        Blit = BufferedPaintDC.BlitXY
    </pythoncode>
    <pythoncode>
    class ScreenDC_old(ScreenDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = ScreenDC.FloodFillXY
        GetPixel = ScreenDC.GetPixelXY
        DrawLine = ScreenDC.DrawLineXY
        CrossHair = ScreenDC.CrossHairXY
        DrawArc = ScreenDC.DrawArcXY
        DrawCheckMark = ScreenDC.DrawCheckMarkXY
        DrawEllipticArc = ScreenDC.DrawEllipticArcXY
        DrawPoint = ScreenDC.DrawPointXY
        DrawRectangle = ScreenDC.DrawRectangleXY
        DrawRoundedRectangle = ScreenDC.DrawRoundedRectangleXY
        DrawCircle = ScreenDC.DrawCircleXY
        DrawEllipse = ScreenDC.DrawEllipseXY
        DrawIcon = ScreenDC.DrawIconXY
        DrawBitmap = ScreenDC.DrawBitmapXY
        DrawText = ScreenDC.DrawTextXY
        DrawRotatedText = ScreenDC.DrawRotatedTextXY
        Blit = ScreenDC.BlitXY
    </pythoncode>
    <pythoncode>
    class ClientDC_old(ClientDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = ClientDC.FloodFillXY
        GetPixel = ClientDC.GetPixelXY
        DrawLine = ClientDC.DrawLineXY
        CrossHair = ClientDC.CrossHairXY
        DrawArc = ClientDC.DrawArcXY
        DrawCheckMark = ClientDC.DrawCheckMarkXY
        DrawEllipticArc = ClientDC.DrawEllipticArcXY
        DrawPoint = ClientDC.DrawPointXY
        DrawRectangle = ClientDC.DrawRectangleXY
        DrawRoundedRectangle = ClientDC.DrawRoundedRectangleXY
        DrawCircle = ClientDC.DrawCircleXY
        DrawEllipse = ClientDC.DrawEllipseXY
        DrawIcon = ClientDC.DrawIconXY
        DrawBitmap = ClientDC.DrawBitmapXY
        DrawText = ClientDC.DrawTextXY
        DrawRotatedText = ClientDC.DrawRotatedTextXY
        Blit = ClientDC.BlitXY
    </pythoncode>
    <pythoncode>
    class PaintDC_old(PaintDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = PaintDC.FloodFillXY
        GetPixel = PaintDC.GetPixelXY
        DrawLine = PaintDC.DrawLineXY
        CrossHair = PaintDC.CrossHairXY
        DrawArc = PaintDC.DrawArcXY
        DrawCheckMark = PaintDC.DrawCheckMarkXY
        DrawEllipticArc = PaintDC.DrawEllipticArcXY
        DrawPoint = PaintDC.DrawPointXY
        DrawRectangle = PaintDC.DrawRectangleXY
        DrawRoundedRectangle = PaintDC.DrawRoundedRectangleXY
        DrawCircle = PaintDC.DrawCircleXY
        DrawEllipse = PaintDC.DrawEllipseXY
        DrawIcon = PaintDC.DrawIconXY
        DrawBitmap = PaintDC.DrawBitmapXY
        DrawText = PaintDC.DrawTextXY
        DrawRotatedText = PaintDC.DrawRotatedTextXY
        Blit = PaintDC.BlitXY
    </pythoncode>
    <pythoncode>
    class WindowDC_old(WindowDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = WindowDC.FloodFillXY
        GetPixel = WindowDC.GetPixelXY
        DrawLine = WindowDC.DrawLineXY
        CrossHair = WindowDC.CrossHairXY
        DrawArc = WindowDC.DrawArcXY
        DrawCheckMark = WindowDC.DrawCheckMarkXY
        DrawEllipticArc = WindowDC.DrawEllipticArcXY
        DrawPoint = WindowDC.DrawPointXY
        DrawRectangle = WindowDC.DrawRectangleXY
        DrawRoundedRectangle = WindowDC.DrawRoundedRectangleXY
        DrawCircle = WindowDC.DrawCircleXY
        DrawEllipse = WindowDC.DrawEllipseXY
        DrawIcon = WindowDC.DrawIconXY
        DrawBitmap = WindowDC.DrawBitmapXY
        DrawText = WindowDC.DrawTextXY
        DrawRotatedText = WindowDC.DrawRotatedTextXY
        Blit = WindowDC.BlitXY
    </pythoncode>
    <pythoncode>
    class MirrorDC_old(MirrorDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = MirrorDC.FloodFillXY
        GetPixel = MirrorDC.GetPixelXY
        DrawLine = MirrorDC.DrawLineXY
        CrossHair = MirrorDC.CrossHairXY
        DrawArc = MirrorDC.DrawArcXY
        DrawCheckMark = MirrorDC.DrawCheckMarkXY
        DrawEllipticArc = MirrorDC.DrawEllipticArcXY
        DrawPoint = MirrorDC.DrawPointXY
        DrawRectangle = MirrorDC.DrawRectangleXY
        DrawRoundedRectangle = MirrorDC.DrawRoundedRectangleXY
        DrawCircle = MirrorDC.DrawCircleXY
        DrawEllipse = MirrorDC.DrawEllipseXY
        DrawIcon = MirrorDC.DrawIconXY
        DrawBitmap = MirrorDC.DrawBitmapXY
        DrawText = MirrorDC.DrawTextXY
        DrawRotatedText = MirrorDC.DrawRotatedTextXY
        Blit = MirrorDC.BlitXY
    </pythoncode>
    <pythoncode>
    class PostScriptDC_old(PostScriptDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = PostScriptDC.FloodFillXY
        GetPixel = PostScriptDC.GetPixelXY
        DrawLine = PostScriptDC.DrawLineXY
        CrossHair = PostScriptDC.CrossHairXY
        DrawArc = PostScriptDC.DrawArcXY
        DrawCheckMark = PostScriptDC.DrawCheckMarkXY
        DrawEllipticArc = PostScriptDC.DrawEllipticArcXY
        DrawPoint = PostScriptDC.DrawPointXY
        DrawRectangle = PostScriptDC.DrawRectangleXY
        DrawRoundedRectangle = PostScriptDC.DrawRoundedRectangleXY
        DrawCircle = PostScriptDC.DrawCircleXY
        DrawEllipse = PostScriptDC.DrawEllipseXY
        DrawIcon = PostScriptDC.DrawIconXY
        DrawBitmap = PostScriptDC.DrawBitmapXY
        DrawText = PostScriptDC.DrawTextXY
        DrawRotatedText = PostScriptDC.DrawRotatedTextXY
        Blit = PostScriptDC.BlitXY
    </pythoncode>
    <pythoncode>
    class MetaFileDC_old(MetaFileDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = MetaFileDC.FloodFillXY
        GetPixel = MetaFileDC.GetPixelXY
        DrawLine = MetaFileDC.DrawLineXY
        CrossHair = MetaFileDC.CrossHairXY
        DrawArc = MetaFileDC.DrawArcXY
        DrawCheckMark = MetaFileDC.DrawCheckMarkXY
        DrawEllipticArc = MetaFileDC.DrawEllipticArcXY
        DrawPoint = MetaFileDC.DrawPointXY
        DrawRectangle = MetaFileDC.DrawRectangleXY
        DrawRoundedRectangle = MetaFileDC.DrawRoundedRectangleXY
        DrawCircle = MetaFileDC.DrawCircleXY
        DrawEllipse = MetaFileDC.DrawEllipseXY
        DrawIcon = MetaFileDC.DrawIconXY
        DrawBitmap = MetaFileDC.DrawBitmapXY
        DrawText = MetaFileDC.DrawTextXY
        DrawRotatedText = MetaFileDC.DrawRotatedTextXY
        Blit = MetaFileDC.BlitXY
    </pythoncode>
    <pythoncode>
    class PrinterDC_old(PrinterDC):
        """DC class that has methods with 2.4 compatible parameters."""
        FloodFill = PrinterDC.FloodFillXY
        GetPixel = PrinterDC.GetPixelXY
        DrawLine = PrinterDC.DrawLineXY
        CrossHair = PrinterDC.CrossHairXY
        DrawArc = PrinterDC.DrawArcXY
        DrawCheckMark = PrinterDC.DrawCheckMarkXY
        DrawEllipticArc = PrinterDC.DrawEllipticArcXY
        DrawPoint = PrinterDC.DrawPointXY
        DrawRectangle = PrinterDC.DrawRectangleXY
        DrawRoundedRectangle = PrinterDC.DrawRoundedRectangleXY
        DrawCircle = PrinterDC.DrawCircleXY
        DrawEllipse = PrinterDC.DrawEllipseXY
        DrawIcon = PrinterDC.DrawIconXY
        DrawBitmap = PrinterDC.DrawBitmapXY
        DrawText = PrinterDC.DrawTextXY
        DrawRotatedText = PrinterDC.DrawRotatedTextXY
        Blit = PrinterDC.BlitXY
    </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ImageList" oldname="wxImageList" module="gdi">
      <baseclass name="Object"/>
      <constructor name="ImageList" overloaded="no">
        <autodoc>__init__(int width, int height, int mask=True, int initialCount=1) -&gt; ImageList</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="mask" type="int" default="True"/>
          <param name="initialCount" type="int" default="1"/>
        </paramlist>
      </constructor>
      <destructor name="~wxImageList" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Add" type="int" overloaded="no">
        <autodoc>Add(Bitmap bitmap, Bitmap mask=NullBitmap) -&gt; int</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="mask" type="Bitmap" default="wxNullBitmap"/>
        </paramlist>
      </method>
      <method name="AddWithColourMask" type="int" overloaded="no">
        <autodoc>AddWithColourMask(Bitmap bitmap, Colour maskColour) -&gt; int</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="maskColour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="AddIcon" type="int" overloaded="no">
        <autodoc>AddIcon(Icon icon) -&gt; int</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
        </paramlist>
      </method>
      <method name="Replace" type="bool" overloaded="no">
        <autodoc>Replace(int index, Bitmap bitmap) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="int" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="Draw" type="bool" overloaded="no">
        <autodoc>Draw(int index, DC dc, int x, int x, int flags=IMAGELIST_DRAW_NORMAL, 
    bool solidBackground=False) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="int" default=""/>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="int" default=""/>
          <param name="x" type="int" default=""/>
          <param name="flags" type="int" default="wxIMAGELIST_DRAW_NORMAL"/>
          <param name="solidBackground" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="GetImageCount" type="int" overloaded="no">
        <autodoc>GetImageCount() -&gt; int</autodoc>
      </method>
      <method name="Remove" type="bool" overloaded="no">
        <autodoc>Remove(int index) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="int" default=""/>
        </paramlist>
      </method>
      <method name="RemoveAll" type="bool" overloaded="no">
        <autodoc>RemoveAll() -&gt; bool</autodoc>
      </method>
      <method name="GetSize" type="" overloaded="no">
        <autodoc>GetSize() -&gt; (width,height)</autodoc>
        <paramlist>
          <param name="index" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PenList" oldname="wxPenList" module="gdi">
      <baseclass name="Object"/>
      <method name="AddPen" type="" overloaded="no">
        <autodoc>AddPen(Pen pen)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="FindOrCreatePen" type="Pen" overloaded="no">
        <autodoc>FindOrCreatePen(Colour colour, int width, int style) -&gt; Pen</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
          <param name="width" type="int" default=""/>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="RemovePen" type="" overloaded="no">
        <autodoc>RemovePen(Pen pen)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="int" overloaded="no">
        <autodoc>GetCount() -&gt; int</autodoc>
      </method>
    </class>
    <class name="BrushList" oldname="wxBrushList" module="gdi">
      <baseclass name="Object"/>
      <method name="AddBrush" type="" overloaded="no">
        <autodoc>AddBrush(Brush brush)</autodoc>
        <paramlist>
          <param name="brush" type="Brush" default=""/>
        </paramlist>
      </method>
      <method name="FindOrCreateBrush" type="Brush" overloaded="no">
        <autodoc>FindOrCreateBrush(Colour colour, int style) -&gt; Brush</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="RemoveBrush" type="" overloaded="no">
        <autodoc>RemoveBrush(Brush brush)</autodoc>
        <paramlist>
          <param name="brush" type="Brush" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="int" overloaded="no">
        <autodoc>GetCount() -&gt; int</autodoc>
      </method>
    </class>
    <class name="ColourDatabase" oldname="wxColourDatabase" module="gdi">
      <baseclass name="Object"/>
      <constructor name="ColourDatabase" overloaded="no">
        <autodoc>__init__() -&gt; ColourDatabase</autodoc>
      </constructor>
      <destructor name="~wxColourDatabase" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Find" type="Colour" overloaded="no">
        <autodoc>Find(String name) -&gt; Colour</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindName" type="String" overloaded="no">
        <autodoc>FindName(Colour colour) -&gt; String</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="AddColour" type="" overloaded="no">
        <autodoc>AddColour(String name, Colour colour)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="Append" type="" overloaded="no">
        <autodoc>Append(String name, int red, int green, int blue)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="red" type="int" default=""/>
          <param name="green" type="int" default=""/>
          <param name="blue" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FontList" oldname="wxFontList" module="gdi">
      <baseclass name="Object"/>
      <method name="AddFont" type="" overloaded="no">
        <autodoc>AddFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="FindOrCreateFont" type="Font" overloaded="no">
        <autodoc>FindOrCreateFont(int point_size, int family, int style, int weight, 
    bool underline=False, String facename=EmptyString, 
    int encoding=FONTENCODING_DEFAULT) -&gt; Font</autodoc>
        <paramlist>
          <param name="point_size" type="int" default=""/>
          <param name="family" type="int" default=""/>
          <param name="style" type="int" default=""/>
          <param name="weight" type="int" default=""/>
          <param name="underline" type="bool" default="False"/>
          <param name="facename" type="String" default="wxPyEmptyString"/>
          <param name="encoding" type="wxFontEncoding" default="wxFONTENCODING_DEFAULT"/>
        </paramlist>
      </method>
      <method name="RemoveFont" type="" overloaded="no">
        <autodoc>RemoveFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="int" overloaded="no">
        <autodoc>GetCount() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode> NullColor = NullColour </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Effects" oldname="wxEffects" module="gdi">
      <baseclass name="Object"/>
      <constructor name="Effects" overloaded="no">
        <autodoc>__init__() -&gt; Effects</autodoc>
      </constructor>
      <method name="GetHighlightColour" type="Colour" overloaded="no">
        <autodoc>GetHighlightColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetLightShadow" type="Colour" overloaded="no">
        <autodoc>GetLightShadow() -&gt; Colour</autodoc>
      </method>
      <method name="GetFaceColour" type="Colour" overloaded="no">
        <autodoc>GetFaceColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetMediumShadow" type="Colour" overloaded="no">
        <autodoc>GetMediumShadow() -&gt; Colour</autodoc>
      </method>
      <method name="GetDarkShadow" type="Colour" overloaded="no">
        <autodoc>GetDarkShadow() -&gt; Colour</autodoc>
      </method>
      <method name="SetHighlightColour" type="" overloaded="no">
        <autodoc>SetHighlightColour(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetLightShadow" type="" overloaded="no">
        <autodoc>SetLightShadow(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetFaceColour" type="" overloaded="no">
        <autodoc>SetFaceColour(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetMediumShadow" type="" overloaded="no">
        <autodoc>SetMediumShadow(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetDarkShadow" type="" overloaded="no">
        <autodoc>SetDarkShadow(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(Colour highlightColour, Colour lightShadow, Colour faceColour, 
    Colour mediumShadow, Colour darkShadow)</autodoc>
        <paramlist>
          <param name="highlightColour" type="Colour" default=""/>
          <param name="lightShadow" type="Colour" default=""/>
          <param name="faceColour" type="Colour" default=""/>
          <param name="mediumShadow" type="Colour" default=""/>
          <param name="darkShadow" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="DrawSunkenEdge" type="" overloaded="no">
        <autodoc>DrawSunkenEdge(DC dc, Rect rect, int borderSize=1)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="rect" type="Rect" default=""/>
          <param name="borderSize" type="int" default="1"/>
        </paramlist>
      </method>
      <method name="TileBitmap" type="bool" overloaded="no">
        <autodoc>TileBitmap(Rect rect, DC dc, Bitmap bitmap) -&gt; bool</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
          <param name="dc" type="DC" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
    </class>
  </module>
  <module name="windows">
    <import name="core"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Panel" oldname="wxPanel" module="windows">
      <baseclass name="Window"/>
      <constructor name="Panel" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxTAB_TRAVERSAL|wxNO_BORDER, 
    String name=PanelNameStr) -&gt; Panel</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTAB_TRAVERSAL|wxNO_BORDER"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PrePanel" overloaded="no">
        <autodoc>PrePanel() -&gt; Panel</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxTAB_TRAVERSAL|wxNO_BORDER, 
    String name=PanelNameStr) -&gt; bool</autodoc>
        <docstring>Create the GUI part of the Window for 2-phase creation mode.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTAB_TRAVERSAL|wxNO_BORDER"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </method>
      <method name="InitDialog" type="" overloaded="no">
        <autodoc>InitDialog()</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ScrolledWindow" oldname="wxScrolledWindow" module="windows">
      <baseclass name="Panel"/>
      <constructor name="ScrolledWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxHSCROLL|wxVSCROLL, 
    String name=PanelNameStr) -&gt; ScrolledWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxHSCROLL|wxVSCROLL"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreScrolledWindow" overloaded="no">
        <autodoc>PreScrolledWindow() -&gt; ScrolledWindow</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxHSCROLL|wxVSCROLL, 
    String name=PanelNameStr) -&gt; bool</autodoc>
        <docstring>Create the GUI part of the Window for 2-phase creation mode.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxHSCROLL|wxVSCROLL"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </method>
      <method name="SetScrollbars" type="" overloaded="no">
        <autodoc>SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY, int noUnitsX, 
    int noUnitsY, int xPos=0, int yPos=0, bool noRefresh=False)</autodoc>
        <paramlist>
          <param name="pixelsPerUnitX" type="int" default=""/>
          <param name="pixelsPerUnitY" type="int" default=""/>
          <param name="noUnitsX" type="int" default=""/>
          <param name="noUnitsY" type="int" default=""/>
          <param name="xPos" type="int" default="0"/>
          <param name="yPos" type="int" default="0"/>
          <param name="noRefresh" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="Scroll" type="" overloaded="no">
        <autodoc>Scroll(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetScrollPageSize" type="int" overloaded="no">
        <autodoc>GetScrollPageSize(int orient) -&gt; int</autodoc>
        <paramlist>
          <param name="orient" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetScrollPageSize" type="" overloaded="no">
        <autodoc>SetScrollPageSize(int orient, int pageSize)</autodoc>
        <paramlist>
          <param name="orient" type="int" default=""/>
          <param name="pageSize" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetScrollRate" type="" overloaded="no">
        <autodoc>SetScrollRate(int xstep, int ystep)</autodoc>
        <paramlist>
          <param name="xstep" type="int" default=""/>
          <param name="ystep" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetScrollPixelsPerUnit" type="" overloaded="no">
        <autodoc>GetScrollPixelsPerUnit() -&gt; (xUnit, yUnit)</autodoc>
        <docstring>Get the size of one logical unit in physical units.</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="EnableScrolling" type="" overloaded="no">
        <autodoc>EnableScrolling(bool x_scrolling, bool y_scrolling)</autodoc>
        <paramlist>
          <param name="x_scrolling" type="bool" default=""/>
          <param name="y_scrolling" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetViewStart" type="" overloaded="no">
        <autodoc>GetViewStart() -&gt; (x,y)</autodoc>
        <docstring>Get the view start</docstring>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetScale" type="" overloaded="no">
        <autodoc>SetScale(double xs, double ys)</autodoc>
        <paramlist>
          <param name="xs" type="double" default=""/>
          <param name="ys" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetScaleX" type="double" overloaded="no">
        <autodoc>GetScaleX() -&gt; double</autodoc>
      </method>
      <method name="GetScaleY" type="double" overloaded="no">
        <autodoc>GetScaleY() -&gt; double</autodoc>
      </method>
      <method name="CalcScrolledPosition" type="Point" overloaded="yes">
        <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="CalcScrolledPosition" type="" overloaded="yes">
        <autodoc>CalcScrolledPosition(Point pt) -&gt; Point
CalcScrolledPosition(int x, int y) -&gt; (sx, sy)</autodoc>
        <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CalcUnscrolledPosition" type="Point" overloaded="yes">
        <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="CalcUnscrolledPosition" type="" overloaded="yes">
        <autodoc>CalcUnscrolledPosition(Point pt) -&gt; Point
CalcUnscrolledPosition(int x, int y) -&gt; (ux, uy)</autodoc>
        <docstring>Translate between scrolled and unscrolled coordinates.</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AdjustScrollbars" type="" overloaded="no">
        <autodoc>AdjustScrollbars()</autodoc>
      </method>
      <method name="CalcScrollInc" type="int" overloaded="no">
        <autodoc>CalcScrollInc(ScrollWinEvent event) -&gt; int</autodoc>
        <paramlist>
          <param name="event" type="ScrollWinEvent" default=""/>
        </paramlist>
      </method>
      <method name="SetTargetWindow" type="" overloaded="no">
        <autodoc>SetTargetWindow(Window target)</autodoc>
        <paramlist>
          <param name="target" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetTargetWindow" type="Window" overloaded="no">
        <autodoc>GetTargetWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="TopLevelWindow" oldname="wxTopLevelWindow" module="windows">
      <baseclass name="Window"/>
      <method name="Maximize" type="" overloaded="no">
        <autodoc>Maximize(bool maximize=True)</autodoc>
        <paramlist>
          <param name="maximize" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Restore" type="" overloaded="no">
        <autodoc>Restore()</autodoc>
      </method>
      <method name="Iconize" type="" overloaded="no">
        <autodoc>Iconize(bool iconize=True)</autodoc>
        <paramlist>
          <param name="iconize" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="IsMaximized" type="bool" overloaded="no">
        <autodoc>IsMaximized() -&gt; bool</autodoc>
      </method>
      <method name="IsIconized" type="bool" overloaded="no">
        <autodoc>IsIconized() -&gt; bool</autodoc>
      </method>
      <method name="GetIcon" type="Icon" overloaded="no">
        <autodoc>GetIcon() -&gt; Icon</autodoc>
      </method>
      <method name="SetIcon" type="" overloaded="no">
        <autodoc>SetIcon(Icon icon)</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
        </paramlist>
      </method>
      <method name="SetIcons" type="" overloaded="no">
        <autodoc>SetIcons(wxIconBundle icons)</autodoc>
        <paramlist>
          <param name="icons" type="IconBundle" default=""/>
        </paramlist>
      </method>
      <method name="ShowFullScreen" type="bool" overloaded="no">
        <autodoc>ShowFullScreen(bool show, long style=FULLSCREEN_ALL) -&gt; bool</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
          <param name="style" type="long" default="wxFULLSCREEN_ALL"/>
        </paramlist>
      </method>
      <method name="IsFullScreen" type="bool" overloaded="no">
        <autodoc>IsFullScreen() -&gt; bool</autodoc>
      </method>
      <method name="SetTitle" type="" overloaded="no">
        <autodoc>SetTitle(String title)</autodoc>
        <docstring>Sets the window's title. Applicable only to frames and dialogs.</docstring>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTitle" type="String" overloaded="no">
        <autodoc>GetTitle() -&gt; String</autodoc>
        <docstring>Gets the window's title. Applicable only to frames and dialogs.</docstring>
      </method>
      <method name="SetShape" type="bool" overloaded="no">
        <autodoc>SetShape(Region region) -&gt; bool</autodoc>
        <paramlist>
          <param name="region" type="Region" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Frame" oldname="wxFrame" module="windows">
      <baseclass name="TopLevelWindow"/>
      <constructor name="Frame" overloaded="no">
        <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; Frame</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreFrame" overloaded="no">
        <autodoc>PreFrame() -&gt; Frame</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </method>
      <method name="GetClientAreaOrigin" type="Point" overloaded="no">
        <autodoc>GetClientAreaOrigin() -&gt; Point</autodoc>
        <docstring>Get the origin of the client area of the window relative to the
window's top left corner (the client area may be shifted because of
the borders, scrollbars, other decorations...)</docstring>
      </method>
      <method name="SendSizeEvent" type="" overloaded="no">
        <autodoc>SendSizeEvent()</autodoc>
      </method>
      <method name="SetMenuBar" type="" overloaded="no">
        <autodoc>SetMenuBar(MenuBar menubar)</autodoc>
        <paramlist>
          <param name="menubar" type="MenuBar" default=""/>
        </paramlist>
      </method>
      <method name="GetMenuBar" type="MenuBar" overloaded="no">
        <autodoc>GetMenuBar() -&gt; MenuBar</autodoc>
      </method>
      <method name="ProcessCommand" type="bool" overloaded="no">
        <autodoc>ProcessCommand(int winid) -&gt; bool</autodoc>
        <paramlist>
          <param name="winid" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CreateStatusBar" type="wxStatusBar" overloaded="no">
        <autodoc>CreateStatusBar(int number=1, long style=wxST_SIZEGRIP|wxFULL_REPAINT_ON_RESIZE, 
    int winid=0, String name=StatusLineNameStr) -&gt; StatusBar</autodoc>
        <paramlist>
          <param name="number" type="int" default="1"/>
          <param name="style" type="long" default="wxST_SIZEGRIP|wxFULL_REPAINT_ON_RESIZE"/>
          <param name="winid" type="int" default="0"/>
          <param name="name" type="String" default="wxPyStatusLineNameStr"/>
        </paramlist>
      </method>
      <method name="GetStatusBar" type="wxStatusBar" overloaded="no">
        <autodoc>GetStatusBar() -&gt; StatusBar</autodoc>
      </method>
      <method name="SetStatusBar" type="" overloaded="no">
        <autodoc>SetStatusBar(StatusBar statBar)</autodoc>
        <paramlist>
          <param name="statBar" type="wxStatusBar" default=""/>
        </paramlist>
      </method>
      <method name="SetStatusText" type="" overloaded="no">
        <autodoc>SetStatusText(String text, int number=0)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="number" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetStatusWidths" type="" overloaded="no">
        <autodoc>SetStatusWidths(int widths, int widths_field)</autodoc>
        <paramlist>
          <param name="widths" type="int" default=""/>
          <param name="widths_field" type="int" default=""/>
        </paramlist>
      </method>
      <method name="PushStatusText" type="" overloaded="no">
        <autodoc>PushStatusText(String text, int number=0)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="number" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="PopStatusText" type="" overloaded="no">
        <autodoc>PopStatusText(int number=0)</autodoc>
        <paramlist>
          <param name="number" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetStatusBarPane" type="" overloaded="no">
        <autodoc>SetStatusBarPane(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetStatusBarPane" type="int" overloaded="no">
        <autodoc>GetStatusBarPane() -&gt; int</autodoc>
      </method>
      <method name="CreateToolBar" type="wxToolBar" overloaded="no">
        <autodoc>CreateToolBar(long style=-1, int winid=-1, String name=ToolBarNameStr) -&gt; wxToolBar</autodoc>
        <paramlist>
          <param name="style" type="long" default="-1"/>
          <param name="winid" type="int" default="-1"/>
          <param name="name" type="String" default="wxPyToolBarNameStr"/>
        </paramlist>
      </method>
      <method name="GetToolBar" type="wxToolBar" overloaded="no">
        <autodoc>GetToolBar() -&gt; wxToolBar</autodoc>
      </method>
      <method name="SetToolBar" type="" overloaded="no">
        <autodoc>SetToolBar(wxToolBar toolbar)</autodoc>
        <paramlist>
          <param name="toolbar" type="wxToolBar" default=""/>
        </paramlist>
      </method>
      <method name="DoGiveHelp" type="" overloaded="no">
        <autodoc>DoGiveHelp(String text, bool show)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="DoMenuUpdates" type="" overloaded="no">
        <autodoc>DoMenuUpdates(Menu menu=None)</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default="NULL"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Dialog" oldname="wxDialog" module="windows">
      <baseclass name="TopLevelWindow"/>
      <constructor name="Dialog" overloaded="no">
        <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_DIALOG_STYLE, 
    String name=DialogNameStr) -&gt; Dialog</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_DIALOG_STYLE"/>
          <param name="name" type="String" default="wxPyDialogNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreDialog" overloaded="no">
        <autodoc>PreDialog() -&gt; Dialog</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_DIALOG_STYLE, 
    String name=DialogNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_DIALOG_STYLE"/>
          <param name="name" type="String" default="wxPyDialogNameStr"/>
        </paramlist>
      </method>
      <method name="SetReturnCode" type="" overloaded="no">
        <autodoc>SetReturnCode(int returnCode)</autodoc>
        <paramlist>
          <param name="returnCode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetReturnCode" type="int" overloaded="no">
        <autodoc>GetReturnCode() -&gt; int</autodoc>
      </method>
      <method name="CreateTextSizer" type="Sizer" overloaded="no">
        <autodoc>CreateTextSizer(String message) -&gt; Sizer</autodoc>
        <paramlist>
          <param name="message" type="String" default=""/>
        </paramlist>
      </method>
      <method name="CreateButtonSizer" type="Sizer" overloaded="no">
        <autodoc>CreateButtonSizer(long flags) -&gt; Sizer</autodoc>
        <paramlist>
          <param name="flags" type="long" default=""/>
        </paramlist>
      </method>
      <method name="IsModal" type="bool" overloaded="no">
        <autodoc>IsModal() -&gt; bool</autodoc>
      </method>
      <method name="ShowModal" type="int" overloaded="no">
        <autodoc>ShowModal() -&gt; int</autodoc>
      </method>
      <method name="EndModal" type="" overloaded="no">
        <autodoc>EndModal(int retCode)</autodoc>
        <paramlist>
          <param name="retCode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsModalShowing" type="bool" overloaded="no">
        <autodoc>IsModalShowing() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MiniFrame" oldname="wxMiniFrame" module="windows">
      <baseclass name="Frame"/>
      <constructor name="MiniFrame" overloaded="no">
        <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; MiniFrame</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreMiniFrame" overloaded="no">
        <autodoc>PreMiniFrame() -&gt; MiniFrame</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SplashScreenWindow" oldname="wxSplashScreenWindow" module="windows">
      <baseclass name="Window"/>
      <constructor name="SplashScreenWindow" overloaded="no">
        <autodoc>__init__(Bitmap bitmap, Window parent, int id, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=NO_BORDER) -&gt; SplashScreenWindow</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxNO_BORDER"/>
        </paramlist>
      </constructor>
      <method name="SetBitmap" type="" overloaded="no">
        <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
      </method>
    </class>
    <class name="SplashScreen" oldname="wxSplashScreen" module="windows">
      <baseclass name="Frame"/>
      <constructor name="SplashScreen" overloaded="no">
        <autodoc>__init__(Bitmap bitmap, long splashStyle, int milliseconds, 
    Window parent, int id, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP) -&gt; SplashScreen</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="splashStyle" type="long" default=""/>
          <param name="milliseconds" type="int" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP"/>
        </paramlist>
      </constructor>
      <method name="GetSplashStyle" type="long" overloaded="no">
        <autodoc>GetSplashStyle() -&gt; long</autodoc>
      </method>
      <method name="GetSplashWindow" type="SplashScreenWindow" overloaded="no">
        <autodoc>GetSplashWindow() -&gt; SplashScreenWindow</autodoc>
      </method>
      <method name="GetTimeout" type="int" overloaded="no">
        <autodoc>GetTimeout() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="StatusBar" oldname="wxStatusBar" module="windows">
      <baseclass name="Window"/>
      <constructor name="StatusBar" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, long style=wxST_SIZEGRIP|wxFULL_REPAINT_ON_RESIZE, 
    String name=StatusLineNameStr) -&gt; StatusBar</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="style" type="long" default="wxST_SIZEGRIP|wxFULL_REPAINT_ON_RESIZE"/>
          <param name="name" type="String" default="wxPyStatusLineNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreStatusBar" overloaded="no">
        <autodoc>PreStatusBar() -&gt; StatusBar</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, long style=ST_SIZEGRIP, String name=StatusLineNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="style" type="long" default="wxST_SIZEGRIP"/>
          <param name="name" type="String" default="wxPyStatusLineNameStr"/>
        </paramlist>
      </method>
      <method name="SetFieldsCount" type="" overloaded="no">
        <autodoc>SetFieldsCount(int number=1)</autodoc>
        <paramlist>
          <param name="number" type="int" default="1"/>
        </paramlist>
      </method>
      <method name="GetFieldsCount" type="int" overloaded="no">
        <autodoc>GetFieldsCount() -&gt; int</autodoc>
      </method>
      <method name="SetStatusText" type="" overloaded="no">
        <autodoc>SetStatusText(String text, int number=0)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="number" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetStatusText" type="String" overloaded="no">
        <autodoc>GetStatusText(int number=0) -&gt; String</autodoc>
        <paramlist>
          <param name="number" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="PushStatusText" type="" overloaded="no">
        <autodoc>PushStatusText(String text, int number=0)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="number" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="PopStatusText" type="" overloaded="no">
        <autodoc>PopStatusText(int number=0)</autodoc>
        <paramlist>
          <param name="number" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetStatusWidths" type="" overloaded="no">
        <autodoc>SetStatusWidths(int widths, int widths_field)</autodoc>
        <paramlist>
          <param name="widths" type="int" default=""/>
          <param name="widths_field" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFieldRect" type="Rect" overloaded="no">
        <autodoc>GetFieldRect(int i) -&gt; Rect</autodoc>
        <paramlist>
          <param name="i" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMinHeight" type="" overloaded="no">
        <autodoc>SetMinHeight(int height)</autodoc>
        <paramlist>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBorderX" type="int" overloaded="no">
        <autodoc>GetBorderX() -&gt; int</autodoc>
      </method>
      <method name="GetBorderY" type="int" overloaded="no">
        <autodoc>GetBorderY() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SplitterWindow" oldname="wxSplitterWindow" module="windows">
      <docstring>wx.SplitterWindow manages up to two subwindows or panes,
with an optional vertical or horizontal split which can be
used with the mouse or programmatically.
</docstring>
      <refdoc>
 Styles
    wx.SP_3D               Draws a 3D effect border and sash.
    wx.SP_3DSASH           Draws a 3D effect sash.
    wx.SP_3DBORDER         Synonym for wxSP_BORDER.
    wx.SP_BORDER           Draws a standard border.
    wx.SP_NOBORDER         No border (default).
    wx.SP_NO_XP_THEME      Under Windows XP, switches off the
                           attempt to draw the splitter
                           using Windows XP theming, so the
                           borders and sash will take on the
                           pre-XP look.
    wx.SP_PERMIT_UNSPLIT   Always allow to unsplit, even with
                           the minimum pane size other than zero.
    wx.SP_LIVE_UPDATE      Don't draw XOR line but resize the
                           child windows immediately.

 Events

    EVT_SPLITTER_SASH_POS_CHANGING
                           The sash position is in the
                           process of being changed. May be
                           used to modify the position of
                           the tracking bar to properly
                           reflect the position that would
                           be set if the drag were to be
                           completed at this point.

    EVT_SPLITTER_SASH_POS_CHANGED
                           The sash position was
                           changed. May be used to modify
                           the sash position before it is
                           set, or to prevent the change
                           from taking place. 

    EVT_SPLITTER_UNSPLIT   The splitter has been just unsplit.

    EVT_SPLITTER_DCLICK    The sash was double clicked. The
                           default behaviour is to unsplit
                           the window when this happens
                           (unless the minimum pane size has
                           been set to a value greater than
                           zero.)

</refdoc>
      <baseclass name="Window"/>
      <constructor name="SplitterWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_3D, String name=SplitterNameStr) -&gt; SplitterWindow</autodoc>
        <docstring>Constructor.  Creates and shows a SplitterWindow.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSP_3D"/>
          <param name="name" type="String" default="wxPySplitterNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreSplitterWindow" overloaded="no">
        <autodoc>PreSplitterWindow() -&gt; SplitterWindow</autodoc>
        <docstring>Precreate a SplitterWindow for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_3D, String name=SplitterNameStr) -&gt; bool</autodoc>
        <docstring>Create the GUI part of the SplitterWindow for the 2-phase create.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSP_3D"/>
          <param name="name" type="String" default="wxPySplitterNameStr"/>
        </paramlist>
      </method>
      <method name="GetWindow1" type="Window" overloaded="no">
        <autodoc>GetWindow1() -&gt; Window</autodoc>
        <docstring>Gets the only or left/top pane.</docstring>
      </method>
      <method name="GetWindow2" type="Window" overloaded="no">
        <autodoc>GetWindow2() -&gt; Window</autodoc>
        <docstring>Gets the right/bottom pane.</docstring>
      </method>
      <method name="SetSplitMode" type="" overloaded="no">
        <autodoc>SetSplitMode(int mode)</autodoc>
        <docstring>Sets the split mode.  The mode can be wx.SPLIT_VERTICAL or
wx.SPLIT_HORIZONTAL.  This only sets the internal variable;
does not update the display.</docstring>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSplitMode" type="wxSplitMode" overloaded="no">
        <autodoc>GetSplitMode() -&gt; int</autodoc>
        <docstring>Gets the split mode</docstring>
      </method>
      <method name="Initialize" type="" overloaded="no">
        <autodoc>Initialize(Window window)</autodoc>
        <docstring>Initializes the splitter window to have one pane.  This
should be called if you wish to initially view only a single
pane in the splitter window.</docstring>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="SplitVertically" type="bool" overloaded="no">
        <autodoc>SplitVertically(Window window1, Window window2, int sashPosition=0) -&gt; bool</autodoc>
        <docstring>Initializes the left and right panes of the splitter window.

    window1       The left pane.
    window2       The right pane.
    sashPosition  The initial position of the sash. If this
                  value is positive, it specifies the size
                  of the left pane. If it is negative, it is
                  absolute value gives the size of the right
                  pane. Finally, specify 0 (default) to
                  choose the default position (half of the
                  total window width).

Returns True if successful, False otherwise (the window was
already split).

SplitVertically should be called if you wish to initially
view two panes. It can also be called at any subsequent
time, but the application should check that the window is
not currently split using IsSplit.</docstring>
        <paramlist>
          <param name="window1" type="Window" default=""/>
          <param name="window2" type="Window" default=""/>
          <param name="sashPosition" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SplitHorizontally" type="bool" overloaded="no">
        <autodoc>SplitHorizontally(Window window1, Window window2, int sashPosition=0) -&gt; bool</autodoc>
        <docstring>Initializes the top and bottom panes of the splitter window.

    window1       The top pane.
    window2       The bottom pane.
    sashPosition  The initial position of the sash. If this
                  value is positive, it specifies the size
                  of the upper pane. If it is negative, it
                  is absolute value gives the size of the
                  lower pane. Finally, specify 0 (default)
                  to choose the default position (half of
                  the total window height).

Returns True if successful, False otherwise (the window was
already split).

SplitHorizontally should be called if you wish to initially
view two panes. It can also be called at any subsequent
time, but the application should check that the window is
not currently split using IsSplit.</docstring>
        <paramlist>
          <param name="window1" type="Window" default=""/>
          <param name="window2" type="Window" default=""/>
          <param name="sashPosition" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Unsplit" type="bool" overloaded="no">
        <autodoc>Unsplit(Window toRemove=None) -&gt; bool</autodoc>
        <docstring>Unsplits the window.  Pass the pane to remove, or None to
remove the right or bottom pane.  Returns True if
successful, False otherwise (the window was not split).

This function will not actually delete the pane being
removed; it sends EVT_SPLITTER_UNSPLIT which can be handled
for the desired behaviour. By default, the pane being
removed is only hidden.</docstring>
        <paramlist>
          <param name="toRemove" type="Window" default="NULL"/>
        </paramlist>
      </method>
      <method name="ReplaceWindow" type="bool" overloaded="no">
        <autodoc>ReplaceWindow(Window winOld, Window winNew) -&gt; bool</autodoc>
        <docstring>This function replaces one of the windows managed by the
SplitterWindow with another one. It is in general better to
use it instead of calling Unsplit() and then resplitting the
window back because it will provoke much less flicker. It is
valid to call this function whether the splitter has two
windows or only one.

Both parameters should be non-None and winOld must specify
one of the windows managed by the splitter. If the
parameters are incorrect or the window couldn't be replaced,
False is returned. Otherwise the function will return True,
but please notice that it will not Destroy the replaced
window and you may wish to do it yourself.</docstring>
        <paramlist>
          <param name="winOld" type="Window" default=""/>
          <param name="winNew" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="UpdateSize" type="" overloaded="no">
        <autodoc>UpdateSize()</autodoc>
        <docstring>Causes any pending sizing of the sash and child panes to
take place immediately.

Such resizing normally takes place in idle time, in order to
wait for layout to be completed. However, this can cause
unacceptable flicker as the panes are resized after the
window has been shown. To work around this, you can perform
window layout (for example by sending a size event to the
parent window), and then call this function, before showing
the top-level window.</docstring>
      </method>
      <method name="IsSplit" type="bool" overloaded="no">
        <autodoc>IsSplit() -&gt; bool</autodoc>
        <docstring>Is the window split?</docstring>
      </method>
      <method name="SetSashSize" type="" overloaded="no">
        <autodoc>SetSashSize(int width)</autodoc>
        <docstring>Sets the sash size</docstring>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetBorderSize" type="" overloaded="no">
        <autodoc>SetBorderSize(int width)</autodoc>
        <docstring>Sets the border size</docstring>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSashSize" type="int" overloaded="no">
        <autodoc>GetSashSize() -&gt; int</autodoc>
        <docstring>Gets the sash size</docstring>
      </method>
      <method name="GetBorderSize" type="int" overloaded="no">
        <autodoc>GetBorderSize() -&gt; int</autodoc>
        <docstring>Gets the border size</docstring>
      </method>
      <method name="SetSashPosition" type="" overloaded="no">
        <autodoc>SetSashPosition(int position, bool redraw=True)</autodoc>
        <docstring>Sets the sash position, in pixels.  If redraw is Ttrue then
the panes are resized and the sash and border are redrawn.</docstring>
        <paramlist>
          <param name="position" type="int" default=""/>
          <param name="redraw" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetSashPosition" type="int" overloaded="no">
        <autodoc>GetSashPosition() -&gt; int</autodoc>
        <docstring>Returns the surrent sash position.</docstring>
      </method>
      <method name="SetMinimumPaneSize" type="" overloaded="no">
        <autodoc>SetMinimumPaneSize(int min)</autodoc>
        <docstring>Sets the minimum pane size in pixels.

The default minimum pane size is zero, which means that
either pane can be reduced to zero by dragging the sash,
thus removing one of the panes. To prevent this behaviour (and
veto out-of-range sash dragging), set a minimum size,
for example 20 pixels. If the wx.SP_PERMIT_UNSPLIT style is
used when a splitter window is created, the window may be
unsplit even if minimum size is non-zero.</docstring>
        <paramlist>
          <param name="min" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMinimumPaneSize" type="int" overloaded="no">
        <autodoc>GetMinimumPaneSize() -&gt; int</autodoc>
        <docstring>Gets the minimum pane size in pixels.</docstring>
      </method>
      <method name="SashHitTest" type="bool" overloaded="no">
        <autodoc>SashHitTest(int x, int y, int tolerance=5) -&gt; bool</autodoc>
        <docstring>Tests for x, y over the sash</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="tolerance" type="int" default="5"/>
        </paramlist>
      </method>
      <method name="SizeWindows" type="" overloaded="no">
        <autodoc>SizeWindows()</autodoc>
        <docstring>Resizes subwindows</docstring>
      </method>
      <method name="SetNeedUpdating" type="" overloaded="no">
        <autodoc>SetNeedUpdating(bool needUpdating)</autodoc>
        <paramlist>
          <param name="needUpdating" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetNeedUpdating" type="bool" overloaded="no">
        <autodoc>GetNeedUpdating() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="SplitterEvent" oldname="wxSplitterEvent" module="windows">
      <docstring>This class represents the events generated by a splitter control.</docstring>
      <baseclass name="NotifyEvent"/>
      <constructor name="SplitterEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, SplitterWindow splitter=(wxSplitterWindow *) NULL) -&gt; SplitterEvent</autodoc>
        <docstring>This class represents the events generated by a splitter control.</docstring>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="splitter" type="SplitterWindow" default="(wxSplitterWindow *) NULL"/>
        </paramlist>
      </constructor>
      <method name="SetSashPosition" type="" overloaded="no">
        <autodoc>SetSashPosition(int pos)</autodoc>
        <docstring>This funciton is only meaningful during
EVT_SPLITTER_SASH_POS_CHANGING and
EVT_SPLITTER_SASH_POS_CHANGED events.  In the case of
_CHANGED events, sets the the new sash position. In the case
of _CHANGING events, sets the new tracking bar position so
visual feedback during dragging will represent that change
that will actually take place. Set to -1 from the event
handler code to prevent repositioning.</docstring>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSashPosition" type="int" overloaded="no">
        <autodoc>GetSashPosition() -&gt; int</autodoc>
        <docstring>Returns the new sash position while in
EVT_SPLITTER_SASH_POS_CHANGING and
EVT_SPLITTER_SASH_POS_CHANGED events.</docstring>
      </method>
      <method name="GetWindowBeingRemoved" type="Window" overloaded="no">
        <autodoc>GetWindowBeingRemoved() -&gt; Window</autodoc>
        <docstring>Returns a pointer to the window being removed when a
splitter window is unsplit.</docstring>
      </method>
      <method name="GetX" type="int" overloaded="no">
        <autodoc>GetX() -&gt; int</autodoc>
        <docstring>Returns the x coordinate of the double-click point in a
EVT_SPLITTER_DCLICK event.</docstring>
      </method>
      <method name="GetY" type="int" overloaded="no">
        <autodoc>GetY() -&gt; int</autodoc>
        <docstring>Returns the y coordinate of the double-click point in a
EVT_SPLITTER_DCLICK event.</docstring>
      </method>
    </class>
    <pythoncode>
EVT_SPLITTER_SASH_POS_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, 1 )
EVT_SPLITTER_SASH_POS_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING, 1 )
EVT_SPLITTER_DOUBLECLICKED = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_DOUBLECLICKED, 1 )
EVT_SPLITTER_UNSPLIT = wx.PyEventBinder( wxEVT_COMMAND_SPLITTER_UNSPLIT, 1 )
EVT_SPLITTER_DCLICK = EVT_SPLITTER_DOUBLECLICKED
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SashWindow" oldname="wxSashWindow" module="windows">
      <baseclass name="Window"/>
      <constructor name="SashWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashNameStr) -&gt; SashWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
          <param name="name" type="String" default="wxPySashNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreSashWindow" overloaded="no">
        <autodoc>PreSashWindow() -&gt; SashWindow</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
          <param name="name" type="String" default="wxPySashNameStr"/>
        </paramlist>
      </method>
      <method name="SetSashVisible" type="" overloaded="no">
        <autodoc>SetSashVisible(int edge, bool sash)</autodoc>
        <paramlist>
          <param name="edge" type="wxSashEdgePosition" default=""/>
          <param name="sash" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetSashVisible" type="bool" overloaded="no">
        <autodoc>GetSashVisible(int edge) -&gt; bool</autodoc>
        <paramlist>
          <param name="edge" type="wxSashEdgePosition" default=""/>
        </paramlist>
      </method>
      <method name="SetSashBorder" type="" overloaded="no">
        <autodoc>SetSashBorder(int edge, bool border)</autodoc>
        <paramlist>
          <param name="edge" type="wxSashEdgePosition" default=""/>
          <param name="border" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="HasBorder" type="bool" overloaded="no">
        <autodoc>HasBorder(int edge) -&gt; bool</autodoc>
        <paramlist>
          <param name="edge" type="wxSashEdgePosition" default=""/>
        </paramlist>
      </method>
      <method name="GetEdgeMargin" type="int" overloaded="no">
        <autodoc>GetEdgeMargin(int edge) -&gt; int</autodoc>
        <paramlist>
          <param name="edge" type="wxSashEdgePosition" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultBorderSize" type="" overloaded="no">
        <autodoc>SetDefaultBorderSize(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultBorderSize" type="int" overloaded="no">
        <autodoc>GetDefaultBorderSize() -&gt; int</autodoc>
      </method>
      <method name="SetExtraBorderSize" type="" overloaded="no">
        <autodoc>SetExtraBorderSize(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetExtraBorderSize" type="int" overloaded="no">
        <autodoc>GetExtraBorderSize() -&gt; int</autodoc>
      </method>
      <method name="SetMinimumSizeX" type="" overloaded="no">
        <autodoc>SetMinimumSizeX(int min)</autodoc>
        <paramlist>
          <param name="min" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMinimumSizeY" type="" overloaded="no">
        <autodoc>SetMinimumSizeY(int min)</autodoc>
        <paramlist>
          <param name="min" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMinimumSizeX" type="int" overloaded="no">
        <autodoc>GetMinimumSizeX() -&gt; int</autodoc>
      </method>
      <method name="GetMinimumSizeY" type="int" overloaded="no">
        <autodoc>GetMinimumSizeY() -&gt; int</autodoc>
      </method>
      <method name="SetMaximumSizeX" type="" overloaded="no">
        <autodoc>SetMaximumSizeX(int max)</autodoc>
        <paramlist>
          <param name="max" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMaximumSizeY" type="" overloaded="no">
        <autodoc>SetMaximumSizeY(int max)</autodoc>
        <paramlist>
          <param name="max" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMaximumSizeX" type="int" overloaded="no">
        <autodoc>GetMaximumSizeX() -&gt; int</autodoc>
      </method>
      <method name="GetMaximumSizeY" type="int" overloaded="no">
        <autodoc>GetMaximumSizeY() -&gt; int</autodoc>
      </method>
      <method name="SashHitTest" type="wxSashEdgePosition" overloaded="no">
        <autodoc>SashHitTest(int x, int y, int tolerance=2) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="tolerance" type="int" default="2"/>
        </paramlist>
      </method>
      <method name="SizeWindows" type="" overloaded="no">
        <autodoc>SizeWindows()</autodoc>
      </method>
    </class>
    <class name="SashEvent" oldname="wxSashEvent" module="windows">
      <baseclass name="CommandEvent"/>
      <constructor name="SashEvent" overloaded="no">
        <autodoc>__init__(int id=0, int edge=SASH_NONE) -&gt; SashEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
          <param name="edge" type="wxSashEdgePosition" default="wxSASH_NONE"/>
        </paramlist>
      </constructor>
      <method name="SetEdge" type="" overloaded="no">
        <autodoc>SetEdge(int edge)</autodoc>
        <paramlist>
          <param name="edge" type="wxSashEdgePosition" default=""/>
        </paramlist>
      </method>
      <method name="GetEdge" type="wxSashEdgePosition" overloaded="no">
        <autodoc>GetEdge() -&gt; int</autodoc>
      </method>
      <method name="SetDragRect" type="" overloaded="no">
        <autodoc>SetDragRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="GetDragRect" type="Rect" overloaded="no">
        <autodoc>GetDragRect() -&gt; Rect</autodoc>
      </method>
      <method name="SetDragStatus" type="" overloaded="no">
        <autodoc>SetDragStatus(int status)</autodoc>
        <paramlist>
          <param name="status" type="wxSashDragStatus" default=""/>
        </paramlist>
      </method>
      <method name="GetDragStatus" type="wxSashDragStatus" overloaded="no">
        <autodoc>GetDragStatus() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
    EVT_SASH_DRAGGED = wx.PyEventBinder( wxEVT_SASH_DRAGGED, 1 )
    EVT_SASH_DRAGGED_RANGE = wx.PyEventBinder( wxEVT_SASH_DRAGGED, 2 )
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="QueryLayoutInfoEvent" oldname="wxQueryLayoutInfoEvent" module="windows">
      <baseclass name="Event"/>
      <constructor name="QueryLayoutInfoEvent" overloaded="no">
        <autodoc>__init__(int id=0) -&gt; QueryLayoutInfoEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="SetRequestedLength" type="" overloaded="no">
        <autodoc>SetRequestedLength(int length)</autodoc>
        <paramlist>
          <param name="length" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetRequestedLength" type="int" overloaded="no">
        <autodoc>GetRequestedLength() -&gt; int</autodoc>
      </method>
      <method name="SetFlags" type="" overloaded="no">
        <autodoc>SetFlags(int flags)</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFlags" type="int" overloaded="no">
        <autodoc>GetFlags() -&gt; int</autodoc>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
      </method>
      <method name="SetOrientation" type="" overloaded="no">
        <autodoc>SetOrientation(int orient)</autodoc>
        <paramlist>
          <param name="orient" type="wxLayoutOrientation" default=""/>
        </paramlist>
      </method>
      <method name="GetOrientation" type="wxLayoutOrientation" overloaded="no">
        <autodoc>GetOrientation() -&gt; int</autodoc>
      </method>
      <method name="SetAlignment" type="" overloaded="no">
        <autodoc>SetAlignment(int align)</autodoc>
        <paramlist>
          <param name="align" type="wxLayoutAlignment" default=""/>
        </paramlist>
      </method>
      <method name="GetAlignment" type="wxLayoutAlignment" overloaded="no">
        <autodoc>GetAlignment() -&gt; int</autodoc>
      </method>
    </class>
    <class name="CalculateLayoutEvent" oldname="wxCalculateLayoutEvent" module="windows">
      <baseclass name="Event"/>
      <constructor name="CalculateLayoutEvent" overloaded="no">
        <autodoc>__init__(int id=0) -&gt; CalculateLayoutEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="SetFlags" type="" overloaded="no">
        <autodoc>SetFlags(int flags)</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFlags" type="int" overloaded="no">
        <autodoc>GetFlags() -&gt; int</autodoc>
      </method>
      <method name="SetRect" type="" overloaded="no">
        <autodoc>SetRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="GetRect" type="Rect" overloaded="no">
        <autodoc>GetRect() -&gt; Rect</autodoc>
      </method>
    </class>
    <pythoncode>
    EVT_QUERY_LAYOUT_INFO = wx.PyEventBinder( wxEVT_QUERY_LAYOUT_INFO )
    EVT_CALCULATE_LAYOUT = wx.PyEventBinder( wxEVT_CALCULATE_LAYOUT )
</pythoncode>
    <class name="SashLayoutWindow" oldname="wxSashLayoutWindow" module="windows">
      <baseclass name="SashWindow"/>
      <constructor name="SashLayoutWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashLayoutNameStr) -&gt; SashLayoutWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
          <param name="name" type="String" default="wxPySashLayoutNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreSashLayoutWindow" overloaded="no">
        <autodoc>PreSashLayoutWindow() -&gt; SashLayoutWindow</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxSW_3D, 
    String name=SashLayoutNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCLIP_CHILDREN|wxSW_3D"/>
          <param name="name" type="String" default="wxPySashLayoutNameStr"/>
        </paramlist>
      </method>
      <method name="GetAlignment" type="wxLayoutAlignment" overloaded="no">
        <autodoc>GetAlignment() -&gt; int</autodoc>
      </method>
      <method name="GetOrientation" type="wxLayoutOrientation" overloaded="no">
        <autodoc>GetOrientation() -&gt; int</autodoc>
      </method>
      <method name="SetAlignment" type="" overloaded="no">
        <autodoc>SetAlignment(int alignment)</autodoc>
        <paramlist>
          <param name="alignment" type="wxLayoutAlignment" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultSize" type="" overloaded="no">
        <autodoc>SetDefaultSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetOrientation" type="" overloaded="no">
        <autodoc>SetOrientation(int orientation)</autodoc>
        <paramlist>
          <param name="orientation" type="wxLayoutOrientation" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="LayoutAlgorithm" oldname="wxLayoutAlgorithm" module="windows">
      <baseclass name="Object"/>
      <constructor name="LayoutAlgorithm" overloaded="no">
        <autodoc>__init__() -&gt; LayoutAlgorithm</autodoc>
      </constructor>
      <destructor name="~wxLayoutAlgorithm" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="LayoutMDIFrame" type="bool" overloaded="no">
        <autodoc>LayoutMDIFrame(MDIParentFrame frame, Rect rect=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="frame" type="wxMDIParentFrame" default=""/>
          <param name="rect" type="Rect" default="NULL"/>
        </paramlist>
      </method>
      <method name="LayoutFrame" type="bool" overloaded="no">
        <autodoc>LayoutFrame(Frame frame, Window mainWindow=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="frame" type="Frame" default=""/>
          <param name="mainWindow" type="Window" default="NULL"/>
        </paramlist>
      </method>
      <method name="LayoutWindow" type="bool" overloaded="no">
        <autodoc>LayoutWindow(Window parent, Window mainWindow=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="mainWindow" type="Window" default="NULL"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PopupWindow" oldname="wxPopupWindow" module="windows">
      <baseclass name="Window"/>
      <constructor name="PopupWindow" overloaded="no">
        <autodoc>__init__(Window parent, int flags=BORDER_NONE) -&gt; PopupWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="flags" type="int" default="wxBORDER_NONE"/>
        </paramlist>
      </constructor>
      <constructor name="PrePopupWindow" overloaded="no">
        <autodoc>PrePopupWindow() -&gt; PopupWindow</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int flags=BORDER_NONE) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="flags" type="int" default="wxBORDER_NONE"/>
        </paramlist>
      </method>
      <method name="Position" type="" overloaded="no">
        <autodoc>Position(Point ptOrigin, Size size)</autodoc>
        <paramlist>
          <param name="ptOrigin" type="Point" default=""/>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PopupTransientWindow" oldname="wxPyPopupTransientWindow" module="windows">
      <baseclass name="PopupWindow"/>
      <constructor name="wxPyPopupTransientWindow" overloaded="no">
        <autodoc>__init__(Window parent, int style=BORDER_NONE) -&gt; PopupTransientWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="style" type="int" default="wxBORDER_NONE"/>
        </paramlist>
      </constructor>
      <constructor name="PrePopupTransientWindow" overloaded="no">
        <autodoc>PrePopupTransientWindow() -&gt; PopupTransientWindow</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Popup" type="" overloaded="no">
        <autodoc>Popup(Window focus=None)</autodoc>
        <paramlist>
          <param name="focus" type="Window" default="NULL"/>
        </paramlist>
      </method>
      <method name="Dismiss" type="" overloaded="no">
        <autodoc>Dismiss()</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="TipWindow" oldname="wxTipWindow" module="windows">
      <baseclass name="PopupTransientWindow"/>
      <constructor name="TipWindow" overloaded="no">
        <autodoc>__init__(Window parent, String text, int maxLength=100, Rect rectBound=None) -&gt; TipWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="text" type="String" default=""/>
          <param name="maxLength" type="int" default="100"/>
          <param name="rectBound" type="Rect" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="SetBoundingRect" type="" overloaded="no">
        <autodoc>SetBoundingRect(Rect rectBound)</autodoc>
        <paramlist>
          <param name="rectBound" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="Close" type="" overloaded="no">
        <autodoc>Close()</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="VScrolledWindow" oldname="wxPyVScrolledWindow" module="windows">
      <baseclass name="Panel"/>
      <constructor name="wxPyVScrolledWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=PanelNameStr) -&gt; VScrolledWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="wxID_ANY"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreVScrolledWindow" overloaded="no">
        <autodoc>PreVScrolledWindow() -&gt; VScrolledWindow</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=PanelNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="wxID_ANY"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </method>
      <method name="SetLineCount" type="" overloaded="no">
        <autodoc>SetLineCount(size_t count)</autodoc>
        <paramlist>
          <param name="count" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="ScrollToLine" type="bool" overloaded="no">
        <autodoc>ScrollToLine(size_t line) -&gt; bool</autodoc>
        <paramlist>
          <param name="line" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="ScrollLines" type="bool" overloaded="no">
        <autodoc>ScrollLines(int lines) -&gt; bool</autodoc>
        <docstring>If the platform and window class supports it, scrolls the window by
the given number of lines down, if lines is positive, or up if lines
is negative.  Returns True if the window was scrolled, False if it was
already on top/bottom and nothing was done.</docstring>
        <paramlist>
          <param name="lines" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ScrollPages" type="bool" overloaded="no">
        <autodoc>ScrollPages(int pages) -&gt; bool</autodoc>
        <docstring>If the platform and window class supports it,  scrolls the window by
the given number of pages down, if pages is positive, or up if pages
is negative.  Returns True if the window was scrolled, False if it was
already on top/bottom and nothing was done.</docstring>
        <paramlist>
          <param name="pages" type="int" default=""/>
        </paramlist>
      </method>
      <method name="RefreshLine" type="" overloaded="no">
        <autodoc>RefreshLine(size_t line)</autodoc>
        <paramlist>
          <param name="line" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="RefreshLines" type="" overloaded="no">
        <autodoc>RefreshLines(size_t from, size_t to)</autodoc>
        <paramlist>
          <param name="from" type="size_t" default=""/>
          <param name="to" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="HitTestXT" type="int" overloaded="no">
        <autodoc>HitTestXT(int x, int y) -&gt; int</autodoc>
        <docstring>Test where the given (in client coords) point lies</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="int" overloaded="no">
        <autodoc>HitTest(Point pt) -&gt; int</autodoc>
        <docstring>Test where the given (in client coords) point lies</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="RefreshAll" type="" overloaded="no">
        <autodoc>RefreshAll()</autodoc>
      </method>
      <method name="GetLineCount" type="size_t" overloaded="no">
        <autodoc>GetLineCount() -&gt; size_t</autodoc>
      </method>
      <method name="GetFirstVisibleLine" type="size_t" overloaded="no">
        <autodoc>GetFirstVisibleLine() -&gt; size_t</autodoc>
      </method>
      <method name="GetLastVisibleLine" type="size_t" overloaded="no">
        <autodoc>GetLastVisibleLine() -&gt; size_t</autodoc>
      </method>
      <method name="IsVisible" type="bool" overloaded="no">
        <autodoc>IsVisible(size_t line) -&gt; bool</autodoc>
        <paramlist>
          <param name="line" type="size_t" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="VListBox" oldname="wxPyVListBox" module="windows">
      <baseclass name="VScrolledWindow"/>
      <constructor name="wxPyVListBox" overloaded="no">
        <autodoc>__init__(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; VListBox</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="wxID_ANY"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyVListBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreVListBox" overloaded="no">
        <autodoc>PreVListBox() -&gt; VListBox</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="wxID_ANY"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyVListBoxNameStr"/>
        </paramlist>
      </method>
      <method name="GetItemCount" type="size_t" overloaded="no">
        <autodoc>GetItemCount() -&gt; size_t</autodoc>
      </method>
      <method name="HasMultipleSelection" type="bool" overloaded="no">
        <autodoc>HasMultipleSelection() -&gt; bool</autodoc>
      </method>
      <method name="GetSelection" type="int" overloaded="no">
        <autodoc>GetSelection() -&gt; int</autodoc>
      </method>
      <method name="IsCurrent" type="bool" overloaded="no">
        <autodoc>IsCurrent(size_t item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="IsSelected" type="bool" overloaded="no">
        <autodoc>IsSelected(size_t item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectedCount" type="size_t" overloaded="no">
        <autodoc>GetSelectedCount() -&gt; size_t</autodoc>
      </method>
      <method name="GetFirstSelected" type="int" overloaded="no">
        <autodoc>GetFirstSelected(unsigned long cookie) -&gt; int</autodoc>
        <paramlist>
          <param name="cookie" type="unsigned long" default=""/>
        </paramlist>
      </method>
      <method name="GetNextSelected" type="int" overloaded="no">
        <autodoc>GetNextSelected(unsigned long cookie) -&gt; int</autodoc>
        <paramlist>
          <param name="cookie" type="unsigned long" default=""/>
        </paramlist>
      </method>
      <method name="GetMargins" type="Point" overloaded="no">
        <autodoc>GetMargins() -&gt; Point</autodoc>
      </method>
      <method name="GetSelectionBackground" type="Colour" overloaded="no">
        <autodoc>GetSelectionBackground() -&gt; Colour</autodoc>
      </method>
      <method name="SetItemCount" type="" overloaded="no">
        <autodoc>SetItemCount(size_t count)</autodoc>
        <paramlist>
          <param name="count" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int selection)</autodoc>
        <paramlist>
          <param name="selection" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Select" type="bool" overloaded="no">
        <autodoc>Select(size_t item, bool select=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="size_t" default=""/>
          <param name="select" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SelectRange" type="bool" overloaded="no">
        <autodoc>SelectRange(size_t from, size_t to) -&gt; bool</autodoc>
        <paramlist>
          <param name="from" type="size_t" default=""/>
          <param name="to" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="Toggle" type="" overloaded="no">
        <autodoc>Toggle(size_t item)</autodoc>
        <paramlist>
          <param name="item" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SelectAll" type="bool" overloaded="no">
        <autodoc>SelectAll() -&gt; bool</autodoc>
      </method>
      <method name="DeselectAll" type="bool" overloaded="no">
        <autodoc>DeselectAll() -&gt; bool</autodoc>
      </method>
      <method name="SetMargins" type="" overloaded="no">
        <autodoc>SetMargins(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginsXY" type="" overloaded="no">
        <autodoc>SetMarginsXY(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSelectionBackground" type="" overloaded="no">
        <autodoc>SetSelectionBackground(Colour col)</autodoc>
        <paramlist>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="HtmlListBox" oldname="wxPyHtmlListBox" module="windows">
      <baseclass name="VListBox"/>
      <constructor name="wxPyHtmlListBox" overloaded="no">
        <autodoc>__init__(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; HtmlListBox</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="wxID_ANY"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyVListBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreHtmlListBox" overloaded="no">
        <autodoc>PreHtmlListBox() -&gt; HtmlListBox</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=VListBoxNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="wxID_ANY"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyVListBoxNameStr"/>
        </paramlist>
      </method>
      <method name="RefreshAll" type="" overloaded="no">
        <autodoc>RefreshAll()</autodoc>
      </method>
      <method name="SetItemCount" type="" overloaded="no">
        <autodoc>SetItemCount(size_t count)</autodoc>
        <paramlist>
          <param name="count" type="size_t" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="TaskBarIcon" oldname="wxTaskBarIcon" module="windows">
      <baseclass name="EvtHandler"/>
      <constructor name="TaskBarIcon" overloaded="no">
        <autodoc>__init__() -&gt; TaskBarIcon</autodoc>
      </constructor>
      <destructor name="~wxTaskBarIcon" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="IsIconInstalled" type="bool" overloaded="no">
        <autodoc>IsIconInstalled() -&gt; bool</autodoc>
      </method>
      <method name="SetIcon" type="bool" overloaded="no">
        <autodoc>SetIcon(Icon icon, String tooltip=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
          <param name="tooltip" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="RemoveIcon" type="bool" overloaded="no">
        <autodoc>RemoveIcon() -&gt; bool</autodoc>
      </method>
      <method name="PopupMenu" type="bool" overloaded="no">
        <autodoc>PopupMenu(Menu menu) -&gt; bool</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="TaskBarIconEvent" oldname="wxTaskBarIconEvent" module="windows">
      <baseclass name="Event"/>
      <constructor name="TaskBarIconEvent" overloaded="no">
        <autodoc>__init__(wxEventType evtType, TaskBarIcon tbIcon) -&gt; TaskBarIconEvent</autodoc>
        <paramlist>
          <param name="evtType" type="wxEventType" default=""/>
          <param name="tbIcon" type="TaskBarIcon" default=""/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
EVT_TASKBAR_MOVE = wx.PyEventBinder (         wxEVT_TASKBAR_MOVE )
EVT_TASKBAR_LEFT_DOWN = wx.PyEventBinder (    wxEVT_TASKBAR_LEFT_DOWN )
EVT_TASKBAR_LEFT_UP = wx.PyEventBinder (      wxEVT_TASKBAR_LEFT_UP )
EVT_TASKBAR_RIGHT_DOWN = wx.PyEventBinder (   wxEVT_TASKBAR_RIGHT_DOWN )
EVT_TASKBAR_RIGHT_UP = wx.PyEventBinder (     wxEVT_TASKBAR_RIGHT_UP )
EVT_TASKBAR_LEFT_DCLICK = wx.PyEventBinder (  wxEVT_TASKBAR_LEFT_DCLICK )
EVT_TASKBAR_RIGHT_DCLICK = wx.PyEventBinder ( wxEVT_TASKBAR_RIGHT_DCLICK )
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ColourData" oldname="wxColourData" module="windows">
      <docstring>This class holds a variety of information related to colour dialogs.</docstring>
      <baseclass name="Object"/>
      <constructor name="ColourData" overloaded="no">
        <autodoc>__init__() -&gt; ColourData</autodoc>
        <docstring>Constructor, sets default values.</docstring>
      </constructor>
      <destructor name="~wxColourData" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetChooseFull" type="bool" overloaded="no">
        <autodoc>GetChooseFull() -&gt; bool</autodoc>
        <docstring>Under Windows, determines whether the Windows colour dialog will display
the full dialog with custom colour selection controls. Has no meaning
under other platforms.  The default value is true.</docstring>
      </method>
      <method name="GetColour" type="Colour" overloaded="no">
        <autodoc>GetColour() -&gt; Colour</autodoc>
        <docstring>Gets the colour (pre)selected by the dialog.</docstring>
      </method>
      <method name="GetCustomColour" type="Colour" overloaded="no">
        <autodoc>GetCustomColour(int i) -&gt; Colour</autodoc>
        <docstring>Gets the i'th custom colour associated with the colour dialog. i should
be an integer between 0 and 15. The default custom colours are all white.</docstring>
        <paramlist>
          <param name="i" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetChooseFull" type="" overloaded="no">
        <autodoc>SetChooseFull(int flag)</autodoc>
        <docstring>Under Windows, tells the Windows colour dialog to display the full dialog
with custom colour selection controls. Under other platforms, has no effect.
The default value is true.</docstring>
        <paramlist>
          <param name="flag" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(Colour colour)</autodoc>
        <docstring>Sets the default colour for the colour dialog.  The default colour is black.</docstring>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetCustomColour" type="" overloaded="no">
        <autodoc>SetCustomColour(int i, Colour colour)</autodoc>
        <docstring>Sets the i'th custom colour for the colour dialog. i should be an integer
between 0 and 15. The default custom colours are all white.</docstring>
        <paramlist>
          <param name="i" type="int" default=""/>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="ColourDialog" oldname="wxColourDialog" module="windows">
      <docstring>This class represents the colour chooser dialog.</docstring>
      <baseclass name="Dialog"/>
      <constructor name="ColourDialog" overloaded="no">
        <autodoc>__init__(Window parent, ColourData data=None) -&gt; ColourDialog</autodoc>
        <docstring>Constructor. Pass a parent window, and optionally a ColourData, which
will be copied to the colour dialog's internal ColourData instance.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="data" type="ColourData" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetColourData" type="ColourData" overloaded="no">
        <autodoc>GetColourData() -&gt; ColourData</autodoc>
        <docstring>Returns a reference to the ColourData used by the dialog.</docstring>
      </method>
    </class>
    <class name="DirDialog" oldname="wxDirDialog" module="windows">
      <docstring>This class represents the directory chooser dialog.</docstring>
      <refdoc>
 Styles
    wxDD_NEW_DIR_BUTTON     Add "Create new directory" button and allow
                            directory names to be editable. On Windows the new
                            directory button is only available with recent
                            versions of the common dialogs.</refdoc>
      <baseclass name="Dialog"/>
      <constructor name="DirDialog" overloaded="no">
        <autodoc>__init__(Window parent, String message=DirSelectorPromptStr, 
    String defaultPath=EmptyString, long style=0, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    String name=DirDialogNameStr) -&gt; DirDialog</autodoc>
        <docstring>Constructor.  Use ShowModal method to show the dialog.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="message" type="String" default="wxPyDirSelectorPromptStr"/>
          <param name="defaultPath" type="String" default="wxPyEmptyString"/>
          <param name="style" type="long" default="0"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="name" type="String" default="wxPyDirDialogNameStr"/>
        </paramlist>
      </constructor>
      <method name="GetPath" type="String" overloaded="no">
        <autodoc>GetPath() -&gt; String</autodoc>
        <docstring>Returns the default or user-selected path.</docstring>
      </method>
      <method name="GetMessage" type="String" overloaded="no">
        <autodoc>GetMessage() -&gt; String</autodoc>
        <docstring>Returns the message that will be displayed on the dialog.</docstring>
      </method>
      <method name="GetStyle" type="long" overloaded="no">
        <autodoc>GetStyle() -&gt; long</autodoc>
        <docstring>Returns the dialog style.</docstring>
      </method>
      <method name="SetMessage" type="" overloaded="no">
        <autodoc>SetMessage(String message)</autodoc>
        <docstring>Sets the message that will be displayed on the dialog.</docstring>
        <paramlist>
          <param name="message" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetPath" type="" overloaded="no">
        <autodoc>SetPath(String path)</autodoc>
        <docstring>Sets the default path.</docstring>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FileDialog" oldname="wxFileDialog" module="windows">
      <docstring>This class represents the file chooser dialog.</docstring>
      <refdoc>
In Windows, this is the common file selector dialog. In X, this is a file
selector box with somewhat less functionality. The path and filename are
distinct elements of a full file pathname. If path is "", the current
directory will be used. If filename is "", no default filename will be
supplied. The wildcard determines what files are displayed in the file
selector, and file extension supplies a type extension for the required
filename.

Both the X and Windows versions implement a wildcard filter. Typing a filename
containing wildcards (*, ?) in the filename text item, and clicking on Ok,
will result in only those files matching the pattern being displayed. The
wildcard may be a specification for multiple types of file with a description
for each, such as:

   "BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif"

 Styles
    wx.OPEN              This is an open dialog.

    wx.SAVE              This is a save dialog.

    wx.HIDE_READONLY     For open dialog only: hide the checkbox allowing to
                         open the file in read-only mode.

    wx.OVERWRITE_PROMPT  For save dialog only: prompt for a confirmation if a
                         file will be overwritten.

    wx.MULTIPLE          For open dialog only: allows selecting multiple files.

    wx.CHANGE_DIR        Change the current working directory to the directory
                         where the file(s) chosen by the user are.
</refdoc>
      <baseclass name="Dialog"/>
      <constructor name="FileDialog" overloaded="no">
        <autodoc>__init__(Window parent, String message=FileSelectorPromptStr, 
    String defaultDir=EmptyString, String defaultFile=EmptyString, 
    String wildcard=FileSelectorDefaultWildcardStr, 
    long style=0, Point pos=DefaultPosition) -&gt; FileDialog</autodoc>
        <docstring>Constructor.  Use ShowModal method to show the dialog.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="message" type="String" default="wxPyFileSelectorPromptStr"/>
          <param name="defaultDir" type="String" default="wxPyEmptyString"/>
          <param name="defaultFile" type="String" default="wxPyEmptyString"/>
          <param name="wildcard" type="String" default="wxPyFileSelectorDefaultWildcardStr"/>
          <param name="style" type="long" default="0"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </constructor>
      <method name="SetMessage" type="" overloaded="no">
        <autodoc>SetMessage(String message)</autodoc>
        <docstring>Sets the message that will be displayed on the dialog.</docstring>
        <paramlist>
          <param name="message" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetPath" type="" overloaded="no">
        <autodoc>SetPath(String path)</autodoc>
        <docstring>Sets the path (the combined directory and filename that will
be returned when the dialog is dismissed).</docstring>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetDirectory" type="" overloaded="no">
        <autodoc>SetDirectory(String dir)</autodoc>
        <docstring>Sets the default directory.</docstring>
        <paramlist>
          <param name="dir" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetFilename" type="" overloaded="no">
        <autodoc>SetFilename(String name)</autodoc>
        <docstring>Sets the default filename.</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetWildcard" type="" overloaded="no">
        <autodoc>SetWildcard(String wildCard)</autodoc>
        <docstring>Sets the wildcard, which can contain multiple file types, for example:
    "BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif"</docstring>
        <paramlist>
          <param name="wildCard" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetStyle" type="" overloaded="no">
        <autodoc>SetStyle(long style)</autodoc>
        <docstring>Sets the dialog style.</docstring>
        <paramlist>
          <param name="style" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetFilterIndex" type="" overloaded="no">
        <autodoc>SetFilterIndex(int filterIndex)</autodoc>
        <docstring>Sets the default filter index, starting from zero.</docstring>
        <paramlist>
          <param name="filterIndex" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMessage" type="String" overloaded="no">
        <autodoc>GetMessage() -&gt; String</autodoc>
        <docstring>Returns the message that will be displayed on the dialog.</docstring>
      </method>
      <method name="GetPath" type="String" overloaded="no">
        <autodoc>GetPath() -&gt; String</autodoc>
        <docstring>Returns the full path (directory and filename) of the selected file.</docstring>
      </method>
      <method name="GetDirectory" type="String" overloaded="no">
        <autodoc>GetDirectory() -&gt; String</autodoc>
        <docstring>Returns the default directory.</docstring>
      </method>
      <method name="GetFilename" type="String" overloaded="no">
        <autodoc>GetFilename() -&gt; String</autodoc>
        <docstring>Returns the default filename.</docstring>
      </method>
      <method name="GetWildcard" type="String" overloaded="no">
        <autodoc>GetWildcard() -&gt; String</autodoc>
        <docstring>Returns the file dialog wildcard.</docstring>
      </method>
      <method name="GetStyle" type="long" overloaded="no">
        <autodoc>GetStyle() -&gt; long</autodoc>
        <docstring>Returns the dialog style.</docstring>
      </method>
      <method name="GetFilterIndex" type="int" overloaded="no">
        <autodoc>GetFilterIndex() -&gt; int</autodoc>
        <docstring>Returns the index into the list of filters supplied, optionally, in
the wildcard parameter. Before the dialog is shown, this is the index
which will be used when the dialog is first displayed. After the dialog
is shown, this is the index selected by the user.</docstring>
      </method>
      <method name="GetFilenames" type="PyObject" overloaded="no">
        <autodoc>GetFilenames() -&gt; PyObject</autodoc>
        <docstring>Returns a list of filenames chosen in the dialog.  This function should
only be used with the dialogs which have wx.MULTIPLE style, use
GetFilename for the others.</docstring>
      </method>
      <method name="GetPaths" type="PyObject" overloaded="no">
        <autodoc>GetPaths() -&gt; PyObject</autodoc>
        <docstring>Fills the array paths with the full paths of the files chosen. This
function should only be used with the dialogs which have wx.MULTIPLE style,
use GetPath for the others.</docstring>
      </method>
    </class>
    <class name="MultiChoiceDialog" oldname="wxMultiChoiceDialog" module="windows">
      <docstring>A simple dialog with a multi selection listbox.</docstring>
      <baseclass name="Dialog"/>
      <constructor name="MultiChoiceDialog" overloaded="no">
        <autodoc>__init__(Window parent, String message, String caption,
    List choices=[], long style=CHOICEDLG_STYLE,
    Point pos=DefaultPosition) -&gt; MultiChoiceDialog</autodoc>
        <docstring>Constructor.  Use ShowModal method to show the dialog.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="message" type="String" default=""/>
          <param name="caption" type="String" default=""/>
          <param name="choices" type="int" default="0"/>
          <param name="choices_array" type="String" default=""/>
          <param name="style" type="long" default="wxCHOICEDLG_STYLE"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </constructor>
      <method name="SetSelections" type="" overloaded="no">
        <autodoc>SetSelections(List selections)</autodoc>
        <docstring>Specify the items in the list that shoudl be selected, using a list of integers.</docstring>
        <paramlist>
          <param name="selections" type="wxArrayInt" default=""/>
        </paramlist>
      </method>
      <method name="GetSelections" type="PyObject" overloaded="no">
        <autodoc>GetSelections() -&gt; [selections]</autodoc>
        <docstring>Returns a list of integers representing the items that are selected.</docstring>
      </method>
    </class>
    <class name="SingleChoiceDialog" oldname="wxSingleChoiceDialog" module="windows">
      <docstring>A simple dialog with a single selection listbox.</docstring>
      <baseclass name="Dialog"/>
      <constructor name="SingleChoiceDialog" overloaded="no">
        <autodoc>__init__(Window parent, String message, String caption,
    List choices=[], long style=CHOICEDLG_STYLE,
    Point pos=DefaultPosition) -&gt; SingleChoiceDialog</autodoc>
        <docstring>Constructor.  Use ShowModal method to show the dialog.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="message" type="String" default=""/>
          <param name="caption" type="String" default=""/>
          <param name="choices" type="int" default=""/>
          <param name="choices_array" type="String" default=""/>
          <param name="style" type="long" default="wxCHOICEDLG_STYLE"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </constructor>
      <method name="GetSelection" type="int" overloaded="no">
        <autodoc>GetSelection() -&gt; int</autodoc>
        <docstring>Get the index of teh currently selected item.</docstring>
      </method>
      <method name="GetStringSelection" type="String" overloaded="no">
        <autodoc>GetStringSelection() -&gt; String</autodoc>
        <docstring>Returns the string value of the currently selected item</docstring>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int sel)</autodoc>
        <docstring>Set the current selected item to sel</docstring>
        <paramlist>
          <param name="sel" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="TextEntryDialog" oldname="wxTextEntryDialog" module="windows">
      <docstring>A dialog with text control, [ok] and [cancel] buttons</docstring>
      <baseclass name="Dialog"/>
      <constructor name="TextEntryDialog" overloaded="no">
        <autodoc>__init__(Window parent, String message, String caption=GetTextFromUserPromptStr, 
    String defaultValue=EmptyString, 
    long style=wxOK|wxCANCEL|wxCENTRE, Point pos=DefaultPosition) -&gt; TextEntryDialog</autodoc>
        <docstring>Constructor.  Use ShowModal method to show the dialog.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="message" type="String" default=""/>
          <param name="caption" type="String" default="wxPyGetTextFromUserPromptStr"/>
          <param name="defaultValue" type="String" default="wxPyEmptyString"/>
          <param name="style" type="long" default="wxOK|wxCANCEL|wxCENTRE"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
        <docstring>Returns the text that the user has entered if the user has pressed OK,
or the original value if the user has pressed Cancel.</docstring>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(String value)</autodoc>
        <docstring>Sets the default text value.</docstring>
        <paramlist>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FontData" oldname="wxFontData" module="windows">
      <docstring>This class holds a variety of information related to font dialogs.</docstring>
      <baseclass name="Object"/>
      <constructor name="FontData" overloaded="no">
        <autodoc>__init__() -&gt; FontData</autodoc>
        <docstring>This class holds a variety of information related to font dialogs.</docstring>
      </constructor>
      <destructor name="~wxFontData" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="EnableEffects" type="" overloaded="no">
        <autodoc>EnableEffects(bool enable)</autodoc>
        <docstring>Enables or disables 'effects' under MS Windows only. This refers
to the controls for manipulating colour, strikeout and underline
properties.  The default value is true.</docstring>
        <paramlist>
          <param name="enable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetAllowSymbols" type="bool" overloaded="no">
        <autodoc>GetAllowSymbols() -&gt; bool</autodoc>
        <docstring>Under MS Windows, returns a flag determining whether symbol fonts can be
selected. Has no effect on other platforms. The default value is true.</docstring>
      </method>
      <method name="GetColour" type="Colour" overloaded="no">
        <autodoc>GetColour() -&gt; Colour</autodoc>
        <docstring>Gets the colour associated with the font dialog. The default value is black.</docstring>
      </method>
      <method name="GetChosenFont" type="Font" overloaded="no">
        <autodoc>GetChosenFont() -&gt; Font</autodoc>
        <docstring>Gets the font chosen by the user.</docstring>
      </method>
      <method name="GetEnableEffects" type="bool" overloaded="no">
        <autodoc>GetEnableEffects() -&gt; bool</autodoc>
        <docstring>Determines whether 'effects' are enabled under Windows.</docstring>
      </method>
      <method name="GetInitialFont" type="Font" overloaded="no">
        <autodoc>GetInitialFont() -&gt; Font</autodoc>
        <docstring>Gets the font that will be initially used by the font dialog. This should have
previously been set by the application.</docstring>
      </method>
      <method name="GetShowHelp" type="bool" overloaded="no">
        <autodoc>GetShowHelp() -&gt; bool</autodoc>
        <docstring>Returns true if the Help button will be shown (Windows only).  The default
value is false.</docstring>
      </method>
      <method name="SetAllowSymbols" type="" overloaded="no">
        <autodoc>SetAllowSymbols(bool allowSymbols)</autodoc>
        <docstring>Under MS Windows, determines whether symbol fonts can be selected. Has no
effect on other platforms.  The default value is true.</docstring>
        <paramlist>
          <param name="allowSymbols" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetChosenFont" type="" overloaded="no">
        <autodoc>SetChosenFont(Font font)</autodoc>
        <docstring>Sets the font that will be returned to the user (for internal use only).</docstring>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(Colour colour)</autodoc>
        <docstring>Sets the colour that will be used for the font foreground colour.  The default
colour is black.</docstring>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetInitialFont" type="" overloaded="no">
        <autodoc>SetInitialFont(Font font)</autodoc>
        <docstring>Sets the font that will be initially used by the font dialog.</docstring>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetRange" type="" overloaded="no">
        <autodoc>SetRange(int min, int max)</autodoc>
        <docstring>Sets the valid range for the font point size (Windows only).  The default is
0, 0 (unrestricted range).</docstring>
        <paramlist>
          <param name="min" type="int" default=""/>
          <param name="max" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetShowHelp" type="" overloaded="no">
        <autodoc>SetShowHelp(bool showHelp)</autodoc>
        <docstring>Determines whether the Help button will be displayed in the font dialog
(Windows only).  The default value is false.</docstring>
        <paramlist>
          <param name="showHelp" type="bool" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FontDialog" oldname="wxFontDialog" module="windows">
      <docstring>This class represents the font chooser dialog.</docstring>
      <baseclass name="Dialog"/>
      <constructor name="FontDialog" overloaded="no">
        <autodoc>__init__(Window parent, FontData data) -&gt; FontDialog</autodoc>
        <docstring>Constructor. Pass a parent window and the FontData object to be
used to initialize the dialog controls.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="data" type="FontData" default=""/>
        </paramlist>
      </constructor>
      <method name="GetFontData" type="FontData" overloaded="no">
        <autodoc>GetFontData() -&gt; FontData</autodoc>
        <docstring>Returns a reference to the internal FontData used by the FontDialog.</docstring>
      </method>
    </class>
    <class name="MessageDialog" oldname="wxMessageDialog" module="windows">
      <docstring>This class provides a dialog that shows a single or multi-line message, with
a choice of OK, Yes, No and Cancel buttons.</docstring>
      <refdoc>
  Styles
    wx.OK:                Show an OK button.

    wx.CANCEL:            Show a Cancel button.

    wx.YES_NO:            Show Yes and No buttons.

    wx.YES_DEFAULT:       Used with wxYES_NO, makes Yes button the default - which is the default behaviour.

    wx.NO_DEFAULT:        Used with wxYES_NO, makes No button the default.

    wx.ICON_EXCLAMATION:  Shows an exclamation mark icon.

    wx.ICON_HAND:         Shows an error icon.

    wx.ICON_ERROR:        Shows an error icon - the same as wxICON_HAND.

    wx.ICON_QUESTION:     Shows a question mark icon.

    wx.ICON_INFORMATION:  Shows an information (i) icon.

    wx.STAY_ON_TOP:       The message box stays on top of all other window, even those of the other applications (Windows only).
</refdoc>
      <baseclass name="Dialog"/>
      <constructor name="MessageDialog" overloaded="no">
        <autodoc>__init__(Window parent, String message, String caption=MessageBoxCaptionStr, 
    long style=wxOK|wxCANCEL|wxCENTRE, 
    Point pos=DefaultPosition) -&gt; MessageDialog</autodoc>
        <docstring>This class provides a dialog that shows a single or multi-line message, with
a choice of OK, Yes, No and Cancel buttons.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="message" type="String" default=""/>
          <param name="caption" type="String" default="wxPyMessageBoxCaptionStr"/>
          <param name="style" type="long" default="wxOK|wxCANCEL|wxCENTRE"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </constructor>
    </class>
    <class name="ProgressDialog" oldname="wxProgressDialog" module="windows">
      <docstring>A dialog that shows a short message and a progress bar. Optionally, it can
display an ABORT button.</docstring>
      <refdoc>
  Styles

    wx.PD_APP_MODAL:            Make the progress dialog modal. If this flag is
                                not given, it is only "locally" modal - that is
                                the input to the parent window is disabled,
                                but not to the other ones.

    wx.PD_AUTO_HIDE:            Causes the progress dialog to disappear from screen 
                                as soon as the maximum value of the progress
                                meter has been reached.

    wx.PD_CAN_ABORT:            This flag tells the dialog that it should have
                                a "Cancel" button which the user may press. If
                                this happens, the next call to Update() will
                                return false.

    wx.PD_ELAPSED_TIME:         This flag tells the dialog that it should show
                                elapsed time (since creating the dialog).

    wx.PD_ESTIMATED_TIME:  This flag tells the dialog that it should show
                                estimated time.

    wx.PD_REMAINING_TIME:  This flag tells the dialog that it should show
                                remaining time.
</refdoc>
      <baseclass name="Frame"/>
      <constructor name="ProgressDialog" overloaded="no">
        <autodoc>__init__(String title, String message, int maximum=100, Window parent=None, 
    int style=wxPD_AUTO_HIDE|wxPD_APP_MODAL) -&gt; ProgressDialog</autodoc>
        <docstring>Constructor. Creates the dialog, displays it and disables user input for other
windows, or, if wxPD_APP_MODAL flag is not given, for its parent window only.</docstring>
        <paramlist>
          <param name="title" type="String" default=""/>
          <param name="message" type="String" default=""/>
          <param name="maximum" type="int" default="100"/>
          <param name="parent" type="Window" default="NULL"/>
          <param name="style" type="int" default="wxPD_AUTO_HIDE|wxPD_APP_MODAL"/>
        </paramlist>
      </constructor>
      <method name="Update" type="bool" overloaded="no">
        <autodoc>Update(int value, String newmsg=EmptyString) -&gt; bool</autodoc>
        <docstring>Updates the dialog, setting the progress bar to the new value and, if given
changes the message above it. Returns true unless the Cancel button has been
pressed.

If false is returned, the application can either immediately destroy the
dialog or ask the user for the confirmation and if the abort is not confirmed
the dialog may be resumed with Resume function.</docstring>
        <paramlist>
          <param name="value" type="int" default=""/>
          <param name="newmsg" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="Resume" type="" overloaded="no">
        <autodoc>Resume()</autodoc>
        <docstring>Can be used to continue with the dialog, after the user had chosen to abort.</docstring>
      </method>
    </class>
    <pythoncode>
EVT_FIND = wx.PyEventBinder( wxEVT_COMMAND_FIND, 1 )
EVT_FIND_NEXT = wx.PyEventBinder( wxEVT_COMMAND_FIND_NEXT, 1 )
EVT_FIND_REPLACE = wx.PyEventBinder( wxEVT_COMMAND_FIND_REPLACE, 1 )
EVT_FIND_REPLACE_ALL = wx.PyEventBinder( wxEVT_COMMAND_FIND_REPLACE_ALL, 1 )
EVT_FIND_CLOSE = wx.PyEventBinder( wxEVT_COMMAND_FIND_CLOSE, 1 )

# For backwards compatibility.  Should they be removed?
EVT_COMMAND_FIND             = EVT_FIND 
EVT_COMMAND_FIND_NEXT        = EVT_FIND_NEXT
EVT_COMMAND_FIND_REPLACE     = EVT_FIND_REPLACE
EVT_COMMAND_FIND_REPLACE_ALL = EVT_FIND_REPLACE_ALL
EVT_COMMAND_FIND_CLOSE       = EVT_FIND_CLOSE        
</pythoncode>
    <class name="FindDialogEvent" oldname="wxFindDialogEvent" module="windows">
      <docstring>Events for the FindReplaceDialog</docstring>
      <baseclass name="CommandEvent"/>
      <constructor name="FindDialogEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; FindDialogEvent</autodoc>
        <docstring>Events for the FindReplaceDialog</docstring>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetFlags" type="int" overloaded="no">
        <autodoc>GetFlags() -&gt; int</autodoc>
        <docstring>Get the currently selected flags: this is the combination of
wx.FR_DOWN, wx.FR_WHOLEWORD and wx.FR_MATCHCASE flags.</docstring>
      </method>
      <method name="GetFindString" type="String" overloaded="no">
        <autodoc>GetFindString() -&gt; String</autodoc>
        <docstring>Return the string to find (never empty).</docstring>
      </method>
      <method name="GetReplaceString" type="String" overloaded="no">
        <autodoc>GetReplaceString() -&gt; String</autodoc>
        <docstring>Return the string to replace the search string with (only
for replace and replace all events).</docstring>
      </method>
      <method name="GetDialog" type="wxFindReplaceDialog" overloaded="no">
        <autodoc>GetDialog() -&gt; FindReplaceDialog</autodoc>
        <docstring>Return the pointer to the dialog which generated this event.</docstring>
      </method>
      <method name="SetFlags" type="" overloaded="no">
        <autodoc>SetFlags(int flags)</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFindString" type="" overloaded="no">
        <autodoc>SetFindString(String str)</autodoc>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetReplaceString" type="" overloaded="no">
        <autodoc>SetReplaceString(String str)</autodoc>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FindReplaceData" oldname="wxFindReplaceData" module="windows">
      <docstring>FindReplaceData holds the data for FindReplaceDialog. It is used to initialize
the dialog with the default values and will keep the last values from the
dialog when it is closed. It is also updated each time a wxFindDialogEvent is
generated so instead of using the wxFindDialogEvent methods you can also
directly query this object.

Note that all SetXXX() methods may only be called before showing the dialog
and calling them has no effect later.

 Flags
    wxFR_DOWN:          downward search/replace selected (otherwise, upwards)

    wxFR_WHOLEWORD:     whole word search/replace selected

    wxFR_MATCHCASE:     case sensitive search/replace selected (otherwise,
                        case insensitive)
</docstring>
      <baseclass name="Object"/>
      <constructor name="FindReplaceData" overloaded="no">
        <autodoc>__init__(int flags=0) -&gt; FindReplaceData</autodoc>
        <docstring>Constuctor initializes the flags to default value (0).</docstring>
        <paramlist>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxFindReplaceData" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetFindString" type="String" overloaded="no">
        <autodoc>GetFindString() -&gt; String</autodoc>
        <docstring>Get the string to find.</docstring>
      </method>
      <method name="GetReplaceString" type="String" overloaded="no">
        <autodoc>GetReplaceString() -&gt; String</autodoc>
        <docstring>Get the replacement string.</docstring>
      </method>
      <method name="GetFlags" type="int" overloaded="no">
        <autodoc>GetFlags() -&gt; int</autodoc>
        <docstring>Get the combination of flag values.</docstring>
      </method>
      <method name="SetFlags" type="" overloaded="no">
        <autodoc>SetFlags(int flags)</autodoc>
        <docstring>Set the flags to use to initialize the controls of the dialog.</docstring>
        <paramlist>
          <param name="flags" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFindString" type="" overloaded="no">
        <autodoc>SetFindString(String str)</autodoc>
        <docstring>Set the string to find (used as initial value by the dialog).</docstring>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetReplaceString" type="" overloaded="no">
        <autodoc>SetReplaceString(String str)</autodoc>
        <docstring>Set the replacement string (used as initial value by the dialog).</docstring>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FindReplaceDialog" oldname="wxFindReplaceDialog" module="windows">
      <docstring>FindReplaceDialog is a standard modeless dialog which is used to allow the
user to search for some text (and possibly replace it with something
else). The actual searching is supposed to be done in the owner window which
is the parent of this dialog. Note that it means that unlike for the other
standard dialogs this one must have a parent window. Also note that there is
no way to use this dialog in a modal way; it is always, by design and
implementation, modeless.</docstring>
      <refdoc>
 Styles
    wx.FR_REPLACEDIALOG:        replace dialog (otherwise find dialog)

    wx.FR_NOUPDOWN:             don't allow changing the search direction

    wx.FR_NOMATCHCASE:          don't allow case sensitive searching

    wx.FR_NOWHOLEWORD:          don't allow whole word searching
</refdoc>
      <baseclass name="Dialog"/>
      <constructor name="FindReplaceDialog" overloaded="no">
        <autodoc>__init__(Window parent, FindReplaceData data, String title, 
    int style=0) -&gt; FindReplaceDialog</autodoc>
        <docstring>Create a FindReplaceDialog.  The parent and data parameters must be
non-None.  Use Show to display the dialog.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="data" type="FindReplaceData" default=""/>
          <param name="title" type="String" default=""/>
          <param name="style" type="int" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="PreFindReplaceDialog" overloaded="no">
        <autodoc>PreFindReplaceDialog() -&gt; FindReplaceDialog</autodoc>
        <docstring>Precreate a FindReplaceDialog for 2-phase creation</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, FindReplaceData data, String title, 
    int style=0) -&gt; bool</autodoc>
        <docstring>Create the dialog, for 2-phase create.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="data" type="FindReplaceData" default=""/>
          <param name="title" type="String" default=""/>
          <param name="style" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetData" type="FindReplaceData" overloaded="no">
        <autodoc>GetData() -&gt; FindReplaceData</autodoc>
        <docstring>Get the FindReplaceData object used by this dialog.</docstring>
      </method>
      <method name="SetData" type="" overloaded="no">
        <autodoc>SetData(FindReplaceData data)</autodoc>
        <docstring>Set the FindReplaceData object used by this dialog.</docstring>
        <paramlist>
          <param name="data" type="FindReplaceData" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="MDIParentFrame" oldname="wxMDIParentFrame" module="windows">
      <baseclass name="Frame"/>
      <constructor name="MDIParentFrame" overloaded="no">
        <autodoc>__init__(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL, 
    String name=FrameNameStr) -&gt; MDIParentFrame</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreMDIParentFrame" overloaded="no">
        <autodoc>PreMDIParentFrame() -&gt; MDIParentFrame</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL, 
    String name=FrameNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </method>
      <method name="ActivateNext" type="" overloaded="no">
        <autodoc>ActivateNext()</autodoc>
      </method>
      <method name="ActivatePrevious" type="" overloaded="no">
        <autodoc>ActivatePrevious()</autodoc>
      </method>
      <method name="ArrangeIcons" type="" overloaded="no">
        <autodoc>ArrangeIcons()</autodoc>
      </method>
      <method name="Cascade" type="" overloaded="no">
        <autodoc>Cascade()</autodoc>
      </method>
      <method name="GetActiveChild" type="wxMDIChildFrame" overloaded="no">
        <autodoc>GetActiveChild() -&gt; MDIChildFrame</autodoc>
      </method>
      <method name="GetClientWindow" type="wxMDIClientWindow" overloaded="no">
        <autodoc>GetClientWindow() -&gt; MDIClientWindow</autodoc>
      </method>
      <method name="GetToolBar" type="Window" overloaded="no">
        <autodoc>GetToolBar() -&gt; Window</autodoc>
      </method>
      <method name="Tile" type="" overloaded="no">
        <autodoc>Tile()</autodoc>
      </method>
    </class>
    <class name="MDIChildFrame" oldname="wxMDIChildFrame" module="windows">
      <baseclass name="Frame"/>
      <constructor name="MDIChildFrame" overloaded="no">
        <autodoc>__init__(MDIParentFrame parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; MDIChildFrame</autodoc>
        <paramlist>
          <param name="parent" type="MDIParentFrame" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreMDIChildFrame" overloaded="no">
        <autodoc>PreMDIChildFrame() -&gt; MDIChildFrame</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(MDIParentFrame parent, int id, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=DEFAULT_FRAME_STYLE, 
    String name=FrameNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="MDIParentFrame" default=""/>
          <param name="id" type="int" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </method>
      <method name="Activate" type="" overloaded="no">
        <autodoc>Activate()</autodoc>
      </method>
      <method name="Maximize" type="" overloaded="no">
        <autodoc>Maximize(bool maximize)</autodoc>
        <paramlist>
          <param name="maximize" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Restore" type="" overloaded="no">
        <autodoc>Restore()</autodoc>
      </method>
    </class>
    <class name="MDIClientWindow" oldname="wxMDIClientWindow" module="windows">
      <baseclass name="Window"/>
      <constructor name="MDIClientWindow" overloaded="no">
        <autodoc>__init__(MDIParentFrame parent, long style=0) -&gt; MDIClientWindow</autodoc>
        <paramlist>
          <param name="parent" type="MDIParentFrame" default=""/>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="PreMDIClientWindow" overloaded="no">
        <autodoc>PreMDIClientWindow() -&gt; MDIClientWindow</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(MDIParentFrame parent, long style=0) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="MDIParentFrame" default=""/>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PyWindow" oldname="wxPyWindow" module="windows">
      <baseclass name="Window"/>
      <constructor name="PyWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; PyWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_DoMoveWindow" type="" overloaded="no">
        <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetSize" type="" overloaded="no">
        <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
        </paramlist>
      </method>
      <method name="base_DoSetClientSize" type="" overloaded="no">
        <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetVirtualSize" type="" overloaded="no">
        <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetSize" type="" overloaded="no">
        <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetClientSize" type="" overloaded="no">
        <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetPosition" type="" overloaded="no">
        <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetVirtualSize" type="Size" overloaded="no">
        <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
      </method>
      <method name="base_DoGetBestSize" type="Size" overloaded="no">
        <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
      </method>
      <method name="base_InitDialog" type="" overloaded="no">
        <autodoc>base_InitDialog()</autodoc>
      </method>
      <method name="base_TransferDataToWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_TransferDataFromWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_Validate" type="bool" overloaded="no">
        <autodoc>base_Validate() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocus" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocusFromKeyboard" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
      </method>
      <method name="base_GetMaxSize" type="Size" overloaded="no">
        <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
      </method>
      <method name="base_AddChild" type="" overloaded="no">
        <autodoc>base_AddChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="base_RemoveChild" type="" overloaded="no">
        <autodoc>base_RemoveChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyPanel" oldname="wxPyPanel" module="windows">
      <baseclass name="Panel"/>
      <constructor name="PyPanel" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; PyPanel</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_DoMoveWindow" type="" overloaded="no">
        <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetSize" type="" overloaded="no">
        <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
        </paramlist>
      </method>
      <method name="base_DoSetClientSize" type="" overloaded="no">
        <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetVirtualSize" type="" overloaded="no">
        <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetSize" type="" overloaded="no">
        <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetClientSize" type="" overloaded="no">
        <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetPosition" type="" overloaded="no">
        <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetVirtualSize" type="Size" overloaded="no">
        <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
      </method>
      <method name="base_DoGetBestSize" type="Size" overloaded="no">
        <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
      </method>
      <method name="base_InitDialog" type="" overloaded="no">
        <autodoc>base_InitDialog()</autodoc>
      </method>
      <method name="base_TransferDataToWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_TransferDataFromWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_Validate" type="bool" overloaded="no">
        <autodoc>base_Validate() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocus" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocusFromKeyboard" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
      </method>
      <method name="base_GetMaxSize" type="Size" overloaded="no">
        <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
      </method>
      <method name="base_AddChild" type="" overloaded="no">
        <autodoc>base_AddChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="base_RemoveChild" type="" overloaded="no">
        <autodoc>base_RemoveChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PrintData" oldname="wxPrintData" module="windows">
      <baseclass name="Object"/>
      <constructor name="PrintData" overloaded="no">
        <autodoc>__init__() -&gt; PrintData</autodoc>
      </constructor>
      <destructor name="~wxPrintData" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetNoCopies" type="int" overloaded="no">
        <autodoc>GetNoCopies() -&gt; int</autodoc>
      </method>
      <method name="GetCollate" type="bool" overloaded="no">
        <autodoc>GetCollate() -&gt; bool</autodoc>
      </method>
      <method name="GetOrientation" type="int" overloaded="no">
        <autodoc>GetOrientation() -&gt; int</autodoc>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="GetPrinterName" type="String" overloaded="no">
        <autodoc>GetPrinterName() -&gt; String</autodoc>
      </method>
      <method name="GetColour" type="bool" overloaded="no">
        <autodoc>GetColour() -&gt; bool</autodoc>
      </method>
      <method name="GetDuplex" type="wxDuplexMode" overloaded="no">
        <autodoc>GetDuplex() -&gt; int</autodoc>
      </method>
      <method name="GetPaperId" type="wxPaperSize" overloaded="no">
        <autodoc>GetPaperId() -&gt; int</autodoc>
      </method>
      <method name="GetPaperSize" type="Size" overloaded="no">
        <autodoc>GetPaperSize() -&gt; Size</autodoc>
      </method>
      <method name="GetQuality" type="int" overloaded="no">
        <autodoc>GetQuality() -&gt; int</autodoc>
      </method>
      <method name="SetNoCopies" type="" overloaded="no">
        <autodoc>SetNoCopies(int v)</autodoc>
        <paramlist>
          <param name="v" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCollate" type="" overloaded="no">
        <autodoc>SetCollate(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetOrientation" type="" overloaded="no">
        <autodoc>SetOrientation(int orient)</autodoc>
        <paramlist>
          <param name="orient" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterName" type="" overloaded="no">
        <autodoc>SetPrinterName(String name)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(bool colour)</autodoc>
        <paramlist>
          <param name="colour" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetDuplex" type="" overloaded="no">
        <autodoc>SetDuplex(int duplex)</autodoc>
        <paramlist>
          <param name="duplex" type="wxDuplexMode" default=""/>
        </paramlist>
      </method>
      <method name="SetPaperId" type="" overloaded="no">
        <autodoc>SetPaperId(int sizeId)</autodoc>
        <paramlist>
          <param name="sizeId" type="wxPaperSize" default=""/>
        </paramlist>
      </method>
      <method name="SetPaperSize" type="" overloaded="no">
        <autodoc>SetPaperSize(Size sz)</autodoc>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetQuality" type="" overloaded="no">
        <autodoc>SetQuality(int quality)</autodoc>
        <paramlist>
          <param name="quality" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPrinterCommand" type="String" overloaded="no">
        <autodoc>GetPrinterCommand() -&gt; String</autodoc>
      </method>
      <method name="GetPrinterOptions" type="String" overloaded="no">
        <autodoc>GetPrinterOptions() -&gt; String</autodoc>
      </method>
      <method name="GetPreviewCommand" type="String" overloaded="no">
        <autodoc>GetPreviewCommand() -&gt; String</autodoc>
      </method>
      <method name="GetFilename" type="String" overloaded="no">
        <autodoc>GetFilename() -&gt; String</autodoc>
      </method>
      <method name="GetFontMetricPath" type="String" overloaded="no">
        <autodoc>GetFontMetricPath() -&gt; String</autodoc>
      </method>
      <method name="GetPrinterScaleX" type="double" overloaded="no">
        <autodoc>GetPrinterScaleX() -&gt; double</autodoc>
      </method>
      <method name="GetPrinterScaleY" type="double" overloaded="no">
        <autodoc>GetPrinterScaleY() -&gt; double</autodoc>
      </method>
      <method name="GetPrinterTranslateX" type="long" overloaded="no">
        <autodoc>GetPrinterTranslateX() -&gt; long</autodoc>
      </method>
      <method name="GetPrinterTranslateY" type="long" overloaded="no">
        <autodoc>GetPrinterTranslateY() -&gt; long</autodoc>
      </method>
      <method name="GetPrintMode" type="wxPrintMode" overloaded="no">
        <autodoc>GetPrintMode() -&gt; int</autodoc>
      </method>
      <method name="SetPrinterCommand" type="" overloaded="no">
        <autodoc>SetPrinterCommand(String command)</autodoc>
        <paramlist>
          <param name="command" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterOptions" type="" overloaded="no">
        <autodoc>SetPrinterOptions(String options)</autodoc>
        <paramlist>
          <param name="options" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetPreviewCommand" type="" overloaded="no">
        <autodoc>SetPreviewCommand(String command)</autodoc>
        <paramlist>
          <param name="command" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetFilename" type="" overloaded="no">
        <autodoc>SetFilename(String filename)</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetFontMetricPath" type="" overloaded="no">
        <autodoc>SetFontMetricPath(String path)</autodoc>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterScaleX" type="" overloaded="no">
        <autodoc>SetPrinterScaleX(double x)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterScaleY" type="" overloaded="no">
        <autodoc>SetPrinterScaleY(double y)</autodoc>
        <paramlist>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterScaling" type="" overloaded="no">
        <autodoc>SetPrinterScaling(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterTranslateX" type="" overloaded="no">
        <autodoc>SetPrinterTranslateX(long x)</autodoc>
        <paramlist>
          <param name="x" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterTranslateY" type="" overloaded="no">
        <autodoc>SetPrinterTranslateY(long y)</autodoc>
        <paramlist>
          <param name="y" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetPrinterTranslation" type="" overloaded="no">
        <autodoc>SetPrinterTranslation(long x, long y)</autodoc>
        <paramlist>
          <param name="x" type="long" default=""/>
          <param name="y" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetPrintMode" type="" overloaded="no">
        <autodoc>SetPrintMode(int printMode)</autodoc>
        <paramlist>
          <param name="printMode" type="wxPrintMode" default=""/>
        </paramlist>
      </method>
      <method name="GetOutputStream" type="OutputStream" overloaded="no">
        <autodoc>GetOutputStream() -&gt; OutputStream</autodoc>
      </method>
      <method name="SetOutputStream" type="" overloaded="no">
        <autodoc>SetOutputStream(OutputStream outputstream)</autodoc>
        <paramlist>
          <param name="outputstream" type="OutputStream" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PageSetupDialogData" oldname="wxPageSetupDialogData" module="windows">
      <baseclass name="Object"/>
      <constructor name="PageSetupDialogData" overloaded="no">
        <autodoc>__init__() -&gt; PageSetupDialogData</autodoc>
      </constructor>
      <destructor name="~wxPageSetupDialogData" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="EnableHelp" type="" overloaded="no">
        <autodoc>EnableHelp(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnableMargins" type="" overloaded="no">
        <autodoc>EnableMargins(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnableOrientation" type="" overloaded="no">
        <autodoc>EnableOrientation(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnablePaper" type="" overloaded="no">
        <autodoc>EnablePaper(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnablePrinter" type="" overloaded="no">
        <autodoc>EnablePrinter(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultMinMargins" type="bool" overloaded="no">
        <autodoc>GetDefaultMinMargins() -&gt; bool</autodoc>
      </method>
      <method name="GetEnableMargins" type="bool" overloaded="no">
        <autodoc>GetEnableMargins() -&gt; bool</autodoc>
      </method>
      <method name="GetEnableOrientation" type="bool" overloaded="no">
        <autodoc>GetEnableOrientation() -&gt; bool</autodoc>
      </method>
      <method name="GetEnablePaper" type="bool" overloaded="no">
        <autodoc>GetEnablePaper() -&gt; bool</autodoc>
      </method>
      <method name="GetEnablePrinter" type="bool" overloaded="no">
        <autodoc>GetEnablePrinter() -&gt; bool</autodoc>
      </method>
      <method name="GetEnableHelp" type="bool" overloaded="no">
        <autodoc>GetEnableHelp() -&gt; bool</autodoc>
      </method>
      <method name="GetDefaultInfo" type="bool" overloaded="no">
        <autodoc>GetDefaultInfo() -&gt; bool</autodoc>
      </method>
      <method name="GetMarginTopLeft" type="Point" overloaded="no">
        <autodoc>GetMarginTopLeft() -&gt; Point</autodoc>
      </method>
      <method name="GetMarginBottomRight" type="Point" overloaded="no">
        <autodoc>GetMarginBottomRight() -&gt; Point</autodoc>
      </method>
      <method name="GetMinMarginTopLeft" type="Point" overloaded="no">
        <autodoc>GetMinMarginTopLeft() -&gt; Point</autodoc>
      </method>
      <method name="GetMinMarginBottomRight" type="Point" overloaded="no">
        <autodoc>GetMinMarginBottomRight() -&gt; Point</autodoc>
      </method>
      <method name="GetPaperId" type="wxPaperSize" overloaded="no">
        <autodoc>GetPaperId() -&gt; int</autodoc>
      </method>
      <method name="GetPaperSize" type="Size" overloaded="no">
        <autodoc>GetPaperSize() -&gt; Size</autodoc>
      </method>
      <method name="GetPrintData" type="PrintData" overloaded="no">
        <autodoc>GetPrintData() -&gt; PrintData</autodoc>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="SetDefaultInfo" type="" overloaded="no">
        <autodoc>SetDefaultInfo(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultMinMargins" type="" overloaded="no">
        <autodoc>SetDefaultMinMargins(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginTopLeft" type="" overloaded="no">
        <autodoc>SetMarginTopLeft(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginBottomRight" type="" overloaded="no">
        <autodoc>SetMarginBottomRight(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetMinMarginTopLeft" type="" overloaded="no">
        <autodoc>SetMinMarginTopLeft(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetMinMarginBottomRight" type="" overloaded="no">
        <autodoc>SetMinMarginBottomRight(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetPaperId" type="" overloaded="no">
        <autodoc>SetPaperId(int id)</autodoc>
        <paramlist>
          <param name="id" type="wxPaperSize" default=""/>
        </paramlist>
      </method>
      <method name="SetPaperSize" type="" overloaded="no">
        <autodoc>SetPaperSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetPrintData" type="" overloaded="no">
        <autodoc>SetPrintData(PrintData printData)</autodoc>
        <paramlist>
          <param name="printData" type="PrintData" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PageSetupDialog" oldname="wxPageSetupDialog" module="windows">
      <baseclass name="Dialog"/>
      <constructor name="PageSetupDialog" overloaded="no">
        <autodoc>__init__(Window parent, PageSetupDialogData data=None) -&gt; PageSetupDialog</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="data" type="PageSetupDialogData" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetPageSetupData" type="PageSetupDialogData" overloaded="no">
        <autodoc>GetPageSetupData() -&gt; PageSetupDialogData</autodoc>
      </method>
      <method name="ShowModal" type="int" overloaded="no">
        <autodoc>ShowModal() -&gt; int</autodoc>
      </method>
    </class>
    <class name="PrintDialogData" oldname="wxPrintDialogData" module="windows">
      <baseclass name="Object"/>
      <constructor name="PrintDialogData" overloaded="yes"/>
      <constructor name="PrintDialogData" overloaded="yes">
        <autodoc>__init__() -&gt; PrintDialogData
__init__(PrintData printData) -&gt; PrintDialogData</autodoc>
        <paramlist>
          <param name="printData" type="PrintData" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxPrintDialogData" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetFromPage" type="int" overloaded="no">
        <autodoc>GetFromPage() -&gt; int</autodoc>
      </method>
      <method name="GetToPage" type="int" overloaded="no">
        <autodoc>GetToPage() -&gt; int</autodoc>
      </method>
      <method name="GetMinPage" type="int" overloaded="no">
        <autodoc>GetMinPage() -&gt; int</autodoc>
      </method>
      <method name="GetMaxPage" type="int" overloaded="no">
        <autodoc>GetMaxPage() -&gt; int</autodoc>
      </method>
      <method name="GetNoCopies" type="int" overloaded="no">
        <autodoc>GetNoCopies() -&gt; int</autodoc>
      </method>
      <method name="GetAllPages" type="bool" overloaded="no">
        <autodoc>GetAllPages() -&gt; bool</autodoc>
      </method>
      <method name="GetSelection" type="bool" overloaded="no">
        <autodoc>GetSelection() -&gt; bool</autodoc>
      </method>
      <method name="GetCollate" type="bool" overloaded="no">
        <autodoc>GetCollate() -&gt; bool</autodoc>
      </method>
      <method name="GetPrintToFile" type="bool" overloaded="no">
        <autodoc>GetPrintToFile() -&gt; bool</autodoc>
      </method>
      <method name="GetSetupDialog" type="bool" overloaded="no">
        <autodoc>GetSetupDialog() -&gt; bool</autodoc>
      </method>
      <method name="SetFromPage" type="" overloaded="no">
        <autodoc>SetFromPage(int v)</autodoc>
        <paramlist>
          <param name="v" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetToPage" type="" overloaded="no">
        <autodoc>SetToPage(int v)</autodoc>
        <paramlist>
          <param name="v" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMinPage" type="" overloaded="no">
        <autodoc>SetMinPage(int v)</autodoc>
        <paramlist>
          <param name="v" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMaxPage" type="" overloaded="no">
        <autodoc>SetMaxPage(int v)</autodoc>
        <paramlist>
          <param name="v" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetNoCopies" type="" overloaded="no">
        <autodoc>SetNoCopies(int v)</autodoc>
        <paramlist>
          <param name="v" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAllPages" type="" overloaded="no">
        <autodoc>SetAllPages(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetCollate" type="" overloaded="no">
        <autodoc>SetCollate(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetPrintToFile" type="" overloaded="no">
        <autodoc>SetPrintToFile(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetSetupDialog" type="" overloaded="no">
        <autodoc>SetSetupDialog(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnablePrintToFile" type="" overloaded="no">
        <autodoc>EnablePrintToFile(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnableSelection" type="" overloaded="no">
        <autodoc>EnableSelection(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnablePageNumbers" type="" overloaded="no">
        <autodoc>EnablePageNumbers(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnableHelp" type="" overloaded="no">
        <autodoc>EnableHelp(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetEnablePrintToFile" type="bool" overloaded="no">
        <autodoc>GetEnablePrintToFile() -&gt; bool</autodoc>
      </method>
      <method name="GetEnableSelection" type="bool" overloaded="no">
        <autodoc>GetEnableSelection() -&gt; bool</autodoc>
      </method>
      <method name="GetEnablePageNumbers" type="bool" overloaded="no">
        <autodoc>GetEnablePageNumbers() -&gt; bool</autodoc>
      </method>
      <method name="GetEnableHelp" type="bool" overloaded="no">
        <autodoc>GetEnableHelp() -&gt; bool</autodoc>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="GetPrintData" type="PrintData" overloaded="no">
        <autodoc>GetPrintData() -&gt; PrintData</autodoc>
      </method>
      <method name="SetPrintData" type="" overloaded="no">
        <autodoc>SetPrintData(PrintData printData)</autodoc>
        <paramlist>
          <param name="printData" type="PrintData" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PrintDialog" oldname="wxPrintDialog" module="windows">
      <baseclass name="Dialog"/>
      <constructor name="PrintDialog" overloaded="no">
        <autodoc>__init__(Window parent, PrintDialogData data=None) -&gt; PrintDialog</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="data" type="PrintDialogData" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetPrintDialogData" type="PrintDialogData" overloaded="no">
        <autodoc>GetPrintDialogData() -&gt; PrintDialogData</autodoc>
      </method>
      <method name="GetPrintDC" type="DC" overloaded="no">
        <autodoc>GetPrintDC() -&gt; DC</autodoc>
      </method>
      <method name="ShowModal" type="int" overloaded="no">
        <autodoc>ShowModal() -&gt; int</autodoc>
      </method>
    </class>
    <class name="Printer" oldname="wxPrinter" module="windows">
      <baseclass name="Object"/>
      <constructor name="Printer" overloaded="no">
        <autodoc>__init__(PrintDialogData data=None) -&gt; Printer</autodoc>
        <paramlist>
          <param name="data" type="PrintDialogData" default="NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPrinter" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="CreateAbortWindow" type="" overloaded="no">
        <autodoc>CreateAbortWindow(Window parent, Printout printout)</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="printout" type="wxPyPrintout" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintDialogData" type="PrintDialogData" overloaded="no">
        <autodoc>GetPrintDialogData() -&gt; PrintDialogData</autodoc>
      </method>
      <method name="Print" type="bool" overloaded="no">
        <autodoc>Print(Window parent, Printout printout, int prompt=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="printout" type="wxPyPrintout" default=""/>
          <param name="prompt" type="int" default="True"/>
        </paramlist>
      </method>
      <method name="PrintDialog" type="DC" overloaded="no">
        <autodoc>PrintDialog(Window parent) -&gt; DC</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="ReportError" type="" overloaded="no">
        <autodoc>ReportError(Window parent, Printout printout, String message)</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="printout" type="wxPyPrintout" default=""/>
          <param name="message" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Setup" type="bool" overloaded="no">
        <autodoc>Setup(Window parent) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetAbort" type="bool" overloaded="no">
        <autodoc>GetAbort() -&gt; bool</autodoc>
      </method>
      <staticmethod name="GetLastError" type="wxPrinterError" overloaded="no">
        <autodoc>GetLastError() -&gt; int</autodoc>
      </staticmethod>
    </class>
    <class name="Printout" oldname="wxPyPrintout" module="windows">
      <baseclass name="Object"/>
      <constructor name="wxPyPrintout" overloaded="no">
        <autodoc>__init__(String title=PrintoutTitleStr) -&gt; Printout</autodoc>
        <paramlist>
          <param name="title" type="String" default="wxPyPrintoutTitleStr"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetTitle" type="String" overloaded="no">
        <autodoc>GetTitle() -&gt; String</autodoc>
      </method>
      <method name="GetDC" type="DC" overloaded="no">
        <autodoc>GetDC() -&gt; DC</autodoc>
      </method>
      <method name="SetDC" type="" overloaded="no">
        <autodoc>SetDC(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="SetPageSizePixels" type="" overloaded="no">
        <autodoc>SetPageSizePixels(int w, int h)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPageSizePixels" type="" overloaded="no">
        <autodoc>GetPageSizePixels() -&gt; (w, h)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPageSizeMM" type="" overloaded="no">
        <autodoc>SetPageSizeMM(int w, int h)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
          <param name="h" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPageSizeMM" type="" overloaded="no">
        <autodoc>GetPageSizeMM() -&gt; (w, h)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPPIScreen" type="" overloaded="no">
        <autodoc>SetPPIScreen(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPPIScreen" type="" overloaded="no">
        <autodoc>GetPPIScreen() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPPIPrinter" type="" overloaded="no">
        <autodoc>SetPPIPrinter(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPPIPrinter" type="" overloaded="no">
        <autodoc>GetPPIPrinter() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsPreview" type="bool" overloaded="no">
        <autodoc>IsPreview() -&gt; bool</autodoc>
      </method>
      <method name="SetIsPreview" type="" overloaded="no">
        <autodoc>SetIsPreview(bool p)</autodoc>
        <paramlist>
          <param name="p" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="base_OnBeginDocument" type="bool" overloaded="no">
        <autodoc>base_OnBeginDocument(int startPage, int endPage) -&gt; bool</autodoc>
        <paramlist>
          <param name="startPage" type="int" default=""/>
          <param name="endPage" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndDocument" type="" overloaded="no">
        <autodoc>base_OnEndDocument()</autodoc>
      </method>
      <method name="base_OnBeginPrinting" type="" overloaded="no">
        <autodoc>base_OnBeginPrinting()</autodoc>
      </method>
      <method name="base_OnEndPrinting" type="" overloaded="no">
        <autodoc>base_OnEndPrinting()</autodoc>
      </method>
      <method name="base_OnPreparePrinting" type="" overloaded="no">
        <autodoc>base_OnPreparePrinting()</autodoc>
      </method>
      <method name="base_HasPage" type="bool" overloaded="no">
        <autodoc>base_HasPage(int page) -&gt; bool</autodoc>
        <paramlist>
          <param name="page" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_GetPageInfo" type="" overloaded="no">
        <autodoc>base_GetPageInfo() -&gt; (minPage, maxPage, pageFrom, pageTo)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PreviewCanvas" oldname="wxPreviewCanvas" module="windows">
      <baseclass name="ScrolledWindow"/>
      <constructor name="PreviewCanvas" overloaded="no">
        <autodoc>__init__(PrintPreview preview, Window parent, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=PreviewCanvasNameStr) -&gt; PreviewCanvas</autodoc>
        <paramlist>
          <param name="preview" type="wxPrintPreview" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPreviewCanvasNameStr"/>
        </paramlist>
      </constructor>
    </class>
    <class name="PreviewFrame" oldname="wxPreviewFrame" module="windows">
      <baseclass name="Frame"/>
      <constructor name="PreviewFrame" overloaded="no">
        <autodoc>__init__(PrintPreview preview, Frame parent, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=DEFAULT_FRAME_STYLE, String name=FrameNameStr) -&gt; PreviewFrame</autodoc>
        <paramlist>
          <param name="preview" type="wxPrintPreview" default=""/>
          <param name="parent" type="Frame" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </constructor>
      <method name="Initialize" type="" overloaded="no">
        <autodoc>Initialize()</autodoc>
      </method>
      <method name="CreateControlBar" type="" overloaded="no">
        <autodoc>CreateControlBar()</autodoc>
      </method>
      <method name="CreateCanvas" type="" overloaded="no">
        <autodoc>CreateCanvas()</autodoc>
      </method>
      <method name="GetControlBar" type="wxPreviewControlBar" overloaded="no">
        <autodoc>GetControlBar() -&gt; PreviewControlBar</autodoc>
      </method>
    </class>
    <class name="PreviewControlBar" oldname="wxPreviewControlBar" module="windows">
      <baseclass name="Panel"/>
      <constructor name="PreviewControlBar" overloaded="no">
        <autodoc>__init__(PrintPreview preview, long buttons, Window parent, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=TAB_TRAVERSAL, String name=PanelNameStr) -&gt; PreviewControlBar</autodoc>
        <paramlist>
          <param name="preview" type="wxPrintPreview" default=""/>
          <param name="buttons" type="long" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTAB_TRAVERSAL"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <method name="GetZoomControl" type="int" overloaded="no">
        <autodoc>GetZoomControl() -&gt; int</autodoc>
      </method>
      <method name="SetZoomControl" type="" overloaded="no">
        <autodoc>SetZoomControl(int zoom)</autodoc>
        <paramlist>
          <param name="zoom" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintPreview" type="wxPrintPreview" overloaded="no">
        <autodoc>GetPrintPreview() -&gt; PrintPreview</autodoc>
      </method>
      <method name="OnNext" type="" overloaded="no">
        <autodoc>OnNext()</autodoc>
      </method>
      <method name="OnPrevious" type="" overloaded="no">
        <autodoc>OnPrevious()</autodoc>
      </method>
      <method name="OnFirst" type="" overloaded="no">
        <autodoc>OnFirst()</autodoc>
      </method>
      <method name="OnLast" type="" overloaded="no">
        <autodoc>OnLast()</autodoc>
      </method>
      <method name="OnGoto" type="" overloaded="no">
        <autodoc>OnGoto()</autodoc>
      </method>
    </class>
    <class name="PrintPreview" oldname="wxPrintPreview" module="windows">
      <baseclass name="Object"/>
      <constructor name="PrintPreview" overloaded="yes">
        <paramlist>
          <param name="printout" type="Printout" default=""/>
          <param name="printoutForPrinting" type="Printout" default=""/>
          <param name="data" type="PrintDialogData" default="NULL"/>
        </paramlist>
      </constructor>
      <constructor name="PrintPreview" overloaded="yes">
        <autodoc>__init__(Printout printout, Printout printoutForPrinting, PrintDialogData data=None) -&gt; PrintPreview
__init__(Printout printout, Printout printoutForPrinting, PrintData data) -&gt; PrintPreview</autodoc>
        <paramlist>
          <param name="printout" type="Printout" default=""/>
          <param name="printoutForPrinting" type="Printout" default=""/>
          <param name="data" type="PrintData" default=""/>
        </paramlist>
      </constructor>
      <method name="SetCurrentPage" type="bool" overloaded="no">
        <autodoc>SetCurrentPage(int pageNum) -&gt; bool</autodoc>
        <paramlist>
          <param name="pageNum" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCurrentPage" type="int" overloaded="no">
        <autodoc>GetCurrentPage() -&gt; int</autodoc>
      </method>
      <method name="SetPrintout" type="" overloaded="no">
        <autodoc>SetPrintout(Printout printout)</autodoc>
        <paramlist>
          <param name="printout" type="Printout" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintout" type="Printout" overloaded="no">
        <autodoc>GetPrintout() -&gt; Printout</autodoc>
      </method>
      <method name="GetPrintoutForPrinting" type="Printout" overloaded="no">
        <autodoc>GetPrintoutForPrinting() -&gt; Printout</autodoc>
      </method>
      <method name="SetFrame" type="" overloaded="no">
        <autodoc>SetFrame(Frame frame)</autodoc>
        <paramlist>
          <param name="frame" type="Frame" default=""/>
        </paramlist>
      </method>
      <method name="SetCanvas" type="" overloaded="no">
        <autodoc>SetCanvas(PreviewCanvas canvas)</autodoc>
        <paramlist>
          <param name="canvas" type="PreviewCanvas" default=""/>
        </paramlist>
      </method>
      <method name="GetFrame" type="Frame" overloaded="no">
        <autodoc>GetFrame() -&gt; Frame</autodoc>
      </method>
      <method name="GetCanvas" type="PreviewCanvas" overloaded="no">
        <autodoc>GetCanvas() -&gt; PreviewCanvas</autodoc>
      </method>
      <method name="PaintPage" type="bool" overloaded="no">
        <autodoc>PaintPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
        <paramlist>
          <param name="canvas" type="PreviewCanvas" default=""/>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="DrawBlankPage" type="bool" overloaded="no">
        <autodoc>DrawBlankPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
        <paramlist>
          <param name="canvas" type="PreviewCanvas" default=""/>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="RenderPage" type="bool" overloaded="no">
        <autodoc>RenderPage(int pageNum) -&gt; bool</autodoc>
        <paramlist>
          <param name="pageNum" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AdjustScrollbars" type="" overloaded="no">
        <autodoc>AdjustScrollbars(PreviewCanvas canvas)</autodoc>
        <paramlist>
          <param name="canvas" type="PreviewCanvas" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintDialogData" type="PrintDialogData" overloaded="no">
        <autodoc>GetPrintDialogData() -&gt; PrintDialogData</autodoc>
      </method>
      <method name="SetZoom" type="" overloaded="no">
        <autodoc>SetZoom(int percent)</autodoc>
        <paramlist>
          <param name="percent" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetZoom" type="int" overloaded="no">
        <autodoc>GetZoom() -&gt; int</autodoc>
      </method>
      <method name="GetMaxPage" type="int" overloaded="no">
        <autodoc>GetMaxPage() -&gt; int</autodoc>
      </method>
      <method name="GetMinPage" type="int" overloaded="no">
        <autodoc>GetMinPage() -&gt; int</autodoc>
      </method>
      <method name="Ok" type="bool" overloaded="no">
        <autodoc>Ok() -&gt; bool</autodoc>
      </method>
      <method name="SetOk" type="" overloaded="no">
        <autodoc>SetOk(bool ok)</autodoc>
        <paramlist>
          <param name="ok" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Print" type="bool" overloaded="no">
        <autodoc>Print(bool interactive) -&gt; bool</autodoc>
        <paramlist>
          <param name="interactive" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="DetermineScaling" type="" overloaded="no">
        <autodoc>DetermineScaling()</autodoc>
      </method>
    </class>
    <class name="PyPrintPreview" oldname="wxPyPrintPreview" module="windows">
      <baseclass name="PrintPreview"/>
      <constructor name="PyPrintPreview" overloaded="yes">
        <paramlist>
          <param name="printout" type="Printout" default=""/>
          <param name="printoutForPrinting" type="Printout" default=""/>
          <param name="data" type="PrintDialogData" default="NULL"/>
        </paramlist>
      </constructor>
      <constructor name="PyPrintPreview" overloaded="yes">
        <autodoc>__init__(Printout printout, Printout printoutForPrinting, PrintDialogData data=None) -&gt; PyPrintPreview
__init__(Printout printout, Printout printoutForPrinting, PrintData data) -&gt; PyPrintPreview</autodoc>
        <paramlist>
          <param name="printout" type="Printout" default=""/>
          <param name="printoutForPrinting" type="Printout" default=""/>
          <param name="data" type="PrintData" default=""/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_SetCurrentPage" type="bool" overloaded="no">
        <autodoc>base_SetCurrentPage(int pageNum) -&gt; bool</autodoc>
        <paramlist>
          <param name="pageNum" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_PaintPage" type="bool" overloaded="no">
        <autodoc>base_PaintPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
        <paramlist>
          <param name="canvas" type="PreviewCanvas" default=""/>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_DrawBlankPage" type="bool" overloaded="no">
        <autodoc>base_DrawBlankPage(PreviewCanvas canvas, DC dc) -&gt; bool</autodoc>
        <paramlist>
          <param name="canvas" type="PreviewCanvas" default=""/>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_RenderPage" type="bool" overloaded="no">
        <autodoc>base_RenderPage(int pageNum) -&gt; bool</autodoc>
        <paramlist>
          <param name="pageNum" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_SetZoom" type="" overloaded="no">
        <autodoc>base_SetZoom(int percent)</autodoc>
        <paramlist>
          <param name="percent" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_Print" type="bool" overloaded="no">
        <autodoc>base_Print(bool interactive) -&gt; bool</autodoc>
        <paramlist>
          <param name="interactive" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="base_DetermineScaling" type="" overloaded="no">
        <autodoc>base_DetermineScaling()</autodoc>
      </method>
    </class>
    <class name="PyPreviewFrame" oldname="wxPyPreviewFrame" module="windows">
      <baseclass name="PreviewFrame"/>
      <constructor name="PyPreviewFrame" overloaded="no">
        <autodoc>__init__(PrintPreview preview, Frame parent, String title, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=DEFAULT_FRAME_STYLE, String name=FrameNameStr) -&gt; PyPreviewFrame</autodoc>
        <paramlist>
          <param name="preview" type="PrintPreview" default=""/>
          <param name="parent" type="Frame" default=""/>
          <param name="title" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDEFAULT_FRAME_STYLE"/>
          <param name="name" type="String" default="wxPyFrameNameStr"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetPreviewCanvas" type="" overloaded="no">
        <autodoc>SetPreviewCanvas(PreviewCanvas canvas)</autodoc>
        <paramlist>
          <param name="canvas" type="PreviewCanvas" default=""/>
        </paramlist>
      </method>
      <method name="SetControlBar" type="" overloaded="no">
        <autodoc>SetControlBar(PreviewControlBar bar)</autodoc>
        <paramlist>
          <param name="bar" type="PreviewControlBar" default=""/>
        </paramlist>
      </method>
      <method name="base_Initialize" type="" overloaded="no">
        <autodoc>base_Initialize()</autodoc>
      </method>
      <method name="base_CreateCanvas" type="" overloaded="no">
        <autodoc>base_CreateCanvas()</autodoc>
      </method>
      <method name="base_CreateControlBar" type="" overloaded="no">
        <autodoc>base_CreateControlBar()</autodoc>
      </method>
    </class>
    <class name="PyPreviewControlBar" oldname="wxPyPreviewControlBar" module="windows">
      <baseclass name="PreviewControlBar"/>
      <constructor name="PyPreviewControlBar" overloaded="no">
        <autodoc>__init__(PrintPreview preview, long buttons, Window parent, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=PanelNameStr) -&gt; PyPreviewControlBar</autodoc>
        <paramlist>
          <param name="preview" type="PrintPreview" default=""/>
          <param name="buttons" type="long" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetPrintPreview" type="" overloaded="no">
        <autodoc>SetPrintPreview(PrintPreview preview)</autodoc>
        <paramlist>
          <param name="preview" type="PrintPreview" default=""/>
        </paramlist>
      </method>
      <method name="base_CreateButtons" type="" overloaded="no">
        <autodoc>base_CreateButtons()</autodoc>
      </method>
      <method name="base_SetZoomControl" type="" overloaded="no">
        <autodoc>base_SetZoomControl(int zoom)</autodoc>
        <paramlist>
          <param name="zoom" type="int" default=""/>
        </paramlist>
      </method>
    </class>
  </module>
  <module name="controls">
    <import name="core"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Button" oldname="wxButton" module="controls">
      <docstring>A button is a control that contains a text string, and is one of the most
common elements of a GUI.  It may be placed on a dialog box or panel, or
indeed almost any other window.</docstring>
      <refdoc>
 Styles
    wx.BU_LEFT:     Left-justifies the label. WIN32 only.
    wx.BU_TOP:      Aligns the label to the top of the button. WIN32 only.
    wx.BU_RIGHT:    Right-justifies the bitmap label. WIN32 only.
    wx.BU_BOTTOM:   Aligns the label to the bottom of the button. WIN32 only.
    wx.BU_EXACTFIT: Creates the button as small as possible instead of making
                    it of the standard size (which is the default behaviour.)

 Events
     EVT_BUTTON:    Sent when the button is clicked.
</refdoc>
      <baseclass name="Control"/>
      <constructor name="Button" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ButtonNameStr) -&gt; Button</autodoc>
        <docstring>Create and show a button.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyButtonNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreButton" overloaded="no">
        <autodoc>PreButton() -&gt; Button</autodoc>
        <docstring>Precreate a Button for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ButtonNameStr) -&gt; bool</autodoc>
        <docstring>Acutally create the GUI Button for 2-phase creation.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyButtonNameStr"/>
        </paramlist>
      </method>
      <method name="SetDefault" type="" overloaded="no">
        <autodoc>SetDefault()</autodoc>
        <docstring>This sets the button to be the default item for the panel or dialog box.</docstring>
      </method>
      <staticmethod name="GetDefaultSize" type="Size" overloaded="no">
        <autodoc>GetDefaultSize() -&gt; Size</autodoc>
      </staticmethod>
    </class>
    <class name="BitmapButton" oldname="wxBitmapButton" module="controls">
      <docstring>A Button that contains a bitmap.  A bitmap button can be supplied with a
single bitmap, and wxWindows will draw all button states using this bitmap. If
the application needs more control, additional bitmaps for the selected state,
unpressed focused state, and greyed-out state may be supplied.
</docstring>
      <refdoc>
 Styles
    wx.BU_AUTODRAW: If this is specified, the button will be drawn
                    automatically using the label bitmap only, providing a
                    3D-look border. If this style is not specified, the button
                    will be drawn without borders and using all provided
                    bitmaps. WIN32 only.
    wx.BU_LEFT:     Left-justifies the label. WIN32 only.
    wx.BU_TOP:      Aligns the label to the top of the button. WIN32 only.
    wx.BU_RIGHT:    Right-justifies the bitmap label. WIN32 only.
    wx.BU_BOTTOM:   Aligns the label to the bottom of the button. WIN32 only.
    wx.BU_EXACTFIT: Creates the button as small as possible instead of making
                    it of the standard size (which is the default behaviour.)

 Events
     EVT_BUTTON:    Sent when the button is clicked.
</refdoc>
      <baseclass name="Button"/>
      <constructor name="BitmapButton" overloaded="no">
        <autodoc>__init__(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BU_AUTODRAW, 
    Validator validator=DefaultValidator, 
    String name=ButtonNameStr) -&gt; BitmapButton</autodoc>
        <docstring>Create and show a button with a bitmap for the label.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxBU_AUTODRAW"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyButtonNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreBitmapButton" overloaded="no">
        <autodoc>PreBitmapButton() -&gt; BitmapButton</autodoc>
        <docstring>Precreate a BitmapButton for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BU_AUTODRAW, 
    Validator validator=DefaultValidator, 
    String name=ButtonNameStr) -&gt; bool</autodoc>
        <docstring>Acutally create the GUI BitmapButton for 2-phase creation.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxBU_AUTODRAW"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyButtonNameStr"/>
        </paramlist>
      </method>
      <method name="GetBitmapLabel" type="Bitmap" overloaded="no">
        <autodoc>GetBitmapLabel() -&gt; Bitmap</autodoc>
        <docstring>Returns the label bitmap (the one passed to the constructor).</docstring>
      </method>
      <method name="GetBitmapDisabled" type="Bitmap" overloaded="no">
        <autodoc>GetBitmapDisabled() -&gt; Bitmap</autodoc>
        <docstring>Returns the bitmap for the disabled state.</docstring>
      </method>
      <method name="GetBitmapFocus" type="Bitmap" overloaded="no">
        <autodoc>GetBitmapFocus() -&gt; Bitmap</autodoc>
        <docstring>Returns the bitmap for the focused state.</docstring>
      </method>
      <method name="GetBitmapSelected" type="Bitmap" overloaded="no">
        <autodoc>GetBitmapSelected() -&gt; Bitmap</autodoc>
        <docstring>Returns the bitmap for the selected state.</docstring>
      </method>
      <method name="SetBitmapDisabled" type="" overloaded="no">
        <autodoc>SetBitmapDisabled(Bitmap bitmap)</autodoc>
        <docstring>Sets the bitmap for the disabled button appearance.</docstring>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetBitmapFocus" type="" overloaded="no">
        <autodoc>SetBitmapFocus(Bitmap bitmap)</autodoc>
        <docstring>Sets the bitmap for the button appearance when it has the keyboard focus.</docstring>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetBitmapSelected" type="" overloaded="no">
        <autodoc>SetBitmapSelected(Bitmap bitmap)</autodoc>
        <docstring>Sets the bitmap for the selected (depressed) button appearance.</docstring>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetBitmapLabel" type="" overloaded="no">
        <autodoc>SetBitmapLabel(Bitmap bitmap)</autodoc>
        <docstring>Sets the bitmap label for the button.  This is the bitmap used for the
unselected state, and for all other states if no other bitmaps are provided.</docstring>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetMargins" type="" overloaded="no">
        <autodoc>SetMargins(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMarginX" type="int" overloaded="no">
        <autodoc>GetMarginX() -&gt; int</autodoc>
      </method>
      <method name="GetMarginY" type="int" overloaded="no">
        <autodoc>GetMarginY() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="CheckBox" oldname="wxCheckBox" module="controls">
      <docstring>A checkbox is a labelled box which by default is either on (checkmark is
visible) or off (no checkmark). Optionally (When the wxCHK_3STATE style flag
is set) it can have a third state, called the mixed or undetermined
state. Often this is used as a "Does Not Apply" state.</docstring>
      <refdoc>
 Styles
    wx.CHK_2STATE:  Create a 2-state checkbox. This is the default.
    wx.CHK_3STATE:  Create a 3-state checkbox.
    wx.CHK_ALLOW_3RD_STATE_FOR_USER: By default a user can't set a 3-state
                                     checkbox to the third state. It can only
                                     be done from code. Using this flags
                                     allows the user to set the checkbox to
                                     the third state by clicking.
    wx.ALIGN_RIGHT:  Makes the text appear on the left of the checkbox.

 Events
    EVT_CHECKBOX:       Sent when checkbox is clicked.
</refdoc>
      <baseclass name="Control"/>
      <constructor name="CheckBox" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=CheckBoxNameStr) -&gt; CheckBox</autodoc>
        <docstring>Creates and shows a CheckBox control</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyCheckBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreCheckBox" overloaded="no">
        <autodoc>PreCheckBox() -&gt; CheckBox</autodoc>
        <docstring>Precreate a CheckBox for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=CheckBoxNameStr) -&gt; bool</autodoc>
        <docstring>Actually create the GUI CheckBox for 2-phase creation.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyCheckBoxNameStr"/>
        </paramlist>
      </method>
      <method name="GetValue" type="bool" overloaded="no">
        <autodoc>GetValue() -&gt; bool</autodoc>
        <docstring>Gets the state of a 2-state CheckBox.  Returns True if it is checked,
False otherwise.</docstring>
      </method>
      <method name="IsChecked" type="bool" overloaded="no">
        <autodoc>IsChecked() -&gt; bool</autodoc>
        <docstring>Similar to GetValue, but raises an exception if it is not a 2-state CheckBox.</docstring>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(bool state)</autodoc>
        <docstring>Set the state of a 2-state CheckBox.  Pass True for checked,
False for unchecked.</docstring>
        <paramlist>
          <param name="state" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Get3StateValue" type="wxCheckBoxState" overloaded="no">
        <autodoc>Get3StateValue() -&gt; int</autodoc>
        <docstring>Returns wx.CHK_UNCHECKED when the CheckBox is unchecked, wx.CHK_CHECKED when
it is checked and wx.CHK_UNDETERMINED when it's in the undetermined state.
Raises an exceptiion when the function is used with a 2-state CheckBox.</docstring>
      </method>
      <method name="Set3StateValue" type="" overloaded="no">
        <autodoc>Set3StateValue(int state)</autodoc>
        <docstring>Sets the CheckBox to the given state.  The state parameter can be
one of the following: wx.CHK_UNCHECKED (Check is off), wx.CHK_CHECKED
(Check is on) or wx.CHK_UNDETERMINED (Check is mixed). Raises an
exception  when the CheckBox is a 2-state checkbox and setting the state
to wx.CHK_UNDETERMINED.</docstring>
        <paramlist>
          <param name="state" type="wxCheckBoxState" default=""/>
        </paramlist>
      </method>
      <method name="Is3State" type="bool" overloaded="no">
        <autodoc>Is3State() -&gt; bool</autodoc>
        <docstring>Returns whether or not the CheckBox is a 3-state CheckBox.</docstring>
      </method>
      <method name="Is3rdStateAllowedForUser" type="bool" overloaded="no">
        <autodoc>Is3rdStateAllowedForUser() -&gt; bool</autodoc>
        <docstring>Returns whether or not the user can set the CheckBox to the third state.</docstring>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Choice" oldname="wxChoice" module="controls">
      <docstring>A Choice control is used to select one of a list of strings. Unlike a ListBox,
only the selection is visible until the user pulls down the menu of choices.</docstring>
      <refdoc>
 Events
    EVT_CHOICE:         Sent when an item in the list is selected.
</refdoc>
      <baseclass name="ControlWithItems"/>
      <constructor name="Choice" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize,
    List choices=[], long style=0, Validator validator=DefaultValidator,
    String name=ChoiceNameStr) -&gt; Choice</autodoc>
        <docstring>Create and show a Choice control</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyChoiceNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreChoice" overloaded="no">
        <autodoc>PreChoice() -&gt; Choice</autodoc>
        <docstring>Precreate a Choice control for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize,
    List choices=[], long style=0, Validator validator=DefaultValidator,
    String name=ChoiceNameStr) -&gt; bool</autodoc>
        <docstring>Actually create the GUI Choice control for 2-phase creation</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyChoiceNameStr"/>
        </paramlist>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int n)</autodoc>
        <docstring>Select the n'th item (zero based) in the list.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetStringSelection" type="" overloaded="no">
        <autodoc>SetStringSelection(String string)</autodoc>
        <docstring>Select the item with the specifed string</docstring>
        <paramlist>
          <param name="string" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetString" type="" overloaded="no">
        <autodoc>SetString(int n, String string)</autodoc>
        <docstring>Set the label for the n'th item (zero based) in the list.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="string" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ComboBox" oldname="wxComboBox" module="controls">
      <docstring>A combobox is like a combination of an edit control and a listbox. It can be
displayed as static list with editable or read-only text field; or a drop-down
list with text field.</docstring>
      <refdoc>
 Styles
    wx.CB_SIMPLE:  Creates a combobox with a permanently displayed list.
                        Windows only.

    wx.CB_DROPDOWN:  Creates a combobox with a drop-down list.

    wx.CB_READONLY:  Same as wxCB_DROPDOWN but only the strings specified as
                        the combobox choices can be selected, it is impossible
                        to select (even from a program) a string which is not in
                        the choices list.

    wx.CB_SORT:  Sorts the entries in the list alphabetically.

 Events

    EVT_COMBOBOX:  Sent when an item on the list is selected.
    EVT_TEXT:          Sent when the combobox text changes.
</refdoc>
      <baseclass name="Control"/>
      <baseclass name="ItemContainer"/>
      <constructor name="ComboBox" overloaded="no">
        <autodoc>__init__(Window parent, int id, String value=EmptyString,
    Point pos=DefaultPosition, Size size=DefaultSize,
     List choices=[], long style=0, Validator validator=DefaultValidator,
     String name=ComboBoxNameStr) -&gt; ComboBox</autodoc>
        <docstring>Constructor, creates and shows a ComboBox control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="value" type="String" default="wxPyEmptyString"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyComboBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreComboBox" overloaded="no">
        <autodoc>PreComboBox() -&gt; ComboBox</autodoc>
        <docstring>Precreate a ComboBox control for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String value=EmptyString,
    Point pos=DefaultPosition, Size size=DefaultSize,
    List choices=[], long style=0, Validator validator=DefaultValidator,
    String name=ChoiceNameStr) -&gt; bool</autodoc>
        <docstring>Actually create the GUI wxComboBox control for 2-phase creation</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="value" type="String" default="wxPyEmptyString"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyChoiceNameStr"/>
        </paramlist>
      </method>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
        <docstring>Returns the current value in the combobox text field.</docstring>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(String value)</autodoc>
        <paramlist>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Copy" type="" overloaded="no">
        <autodoc>Copy()</autodoc>
        <docstring>Copies the selected text to the clipboard.</docstring>
      </method>
      <method name="Cut" type="" overloaded="no">
        <autodoc>Cut()</autodoc>
        <docstring>Copies the selected text to the clipboard and removes the selection.</docstring>
      </method>
      <method name="Paste" type="" overloaded="no">
        <autodoc>Paste()</autodoc>
        <docstring>Pastes text from the clipboard to the text field.</docstring>
      </method>
      <method name="SetInsertionPoint" type="" overloaded="no">
        <autodoc>SetInsertionPoint(long pos)</autodoc>
        <docstring>Sets the insertion point in the combobox text field.</docstring>
        <paramlist>
          <param name="pos" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetInsertionPoint" type="long" overloaded="no">
        <autodoc>GetInsertionPoint() -&gt; long</autodoc>
        <docstring>Returns the insertion point for the combobox's text field.</docstring>
      </method>
      <method name="GetLastPosition" type="long" overloaded="no">
        <autodoc>GetLastPosition() -&gt; long</autodoc>
        <docstring>Returns the last position in the combobox text field.</docstring>
      </method>
      <method name="Replace" type="" overloaded="no">
        <autodoc>Replace(long from, long to, String value)</autodoc>
        <docstring>Replaces the text between two positions with the given text, in the
combobox text field.</docstring>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int n)</autodoc>
        <docstring>Selects the text between the two positions, in the combobox text field.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMark" type="" overloaded="no">
        <autodoc>SetMark(long from, long to)</autodoc>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetEditable" type="" overloaded="no">
        <autodoc>SetEditable(bool editable)</autodoc>
        <paramlist>
          <param name="editable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetInsertionPointEnd" type="" overloaded="no">
        <autodoc>SetInsertionPointEnd()</autodoc>
        <docstring>Sets the insertion point at the end of the combobox text field.</docstring>
      </method>
      <method name="Remove" type="" overloaded="no">
        <autodoc>Remove(long from, long to)</autodoc>
        <docstring>Removes the text between the two positions in the combobox text field.</docstring>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Gauge" oldname="wxGauge" module="controls">
      <baseclass name="Control"/>
      <constructor name="Gauge" overloaded="no">
        <autodoc>__init__(Window parent, int id, int range, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=GA_HORIZONTAL, 
    Validator validator=DefaultValidator, 
    String name=GaugeNameStr) -&gt; Gauge</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="range" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxGA_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyGaugeNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreGauge" overloaded="no">
        <autodoc>PreGauge() -&gt; Gauge</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, int range, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=GA_HORIZONTAL, 
    Validator validator=DefaultValidator, 
    String name=GaugeNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="range" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxGA_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyGaugeNameStr"/>
        </paramlist>
      </method>
      <method name="SetRange" type="" overloaded="no">
        <autodoc>SetRange(int range)</autodoc>
        <paramlist>
          <param name="range" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetRange" type="int" overloaded="no">
        <autodoc>GetRange() -&gt; int</autodoc>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetValue" type="int" overloaded="no">
        <autodoc>GetValue() -&gt; int</autodoc>
      </method>
      <method name="IsVertical" type="bool" overloaded="no">
        <autodoc>IsVertical() -&gt; bool</autodoc>
      </method>
      <method name="SetShadowWidth" type="" overloaded="no">
        <autodoc>SetShadowWidth(int w)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetShadowWidth" type="int" overloaded="no">
        <autodoc>GetShadowWidth() -&gt; int</autodoc>
      </method>
      <method name="SetBezelFace" type="" overloaded="no">
        <autodoc>SetBezelFace(int w)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBezelFace" type="int" overloaded="no">
        <autodoc>GetBezelFace() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="StaticBox" oldname="wxStaticBox" module="controls">
      <baseclass name="Control"/>
      <constructor name="StaticBox" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBoxNameStr) -&gt; StaticBox</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyStaticBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreStaticBox" overloaded="no">
        <autodoc>PreStaticBox() -&gt; StaticBox</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBoxNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyStaticBoxNameStr"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="StaticLine" oldname="wxStaticLine" module="controls">
      <baseclass name="Control"/>
      <constructor name="StaticLine" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=LI_HORIZONTAL, 
    String name=StaticTextNameStr) -&gt; StaticLine</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLI_HORIZONTAL"/>
          <param name="name" type="String" default="wxPyStaticTextNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreStaticLine" overloaded="no">
        <autodoc>PreStaticLine() -&gt; StaticLine</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=LI_HORIZONTAL, 
    String name=StaticTextNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLI_HORIZONTAL"/>
          <param name="name" type="String" default="wxPyStaticTextNameStr"/>
        </paramlist>
      </method>
      <method name="IsVertical" type="bool" overloaded="no">
        <autodoc>IsVertical() -&gt; bool</autodoc>
      </method>
      <staticmethod name="GetDefaultSize" type="int" overloaded="no">
        <autodoc>GetDefaultSize() -&gt; int</autodoc>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="StaticText" oldname="wxStaticText" module="controls">
      <baseclass name="Control"/>
      <constructor name="StaticText" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticTextNameStr) -&gt; StaticText</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyStaticTextNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreStaticText" overloaded="no">
        <autodoc>PreStaticText() -&gt; StaticText</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticTextNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyStaticTextNameStr"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="StaticBitmap" oldname="wxStaticBitmap" module="controls">
      <baseclass name="Control"/>
      <constructor name="StaticBitmap" overloaded="no">
        <autodoc>__init__(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBitmapNameStr) -&gt; StaticBitmap</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyStaticBitmapNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreStaticBitmap" overloaded="no">
        <autodoc>PreStaticBitmap() -&gt; StaticBitmap</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Bitmap bitmap, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    String name=StaticBitmapNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyStaticBitmapNameStr"/>
        </paramlist>
      </method>
      <method name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="SetBitmap" type="" overloaded="no">
        <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetIcon" type="" overloaded="no">
        <autodoc>SetIcon(Icon icon)</autodoc>
        <paramlist>
          <param name="icon" type="Icon" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ListBox" oldname="wxListBox" module="controls">
      <baseclass name="ControlWithItems"/>
      <constructor name="ListBox" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; ListBox</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreListBox" overloaded="no">
        <autodoc>PreListBox() -&gt; ListBox</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListBoxNameStr"/>
        </paramlist>
      </method>
      <method name="Insert" type="" overloaded="no">
        <autodoc>Insert(String item, int pos, PyObject clientData=None)</autodoc>
        <docstring>Insert an item into the control before the item at the pos index,
optionally associating some data object with the item.</docstring>
        <paramlist>
          <param name="item" type="String" default=""/>
          <param name="pos" type="int" default=""/>
          <param name="clientData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="InsertItems" type="" overloaded="no">
        <autodoc>InsertItems(wxArrayString items, int pos)</autodoc>
        <paramlist>
          <param name="items" type="wxArrayString" default=""/>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(wxArrayString items)</autodoc>
        <paramlist>
          <param name="items" type="wxArrayString" default=""/>
        </paramlist>
      </method>
      <method name="IsSelected" type="bool" overloaded="no">
        <autodoc>IsSelected(int n) -&gt; bool</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int n, bool select=True)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="select" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Select" type="" overloaded="no">
        <autodoc>Select(int n)</autodoc>
        <docstring>Sets the item at index 'n' to be the selected item.</docstring>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Deselect" type="" overloaded="no">
        <autodoc>Deselect(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeselectAll" type="" overloaded="no">
        <autodoc>DeselectAll(int itemToLeaveSelected=-1)</autodoc>
        <paramlist>
          <param name="itemToLeaveSelected" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="SetStringSelection" type="bool" overloaded="no">
        <autodoc>SetStringSelection(String s, bool select=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
          <param name="select" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetSelections" type="PyObject" overloaded="no">
        <autodoc>GetSelections() -&gt; PyObject</autodoc>
      </method>
      <method name="SetFirstItem" type="" overloaded="no">
        <autodoc>SetFirstItem(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFirstItemStr" type="" overloaded="no">
        <autodoc>SetFirstItemStr(String s)</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="EnsureVisible" type="" overloaded="no">
        <autodoc>EnsureVisible(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AppendAndEnsureVisible" type="" overloaded="no">
        <autodoc>AppendAndEnsureVisible(String s)</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="IsSorted" type="bool" overloaded="no">
        <autodoc>IsSorted() -&gt; bool</autodoc>
      </method>
      <method name="SetItemForegroundColour" type="" overloaded="no">
        <autodoc>SetItemForegroundColour(int item, Colour c)</autodoc>
        <paramlist>
          <param name="item" type="int" default=""/>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetItemBackgroundColour" type="" overloaded="no">
        <autodoc>SetItemBackgroundColour(int item, Colour c)</autodoc>
        <paramlist>
          <param name="item" type="int" default=""/>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetItemFont" type="" overloaded="no">
        <autodoc>SetItemFont(int item, Font f)</autodoc>
        <paramlist>
          <param name="item" type="int" default=""/>
          <param name="f" type="Font" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="CheckListBox" oldname="wxCheckListBox" module="controls">
      <baseclass name="ListBox"/>
      <constructor name="CheckListBox" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; CheckListBox</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreCheckListBox" overloaded="no">
        <autodoc>PreCheckListBox() -&gt; CheckListBox</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    wxArrayString choices=wxPyEmptyStringArray, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ListBoxNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListBoxNameStr"/>
        </paramlist>
      </method>
      <method name="IsChecked" type="bool" overloaded="no">
        <autodoc>IsChecked(int index) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Check" type="" overloaded="no">
        <autodoc>Check(int index, int check=True)</autodoc>
        <paramlist>
          <param name="index" type="int" default=""/>
          <param name="check" type="int" default="True"/>
        </paramlist>
      </method>
      <method name="GetItemHeight" type="int" overloaded="no">
        <autodoc>GetItemHeight() -&gt; int</autodoc>
      </method>
      <method name="HitTest" type="int" overloaded="no">
        <autodoc>HitTest(Point pt) -&gt; int</autodoc>
        <docstring>Test where the given (in client coords) point lies</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="HitTestXY" type="int" overloaded="no">
        <autodoc>HitTestXY(int x, int y) -&gt; int</autodoc>
        <docstring>Test where the given (in client coords) point lies</docstring>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="TextAttr" oldname="wxTextAttr" module="controls">
      <constructor name="TextAttr" overloaded="yes"/>
      <constructor name="TextAttr" overloaded="yes">
        <autodoc>__init__() -&gt; TextAttr
__init__(Colour colText, Colour colBack=wxNullColour, Font font=wxNullFont, 
    int alignment=TEXT_ALIGNMENT_DEFAULT) -&gt; TextAttr</autodoc>
        <paramlist>
          <param name="colText" type="Colour" default=""/>
          <param name="colBack" type="Colour" default="wxNullColour"/>
          <param name="font" type="Font" default="wxNullFont"/>
          <param name="alignment" type="wxTextAttrAlignment" default="wxTEXT_ALIGNMENT_DEFAULT"/>
        </paramlist>
      </constructor>
      <destructor name="~wxTextAttr" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Init" type="" overloaded="no">
        <autodoc>Init()</autodoc>
      </method>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(Colour colText)</autodoc>
        <paramlist>
          <param name="colText" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="" overloaded="no">
        <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
        <paramlist>
          <param name="colBack" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font, long flags=TEXT_ATTR_FONT)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
          <param name="flags" type="long" default="wxTEXT_ATTR_FONT"/>
        </paramlist>
      </method>
      <method name="SetAlignment" type="" overloaded="no">
        <autodoc>SetAlignment(int alignment)</autodoc>
        <paramlist>
          <param name="alignment" type="wxTextAttrAlignment" default=""/>
        </paramlist>
      </method>
      <method name="SetTabs" type="" overloaded="no">
        <autodoc>SetTabs(wxArrayInt tabs)</autodoc>
        <paramlist>
          <param name="tabs" type="wxArrayInt" default=""/>
        </paramlist>
      </method>
      <method name="SetLeftIndent" type="" overloaded="no">
        <autodoc>SetLeftIndent(int indent)</autodoc>
        <paramlist>
          <param name="indent" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRightIndent" type="" overloaded="no">
        <autodoc>SetRightIndent(int indent)</autodoc>
        <paramlist>
          <param name="indent" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFlags" type="" overloaded="no">
        <autodoc>SetFlags(long flags)</autodoc>
        <paramlist>
          <param name="flags" type="long" default=""/>
        </paramlist>
      </method>
      <method name="HasTextColour" type="bool" overloaded="no">
        <autodoc>HasTextColour() -&gt; bool</autodoc>
      </method>
      <method name="HasBackgroundColour" type="bool" overloaded="no">
        <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
      </method>
      <method name="HasFont" type="bool" overloaded="no">
        <autodoc>HasFont() -&gt; bool</autodoc>
      </method>
      <method name="HasAlignment" type="bool" overloaded="no">
        <autodoc>HasAlignment() -&gt; bool</autodoc>
      </method>
      <method name="HasTabs" type="bool" overloaded="no">
        <autodoc>HasTabs() -&gt; bool</autodoc>
      </method>
      <method name="HasLeftIndent" type="bool" overloaded="no">
        <autodoc>HasLeftIndent() -&gt; bool</autodoc>
      </method>
      <method name="HasRightIndent" type="bool" overloaded="no">
        <autodoc>HasRightIndent() -&gt; bool</autodoc>
      </method>
      <method name="HasFlag" type="bool" overloaded="no">
        <autodoc>HasFlag(long flag) -&gt; bool</autodoc>
        <paramlist>
          <param name="flag" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetTextColour" type="Colour" overloaded="no">
        <autodoc>GetTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
      </method>
      <method name="GetAlignment" type="wxTextAttrAlignment" overloaded="no">
        <autodoc>GetAlignment() -&gt; int</autodoc>
      </method>
      <method name="GetTabs" type="wxArrayInt" overloaded="no">
        <autodoc>GetTabs() -&gt; wxArrayInt</autodoc>
      </method>
      <method name="GetLeftIndent" type="long" overloaded="no">
        <autodoc>GetLeftIndent() -&gt; long</autodoc>
      </method>
      <method name="GetRightIndent" type="long" overloaded="no">
        <autodoc>GetRightIndent() -&gt; long</autodoc>
      </method>
      <method name="GetFlags" type="long" overloaded="no">
        <autodoc>GetFlags() -&gt; long</autodoc>
      </method>
      <method name="IsDefault" type="bool" overloaded="no">
        <autodoc>IsDefault() -&gt; bool</autodoc>
      </method>
      <staticmethod name="Combine" type="TextAttr" overloaded="no">
        <autodoc>Combine(TextAttr attr, TextAttr attrDef, TextCtrl text) -&gt; TextAttr</autodoc>
        <paramlist>
          <param name="attr" type="TextAttr" default=""/>
          <param name="attrDef" type="TextAttr" default=""/>
          <param name="text" type="wxTextCtrl" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <class name="TextCtrl" oldname="wxTextCtrl" module="controls">
      <baseclass name="Control"/>
      <constructor name="TextCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id, String value=EmptyString, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=TextCtrlNameStr) -&gt; TextCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="value" type="String" default="wxPyEmptyString"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyTextCtrlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreTextCtrl" overloaded="no">
        <autodoc>PreTextCtrl() -&gt; TextCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String value=EmptyString, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=TextCtrlNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="value" type="String" default="wxPyEmptyString"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyTextCtrlNameStr"/>
        </paramlist>
      </method>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(String value)</autodoc>
        <paramlist>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetRange" type="String" overloaded="no">
        <autodoc>GetRange(long from, long to) -&gt; String</autodoc>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetLineLength" type="int" overloaded="no">
        <autodoc>GetLineLength(long lineNo) -&gt; int</autodoc>
        <paramlist>
          <param name="lineNo" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetLineText" type="String" overloaded="no">
        <autodoc>GetLineText(long lineNo) -&gt; String</autodoc>
        <paramlist>
          <param name="lineNo" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetNumberOfLines" type="int" overloaded="no">
        <autodoc>GetNumberOfLines() -&gt; int</autodoc>
      </method>
      <method name="IsModified" type="bool" overloaded="no">
        <autodoc>IsModified() -&gt; bool</autodoc>
      </method>
      <method name="IsEditable" type="bool" overloaded="no">
        <autodoc>IsEditable() -&gt; bool</autodoc>
      </method>
      <method name="IsSingleLine" type="bool" overloaded="no">
        <autodoc>IsSingleLine() -&gt; bool</autodoc>
      </method>
      <method name="IsMultiLine" type="bool" overloaded="no">
        <autodoc>IsMultiLine() -&gt; bool</autodoc>
      </method>
      <method name="GetSelection" type="" overloaded="no">
        <autodoc>GetSelection() -&gt; (from, to)</autodoc>
        <docstring>If the return values from and to are the same, there is no selection.</docstring>
        <paramlist>
          <param name="OUTPUT" type="long" default=""/>
          <param name="OUTPUT" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetStringSelection" type="String" overloaded="no">
        <autodoc>GetStringSelection() -&gt; String</autodoc>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="Replace" type="" overloaded="no">
        <autodoc>Replace(long from, long to, String value)</autodoc>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Remove" type="" overloaded="no">
        <autodoc>Remove(long from, long to)</autodoc>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
        </paramlist>
      </method>
      <method name="LoadFile" type="bool" overloaded="no">
        <autodoc>LoadFile(String file) -&gt; bool</autodoc>
        <paramlist>
          <param name="file" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SaveFile" type="bool" overloaded="no">
        <autodoc>SaveFile(String file=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="file" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="MarkDirty" type="" overloaded="no">
        <autodoc>MarkDirty()</autodoc>
      </method>
      <method name="DiscardEdits" type="" overloaded="no">
        <autodoc>DiscardEdits()</autodoc>
      </method>
      <method name="SetMaxLength" type="" overloaded="no">
        <autodoc>SetMaxLength(unsigned long len)</autodoc>
        <paramlist>
          <param name="len" type="unsigned long" default=""/>
        </paramlist>
      </method>
      <method name="WriteText" type="" overloaded="no">
        <autodoc>WriteText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AppendText" type="" overloaded="no">
        <autodoc>AppendText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="EmulateKeyPress" type="bool" overloaded="no">
        <autodoc>EmulateKeyPress(KeyEvent event) -&gt; bool</autodoc>
        <paramlist>
          <param name="event" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="SetStyle" type="bool" overloaded="no">
        <autodoc>SetStyle(long start, long end, TextAttr style) -&gt; bool</autodoc>
        <paramlist>
          <param name="start" type="long" default=""/>
          <param name="end" type="long" default=""/>
          <param name="style" type="TextAttr" default=""/>
        </paramlist>
      </method>
      <method name="GetStyle" type="bool" overloaded="no">
        <autodoc>GetStyle(long position, TextAttr style) -&gt; bool</autodoc>
        <paramlist>
          <param name="position" type="long" default=""/>
          <param name="style" type="TextAttr" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultStyle" type="bool" overloaded="no">
        <autodoc>SetDefaultStyle(TextAttr style) -&gt; bool</autodoc>
        <paramlist>
          <param name="style" type="TextAttr" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultStyle" type="TextAttr" overloaded="no">
        <autodoc>GetDefaultStyle() -&gt; TextAttr</autodoc>
      </method>
      <method name="XYToPosition" type="long" overloaded="no">
        <autodoc>XYToPosition(long x, long y) -&gt; long</autodoc>
        <paramlist>
          <param name="x" type="long" default=""/>
          <param name="y" type="long" default=""/>
        </paramlist>
      </method>
      <method name="PositionToXY" type="" overloaded="no">
        <autodoc>PositionToXY(long pos) -&gt; (x, y)</autodoc>
        <paramlist>
          <param name="pos" type="long" default=""/>
          <param name="OUTPUT" type="long" default=""/>
          <param name="OUTPUT" type="long" default=""/>
        </paramlist>
      </method>
      <method name="ShowPosition" type="" overloaded="no">
        <autodoc>ShowPosition(long pos)</autodoc>
        <paramlist>
          <param name="pos" type="long" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="wxTextCtrlHitTestResult" overloaded="no">
        <autodoc>HitTest(Point pt) -&gt; (result, row, col)</autodoc>
        <docstring>Find the character at position given in pixels.
NB: pt is in device coords (not adjusted for the client area
origin nor scrolling)</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="OUTPUT" type="long" default=""/>
          <param name="OUTPUT" type="long" default=""/>
        </paramlist>
      </method>
      <method name="Copy" type="" overloaded="no">
        <autodoc>Copy()</autodoc>
      </method>
      <method name="Cut" type="" overloaded="no">
        <autodoc>Cut()</autodoc>
      </method>
      <method name="Paste" type="" overloaded="no">
        <autodoc>Paste()</autodoc>
      </method>
      <method name="CanCopy" type="bool" overloaded="no">
        <autodoc>CanCopy() -&gt; bool</autodoc>
      </method>
      <method name="CanCut" type="bool" overloaded="no">
        <autodoc>CanCut() -&gt; bool</autodoc>
      </method>
      <method name="CanPaste" type="bool" overloaded="no">
        <autodoc>CanPaste() -&gt; bool</autodoc>
      </method>
      <method name="Undo" type="" overloaded="no">
        <autodoc>Undo()</autodoc>
      </method>
      <method name="Redo" type="" overloaded="no">
        <autodoc>Redo()</autodoc>
      </method>
      <method name="CanUndo" type="bool" overloaded="no">
        <autodoc>CanUndo() -&gt; bool</autodoc>
      </method>
      <method name="CanRedo" type="bool" overloaded="no">
        <autodoc>CanRedo() -&gt; bool</autodoc>
      </method>
      <method name="SetInsertionPoint" type="" overloaded="no">
        <autodoc>SetInsertionPoint(long pos)</autodoc>
        <paramlist>
          <param name="pos" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetInsertionPointEnd" type="" overloaded="no">
        <autodoc>SetInsertionPointEnd()</autodoc>
      </method>
      <method name="GetInsertionPoint" type="long" overloaded="no">
        <autodoc>GetInsertionPoint() -&gt; long</autodoc>
      </method>
      <method name="GetLastPosition" type="long" overloaded="no">
        <autodoc>GetLastPosition() -&gt; long</autodoc>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(long from, long to)</autodoc>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SelectAll" type="" overloaded="no">
        <autodoc>SelectAll()</autodoc>
      </method>
      <method name="SetEditable" type="" overloaded="no">
        <autodoc>SetEditable(bool editable)</autodoc>
        <paramlist>
          <param name="editable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="write" type="" overloaded="no">
        <autodoc>write(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetString" type="String" overloaded="no">
        <autodoc>GetString(long from, long to) -&gt; String</autodoc>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="TextUrlEvent" oldname="wxTextUrlEvent" module="controls">
      <baseclass name="CommandEvent"/>
      <constructor name="TextUrlEvent" overloaded="no">
        <autodoc>__init__(int winid, MouseEvent evtMouse, long start, long end) -&gt; TextUrlEvent</autodoc>
        <paramlist>
          <param name="winid" type="int" default=""/>
          <param name="evtMouse" type="MouseEvent" default=""/>
          <param name="start" type="long" default=""/>
          <param name="end" type="long" default=""/>
        </paramlist>
      </constructor>
      <method name="GetMouseEvent" type="MouseEvent" overloaded="no">
        <autodoc>GetMouseEvent() -&gt; MouseEvent</autodoc>
      </method>
      <method name="GetURLStart" type="long" overloaded="no">
        <autodoc>GetURLStart() -&gt; long</autodoc>
      </method>
      <method name="GetURLEnd" type="long" overloaded="no">
        <autodoc>GetURLEnd() -&gt; long</autodoc>
      </method>
    </class>
    <pythoncode>
EVT_TEXT        = wx.PyEventBinder( wxEVT_COMMAND_TEXT_UPDATED, 1)
EVT_TEXT_ENTER  = wx.PyEventBinder( wxEVT_COMMAND_TEXT_ENTER, 1)
EVT_TEXT_URL    = wx.PyEventBinder( wxEVT_COMMAND_TEXT_URL, 1) 
EVT_TEXT_MAXLEN = wx.PyEventBinder( wxEVT_COMMAND_TEXT_MAXLEN, 1)
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ScrollBar" oldname="wxScrollBar" module="controls">
      <baseclass name="Control"/>
      <constructor name="ScrollBar" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SB_HORIZONTAL, 
    Validator validator=DefaultValidator, String name=ScrollBarNameStr) -&gt; ScrollBar</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSB_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyScrollBarNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreScrollBar" overloaded="no">
        <autodoc>PreScrollBar() -&gt; ScrollBar</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SB_HORIZONTAL, 
    Validator validator=DefaultValidator, String name=ScrollBarNameStr) -&gt; bool</autodoc>
        <docstring>Do the 2nd phase and create the GUI control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSB_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyScrollBarNameStr"/>
        </paramlist>
      </method>
      <method name="GetThumbPosition" type="int" overloaded="no">
        <autodoc>GetThumbPosition() -&gt; int</autodoc>
      </method>
      <method name="GetThumbSize" type="int" overloaded="no">
        <autodoc>GetThumbSize() -&gt; int</autodoc>
      </method>
      <method name="GetPageSize" type="int" overloaded="no">
        <autodoc>GetPageSize() -&gt; int</autodoc>
      </method>
      <method name="GetRange" type="int" overloaded="no">
        <autodoc>GetRange() -&gt; int</autodoc>
      </method>
      <method name="IsVertical" type="bool" overloaded="no">
        <autodoc>IsVertical() -&gt; bool</autodoc>
      </method>
      <method name="SetThumbPosition" type="" overloaded="no">
        <autodoc>SetThumbPosition(int viewStart)</autodoc>
        <paramlist>
          <param name="viewStart" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetScrollbar" type="" overloaded="no">
        <autodoc>SetScrollbar(int position, int thumbSize, int range, int pageSize, 
    bool refresh=True)</autodoc>
        <docstring>Sets the scrollbar properties of a built-in scrollbar.

    orientation: Determines the scrollbar whose page size is to be
                 set. May be wx.HORIZONTAL or wx.VERTICAL.

    position:    The position of the scrollbar in scroll units.

    thumbSize:   The size of the thumb, or visible portion of the
                 scrollbar, in scroll units.

    range:       The maximum position of the scrollbar.

    refresh:     True to redraw the scrollbar, false otherwise.</docstring>
        <paramlist>
          <param name="position" type="int" default=""/>
          <param name="thumbSize" type="int" default=""/>
          <param name="range" type="int" default=""/>
          <param name="pageSize" type="int" default=""/>
          <param name="refresh" type="bool" default="True"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SpinButton" oldname="wxSpinButton" module="controls">
      <baseclass name="Control"/>
      <constructor name="SpinButton" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SP_HORIZONTAL, 
    String name=SPIN_BUTTON_NAME) -&gt; SpinButton</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSP_HORIZONTAL"/>
          <param name="name" type="String" default="wxPySPIN_BUTTON_NAME"/>
        </paramlist>
      </constructor>
      <constructor name="PreSpinButton" overloaded="no">
        <autodoc>PreSpinButton() -&gt; SpinButton</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=SP_HORIZONTAL, 
    String name=SPIN_BUTTON_NAME) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSP_HORIZONTAL"/>
          <param name="name" type="String" default="wxPySPIN_BUTTON_NAME"/>
        </paramlist>
      </method>
      <method name="GetValue" type="int" overloaded="no">
        <autodoc>GetValue() -&gt; int</autodoc>
      </method>
      <method name="GetMin" type="int" overloaded="no">
        <autodoc>GetMin() -&gt; int</autodoc>
      </method>
      <method name="GetMax" type="int" overloaded="no">
        <autodoc>GetMax() -&gt; int</autodoc>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMin" type="" overloaded="no">
        <autodoc>SetMin(int minVal)</autodoc>
        <paramlist>
          <param name="minVal" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMax" type="" overloaded="no">
        <autodoc>SetMax(int maxVal)</autodoc>
        <paramlist>
          <param name="maxVal" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRange" type="" overloaded="no">
        <autodoc>SetRange(int minVal, int maxVal)</autodoc>
        <paramlist>
          <param name="minVal" type="int" default=""/>
          <param name="maxVal" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsVertical" type="bool" overloaded="no">
        <autodoc>IsVertical() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="SpinCtrl" oldname="wxSpinCtrl" module="controls">
      <baseclass name="Control"/>
      <constructor name="SpinCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, String value=EmptyString, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_ARROW_KEYS, int min=0, int max=100, 
    int initial=0, String name=SpinCtrlNameStr) -&gt; SpinCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="value" type="String" default="wxPyEmptyString"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSP_ARROW_KEYS"/>
          <param name="min" type="int" default="0"/>
          <param name="max" type="int" default="100"/>
          <param name="initial" type="int" default="0"/>
          <param name="name" type="String" default="wxPySpinCtrlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreSpinCtrl" overloaded="no">
        <autodoc>PreSpinCtrl() -&gt; SpinCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, String value=EmptyString, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SP_ARROW_KEYS, int min=0, int max=100, 
    int initial=0, String name=SpinCtrlNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="value" type="String" default="wxPyEmptyString"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSP_ARROW_KEYS"/>
          <param name="min" type="int" default="0"/>
          <param name="max" type="int" default="100"/>
          <param name="initial" type="int" default="0"/>
          <param name="name" type="String" default="wxPySpinCtrlNameStr"/>
        </paramlist>
      </method>
      <method name="GetValue" type="int" overloaded="no">
        <autodoc>GetValue() -&gt; int</autodoc>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(int value)</autodoc>
        <paramlist>
          <param name="value" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetValueString" type="" overloaded="no">
        <autodoc>SetValueString(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetRange" type="" overloaded="no">
        <autodoc>SetRange(int minVal, int maxVal)</autodoc>
        <paramlist>
          <param name="minVal" type="int" default=""/>
          <param name="maxVal" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMin" type="int" overloaded="no">
        <autodoc>GetMin() -&gt; int</autodoc>
      </method>
      <method name="GetMax" type="int" overloaded="no">
        <autodoc>GetMax() -&gt; int</autodoc>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(long from, long to)</autodoc>
        <paramlist>
          <param name="from" type="long" default=""/>
          <param name="to" type="long" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="SpinEvent" oldname="wxSpinEvent" module="controls">
      <baseclass name="NotifyEvent"/>
      <constructor name="SpinEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int winid=0) -&gt; SpinEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetPosition" type="int" overloaded="no">
        <autodoc>GetPosition() -&gt; int</autodoc>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
EVT_SPIN_UP   = wx.PyEventBinder( wx.wxEVT_SCROLL_LINEUP, 1)
EVT_SPIN_DOWN = wx.PyEventBinder( wx.wxEVT_SCROLL_LINEDOWN, 1)
EVT_SPIN      = wx.PyEventBinder( wx.wxEVT_SCROLL_THUMBTRACK, 1)
EVT_SPINCTRL  = wx.PyEventBinder( wxEVT_COMMAND_SPINCTRL_UPDATED, 1)
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="RadioBox" oldname="wxRadioBox" module="controls">
      <baseclass name="Control"/>
      <constructor name="RadioBox" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, 
    int majorDimension=0, 
    long style=RA_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=RadioBoxNameStr) -&gt; RadioBox</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="majorDimension" type="int" default="0"/>
          <param name="style" type="long" default="wxRA_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyRadioBoxNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreRadioBox" overloaded="no">
        <autodoc>PreRadioBox() -&gt; RadioBox</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, 
    int majorDimension=0, 
    long style=RA_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=RadioBoxNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="choices" type="wxArrayString" default="wxPyEmptyStringArray"/>
          <param name="majorDimension" type="int" default="0"/>
          <param name="style" type="long" default="wxRA_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyRadioBoxNameStr"/>
        </paramlist>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelection" type="int" overloaded="no">
        <autodoc>GetSelection() -&gt; int</autodoc>
      </method>
      <method name="GetStringSelection" type="String" overloaded="no">
        <autodoc>GetStringSelection() -&gt; String</autodoc>
      </method>
      <method name="SetStringSelection" type="bool" overloaded="no">
        <autodoc>SetStringSelection(String s) -&gt; bool</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="int" overloaded="no">
        <autodoc>GetCount() -&gt; int</autodoc>
      </method>
      <method name="FindString" type="int" overloaded="no">
        <autodoc>FindString(String s) -&gt; int</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetString" type="String" overloaded="no">
        <autodoc>GetString(int n) -&gt; String</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetString" type="" overloaded="no">
        <autodoc>SetString(int n, String label)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="EnableItem" type="" overloaded="no">
        <autodoc>EnableItem(int n, bool enable=True)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="ShowItem" type="" overloaded="no">
        <autodoc>ShowItem(int n, bool show=True)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="show" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetColumnCount" type="int" overloaded="no">
        <autodoc>GetColumnCount() -&gt; int</autodoc>
      </method>
      <method name="GetRowCount" type="int" overloaded="no">
        <autodoc>GetRowCount() -&gt; int</autodoc>
      </method>
      <method name="GetNextItem" type="int" overloaded="no">
        <autodoc>GetNextItem(int item, int dir, long style) -&gt; int</autodoc>
        <paramlist>
          <param name="item" type="int" default=""/>
          <param name="dir" type="wxDirection" default=""/>
          <param name="style" type="long" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="RadioButton" oldname="wxRadioButton" module="controls">
      <baseclass name="Control"/>
      <constructor name="RadioButton" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=RadioButtonNameStr) -&gt; RadioButton</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyRadioButtonNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreRadioButton" overloaded="no">
        <autodoc>PreRadioButton() -&gt; RadioButton</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=RadioButtonNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyRadioButtonNameStr"/>
        </paramlist>
      </method>
      <method name="GetValue" type="bool" overloaded="no">
        <autodoc>GetValue() -&gt; bool</autodoc>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(bool value)</autodoc>
        <paramlist>
          <param name="value" type="bool" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Slider" oldname="wxSlider" module="controls">
      <baseclass name="Control"/>
      <constructor name="Slider" overloaded="no">
        <autodoc>__init__(Window parent, int id, int value, int minValue, int maxValue, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SL_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=SliderNameStr) -&gt; Slider</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="value" type="int" default=""/>
          <param name="minValue" type="int" default=""/>
          <param name="maxValue" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSL_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPySliderNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreSlider" overloaded="no">
        <autodoc>PreSlider() -&gt; Slider</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, int value, int minValue, int maxValue, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=SL_HORIZONTAL, Validator validator=DefaultValidator, 
    String name=SliderNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="value" type="int" default=""/>
          <param name="minValue" type="int" default=""/>
          <param name="maxValue" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSL_HORIZONTAL"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPySliderNameStr"/>
        </paramlist>
      </method>
      <method name="GetValue" type="int" overloaded="no">
        <autodoc>GetValue() -&gt; int</autodoc>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(int value)</autodoc>
        <paramlist>
          <param name="value" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRange" type="" overloaded="no">
        <autodoc>SetRange(int minValue, int maxValue)</autodoc>
        <paramlist>
          <param name="minValue" type="int" default=""/>
          <param name="maxValue" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMin" type="int" overloaded="no">
        <autodoc>GetMin() -&gt; int</autodoc>
      </method>
      <method name="GetMax" type="int" overloaded="no">
        <autodoc>GetMax() -&gt; int</autodoc>
      </method>
      <method name="SetMin" type="" overloaded="no">
        <autodoc>SetMin(int minValue)</autodoc>
        <paramlist>
          <param name="minValue" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMax" type="" overloaded="no">
        <autodoc>SetMax(int maxValue)</autodoc>
        <paramlist>
          <param name="maxValue" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLineSize" type="" overloaded="no">
        <autodoc>SetLineSize(int lineSize)</autodoc>
        <paramlist>
          <param name="lineSize" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPageSize" type="" overloaded="no">
        <autodoc>SetPageSize(int pageSize)</autodoc>
        <paramlist>
          <param name="pageSize" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineSize" type="int" overloaded="no">
        <autodoc>GetLineSize() -&gt; int</autodoc>
      </method>
      <method name="GetPageSize" type="int" overloaded="no">
        <autodoc>GetPageSize() -&gt; int</autodoc>
      </method>
      <method name="SetThumbLength" type="" overloaded="no">
        <autodoc>SetThumbLength(int lenPixels)</autodoc>
        <paramlist>
          <param name="lenPixels" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetThumbLength" type="int" overloaded="no">
        <autodoc>GetThumbLength() -&gt; int</autodoc>
      </method>
      <method name="SetTickFreq" type="" overloaded="no">
        <autodoc>SetTickFreq(int n, int pos=1)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
          <param name="pos" type="int" default="1"/>
        </paramlist>
      </method>
      <method name="GetTickFreq" type="int" overloaded="no">
        <autodoc>GetTickFreq() -&gt; int</autodoc>
      </method>
      <method name="ClearTicks" type="" overloaded="no">
        <autodoc>ClearTicks()</autodoc>
      </method>
      <method name="SetTick" type="" overloaded="no">
        <autodoc>SetTick(int tickPos)</autodoc>
        <paramlist>
          <param name="tickPos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ClearSel" type="" overloaded="no">
        <autodoc>ClearSel()</autodoc>
      </method>
      <method name="GetSelEnd" type="int" overloaded="no">
        <autodoc>GetSelEnd() -&gt; int</autodoc>
      </method>
      <method name="GetSelStart" type="int" overloaded="no">
        <autodoc>GetSelStart() -&gt; int</autodoc>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int min, int max)</autodoc>
        <paramlist>
          <param name="min" type="int" default=""/>
          <param name="max" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
    EVT_TOGGLEBUTTON = wx.PyEventBinder( wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, 1)
</pythoncode>
    <class name="ToggleButton" oldname="wxToggleButton" module="controls">
      <baseclass name="Control"/>
      <constructor name="ToggleButton" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ToggleButtonNameStr) -&gt; ToggleButton</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyToggleButtonNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreToggleButton" overloaded="no">
        <autodoc>PreToggleButton() -&gt; ToggleButton</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, 
    Validator validator=DefaultValidator, String name=ToggleButtonNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyToggleButtonNameStr"/>
        </paramlist>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(bool value)</autodoc>
        <paramlist>
          <param name="value" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetValue" type="bool" overloaded="no">
        <autodoc>GetValue() -&gt; bool</autodoc>
      </method>
      <method name="SetLabel" type="" overloaded="no">
        <autodoc>SetLabel(String label)</autodoc>
        <docstring>Sets the item's text.</docstring>
        <paramlist>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="BookCtrl" oldname="wxBookCtrl" module="controls">
      <baseclass name="Control"/>
      <method name="GetPageCount" type="size_t" overloaded="no">
        <autodoc>GetPageCount() -&gt; size_t</autodoc>
      </method>
      <method name="GetPage" type="Window" overloaded="no">
        <autodoc>GetPage(size_t n) -&gt; Window</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="GetSelection" type="int" overloaded="no">
        <autodoc>GetSelection() -&gt; int</autodoc>
      </method>
      <method name="SetPageText" type="bool" overloaded="no">
        <autodoc>SetPageText(size_t n, String strText) -&gt; bool</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
          <param name="strText" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetPageText" type="String" overloaded="no">
        <autodoc>GetPageText(size_t n) -&gt; String</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetImageList" type="" overloaded="no">
        <autodoc>SetImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="AssignImageList" type="" overloaded="no">
        <autodoc>AssignImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="GetImageList" type="ImageList" overloaded="no">
        <autodoc>GetImageList() -&gt; ImageList</autodoc>
      </method>
      <method name="GetPageImage" type="int" overloaded="no">
        <autodoc>GetPageImage(size_t n) -&gt; int</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetPageImage" type="bool" overloaded="no">
        <autodoc>SetPageImage(size_t n, int imageId) -&gt; bool</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
          <param name="imageId" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPageSize" type="" overloaded="no">
        <autodoc>SetPageSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="CalcSizeFromPage" type="Size" overloaded="no">
        <autodoc>CalcSizeFromPage(Size sizePage) -&gt; Size</autodoc>
        <paramlist>
          <param name="sizePage" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="DeletePage" type="bool" overloaded="no">
        <autodoc>DeletePage(size_t n) -&gt; bool</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="RemovePage" type="bool" overloaded="no">
        <autodoc>RemovePage(size_t n) -&gt; bool</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="DeleteAllPages" type="bool" overloaded="no">
        <autodoc>DeleteAllPages() -&gt; bool</autodoc>
      </method>
      <method name="AddPage" type="bool" overloaded="no">
        <autodoc>AddPage(Window page, String text, bool select=False, int imageId=-1) -&gt; bool</autodoc>
        <paramlist>
          <param name="page" type="Window" default=""/>
          <param name="text" type="String" default=""/>
          <param name="select" type="bool" default="False"/>
          <param name="imageId" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="InsertPage" type="bool" overloaded="no">
        <autodoc>InsertPage(size_t n, Window page, String text, bool select=False, 
    int imageId=-1) -&gt; bool</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
          <param name="page" type="Window" default=""/>
          <param name="text" type="String" default=""/>
          <param name="select" type="bool" default="False"/>
          <param name="imageId" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="SetSelection" type="int" overloaded="no">
        <autodoc>SetSelection(size_t n) -&gt; int</autodoc>
        <paramlist>
          <param name="n" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="AdvanceSelection" type="" overloaded="no">
        <autodoc>AdvanceSelection(bool forward=True)</autodoc>
        <paramlist>
          <param name="forward" type="bool" default="True"/>
        </paramlist>
      </method>
    </class>
    <class name="BookCtrlEvent" oldname="wxBookCtrlEvent" module="controls">
      <baseclass name="NotifyEvent"/>
      <constructor name="BookCtrlEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0, int nSel=-1, 
    int nOldSel=-1) -&gt; BookCtrlEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="0"/>
          <param name="nSel" type="int" default="-1"/>
          <param name="nOldSel" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <method name="GetSelection" type="int" overloaded="no">
        <autodoc>GetSelection() -&gt; int</autodoc>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int nSel)</autodoc>
        <paramlist>
          <param name="nSel" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetOldSelection" type="int" overloaded="no">
        <autodoc>GetOldSelection() -&gt; int</autodoc>
      </method>
      <method name="SetOldSelection" type="" overloaded="no">
        <autodoc>SetOldSelection(int nOldSel)</autodoc>
        <paramlist>
          <param name="nOldSel" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Notebook" oldname="wxNotebook" module="controls">
      <baseclass name="BookCtrl"/>
      <constructor name="Notebook" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=NOTEBOOK_NAME) -&gt; Notebook</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyNOTEBOOK_NAME"/>
        </paramlist>
      </constructor>
      <constructor name="PreNotebook" overloaded="no">
        <autodoc>PreNotebook() -&gt; Notebook</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=NOTEBOOK_NAME) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyNOTEBOOK_NAME"/>
        </paramlist>
      </method>
      <method name="GetRowCount" type="int" overloaded="no">
        <autodoc>GetRowCount() -&gt; int</autodoc>
      </method>
      <method name="SetPadding" type="" overloaded="no">
        <autodoc>SetPadding(Size padding)</autodoc>
        <paramlist>
          <param name="padding" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetTabSize" type="" overloaded="no">
        <autodoc>SetTabSize(Size sz)</autodoc>
        <paramlist>
          <param name="sz" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="int" overloaded="no">
        <autodoc>HitTest(Point pt) -&gt; (tab, where)</autodoc>
        <docstring>Returns the tab which is hit, and flags indicating where using wx.NB_HITTEST_ flags.</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
          <param name="OUTPUT" type="long" default=""/>
        </paramlist>
      </method>
      <method name="CalcSizeFromPage" type="Size" overloaded="no">
        <autodoc>CalcSizeFromPage(Size sizePage) -&gt; Size</autodoc>
        <paramlist>
          <param name="sizePage" type="Size" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="NotebookEvent" oldname="wxNotebookEvent" module="controls">
      <baseclass name="BookCtrlEvent"/>
      <constructor name="NotebookEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0, int nSel=-1, 
    int nOldSel=-1) -&gt; NotebookEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="0"/>
          <param name="nSel" type="int" default="-1"/>
          <param name="nOldSel" type="int" default="-1"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
    # wxNotebook events
    EVT_NOTEBOOK_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, 1 )
    EVT_NOTEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, 1 )
</pythoncode>
    <pythoncode>
#----------------------------------------------------------------------------

class NotebookPage(wx.Panel):
    """
    There is an old (and apparently unsolvable) bug when placing a
    window with a nonstandard background colour in a wxNotebook on
    wxGTK, as the notbooks's background colour would always be used
    when the window is refreshed.  The solution is to place a panel in
    the notbook and the coloured window on the panel, sized to cover
    the panel.  This simple class does that for you, just put an
    instance of this in the notebook and make your regular window a
    child of this one and it will handle the resize for you.
    """
    def __init__(self, parent, id=-1,
                 pos=wx.DefaultPosition, size=wx.DefaultSize,
                 style=wx.TAB_TRAVERSAL, name="panel"):
        wx.Panel.__init__(self, parent, id, pos, size, style, name)
        self.child = None
        EVT_SIZE(self, self.OnSize)
        
    def OnSize(self, evt):
        if self.child is None:
            children = self.GetChildren()
            if len(children):
                self.child = children[0]
        if self.child:
            self.child.SetPosition((0,0))
            self.child.SetSize(self.GetSize())

</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Listbook" oldname="wxListbook" module="controls">
      <baseclass name="BookCtrl"/>
      <constructor name="Listbook" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=EmptyString) -&gt; Listbook</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <constructor name="PreListbook" overloaded="no">
        <autodoc>PreListbook() -&gt; Listbook</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="IsVertical" type="bool" overloaded="no">
        <autodoc>IsVertical() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="ListbookEvent" oldname="wxListbookEvent" module="controls">
      <baseclass name="BookCtrlEvent"/>
      <constructor name="ListbookEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0, int nSel=-1, 
    int nOldSel=-1) -&gt; ListbookEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="0"/>
          <param name="nSel" type="int" default="-1"/>
          <param name="nOldSel" type="int" default="-1"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
    EVT_LISTBOOK_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, 1 )
    EVT_LISTBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING, 1 )
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="BookCtrlSizer" oldname="wxBookCtrlSizer" module="controls">
      <baseclass name="Sizer"/>
      <constructor name="BookCtrlSizer" overloaded="no">
        <autodoc>__init__(BookCtrl nb) -&gt; BookCtrlSizer</autodoc>
        <paramlist>
          <param name="nb" type="BookCtrl" default=""/>
        </paramlist>
      </constructor>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
      <method name="GetControl" type="BookCtrl" overloaded="no">
        <autodoc>GetControl() -&gt; BookCtrl</autodoc>
      </method>
    </class>
    <class name="NotebookSizer" oldname="wxNotebookSizer" module="controls">
      <baseclass name="Sizer"/>
      <constructor name="NotebookSizer" overloaded="no">
        <autodoc>__init__(Notebook nb) -&gt; NotebookSizer</autodoc>
        <paramlist>
          <param name="nb" type="Notebook" default=""/>
        </paramlist>
      </constructor>
      <method name="RecalcSizes" type="" overloaded="no">
        <autodoc>RecalcSizes()</autodoc>
      </method>
      <method name="CalcMin" type="Size" overloaded="no">
        <autodoc>CalcMin() -&gt; Size</autodoc>
      </method>
      <method name="GetNotebook" type="Notebook" overloaded="no">
        <autodoc>GetNotebook() -&gt; Notebook</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ToolBarToolBase" oldname="wxToolBarToolBase" module="controls">
      <baseclass name="Object"/>
      <method name="GetId" type="int" overloaded="no">
        <autodoc>GetId() -&gt; int</autodoc>
      </method>
      <method name="GetControl" type="Control" overloaded="no">
        <autodoc>GetControl() -&gt; Control</autodoc>
      </method>
      <method name="GetToolBar" type="wxToolBarBase" overloaded="no">
        <autodoc>GetToolBar() -&gt; ToolBarBase</autodoc>
      </method>
      <method name="IsButton" type="int" overloaded="no">
        <autodoc>IsButton() -&gt; int</autodoc>
      </method>
      <method name="IsControl" type="int" overloaded="no">
        <autodoc>IsControl() -&gt; int</autodoc>
      </method>
      <method name="IsSeparator" type="int" overloaded="no">
        <autodoc>IsSeparator() -&gt; int</autodoc>
      </method>
      <method name="GetStyle" type="int" overloaded="no">
        <autodoc>GetStyle() -&gt; int</autodoc>
      </method>
      <method name="GetKind" type="wxItemKind" overloaded="no">
        <autodoc>GetKind() -&gt; int</autodoc>
      </method>
      <method name="IsEnabled" type="bool" overloaded="no">
        <autodoc>IsEnabled() -&gt; bool</autodoc>
      </method>
      <method name="IsToggled" type="bool" overloaded="no">
        <autodoc>IsToggled() -&gt; bool</autodoc>
      </method>
      <method name="CanBeToggled" type="bool" overloaded="no">
        <autodoc>CanBeToggled() -&gt; bool</autodoc>
      </method>
      <method name="GetNormalBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetNormalBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="GetDisabledBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetDisabledBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel() -&gt; String</autodoc>
      </method>
      <method name="GetShortHelp" type="String" overloaded="no">
        <autodoc>GetShortHelp() -&gt; String</autodoc>
      </method>
      <method name="GetLongHelp" type="String" overloaded="no">
        <autodoc>GetLongHelp() -&gt; String</autodoc>
      </method>
      <method name="Enable" type="bool" overloaded="no">
        <autodoc>Enable(bool enable) -&gt; bool</autodoc>
        <paramlist>
          <param name="enable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Toggle" type="" overloaded="no">
        <autodoc>Toggle()</autodoc>
      </method>
      <method name="SetToggle" type="bool" overloaded="no">
        <autodoc>SetToggle(bool toggle) -&gt; bool</autodoc>
        <paramlist>
          <param name="toggle" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetShortHelp" type="bool" overloaded="no">
        <autodoc>SetShortHelp(String help) -&gt; bool</autodoc>
        <paramlist>
          <param name="help" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetLongHelp" type="bool" overloaded="no">
        <autodoc>SetLongHelp(String help) -&gt; bool</autodoc>
        <paramlist>
          <param name="help" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetNormalBitmap" type="" overloaded="no">
        <autodoc>SetNormalBitmap(Bitmap bmp)</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetDisabledBitmap" type="" overloaded="no">
        <autodoc>SetDisabledBitmap(Bitmap bmp)</autodoc>
        <paramlist>
          <param name="bmp" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetLabel" type="" overloaded="no">
        <autodoc>SetLabel(String label)</autodoc>
        <paramlist>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Detach" type="" overloaded="no">
        <autodoc>Detach()</autodoc>
      </method>
      <method name="Attach" type="" overloaded="no">
        <autodoc>Attach(ToolBarBase tbar)</autodoc>
        <paramlist>
          <param name="tbar" type="wxToolBarBase" default=""/>
        </paramlist>
      </method>
      <method name="GetClientData" type="PyObject" overloaded="no">
        <autodoc>GetClientData() -&gt; PyObject</autodoc>
      </method>
      <method name="SetClientData" type="" overloaded="no">
        <autodoc>SetClientData(PyObject clientData)</autodoc>
        <paramlist>
          <param name="clientData" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="ToolBarBase" oldname="wxToolBarBase" module="controls">
      <baseclass name="Control"/>
      <method name="DoAddTool" type="ToolBarToolBase" overloaded="no">
        <autodoc>DoAddTool(int id, String label, Bitmap bitmap, Bitmap bmpDisabled=wxNullBitmap, 
    int kind=ITEM_NORMAL, String shortHelp=EmptyString, 
    String longHelp=EmptyString, 
    PyObject clientData=None) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="bmpDisabled" type="Bitmap" default="wxNullBitmap"/>
          <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
          <param name="shortHelp" type="String" default="wxPyEmptyString"/>
          <param name="longHelp" type="String" default="wxPyEmptyString"/>
          <param name="clientData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="DoInsertTool" type="ToolBarToolBase" overloaded="no">
        <autodoc>DoInsertTool(size_t pos, int id, String label, Bitmap bitmap, Bitmap bmpDisabled=wxNullBitmap, 
    int kind=ITEM_NORMAL, 
    String shortHelp=EmptyString, String longHelp=EmptyString, 
    PyObject clientData=None) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="bitmap" type="Bitmap" default=""/>
          <param name="bmpDisabled" type="Bitmap" default="wxNullBitmap"/>
          <param name="kind" type="wxItemKind" default="wxITEM_NORMAL"/>
          <param name="shortHelp" type="String" default="wxPyEmptyString"/>
          <param name="longHelp" type="String" default="wxPyEmptyString"/>
          <param name="clientData" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="AddToolItem" type="ToolBarToolBase" overloaded="no">
        <autodoc>AddToolItem(ToolBarToolBase tool) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="tool" type="ToolBarToolBase" default=""/>
        </paramlist>
      </method>
      <method name="InsertToolItem" type="ToolBarToolBase" overloaded="no">
        <autodoc>InsertToolItem(size_t pos, ToolBarToolBase tool) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="tool" type="ToolBarToolBase" default=""/>
        </paramlist>
      </method>
      <method name="AddControl" type="ToolBarToolBase" overloaded="no">
        <autodoc>AddControl(Control control) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="control" type="Control" default=""/>
        </paramlist>
      </method>
      <method name="InsertControl" type="ToolBarToolBase" overloaded="no">
        <autodoc>InsertControl(size_t pos, Control control) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="control" type="Control" default=""/>
        </paramlist>
      </method>
      <method name="FindControl" type="Control" overloaded="no">
        <autodoc>FindControl(int id) -&gt; Control</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AddSeparator" type="ToolBarToolBase" overloaded="no">
        <autodoc>AddSeparator() -&gt; ToolBarToolBase</autodoc>
      </method>
      <method name="InsertSeparator" type="ToolBarToolBase" overloaded="no">
        <autodoc>InsertSeparator(size_t pos) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="RemoveTool" type="ToolBarToolBase" overloaded="no">
        <autodoc>RemoveTool(int id) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeleteToolByPos" type="bool" overloaded="no">
        <autodoc>DeleteToolByPos(size_t pos) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="DeleteTool" type="bool" overloaded="no">
        <autodoc>DeleteTool(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ClearTools" type="" overloaded="no">
        <autodoc>ClearTools()</autodoc>
      </method>
      <method name="Realize" type="bool" overloaded="no">
        <autodoc>Realize() -&gt; bool</autodoc>
      </method>
      <method name="EnableTool" type="" overloaded="no">
        <autodoc>EnableTool(int id, bool enable)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="enable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="ToggleTool" type="" overloaded="no">
        <autodoc>ToggleTool(int id, bool toggle)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="toggle" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetToggle" type="" overloaded="no">
        <autodoc>SetToggle(int id, bool toggle)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="toggle" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetToolClientData" type="PyObject" overloaded="no">
        <autodoc>GetToolClientData(int id) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetToolClientData" type="" overloaded="no">
        <autodoc>SetToolClientData(int id, PyObject clientData)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="clientData" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetToolPos" type="int" overloaded="no">
        <autodoc>GetToolPos(int id) -&gt; int</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetToolState" type="bool" overloaded="no">
        <autodoc>GetToolState(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetToolEnabled" type="bool" overloaded="no">
        <autodoc>GetToolEnabled(int id) -&gt; bool</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetToolShortHelp" type="" overloaded="no">
        <autodoc>SetToolShortHelp(int id, String helpString)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="helpString" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetToolShortHelp" type="String" overloaded="no">
        <autodoc>GetToolShortHelp(int id) -&gt; String</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetToolLongHelp" type="" overloaded="no">
        <autodoc>SetToolLongHelp(int id, String helpString)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="helpString" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetToolLongHelp" type="String" overloaded="no">
        <autodoc>GetToolLongHelp(int id) -&gt; String</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginsXY" type="" overloaded="no">
        <autodoc>SetMarginsXY(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMargins" type="" overloaded="no">
        <autodoc>SetMargins(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="SetToolPacking" type="" overloaded="no">
        <autodoc>SetToolPacking(int packing)</autodoc>
        <paramlist>
          <param name="packing" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetToolSeparation" type="" overloaded="no">
        <autodoc>SetToolSeparation(int separation)</autodoc>
        <paramlist>
          <param name="separation" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetToolMargins" type="Size" overloaded="no">
        <autodoc>GetToolMargins() -&gt; Size</autodoc>
      </method>
      <method name="GetMargins" type="Size" overloaded="no">
        <autodoc>GetMargins() -&gt; Size</autodoc>
      </method>
      <method name="GetToolPacking" type="int" overloaded="no">
        <autodoc>GetToolPacking() -&gt; int</autodoc>
      </method>
      <method name="GetToolSeparation" type="int" overloaded="no">
        <autodoc>GetToolSeparation() -&gt; int</autodoc>
      </method>
      <method name="SetRows" type="" overloaded="no">
        <autodoc>SetRows(int nRows)</autodoc>
        <paramlist>
          <param name="nRows" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMaxRowsCols" type="" overloaded="no">
        <autodoc>SetMaxRowsCols(int rows, int cols)</autodoc>
        <paramlist>
          <param name="rows" type="int" default=""/>
          <param name="cols" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMaxRows" type="int" overloaded="no">
        <autodoc>GetMaxRows() -&gt; int</autodoc>
      </method>
      <method name="GetMaxCols" type="int" overloaded="no">
        <autodoc>GetMaxCols() -&gt; int</autodoc>
      </method>
      <method name="SetToolBitmapSize" type="" overloaded="no">
        <autodoc>SetToolBitmapSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="GetToolBitmapSize" type="Size" overloaded="no">
        <autodoc>GetToolBitmapSize() -&gt; Size</autodoc>
      </method>
      <method name="GetToolSize" type="Size" overloaded="no">
        <autodoc>GetToolSize() -&gt; Size</autodoc>
      </method>
      <method name="FindToolForPosition" type="ToolBarToolBase" overloaded="no">
        <autodoc>FindToolForPosition(int x, int y) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="FindById" type="ToolBarToolBase" overloaded="no">
        <autodoc>FindById(int toolid) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="toolid" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsVertical" type="bool" overloaded="no">
        <autodoc>IsVertical() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="ToolBar" oldname="wxToolBar" module="controls">
      <baseclass name="ToolBarBase"/>
      <constructor name="ToolBar" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxNO_BORDER|wxTB_HORIZONTAL, 
    String name=wxPyToolBarNameStr) -&gt; ToolBar</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxNO_BORDER|wxTB_HORIZONTAL"/>
          <param name="name" type="String" default="wxPyToolBarNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreToolBar" overloaded="no">
        <autodoc>PreToolBar() -&gt; ToolBar</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxNO_BORDER|wxTB_HORIZONTAL, 
    String name=wxPyToolBarNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxNO_BORDER|wxTB_HORIZONTAL"/>
          <param name="name" type="String" default="wxPyToolBarNameStr"/>
        </paramlist>
      </method>
      <method name="FindToolForPosition" type="ToolBarToolBase" overloaded="no">
        <autodoc>FindToolForPosition(int x, int y) -&gt; ToolBarToolBase</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ListItemAttr" oldname="wxListItemAttr" module="controls">
      <constructor name="ListItemAttr" overloaded="no">
        <autodoc>__init__(Colour colText=wxNullColour, Colour colBack=wxNullColour, 
    Font font=wxNullFont) -&gt; ListItemAttr</autodoc>
        <paramlist>
          <param name="colText" type="Colour" default="wxNullColour"/>
          <param name="colBack" type="Colour" default="wxNullColour"/>
          <param name="font" type="Font" default="wxNullFont"/>
        </paramlist>
      </constructor>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(Colour colText)</autodoc>
        <paramlist>
          <param name="colText" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="" overloaded="no">
        <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
        <paramlist>
          <param name="colBack" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="HasTextColour" type="bool" overloaded="no">
        <autodoc>HasTextColour() -&gt; bool</autodoc>
      </method>
      <method name="HasBackgroundColour" type="bool" overloaded="no">
        <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
      </method>
      <method name="HasFont" type="bool" overloaded="no">
        <autodoc>HasFont() -&gt; bool</autodoc>
      </method>
      <method name="GetTextColour" type="Colour" overloaded="no">
        <autodoc>GetTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ListItem" oldname="wxListItem" module="controls">
      <baseclass name="Object"/>
      <constructor name="ListItem" overloaded="no">
        <autodoc>__init__() -&gt; ListItem</autodoc>
      </constructor>
      <destructor name="~wxListItem" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="ClearAttributes" type="" overloaded="no">
        <autodoc>ClearAttributes()</autodoc>
      </method>
      <method name="SetMask" type="" overloaded="no">
        <autodoc>SetMask(long mask)</autodoc>
        <paramlist>
          <param name="mask" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(long id)</autodoc>
        <paramlist>
          <param name="id" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetColumn" type="" overloaded="no">
        <autodoc>SetColumn(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetState" type="" overloaded="no">
        <autodoc>SetState(long state)</autodoc>
        <paramlist>
          <param name="state" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetStateMask" type="" overloaded="no">
        <autodoc>SetStateMask(long stateMask)</autodoc>
        <paramlist>
          <param name="stateMask" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetImage" type="" overloaded="no">
        <autodoc>SetImage(int image)</autodoc>
        <paramlist>
          <param name="image" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetData" type="" overloaded="no">
        <autodoc>SetData(long data)</autodoc>
        <paramlist>
          <param name="data" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAlign" type="" overloaded="no">
        <autodoc>SetAlign(int align)</autodoc>
        <paramlist>
          <param name="align" type="wxListColumnFormat" default=""/>
        </paramlist>
      </method>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(Colour colText)</autodoc>
        <paramlist>
          <param name="colText" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="" overloaded="no">
        <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
        <paramlist>
          <param name="colBack" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="GetMask" type="long" overloaded="no">
        <autodoc>GetMask() -&gt; long</autodoc>
      </method>
      <method name="GetId" type="long" overloaded="no">
        <autodoc>GetId() -&gt; long</autodoc>
      </method>
      <method name="GetColumn" type="int" overloaded="no">
        <autodoc>GetColumn() -&gt; int</autodoc>
      </method>
      <method name="GetState" type="long" overloaded="no">
        <autodoc>GetState() -&gt; long</autodoc>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="GetImage" type="int" overloaded="no">
        <autodoc>GetImage() -&gt; int</autodoc>
      </method>
      <method name="GetData" type="long" overloaded="no">
        <autodoc>GetData() -&gt; long</autodoc>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="GetAlign" type="wxListColumnFormat" overloaded="no">
        <autodoc>GetAlign() -&gt; int</autodoc>
      </method>
      <method name="GetAttributes" type="ListItemAttr" overloaded="no">
        <autodoc>GetAttributes() -&gt; ListItemAttr</autodoc>
      </method>
      <method name="HasAttributes" type="bool" overloaded="no">
        <autodoc>HasAttributes() -&gt; bool</autodoc>
      </method>
      <method name="GetTextColour" type="Colour" overloaded="no">
        <autodoc>GetTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
      </method>
      <property name="m_mask" type="long" readonly="no"/>
      <property name="m_itemId" type="long" readonly="no"/>
      <property name="m_col" type="int" readonly="no"/>
      <property name="m_state" type="long" readonly="no"/>
      <property name="m_stateMask" type="long" readonly="no"/>
      <property name="m_text" type="String" readonly="no"/>
      <property name="m_image" type="int" readonly="no"/>
      <property name="m_data" type="long" readonly="no"/>
      <property name="m_format" type="int" readonly="no"/>
      <property name="m_width" type="int" readonly="no"/>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ListEvent" oldname="wxListEvent" module="controls">
      <baseclass name="NotifyEvent"/>
      <constructor name="ListEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; ListEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <property name="m_code" type="int" readonly="no"/>
      <property name="m_oldItemIndex" type="long" readonly="no"/>
      <property name="m_itemIndex" type="long" readonly="no"/>
      <property name="m_col" type="int" readonly="no"/>
      <property name="m_pointDrag" type="Point" readonly="no"/>
      <property name="m_item" type="ListItem" readonly="yes"/>
      <method name="GetKeyCode" type="int" overloaded="no">
        <autodoc>GetKeyCode() -&gt; int</autodoc>
      </method>
      <method name="GetIndex" type="long" overloaded="no">
        <autodoc>GetIndex() -&gt; long</autodoc>
      </method>
      <method name="GetColumn" type="int" overloaded="no">
        <autodoc>GetColumn() -&gt; int</autodoc>
      </method>
      <method name="GetPoint" type="Point" overloaded="no">
        <autodoc>GetPoint() -&gt; Point</autodoc>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel() -&gt; String</autodoc>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="GetImage" type="int" overloaded="no">
        <autodoc>GetImage() -&gt; int</autodoc>
      </method>
      <method name="GetData" type="long" overloaded="no">
        <autodoc>GetData() -&gt; long</autodoc>
      </method>
      <method name="GetMask" type="long" overloaded="no">
        <autodoc>GetMask() -&gt; long</autodoc>
      </method>
      <method name="GetItem" type="ListItem" overloaded="no">
        <autodoc>GetItem() -&gt; ListItem</autodoc>
      </method>
      <method name="GetCacheFrom" type="long" overloaded="no">
        <autodoc>GetCacheFrom() -&gt; long</autodoc>
      </method>
      <method name="GetCacheTo" type="long" overloaded="no">
        <autodoc>GetCacheTo() -&gt; long</autodoc>
      </method>
      <method name="IsEditCancelled" type="bool" overloaded="no">
        <autodoc>IsEditCancelled() -&gt; bool</autodoc>
      </method>
      <method name="SetEditCanceled" type="" overloaded="no">
        <autodoc>SetEditCanceled(bool editCancelled)</autodoc>
        <paramlist>
          <param name="editCancelled" type="bool" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>

EVT_LIST_BEGIN_DRAG        = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_DRAG       , 1)
EVT_LIST_BEGIN_RDRAG       = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_RDRAG      , 1)
EVT_LIST_BEGIN_LABEL_EDIT  = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT , 1)
EVT_LIST_END_LABEL_EDIT    = wx.PyEventBinder(wxEVT_COMMAND_LIST_END_LABEL_EDIT   , 1)
EVT_LIST_DELETE_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_LIST_DELETE_ITEM      , 1)
EVT_LIST_DELETE_ALL_ITEMS  = wx.PyEventBinder(wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS , 1)
EVT_LIST_GET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_LIST_GET_INFO         , 1)
EVT_LIST_SET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_LIST_SET_INFO         , 1)
EVT_LIST_ITEM_SELECTED     = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_SELECTED    , 1)
EVT_LIST_ITEM_DESELECTED   = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_DESELECTED  , 1)
EVT_LIST_KEY_DOWN          = wx.PyEventBinder(wxEVT_COMMAND_LIST_KEY_DOWN         , 1)
EVT_LIST_INSERT_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_LIST_INSERT_ITEM      , 1)
EVT_LIST_COL_CLICK         = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_CLICK        , 1)
EVT_LIST_ITEM_RIGHT_CLICK  = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK , 1)
EVT_LIST_ITEM_MIDDLE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK, 1)
EVT_LIST_ITEM_ACTIVATED    = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_ACTIVATED   , 1)
EVT_LIST_CACHE_HINT        = wx.PyEventBinder(wxEVT_COMMAND_LIST_CACHE_HINT       , 1)
EVT_LIST_COL_RIGHT_CLICK   = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_RIGHT_CLICK  , 1)
EVT_LIST_COL_BEGIN_DRAG    = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_BEGIN_DRAG   , 1)
EVT_LIST_COL_DRAGGING      = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_DRAGGING     , 1)
EVT_LIST_COL_END_DRAG      = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_END_DRAG     , 1)
EVT_LIST_ITEM_FOCUSED      = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_FOCUSED     , 1)
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ListCtrl" oldname="wxPyListCtrl" module="controls">
      <baseclass name="Control"/>
      <constructor name="wxPyListCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_ICON, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; ListCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLC_ICON"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListCtrlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreListCtrl" overloaded="no">
        <autodoc>PreListCtrl() -&gt; ListCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_ICON, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; bool</autodoc>
        <docstring>Do the 2nd phase and create the GUI control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLC_ICON"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListCtrlNameStr"/>
        </paramlist>
      </method>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetForegroundColour" type="bool" overloaded="no">
        <autodoc>SetForegroundColour(Colour col) -&gt; bool</autodoc>
        <paramlist>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="bool" overloaded="no">
        <autodoc>SetBackgroundColour(Colour col) -&gt; bool</autodoc>
        <paramlist>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetColumn" type="ListItem" overloaded="no">
        <autodoc>GetColumn(int col) -&gt; ListItem</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColumn" type="bool" overloaded="no">
        <autodoc>SetColumn(int col, ListItem item) -&gt; bool</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="item" type="ListItem" default=""/>
        </paramlist>
      </method>
      <method name="GetColumnWidth" type="int" overloaded="no">
        <autodoc>GetColumnWidth(int col) -&gt; int</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColumnWidth" type="bool" overloaded="no">
        <autodoc>SetColumnWidth(int col, int width) -&gt; bool</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCountPerPage" type="int" overloaded="no">
        <autodoc>GetCountPerPage() -&gt; int</autodoc>
      </method>
      <method name="GetViewRect" type="Rect" overloaded="no">
        <autodoc>GetViewRect() -&gt; Rect</autodoc>
      </method>
      <method name="GetItem" type="ListItem" overloaded="no">
        <autodoc>GetItem(long itemId, int col=0) -&gt; ListItem</autodoc>
        <paramlist>
          <param name="itemId" type="long" default=""/>
          <param name="col" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetItem" type="bool" overloaded="no">
        <autodoc>SetItem(ListItem info) -&gt; bool</autodoc>
        <paramlist>
          <param name="info" type="ListItem" default=""/>
        </paramlist>
      </method>
      <method name="SetStringItem" type="long" overloaded="no">
        <autodoc>SetStringItem(long index, int col, String label, int imageId=-1) -&gt; long</autodoc>
        <paramlist>
          <param name="index" type="long" default=""/>
          <param name="col" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="imageId" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="GetItemState" type="int" overloaded="no">
        <autodoc>GetItemState(long item, long stateMask) -&gt; int</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="stateMask" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetItemState" type="bool" overloaded="no">
        <autodoc>SetItemState(long item, long state, long stateMask) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="state" type="long" default=""/>
          <param name="stateMask" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetItemImage" type="bool" overloaded="no">
        <autodoc>SetItemImage(long item, int image, int selImage) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="image" type="int" default=""/>
          <param name="selImage" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetItemText" type="String" overloaded="no">
        <autodoc>GetItemText(long item) -&gt; String</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetItemText" type="" overloaded="no">
        <autodoc>SetItemText(long item, String str)</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetItemData" type="long" overloaded="no">
        <autodoc>GetItemData(long item) -&gt; long</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetItemData" type="bool" overloaded="no">
        <autodoc>SetItemData(long item, long data) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="data" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetItemPosition" type="Point" overloaded="no">
        <autodoc>GetItemPosition(long item) -&gt; Point</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetItemRect" type="Rect" overloaded="no">
        <autodoc>GetItemRect(long item, int code=LIST_RECT_BOUNDS) -&gt; Rect</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="code" type="int" default="wxLIST_RECT_BOUNDS"/>
        </paramlist>
      </method>
      <method name="SetItemPosition" type="bool" overloaded="no">
        <autodoc>SetItemPosition(long item, Point pos) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetItemCount" type="int" overloaded="no">
        <autodoc>GetItemCount() -&gt; int</autodoc>
      </method>
      <method name="GetColumnCount" type="int" overloaded="no">
        <autodoc>GetColumnCount() -&gt; int</autodoc>
      </method>
      <method name="GetItemSpacing" type="Size" overloaded="no">
        <autodoc>GetItemSpacing() -&gt; Size</autodoc>
      </method>
      <method name="SetItemSpacing" type="" overloaded="no">
        <autodoc>SetItemSpacing(int spacing, bool isSmall=False)</autodoc>
        <paramlist>
          <param name="spacing" type="int" default=""/>
          <param name="isSmall" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="GetSelectedItemCount" type="int" overloaded="no">
        <autodoc>GetSelectedItemCount() -&gt; int</autodoc>
      </method>
      <method name="GetTextColour" type="Colour" overloaded="no">
        <autodoc>GetTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(Colour col)</autodoc>
        <paramlist>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetTopItem" type="long" overloaded="no">
        <autodoc>GetTopItem() -&gt; long</autodoc>
      </method>
      <method name="SetSingleStyle" type="" overloaded="no">
        <autodoc>SetSingleStyle(long style, bool add=True)</autodoc>
        <paramlist>
          <param name="style" type="long" default=""/>
          <param name="add" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetWindowStyleFlag" type="" overloaded="no">
        <autodoc>SetWindowStyleFlag(long style)</autodoc>
        <docstring>Sets the style of the window. Please note that some styles cannot be
changed after the window creation and that Refresh() might be called
after changing the others for the change to take place immediately.</docstring>
        <paramlist>
          <param name="style" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetNextItem" type="long" overloaded="no">
        <autodoc>GetNextItem(long item, int geometry=LIST_NEXT_ALL, int state=LIST_STATE_DONTCARE) -&gt; long</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="geometry" type="int" default="wxLIST_NEXT_ALL"/>
          <param name="state" type="int" default="wxLIST_STATE_DONTCARE"/>
        </paramlist>
      </method>
      <method name="GetImageList" type="ImageList" overloaded="no">
        <autodoc>GetImageList(int which) -&gt; ImageList</autodoc>
        <paramlist>
          <param name="which" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetImageList" type="" overloaded="no">
        <autodoc>SetImageList(ImageList imageList, int which)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
          <param name="which" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AssignImageList" type="" overloaded="no">
        <autodoc>AssignImageList(ImageList imageList, int which)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
          <param name="which" type="int" default=""/>
        </paramlist>
      </method>
      <method name="InReportView" type="bool" overloaded="no">
        <autodoc>InReportView() -&gt; bool</autodoc>
      </method>
      <method name="IsVirtual" type="bool" overloaded="no">
        <autodoc>IsVirtual() -&gt; bool</autodoc>
      </method>
      <method name="RefreshItem" type="" overloaded="no">
        <autodoc>RefreshItem(long item)</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="RefreshItems" type="" overloaded="no">
        <autodoc>RefreshItems(long itemFrom, long itemTo)</autodoc>
        <paramlist>
          <param name="itemFrom" type="long" default=""/>
          <param name="itemTo" type="long" default=""/>
        </paramlist>
      </method>
      <method name="Arrange" type="bool" overloaded="no">
        <autodoc>Arrange(int flag=LIST_ALIGN_DEFAULT) -&gt; bool</autodoc>
        <paramlist>
          <param name="flag" type="int" default="wxLIST_ALIGN_DEFAULT"/>
        </paramlist>
      </method>
      <method name="DeleteItem" type="bool" overloaded="no">
        <autodoc>DeleteItem(long item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="DeleteAllItems" type="bool" overloaded="no">
        <autodoc>DeleteAllItems() -&gt; bool</autodoc>
      </method>
      <method name="DeleteColumn" type="bool" overloaded="no">
        <autodoc>DeleteColumn(int col) -&gt; bool</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeleteAllColumns" type="bool" overloaded="no">
        <autodoc>DeleteAllColumns() -&gt; bool</autodoc>
      </method>
      <method name="ClearAll" type="" overloaded="no">
        <autodoc>ClearAll()</autodoc>
      </method>
      <method name="EditLabel" type="" overloaded="no">
        <autodoc>EditLabel(long item)</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="EnsureVisible" type="bool" overloaded="no">
        <autodoc>EnsureVisible(long item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="FindItem" type="long" overloaded="no">
        <autodoc>FindItem(long start, String str, bool partial=False) -&gt; long</autodoc>
        <paramlist>
          <param name="start" type="long" default=""/>
          <param name="str" type="String" default=""/>
          <param name="partial" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="FindItemData" type="long" overloaded="no">
        <autodoc>FindItemData(long start, long data) -&gt; long</autodoc>
        <paramlist>
          <param name="start" type="long" default=""/>
          <param name="data" type="long" default=""/>
        </paramlist>
      </method>
      <method name="FindItemAtPos" type="long" overloaded="no">
        <autodoc>FindItemAtPos(long start, Point pt, int direction) -&gt; long</autodoc>
        <paramlist>
          <param name="start" type="long" default=""/>
          <param name="pt" type="Point" default=""/>
          <param name="direction" type="int" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="long" overloaded="no">
        <autodoc>HitTest(Point point) -&gt; (item, where)</autodoc>
        <docstring>Determines which item (if any) is at the specified point,
giving details in the second return value (see wxLIST_HITTEST_... flags.)</docstring>
        <paramlist>
          <param name="point" type="Point" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="InsertItem" type="long" overloaded="no">
        <autodoc>InsertItem(ListItem info) -&gt; long</autodoc>
        <paramlist>
          <param name="info" type="ListItem" default=""/>
        </paramlist>
      </method>
      <method name="InsertStringItem" type="long" overloaded="no">
        <autodoc>InsertStringItem(long index, String label) -&gt; long</autodoc>
        <paramlist>
          <param name="index" type="long" default=""/>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="InsertImageItem" type="long" overloaded="no">
        <autodoc>InsertImageItem(long index, int imageIndex) -&gt; long</autodoc>
        <paramlist>
          <param name="index" type="long" default=""/>
          <param name="imageIndex" type="int" default=""/>
        </paramlist>
      </method>
      <method name="InsertImageStringItem" type="long" overloaded="no">
        <autodoc>InsertImageStringItem(long index, String label, int imageIndex) -&gt; long</autodoc>
        <paramlist>
          <param name="index" type="long" default=""/>
          <param name="label" type="String" default=""/>
          <param name="imageIndex" type="int" default=""/>
        </paramlist>
      </method>
      <method name="InsertColumnInfo" type="long" overloaded="no">
        <autodoc>InsertColumnInfo(long col, ListItem info) -&gt; long</autodoc>
        <paramlist>
          <param name="col" type="long" default=""/>
          <param name="info" type="ListItem" default=""/>
        </paramlist>
      </method>
      <method name="InsertColumn" type="long" overloaded="no">
        <autodoc>InsertColumn(long col, String heading, int format=LIST_FORMAT_LEFT, 
    int width=-1) -&gt; long</autodoc>
        <paramlist>
          <param name="col" type="long" default=""/>
          <param name="heading" type="String" default=""/>
          <param name="format" type="int" default="wxLIST_FORMAT_LEFT"/>
          <param name="width" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="SetItemCount" type="" overloaded="no">
        <autodoc>SetItemCount(long count)</autodoc>
        <paramlist>
          <param name="count" type="long" default=""/>
        </paramlist>
      </method>
      <method name="ScrollList" type="bool" overloaded="no">
        <autodoc>ScrollList(int dx, int dy) -&gt; bool</autodoc>
        <paramlist>
          <param name="dx" type="int" default=""/>
          <param name="dy" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetItemTextColour" type="" overloaded="no">
        <autodoc>SetItemTextColour(long item, Colour col)</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetItemTextColour" type="Colour" overloaded="no">
        <autodoc>GetItemTextColour(long item) -&gt; Colour</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetItemBackgroundColour" type="" overloaded="no">
        <autodoc>SetItemBackgroundColour(long item, Colour col)</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetItemBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetItemBackgroundColour(long item) -&gt; Colour</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SortItems" type="bool" overloaded="no">
        <autodoc>SortItems(PyObject func) -&gt; bool</autodoc>
        <paramlist>
          <param name="func" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetMainWindow" type="Window" overloaded="no">
        <autodoc>GetMainWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ListView" oldname="wxListView" module="controls">
      <baseclass name="ListCtrl"/>
      <constructor name="ListView" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_REPORT, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; ListView</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLC_REPORT"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListCtrlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreListView" overloaded="no">
        <autodoc>PreListView() -&gt; ListView</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=LC_REPORT, 
    Validator validator=DefaultValidator, String name=ListCtrlNameStr) -&gt; bool</autodoc>
        <docstring>Do the 2nd phase and create the GUI control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLC_REPORT"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyListCtrlNameStr"/>
        </paramlist>
      </method>
      <method name="Select" type="" overloaded="no">
        <autodoc>Select(long n, bool on=True)</autodoc>
        <paramlist>
          <param name="n" type="long" default=""/>
          <param name="on" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Focus" type="" overloaded="no">
        <autodoc>Focus(long index)</autodoc>
        <paramlist>
          <param name="index" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetFocusedItem" type="long" overloaded="no">
        <autodoc>GetFocusedItem() -&gt; long</autodoc>
      </method>
      <method name="GetNextSelected" type="long" overloaded="no">
        <autodoc>GetNextSelected(long item) -&gt; long</autodoc>
        <paramlist>
          <param name="item" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstSelected" type="long" overloaded="no">
        <autodoc>GetFirstSelected() -&gt; long</autodoc>
      </method>
      <method name="IsSelected" type="bool" overloaded="no">
        <autodoc>IsSelected(long index) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetColumnImage" type="" overloaded="no">
        <autodoc>SetColumnImage(int col, int image)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="image" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ClearColumnImage" type="" overloaded="no">
        <autodoc>ClearColumnImage(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="TreeItemId" oldname="wxTreeItemId" module="controls">
      <constructor name="TreeItemId" overloaded="no">
        <autodoc>__init__() -&gt; TreeItemId</autodoc>
      </constructor>
      <destructor name="~wxTreeItemId" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(TreeItemId other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(TreeItemId other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <property name="m_pItem" type="" readonly="no"/>
    </class>
    <class name="TreeItemData" oldname="wxPyTreeItemData" module="controls">
      <constructor name="wxPyTreeItemData" overloaded="no">
        <autodoc>__init__(PyObject obj=None) -&gt; TreeItemData</autodoc>
        <paramlist>
          <param name="obj" type="PyObject" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetData" type="PyObject" overloaded="no">
        <autodoc>GetData() -&gt; PyObject</autodoc>
      </method>
      <method name="SetData" type="" overloaded="no">
        <autodoc>SetData(PyObject obj)</autodoc>
        <paramlist>
          <param name="obj" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetId" type="TreeItemId" overloaded="no">
        <autodoc>GetId() -&gt; TreeItemId</autodoc>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(TreeItemId id)</autodoc>
        <paramlist>
          <param name="id" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode>

EVT_TREE_BEGIN_DRAG        = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_DRAG       , 1)
EVT_TREE_BEGIN_RDRAG       = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_RDRAG      , 1)
EVT_TREE_BEGIN_LABEL_EDIT  = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT , 1)
EVT_TREE_END_LABEL_EDIT    = wx.PyEventBinder(wxEVT_COMMAND_TREE_END_LABEL_EDIT   , 1)
EVT_TREE_DELETE_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_TREE_DELETE_ITEM      , 1)
EVT_TREE_GET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_TREE_GET_INFO         , 1)
EVT_TREE_SET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_TREE_SET_INFO         , 1)
EVT_TREE_ITEM_EXPANDED     = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_EXPANDED    , 1)
EVT_TREE_ITEM_EXPANDING    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_EXPANDING   , 1)
EVT_TREE_ITEM_COLLAPSED    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_COLLAPSED   , 1)
EVT_TREE_ITEM_COLLAPSING   = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_COLLAPSING  , 1)
EVT_TREE_SEL_CHANGED       = wx.PyEventBinder(wxEVT_COMMAND_TREE_SEL_CHANGED      , 1)
EVT_TREE_SEL_CHANGING      = wx.PyEventBinder(wxEVT_COMMAND_TREE_SEL_CHANGING     , 1)
EVT_TREE_KEY_DOWN          = wx.PyEventBinder(wxEVT_COMMAND_TREE_KEY_DOWN         , 1)
EVT_TREE_ITEM_ACTIVATED    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_ACTIVATED   , 1)
EVT_TREE_ITEM_RIGHT_CLICK  = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK , 1)
EVT_TREE_ITEM_MIDDLE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK, 1)
EVT_TREE_END_DRAG          = wx.PyEventBinder(wxEVT_COMMAND_TREE_END_DRAG         , 1)
EVT_TREE_STATE_IMAGE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK, 1)
EVT_TREE_ITEM_GETTOOLTIP   = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP,   1)
</pythoncode>
    <class name="TreeEvent" oldname="wxTreeEvent" module="controls">
      <baseclass name="NotifyEvent"/>
      <constructor name="TreeEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=wxEVT_NULL, int id=0) -&gt; TreeEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetItem" type="TreeItemId" overloaded="no">
        <autodoc>GetItem() -&gt; TreeItemId</autodoc>
      </method>
      <method name="SetItem" type="" overloaded="no">
        <autodoc>SetItem(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetOldItem" type="TreeItemId" overloaded="no">
        <autodoc>GetOldItem() -&gt; TreeItemId</autodoc>
      </method>
      <method name="SetOldItem" type="" overloaded="no">
        <autodoc>SetOldItem(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetPoint" type="Point" overloaded="no">
        <autodoc>GetPoint() -&gt; Point</autodoc>
      </method>
      <method name="SetPoint" type="" overloaded="no">
        <autodoc>SetPoint(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetKeyEvent" type="KeyEvent" overloaded="no">
        <autodoc>GetKeyEvent() -&gt; KeyEvent</autodoc>
      </method>
      <method name="GetKeyCode" type="int" overloaded="no">
        <autodoc>GetKeyCode() -&gt; int</autodoc>
      </method>
      <method name="SetKeyEvent" type="" overloaded="no">
        <autodoc>SetKeyEvent(KeyEvent evt)</autodoc>
        <paramlist>
          <param name="evt" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="GetLabel" type="String" overloaded="no">
        <autodoc>GetLabel() -&gt; String</autodoc>
      </method>
      <method name="SetLabel" type="" overloaded="no">
        <autodoc>SetLabel(String label)</autodoc>
        <paramlist>
          <param name="label" type="String" default=""/>
        </paramlist>
      </method>
      <method name="IsEditCancelled" type="bool" overloaded="no">
        <autodoc>IsEditCancelled() -&gt; bool</autodoc>
      </method>
      <method name="SetEditCanceled" type="" overloaded="no">
        <autodoc>SetEditCanceled(bool editCancelled)</autodoc>
        <paramlist>
          <param name="editCancelled" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetToolTip" type="" overloaded="no">
        <autodoc>SetToolTip(String toolTip)</autodoc>
        <paramlist>
          <param name="toolTip" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="TreeCtrl" oldname="wxPyTreeCtrl" module="controls">
      <baseclass name="Control"/>
      <constructor name="wxPyTreeCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeCtrlNameStr) -&gt; TreeCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyTreeCtrlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreTreeCtrl" overloaded="no">
        <autodoc>PreTreeCtrl() -&gt; TreeCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeCtrlNameStr) -&gt; bool</autodoc>
        <docstring>Do the 2nd phase and create the GUI control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyTreeCtrlNameStr"/>
        </paramlist>
      </method>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="size_t" overloaded="no">
        <autodoc>GetCount() -&gt; size_t</autodoc>
      </method>
      <method name="GetIndent" type="unsigned int" overloaded="no">
        <autodoc>GetIndent() -&gt; unsigned int</autodoc>
      </method>
      <method name="SetIndent" type="" overloaded="no">
        <autodoc>SetIndent(unsigned int indent)</autodoc>
        <paramlist>
          <param name="indent" type="unsigned int" default=""/>
        </paramlist>
      </method>
      <method name="GetSpacing" type="unsigned int" overloaded="no">
        <autodoc>GetSpacing() -&gt; unsigned int</autodoc>
      </method>
      <method name="SetSpacing" type="" overloaded="no">
        <autodoc>SetSpacing(unsigned int spacing)</autodoc>
        <paramlist>
          <param name="spacing" type="unsigned int" default=""/>
        </paramlist>
      </method>
      <method name="GetImageList" type="ImageList" overloaded="no">
        <autodoc>GetImageList() -&gt; ImageList</autodoc>
      </method>
      <method name="GetStateImageList" type="ImageList" overloaded="no">
        <autodoc>GetStateImageList() -&gt; ImageList</autodoc>
      </method>
      <method name="SetImageList" type="" overloaded="no">
        <autodoc>SetImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="SetStateImageList" type="" overloaded="no">
        <autodoc>SetStateImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="AssignImageList" type="" overloaded="no">
        <autodoc>AssignImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="AssignStateImageList" type="" overloaded="no">
        <autodoc>AssignStateImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="GetItemText" type="String" overloaded="no">
        <autodoc>GetItemText(TreeItemId item) -&gt; String</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemImage" type="int" overloaded="no">
        <autodoc>GetItemImage(TreeItemId item, int which=TreeItemIcon_Normal) -&gt; int</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
        </paramlist>
      </method>
      <method name="GetItemData" type="TreeItemData" overloaded="no">
        <autodoc>GetItemData(TreeItemId item) -&gt; TreeItemData</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemPyData" type="PyObject" overloaded="no">
        <autodoc>GetItemPyData(TreeItemId item) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemTextColour" type="Colour" overloaded="no">
        <autodoc>GetItemTextColour(TreeItemId item) -&gt; Colour</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetItemBackgroundColour(TreeItemId item) -&gt; Colour</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemFont" type="Font" overloaded="no">
        <autodoc>GetItemFont(TreeItemId item) -&gt; Font</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="SetItemText" type="" overloaded="no">
        <autodoc>SetItemText(TreeItemId item, String text)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetItemImage" type="" overloaded="no">
        <autodoc>SetItemImage(TreeItemId item, int image, int which=TreeItemIcon_Normal)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="image" type="int" default=""/>
          <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
        </paramlist>
      </method>
      <method name="SetItemData" type="" overloaded="no">
        <autodoc>SetItemData(TreeItemId item, TreeItemData data)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="data" type="TreeItemData" default=""/>
        </paramlist>
      </method>
      <method name="SetItemPyData" type="" overloaded="no">
        <autodoc>SetItemPyData(TreeItemId item, PyObject obj)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="obj" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetItemHasChildren" type="" overloaded="no">
        <autodoc>SetItemHasChildren(TreeItemId item, bool has=True)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="has" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetItemBold" type="" overloaded="no">
        <autodoc>SetItemBold(TreeItemId item, bool bold=True)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="bold" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetItemTextColour" type="" overloaded="no">
        <autodoc>SetItemTextColour(TreeItemId item, Colour col)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetItemBackgroundColour" type="" overloaded="no">
        <autodoc>SetItemBackgroundColour(TreeItemId item, Colour col)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetItemFont" type="" overloaded="no">
        <autodoc>SetItemFont(TreeItemId item, Font font)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="IsVisible" type="bool" overloaded="no">
        <autodoc>IsVisible(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="ItemHasChildren" type="bool" overloaded="no">
        <autodoc>ItemHasChildren(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="IsExpanded" type="bool" overloaded="no">
        <autodoc>IsExpanded(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="IsSelected" type="bool" overloaded="no">
        <autodoc>IsSelected(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="IsBold" type="bool" overloaded="no">
        <autodoc>IsBold(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetChildrenCount" type="size_t" overloaded="no">
        <autodoc>GetChildrenCount(TreeItemId item, bool recursively=True) -&gt; size_t</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="recursively" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetRootItem" type="TreeItemId" overloaded="no">
        <autodoc>GetRootItem() -&gt; TreeItemId</autodoc>
      </method>
      <method name="GetSelection" type="TreeItemId" overloaded="no">
        <autodoc>GetSelection() -&gt; TreeItemId</autodoc>
      </method>
      <method name="GetSelections" type="PyObject" overloaded="no">
        <autodoc>GetSelections() -&gt; PyObject</autodoc>
      </method>
      <method name="GetItemParent" type="TreeItemId" overloaded="no">
        <autodoc>GetItemParent(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstChild" type="PyObject" overloaded="no">
        <autodoc>GetFirstChild(TreeItemId item) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetNextChild" type="PyObject" overloaded="no">
        <autodoc>GetNextChild(TreeItemId item, void cookie) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="cookie" type="" default=""/>
        </paramlist>
      </method>
      <method name="GetLastChild" type="TreeItemId" overloaded="no">
        <autodoc>GetLastChild(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetNextSibling" type="TreeItemId" overloaded="no">
        <autodoc>GetNextSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetPrevSibling" type="TreeItemId" overloaded="no">
        <autodoc>GetPrevSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstVisibleItem" type="TreeItemId" overloaded="no">
        <autodoc>GetFirstVisibleItem() -&gt; TreeItemId</autodoc>
      </method>
      <method name="GetNextVisible" type="TreeItemId" overloaded="no">
        <autodoc>GetNextVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetPrevVisible" type="TreeItemId" overloaded="no">
        <autodoc>GetPrevVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="AddRoot" type="TreeItemId" overloaded="no">
        <autodoc>AddRoot(String text, int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="PrependItem" type="TreeItemId" overloaded="no">
        <autodoc>PrependItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="InsertItem" type="TreeItemId" overloaded="no">
        <autodoc>InsertItem(TreeItemId parent, TreeItemId idPrevious, String text, 
    int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="idPrevious" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="InsertItemBefore" type="TreeItemId" overloaded="no">
        <autodoc>InsertItemBefore(TreeItemId parent, size_t index, String text, int image=-1, 
    int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="index" type="size_t" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="AppendItem" type="TreeItemId" overloaded="no">
        <autodoc>AppendItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="Delete" type="" overloaded="no">
        <autodoc>Delete(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="DeleteChildren" type="" overloaded="no">
        <autodoc>DeleteChildren(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="DeleteAllItems" type="" overloaded="no">
        <autodoc>DeleteAllItems()</autodoc>
      </method>
      <method name="Expand" type="" overloaded="no">
        <autodoc>Expand(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Collapse" type="" overloaded="no">
        <autodoc>Collapse(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="CollapseAndReset" type="" overloaded="no">
        <autodoc>CollapseAndReset(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Toggle" type="" overloaded="no">
        <autodoc>Toggle(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Unselect" type="" overloaded="no">
        <autodoc>Unselect()</autodoc>
      </method>
      <method name="UnselectItem" type="" overloaded="no">
        <autodoc>UnselectItem(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="UnselectAll" type="" overloaded="no">
        <autodoc>UnselectAll()</autodoc>
      </method>
      <method name="SelectItem" type="" overloaded="no">
        <autodoc>SelectItem(TreeItemId item, bool select=True)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="select" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="ToggleItemSelection" type="" overloaded="no">
        <autodoc>ToggleItemSelection(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="EnsureVisible" type="" overloaded="no">
        <autodoc>EnsureVisible(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="ScrollTo" type="" overloaded="no">
        <autodoc>ScrollTo(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="EditLabel" type="" overloaded="no">
        <autodoc>EditLabel(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetEditControl" type="TextCtrl" overloaded="no">
        <autodoc>GetEditControl() -&gt; TextCtrl</autodoc>
      </method>
      <method name="SortChildren" type="" overloaded="no">
        <autodoc>SortChildren(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="TreeItemId" overloaded="no">
        <autodoc>HitTest(Point point) -&gt; (item, where)</autodoc>
        <docstring>Determine which item (if any) belongs the given point.  The
coordinates specified are relative to the client area of tree ctrl
and the where return value is set to a bitmask of wxTREE_HITTEST_xxx
constants.
</docstring>
        <paramlist>
          <param name="point" type="Point" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBoundingRect" type="PyObject" overloaded="no">
        <autodoc>GetBoundingRect(TreeItemId item, bool textOnly=False) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="textOnly" type="bool" default="False"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="GenericDirCtrl" oldname="wxGenericDirCtrl" module="controls">
      <baseclass name="Control"/>
      <constructor name="GenericDirCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, String dir=DirDialogDefaultFolderStr, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER, 
    String filter=EmptyString, 
    int defaultFilter=0, String name=TreeCtrlNameStr) -&gt; GenericDirCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="dir" type="String" default="wxPyDirDialogDefaultFolderStr"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER"/>
          <param name="filter" type="String" default="wxPyEmptyString"/>
          <param name="defaultFilter" type="int" default="0"/>
          <param name="name" type="String" default="wxPyTreeCtrlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreGenericDirCtrl" overloaded="no">
        <autodoc>PreGenericDirCtrl() -&gt; GenericDirCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, String dir=DirDialogDefaultFolderStr, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER, 
    String filter=EmptyString, 
    int defaultFilter=0, String name=TreeCtrlNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="dir" type="String" default="wxPyDirDialogDefaultFolderStr"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER"/>
          <param name="filter" type="String" default="wxPyEmptyString"/>
          <param name="defaultFilter" type="int" default="0"/>
          <param name="name" type="String" default="wxPyTreeCtrlNameStr"/>
        </paramlist>
      </method>
      <method name="ExpandPath" type="bool" overloaded="no">
        <autodoc>ExpandPath(String path) -&gt; bool</autodoc>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultPath" type="String" overloaded="no">
        <autodoc>GetDefaultPath() -&gt; String</autodoc>
      </method>
      <method name="SetDefaultPath" type="" overloaded="no">
        <autodoc>SetDefaultPath(String path)</autodoc>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetPath" type="String" overloaded="no">
        <autodoc>GetPath() -&gt; String</autodoc>
      </method>
      <method name="GetFilePath" type="String" overloaded="no">
        <autodoc>GetFilePath() -&gt; String</autodoc>
      </method>
      <method name="SetPath" type="" overloaded="no">
        <autodoc>SetPath(String path)</autodoc>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ShowHidden" type="" overloaded="no">
        <autodoc>ShowHidden(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetShowHidden" type="bool" overloaded="no">
        <autodoc>GetShowHidden() -&gt; bool</autodoc>
      </method>
      <method name="GetFilter" type="String" overloaded="no">
        <autodoc>GetFilter() -&gt; String</autodoc>
      </method>
      <method name="SetFilter" type="" overloaded="no">
        <autodoc>SetFilter(String filter)</autodoc>
        <paramlist>
          <param name="filter" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetFilterIndex" type="int" overloaded="no">
        <autodoc>GetFilterIndex() -&gt; int</autodoc>
      </method>
      <method name="SetFilterIndex" type="" overloaded="no">
        <autodoc>SetFilterIndex(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetRootId" type="TreeItemId" overloaded="no">
        <autodoc>GetRootId() -&gt; TreeItemId</autodoc>
      </method>
      <method name="GetTreeCtrl" type="TreeCtrl" overloaded="no">
        <autodoc>GetTreeCtrl() -&gt; TreeCtrl</autodoc>
      </method>
      <method name="GetFilterListCtrl" type="wxDirFilterListCtrl" overloaded="no">
        <autodoc>GetFilterListCtrl() -&gt; DirFilterListCtrl</autodoc>
      </method>
      <method name="FindChild" type="TreeItemId" overloaded="no">
        <autodoc>FindChild(wxTreeItemId parentId, wxString path) -&gt; (item, done)</autodoc>
        <docstring>Find the child that matches the first part of 'path'.  E.g. if a child path is
"/usr" and 'path' is "/usr/include" then the child for /usr is returned.
If the path string has been used (we're at the leaf), done is set to True
</docstring>
        <paramlist>
          <param name="parentId" type="TreeItemId" default=""/>
          <param name="path" type="String" default=""/>
          <param name="OUTPUT" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="DoResize" type="" overloaded="no">
        <autodoc>DoResize()</autodoc>
      </method>
      <method name="ReCreateTree" type="" overloaded="no">
        <autodoc>ReCreateTree()</autodoc>
      </method>
    </class>
    <class name="DirFilterListCtrl" oldname="wxDirFilterListCtrl" module="controls">
      <baseclass name="Choice"/>
      <constructor name="DirFilterListCtrl" overloaded="no">
        <autodoc>__init__(GenericDirCtrl parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; DirFilterListCtrl</autodoc>
        <paramlist>
          <param name="parent" type="GenericDirCtrl" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="PreDirFilterListCtrl" overloaded="no">
        <autodoc>PreDirFilterListCtrl() -&gt; DirFilterListCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(GenericDirCtrl parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="GenericDirCtrl" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </method>
      <method name="FillFilterList" type="" overloaded="no">
        <autodoc>FillFilterList(String filter, int defaultFilter)</autodoc>
        <paramlist>
          <param name="filter" type="String" default=""/>
          <param name="defaultFilter" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="PyControl" oldname="wxPyControl" module="controls">
      <baseclass name="Control"/>
      <constructor name="PyControl" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, Validator validator=DefaultValidator, 
    String name=ControlNameStr) -&gt; PyControl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyControlNameStr"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_DoMoveWindow" type="" overloaded="no">
        <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetSize" type="" overloaded="no">
        <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
        </paramlist>
      </method>
      <method name="base_DoSetClientSize" type="" overloaded="no">
        <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetVirtualSize" type="" overloaded="no">
        <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetSize" type="" overloaded="no">
        <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetClientSize" type="" overloaded="no">
        <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetPosition" type="" overloaded="no">
        <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetVirtualSize" type="Size" overloaded="no">
        <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
      </method>
      <method name="base_DoGetBestSize" type="Size" overloaded="no">
        <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
      </method>
      <method name="base_InitDialog" type="" overloaded="no">
        <autodoc>base_InitDialog()</autodoc>
      </method>
      <method name="base_TransferDataToWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_TransferDataFromWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_Validate" type="bool" overloaded="no">
        <autodoc>base_Validate() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocus" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocusFromKeyboard" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
      </method>
      <method name="base_GetMaxSize" type="Size" overloaded="no">
        <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
      </method>
      <method name="base_AddChild" type="" overloaded="no">
        <autodoc>base_AddChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="base_RemoveChild" type="" overloaded="no">
        <autodoc>base_RemoveChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <pythoncode> 
EVT_HELP = wx.PyEventBinder( wxEVT_HELP, 1)
EVT_HELP_RANGE = wx.PyEventBinder(  wxEVT_HELP, 2)
EVT_DETAILED_HELP = wx.PyEventBinder( wxEVT_DETAILED_HELP, 1)
EVT_DETAILED_HELP_RANGE = wx.PyEventBinder( wxEVT_DETAILED_HELP, 2)
</pythoncode>
    <class name="HelpEvent" oldname="wxHelpEvent" module="controls">
      <docstring>A help event is sent when the user has requested
context-sensitive help. This can either be caused by the
application requesting context-sensitive help mode via
wx.ContextHelp, or (on MS Windows) by the system generating a
WM_HELP message when the user pressed F1 or clicked on the query
button in a dialog caption.

A help event is sent to the window that the user clicked on, and
is propagated up the window hierarchy until the event is
processed or there are no more event handlers. The application
should call event.GetId to check the identity of the clicked-on
window, and then either show some suitable help or call
event.Skip if the identifier is unrecognised. Calling Skip is
important because it allows wxWindows to generate further events
for ancestors of the clicked-on window. Otherwise it would be
impossible to show help for container windows, since processing
would stop after the first window found.

 Events
    EVT_HELP            Sent when the user has requested context-
                        sensitive help.
    EVT_HELP_RANGE      Allows to catch EVT_HELP for a range of IDs
</docstring>
      <baseclass name="CommandEvent"/>
      <constructor name="HelpEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, int winid=0, Point pt=DefaultPosition) -&gt; HelpEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="winid" type="int" default="0"/>
          <param name="pt" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </constructor>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
        <docstring>Returns the left-click position of the mouse, in screen
coordinates. This allows the application to position the help
appropriately.</docstring>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(Point pos)</autodoc>
        <docstring>Sets the left-click position of the mouse, in screen coordinates.</docstring>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetLink" type="String" overloaded="no">
        <autodoc>GetLink() -&gt; String</autodoc>
        <docstring>Get an optional link to further help</docstring>
      </method>
      <method name="SetLink" type="" overloaded="no">
        <autodoc>SetLink(String link)</autodoc>
        <docstring>Set an optional link to further help</docstring>
        <paramlist>
          <param name="link" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTarget" type="String" overloaded="no">
        <autodoc>GetTarget() -&gt; String</autodoc>
        <docstring>Get an optional target to display help in. E.g. a window specification</docstring>
      </method>
      <method name="SetTarget" type="" overloaded="no">
        <autodoc>SetTarget(String target)</autodoc>
        <docstring>Set an optional target to display help in. E.g. a window specification</docstring>
        <paramlist>
          <param name="target" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="ContextHelp" oldname="wxContextHelp" module="controls">
      <docstring>This class changes the cursor to a query and puts the application
into a 'context-sensitive help mode'. When the user left-clicks
on a window within the specified window, a EVT_HELP event is sent
to that control, and the application may respond to it by popping
up some help.

There are a couple of ways to invoke this behaviour implicitly:

    * Use the wx.DIALOG_EX_CONTEXTHELP extended style for a
      dialog (Windows only). This will put a question mark in the
      titlebar, and Windows will put the application into
      context-sensitive help mode automatically, with further
      programming.

    * Create a wx.ContextHelpButton, whose predefined behaviour
      is to create a context help object. Normally you will write
      your application so that this button is only added to a
      dialog for non-Windows platforms (use
      wx.DIALOG_EX_CONTEXTHELP on Windows).
</docstring>
      <baseclass name="Object"/>
      <constructor name="ContextHelp" overloaded="no">
        <autodoc>__init__(Window window=None, bool doNow=True) -&gt; ContextHelp</autodoc>
        <docstring>Constructs a context help object, calling BeginContextHelp if
doNow is true (the default).

If window is None, the top window is used.</docstring>
        <paramlist>
          <param name="window" type="Window" default="NULL"/>
          <param name="doNow" type="bool" default="True"/>
        </paramlist>
      </constructor>
      <destructor name="~wxContextHelp" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="BeginContextHelp" type="bool" overloaded="no">
        <autodoc>BeginContextHelp(Window window=None) -&gt; bool</autodoc>
        <docstring>Puts the application into context-sensitive help mode. window is
the window which will be used to catch events; if NULL, the top
window will be used.

Returns true if the application was successfully put into
context-sensitive help mode. This function only returns when the
event loop has finished.</docstring>
        <paramlist>
          <param name="window" type="Window" default="NULL"/>
        </paramlist>
      </method>
      <method name="EndContextHelp" type="bool" overloaded="no">
        <autodoc>EndContextHelp() -&gt; bool</autodoc>
        <docstring>Ends context-sensitive help mode. Not normally called by the
application.</docstring>
      </method>
    </class>
    <class name="ContextHelpButton" oldname="wxContextHelpButton" module="controls">
      <docstring>Instances of this class may be used to add a question mark button
that when pressed, puts the application into context-help
mode. It does this by creating a wx.ContextHelp object which
itself generates a EVT_HELP event when the user clicks on a
window.

On Windows, you may add a question-mark icon to a dialog by use
of the wx.DIALOG_EX_CONTEXTHELP extra style, but on other
platforms you will have to add a button explicitly, usually next
to OK, Cancel or similar buttons.
</docstring>
      <baseclass name="BitmapButton"/>
      <constructor name="ContextHelpButton" overloaded="no">
        <autodoc>__init__(Window parent, int id=ID_CONTEXT_HELP, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BU_AUTODRAW) -&gt; ContextHelpButton</autodoc>
        <docstring>Constructor, creating and showing a context help button.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="wxID_CONTEXT_HELP"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxBU_AUTODRAW"/>
        </paramlist>
      </constructor>
    </class>
    <class name="HelpProvider" oldname="wxHelpProvider" module="controls">
      <docstring>wx.HelpProvider is an abstract class used by a program
implementing context-sensitive help to show the help text for the
given window.

The current help provider must be explicitly set by the
application using wx.HelpProvider.Set().</docstring>
      <staticmethod name="Set" type="HelpProvider" overloaded="no">
        <autodoc>Set(HelpProvider helpProvider) -&gt; HelpProvider</autodoc>
        <docstring>Sset the current, application-wide help provider. Returns the
previous one.  Unlike some other classes, the help provider is
not created on demand. This must be explicitly done by the
application.</docstring>
        <paramlist>
          <param name="helpProvider" type="HelpProvider" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Get" type="HelpProvider" overloaded="no">
        <autodoc>Get() -&gt; HelpProvider</autodoc>
        <docstring>Return the current application-wide help provider.</docstring>
      </staticmethod>
      <method name="GetHelp" type="String" overloaded="no">
        <autodoc>GetHelp(Window window) -&gt; String</autodoc>
        <docstring>Gets the help string for this window. Its interpretation is
dependent on the help provider except that empty string always
means that no help is associated with the window.</docstring>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="ShowHelp" type="bool" overloaded="no">
        <autodoc>ShowHelp(Window window) -&gt; bool</autodoc>
        <docstring>Shows help for the given window. Uses GetHelp internally if
applicable.

Returns true if it was done, or false if no help was available
for this window.</docstring>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="AddHelp" type="" overloaded="no">
        <autodoc>AddHelp(Window window, String text)</autodoc>
        <docstring>Associates the text with the given window.</docstring>
        <paramlist>
          <param name="window" type="Window" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AddHelpById" type="" overloaded="no">
        <autodoc>AddHelpById(int id, String text)</autodoc>
        <docstring>This version associates the given text with all windows with this
id. May be used to set the same help string for all Cancel
buttons in the application, for example.</docstring>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="RemoveHelp" type="" overloaded="no">
        <autodoc>RemoveHelp(Window window)</autodoc>
        <docstring>Removes the association between the window pointer and the help
text. This is called by the wx.Window destructor. Without this,
the table of help strings will fill up and when window pointers
are reused, the wrong help string will be found.</docstring>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
      </method>
    </class>
    <class name="SimpleHelpProvider" oldname="wxSimpleHelpProvider" module="controls">
      <docstring>wx.SimpleHelpProvider is an implementation of wx.HelpProvider
which supports only plain text help strings, and shows the string
associated with the control (if any) in a tooltip.</docstring>
      <baseclass name="HelpProvider"/>
      <constructor name="SimpleHelpProvider" overloaded="no">
        <autodoc>__init__() -&gt; SimpleHelpProvider</autodoc>
        <docstring>wx.SimpleHelpProvider is an implementation of wx.HelpProvider
which supports only plain text help strings, and shows the string
associated with the control (if any) in a tooltip.</docstring>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="DragImage" oldname="wxGenericDragImage" module="controls">
      <baseclass name="Object"/>
      <constructor name="wxGenericDragImage" overloaded="no">
        <autodoc>__init__(Bitmap image, Cursor cursor=wxNullCursor) -&gt; DragImage</autodoc>
        <paramlist>
          <param name="image" type="Bitmap" default=""/>
          <param name="cursor" type="Cursor" default="wxNullCursor"/>
        </paramlist>
      </constructor>
      <constructor name="DragIcon" overloaded="no">
        <autodoc>DragIcon(Icon image, Cursor cursor=wxNullCursor) -&gt; DragImage</autodoc>
        <paramlist>
          <param name="image" type="Icon" default=""/>
          <param name="cursor" type="Cursor" default="wxNullCursor"/>
        </paramlist>
      </constructor>
      <constructor name="DragString" overloaded="no">
        <autodoc>DragString(String str, Cursor cursor=wxNullCursor) -&gt; DragImage</autodoc>
        <paramlist>
          <param name="str" type="String" default=""/>
          <param name="cursor" type="Cursor" default="wxNullCursor"/>
        </paramlist>
      </constructor>
      <constructor name="DragTreeItem" overloaded="no">
        <autodoc>DragTreeItem(TreeCtrl treeCtrl, TreeItemId id) -&gt; DragImage</autodoc>
        <paramlist>
          <param name="treeCtrl" type="TreeCtrl" default=""/>
          <param name="id" type="TreeItemId" default=""/>
        </paramlist>
      </constructor>
      <constructor name="DragListItem" overloaded="no">
        <autodoc>DragListItem(ListCtrl listCtrl, long id) -&gt; DragImage</autodoc>
        <paramlist>
          <param name="listCtrl" type="ListCtrl" default=""/>
          <param name="id" type="long" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxGenericDragImage" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetBackingBitmap" type="" overloaded="no">
        <autodoc>SetBackingBitmap(Bitmap bitmap)</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="BeginDrag" type="bool" overloaded="no">
        <autodoc>BeginDrag(Point hotspot, Window window, bool fullScreen=False, 
    Rect rect=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="hotspot" type="Point" default=""/>
          <param name="window" type="Window" default=""/>
          <param name="fullScreen" type="bool" default="False"/>
          <param name="rect" type="Rect" default="NULL"/>
        </paramlist>
      </method>
      <method name="BeginDragBounded" type="bool" overloaded="no">
        <autodoc>BeginDragBounded(Point hotspot, Window window, Window boundingWindow) -&gt; bool</autodoc>
        <paramlist>
          <param name="hotspot" type="Point" default=""/>
          <param name="window" type="Window" default=""/>
          <param name="boundingWindow" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="EndDrag" type="bool" overloaded="no">
        <autodoc>EndDrag() -&gt; bool</autodoc>
      </method>
      <method name="Move" type="bool" overloaded="no">
        <autodoc>Move(Point pt) -&gt; bool</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="Show" type="bool" overloaded="no">
        <autodoc>Show() -&gt; bool</autodoc>
      </method>
      <method name="Hide" type="bool" overloaded="no">
        <autodoc>Hide() -&gt; bool</autodoc>
      </method>
      <method name="GetImageRect" type="Rect" overloaded="no">
        <autodoc>GetImageRect(Point pos) -&gt; Rect</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DoDrawImage" type="bool" overloaded="no">
        <autodoc>DoDrawImage(DC dc, Point pos) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="UpdateBackingFromWindow" type="bool" overloaded="no">
        <autodoc>UpdateBackingFromWindow(DC windowDC, MemoryDC destDC, Rect sourceRect, Rect destRect) -&gt; bool</autodoc>
        <paramlist>
          <param name="windowDC" type="DC" default=""/>
          <param name="destDC" type="MemoryDC" default=""/>
          <param name="sourceRect" type="Rect" default=""/>
          <param name="destRect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="RedrawImage" type="bool" overloaded="no">
        <autodoc>RedrawImage(Point oldPos, Point newPos, bool eraseOld, bool drawNew) -&gt; bool</autodoc>
        <paramlist>
          <param name="oldPos" type="Point" default=""/>
          <param name="newPos" type="Point" default=""/>
          <param name="eraseOld" type="bool" default=""/>
          <param name="drawNew" type="bool" default=""/>
        </paramlist>
      </method>
    </class>
  </module>
  <module name="misc">
    <import name="core"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="SystemSettings" oldname="wxSystemSettings" module="misc">
      <staticmethod name="GetColour" type="Colour" overloaded="no">
        <autodoc>GetColour(int index) -&gt; Colour</autodoc>
        <paramlist>
          <param name="index" type="wxSystemColour" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont(int index) -&gt; Font</autodoc>
        <paramlist>
          <param name="index" type="wxSystemFont" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetMetric" type="int" overloaded="no">
        <autodoc>GetMetric(int index) -&gt; int</autodoc>
        <paramlist>
          <param name="index" type="wxSystemMetric" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="HasFeature" type="bool" overloaded="no">
        <autodoc>HasFeature(int index) -&gt; bool</autodoc>
        <paramlist>
          <param name="index" type="wxSystemFeature" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetScreenType" type="wxSystemScreenType" overloaded="no">
        <autodoc>GetScreenType() -&gt; int</autodoc>
      </staticmethod>
      <staticmethod name="SetScreenType" type="" overloaded="no">
        <autodoc>SetScreenType(int screen)</autodoc>
        <paramlist>
          <param name="screen" type="wxSystemScreenType" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <class name="SystemOptions" oldname="wxSystemOptions" module="misc">
      <baseclass name="Object"/>
      <constructor name="SystemOptions" overloaded="no">
        <autodoc>__init__() -&gt; SystemOptions</autodoc>
      </constructor>
      <staticmethod name="SetOption" type="" overloaded="no">
        <autodoc>SetOption(String name, String value)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="SetOptionInt" type="" overloaded="no">
        <autodoc>SetOptionInt(String name, int value)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="value" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetOption" type="String" overloaded="no">
        <autodoc>GetOption(String name) -&gt; String</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetOptionInt" type="int" overloaded="no">
        <autodoc>GetOptionInt(String name) -&gt; int</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="HasOption" type="bool" overloaded="no">
        <autodoc>HasOption(String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <method name="NewId" oldname="wxNewId" type="long" overloaded="no">
      <autodoc>NewId() -&gt; long</autodoc>
    </method>
    <method name="RegisterId" oldname="wxRegisterId" type="" overloaded="no">
      <autodoc>RegisterId(long id)</autodoc>
      <paramlist>
        <param name="id" type="long" default=""/>
      </paramlist>
    </method>
    <method name="GetCurrentId" oldname="wxGetCurrentId" type="long" overloaded="no">
      <autodoc>GetCurrentId() -&gt; long</autodoc>
    </method>
    <method name="Bell" oldname="wxBell" type="" overloaded="no">
      <autodoc>Bell()</autodoc>
    </method>
    <method name="EndBusyCursor" oldname="wxEndBusyCursor" type="" overloaded="no">
      <autodoc>EndBusyCursor()</autodoc>
    </method>
    <method name="GetElapsedTime" oldname="wxGetElapsedTime" type="long" overloaded="no">
      <autodoc>GetElapsedTime(bool resetTimer=True) -&gt; long</autodoc>
      <paramlist>
        <param name="resetTimer" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetMousePosition" oldname="wxGetMousePosition" type="" overloaded="no">
      <autodoc>GetMousePosition() -&gt; (x,y)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="int" default=""/>
        <param name="OUTPUT" type="int" default=""/>
      </paramlist>
    </method>
    <method name="IsBusy" oldname="wxIsBusy" type="bool" overloaded="no">
      <autodoc>IsBusy() -&gt; bool</autodoc>
    </method>
    <method name="Now" oldname="wxNow" type="String" overloaded="no">
      <autodoc>Now() -&gt; String</autodoc>
    </method>
    <method name="Shell" oldname="wxShell" type="bool" overloaded="no">
      <autodoc>Shell(String command=EmptyString) -&gt; bool</autodoc>
      <paramlist>
        <param name="command" type="String" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="StartTimer" oldname="wxStartTimer" type="" overloaded="no">
      <autodoc>StartTimer()</autodoc>
    </method>
    <method name="GetOsVersion" oldname="wxGetOsVersion" type="int" overloaded="no">
      <autodoc>GetOsVersion() -&gt; (platform, major, minor)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="int" default=""/>
        <param name="OUTPUT" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetOsDescription" oldname="wxGetOsDescription" type="String" overloaded="no">
      <autodoc>GetOsDescription() -&gt; String</autodoc>
    </method>
    <method name="GetFreeMemory" oldname="wxGetFreeMemory" type="long" overloaded="no">
      <autodoc>GetFreeMemory() -&gt; long</autodoc>
    </method>
    <method name="Shutdown" oldname="wxShutdown" type="bool" overloaded="no">
      <autodoc>Shutdown(int wFlags) -&gt; bool</autodoc>
      <paramlist>
        <param name="wFlags" type="wxShutdownFlags" default=""/>
      </paramlist>
    </method>
    <method name="Sleep" oldname="wxSleep" type="" overloaded="no">
      <autodoc>Sleep(int secs)</autodoc>
      <paramlist>
        <param name="secs" type="int" default=""/>
      </paramlist>
    </method>
    <method name="Usleep" oldname="wxUsleep" type="" overloaded="no">
      <autodoc>Usleep(unsigned long milliseconds)</autodoc>
      <paramlist>
        <param name="milliseconds" type="unsigned long" default=""/>
      </paramlist>
    </method>
    <method name="EnableTopLevelWindows" oldname="wxEnableTopLevelWindows" type="" overloaded="no">
      <autodoc>EnableTopLevelWindows(bool enable)</autodoc>
      <paramlist>
        <param name="enable" type="bool" default=""/>
      </paramlist>
    </method>
    <method name="StripMenuCodes" oldname="wxStripMenuCodes" type="String" overloaded="no">
      <autodoc>StripMenuCodes(String in) -&gt; String</autodoc>
      <paramlist>
        <param name="in" type="String" default=""/>
      </paramlist>
    </method>
    <method name="GetEmailAddress" oldname="wxGetEmailAddress" type="String" overloaded="no">
      <autodoc>GetEmailAddress() -&gt; String</autodoc>
    </method>
    <method name="GetHostName" oldname="wxGetHostName" type="String" overloaded="no">
      <autodoc>GetHostName() -&gt; String</autodoc>
    </method>
    <method name="GetFullHostName" oldname="wxGetFullHostName" type="String" overloaded="no">
      <autodoc>GetFullHostName() -&gt; String</autodoc>
    </method>
    <method name="GetUserId" oldname="wxGetUserId" type="String" overloaded="no">
      <autodoc>GetUserId() -&gt; String</autodoc>
    </method>
    <method name="GetUserName" oldname="wxGetUserName" type="String" overloaded="no">
      <autodoc>GetUserName() -&gt; String</autodoc>
    </method>
    <method name="GetHomeDir" oldname="wxGetHomeDir" type="String" overloaded="no">
      <autodoc>GetHomeDir() -&gt; String</autodoc>
    </method>
    <method name="GetUserHome" oldname="wxGetUserHome" type="String" overloaded="no">
      <autodoc>GetUserHome(String user=EmptyString) -&gt; String</autodoc>
      <paramlist>
        <param name="user" type="String" default="wxPyEmptyString"/>
      </paramlist>
    </method>
    <method name="GetProcessId" oldname="wxGetProcessId" type="unsigned long" overloaded="no">
      <autodoc>GetProcessId() -&gt; unsigned long</autodoc>
    </method>
    <method name="Trap" oldname="wxTrap" type="" overloaded="no">
      <autodoc>Trap()</autodoc>
    </method>
    <method name="FileSelector" oldname="wxFileSelector" type="String" overloaded="no">
      <autodoc>FileSelector(String message=FileSelectorPromptStr, String default_path=EmptyString, 
    String default_filename=EmptyString, 
    String default_extension=EmptyString, 
    String wildcard=FileSelectorDefaultWildcardStr, 
    int flags=0, Window parent=None, int x=-1, 
    int y=-1) -&gt; String</autodoc>
      <paramlist>
        <param name="message" type="String" default="wxPyFileSelectorPromptStr"/>
        <param name="default_path" type="String" default="wxPyEmptyString"/>
        <param name="default_filename" type="String" default="wxPyEmptyString"/>
        <param name="default_extension" type="String" default="wxPyEmptyString"/>
        <param name="wildcard" type="String" default="wxPyFileSelectorDefaultWildcardStr"/>
        <param name="flags" type="int" default="0"/>
        <param name="parent" type="Window" default="NULL"/>
        <param name="x" type="int" default="-1"/>
        <param name="y" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="LoadFileSelector" oldname="wxLoadFileSelector" type="String" overloaded="no">
      <autodoc>LoadFileSelector(String what, String extension, String default_name=EmptyString, 
    Window parent=None) -&gt; String</autodoc>
      <paramlist>
        <param name="what" type="String" default=""/>
        <param name="extension" type="String" default=""/>
        <param name="default_name" type="String" default="wxPyEmptyString"/>
        <param name="parent" type="Window" default="NULL"/>
      </paramlist>
    </method>
    <method name="SaveFileSelector" oldname="wxSaveFileSelector" type="String" overloaded="no">
      <autodoc>SaveFileSelector(String what, String extension, String default_name=EmptyString, 
    Window parent=None) -&gt; String</autodoc>
      <paramlist>
        <param name="what" type="String" default=""/>
        <param name="extension" type="String" default=""/>
        <param name="default_name" type="String" default="wxPyEmptyString"/>
        <param name="parent" type="Window" default="NULL"/>
      </paramlist>
    </method>
    <method name="DirSelector" oldname="wxDirSelector" type="String" overloaded="no">
      <autodoc>DirSelector(String message=DirSelectorPromptStr, String defaultPath=EmptyString, 
    long style=DD_DEFAULT_STYLE, 
    Point pos=DefaultPosition, Window parent=None) -&gt; String</autodoc>
      <paramlist>
        <param name="message" type="String" default="wxPyDirSelectorPromptStr"/>
        <param name="defaultPath" type="String" default="wxPyEmptyString"/>
        <param name="style" type="long" default="wxDD_DEFAULT_STYLE"/>
        <param name="pos" type="Point" default="wxDefaultPosition"/>
        <param name="parent" type="Window" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetTextFromUser" oldname="wxGetTextFromUser" type="String" overloaded="no">
      <autodoc>GetTextFromUser(String message, String caption=EmptyString, String default_value=EmptyString, 
    Window parent=None, 
    int x=-1, int y=-1, bool centre=True) -&gt; String</autodoc>
      <paramlist>
        <param name="message" type="String" default=""/>
        <param name="caption" type="String" default="wxPyEmptyString"/>
        <param name="default_value" type="String" default="wxPyEmptyString"/>
        <param name="parent" type="Window" default="NULL"/>
        <param name="x" type="int" default="-1"/>
        <param name="y" type="int" default="-1"/>
        <param name="centre" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="GetPasswordFromUser" oldname="wxGetPasswordFromUser" type="String" overloaded="no">
      <autodoc>GetPasswordFromUser(String message, String caption=EmptyString, String default_value=EmptyString, 
    Window parent=None) -&gt; String</autodoc>
      <paramlist>
        <param name="message" type="String" default=""/>
        <param name="caption" type="String" default="wxPyEmptyString"/>
        <param name="default_value" type="String" default="wxPyEmptyString"/>
        <param name="parent" type="Window" default="NULL"/>
      </paramlist>
    </method>
    <method name="GetSingleChoice" oldname="wxGetSingleChoice" type="String" overloaded="no">
      <autodoc>GetSingleChoice(String message, String caption, int choices, String choices_array, 
    Window parent=None, int x=-1, 
    int y=-1, bool centre=True, int width=150, int height=200) -&gt; String</autodoc>
      <paramlist>
        <param name="message" type="String" default=""/>
        <param name="caption" type="String" default=""/>
        <param name="choices" type="int" default=""/>
        <param name="choices_array" type="String" default=""/>
        <param name="parent" type="Window" default="NULL"/>
        <param name="x" type="int" default="-1"/>
        <param name="y" type="int" default="-1"/>
        <param name="centre" type="bool" default="True"/>
        <param name="width" type="int" default="150"/>
        <param name="height" type="int" default="200"/>
      </paramlist>
    </method>
    <method name="GetSingleChoiceIndex" oldname="wxGetSingleChoiceIndex" type="int" overloaded="no">
      <autodoc>GetSingleChoiceIndex(String message, String caption, int choices, String choices_array, 
    Window parent=None, int x=-1, 
    int y=-1, bool centre=True, int width=150, int height=200) -&gt; int</autodoc>
      <paramlist>
        <param name="message" type="String" default=""/>
        <param name="caption" type="String" default=""/>
        <param name="choices" type="int" default=""/>
        <param name="choices_array" type="String" default=""/>
        <param name="parent" type="Window" default="NULL"/>
        <param name="x" type="int" default="-1"/>
        <param name="y" type="int" default="-1"/>
        <param name="centre" type="bool" default="True"/>
        <param name="width" type="int" default="150"/>
        <param name="height" type="int" default="200"/>
      </paramlist>
    </method>
    <method name="MessageBox" oldname="wxMessageBox" type="int" overloaded="no">
      <autodoc>MessageBox(String message, String caption=EmptyString, int style=wxOK|wxCENTRE, 
    Window parent=None, int x=-1, 
    int y=-1) -&gt; int</autodoc>
      <paramlist>
        <param name="message" type="String" default=""/>
        <param name="caption" type="String" default="wxPyEmptyString"/>
        <param name="style" type="int" default="wxOK|wxCENTRE"/>
        <param name="parent" type="Window" default="NULL"/>
        <param name="x" type="int" default="-1"/>
        <param name="y" type="int" default="-1"/>
      </paramlist>
    </method>
    <method name="GetNumberFromUser" oldname="wxGetNumberFromUser" type="long" overloaded="no">
      <autodoc>GetNumberFromUser(String message, String prompt, String caption, long value, 
    long min=0, long max=100, Window parent=None, 
    Point pos=DefaultPosition) -&gt; long</autodoc>
      <paramlist>
        <param name="message" type="String" default=""/>
        <param name="prompt" type="String" default=""/>
        <param name="caption" type="String" default=""/>
        <param name="value" type="long" default=""/>
        <param name="min" type="long" default="0"/>
        <param name="max" type="long" default="100"/>
        <param name="parent" type="Window" default="NULL"/>
        <param name="pos" type="Point" default="wxDefaultPosition"/>
      </paramlist>
    </method>
    <method name="ColourDisplay" oldname="wxColourDisplay" type="bool" overloaded="no">
      <autodoc>ColourDisplay() -&gt; bool</autodoc>
    </method>
    <method name="DisplayDepth" oldname="wxDisplayDepth" type="int" overloaded="no">
      <autodoc>DisplayDepth() -&gt; int</autodoc>
    </method>
    <method name="GetDisplayDepth" oldname="wxGetDisplayDepth" type="int" overloaded="no">
      <autodoc>GetDisplayDepth() -&gt; int</autodoc>
    </method>
    <method name="DisplaySize" oldname="wxDisplaySize" type="" overloaded="no">
      <autodoc>DisplaySize() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="int" default=""/>
        <param name="OUTPUT" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDisplaySize" oldname="wxGetDisplaySize" type="Size" overloaded="no">
      <autodoc>GetDisplaySize() -&gt; Size</autodoc>
    </method>
    <method name="DisplaySizeMM" oldname="wxDisplaySizeMM" type="" overloaded="no">
      <autodoc>DisplaySizeMM() -&gt; (width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="int" default=""/>
        <param name="OUTPUT" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetDisplaySizeMM" oldname="wxGetDisplaySizeMM" type="Size" overloaded="no">
      <autodoc>GetDisplaySizeMM() -&gt; Size</autodoc>
    </method>
    <method name="ClientDisplayRect" oldname="wxClientDisplayRect" type="" overloaded="no">
      <autodoc>ClientDisplayRect() -&gt; (x, y, width, height)</autodoc>
      <paramlist>
        <param name="OUTPUT" type="int" default=""/>
        <param name="OUTPUT" type="int" default=""/>
        <param name="OUTPUT" type="int" default=""/>
        <param name="OUTPUT" type="int" default=""/>
      </paramlist>
    </method>
    <method name="GetClientDisplayRect" oldname="wxGetClientDisplayRect" type="Rect" overloaded="no">
      <autodoc>GetClientDisplayRect() -&gt; Rect</autodoc>
    </method>
    <method name="SetCursor" oldname="wxSetCursor" type="" overloaded="no">
      <autodoc>SetCursor(Cursor cursor)</autodoc>
      <paramlist>
        <param name="cursor" type="Cursor" default=""/>
      </paramlist>
    </method>
    <method name="BeginBusyCursor" oldname="wxBeginBusyCursor" type="" overloaded="no">
      <autodoc>BeginBusyCursor(Cursor cursor=wxHOURGLASS_CURSOR)</autodoc>
      <paramlist>
        <param name="cursor" type="Cursor" default="wxHOURGLASS_CURSOR"/>
      </paramlist>
    </method>
    <method name="GetActiveWindow" oldname="wxGetActiveWindow" type="Window" overloaded="no">
      <autodoc>GetActiveWindow() -&gt; Window</autodoc>
    </method>
    <method name="GenericFindWindowAtPoint" oldname="wxGenericFindWindowAtPoint" type="Window" overloaded="no">
      <autodoc>GenericFindWindowAtPoint(Point pt) -&gt; Window</autodoc>
      <paramlist>
        <param name="pt" type="Point" default=""/>
      </paramlist>
    </method>
    <method name="FindWindowAtPoint" oldname="wxFindWindowAtPoint" type="Window" overloaded="no">
      <autodoc>FindWindowAtPoint(Point pt) -&gt; Window</autodoc>
      <paramlist>
        <param name="pt" type="Point" default=""/>
      </paramlist>
    </method>
    <method name="GetTopLevelParent" oldname="wxGetTopLevelParent" type="Window" overloaded="no">
      <autodoc>GetTopLevelParent(Window win) -&gt; Window</autodoc>
      <paramlist>
        <param name="win" type="Window" default=""/>
      </paramlist>
    </method>
    <method name="GetKeyState" oldname="wxGetKeyState" type="bool" overloaded="no">
      <autodoc>GetKeyState(int key) -&gt; bool</autodoc>
      <paramlist>
        <param name="key" type="wxKeyCode" default=""/>
      </paramlist>
    </method>
    <method name="WakeUpMainThread" oldname="wxWakeUpMainThread" type="" overloaded="no">
      <autodoc>WakeUpMainThread()</autodoc>
    </method>
    <method name="MutexGuiEnter" oldname="wxMutexGuiEnter" type="" overloaded="no">
      <autodoc>MutexGuiEnter()</autodoc>
    </method>
    <method name="MutexGuiLeave" oldname="wxMutexGuiLeave" type="" overloaded="no">
      <autodoc>MutexGuiLeave()</autodoc>
    </method>
    <class name="MutexGuiLocker" oldname="wxMutexGuiLocker" module="misc">
      <constructor name="MutexGuiLocker" overloaded="no">
        <autodoc>__init__() -&gt; MutexGuiLocker</autodoc>
      </constructor>
      <destructor name="~wxMutexGuiLocker" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <method name="Thread_IsMain" oldname="wxThread_IsMain" type="bool" overloaded="no">
      <autodoc>Thread_IsMain() -&gt; bool</autodoc>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ToolTip" oldname="wxToolTip" module="misc">
      <baseclass name="Object"/>
      <constructor name="ToolTip" overloaded="no">
        <autodoc>__init__(String tip) -&gt; ToolTip</autodoc>
        <paramlist>
          <param name="tip" type="String" default=""/>
        </paramlist>
      </constructor>
      <method name="SetTip" type="" overloaded="no">
        <autodoc>SetTip(String tip)</autodoc>
        <paramlist>
          <param name="tip" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTip" type="String" overloaded="no">
        <autodoc>GetTip() -&gt; String</autodoc>
      </method>
      <method name="GetWindow" type="Window" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
      <staticmethod name="Enable" type="" overloaded="no">
        <autodoc>Enable(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="SetDelay" type="" overloaded="no">
        <autodoc>SetDelay(long milliseconds)</autodoc>
        <paramlist>
          <param name="milliseconds" type="long" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <class name="Caret" oldname="wxCaret" module="misc">
      <constructor name="Caret" overloaded="no">
        <autodoc>__init__(Window window, Size size) -&gt; Caret</autodoc>
        <paramlist>
          <param name="window" type="Window" default=""/>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxCaret" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="IsVisible" type="bool" overloaded="no">
        <autodoc>IsVisible() -&gt; bool</autodoc>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="GetPositionTuple" type="" overloaded="no">
        <autodoc>GetPositionTuple() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize() -&gt; Size</autodoc>
      </method>
      <method name="GetSizeTuple" type="" overloaded="no">
        <autodoc>GetSizeTuple() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetWindow" type="Window" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
      <method name="MoveXY" type="" overloaded="no">
        <autodoc>MoveXY(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Move" type="" overloaded="no">
        <autodoc>Move(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetSizeWH" type="" overloaded="no">
        <autodoc>SetSizeWH(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="Show" type="" overloaded="no">
        <autodoc>Show(int show=True)</autodoc>
        <paramlist>
          <param name="show" type="int" default="True"/>
        </paramlist>
      </method>
      <method name="Hide" type="" overloaded="no">
        <autodoc>Hide()</autodoc>
      </method>
    </class>
    <method name="Caret_GetBlinkTime" oldname="wxCaret_GetBlinkTime" type="int" overloaded="no">
      <autodoc>Caret_GetBlinkTime() -&gt; int</autodoc>
    </method>
    <method name="Caret_SetBlinkTime" oldname="wxCaret_SetBlinkTime" type="" overloaded="no">
      <autodoc>Caret_SetBlinkTime(int milliseconds)</autodoc>
      <paramlist>
        <param name="milliseconds" type="int" default=""/>
      </paramlist>
    </method>
    <class name="BusyCursor" oldname="wxBusyCursor" module="misc">
      <constructor name="BusyCursor" overloaded="no">
        <autodoc>__init__(Cursor cursor=wxHOURGLASS_CURSOR) -&gt; BusyCursor</autodoc>
        <paramlist>
          <param name="cursor" type="Cursor" default="wxHOURGLASS_CURSOR"/>
        </paramlist>
      </constructor>
      <destructor name="~wxBusyCursor" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <class name="WindowDisabler" oldname="wxWindowDisabler" module="misc">
      <constructor name="WindowDisabler" overloaded="no">
        <autodoc>__init__(Window winToSkip=None) -&gt; WindowDisabler</autodoc>
        <paramlist>
          <param name="winToSkip" type="Window" default="NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxWindowDisabler" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <class name="BusyInfo" oldname="wxBusyInfo" module="misc">
      <baseclass name="Object"/>
      <constructor name="BusyInfo" overloaded="no">
        <autodoc>__init__(String message) -&gt; BusyInfo</autodoc>
        <paramlist>
          <param name="message" type="String" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxBusyInfo" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <class name="StopWatch" oldname="wxStopWatch" module="misc">
      <constructor name="StopWatch" overloaded="no">
        <autodoc>__init__() -&gt; StopWatch</autodoc>
      </constructor>
      <method name="Start" type="" overloaded="no">
        <autodoc>Start(long t0=0)</autodoc>
        <paramlist>
          <param name="t0" type="long" default="0"/>
        </paramlist>
      </method>
      <method name="Pause" type="" overloaded="no">
        <autodoc>Pause()</autodoc>
      </method>
      <method name="Resume" type="" overloaded="no">
        <autodoc>Resume()</autodoc>
      </method>
      <method name="Time" type="long" overloaded="no">
        <autodoc>Time() -&gt; long</autodoc>
      </method>
    </class>
    <class name="FileHistory" oldname="wxFileHistory" module="misc">
      <baseclass name="Object"/>
      <constructor name="FileHistory" overloaded="no">
        <autodoc>__init__(int maxFiles=9) -&gt; FileHistory</autodoc>
        <paramlist>
          <param name="maxFiles" type="int" default="9"/>
        </paramlist>
      </constructor>
      <destructor name="~wxFileHistory" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="AddFileToHistory" type="" overloaded="no">
        <autodoc>AddFileToHistory(String file)</autodoc>
        <paramlist>
          <param name="file" type="String" default=""/>
        </paramlist>
      </method>
      <method name="RemoveFileFromHistory" type="" overloaded="no">
        <autodoc>RemoveFileFromHistory(int i)</autodoc>
        <paramlist>
          <param name="i" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMaxFiles" type="int" overloaded="no">
        <autodoc>GetMaxFiles() -&gt; int</autodoc>
      </method>
      <method name="UseMenu" type="" overloaded="no">
        <autodoc>UseMenu(Menu menu)</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default=""/>
        </paramlist>
      </method>
      <method name="RemoveMenu" type="" overloaded="no">
        <autodoc>RemoveMenu(Menu menu)</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default=""/>
        </paramlist>
      </method>
      <method name="Load" type="" overloaded="no">
        <autodoc>Load(ConfigBase config)</autodoc>
        <paramlist>
          <param name="config" type="wxConfigBase" default=""/>
        </paramlist>
      </method>
      <method name="Save" type="" overloaded="no">
        <autodoc>Save(ConfigBase config)</autodoc>
        <paramlist>
          <param name="config" type="wxConfigBase" default=""/>
        </paramlist>
      </method>
      <method name="AddFilesToMenu" type="" overloaded="no">
        <autodoc>AddFilesToMenu()</autodoc>
      </method>
      <method name="AddFilesToThisMenu" type="" overloaded="no">
        <autodoc>AddFilesToThisMenu(Menu menu)</autodoc>
        <paramlist>
          <param name="menu" type="Menu" default=""/>
        </paramlist>
      </method>
      <method name="GetHistoryFile" type="String" overloaded="no">
        <autodoc>GetHistoryFile(int i) -&gt; String</autodoc>
        <paramlist>
          <param name="i" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="int" overloaded="no">
        <autodoc>GetCount() -&gt; int</autodoc>
      </method>
    </class>
    <class name="SingleInstanceChecker" oldname="wxSingleInstanceChecker" module="misc">
      <constructor name="SingleInstanceChecker" overloaded="no">
        <autodoc>__init__(String name, String path=EmptyString) -&gt; SingleInstanceChecker</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <constructor name="PreSingleInstanceChecker" overloaded="no">
        <autodoc>PreSingleInstanceChecker() -&gt; SingleInstanceChecker</autodoc>
      </constructor>
      <destructor name="~wxSingleInstanceChecker" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(String name, String path=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="IsAnotherRunning" type="bool" overloaded="no">
        <autodoc>IsAnotherRunning() -&gt; bool</autodoc>
      </method>
    </class>
    <method name="DrawWindowOnDC" oldname="wxDrawWindowOnDC" type="" overloaded="no">
      <autodoc>DrawWindowOnDC(Window window, DC dc, int method)</autodoc>
      <paramlist>
        <param name="window" type="Window" default=""/>
        <param name="dc" type="DC" default=""/>
        <param name="method" type="int" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="TipProvider" oldname="wxTipProvider" module="misc">
      <destructor name="~wxTipProvider" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetTip" type="String" overloaded="no">
        <autodoc>GetTip() -&gt; String</autodoc>
      </method>
      <method name="GetCurrentTip" type="size_t" overloaded="no">
        <autodoc>GetCurrentTip() -&gt; size_t</autodoc>
      </method>
      <method name="PreprocessTip" type="String" overloaded="no">
        <autodoc>PreprocessTip(String tip) -&gt; String</autodoc>
        <paramlist>
          <param name="tip" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyTipProvider" oldname="wxPyTipProvider" module="misc">
      <baseclass name="TipProvider"/>
      <constructor name="PyTipProvider" overloaded="no">
        <autodoc>__init__(size_t currentTip) -&gt; PyTipProvider</autodoc>
        <paramlist>
          <param name="currentTip" type="size_t" default=""/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <method name="ShowTip" oldname="wxShowTip" type="bool" overloaded="no">
      <autodoc>ShowTip(Window parent, TipProvider tipProvider, bool showAtStartup=True) -&gt; bool</autodoc>
      <paramlist>
        <param name="parent" type="Window" default=""/>
        <param name="tipProvider" type="TipProvider" default=""/>
        <param name="showAtStartup" type="bool" default="True"/>
      </paramlist>
    </method>
    <method name="CreateFileTipProvider" oldname="wxCreateFileTipProvider" type="TipProvider" overloaded="no">
      <autodoc>CreateFileTipProvider(String filename, size_t currentTip) -&gt; TipProvider</autodoc>
      <paramlist>
        <param name="filename" type="String" default=""/>
        <param name="currentTip" type="size_t" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Timer" oldname="wxPyTimer" module="misc">
      <baseclass name="EvtHandler"/>
      <constructor name="wxPyTimer" overloaded="no">
        <autodoc>__init__(EvtHandler owner=None, int id=-1) -&gt; Timer</autodoc>
        <paramlist>
          <param name="owner" type="EvtHandler" default="NULL"/>
          <param name="id" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPyTimer" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class, int incref=1)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
          <param name="incref" type="int" default="1"/>
        </paramlist>
      </method>
      <method name="SetOwner" type="" overloaded="no">
        <autodoc>SetOwner(EvtHandler owner, int id=-1)</autodoc>
        <paramlist>
          <param name="owner" type="EvtHandler" default=""/>
          <param name="id" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="Start" type="bool" overloaded="no">
        <autodoc>Start(int milliseconds=-1, bool oneShot=False) -&gt; bool</autodoc>
        <paramlist>
          <param name="milliseconds" type="int" default="-1"/>
          <param name="oneShot" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="Stop" type="" overloaded="no">
        <autodoc>Stop()</autodoc>
      </method>
      <method name="IsRunning" type="bool" overloaded="no">
        <autodoc>IsRunning() -&gt; bool</autodoc>
      </method>
      <method name="GetInterval" type="int" overloaded="no">
        <autodoc>GetInterval() -&gt; int</autodoc>
      </method>
      <method name="IsOneShot" type="bool" overloaded="no">
        <autodoc>IsOneShot() -&gt; bool</autodoc>
      </method>
      <method name="GetId" type="int" overloaded="no">
        <autodoc>GetId() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
# For backwards compatibility with 2.4
class PyTimer(Timer):
    def __init__(self, notify):
        Timer.__init__(self)
        self.notify = notify

    def Notify(self):
        if self.notify:
            self.notify()


EVT_TIMER = wx.PyEventBinder( wxEVT_TIMER, 1 )

</pythoncode>
    <class name="TimerEvent" oldname="wxTimerEvent" module="misc">
      <baseclass name="Event"/>
      <constructor name="TimerEvent" overloaded="no">
        <autodoc>__init__(int timerid=0, int interval=0) -&gt; TimerEvent</autodoc>
        <paramlist>
          <param name="timerid" type="int" default="0"/>
          <param name="interval" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetInterval" type="int" overloaded="no">
        <autodoc>GetInterval() -&gt; int</autodoc>
      </method>
    </class>
    <class name="TimerRunner" oldname="wxTimerRunner" module="misc">
      <constructor name="TimerRunner" overloaded="yes">
        <paramlist>
          <param name="timer" type="wxTimer" default=""/>
        </paramlist>
      </constructor>
      <constructor name="TimerRunner" overloaded="yes">
        <autodoc>__init__(wxTimer timer) -&gt; TimerRunner
__init__(wxTimer timer, int milli, bool oneShot=False) -&gt; TimerRunner</autodoc>
        <paramlist>
          <param name="timer" type="wxTimer" default=""/>
          <param name="milli" type="int" default=""/>
          <param name="oneShot" type="bool" default="False"/>
        </paramlist>
      </constructor>
      <destructor name="~wxTimerRunner" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Start" type="" overloaded="no">
        <autodoc>Start(int milli, bool oneShot=False)</autodoc>
        <paramlist>
          <param name="milli" type="int" default=""/>
          <param name="oneShot" type="bool" default="False"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Log" oldname="wxLog" module="misc">
      <constructor name="Log" overloaded="no">
        <autodoc>__init__() -&gt; Log</autodoc>
      </constructor>
      <staticmethod name="IsEnabled" type="bool" overloaded="no">
        <autodoc>IsEnabled() -&gt; bool</autodoc>
      </staticmethod>
      <staticmethod name="EnableLogging" type="bool" overloaded="no">
        <autodoc>EnableLogging(bool doIt=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="doIt" type="bool" default="True"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="OnLog" type="" overloaded="no">
        <autodoc>OnLog(wxLogLevel level, wxChar szString, time_t t)</autodoc>
        <paramlist>
          <param name="level" type="wxLogLevel" default=""/>
          <param name="szString" type="wxChar" default=""/>
          <param name="t" type="time_t" default=""/>
        </paramlist>
      </staticmethod>
      <method name="Flush" type="" overloaded="no">
        <autodoc>Flush()</autodoc>
      </method>
      <staticmethod name="FlushActive" type="" overloaded="no">
        <autodoc>FlushActive()</autodoc>
      </staticmethod>
      <staticmethod name="GetActiveTarget" type="Log" overloaded="no">
        <autodoc>GetActiveTarget() -&gt; Log</autodoc>
      </staticmethod>
      <staticmethod name="SetActiveTarget" type="Log" overloaded="no">
        <autodoc>SetActiveTarget(Log pLogger) -&gt; Log</autodoc>
        <paramlist>
          <param name="pLogger" type="Log" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Suspend" type="" overloaded="no">
        <autodoc>Suspend()</autodoc>
      </staticmethod>
      <staticmethod name="Resume" type="" overloaded="no">
        <autodoc>Resume()</autodoc>
      </staticmethod>
      <staticmethod name="SetVerbose" type="" overloaded="no">
        <autodoc>SetVerbose(bool bVerbose=True)</autodoc>
        <paramlist>
          <param name="bVerbose" type="bool" default="True"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="SetLogLevel" type="" overloaded="no">
        <autodoc>SetLogLevel(wxLogLevel logLevel)</autodoc>
        <paramlist>
          <param name="logLevel" type="wxLogLevel" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="DontCreateOnDemand" type="" overloaded="no">
        <autodoc>DontCreateOnDemand()</autodoc>
      </staticmethod>
      <staticmethod name="SetTraceMask" type="" overloaded="no">
        <autodoc>SetTraceMask(wxTraceMask ulMask)</autodoc>
        <paramlist>
          <param name="ulMask" type="wxTraceMask" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="AddTraceMask" type="" overloaded="no">
        <autodoc>AddTraceMask(String str)</autodoc>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="RemoveTraceMask" type="" overloaded="no">
        <autodoc>RemoveTraceMask(String str)</autodoc>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="ClearTraceMasks" type="" overloaded="no">
        <autodoc>ClearTraceMasks()</autodoc>
      </staticmethod>
      <staticmethod name="GetTraceMasks" type="wxArrayString" overloaded="no">
        <autodoc>GetTraceMasks() -&gt; wxArrayString</autodoc>
      </staticmethod>
      <staticmethod name="SetTimestamp" type="" overloaded="no">
        <autodoc>SetTimestamp(wxChar ts)</autodoc>
        <paramlist>
          <param name="ts" type="wxChar" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetVerbose" type="bool" overloaded="no">
        <autodoc>GetVerbose() -&gt; bool</autodoc>
      </staticmethod>
      <staticmethod name="GetTraceMask" type="wxTraceMask" overloaded="no">
        <autodoc>GetTraceMask() -&gt; wxTraceMask</autodoc>
      </staticmethod>
      <staticmethod name="IsAllowedTraceMask" type="bool" overloaded="no">
        <autodoc>IsAllowedTraceMask(wxChar mask) -&gt; bool</autodoc>
        <paramlist>
          <param name="mask" type="wxChar" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetLogLevel" type="wxLogLevel" overloaded="no">
        <autodoc>GetLogLevel() -&gt; wxLogLevel</autodoc>
      </staticmethod>
      <staticmethod name="GetTimestamp" type="wxChar" overloaded="no">
        <autodoc>GetTimestamp() -&gt; wxChar</autodoc>
      </staticmethod>
      <staticmethod name="TimeStamp" type="String" overloaded="no">
        <autodoc>TimeStamp() -&gt; String</autodoc>
      </staticmethod>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
      </method>
    </class>
    <class name="LogStderr" oldname="wxLogStderr" module="misc">
      <baseclass name="Log"/>
      <constructor name="LogStderr" overloaded="no">
        <autodoc>__init__() -&gt; LogStderr</autodoc>
      </constructor>
    </class>
    <class name="LogTextCtrl" oldname="wxLogTextCtrl" module="misc">
      <baseclass name="Log"/>
      <constructor name="LogTextCtrl" overloaded="no">
        <autodoc>__init__(wxTextCtrl pTextCtrl) -&gt; LogTextCtrl</autodoc>
        <paramlist>
          <param name="pTextCtrl" type="TextCtrl" default=""/>
        </paramlist>
      </constructor>
    </class>
    <class name="LogGui" oldname="wxLogGui" module="misc">
      <baseclass name="Log"/>
      <constructor name="LogGui" overloaded="no">
        <autodoc>__init__() -&gt; LogGui</autodoc>
      </constructor>
    </class>
    <class name="LogWindow" oldname="wxLogWindow" module="misc">
      <baseclass name="Log"/>
      <constructor name="LogWindow" overloaded="no">
        <autodoc>__init__(wxFrame pParent, String szTitle, bool bShow=True, bool bPassToOld=True) -&gt; LogWindow</autodoc>
        <paramlist>
          <param name="pParent" type="Frame" default=""/>
          <param name="szTitle" type="String" default=""/>
          <param name="bShow" type="bool" default="True"/>
          <param name="bPassToOld" type="bool" default="True"/>
        </paramlist>
      </constructor>
      <method name="Show" type="" overloaded="no">
        <autodoc>Show(bool bShow=True)</autodoc>
        <paramlist>
          <param name="bShow" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetFrame" type="Frame" overloaded="no">
        <autodoc>GetFrame() -&gt; wxFrame</autodoc>
      </method>
      <method name="GetOldLog" type="Log" overloaded="no">
        <autodoc>GetOldLog() -&gt; Log</autodoc>
      </method>
      <method name="IsPassingMessages" type="bool" overloaded="no">
        <autodoc>IsPassingMessages() -&gt; bool</autodoc>
      </method>
      <method name="PassMessages" type="" overloaded="no">
        <autodoc>PassMessages(bool bDoPass)</autodoc>
        <paramlist>
          <param name="bDoPass" type="bool" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="LogChain" oldname="wxLogChain" module="misc">
      <baseclass name="Log"/>
      <constructor name="LogChain" overloaded="no">
        <autodoc>__init__(Log logger) -&gt; LogChain</autodoc>
        <paramlist>
          <param name="logger" type="Log" default=""/>
        </paramlist>
      </constructor>
      <method name="SetLog" type="" overloaded="no">
        <autodoc>SetLog(Log logger)</autodoc>
        <paramlist>
          <param name="logger" type="Log" default=""/>
        </paramlist>
      </method>
      <method name="PassMessages" type="" overloaded="no">
        <autodoc>PassMessages(bool bDoPass)</autodoc>
        <paramlist>
          <param name="bDoPass" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsPassingMessages" type="bool" overloaded="no">
        <autodoc>IsPassingMessages() -&gt; bool</autodoc>
      </method>
      <method name="GetOldLog" type="Log" overloaded="no">
        <autodoc>GetOldLog() -&gt; Log</autodoc>
      </method>
    </class>
    <method name="SysErrorCode" oldname="wxSysErrorCode" type="unsigned long" overloaded="no">
      <autodoc>SysErrorCode() -&gt; unsigned long</autodoc>
    </method>
    <method name="SysErrorMsg" oldname="wxSysErrorMsg" type="String" overloaded="no">
      <autodoc>SysErrorMsg(unsigned long nErrCode=0) -&gt; String</autodoc>
      <paramlist>
        <param name="nErrCode" type="unsigned long" default="0"/>
      </paramlist>
    </method>
    <method name="LogFatalError" oldname="wxLogFatalError" type="" overloaded="no">
      <autodoc>LogFatalError(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogError" oldname="wxLogError" type="" overloaded="no">
      <autodoc>LogError(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogWarning" oldname="wxLogWarning" type="" overloaded="no">
      <autodoc>LogWarning(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogMessage" oldname="wxLogMessage" type="" overloaded="no">
      <autodoc>LogMessage(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogInfo" oldname="wxLogInfo" type="" overloaded="no">
      <autodoc>LogInfo(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogDebug" oldname="wxLogDebug" type="" overloaded="no">
      <autodoc>LogDebug(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogVerbose" oldname="wxLogVerbose" type="" overloaded="no">
      <autodoc>LogVerbose(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogStatus" oldname="wxLogStatus" type="" overloaded="no">
      <autodoc>LogStatus(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogStatusFrame" oldname="wxLogStatus" type="" overloaded="no">
      <autodoc>LogStatusFrame(wxFrame pFrame, String msg)</autodoc>
      <paramlist>
        <param name="pFrame" type="Frame" default=""/>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogSysError" oldname="wxLogSysError" type="" overloaded="no">
      <autodoc>LogSysError(String msg)</autodoc>
      <paramlist>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogTrace" oldname="wxLogTrace" type="" overloaded="yes">
      <paramlist>
        <param name="mask" type="unsigned long" default=""/>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogTrace" oldname="wxLogTrace" type="" overloaded="yes">
      <autodoc>LogTrace(unsigned long mask, String msg)
LogTrace(String mask, String msg)</autodoc>
      <paramlist>
        <param name="mask" type="String" default=""/>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="LogGeneric" oldname="wxLogGeneric" type="" overloaded="no">
      <autodoc>LogGeneric(unsigned long level, String msg)</autodoc>
      <paramlist>
        <param name="level" type="unsigned long" default=""/>
        <param name="msg" type="String" default=""/>
      </paramlist>
    </method>
    <method name="SafeShowMessage" oldname="wxSafeShowMessage" type="" overloaded="no">
      <autodoc>SafeShowMessage(String title, String text)</autodoc>
      <paramlist>
        <param name="title" type="String" default=""/>
        <param name="text" type="String" default=""/>
      </paramlist>
    </method>
    <class name="LogNull" oldname="wxLogNull" module="misc">
      <constructor name="LogNull" overloaded="no">
        <autodoc>__init__() -&gt; LogNull</autodoc>
      </constructor>
      <destructor name="~wxLogNull" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <class name="PyLog" oldname="wxPyLog" module="misc">
      <baseclass name="Log"/>
      <constructor name="PyLog" overloaded="no">
        <autodoc>__init__() -&gt; PyLog</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Process" oldname="wxPyProcess" module="misc">
      <baseclass name="EvtHandler"/>
      <constructor name="wxPyProcess" overloaded="no">
        <autodoc>__init__(EvtHandler parent=None, int id=-1) -&gt; Process</autodoc>
        <paramlist>
          <param name="parent" type="EvtHandler" default="NULL"/>
          <param name="id" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <staticmethod name="Kill" type="wxKillError" overloaded="no">
        <autodoc>Kill(int pid, int sig=SIGTERM) -&gt; int</autodoc>
        <paramlist>
          <param name="pid" type="int" default=""/>
          <param name="sig" type="wxSignal" default="wxSIGTERM"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Exists" type="bool" overloaded="no">
        <autodoc>Exists(int pid) -&gt; bool</autodoc>
        <paramlist>
          <param name="pid" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Open" type="Process" overloaded="no">
        <autodoc>Open(String cmd, int flags=EXEC_ASYNC) -&gt; Process</autodoc>
        <paramlist>
          <param name="cmd" type="String" default=""/>
          <param name="flags" type="int" default="wxEXEC_ASYNC"/>
        </paramlist>
      </staticmethod>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_OnTerminate" type="" overloaded="no">
        <autodoc>base_OnTerminate(int pid, int status)</autodoc>
        <paramlist>
          <param name="pid" type="int" default=""/>
          <param name="status" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Redirect" type="" overloaded="no">
        <autodoc>Redirect()</autodoc>
      </method>
      <method name="IsRedirected" type="bool" overloaded="no">
        <autodoc>IsRedirected() -&gt; bool</autodoc>
      </method>
      <method name="Detach" type="" overloaded="no">
        <autodoc>Detach()</autodoc>
      </method>
      <method name="GetInputStream" type="wxInputStream" overloaded="no">
        <autodoc>GetInputStream() -&gt; InputStream</autodoc>
      </method>
      <method name="GetErrorStream" type="wxInputStream" overloaded="no">
        <autodoc>GetErrorStream() -&gt; InputStream</autodoc>
      </method>
      <method name="GetOutputStream" type="OutputStream" overloaded="no">
        <autodoc>GetOutputStream() -&gt; OutputStream</autodoc>
      </method>
      <method name="CloseOutput" type="" overloaded="no">
        <autodoc>CloseOutput()</autodoc>
      </method>
      <method name="IsInputOpened" type="bool" overloaded="no">
        <autodoc>IsInputOpened() -&gt; bool</autodoc>
      </method>
      <method name="IsInputAvailable" type="bool" overloaded="no">
        <autodoc>IsInputAvailable() -&gt; bool</autodoc>
      </method>
      <method name="IsErrorAvailable" type="bool" overloaded="no">
        <autodoc>IsErrorAvailable() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="ProcessEvent" oldname="wxProcessEvent" module="misc">
      <baseclass name="Event"/>
      <constructor name="ProcessEvent" overloaded="no">
        <autodoc>__init__(int id=0, int pid=0, int exitcode=0) -&gt; ProcessEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
          <param name="pid" type="int" default="0"/>
          <param name="exitcode" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="GetPid" type="int" overloaded="no">
        <autodoc>GetPid() -&gt; int</autodoc>
      </method>
      <method name="GetExitCode" type="int" overloaded="no">
        <autodoc>GetExitCode() -&gt; int</autodoc>
      </method>
      <property name="m_pid" type="int" readonly="no"/>
      <property name="m_exitcode" type="int" readonly="no"/>
    </class>
    <pythoncode>
EVT_END_PROCESS = wx.PyEventBinder( wxEVT_END_PROCESS, 1 )
</pythoncode>
    <method name="Execute" oldname="wxExecute" type="long" overloaded="no">
      <autodoc>Execute(String command, int flags=EXEC_ASYNC, Process process=None) -&gt; long</autodoc>
      <paramlist>
        <param name="command" type="String" default=""/>
        <param name="flags" type="int" default="wxEXEC_ASYNC"/>
        <param name="process" type="Process" default="NULL"/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Joystick" oldname="wxJoystick" module="misc">
      <constructor name="Joystick" overloaded="no">
        <autodoc>__init__(int joystick=JOYSTICK1) -&gt; Joystick</autodoc>
        <paramlist>
          <param name="joystick" type="int" default="wxJOYSTICK1"/>
        </paramlist>
      </constructor>
      <destructor name="~wxJoystick" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="GetZPosition" type="int" overloaded="no">
        <autodoc>GetZPosition() -&gt; int</autodoc>
      </method>
      <method name="GetButtonState" type="int" overloaded="no">
        <autodoc>GetButtonState() -&gt; int</autodoc>
      </method>
      <method name="GetPOVPosition" type="int" overloaded="no">
        <autodoc>GetPOVPosition() -&gt; int</autodoc>
      </method>
      <method name="GetPOVCTSPosition" type="int" overloaded="no">
        <autodoc>GetPOVCTSPosition() -&gt; int</autodoc>
      </method>
      <method name="GetRudderPosition" type="int" overloaded="no">
        <autodoc>GetRudderPosition() -&gt; int</autodoc>
      </method>
      <method name="GetUPosition" type="int" overloaded="no">
        <autodoc>GetUPosition() -&gt; int</autodoc>
      </method>
      <method name="GetVPosition" type="int" overloaded="no">
        <autodoc>GetVPosition() -&gt; int</autodoc>
      </method>
      <method name="GetMovementThreshold" type="int" overloaded="no">
        <autodoc>GetMovementThreshold() -&gt; int</autodoc>
      </method>
      <method name="SetMovementThreshold" type="" overloaded="no">
        <autodoc>SetMovementThreshold(int threshold)</autodoc>
        <paramlist>
          <param name="threshold" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="GetNumberJoysticks" type="int" overloaded="no">
        <autodoc>GetNumberJoysticks() -&gt; int</autodoc>
      </method>
      <method name="GetManufacturerId" type="int" overloaded="no">
        <autodoc>GetManufacturerId() -&gt; int</autodoc>
      </method>
      <method name="GetProductId" type="int" overloaded="no">
        <autodoc>GetProductId() -&gt; int</autodoc>
      </method>
      <method name="GetProductName" type="String" overloaded="no">
        <autodoc>GetProductName() -&gt; String</autodoc>
      </method>
      <method name="GetXMin" type="int" overloaded="no">
        <autodoc>GetXMin() -&gt; int</autodoc>
      </method>
      <method name="GetYMin" type="int" overloaded="no">
        <autodoc>GetYMin() -&gt; int</autodoc>
      </method>
      <method name="GetZMin" type="int" overloaded="no">
        <autodoc>GetZMin() -&gt; int</autodoc>
      </method>
      <method name="GetXMax" type="int" overloaded="no">
        <autodoc>GetXMax() -&gt; int</autodoc>
      </method>
      <method name="GetYMax" type="int" overloaded="no">
        <autodoc>GetYMax() -&gt; int</autodoc>
      </method>
      <method name="GetZMax" type="int" overloaded="no">
        <autodoc>GetZMax() -&gt; int</autodoc>
      </method>
      <method name="GetNumberButtons" type="int" overloaded="no">
        <autodoc>GetNumberButtons() -&gt; int</autodoc>
      </method>
      <method name="GetNumberAxes" type="int" overloaded="no">
        <autodoc>GetNumberAxes() -&gt; int</autodoc>
      </method>
      <method name="GetMaxButtons" type="int" overloaded="no">
        <autodoc>GetMaxButtons() -&gt; int</autodoc>
      </method>
      <method name="GetMaxAxes" type="int" overloaded="no">
        <autodoc>GetMaxAxes() -&gt; int</autodoc>
      </method>
      <method name="GetPollingMin" type="int" overloaded="no">
        <autodoc>GetPollingMin() -&gt; int</autodoc>
      </method>
      <method name="GetPollingMax" type="int" overloaded="no">
        <autodoc>GetPollingMax() -&gt; int</autodoc>
      </method>
      <method name="GetRudderMin" type="int" overloaded="no">
        <autodoc>GetRudderMin() -&gt; int</autodoc>
      </method>
      <method name="GetRudderMax" type="int" overloaded="no">
        <autodoc>GetRudderMax() -&gt; int</autodoc>
      </method>
      <method name="GetUMin" type="int" overloaded="no">
        <autodoc>GetUMin() -&gt; int</autodoc>
      </method>
      <method name="GetUMax" type="int" overloaded="no">
        <autodoc>GetUMax() -&gt; int</autodoc>
      </method>
      <method name="GetVMin" type="int" overloaded="no">
        <autodoc>GetVMin() -&gt; int</autodoc>
      </method>
      <method name="GetVMax" type="int" overloaded="no">
        <autodoc>GetVMax() -&gt; int</autodoc>
      </method>
      <method name="HasRudder" type="bool" overloaded="no">
        <autodoc>HasRudder() -&gt; bool</autodoc>
      </method>
      <method name="HasZ" type="bool" overloaded="no">
        <autodoc>HasZ() -&gt; bool</autodoc>
      </method>
      <method name="HasU" type="bool" overloaded="no">
        <autodoc>HasU() -&gt; bool</autodoc>
      </method>
      <method name="HasV" type="bool" overloaded="no">
        <autodoc>HasV() -&gt; bool</autodoc>
      </method>
      <method name="HasPOV" type="bool" overloaded="no">
        <autodoc>HasPOV() -&gt; bool</autodoc>
      </method>
      <method name="HasPOV4Dir" type="bool" overloaded="no">
        <autodoc>HasPOV4Dir() -&gt; bool</autodoc>
      </method>
      <method name="HasPOVCTS" type="bool" overloaded="no">
        <autodoc>HasPOVCTS() -&gt; bool</autodoc>
      </method>
      <method name="SetCapture" type="bool" overloaded="no">
        <autodoc>SetCapture(Window win, int pollingFreq=0) -&gt; bool</autodoc>
        <paramlist>
          <param name="win" type="Window" default=""/>
          <param name="pollingFreq" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="ReleaseCapture" type="bool" overloaded="no">
        <autodoc>ReleaseCapture() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="JoystickEvent" oldname="wxJoystickEvent" module="misc">
      <baseclass name="Event"/>
      <constructor name="JoystickEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, int state=0, int joystick=JOYSTICK1, 
    int change=0) -&gt; JoystickEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="state" type="int" default="0"/>
          <param name="joystick" type="int" default="wxJOYSTICK1"/>
          <param name="change" type="int" default="0"/>
        </paramlist>
      </constructor>
      <property name="m_pos" type="Point" readonly="no"/>
      <property name="m_zPosition" type="int" readonly="no"/>
      <property name="m_buttonChange" type="int" readonly="no"/>
      <property name="m_buttonState" type="int" readonly="no"/>
      <property name="m_joyStick" type="int" readonly="no"/>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="GetZPosition" type="int" overloaded="no">
        <autodoc>GetZPosition() -&gt; int</autodoc>
      </method>
      <method name="GetButtonState" type="int" overloaded="no">
        <autodoc>GetButtonState() -&gt; int</autodoc>
      </method>
      <method name="GetButtonChange" type="int" overloaded="no">
        <autodoc>GetButtonChange() -&gt; int</autodoc>
      </method>
      <method name="GetJoystick" type="int" overloaded="no">
        <autodoc>GetJoystick() -&gt; int</autodoc>
      </method>
      <method name="SetJoystick" type="" overloaded="no">
        <autodoc>SetJoystick(int stick)</autodoc>
        <paramlist>
          <param name="stick" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetButtonState" type="" overloaded="no">
        <autodoc>SetButtonState(int state)</autodoc>
        <paramlist>
          <param name="state" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetButtonChange" type="" overloaded="no">
        <autodoc>SetButtonChange(int change)</autodoc>
        <paramlist>
          <param name="change" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(Point pos)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetZPosition" type="" overloaded="no">
        <autodoc>SetZPosition(int zPos)</autodoc>
        <paramlist>
          <param name="zPos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsButton" type="bool" overloaded="no">
        <autodoc>IsButton() -&gt; bool</autodoc>
      </method>
      <method name="IsMove" type="bool" overloaded="no">
        <autodoc>IsMove() -&gt; bool</autodoc>
      </method>
      <method name="IsZMove" type="bool" overloaded="no">
        <autodoc>IsZMove() -&gt; bool</autodoc>
      </method>
      <method name="ButtonDown" type="bool" overloaded="no">
        <autodoc>ButtonDown(int but=JOY_BUTTON_ANY) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default="wxJOY_BUTTON_ANY"/>
        </paramlist>
      </method>
      <method name="ButtonUp" type="bool" overloaded="no">
        <autodoc>ButtonUp(int but=JOY_BUTTON_ANY) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default="wxJOY_BUTTON_ANY"/>
        </paramlist>
      </method>
      <method name="ButtonIsDown" type="bool" overloaded="no">
        <autodoc>ButtonIsDown(int but=JOY_BUTTON_ANY) -&gt; bool</autodoc>
        <paramlist>
          <param name="but" type="int" default="wxJOY_BUTTON_ANY"/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
EVT_JOY_BUTTON_DOWN = wx.PyEventBinder( wxEVT_JOY_BUTTON_DOWN )
EVT_JOY_BUTTON_UP = wx.PyEventBinder( wxEVT_JOY_BUTTON_UP )
EVT_JOY_MOVE = wx.PyEventBinder( wxEVT_JOY_MOVE )
EVT_JOY_ZMOVE = wx.PyEventBinder( wxEVT_JOY_ZMOVE )

EVT_JOYSTICK_EVENTS = wx.PyEventBinder([ wxEVT_JOY_BUTTON_DOWN,
                                        wxEVT_JOY_BUTTON_UP, 
                                        wxEVT_JOY_MOVE, 
                                        wxEVT_JOY_ZMOVE,
                                        ])

</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Sound" oldname="wxSound" module="misc">
      <constructor name="Sound" overloaded="yes"/>
      <constructor name="Sound" overloaded="yes">
        <paramlist>
          <param name="fileName" type="String" default=""/>
          <param name="isResource" type="bool" default="false"/>
        </paramlist>
      </constructor>
      <constructor name="Sound" overloaded="yes">
        <autodoc>__init__() -&gt; Sound
__init__(String fileName, bool isResource=false) -&gt; Sound
__init__(int size, wxByte data) -&gt; Sound</autodoc>
        <paramlist>
          <param name="size" type="int" default=""/>
          <param name="data" type="wxByte" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxSound" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Create" type="bool" overloaded="yes">
        <paramlist>
          <param name="fileName" type="String" default=""/>
          <param name="isResource" type="bool" default="false"/>
        </paramlist>
      </method>
      <method name="Create" type="bool" overloaded="yes">
        <autodoc>Create(String fileName, bool isResource=false) -&gt; bool
Create(int size, wxByte data) -&gt; bool</autodoc>
        <paramlist>
          <param name="size" type="int" default=""/>
          <param name="data" type="wxByte" default=""/>
        </paramlist>
      </method>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="Play" type="bool" overloaded="no">
        <autodoc>Play(unsigned int flags=SOUND_ASYNC) -&gt; bool</autodoc>
        <paramlist>
          <param name="flags" type="unsigned int" default="wxSOUND_ASYNC"/>
        </paramlist>
      </method>
      <staticmethod name="PlaySound" type="bool" overloaded="no">
        <autodoc>PlaySound(String filename, unsigned int flags=SOUND_ASYNC) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="flags" type="unsigned int" default="wxSOUND_ASYNC"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Stop" type="" overloaded="no">
        <autodoc>Stop()</autodoc>
      </staticmethod>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="FileTypeInfo" oldname="wxFileTypeInfo" module="misc">
      <constructor name="FileTypeInfo" overloaded="no">
        <autodoc>__init__(String mimeType, String openCmd, String printCmd, String desc) -&gt; FileTypeInfo</autodoc>
        <paramlist>
          <param name="mimeType" type="String" default=""/>
          <param name="openCmd" type="String" default=""/>
          <param name="printCmd" type="String" default=""/>
          <param name="desc" type="String" default=""/>
        </paramlist>
      </constructor>
      <constructor name="FileTypeInfoSequence" overloaded="no">
        <autodoc>FileTypeInfoSequence(wxArrayString sArray) -&gt; FileTypeInfo</autodoc>
        <paramlist>
          <param name="sArray" type="wxArrayString" default=""/>
        </paramlist>
      </constructor>
      <constructor name="NullFileTypeInfo" overloaded="no">
        <autodoc>NullFileTypeInfo() -&gt; FileTypeInfo</autodoc>
      </constructor>
      <method name="IsValid" type="bool" overloaded="no">
        <autodoc>IsValid() -&gt; bool</autodoc>
      </method>
      <method name="SetIcon" type="" overloaded="no">
        <autodoc>SetIcon(String iconFile, int iconIndex=0)</autodoc>
        <paramlist>
          <param name="iconFile" type="String" default=""/>
          <param name="iconIndex" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetShortDesc" type="" overloaded="no">
        <autodoc>SetShortDesc(String shortDesc)</autodoc>
        <paramlist>
          <param name="shortDesc" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetMimeType" type="String" overloaded="no">
        <autodoc>GetMimeType() -&gt; String</autodoc>
      </method>
      <method name="GetOpenCommand" type="String" overloaded="no">
        <autodoc>GetOpenCommand() -&gt; String</autodoc>
      </method>
      <method name="GetPrintCommand" type="String" overloaded="no">
        <autodoc>GetPrintCommand() -&gt; String</autodoc>
      </method>
      <method name="GetShortDesc" type="String" overloaded="no">
        <autodoc>GetShortDesc() -&gt; String</autodoc>
      </method>
      <method name="GetDescription" type="String" overloaded="no">
        <autodoc>GetDescription() -&gt; String</autodoc>
      </method>
      <method name="GetExtensions" type="wxArrayString" overloaded="no">
        <autodoc>GetExtensions() -&gt; wxArrayString</autodoc>
      </method>
      <method name="GetExtensionsCount" type="int" overloaded="no">
        <autodoc>GetExtensionsCount() -&gt; int</autodoc>
      </method>
      <method name="GetIconFile" type="String" overloaded="no">
        <autodoc>GetIconFile() -&gt; String</autodoc>
      </method>
      <method name="GetIconIndex" type="int" overloaded="no">
        <autodoc>GetIconIndex() -&gt; int</autodoc>
      </method>
    </class>
    <class name="FileType" oldname="wxFileType" module="misc">
      <constructor name="FileType" overloaded="no">
        <autodoc>__init__(FileTypeInfo ftInfo) -&gt; FileType</autodoc>
        <paramlist>
          <param name="ftInfo" type="FileTypeInfo" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxFileType" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetMimeType" type="PyObject" overloaded="no">
        <autodoc>GetMimeType() -&gt; PyObject</autodoc>
      </method>
      <method name="GetMimeTypes" type="PyObject" overloaded="no">
        <autodoc>GetMimeTypes() -&gt; PyObject</autodoc>
      </method>
      <method name="GetExtensions" type="PyObject" overloaded="no">
        <autodoc>GetExtensions() -&gt; PyObject</autodoc>
      </method>
      <method name="GetIcon" type="Icon" overloaded="no">
        <autodoc>GetIcon() -&gt; Icon</autodoc>
      </method>
      <method name="GetIconInfo" type="PyObject" overloaded="no">
        <autodoc>GetIconInfo() -&gt; PyObject</autodoc>
      </method>
      <method name="GetDescription" type="PyObject" overloaded="no">
        <autodoc>GetDescription() -&gt; PyObject</autodoc>
      </method>
      <method name="GetOpenCommand" type="PyObject" overloaded="no">
        <autodoc>GetOpenCommand(String filename, String mimetype=EmptyString) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="mimetype" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="GetPrintCommand" type="PyObject" overloaded="no">
        <autodoc>GetPrintCommand(String filename, String mimetype=EmptyString) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="mimetype" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="GetAllCommands" type="PyObject" overloaded="no">
        <autodoc>GetAllCommands(String filename, String mimetype=EmptyString) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="mimetype" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="SetCommand" type="bool" overloaded="no">
        <autodoc>SetCommand(String cmd, String verb, bool overwriteprompt=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="cmd" type="String" default=""/>
          <param name="verb" type="String" default=""/>
          <param name="overwriteprompt" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetDefaultIcon" type="bool" overloaded="no">
        <autodoc>SetDefaultIcon(String cmd=EmptyString, int index=0) -&gt; bool</autodoc>
        <paramlist>
          <param name="cmd" type="String" default="wxPyEmptyString"/>
          <param name="index" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Unassociate" type="bool" overloaded="no">
        <autodoc>Unassociate() -&gt; bool</autodoc>
      </method>
      <staticmethod name="ExpandCommand" type="String" overloaded="no">
        <autodoc>ExpandCommand(String command, String filename, String mimetype=EmptyString) -&gt; String</autodoc>
        <paramlist>
          <param name="command" type="String" default=""/>
          <param name="filename" type="String" default=""/>
          <param name="mimetype" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </staticmethod>
    </class>
    <class name="MimeTypesManager" oldname="wxMimeTypesManager" module="misc">
      <constructor name="MimeTypesManager" overloaded="no">
        <autodoc>__init__() -&gt; MimeTypesManager</autodoc>
      </constructor>
      <destructor name="~wxMimeTypesManager" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <staticmethod name="IsOfType" type="bool" overloaded="no">
        <autodoc>IsOfType(String mimeType, String wildcard) -&gt; bool</autodoc>
        <paramlist>
          <param name="mimeType" type="String" default=""/>
          <param name="wildcard" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <method name="Initialize" type="" overloaded="no">
        <autodoc>Initialize(int mailcapStyle=MAILCAP_ALL, String extraDir=EmptyString)</autodoc>
        <paramlist>
          <param name="mailcapStyle" type="int" default="wxMAILCAP_ALL"/>
          <param name="extraDir" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="ClearData" type="" overloaded="no">
        <autodoc>ClearData()</autodoc>
      </method>
      <method name="GetFileTypeFromExtension" type="FileType" overloaded="no">
        <autodoc>GetFileTypeFromExtension(String ext) -&gt; FileType</autodoc>
        <paramlist>
          <param name="ext" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetFileTypeFromMimeType" type="FileType" overloaded="no">
        <autodoc>GetFileTypeFromMimeType(String mimeType) -&gt; FileType</autodoc>
        <paramlist>
          <param name="mimeType" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ReadMailcap" type="bool" overloaded="no">
        <autodoc>ReadMailcap(String filename, bool fallback=False) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="fallback" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="ReadMimeTypes" type="bool" overloaded="no">
        <autodoc>ReadMimeTypes(String filename) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="EnumAllFileTypes" type="PyObject" overloaded="no">
        <autodoc>EnumAllFileTypes() -&gt; PyObject</autodoc>
      </method>
      <method name="AddFallback" type="" overloaded="no">
        <autodoc>AddFallback(FileTypeInfo ft)</autodoc>
        <paramlist>
          <param name="ft" type="FileTypeInfo" default=""/>
        </paramlist>
      </method>
      <method name="Associate" type="FileType" overloaded="no">
        <autodoc>Associate(FileTypeInfo ftInfo) -&gt; FileType</autodoc>
        <paramlist>
          <param name="ftInfo" type="FileTypeInfo" default=""/>
        </paramlist>
      </method>
      <method name="Unassociate" type="bool" overloaded="no">
        <autodoc>Unassociate(FileType ft) -&gt; bool</autodoc>
        <paramlist>
          <param name="ft" type="FileType" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ArtProvider" oldname="wxPyArtProvider" module="misc">
      <constructor name="wxPyArtProvider" overloaded="no">
        <autodoc>__init__() -&gt; ArtProvider</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <staticmethod name="PushProvider" type="" overloaded="no">
        <autodoc>PushProvider(ArtProvider provider)</autodoc>
        <docstring>Add new provider to the top of providers stack.</docstring>
        <paramlist>
          <param name="provider" type="ArtProvider" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="PopProvider" type="bool" overloaded="no">
        <autodoc>PopProvider() -&gt; bool</autodoc>
        <docstring>Remove latest added provider and delete it.</docstring>
      </staticmethod>
      <staticmethod name="RemoveProvider" type="bool" overloaded="no">
        <autodoc>RemoveProvider(ArtProvider provider) -&gt; bool</autodoc>
        <docstring>Remove provider. The provider must have been added previously!
The provider is _not_ deleted.</docstring>
        <paramlist>
          <param name="provider" type="ArtProvider" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap(String id, String client=ART_OTHER, Size size=DefaultSize) -&gt; Bitmap</autodoc>
        <docstring>Query the providers for bitmap with given ID and return it. Return
wx.NullBitmap if no provider provides it.</docstring>
        <paramlist>
          <param name="id" type="String" default=""/>
          <param name="client" type="String" default="wxPyART_OTHER"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetIcon" type="Icon" overloaded="no">
        <autodoc>GetIcon(String id, String client=ART_OTHER, Size size=DefaultSize) -&gt; Icon</autodoc>
        <docstring>Query the providers for icon with given ID and return it. Return
wx.NullIcon if no provider provides it.</docstring>
        <paramlist>
          <param name="id" type="String" default=""/>
          <param name="client" type="String" default="wxPyART_OTHER"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
        </paramlist>
      </staticmethod>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ConfigBase" oldname="wxConfigBase" module="misc">
      <docstring>wx.ConfigBase class defines the basic interface of all config
classes. It can not be used by itself (it is an abstract base
class) and you will always use one of its derivations: wx.Config
or wx.FileConfig.

wx.ConfigBase organizes the items in a tree-like structure,
modeled after the Unix/Dos filesystem. There are groups that act
like directories and entries, key/value pairs that act like
files.  There is always one current group given by the current
path.  As in the file system case, to specify a key in the config
class you must use a path to it.  Config classes also support the
notion of the current group, which makes it possible to use
relative paths.

Keys are pairs "key_name = value" where value may be of string,
integer floating point or boolean, you can not store binary data
without first encoding it as a string.  For performance reasons
items should be kept small, no more than a couple kilobytes.
</docstring>
      <destructor name="~wxConfigBase" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <staticmethod name="Set" type="ConfigBase" overloaded="no">
        <autodoc>Set(ConfigBase config) -&gt; ConfigBase</autodoc>
        <docstring>Sets the global config object (the one returned by Get) and
returns a reference to the previous global config object.</docstring>
        <paramlist>
          <param name="config" type="ConfigBase" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Get" type="ConfigBase" overloaded="no">
        <autodoc>Get(bool createOnDemand=True) -&gt; ConfigBase</autodoc>
        <docstring>Returns the current global config object, creating one if neccessary.</docstring>
        <paramlist>
          <param name="createOnDemand" type="bool" default="True"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Create" type="ConfigBase" overloaded="no">
        <autodoc>Create() -&gt; ConfigBase</autodoc>
        <docstring>Create and return a new global config object.  This function will
create the "best" implementation of wx.Config available for the
current platform.</docstring>
      </staticmethod>
      <staticmethod name="DontCreateOnDemand" type="" overloaded="no">
        <autodoc>DontCreateOnDemand()</autodoc>
        <docstring>Should Get() try to create a new log object if there isn't a current one?</docstring>
      </staticmethod>
      <method name="SetPath" type="" overloaded="no">
        <autodoc>SetPath(String path)</autodoc>
        <docstring>Set current path: if the first character is '/', it's the absolute path,
otherwise it's a relative path. '..' is supported. If the strPath
doesn't exist it is created.</docstring>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetPath" type="String" overloaded="no">
        <autodoc>GetPath() -&gt; String</autodoc>
        <docstring>Retrieve the current path (always as absolute path)</docstring>
      </method>
      <method name="GetFirstGroup" type="PyObject" overloaded="no">
        <autodoc>GetFirstGroup() -&gt; (more, value, index)</autodoc>
        <docstring>Allows enumerating the subgroups in a config object.  Returns
a tuple containing a flag indicating there are more items, the
name of the current item, and an index to pass to GetNextGroup to
fetch the next item.</docstring>
      </method>
      <method name="GetNextGroup" type="PyObject" overloaded="no">
        <autodoc>GetNextGroup(long index) -&gt; (more, value, index)</autodoc>
        <docstring>Allows enumerating the subgroups in a config object.  Returns
a tuple containing a flag indicating there are more items, the
name of the current item, and an index to pass to GetNextGroup to
fetch the next item.</docstring>
        <paramlist>
          <param name="index" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstEntry" type="PyObject" overloaded="no">
        <autodoc>GetFirstEntry() -&gt; (more, value, index)</autodoc>
        <docstring>Allows enumerating the entries in the current group in a config
object.  Returns a tuple containing a flag indicating there are
more items, the name of the current item, and an index to pass to
GetNextGroup to fetch the next item.</docstring>
      </method>
      <method name="GetNextEntry" type="PyObject" overloaded="no">
        <autodoc>GetNextEntry(long index) -&gt; (more, value, index)</autodoc>
        <docstring>Allows enumerating the entries in the current group in a config
object.  Returns a tuple containing a flag indicating there are
more items, the name of the current item, and an index to pass to
GetNextGroup to fetch the next item.</docstring>
        <paramlist>
          <param name="index" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetNumberOfEntries" type="size_t" overloaded="no">
        <autodoc>GetNumberOfEntries(bool recursive=False) -&gt; size_t</autodoc>
        <docstring>Get the number of entries in the current group, with or
without its subgroups.</docstring>
        <paramlist>
          <param name="recursive" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="GetNumberOfGroups" type="size_t" overloaded="no">
        <autodoc>GetNumberOfGroups(bool recursive=False) -&gt; size_t</autodoc>
        <docstring>Get the number of subgroups in the current group, with or
without its subgroups.</docstring>
        <paramlist>
          <param name="recursive" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="HasGroup" type="bool" overloaded="no">
        <autodoc>HasGroup(String name) -&gt; bool</autodoc>
        <docstring>Returns True if the group by this name exists</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="HasEntry" type="bool" overloaded="no">
        <autodoc>HasEntry(String name) -&gt; bool</autodoc>
        <docstring>Returns True if the entry by this name exists</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Exists" type="bool" overloaded="no">
        <autodoc>Exists(String name) -&gt; bool</autodoc>
        <docstring>Returns True if either a group or an entry with a given name exists</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetEntryType" type="wxConfigBase::EntryType" overloaded="no">
        <autodoc>GetEntryType(String name) -&gt; int</autodoc>
        <docstring>Get the type of the entry.  Returns one of the wx.Config.Type_XXX values.</docstring>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Read" type="String" overloaded="no">
        <autodoc>Read(String key, String defaultVal=EmptyString) -&gt; String</autodoc>
        <docstring>Returns the value of key if it exists, defaultVal otherwise.</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="defaultVal" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="ReadInt" type="long" overloaded="no">
        <autodoc>ReadInt(String key, long defaultVal=0) -&gt; long</autodoc>
        <docstring>Returns the value of key if it exists, defaultVal otherwise.</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="defaultVal" type="long" default="0"/>
        </paramlist>
      </method>
      <method name="ReadFloat" type="double" overloaded="no">
        <autodoc>ReadFloat(String key, double defaultVal=0.0) -&gt; double</autodoc>
        <docstring>Returns the value of key if it exists, defaultVal otherwise.</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="defaultVal" type="double" default="0.0"/>
        </paramlist>
      </method>
      <method name="ReadBool" type="bool" overloaded="no">
        <autodoc>ReadBool(String key, bool defaultVal=False) -&gt; bool</autodoc>
        <docstring>Returns the value of key if it exists, defaultVal otherwise.</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="defaultVal" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="Write" type="bool" overloaded="no">
        <autodoc>Write(String key, String value) -&gt; bool</autodoc>
        <docstring>write the value (return True on success)</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="WriteInt" type="bool" overloaded="no">
        <autodoc>WriteInt(String key, long value) -&gt; bool</autodoc>
        <docstring>write the value (return True on success)</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="value" type="long" default=""/>
        </paramlist>
      </method>
      <method name="WriteFloat" type="bool" overloaded="no">
        <autodoc>WriteFloat(String key, double value) -&gt; bool</autodoc>
        <docstring>write the value (return True on success)</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="value" type="double" default=""/>
        </paramlist>
      </method>
      <method name="WriteBool" type="bool" overloaded="no">
        <autodoc>WriteBool(String key, bool value) -&gt; bool</autodoc>
        <docstring>write the value (return True on success)</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="value" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Flush" type="bool" overloaded="no">
        <autodoc>Flush(bool currentOnly=False) -&gt; bool</autodoc>
        <docstring>permanently writes all changes</docstring>
        <paramlist>
          <param name="currentOnly" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="RenameEntry" type="bool" overloaded="no">
        <autodoc>RenameEntry(String oldName, String newName) -&gt; bool</autodoc>
        <docstring>Rename an entry.  Returns False on failure (probably because the new
name is already taken by an existing entry)</docstring>
        <paramlist>
          <param name="oldName" type="String" default=""/>
          <param name="newName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="RenameGroup" type="bool" overloaded="no">
        <autodoc>RenameGroup(String oldName, String newName) -&gt; bool</autodoc>
        <docstring>Rename aa group.  Returns False on failure (probably because the new
name is already taken by an existing entry)</docstring>
        <paramlist>
          <param name="oldName" type="String" default=""/>
          <param name="newName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DeleteEntry" type="bool" overloaded="no">
        <autodoc>DeleteEntry(String key, bool deleteGroupIfEmpty=True) -&gt; bool</autodoc>
        <docstring>Deletes the specified entry and the group it belongs to if
it was the last key in it and the second parameter is True</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="deleteGroupIfEmpty" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DeleteGroup" type="bool" overloaded="no">
        <autodoc>DeleteGroup(String key) -&gt; bool</autodoc>
        <docstring>Delete the group (with all subgroups)</docstring>
        <paramlist>
          <param name="key" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DeleteAll" type="bool" overloaded="no">
        <autodoc>DeleteAll() -&gt; bool</autodoc>
        <docstring>Delete the whole underlying object (disk file, registry key, ...)
primarly intended for use by desinstallation routine.</docstring>
      </method>
      <method name="SetExpandEnvVars" type="" overloaded="no">
        <autodoc>SetExpandEnvVars(bool doIt=True)</autodoc>
        <docstring>We can automatically expand environment variables in the config entries
(this option is on by default, you can turn it on/off at any time)</docstring>
        <paramlist>
          <param name="doIt" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="IsExpandingEnvVars" type="bool" overloaded="no">
        <autodoc>IsExpandingEnvVars() -&gt; bool</autodoc>
        <docstring>Are we currently expanding environment variables?</docstring>
      </method>
      <method name="SetRecordDefaults" type="" overloaded="no">
        <autodoc>SetRecordDefaults(bool doIt=True)</autodoc>
        <docstring>Set whether the config objec should record default values.</docstring>
        <paramlist>
          <param name="doIt" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="IsRecordingDefaults" type="bool" overloaded="no">
        <autodoc>IsRecordingDefaults() -&gt; bool</autodoc>
        <docstring>Are we currently recording default values?</docstring>
      </method>
      <method name="ExpandEnvVars" type="String" overloaded="no">
        <autodoc>ExpandEnvVars(String str) -&gt; String</autodoc>
        <docstring>Expand any environment variables in str and return the result</docstring>
        <paramlist>
          <param name="str" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetAppName" type="String" overloaded="no">
        <autodoc>GetAppName() -&gt; String</autodoc>
      </method>
      <method name="GetVendorName" type="String" overloaded="no">
        <autodoc>GetVendorName() -&gt; String</autodoc>
      </method>
      <method name="SetAppName" type="" overloaded="no">
        <autodoc>SetAppName(String appName)</autodoc>
        <paramlist>
          <param name="appName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetVendorName" type="" overloaded="no">
        <autodoc>SetVendorName(String vendorName)</autodoc>
        <paramlist>
          <param name="vendorName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetStyle" type="" overloaded="no">
        <autodoc>SetStyle(long style)</autodoc>
        <paramlist>
          <param name="style" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetStyle" type="long" overloaded="no">
        <autodoc>GetStyle() -&gt; long</autodoc>
      </method>
    </class>
    <class name="Config" oldname="wxConfig" module="misc">
      <docstring>This ConfigBase-derived class will use the registry on Windows,
and will be a wx.FileConfig on other platforms.</docstring>
      <baseclass name="ConfigBase"/>
      <constructor name="Config" overloaded="no">
        <autodoc>__init__(String appName=EmptyString, String vendorName=EmptyString, 
    String localFilename=EmptyString, String globalFilename=EmptyString, 
    long style=wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE) -&gt; Config</autodoc>
        <paramlist>
          <param name="appName" type="String" default="wxPyEmptyString"/>
          <param name="vendorName" type="String" default="wxPyEmptyString"/>
          <param name="localFilename" type="String" default="wxPyEmptyString"/>
          <param name="globalFilename" type="String" default="wxPyEmptyString"/>
          <param name="style" type="long" default="wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE"/>
        </paramlist>
      </constructor>
      <destructor name="~wxConfig" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <class name="FileConfig" oldname="wxFileConfig" module="misc">
      <docstring>This config class will use a file for storage on all platforms.</docstring>
      <baseclass name="ConfigBase"/>
      <constructor name="FileConfig" overloaded="no">
        <autodoc>__init__(String appName=EmptyString, String vendorName=EmptyString, 
    String localFilename=EmptyString, String globalFilename=EmptyString, 
    long style=wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE) -&gt; FileConfig</autodoc>
        <paramlist>
          <param name="appName" type="String" default="wxPyEmptyString"/>
          <param name="vendorName" type="String" default="wxPyEmptyString"/>
          <param name="localFilename" type="String" default="wxPyEmptyString"/>
          <param name="globalFilename" type="String" default="wxPyEmptyString"/>
          <param name="style" type="long" default="wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE"/>
        </paramlist>
      </constructor>
      <destructor name="~wxFileConfig" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
    </class>
    <class name="ConfigPathChanger" oldname="wxConfigPathChanger" module="misc">
      <docstring>A handy little class which changes current path to the path of
given entry and restores it in the destructoir: so if you declare
a local variable of this type, you work in the entry directory
and the path is automatically restored when the function returns.</docstring>
      <constructor name="ConfigPathChanger" overloaded="no">
        <autodoc>__init__(ConfigBase config, String entry) -&gt; ConfigPathChanger</autodoc>
        <paramlist>
          <param name="config" type="ConfigBase" default=""/>
          <param name="entry" type="String" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxConfigPathChanger" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Name" type="String" overloaded="no">
        <autodoc>Name() -&gt; String</autodoc>
        <docstring>Get the key name</docstring>
      </method>
    </class>
    <method name="ExpandEnvVars" oldname="wxExpandEnvVars" type="String" overloaded="no">
      <autodoc>ExpandEnvVars(String sz) -&gt; String</autodoc>
      <docstring>Replace environment variables ($SOMETHING) with their values. The
format is $VARNAME or ${VARNAME} where VARNAME contains
alphanumeric characters and '_' only. '$' must be escaped ('\\$')
in order to be taken literally.</docstring>
      <paramlist>
        <param name="sz" type="String" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="DateTime" oldname="wxDateTime" module="misc">
      <constructor name="DateTime" overloaded="no">
        <autodoc>__init__() -&gt; DateTime</autodoc>
      </constructor>
      <constructor name="DateTimeFromTimeT" overloaded="no">
        <autodoc>DateTimeFromTimeT(time_t timet) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="timet" type="time_t" default=""/>
        </paramlist>
      </constructor>
      <constructor name="DateTimeFromJDN" overloaded="no">
        <autodoc>DateTimeFromJDN(double jdn) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="jdn" type="double" default=""/>
        </paramlist>
      </constructor>
      <constructor name="DateTimeFromHMS" overloaded="no">
        <autodoc>DateTimeFromHMS(int hour, int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="hour" type="int" default=""/>
          <param name="minute" type="int" default="0"/>
          <param name="second" type="int" default="0"/>
          <param name="millisec" type="int" default="0"/>
        </paramlist>
      </constructor>
      <constructor name="DateTimeFromDMY" overloaded="no">
        <autodoc>DateTimeFromDMY(int day, int month=Inv_Month, int year=Inv_Year, int hour=0, 
    int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="day" type="int" default=""/>
          <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
          <param name="hour" type="int" default="0"/>
          <param name="minute" type="int" default="0"/>
          <param name="second" type="int" default="0"/>
          <param name="millisec" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxDateTime" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <staticmethod name="SetCountry" type="" overloaded="no">
        <autodoc>SetCountry(int country)</autodoc>
        <paramlist>
          <param name="country" type="wxDateTime::Country" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetCountry" type="wxDateTime::Country" overloaded="no">
        <autodoc>GetCountry() -&gt; int</autodoc>
      </staticmethod>
      <staticmethod name="IsWestEuropeanCountry" type="bool" overloaded="no">
        <autodoc>IsWestEuropeanCountry(int country=Country_Default) -&gt; bool</autodoc>
        <paramlist>
          <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetCurrentYear" type="int" overloaded="no">
        <autodoc>GetCurrentYear(int cal=Gregorian) -&gt; int</autodoc>
        <paramlist>
          <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="ConvertYearToBC" type="int" overloaded="no">
        <autodoc>ConvertYearToBC(int year) -&gt; int</autodoc>
        <paramlist>
          <param name="year" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetCurrentMonth" type="wxDateTime::Month" overloaded="no">
        <autodoc>GetCurrentMonth(int cal=Gregorian) -&gt; int</autodoc>
        <paramlist>
          <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="IsLeapYear" type="bool" overloaded="no">
        <autodoc>IsLeapYear(int year=Inv_Year, int cal=Gregorian) -&gt; bool</autodoc>
        <paramlist>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
          <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetCentury" type="int" overloaded="no">
        <autodoc>GetCentury(int year=Inv_Year) -&gt; int</autodoc>
        <paramlist>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetNumberOfDaysinYear" type="int" overloaded="no">
        <autodoc>GetNumberOfDaysinYear(int year, int cal=Gregorian) -&gt; int</autodoc>
        <paramlist>
          <param name="year" type="int" default=""/>
          <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetNumberOfDaysInMonth" type="int" overloaded="no">
        <autodoc>GetNumberOfDaysInMonth(int month, int year=Inv_Year, int cal=Gregorian) -&gt; int</autodoc>
        <paramlist>
          <param name="month" type="wxDateTime::Month" default=""/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
          <param name="cal" type="wxDateTime::Calendar" default="wxDateTime::Gregorian"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetMonthName" type="String" overloaded="no">
        <autodoc>GetMonthName(int month, int flags=Name_Full) -&gt; String</autodoc>
        <paramlist>
          <param name="month" type="wxDateTime::Month" default=""/>
          <param name="flags" type="wxDateTime::NameFlags" default="wxDateTime::Name_Full"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetWeekDayName" type="String" overloaded="no">
        <autodoc>GetWeekDayName(int weekday, int flags=Name_Full) -&gt; String</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
          <param name="flags" type="wxDateTime::NameFlags" default="wxDateTime::Name_Full"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetAmPmStrings" type="" overloaded="no">
        <autodoc>GetAmPmStrings() -&gt; (am, pm)</autodoc>
        <docstring>Get the AM and PM strings in the current locale (may be empty)</docstring>
        <paramlist>
          <param name="OUTPUT" type="String" default=""/>
          <param name="OUTPUT" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="IsDSTApplicable" type="bool" overloaded="no">
        <autodoc>IsDSTApplicable(int year=Inv_Year, int country=Country_Default) -&gt; bool</autodoc>
        <paramlist>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
          <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetBeginDST" type="DateTime" overloaded="no">
        <autodoc>GetBeginDST(int year=Inv_Year, int country=Country_Default) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
          <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetEndDST" type="DateTime" overloaded="no">
        <autodoc>GetEndDST(int year=Inv_Year, int country=Country_Default) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
          <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Now" type="DateTime" overloaded="no">
        <autodoc>Now() -&gt; DateTime</autodoc>
      </staticmethod>
      <staticmethod name="UNow" type="DateTime" overloaded="no">
        <autodoc>UNow() -&gt; DateTime</autodoc>
      </staticmethod>
      <staticmethod name="Today" type="DateTime" overloaded="no">
        <autodoc>Today() -&gt; DateTime</autodoc>
      </staticmethod>
      <method name="SetToCurrent" type="DateTime" overloaded="no">
        <autodoc>SetToCurrent() -&gt; DateTime</autodoc>
      </method>
      <method name="SetTimeT" type="DateTime" overloaded="no">
        <autodoc>SetTimeT(time_t timet) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="timet" type="time_t" default=""/>
        </paramlist>
      </method>
      <method name="SetJDN" type="DateTime" overloaded="no">
        <autodoc>SetJDN(double jdn) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="jdn" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetHMS" type="DateTime" overloaded="no">
        <autodoc>SetHMS(int hour, int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="hour" type="int" default=""/>
          <param name="minute" type="int" default="0"/>
          <param name="second" type="int" default="0"/>
          <param name="millisec" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Set" type="DateTime" overloaded="no">
        <autodoc>Set(int day, int month=Inv_Month, int year=Inv_Year, int hour=0, 
    int minute=0, int second=0, int millisec=0) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="day" type="int" default=""/>
          <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
          <param name="hour" type="int" default="0"/>
          <param name="minute" type="int" default="0"/>
          <param name="second" type="int" default="0"/>
          <param name="millisec" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="ResetTime" type="DateTime" overloaded="no">
        <autodoc>ResetTime() -&gt; DateTime</autodoc>
      </method>
      <method name="SetYear" type="DateTime" overloaded="no">
        <autodoc>SetYear(int year) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="year" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMonth" type="DateTime" overloaded="no">
        <autodoc>SetMonth(int month) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="month" type="wxDateTime::Month" default=""/>
        </paramlist>
      </method>
      <method name="SetDay" type="DateTime" overloaded="no">
        <autodoc>SetDay(int day) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="day" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetHour" type="DateTime" overloaded="no">
        <autodoc>SetHour(int hour) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="hour" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMinute" type="DateTime" overloaded="no">
        <autodoc>SetMinute(int minute) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="minute" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSecond" type="DateTime" overloaded="no">
        <autodoc>SetSecond(int second) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="second" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMillisecond" type="DateTime" overloaded="no">
        <autodoc>SetMillisecond(int millisecond) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="millisecond" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetToWeekDayInSameWeek" type="DateTime" overloaded="no">
        <autodoc>SetToWeekDayInSameWeek(int weekday, int flags=Monday_First) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
          <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
        </paramlist>
      </method>
      <method name="GetWeekDayInSameWeek" type="DateTime" overloaded="no">
        <autodoc>GetWeekDayInSameWeek(int weekday, int flags=Monday_First) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
          <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
        </paramlist>
      </method>
      <method name="SetToNextWeekDay" type="DateTime" overloaded="no">
        <autodoc>SetToNextWeekDay(int weekday) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        </paramlist>
      </method>
      <method name="GetNextWeekDay" type="DateTime" overloaded="no">
        <autodoc>GetNextWeekDay(int weekday) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        </paramlist>
      </method>
      <method name="SetToPrevWeekDay" type="DateTime" overloaded="no">
        <autodoc>SetToPrevWeekDay(int weekday) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        </paramlist>
      </method>
      <method name="GetPrevWeekDay" type="DateTime" overloaded="no">
        <autodoc>GetPrevWeekDay(int weekday) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
        </paramlist>
      </method>
      <method name="SetToWeekDay" type="bool" overloaded="no">
        <autodoc>SetToWeekDay(int weekday, int n=1, int month=Inv_Month, int year=Inv_Year) -&gt; bool</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
          <param name="n" type="int" default="1"/>
          <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        </paramlist>
      </method>
      <method name="SetToLastWeekDay" type="bool" overloaded="no">
        <autodoc>SetToLastWeekDay(int weekday, int month=Inv_Month, int year=Inv_Year) -&gt; bool</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
          <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        </paramlist>
      </method>
      <method name="GetLastWeekDay" type="DateTime" overloaded="no">
        <autodoc>GetLastWeekDay(int weekday, int month=Inv_Month, int year=Inv_Year) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="weekday" type="wxDateTime::WeekDay" default=""/>
          <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        </paramlist>
      </method>
      <method name="SetToTheWeek" type="bool" overloaded="no">
        <autodoc>SetToTheWeek(int numWeek, int weekday=Mon, int flags=Monday_First) -&gt; bool</autodoc>
        <paramlist>
          <param name="numWeek" type="int" default=""/>
          <param name="weekday" type="wxDateTime::WeekDay" default="wxDateTime::Mon"/>
          <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
        </paramlist>
      </method>
      <method name="GetWeek" type="DateTime" overloaded="no">
        <autodoc>GetWeek(int numWeek, int weekday=Mon, int flags=Monday_First) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="numWeek" type="int" default=""/>
          <param name="weekday" type="wxDateTime::WeekDay" default="wxDateTime::Mon"/>
          <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
        </paramlist>
      </method>
      <method name="SetToLastMonthDay" type="DateTime" overloaded="no">
        <autodoc>SetToLastMonthDay(int month=Inv_Month, int year=Inv_Year) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        </paramlist>
      </method>
      <method name="GetLastMonthDay" type="DateTime" overloaded="no">
        <autodoc>GetLastMonthDay(int month=Inv_Month, int year=Inv_Year) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="month" type="wxDateTime::Month" default="wxDateTime::Inv_Month"/>
          <param name="year" type="int" default="wxDateTime::Inv_Year"/>
        </paramlist>
      </method>
      <method name="SetToYearDay" type="DateTime" overloaded="no">
        <autodoc>SetToYearDay(int yday) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="yday" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetYearDay" type="DateTime" overloaded="no">
        <autodoc>GetYearDay(int yday) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="yday" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetJulianDayNumber" type="double" overloaded="no">
        <autodoc>GetJulianDayNumber() -&gt; double</autodoc>
      </method>
      <method name="GetJDN" type="double" overloaded="no">
        <autodoc>GetJDN() -&gt; double</autodoc>
      </method>
      <method name="GetModifiedJulianDayNumber" type="double" overloaded="no">
        <autodoc>GetModifiedJulianDayNumber() -&gt; double</autodoc>
      </method>
      <method name="GetMJD" type="double" overloaded="no">
        <autodoc>GetMJD() -&gt; double</autodoc>
      </method>
      <method name="GetRataDie" type="double" overloaded="no">
        <autodoc>GetRataDie() -&gt; double</autodoc>
      </method>
      <method name="ToTimezone" type="DateTime" overloaded="no">
        <autodoc>ToTimezone(wxDateTime::TimeZone tz, bool noDST=False) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default=""/>
          <param name="noDST" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="MakeTimezone" type="DateTime" overloaded="no">
        <autodoc>MakeTimezone(wxDateTime::TimeZone tz, bool noDST=False) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default=""/>
          <param name="noDST" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="ToGMT" type="DateTime" overloaded="no">
        <autodoc>ToGMT(bool noDST=False) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="noDST" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="MakeGMT" type="DateTime" overloaded="no">
        <autodoc>MakeGMT(bool noDST=False) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="noDST" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="IsDST" type="int" overloaded="no">
        <autodoc>IsDST(int country=Country_Default) -&gt; int</autodoc>
        <paramlist>
          <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
        </paramlist>
      </method>
      <method name="IsValid" type="bool" overloaded="no">
        <autodoc>IsValid() -&gt; bool</autodoc>
      </method>
      <method name="GetTicks" type="time_t" overloaded="no">
        <autodoc>GetTicks() -&gt; time_t</autodoc>
      </method>
      <method name="GetYear" type="int" overloaded="no">
        <autodoc>GetYear(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetMonth" type="wxDateTime::Month" overloaded="no">
        <autodoc>GetMonth(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetDay" type="int" overloaded="no">
        <autodoc>GetDay(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetWeekDay" type="wxDateTime::WeekDay" overloaded="no">
        <autodoc>GetWeekDay(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetHour" type="int" overloaded="no">
        <autodoc>GetHour(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetMinute" type="int" overloaded="no">
        <autodoc>GetMinute(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetSecond" type="int" overloaded="no">
        <autodoc>GetSecond(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetMillisecond" type="int" overloaded="no">
        <autodoc>GetMillisecond(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetDayOfYear" type="int" overloaded="no">
        <autodoc>GetDayOfYear(wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetWeekOfYear" type="int" overloaded="no">
        <autodoc>GetWeekOfYear(int flags=Monday_First, wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="GetWeekOfMonth" type="int" overloaded="no">
        <autodoc>GetWeekOfMonth(int flags=Monday_First, wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; int</autodoc>
        <paramlist>
          <param name="flags" type="wxDateTime::WeekFlags" default="wxDateTime::Monday_First"/>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="IsWorkDay" type="bool" overloaded="no">
        <autodoc>IsWorkDay(int country=Country_Default) -&gt; bool</autodoc>
        <paramlist>
          <param name="country" type="wxDateTime::Country" default="wxDateTime::Country_Default"/>
        </paramlist>
      </method>
      <method name="IsEqualTo" type="bool" overloaded="no">
        <autodoc>IsEqualTo(DateTime datetime) -&gt; bool</autodoc>
        <paramlist>
          <param name="datetime" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="IsEarlierThan" type="bool" overloaded="no">
        <autodoc>IsEarlierThan(DateTime datetime) -&gt; bool</autodoc>
        <paramlist>
          <param name="datetime" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="IsLaterThan" type="bool" overloaded="no">
        <autodoc>IsLaterThan(DateTime datetime) -&gt; bool</autodoc>
        <paramlist>
          <param name="datetime" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="IsStrictlyBetween" type="bool" overloaded="no">
        <autodoc>IsStrictlyBetween(DateTime t1, DateTime t2) -&gt; bool</autodoc>
        <paramlist>
          <param name="t1" type="DateTime" default=""/>
          <param name="t2" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="IsBetween" type="bool" overloaded="no">
        <autodoc>IsBetween(DateTime t1, DateTime t2) -&gt; bool</autodoc>
        <paramlist>
          <param name="t1" type="DateTime" default=""/>
          <param name="t2" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="IsSameDate" type="bool" overloaded="no">
        <autodoc>IsSameDate(DateTime dt) -&gt; bool</autodoc>
        <paramlist>
          <param name="dt" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="IsSameTime" type="bool" overloaded="no">
        <autodoc>IsSameTime(DateTime dt) -&gt; bool</autodoc>
        <paramlist>
          <param name="dt" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="IsEqualUpTo" type="bool" overloaded="no">
        <autodoc>IsEqualUpTo(DateTime dt, TimeSpan ts) -&gt; bool</autodoc>
        <paramlist>
          <param name="dt" type="DateTime" default=""/>
          <param name="ts" type="wxTimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="AddTS" type="DateTime" overloaded="no">
        <autodoc>AddTS(TimeSpan diff) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="diff" type="wxTimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="AddDS" type="DateTime" overloaded="no">
        <autodoc>AddDS(DateSpan diff) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="diff" type="wxDateSpan" default=""/>
        </paramlist>
      </method>
      <method name="SubtractTS" type="DateTime" overloaded="no">
        <autodoc>SubtractTS(TimeSpan diff) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="diff" type="wxTimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="SubtractDS" type="DateTime" overloaded="no">
        <autodoc>SubtractDS(DateSpan diff) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="diff" type="wxDateSpan" default=""/>
        </paramlist>
      </method>
      <method name="Subtract" type="wxTimeSpan" overloaded="no">
        <autodoc>Subtract(DateTime dt) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="dt" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="__iadd__" type="DateTime" overloaded="yes">
        <paramlist>
          <param name="diff" type="wxTimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__iadd__" type="DateTime" overloaded="yes">
        <autodoc>__iadd__(TimeSpan diff) -&gt; DateTime
__iadd__(DateSpan diff) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="diff" type="wxDateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__isub__" type="DateTime" overloaded="yes">
        <paramlist>
          <param name="diff" type="wxTimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__isub__" type="DateTime" overloaded="yes">
        <autodoc>__isub__(TimeSpan diff) -&gt; DateTime
__isub__(DateSpan diff) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="diff" type="wxDateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__add__" type="DateTime" overloaded="yes">
        <paramlist>
          <param name="other" type="wxTimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__add__" type="DateTime" overloaded="yes">
        <autodoc>__add__(TimeSpan other) -&gt; DateTime
__add__(DateSpan other) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="other" type="wxDateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="wxTimeSpan" overloaded="yes">
        <paramlist>
          <param name="other" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="DateTime" overloaded="yes">
        <paramlist>
          <param name="other" type="wxTimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="DateTime" overloaded="yes">
        <autodoc>__sub__(DateTime other) -&gt; TimeSpan
__sub__(TimeSpan other) -&gt; DateTime
__sub__(DateSpan other) -&gt; DateTime</autodoc>
        <paramlist>
          <param name="other" type="wxDateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__lt__" type="bool" overloaded="no">
        <autodoc>__lt__(DateTime other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="__le__" type="bool" overloaded="no">
        <autodoc>__le__(DateTime other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="__gt__" type="bool" overloaded="no">
        <autodoc>__gt__(DateTime other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="__ge__" type="bool" overloaded="no">
        <autodoc>__ge__(DateTime other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(DateTime other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(DateTime other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="ParseRfc822Date" type="int" overloaded="no">
        <autodoc>ParseRfc822Date(String date) -&gt; int</autodoc>
        <paramlist>
          <param name="date" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ParseFormat" type="int" overloaded="no">
        <autodoc>ParseFormat(String date, String format=DateFormatStr, DateTime dateDef=DefaultDateTime) -&gt; int</autodoc>
        <paramlist>
          <param name="date" type="String" default=""/>
          <param name="format" type="String" default="wxPyDateFormatStr"/>
          <param name="dateDef" type="DateTime" default="wxDefaultDateTime"/>
        </paramlist>
      </method>
      <method name="ParseDateTime" type="int" overloaded="no">
        <autodoc>ParseDateTime(String datetime) -&gt; int</autodoc>
        <paramlist>
          <param name="datetime" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ParseDate" type="int" overloaded="no">
        <autodoc>ParseDate(String date) -&gt; int</autodoc>
        <paramlist>
          <param name="date" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ParseTime" type="int" overloaded="no">
        <autodoc>ParseTime(String time) -&gt; int</autodoc>
        <paramlist>
          <param name="time" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Format" type="String" overloaded="no">
        <autodoc>Format(String format=DateFormatStr, wxDateTime::TimeZone tz=LOCAL_TZ) -&gt; String</autodoc>
        <paramlist>
          <param name="format" type="String" default="wxPyDateFormatStr"/>
          <param name="tz" type="wxDateTime::TimeZone" default="LOCAL_TZ"/>
        </paramlist>
      </method>
      <method name="FormatDate" type="String" overloaded="no">
        <autodoc>FormatDate() -&gt; String</autodoc>
      </method>
      <method name="FormatTime" type="String" overloaded="no">
        <autodoc>FormatTime() -&gt; String</autodoc>
      </method>
      <method name="FormatISODate" type="String" overloaded="no">
        <autodoc>FormatISODate() -&gt; String</autodoc>
      </method>
      <method name="FormatISOTime" type="String" overloaded="no">
        <autodoc>FormatISOTime() -&gt; String</autodoc>
      </method>
    </class>
    <class name="TimeSpan" oldname="wxTimeSpan" module="misc">
      <constructor name="TimeSpan" overloaded="no">
        <autodoc>__init__(long hours=0, long minutes=0, long seconds=0, long milliseconds=0) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="hours" type="long" default="0"/>
          <param name="minutes" type="long" default="0"/>
          <param name="seconds" type="long" default="0"/>
          <param name="milliseconds" type="long" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxTimeSpan" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <staticmethod name="Seconds" type="TimeSpan" overloaded="no">
        <autodoc>Seconds(long sec) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="sec" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Second" type="TimeSpan" overloaded="no">
        <autodoc>Second() -&gt; TimeSpan</autodoc>
      </staticmethod>
      <staticmethod name="Minutes" type="TimeSpan" overloaded="no">
        <autodoc>Minutes(long min) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="min" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Minute" type="TimeSpan" overloaded="no">
        <autodoc>Minute() -&gt; TimeSpan</autodoc>
      </staticmethod>
      <staticmethod name="Hours" type="TimeSpan" overloaded="no">
        <autodoc>Hours(long hours) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="hours" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Hour" type="TimeSpan" overloaded="no">
        <autodoc>Hour() -&gt; TimeSpan</autodoc>
      </staticmethod>
      <staticmethod name="Days" type="TimeSpan" overloaded="no">
        <autodoc>Days(long days) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="days" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Day" type="TimeSpan" overloaded="no">
        <autodoc>Day() -&gt; TimeSpan</autodoc>
      </staticmethod>
      <staticmethod name="Weeks" type="TimeSpan" overloaded="no">
        <autodoc>Weeks(long days) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="days" type="long" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Week" type="TimeSpan" overloaded="no">
        <autodoc>Week() -&gt; TimeSpan</autodoc>
      </staticmethod>
      <method name="Add" type="TimeSpan" overloaded="no">
        <autodoc>Add(TimeSpan diff) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="diff" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="Subtract" type="TimeSpan" overloaded="no">
        <autodoc>Subtract(TimeSpan diff) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="diff" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="Multiply" type="TimeSpan" overloaded="no">
        <autodoc>Multiply(int n) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Neg" type="TimeSpan" overloaded="no">
        <autodoc>Neg() -&gt; TimeSpan</autodoc>
      </method>
      <method name="Abs" type="TimeSpan" overloaded="no">
        <autodoc>Abs() -&gt; TimeSpan</autodoc>
      </method>
      <method name="__iadd__" type="TimeSpan" overloaded="no">
        <autodoc>__iadd__(TimeSpan diff) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="diff" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__isub__" type="TimeSpan" overloaded="no">
        <autodoc>__isub__(TimeSpan diff) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="diff" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__imul__" type="TimeSpan" overloaded="no">
        <autodoc>__imul__(int n) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__neg__" type="TimeSpan" overloaded="no">
        <autodoc>__neg__() -&gt; TimeSpan</autodoc>
      </method>
      <method name="__add__" type="TimeSpan" overloaded="no">
        <autodoc>__add__(TimeSpan other) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="TimeSpan" overloaded="no">
        <autodoc>__sub__(TimeSpan other) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__mul__" type="TimeSpan" overloaded="no">
        <autodoc>__mul__(int n) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__rmul__" type="TimeSpan" overloaded="no">
        <autodoc>__rmul__(int n) -&gt; TimeSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__lt__" type="bool" overloaded="no">
        <autodoc>__lt__(TimeSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__le__" type="bool" overloaded="no">
        <autodoc>__le__(TimeSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__gt__" type="bool" overloaded="no">
        <autodoc>__gt__(TimeSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__ge__" type="bool" overloaded="no">
        <autodoc>__ge__(TimeSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(TimeSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(TimeSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="IsNull" type="bool" overloaded="no">
        <autodoc>IsNull() -&gt; bool</autodoc>
      </method>
      <method name="IsPositive" type="bool" overloaded="no">
        <autodoc>IsPositive() -&gt; bool</autodoc>
      </method>
      <method name="IsNegative" type="bool" overloaded="no">
        <autodoc>IsNegative() -&gt; bool</autodoc>
      </method>
      <method name="IsEqualTo" type="bool" overloaded="no">
        <autodoc>IsEqualTo(TimeSpan ts) -&gt; bool</autodoc>
        <paramlist>
          <param name="ts" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="IsLongerThan" type="bool" overloaded="no">
        <autodoc>IsLongerThan(TimeSpan ts) -&gt; bool</autodoc>
        <paramlist>
          <param name="ts" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="IsShorterThan" type="bool" overloaded="no">
        <autodoc>IsShorterThan(TimeSpan t) -&gt; bool</autodoc>
        <paramlist>
          <param name="t" type="TimeSpan" default=""/>
        </paramlist>
      </method>
      <method name="GetWeeks" type="int" overloaded="no">
        <autodoc>GetWeeks() -&gt; int</autodoc>
      </method>
      <method name="GetDays" type="int" overloaded="no">
        <autodoc>GetDays() -&gt; int</autodoc>
      </method>
      <method name="GetHours" type="int" overloaded="no">
        <autodoc>GetHours() -&gt; int</autodoc>
      </method>
      <method name="GetMinutes" type="int" overloaded="no">
        <autodoc>GetMinutes() -&gt; int</autodoc>
      </method>
      <method name="GetSeconds" type="wxLongLong" overloaded="no">
        <autodoc>GetSeconds() -&gt; wxLongLong</autodoc>
      </method>
      <method name="GetMilliseconds" type="wxLongLong" overloaded="no">
        <autodoc>GetMilliseconds() -&gt; wxLongLong</autodoc>
      </method>
      <method name="Format" type="String" overloaded="no">
        <autodoc>Format(String format=TimeSpanFormatStr) -&gt; String</autodoc>
        <paramlist>
          <param name="format" type="String" default="wxPyTimeSpanFormatStr"/>
        </paramlist>
      </method>
    </class>
    <class name="DateSpan" oldname="wxDateSpan" module="misc">
      <constructor name="DateSpan" overloaded="no">
        <autodoc>__init__(int years=0, int months=0, int weeks=0, int days=0) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="years" type="int" default="0"/>
          <param name="months" type="int" default="0"/>
          <param name="weeks" type="int" default="0"/>
          <param name="days" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxDateSpan" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <staticmethod name="Days" type="DateSpan" overloaded="no">
        <autodoc>Days(int days) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="days" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Day" type="DateSpan" overloaded="no">
        <autodoc>Day() -&gt; DateSpan</autodoc>
      </staticmethod>
      <staticmethod name="Weeks" type="DateSpan" overloaded="no">
        <autodoc>Weeks(int weeks) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="weeks" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Week" type="DateSpan" overloaded="no">
        <autodoc>Week() -&gt; DateSpan</autodoc>
      </staticmethod>
      <staticmethod name="Months" type="DateSpan" overloaded="no">
        <autodoc>Months(int mon) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="mon" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Month" type="DateSpan" overloaded="no">
        <autodoc>Month() -&gt; DateSpan</autodoc>
      </staticmethod>
      <staticmethod name="Years" type="DateSpan" overloaded="no">
        <autodoc>Years(int years) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="years" type="int" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="Year" type="DateSpan" overloaded="no">
        <autodoc>Year() -&gt; DateSpan</autodoc>
      </staticmethod>
      <method name="SetYears" type="DateSpan" overloaded="no">
        <autodoc>SetYears(int n) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMonths" type="DateSpan" overloaded="no">
        <autodoc>SetMonths(int n) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWeeks" type="DateSpan" overloaded="no">
        <autodoc>SetWeeks(int n) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDays" type="DateSpan" overloaded="no">
        <autodoc>SetDays(int n) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetYears" type="int" overloaded="no">
        <autodoc>GetYears() -&gt; int</autodoc>
      </method>
      <method name="GetMonths" type="int" overloaded="no">
        <autodoc>GetMonths() -&gt; int</autodoc>
      </method>
      <method name="GetWeeks" type="int" overloaded="no">
        <autodoc>GetWeeks() -&gt; int</autodoc>
      </method>
      <method name="GetDays" type="int" overloaded="no">
        <autodoc>GetDays() -&gt; int</autodoc>
      </method>
      <method name="GetTotalDays" type="int" overloaded="no">
        <autodoc>GetTotalDays() -&gt; int</autodoc>
      </method>
      <method name="Add" type="DateSpan" overloaded="no">
        <autodoc>Add(DateSpan other) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
      <method name="Subtract" type="DateSpan" overloaded="no">
        <autodoc>Subtract(DateSpan other) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
      <method name="Neg" type="DateSpan" overloaded="no">
        <autodoc>Neg() -&gt; DateSpan</autodoc>
      </method>
      <method name="Multiply" type="DateSpan" overloaded="no">
        <autodoc>Multiply(int factor) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="factor" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__iadd__" type="DateSpan" overloaded="no">
        <autodoc>__iadd__(DateSpan other) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__isub__" type="DateSpan" overloaded="no">
        <autodoc>__isub__(DateSpan other) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__neg__" type="DateSpan" overloaded="no">
        <autodoc>__neg__() -&gt; DateSpan</autodoc>
      </method>
      <method name="__imul__" type="DateSpan" overloaded="no">
        <autodoc>__imul__(int factor) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="factor" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__add__" type="DateSpan" overloaded="no">
        <autodoc>__add__(DateSpan other) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__sub__" type="DateSpan" overloaded="no">
        <autodoc>__sub__(DateSpan other) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__mul__" type="DateSpan" overloaded="no">
        <autodoc>__mul__(int n) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__rmul__" type="DateSpan" overloaded="no">
        <autodoc>__rmul__(int n) -&gt; DateSpan</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(DateSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(DateSpan other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="DateSpan" default=""/>
        </paramlist>
      </method>
    </class>
    <method name="GetLocalTime" oldname="wxGetLocalTime" type="long" overloaded="no">
      <autodoc>GetLocalTime() -&gt; long</autodoc>
    </method>
    <method name="GetUTCTime" oldname="wxGetUTCTime" type="long" overloaded="no">
      <autodoc>GetUTCTime() -&gt; long</autodoc>
    </method>
    <method name="GetCurrentTime" oldname="wxGetCurrentTime" type="long" overloaded="no">
      <autodoc>GetCurrentTime() -&gt; long</autodoc>
    </method>
    <method name="GetLocalTimeMillis" oldname="wxGetLocalTimeMillis" type="wxLongLong" overloaded="no">
      <autodoc>GetLocalTimeMillis() -&gt; wxLongLong</autodoc>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="DataFormat" oldname="wxDataFormat" module="misc">
      <docstring>A wx.DataFormat is an encapsulation of a platform-specific format
handle which is used by the system for the clipboard and drag and
drop operations. The applications are usually only interested in,
for example, pasting data from the clipboard only if the data is
in a format the program understands.  A data format is is used to
uniquely identify this format.

On the system level, a data format is usually just a number
(CLIPFORMAT under Windows or Atom under X11, for example).</docstring>
      <constructor name="DataFormat" overloaded="no">
        <autodoc>__init__(int type) -&gt; DataFormat</autodoc>
        <docstring>Constructs a data format object for one of the standard data
formats or an empty data object (use SetType or SetId later in
this case)</docstring>
        <paramlist>
          <param name="type" type="wxDataFormatId" default=""/>
        </paramlist>
      </constructor>
      <constructor name="CustomDataFormat" overloaded="no">
        <autodoc>CustomDataFormat(String format) -&gt; DataFormat</autodoc>
        <docstring>Constructs a data format object for a custom format identified by its name.</docstring>
        <paramlist>
          <param name="format" type="String" default=""/>
        </paramlist>
      </constructor>
      <destructor name="~wxDataFormat" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="__eq__" type="bool" overloaded="yes">
        <paramlist>
          <param name="format" type="wxDataFormatId" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="yes">
        <paramlist>
          <param name="format" type="wxDataFormatId" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="yes">
        <autodoc>__eq__(int format) -&gt; bool
__eq__(DataFormat format) -&gt; bool</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="yes">
        <autodoc>__ne__(int format) -&gt; bool
__ne__(DataFormat format) -&gt; bool</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
        </paramlist>
      </method>
      <method name="SetType" type="" overloaded="no">
        <autodoc>SetType(int format)</autodoc>
        <docstring>Sets the format to the given value, which should be one of wx.DF_XXX constants.</docstring>
        <paramlist>
          <param name="format" type="wxDataFormatId" default=""/>
        </paramlist>
      </method>
      <method name="GetType" type="wxDataFormatId" overloaded="no">
        <autodoc>GetType() -&gt; int</autodoc>
        <docstring>Returns the platform-specific number identifying the format.</docstring>
      </method>
      <method name="GetId" type="String" overloaded="no">
        <autodoc>GetId() -&gt; String</autodoc>
        <docstring>Returns the name of a custom format (this function will fail for a standard format).</docstring>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(String format)</autodoc>
        <docstring>Sets the format to be the custom format identified by the given name.</docstring>
        <paramlist>
          <param name="format" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="DataObject" oldname="wxDataObject" module="misc">
      <destructor name="~wxDataObject" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetPreferredFormat" type="DataFormat" overloaded="no">
        <autodoc>GetPreferredFormat(int dir=Get) -&gt; DataFormat</autodoc>
        <paramlist>
          <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
        </paramlist>
      </method>
      <method name="GetFormatCount" type="size_t" overloaded="no">
        <autodoc>GetFormatCount(int dir=Get) -&gt; size_t</autodoc>
        <paramlist>
          <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
        </paramlist>
      </method>
      <method name="IsSupported" type="bool" overloaded="no">
        <autodoc>IsSupported(DataFormat format, int dir=Get) -&gt; bool</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
          <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
        </paramlist>
      </method>
      <method name="GetDataSize" type="size_t" overloaded="no">
        <autodoc>GetDataSize(DataFormat format) -&gt; size_t</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
        </paramlist>
      </method>
      <method name="GetAllFormats" type="" overloaded="no">
        <autodoc>GetAllFormats(DataFormat formats, int dir=Get)</autodoc>
        <paramlist>
          <param name="formats" type="DataFormat" default=""/>
          <param name="dir" type="wxDataObject::Direction" default="wxDataObject::Get"/>
        </paramlist>
      </method>
      <method name="GetDataHere" type="bool" overloaded="no">
        <autodoc>GetDataHere(DataFormat format, void buf) -&gt; bool</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
          <param name="buf" type="" default=""/>
        </paramlist>
      </method>
      <method name="SetData" type="bool" overloaded="no">
        <autodoc>SetData(DataFormat format, size_t len, void buf) -&gt; bool</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
          <param name="len" type="size_t" default=""/>
          <param name="buf" type="" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="DataObjectSimple" oldname="wxDataObjectSimple" module="misc">
      <baseclass name="DataObject"/>
      <constructor name="DataObjectSimple" overloaded="no">
        <autodoc>__init__(DataFormat format=FormatInvalid) -&gt; DataObjectSimple</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default="wxFormatInvalid"/>
        </paramlist>
      </constructor>
      <method name="GetFormat" type="DataFormat" overloaded="no">
        <autodoc>GetFormat() -&gt; DataFormat</autodoc>
      </method>
      <method name="SetFormat" type="" overloaded="no">
        <autodoc>SetFormat(DataFormat format)</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyDataObjectSimple" oldname="wxPyDataObjectSimple" module="misc">
      <baseclass name="DataObjectSimple"/>
      <constructor name="PyDataObjectSimple" overloaded="no">
        <autodoc>__init__(DataFormat format=FormatInvalid) -&gt; PyDataObjectSimple</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default="wxFormatInvalid"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="DataObjectComposite" oldname="wxDataObjectComposite" module="misc">
      <baseclass name="DataObject"/>
      <constructor name="DataObjectComposite" overloaded="no">
        <autodoc>__init__() -&gt; DataObjectComposite</autodoc>
      </constructor>
      <method name="Add" type="" overloaded="no">
        <autodoc>Add(DataObjectSimple dataObject, int preferred=False)</autodoc>
        <paramlist>
          <param name="dataObject" type="DataObjectSimple" default=""/>
          <param name="preferred" type="int" default="False"/>
        </paramlist>
      </method>
    </class>
    <class name="TextDataObject" oldname="wxTextDataObject" module="misc">
      <baseclass name="DataObjectSimple"/>
      <constructor name="TextDataObject" overloaded="no">
        <autodoc>__init__(String text=EmptyString) -&gt; TextDataObject</autodoc>
        <paramlist>
          <param name="text" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <method name="GetTextLength" type="size_t" overloaded="no">
        <autodoc>GetTextLength() -&gt; size_t</autodoc>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyTextDataObject" oldname="wxPyTextDataObject" module="misc">
      <baseclass name="TextDataObject"/>
      <constructor name="PyTextDataObject" overloaded="no">
        <autodoc>__init__(String text=EmptyString) -&gt; PyTextDataObject</autodoc>
        <paramlist>
          <param name="text" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="BitmapDataObject" oldname="wxBitmapDataObject" module="misc">
      <baseclass name="DataObjectSimple"/>
      <constructor name="BitmapDataObject" overloaded="no">
        <autodoc>__init__(Bitmap bitmap=wxNullBitmap) -&gt; BitmapDataObject</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
        </paramlist>
      </constructor>
      <method name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="SetBitmap" type="" overloaded="no">
        <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyBitmapDataObject" oldname="wxPyBitmapDataObject" module="misc">
      <baseclass name="BitmapDataObject"/>
      <constructor name="PyBitmapDataObject" overloaded="no">
        <autodoc>__init__(Bitmap bitmap=wxNullBitmap) -&gt; PyBitmapDataObject</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FileDataObject" oldname="wxFileDataObject" module="misc">
      <baseclass name="DataObjectSimple"/>
      <constructor name="FileDataObject" overloaded="no">
        <autodoc>__init__() -&gt; FileDataObject</autodoc>
      </constructor>
      <method name="GetFilenames" type="wxArrayString" overloaded="no">
        <autodoc>GetFilenames() -&gt; wxArrayString</autodoc>
      </method>
      <method name="AddFile" type="" overloaded="no">
        <autodoc>AddFile(String filename)</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="CustomDataObject" oldname="wxCustomDataObject" module="misc">
      <baseclass name="DataObjectSimple"/>
      <constructor name="CustomDataObject" overloaded="no">
        <autodoc>__init__(DataFormat format=FormatInvalid) -&gt; CustomDataObject</autodoc>
        <paramlist>
          <param name="format" type="DataFormat" default="wxFormatInvalid"/>
        </paramlist>
      </constructor>
      <method name="TakeData" type="" overloaded="no">
        <autodoc>TakeData(PyObject data)</autodoc>
        <paramlist>
          <param name="data" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetData" type="bool" overloaded="no">
        <autodoc>SetData(PyObject data) -&gt; bool</autodoc>
        <paramlist>
          <param name="data" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="size_t" overloaded="no">
        <autodoc>GetSize() -&gt; size_t</autodoc>
      </method>
      <method name="GetData" type="PyObject" overloaded="no">
        <autodoc>GetData() -&gt; PyObject</autodoc>
      </method>
    </class>
    <class name="URLDataObject" oldname="wxURLDataObject" module="misc">
      <baseclass name="DataObjectComposite"/>
      <constructor name="URLDataObject" overloaded="no">
        <autodoc>__init__() -&gt; URLDataObject</autodoc>
      </constructor>
      <method name="GetURL" type="String" overloaded="no">
        <autodoc>GetURL() -&gt; String</autodoc>
      </method>
      <method name="SetURL" type="" overloaded="no">
        <autodoc>SetURL(String url)</autodoc>
        <paramlist>
          <param name="url" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="MetafileDataObject" oldname="wxMetafileDataObject" module="misc">
      <baseclass name="DataObjectSimple"/>
      <constructor name="MetafileDataObject" overloaded="no">
        <autodoc>__init__() -&gt; MetafileDataObject</autodoc>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <method name="IsDragResultOk" oldname="wxIsDragResultOk" type="bool" overloaded="no">
      <autodoc>IsDragResultOk(int res) -&gt; bool</autodoc>
      <paramlist>
        <param name="res" type="wxDragResult" default=""/>
      </paramlist>
    </method>
    <class name="DropSource" oldname="wxPyDropSource" module="misc">
      <constructor name="wxPyDropSource" overloaded="no">
        <autodoc>__init__(Window win, Icon copy=wxNullIcon, Icon move=wxNullIcon, 
    Icon none=wxNullIcon) -&gt; DropSource</autodoc>
        <paramlist>
          <param name="win" type="Window" default=""/>
          <param name="copy" type="Icon" default="wxNullIcon"/>
          <param name="move" type="Icon" default="wxNullIcon"/>
          <param name="none" type="Icon" default="wxNullIcon"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPyDropSource" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class, int incref)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
          <param name="incref" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetData" type="" overloaded="no">
        <autodoc>SetData(DataObject data)</autodoc>
        <paramlist>
          <param name="data" type="DataObject" default=""/>
        </paramlist>
      </method>
      <method name="GetDataObject" type="DataObject" overloaded="no">
        <autodoc>GetDataObject() -&gt; DataObject</autodoc>
      </method>
      <method name="SetCursor" type="" overloaded="no">
        <autodoc>SetCursor(int res, Cursor cursor)</autodoc>
        <paramlist>
          <param name="res" type="wxDragResult" default=""/>
          <param name="cursor" type="Cursor" default=""/>
        </paramlist>
      </method>
      <method name="DoDragDrop" type="wxDragResult" overloaded="no">
        <autodoc>DoDragDrop(int flags=Drag_CopyOnly) -&gt; int</autodoc>
        <paramlist>
          <param name="flags" type="int" default="wxDrag_CopyOnly"/>
        </paramlist>
      </method>
      <method name="base_GiveFeedback" type="bool" overloaded="no">
        <autodoc>base_GiveFeedback(int effect) -&gt; bool</autodoc>
        <paramlist>
          <param name="effect" type="wxDragResult" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="DropTarget" oldname="wxPyDropTarget" module="misc">
      <constructor name="DropTarget" overloaded="no">
        <autodoc>__init__(DataObject dataObject=None) -&gt; DropTarget</autodoc>
        <paramlist>
          <param name="dataObject" type="DataObject" default="NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxPyDropTarget" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetDataObject" type="DataObject" overloaded="no">
        <autodoc>GetDataObject() -&gt; DataObject</autodoc>
      </method>
      <method name="SetDataObject" type="" overloaded="no">
        <autodoc>SetDataObject(DataObject dataObject)</autodoc>
        <paramlist>
          <param name="dataObject" type="DataObject" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEnter" type="wxDragResult" overloaded="no">
        <autodoc>base_OnEnter(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDragOver" type="wxDragResult" overloaded="no">
        <autodoc>base_OnDragOver(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeave" type="" overloaded="no">
        <autodoc>base_OnLeave()</autodoc>
      </method>
      <method name="base_OnDrop" type="bool" overloaded="no">
        <autodoc>base_OnDrop(int x, int y) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetData" type="bool" overloaded="no">
        <autodoc>GetData() -&gt; bool</autodoc>
      </method>
    </class>
    <pythoncode> PyDropTarget = DropTarget </pythoncode>
    <class name="TextDropTarget" oldname="wxPyTextDropTarget" module="misc">
      <baseclass name="DropTarget"/>
      <constructor name="wxPyTextDropTarget" overloaded="no">
        <autodoc>__init__() -&gt; TextDropTarget</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEnter" type="wxDragResult" overloaded="no">
        <autodoc>base_OnEnter(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDragOver" type="wxDragResult" overloaded="no">
        <autodoc>base_OnDragOver(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeave" type="" overloaded="no">
        <autodoc>base_OnLeave()</autodoc>
      </method>
      <method name="base_OnDrop" type="bool" overloaded="no">
        <autodoc>base_OnDrop(int x, int y) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_OnData" type="wxDragResult" overloaded="no">
        <autodoc>base_OnData(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="FileDropTarget" oldname="wxPyFileDropTarget" module="misc">
      <baseclass name="DropTarget"/>
      <constructor name="wxPyFileDropTarget" overloaded="no">
        <autodoc>__init__() -&gt; FileDropTarget</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEnter" type="wxDragResult" overloaded="no">
        <autodoc>base_OnEnter(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDragOver" type="wxDragResult" overloaded="no">
        <autodoc>base_OnDragOver(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeave" type="" overloaded="no">
        <autodoc>base_OnLeave()</autodoc>
      </method>
      <method name="base_OnDrop" type="bool" overloaded="no">
        <autodoc>base_OnDrop(int x, int y) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_OnData" type="wxDragResult" overloaded="no">
        <autodoc>base_OnData(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="Clipboard" oldname="wxClipboard" module="misc">
      <docstring>wx.Clipboard represents the system clipboard and provides methods to copy data
to or paste data from it.  Normally, you should only use wx.TheClipboard which
is a reference to a global wx.Clipboard instance.

Call wx.TheClipboard.Open to get ownership of the clipboard. If this operation
returns True, you now own the clipboard. Call wx.TheClipboard.SetData to put
data on the clipboard, or wx.TheClipboard.GetData to retrieve data from the
clipboard.  Call wx.TheClipboard.Close to close the clipboard and relinquish
ownership. You should keep the clipboard open only momentarily.
</docstring>
      <baseclass name="Object"/>
      <constructor name="Clipboard" overloaded="no">
        <autodoc>__init__() -&gt; Clipboard</autodoc>
      </constructor>
      <destructor name="~wxClipboard" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Open" type="bool" overloaded="no">
        <autodoc>Open() -&gt; bool</autodoc>
        <docstring>Call this function to open the clipboard before calling SetData
and GetData.  Call Close when you have finished with the clipboard.
You should keep the clipboard open for only a very short time.
Returns true on success. </docstring>
      </method>
      <method name="Close" type="" overloaded="no">
        <autodoc>Close()</autodoc>
        <docstring>Closes the clipboard.</docstring>
      </method>
      <method name="IsOpened" type="bool" overloaded="no">
        <autodoc>IsOpened() -&gt; bool</autodoc>
        <docstring>Query whether the clipboard is opened</docstring>
      </method>
      <method name="AddData" type="bool" overloaded="no">
        <autodoc>AddData(DataObject data) -&gt; bool</autodoc>
        <docstring>Call this function to add the data object to the clipboard. You
may call this function repeatedly after having cleared the clipboard.
After this function has been called, the clipboard owns the data, so
do not delete the data explicitly.</docstring>
        <paramlist>
          <param name="data" type="DataObject" default=""/>
        </paramlist>
      </method>
      <method name="SetData" type="bool" overloaded="no">
        <autodoc>SetData(DataObject data) -&gt; bool</autodoc>
        <docstring>Set the clipboard data, this is the same as Clear followed by AddData.</docstring>
        <paramlist>
          <param name="data" type="DataObject" default=""/>
        </paramlist>
      </method>
      <method name="IsSupported" type="bool" overloaded="no">
        <autodoc>IsSupported(DataFormat format) -&gt; bool</autodoc>
        <docstring>Returns True if the given format is available in the data object(s) on
the clipboard.</docstring>
        <paramlist>
          <param name="format" type="DataFormat" default=""/>
        </paramlist>
      </method>
      <method name="GetData" type="bool" overloaded="no">
        <autodoc>GetData(DataObject data) -&gt; bool</autodoc>
        <docstring>Call this function to fill data with data on the clipboard, if available
in the required format. Returns true on success.</docstring>
        <paramlist>
          <param name="data" type="DataObject" default=""/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
        <docstring>Clears data from the clipboard object and also  the system's clipboard
if possible.</docstring>
      </method>
      <method name="Flush" type="bool" overloaded="no">
        <autodoc>Flush() -&gt; bool</autodoc>
        <docstring>Flushes the clipboard: this means that the data which is currently on
clipboard will stay available even after the application exits (possibly
eating memory), otherwise the clipboard will be emptied on exit.
Returns False if the operation is unsuccesful for any reason.</docstring>
      </method>
      <method name="UsePrimarySelection" type="" overloaded="no">
        <autodoc>UsePrimarySelection(bool primary=True)</autodoc>
        <docstring>On platforms supporting it (the X11 based platforms), selects the so
called PRIMARY SELECTION as the clipboard as opposed to the normal
clipboard, if primary is True.</docstring>
        <paramlist>
          <param name="primary" type="bool" default="True"/>
        </paramlist>
      </method>
    </class>
    <class name="ClipboardLocker" oldname="wxClipboardLocker" module="misc">
      <docstring>A helpful class for opening the clipboard and automatically closing it when
the locker is destroyed.</docstring>
      <constructor name="ClipboardLocker" overloaded="no">
        <autodoc>__init__(Clipboard clipboard=None) -&gt; ClipboardLocker</autodoc>
        <docstring>A helpful class for opening the clipboard and automatically closing it when
the locker is destroyed.</docstring>
        <paramlist>
          <param name="clipboard" type="Clipboard" default="NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxClipboardLocker" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="__nonzero__" type="bool" overloaded="no">
        <autodoc>__nonzero__() -&gt; bool</autodoc>
        <docstring>A ClipboardLocker instance evaluates to True if the clipboard was
successfully opened.</docstring>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="VideoMode" oldname="wxVideoMode" module="misc">
      <docstring>A simple struct containing video mode parameters for a display</docstring>
      <constructor name="VideoMode" overloaded="no">
        <autodoc>__init__(int width=0, int height=0, int depth=0, int freq=0) -&gt; VideoMode</autodoc>
        <docstring>A simple struct containing video mode parameters for a display</docstring>
        <paramlist>
          <param name="width" type="int" default="0"/>
          <param name="height" type="int" default="0"/>
          <param name="depth" type="int" default="0"/>
          <param name="freq" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxVideoMode" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Matches" type="bool" overloaded="no">
        <autodoc>Matches(VideoMode other) -&gt; bool</autodoc>
        <docstring>Returns true if this mode matches the other one in the sense that
all non zero fields of the other mode have the same value in this
one (except for refresh which is allowed to have a greater value)</docstring>
        <paramlist>
          <param name="other" type="VideoMode" default=""/>
        </paramlist>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
        <docstring>Returns the screen width in pixels (e.g. 640*480), 0 means
unspecified</docstring>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
        <docstring>Returns the screen width in pixels (e.g. 640*480), 0 means
unspecified</docstring>
      </method>
      <method name="GetDepth" type="int" overloaded="no">
        <autodoc>GetDepth() -&gt; int</autodoc>
        <docstring>Returns the screen's bits per pixel (e.g. 32), 1 is monochrome
and 0 means unspecified/known</docstring>
      </method>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
        <docstring>returns true if the object has been initialized</docstring>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(VideoMode other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="VideoMode" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(VideoMode other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="VideoMode" default=""/>
        </paramlist>
      </method>
      <property name="w" type="int" readonly="no"/>
      <property name="h" type="int" readonly="no"/>
      <property name="bpp" type="int" readonly="no"/>
      <property name="refresh" type="int" readonly="no"/>
    </class>
    <class name="Display" oldname="wxDisplay" module="misc">
      <docstring>Represents a display/monitor attached to the system</docstring>
      <constructor name="Display" overloaded="no">
        <autodoc>__init__(size_t index=0) -&gt; Display</autodoc>
        <docstring>Set up a Display instance with the specified display.  The
displays are numbered from 0 to GetCount() - 1, 0 is always the
primary display and the only one which is always supported</docstring>
        <paramlist>
          <param name="index" type="size_t" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxDisplay" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <staticmethod name="GetCount" type="size_t" overloaded="no">
        <autodoc>GetCount() -&gt; size_t</autodoc>
        <docstring>Return the number of available displays.</docstring>
      </staticmethod>
      <staticmethod name="GetFromPoint" type="int" overloaded="no">
        <autodoc>GetFromPoint(Point pt) -&gt; int</autodoc>
        <docstring>Find the display where the given point lies, return wx.NOT_FOUND
if it doesn't belong to any display</docstring>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="GetFromWindow" type="int" overloaded="no">
        <autodoc>GetFromWindow(Window window) -&gt; int</autodoc>
        <docstring>Find the display where the given window lies, return wx.NOT_FOUND
if it is not shown at all.</docstring>
        <paramlist>
          <param name="window" type="Window" default=""/>
        </paramlist>
      </staticmethod>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
        <docstring>Return true if the object was initialized successfully</docstring>
      </method>
      <method name="GetGeometry" type="Rect" overloaded="no">
        <autodoc>GetGeometry() -&gt; Rect</autodoc>
        <docstring>Returns the bounding rectangle of the display whose index was
passed to the constructor.</docstring>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
        <docstring>Returns the display's name. A name is not available on all platforms.</docstring>
      </method>
      <method name="IsPrimary" type="bool" overloaded="no">
        <autodoc>IsPrimary() -&gt; bool</autodoc>
        <docstring>Returns true if the display is the primary display. The primary
display is the one whose index is 0.</docstring>
      </method>
      <method name="GetModes" type="PyObject" overloaded="no">
        <autodoc>GetModes(VideoMode mode=DefaultVideoMode) -&gt; [videoMode...]</autodoc>
        <docstring>Enumerate all video modes supported by this display matching the
given one (in the sense of VideoMode.Match()).

As any mode matches the default value of the argument and there
is always at least one video mode supported by display, the
returned array is only empty for the default value of the
argument if this function is not supported at all on this
platform.</docstring>
        <paramlist>
          <param name="mode" type="VideoMode" default="wxDefaultVideoMode"/>
        </paramlist>
      </method>
      <method name="GetCurrentMode" type="VideoMode" overloaded="no">
        <autodoc>GetCurrentMode() -&gt; VideoMode</autodoc>
        <docstring>Get the current video mode.</docstring>
      </method>
      <method name="ChangeMode" type="bool" overloaded="no">
        <autodoc>ChangeMode(VideoMode mode=DefaultVideoMode) -&gt; bool</autodoc>
        <docstring>Change current mode, return true if succeeded, false otherwise</docstring>
        <paramlist>
          <param name="mode" type="VideoMode" default="wxDefaultVideoMode"/>
        </paramlist>
      </method>
      <method name="ResetMode" type="" overloaded="no">
        <autodoc>ResetMode()</autodoc>
        <docstring>Restore the default video mode (just a more readable synonym)</docstring>
      </method>
    </class>
  </module>
  <module name="calendar">
    <import name="misc"/>
    <pythoncode> wx = core </pythoncode>
    <class name="CalendarDateAttr" oldname="wxCalendarDateAttr" module="calendar">
      <docstring>A set of customization attributes for a calendar date, which can be used to
control the look of the Calendar object.</docstring>
      <constructor name="CalendarDateAttr" overloaded="no">
        <autodoc>__init__(Colour colText=wxNullColour, Colour colBack=wxNullColour, 
    Colour colBorder=wxNullColour, Font font=wxNullFont, 
    int border=CAL_BORDER_NONE) -&gt; CalendarDateAttr</autodoc>
        <docstring>Create a CalendarDateAttr.</docstring>
        <paramlist>
          <param name="colText" type="Colour" default="wxNullColour"/>
          <param name="colBack" type="Colour" default="wxNullColour"/>
          <param name="colBorder" type="Colour" default="wxNullColour"/>
          <param name="font" type="Font" default="wxNullFont"/>
          <param name="border" type="wxCalendarDateBorder" default="wxCAL_BORDER_NONE"/>
        </paramlist>
      </constructor>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(Colour colText)</autodoc>
        <paramlist>
          <param name="colText" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="" overloaded="no">
        <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
        <paramlist>
          <param name="colBack" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBorderColour" type="" overloaded="no">
        <autodoc>SetBorderColour(Colour col)</autodoc>
        <paramlist>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetBorder" type="" overloaded="no">
        <autodoc>SetBorder(int border)</autodoc>
        <paramlist>
          <param name="border" type="wxCalendarDateBorder" default=""/>
        </paramlist>
      </method>
      <method name="SetHoliday" type="" overloaded="no">
        <autodoc>SetHoliday(bool holiday)</autodoc>
        <paramlist>
          <param name="holiday" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="HasTextColour" type="bool" overloaded="no">
        <autodoc>HasTextColour() -&gt; bool</autodoc>
      </method>
      <method name="HasBackgroundColour" type="bool" overloaded="no">
        <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
      </method>
      <method name="HasBorderColour" type="bool" overloaded="no">
        <autodoc>HasBorderColour() -&gt; bool</autodoc>
      </method>
      <method name="HasFont" type="bool" overloaded="no">
        <autodoc>HasFont() -&gt; bool</autodoc>
      </method>
      <method name="HasBorder" type="bool" overloaded="no">
        <autodoc>HasBorder() -&gt; bool</autodoc>
      </method>
      <method name="IsHoliday" type="bool" overloaded="no">
        <autodoc>IsHoliday() -&gt; bool</autodoc>
      </method>
      <method name="GetTextColour" type="Colour" overloaded="no">
        <autodoc>GetTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetBorderColour" type="Colour" overloaded="no">
        <autodoc>GetBorderColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
      </method>
      <method name="GetBorder" type="wxCalendarDateBorder" overloaded="no">
        <autodoc>GetBorder() -&gt; int</autodoc>
      </method>
    </class>
    <class name="CalendarEvent" oldname="wxCalendarEvent" module="calendar">
      <baseclass name="CommandEvent"/>
      <constructor name="CalendarEvent" overloaded="no">
        <autodoc>__init__(CalendarCtrl cal, wxEventType type) -&gt; CalendarEvent</autodoc>
        <paramlist>
          <param name="cal" type="wxCalendarCtrl" default=""/>
          <param name="type" type="wxEventType" default=""/>
        </paramlist>
      </constructor>
      <method name="GetDate" type="DateTime" overloaded="no">
        <autodoc>GetDate() -&gt; DateTime</autodoc>
      </method>
      <method name="SetDate" type="" overloaded="no">
        <autodoc>SetDate(DateTime date)</autodoc>
        <paramlist>
          <param name="date" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="SetWeekDay" type="" overloaded="no">
        <autodoc>SetWeekDay(int wd)</autodoc>
        <paramlist>
          <param name="wd" type="wxDateTime::WeekDay" default=""/>
        </paramlist>
      </method>
      <method name="GetWeekDay" type="wxDateTime::WeekDay" overloaded="no">
        <autodoc>GetWeekDay() -&gt; int</autodoc>
      </method>
    </class>
    <pythoncode>
EVT_CALENDAR =                 wx.PyEventBinder( wxEVT_CALENDAR_DOUBLECLICKED, 1)
EVT_CALENDAR_SEL_CHANGED =     wx.PyEventBinder( wxEVT_CALENDAR_SEL_CHANGED, 1)
EVT_CALENDAR_DAY =             wx.PyEventBinder( wxEVT_CALENDAR_DAY_CHANGED, 1)
EVT_CALENDAR_MONTH =           wx.PyEventBinder( wxEVT_CALENDAR_MONTH_CHANGED, 1)
EVT_CALENDAR_YEAR =            wx.PyEventBinder( wxEVT_CALENDAR_YEAR_CHANGED, 1)
EVT_CALENDAR_WEEKDAY_CLICKED = wx.PyEventBinder( wxEVT_CALENDAR_WEEKDAY_CLICKED, 1)
</pythoncode>
    <class name="CalendarCtrl" oldname="wxCalendarCtrl" module="calendar">
      <docstring>The calendar control allows the user to pick a date interactively.</docstring>
      <refdoc>The CalendarCtrl displays a window containing several parts: the control to
pick the month and the year at the top (either or both of them may be
disabled) and a month area below them which shows all the days in the
month. The user can move the current selection using the keyboard and select
the date (generating EVT_CALENDAR event) by pressing &lt;Return&gt; or double
clicking it.

It has advanced possibilities for the customization of its display. All global
settings (such as colours and fonts used) can, of course, be changed. But
also, the display style for each day in the month can be set independently
using CalendarDateAttr class.

An item without custom attributes is drawn with the default colours and font
and without border, but setting custom attributes with SetAttr allows to
modify its appearance. Just create a custom attribute object and set it for
the day you want to be displayed specially A day may be marked as being a
holiday, (even if it is not recognized as one by wx.DateTime) by using the
SetHoliday method.

As the attributes are specified for each day, they may change when the month
is changed, so you will often want to update them in an EVT_CALENDAR_MONTH
event handler.

 Styles
    CAL_SUNDAY_FIRST:         Show Sunday as the first day in the week
    CAL_MONDAY_FIRST:         Show Monday as the first day in the week
    CAL_SHOW_HOLIDAYS:         Highlight holidays in the calendar
    CAL_NO_YEAR_CHANGE:         Disable the year changing
    CAL_NO_MONTH_CHANGE: Disable the month (and, implicitly, the year) changing
    CAL_SHOW_SURROUNDING_WEEKS: Show the neighbouring weeks in the previous and next months
    CAL_SEQUENTIAL_MONTH_SELECTION: Use alternative, more compact, style for the month and year selection controls.

The default calendar style is wxCAL_SHOW_HOLIDAYS.

 Events
    EVT_CALENDAR:        A day was double clicked in the calendar.
    EVT_CALENDAR_SEL_CHANGED: The selected date changed.
    EVT_CALENDAR_DAY:     The selected day changed.
    EVT_CALENDAR_MONTH:  The selected month changed.
    EVT_CALENDAR_YEAR:    The selected year changed.
    EVT_CALENDAR_WEEKDAY_CLICKED:  User clicked on the week day header

Note that changing the selected date will result in either of
EVT_CALENDAR_DAY, MONTH or YEAR events and an EVT_CALENDAR_SEL_CHANGED event.
    
</refdoc>
      <baseclass name="Control"/>
      <constructor name="CalendarCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id, DateTime date=DefaultDateTime, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS, 
    String name=CalendarNameStr) -&gt; CalendarCtrl</autodoc>
        <docstring>Create and show a calendar control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="date" type="DateTime" default="wxDefaultDateTime"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS"/>
          <param name="name" type="String" default="wxPyCalendarNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreCalendarCtrl" overloaded="no">
        <autodoc>PreCalendarCtrl() -&gt; CalendarCtrl</autodoc>
        <docstring>Precreate a CalendarCtrl for 2-phase creation.</docstring>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, DateTime date=DefaultDateTime, 
    Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS, 
    String name=CalendarNameStr) -&gt; bool</autodoc>
        <docstring>Acutally create the GUI portion of the CalendarCtrl for 2-phase creation.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="date" type="DateTime" default="wxDefaultDateTime"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCAL_SHOW_HOLIDAYS|wxWANTS_CHARS"/>
          <param name="name" type="String" default="wxPyCalendarNameStr"/>
        </paramlist>
      </method>
      <method name="SetDate" type="" overloaded="no">
        <autodoc>SetDate(DateTime date)</autodoc>
        <docstring>Sets the current date.</docstring>
        <paramlist>
          <param name="date" type="DateTime" default=""/>
        </paramlist>
      </method>
      <method name="GetDate" type="DateTime" overloaded="no">
        <autodoc>GetDate() -&gt; DateTime</autodoc>
        <docstring>Gets the currently selected date.</docstring>
      </method>
      <method name="SetLowerDateLimit" type="bool" overloaded="no">
        <autodoc>SetLowerDateLimit(DateTime date=DefaultDateTime) -&gt; bool</autodoc>
        <docstring>set the range in which selection can occur</docstring>
        <paramlist>
          <param name="date" type="DateTime" default="wxDefaultDateTime"/>
        </paramlist>
      </method>
      <method name="SetUpperDateLimit" type="bool" overloaded="no">
        <autodoc>SetUpperDateLimit(DateTime date=DefaultDateTime) -&gt; bool</autodoc>
        <docstring>set the range in which selection can occur</docstring>
        <paramlist>
          <param name="date" type="DateTime" default="wxDefaultDateTime"/>
        </paramlist>
      </method>
      <method name="GetLowerDateLimit" type="DateTime" overloaded="no">
        <autodoc>GetLowerDateLimit() -&gt; DateTime</autodoc>
        <docstring>get the range in which selection can occur</docstring>
      </method>
      <method name="GetUpperDateLimit" type="DateTime" overloaded="no">
        <autodoc>GetUpperDateLimit() -&gt; DateTime</autodoc>
        <docstring>get the range in which selection can occur</docstring>
      </method>
      <method name="SetDateRange" type="bool" overloaded="no">
        <autodoc>SetDateRange(DateTime lowerdate=DefaultDateTime, DateTime upperdate=DefaultDateTime) -&gt; bool</autodoc>
        <docstring>set the range in which selection can occur</docstring>
        <paramlist>
          <param name="lowerdate" type="DateTime" default="wxDefaultDateTime"/>
          <param name="upperdate" type="DateTime" default="wxDefaultDateTime"/>
        </paramlist>
      </method>
      <method name="EnableYearChange" type="" overloaded="no">
        <autodoc>EnableYearChange(bool enable=True)</autodoc>
        <docstring>This function should be used instead of changing CAL_NO_YEAR_CHANGE
style bit directly. It allows or disallows the user to change the year
interactively.</docstring>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="EnableMonthChange" type="" overloaded="no">
        <autodoc>EnableMonthChange(bool enable=True)</autodoc>
        <docstring>This function should be used instead of changing CAL_NO_MONTH_CHANGE style
bit. It allows or disallows the user to change the month interactively. Note
that if the month can not be changed, the year can not be changed either.</docstring>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="EnableHolidayDisplay" type="" overloaded="no">
        <autodoc>EnableHolidayDisplay(bool display=True)</autodoc>
        <docstring>This function should be used instead of changing CAL_SHOW_HOLIDAYS style
bit directly. It enables or disables the special highlighting of the holidays.</docstring>
        <paramlist>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetHeaderColours" type="" overloaded="no">
        <autodoc>SetHeaderColours(Colour colFg, Colour colBg)</autodoc>
        <docstring>header colours are used for painting the weekdays at the top</docstring>
        <paramlist>
          <param name="colFg" type="Colour" default=""/>
          <param name="colBg" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetHeaderColourFg" type="Colour" overloaded="no">
        <autodoc>GetHeaderColourFg() -&gt; Colour</autodoc>
        <docstring>header colours are used for painting the weekdays at the top</docstring>
      </method>
      <method name="GetHeaderColourBg" type="Colour" overloaded="no">
        <autodoc>GetHeaderColourBg() -&gt; Colour</autodoc>
        <docstring>header colours are used for painting the weekdays at the top</docstring>
      </method>
      <method name="SetHighlightColours" type="" overloaded="no">
        <autodoc>SetHighlightColours(Colour colFg, Colour colBg)</autodoc>
        <docstring>highlight colour is used for the currently selected date</docstring>
        <paramlist>
          <param name="colFg" type="Colour" default=""/>
          <param name="colBg" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetHighlightColourFg" type="Colour" overloaded="no">
        <autodoc>GetHighlightColourFg() -&gt; Colour</autodoc>
        <docstring>highlight colour is used for the currently selected date</docstring>
      </method>
      <method name="GetHighlightColourBg" type="Colour" overloaded="no">
        <autodoc>GetHighlightColourBg() -&gt; Colour</autodoc>
        <docstring>highlight colour is used for the currently selected date</docstring>
      </method>
      <method name="SetHolidayColours" type="" overloaded="no">
        <autodoc>SetHolidayColours(Colour colFg, Colour colBg)</autodoc>
        <docstring>holiday colour is used for the holidays (if CAL_SHOW_HOLIDAYS style is used)</docstring>
        <paramlist>
          <param name="colFg" type="Colour" default=""/>
          <param name="colBg" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetHolidayColourFg" type="Colour" overloaded="no">
        <autodoc>GetHolidayColourFg() -&gt; Colour</autodoc>
        <docstring>holiday colour is used for the holidays (if CAL_SHOW_HOLIDAYS style is used)</docstring>
      </method>
      <method name="GetHolidayColourBg" type="Colour" overloaded="no">
        <autodoc>GetHolidayColourBg() -&gt; Colour</autodoc>
        <docstring>holiday colour is used for the holidays (if CAL_SHOW_HOLIDAYS style is used)</docstring>
      </method>
      <method name="GetAttr" type="CalendarDateAttr" overloaded="no">
        <autodoc>GetAttr(size_t day) -&gt; CalendarDateAttr</autodoc>
        <docstring>Returns the attribute for the given date (should be in the range 1...31).
The returned value may be None</docstring>
        <paramlist>
          <param name="day" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetAttr" type="" overloaded="no">
        <autodoc>SetAttr(size_t day, CalendarDateAttr attr)</autodoc>
        <docstring>Associates the attribute with the specified date (in the range 1...31).
If the attribute passed is None, the items attribute is cleared.</docstring>
        <paramlist>
          <param name="day" type="size_t" default=""/>
          <param name="attr" type="CalendarDateAttr" default=""/>
        </paramlist>
      </method>
      <method name="SetHoliday" type="" overloaded="no">
        <autodoc>SetHoliday(size_t day)</autodoc>
        <docstring>Marks the specified day as being a holiday in the current month.</docstring>
        <paramlist>
          <param name="day" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="ResetAttr" type="" overloaded="no">
        <autodoc>ResetAttr(size_t day)</autodoc>
        <docstring>Clears any attributes associated with the given day (in the range 1...31).</docstring>
        <paramlist>
          <param name="day" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="PyObject" overloaded="no">
        <autodoc>HitTest(Point pos) -&gt; (result, date, weekday)</autodoc>
        <docstring>Returns 3-tuple with information about the given position on the calendar
control.  The first value of the tuple is a result code and determines the
validity of the remaining two values.  The result codes are:

    CAL_HITTEST_NOWHERE:    hit outside of anything
    CAL_HITTEST_HEADER:     hit on the header, weekday is valid
    CAL_HITTEST_DAY:        hit on a day in the calendar, date is set.
</docstring>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetMonthControl" type="Control" overloaded="no">
        <autodoc>GetMonthControl() -&gt; Control</autodoc>
        <docstring>get the currently shown control for month</docstring>
      </method>
      <method name="GetYearControl" type="Control" overloaded="no">
        <autodoc>GetYearControl() -&gt; Control</autodoc>
        <docstring>get the currently shown control for year</docstring>
      </method>
    </class>
  </module>
  <module name="grid">
    <import name="windows"/>
    <pythoncode> wx = core </pythoncode>
    <class name="GridCellRenderer" oldname="wxGridCellRenderer" module="grid">
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetParameters" type="" overloaded="no">
        <autodoc>SetParameters(String params)</autodoc>
        <paramlist>
          <param name="params" type="String" default=""/>
        </paramlist>
      </method>
      <method name="IncRef" type="" overloaded="no">
        <autodoc>IncRef()</autodoc>
      </method>
      <method name="DecRef" type="" overloaded="no">
        <autodoc>DecRef()</autodoc>
      </method>
      <method name="Draw" type="" overloaded="no">
        <autodoc>Draw(Grid grid, GridCellAttr attr, DC dc, Rect rect, int row, 
    int col, bool isSelected)</autodoc>
        <paramlist>
          <param name="grid" type="wxGrid" default=""/>
          <param name="attr" type="wxGridCellAttr" default=""/>
          <param name="dc" type="DC" default=""/>
          <param name="rect" type="Rect" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="isSelected" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetBestSize" type="Size" overloaded="no">
        <autodoc>GetBestSize(Grid grid, GridCellAttr attr, DC dc, int row, int col) -&gt; Size</autodoc>
        <paramlist>
          <param name="grid" type="wxGrid" default=""/>
          <param name="attr" type="wxGridCellAttr" default=""/>
          <param name="dc" type="DC" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Clone" type="GridCellRenderer" overloaded="no">
        <autodoc>Clone() -&gt; GridCellRenderer</autodoc>
      </method>
    </class>
    <class name="PyGridCellRenderer" oldname="wxPyGridCellRenderer" module="grid">
      <baseclass name="GridCellRenderer"/>
      <constructor name="PyGridCellRenderer" overloaded="no">
        <autodoc>__init__() -&gt; PyGridCellRenderer</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_SetParameters" type="" overloaded="no">
        <autodoc>base_SetParameters(String params)</autodoc>
        <paramlist>
          <param name="params" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="GridCellStringRenderer" oldname="wxGridCellStringRenderer" module="grid">
      <baseclass name="GridCellRenderer"/>
      <constructor name="GridCellStringRenderer" overloaded="no">
        <autodoc>__init__() -&gt; GridCellStringRenderer</autodoc>
      </constructor>
    </class>
    <class name="GridCellNumberRenderer" oldname="wxGridCellNumberRenderer" module="grid">
      <baseclass name="GridCellStringRenderer"/>
      <constructor name="GridCellNumberRenderer" overloaded="no">
        <autodoc>__init__() -&gt; GridCellNumberRenderer</autodoc>
      </constructor>
    </class>
    <class name="GridCellFloatRenderer" oldname="wxGridCellFloatRenderer" module="grid">
      <baseclass name="GridCellStringRenderer"/>
      <constructor name="GridCellFloatRenderer" overloaded="no">
        <autodoc>__init__(int width=-1, int precision=-1) -&gt; GridCellFloatRenderer</autodoc>
        <paramlist>
          <param name="width" type="int" default="-1"/>
          <param name="precision" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPrecision" type="int" overloaded="no">
        <autodoc>GetPrecision() -&gt; int</autodoc>
      </method>
      <method name="SetPrecision" type="" overloaded="no">
        <autodoc>SetPrecision(int precision)</autodoc>
        <paramlist>
          <param name="precision" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="GridCellBoolRenderer" oldname="wxGridCellBoolRenderer" module="grid">
      <baseclass name="GridCellRenderer"/>
      <constructor name="GridCellBoolRenderer" overloaded="no">
        <autodoc>__init__() -&gt; GridCellBoolRenderer</autodoc>
      </constructor>
    </class>
    <class name="GridCellDateTimeRenderer" oldname="wxGridCellDateTimeRenderer" module="grid">
      <baseclass name="GridCellStringRenderer"/>
      <constructor name="GridCellDateTimeRenderer" overloaded="no">
        <autodoc>__init__(String outformat=DateTimeFormatStr, String informat=DateTimeFormatStr) -&gt; GridCellDateTimeRenderer</autodoc>
        <paramlist>
          <param name="outformat" type="String" default="wxPyDateTimeFormatStr"/>
          <param name="informat" type="String" default="wxPyDateTimeFormatStr"/>
        </paramlist>
      </constructor>
    </class>
    <class name="GridCellEnumRenderer" oldname="wxGridCellEnumRenderer" module="grid">
      <baseclass name="GridCellStringRenderer"/>
      <constructor name="GridCellEnumRenderer" overloaded="no">
        <autodoc>__init__(String choices=EmptyString) -&gt; GridCellEnumRenderer</autodoc>
        <paramlist>
          <param name="choices" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
    </class>
    <class name="GridCellAutoWrapStringRenderer" oldname="wxGridCellAutoWrapStringRenderer" module="grid">
      <baseclass name="GridCellStringRenderer"/>
      <constructor name="GridCellAutoWrapStringRenderer" overloaded="no">
        <autodoc>__init__() -&gt; GridCellAutoWrapStringRenderer</autodoc>
      </constructor>
    </class>
    <class name="GridCellEditor" oldname="wxGridCellEditor" module="grid">
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="IsCreated" type="bool" overloaded="no">
        <autodoc>IsCreated() -&gt; bool</autodoc>
      </method>
      <method name="GetControl" type="Control" overloaded="no">
        <autodoc>GetControl() -&gt; Control</autodoc>
      </method>
      <method name="SetControl" type="" overloaded="no">
        <autodoc>SetControl(Control control)</autodoc>
        <paramlist>
          <param name="control" type="Control" default=""/>
        </paramlist>
      </method>
      <method name="GetCellAttr" type="wxGridCellAttr" overloaded="no">
        <autodoc>GetCellAttr() -&gt; GridCellAttr</autodoc>
      </method>
      <method name="SetCellAttr" type="" overloaded="no">
        <autodoc>SetCellAttr(GridCellAttr attr)</autodoc>
        <paramlist>
          <param name="attr" type="wxGridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="SetParameters" type="" overloaded="no">
        <autodoc>SetParameters(String params)</autodoc>
        <paramlist>
          <param name="params" type="String" default=""/>
        </paramlist>
      </method>
      <method name="IncRef" type="" overloaded="no">
        <autodoc>IncRef()</autodoc>
      </method>
      <method name="DecRef" type="" overloaded="no">
        <autodoc>DecRef()</autodoc>
      </method>
      <method name="Create" type="" overloaded="no">
        <autodoc>Create(Window parent, int id, EvtHandler evtHandler)</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="evtHandler" type="EvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="BeginEdit" type="" overloaded="no">
        <autodoc>BeginEdit(int row, int col, Grid grid)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="grid" type="wxGrid" default=""/>
        </paramlist>
      </method>
      <method name="EndEdit" type="bool" overloaded="no">
        <autodoc>EndEdit(int row, int col, Grid grid) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="grid" type="wxGrid" default=""/>
        </paramlist>
      </method>
      <method name="Reset" type="" overloaded="no">
        <autodoc>Reset()</autodoc>
      </method>
      <method name="Clone" type="GridCellEditor" overloaded="no">
        <autodoc>Clone() -&gt; GridCellEditor</autodoc>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="Show" type="" overloaded="no">
        <autodoc>Show(bool show, GridCellAttr attr=None)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
          <param name="attr" type="wxGridCellAttr" default="NULL"/>
        </paramlist>
      </method>
      <method name="PaintBackground" type="" overloaded="no">
        <autodoc>PaintBackground(Rect rectCell, GridCellAttr attr)</autodoc>
        <paramlist>
          <param name="rectCell" type="Rect" default=""/>
          <param name="attr" type="wxGridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="IsAcceptedKey" type="bool" overloaded="no">
        <autodoc>IsAcceptedKey(KeyEvent event) -&gt; bool</autodoc>
        <paramlist>
          <param name="event" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="StartingKey" type="" overloaded="no">
        <autodoc>StartingKey(KeyEvent event)</autodoc>
        <paramlist>
          <param name="event" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="StartingClick" type="" overloaded="no">
        <autodoc>StartingClick()</autodoc>
      </method>
      <method name="HandleReturn" type="" overloaded="no">
        <autodoc>HandleReturn(KeyEvent event)</autodoc>
        <paramlist>
          <param name="event" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
      </method>
    </class>
    <class name="PyGridCellEditor" oldname="wxPyGridCellEditor" module="grid">
      <baseclass name="GridCellEditor"/>
      <constructor name="PyGridCellEditor" overloaded="no">
        <autodoc>__init__() -&gt; PyGridCellEditor</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_SetSize" type="" overloaded="no">
        <autodoc>base_SetSize(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="base_Show" type="" overloaded="no">
        <autodoc>base_Show(bool show, GridCellAttr attr=None)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
          <param name="attr" type="wxGridCellAttr" default="NULL"/>
        </paramlist>
      </method>
      <method name="base_PaintBackground" type="" overloaded="no">
        <autodoc>base_PaintBackground(Rect rectCell, GridCellAttr attr)</autodoc>
        <paramlist>
          <param name="rectCell" type="Rect" default=""/>
          <param name="attr" type="wxGridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="base_IsAcceptedKey" type="bool" overloaded="no">
        <autodoc>base_IsAcceptedKey(KeyEvent event) -&gt; bool</autodoc>
        <paramlist>
          <param name="event" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="base_StartingKey" type="" overloaded="no">
        <autodoc>base_StartingKey(KeyEvent event)</autodoc>
        <paramlist>
          <param name="event" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="base_StartingClick" type="" overloaded="no">
        <autodoc>base_StartingClick()</autodoc>
      </method>
      <method name="base_HandleReturn" type="" overloaded="no">
        <autodoc>base_HandleReturn(KeyEvent event)</autodoc>
        <paramlist>
          <param name="event" type="KeyEvent" default=""/>
        </paramlist>
      </method>
      <method name="base_Destroy" type="" overloaded="no">
        <autodoc>base_Destroy()</autodoc>
      </method>
      <method name="base_SetParameters" type="" overloaded="no">
        <autodoc>base_SetParameters(String params)</autodoc>
        <paramlist>
          <param name="params" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="GridCellTextEditor" oldname="wxGridCellTextEditor" module="grid">
      <baseclass name="GridCellEditor"/>
      <constructor name="GridCellTextEditor" overloaded="no">
        <autodoc>__init__() -&gt; GridCellTextEditor</autodoc>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
    </class>
    <class name="GridCellNumberEditor" oldname="wxGridCellNumberEditor" module="grid">
      <baseclass name="GridCellTextEditor"/>
      <constructor name="GridCellNumberEditor" overloaded="no">
        <autodoc>__init__(int min=-1, int max=-1) -&gt; GridCellNumberEditor</autodoc>
        <paramlist>
          <param name="min" type="int" default="-1"/>
          <param name="max" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
    </class>
    <class name="GridCellFloatEditor" oldname="wxGridCellFloatEditor" module="grid">
      <baseclass name="GridCellTextEditor"/>
      <constructor name="GridCellFloatEditor" overloaded="no">
        <autodoc>__init__() -&gt; GridCellFloatEditor</autodoc>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
    </class>
    <class name="GridCellBoolEditor" oldname="wxGridCellBoolEditor" module="grid">
      <baseclass name="GridCellEditor"/>
      <constructor name="GridCellBoolEditor" overloaded="no">
        <autodoc>__init__() -&gt; GridCellBoolEditor</autodoc>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
    </class>
    <class name="GridCellChoiceEditor" oldname="wxGridCellChoiceEditor" module="grid">
      <baseclass name="GridCellEditor"/>
      <constructor name="GridCellChoiceEditor" overloaded="no">
        <autodoc>__init__(int choices=0, String choices_array=None, bool allowOthers=False) -&gt; GridCellChoiceEditor</autodoc>
        <paramlist>
          <param name="choices" type="int" default="0"/>
          <param name="choices_array" type="String" default="NULL"/>
          <param name="allowOthers" type="bool" default="False"/>
        </paramlist>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
    </class>
    <class name="GridCellEnumEditor" oldname="wxGridCellEnumEditor" module="grid">
      <baseclass name="GridCellChoiceEditor"/>
      <constructor name="GridCellEnumEditor" overloaded="no">
        <autodoc>__init__(String choices=EmptyString) -&gt; GridCellEnumEditor</autodoc>
        <paramlist>
          <param name="choices" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
    </class>
    <class name="GridCellAutoWrapStringEditor" oldname="wxGridCellAutoWrapStringEditor" module="grid">
      <baseclass name="GridCellTextEditor"/>
      <constructor name="GridCellAutoWrapStringEditor" overloaded="no">
        <autodoc>__init__() -&gt; GridCellAutoWrapStringEditor</autodoc>
      </constructor>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
    </class>
    <class name="GridCellAttr" oldname="wxGridCellAttr" module="grid">
      <constructor name="GridCellAttr" overloaded="no">
        <autodoc>__init__(GridCellAttr attrDefault=None) -&gt; GridCellAttr</autodoc>
        <paramlist>
          <param name="attrDefault" type="GridCellAttr" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Clone" type="GridCellAttr" overloaded="no">
        <autodoc>Clone() -&gt; GridCellAttr</autodoc>
      </method>
      <method name="MergeWith" type="" overloaded="no">
        <autodoc>MergeWith(GridCellAttr mergefrom)</autodoc>
        <paramlist>
          <param name="mergefrom" type="GridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="IncRef" type="" overloaded="no">
        <autodoc>IncRef()</autodoc>
      </method>
      <method name="DecRef" type="" overloaded="no">
        <autodoc>DecRef()</autodoc>
      </method>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(Colour colText)</autodoc>
        <paramlist>
          <param name="colText" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="" overloaded="no">
        <autodoc>SetBackgroundColour(Colour colBack)</autodoc>
        <paramlist>
          <param name="colBack" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetAlignment" type="" overloaded="no">
        <autodoc>SetAlignment(int hAlign, int vAlign)</autodoc>
        <paramlist>
          <param name="hAlign" type="int" default=""/>
          <param name="vAlign" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(int num_rows, int num_cols)</autodoc>
        <paramlist>
          <param name="num_rows" type="int" default=""/>
          <param name="num_cols" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetOverflow" type="" overloaded="no">
        <autodoc>SetOverflow(bool allow=True)</autodoc>
        <paramlist>
          <param name="allow" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetReadOnly" type="" overloaded="no">
        <autodoc>SetReadOnly(bool isReadOnly=True)</autodoc>
        <paramlist>
          <param name="isReadOnly" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetRenderer" type="" overloaded="no">
        <autodoc>SetRenderer(GridCellRenderer renderer)</autodoc>
        <paramlist>
          <param name="renderer" type="GridCellRenderer" default=""/>
        </paramlist>
      </method>
      <method name="SetEditor" type="" overloaded="no">
        <autodoc>SetEditor(GridCellEditor editor)</autodoc>
        <paramlist>
          <param name="editor" type="GridCellEditor" default=""/>
        </paramlist>
      </method>
      <method name="SetKind" type="" overloaded="no">
        <autodoc>SetKind(int kind)</autodoc>
        <paramlist>
          <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
        </paramlist>
      </method>
      <method name="HasTextColour" type="bool" overloaded="no">
        <autodoc>HasTextColour() -&gt; bool</autodoc>
      </method>
      <method name="HasBackgroundColour" type="bool" overloaded="no">
        <autodoc>HasBackgroundColour() -&gt; bool</autodoc>
      </method>
      <method name="HasFont" type="bool" overloaded="no">
        <autodoc>HasFont() -&gt; bool</autodoc>
      </method>
      <method name="HasAlignment" type="bool" overloaded="no">
        <autodoc>HasAlignment() -&gt; bool</autodoc>
      </method>
      <method name="HasRenderer" type="bool" overloaded="no">
        <autodoc>HasRenderer() -&gt; bool</autodoc>
      </method>
      <method name="HasEditor" type="bool" overloaded="no">
        <autodoc>HasEditor() -&gt; bool</autodoc>
      </method>
      <method name="HasReadWriteMode" type="bool" overloaded="no">
        <autodoc>HasReadWriteMode() -&gt; bool</autodoc>
      </method>
      <method name="HasOverflowMode" type="bool" overloaded="no">
        <autodoc>HasOverflowMode() -&gt; bool</autodoc>
      </method>
      <method name="GetTextColour" type="Colour" overloaded="no">
        <autodoc>GetTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
      </method>
      <method name="GetAlignment" type="" overloaded="no">
        <autodoc>GetAlignment() -&gt; (hAlign, vAlign)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="" overloaded="no">
        <autodoc>GetSize() -&gt; (num_rows, num_cols)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetOverflow" type="bool" overloaded="no">
        <autodoc>GetOverflow() -&gt; bool</autodoc>
      </method>
      <method name="GetRenderer" type="GridCellRenderer" overloaded="no">
        <autodoc>GetRenderer(Grid grid, int row, int col) -&gt; GridCellRenderer</autodoc>
        <paramlist>
          <param name="grid" type="wxGrid" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetEditor" type="GridCellEditor" overloaded="no">
        <autodoc>GetEditor(Grid grid, int row, int col) -&gt; GridCellEditor</autodoc>
        <paramlist>
          <param name="grid" type="wxGrid" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsReadOnly" type="bool" overloaded="no">
        <autodoc>IsReadOnly() -&gt; bool</autodoc>
      </method>
      <method name="SetDefAttr" type="" overloaded="no">
        <autodoc>SetDefAttr(GridCellAttr defAttr)</autodoc>
        <paramlist>
          <param name="defAttr" type="GridCellAttr" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="GridCellAttrProvider" oldname="wxGridCellAttrProvider" module="grid">
      <constructor name="GridCellAttrProvider" overloaded="no">
        <autodoc>__init__() -&gt; GridCellAttrProvider</autodoc>
      </constructor>
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetAttr" type="GridCellAttr" overloaded="no">
        <autodoc>GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
        </paramlist>
      </method>
      <method name="SetAttr" type="" overloaded="no">
        <autodoc>SetAttr(GridCellAttr attr, int row, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRowAttr" type="" overloaded="no">
        <autodoc>SetRowAttr(GridCellAttr attr, int row)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColAttr" type="" overloaded="no">
        <autodoc>SetColAttr(GridCellAttr attr, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="UpdateAttrRows" type="" overloaded="no">
        <autodoc>UpdateAttrRows(size_t pos, int numRows)</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="numRows" type="int" default=""/>
        </paramlist>
      </method>
      <method name="UpdateAttrCols" type="" overloaded="no">
        <autodoc>UpdateAttrCols(size_t pos, int numCols)</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default=""/>
          <param name="numCols" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyGridCellAttrProvider" oldname="wxPyGridCellAttrProvider" module="grid">
      <baseclass name="GridCellAttrProvider"/>
      <constructor name="PyGridCellAttrProvider" overloaded="no">
        <autodoc>__init__() -&gt; PyGridCellAttrProvider</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_GetAttr" type="GridCellAttr" overloaded="no">
        <autodoc>base_GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
        </paramlist>
      </method>
      <method name="base_SetAttr" type="" overloaded="no">
        <autodoc>base_SetAttr(GridCellAttr attr, int row, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_SetRowAttr" type="" overloaded="no">
        <autodoc>base_SetRowAttr(GridCellAttr attr, int row)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_SetColAttr" type="" overloaded="no">
        <autodoc>base_SetColAttr(GridCellAttr attr, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="GridTableBase" oldname="wxGridTableBase" module="grid">
      <baseclass name="Object"/>
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetAttrProvider" type="" overloaded="no">
        <autodoc>SetAttrProvider(GridCellAttrProvider attrProvider)</autodoc>
        <paramlist>
          <param name="attrProvider" type="GridCellAttrProvider" default=""/>
        </paramlist>
      </method>
      <method name="GetAttrProvider" type="GridCellAttrProvider" overloaded="no">
        <autodoc>GetAttrProvider() -&gt; GridCellAttrProvider</autodoc>
      </method>
      <method name="SetView" type="" overloaded="no">
        <autodoc>SetView(Grid grid)</autodoc>
        <paramlist>
          <param name="grid" type="wxGrid" default=""/>
        </paramlist>
      </method>
      <method name="GetView" type="wxGrid" overloaded="no">
        <autodoc>GetView() -&gt; Grid</autodoc>
      </method>
      <method name="GetNumberRows" type="int" overloaded="no">
        <autodoc>GetNumberRows() -&gt; int</autodoc>
      </method>
      <method name="GetNumberCols" type="int" overloaded="no">
        <autodoc>GetNumberCols() -&gt; int</autodoc>
      </method>
      <method name="IsEmptyCell" type="bool" overloaded="no">
        <autodoc>IsEmptyCell(int row, int col) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue(int row, int col) -&gt; String</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(int row, int col, String value)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTypeName" type="String" overloaded="no">
        <autodoc>GetTypeName(int row, int col) -&gt; String</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CanGetValueAs" type="bool" overloaded="no">
        <autodoc>CanGetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="typeName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="CanSetValueAs" type="bool" overloaded="no">
        <autodoc>CanSetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="typeName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetValueAsLong" type="long" overloaded="no">
        <autodoc>GetValueAsLong(int row, int col) -&gt; long</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetValueAsDouble" type="double" overloaded="no">
        <autodoc>GetValueAsDouble(int row, int col) -&gt; double</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetValueAsBool" type="bool" overloaded="no">
        <autodoc>GetValueAsBool(int row, int col) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetValueAsLong" type="" overloaded="no">
        <autodoc>SetValueAsLong(int row, int col, long value)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="value" type="long" default=""/>
        </paramlist>
      </method>
      <method name="SetValueAsDouble" type="" overloaded="no">
        <autodoc>SetValueAsDouble(int row, int col, double value)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="value" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetValueAsBool" type="" overloaded="no">
        <autodoc>SetValueAsBool(int row, int col, bool value)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="value" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="InsertRows" type="bool" overloaded="no">
        <autodoc>InsertRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numRows" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="AppendRows" type="bool" overloaded="no">
        <autodoc>AppendRows(size_t numRows=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="numRows" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="DeleteRows" type="bool" overloaded="no">
        <autodoc>DeleteRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numRows" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="InsertCols" type="bool" overloaded="no">
        <autodoc>InsertCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numCols" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="AppendCols" type="bool" overloaded="no">
        <autodoc>AppendCols(size_t numCols=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="numCols" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="DeleteCols" type="bool" overloaded="no">
        <autodoc>DeleteCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numCols" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="GetRowLabelValue" type="String" overloaded="no">
        <autodoc>GetRowLabelValue(int row) -&gt; String</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetColLabelValue" type="String" overloaded="no">
        <autodoc>GetColLabelValue(int col) -&gt; String</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRowLabelValue" type="" overloaded="no">
        <autodoc>SetRowLabelValue(int row, String value)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetColLabelValue" type="" overloaded="no">
        <autodoc>SetColLabelValue(int col, String value)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="CanHaveAttributes" type="bool" overloaded="no">
        <autodoc>CanHaveAttributes() -&gt; bool</autodoc>
      </method>
      <method name="GetAttr" type="GridCellAttr" overloaded="no">
        <autodoc>GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
        </paramlist>
      </method>
      <method name="SetAttr" type="" overloaded="no">
        <autodoc>SetAttr(GridCellAttr attr, int row, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRowAttr" type="" overloaded="no">
        <autodoc>SetRowAttr(GridCellAttr attr, int row)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColAttr" type="" overloaded="no">
        <autodoc>SetColAttr(GridCellAttr attr, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyGridTableBase" oldname="wxPyGridTableBase" module="grid">
      <baseclass name="GridTableBase"/>
      <constructor name="PyGridTableBase" overloaded="no">
        <autodoc>__init__() -&gt; PyGridTableBase</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Destroy" type="" overloaded="no">
        <autodoc>Destroy()</autodoc>
        <docstring>Deletes the C++ object this Python object is a proxy for.</docstring>
      </method>
      <method name="base_GetTypeName" type="String" overloaded="no">
        <autodoc>base_GetTypeName(int row, int col) -&gt; String</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_CanGetValueAs" type="bool" overloaded="no">
        <autodoc>base_CanGetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="typeName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="base_CanSetValueAs" type="bool" overloaded="no">
        <autodoc>base_CanSetValueAs(int row, int col, String typeName) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="typeName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="base_Clear" type="" overloaded="no">
        <autodoc>base_Clear()</autodoc>
      </method>
      <method name="base_InsertRows" type="bool" overloaded="no">
        <autodoc>base_InsertRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numRows" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="base_AppendRows" type="bool" overloaded="no">
        <autodoc>base_AppendRows(size_t numRows=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="numRows" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="base_DeleteRows" type="bool" overloaded="no">
        <autodoc>base_DeleteRows(size_t pos=0, size_t numRows=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numRows" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="base_InsertCols" type="bool" overloaded="no">
        <autodoc>base_InsertCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numCols" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="base_AppendCols" type="bool" overloaded="no">
        <autodoc>base_AppendCols(size_t numCols=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="numCols" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="base_DeleteCols" type="bool" overloaded="no">
        <autodoc>base_DeleteCols(size_t pos=0, size_t numCols=1) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="size_t" default="0"/>
          <param name="numCols" type="size_t" default="1"/>
        </paramlist>
      </method>
      <method name="base_GetRowLabelValue" type="String" overloaded="no">
        <autodoc>base_GetRowLabelValue(int row) -&gt; String</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_GetColLabelValue" type="String" overloaded="no">
        <autodoc>base_GetColLabelValue(int col) -&gt; String</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_SetRowLabelValue" type="" overloaded="no">
        <autodoc>base_SetRowLabelValue(int row, String value)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="base_SetColLabelValue" type="" overloaded="no">
        <autodoc>base_SetColLabelValue(int col, String value)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="base_CanHaveAttributes" type="bool" overloaded="no">
        <autodoc>base_CanHaveAttributes() -&gt; bool</autodoc>
      </method>
      <method name="base_GetAttr" type="GridCellAttr" overloaded="no">
        <autodoc>base_GetAttr(int row, int col, int kind) -&gt; GridCellAttr</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="kind" type="wxGridCellAttr::wxAttrKind" default=""/>
        </paramlist>
      </method>
      <method name="base_SetAttr" type="" overloaded="no">
        <autodoc>base_SetAttr(GridCellAttr attr, int row, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_SetRowAttr" type="" overloaded="no">
        <autodoc>base_SetRowAttr(GridCellAttr attr, int row)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_SetColAttr" type="" overloaded="no">
        <autodoc>base_SetColAttr(GridCellAttr attr, int col)</autodoc>
        <paramlist>
          <param name="attr" type="GridCellAttr" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="GridStringTable" oldname="wxGridStringTable" module="grid">
      <baseclass name="GridTableBase"/>
      <constructor name="GridStringTable" overloaded="no">
        <autodoc>__init__(int numRows=0, int numCols=0) -&gt; GridStringTable</autodoc>
        <paramlist>
          <param name="numRows" type="int" default="0"/>
          <param name="numCols" type="int" default="0"/>
        </paramlist>
      </constructor>
    </class>
    <class name="GridTableMessage" oldname="wxGridTableMessage" module="grid">
      <constructor name="GridTableMessage" overloaded="no">
        <autodoc>__init__(GridTableBase table, int id, int comInt1=-1, int comInt2=-1) -&gt; GridTableMessage</autodoc>
        <paramlist>
          <param name="table" type="GridTableBase" default=""/>
          <param name="id" type="int" default=""/>
          <param name="comInt1" type="int" default="-1"/>
          <param name="comInt2" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <destructor name="~wxGridTableMessage" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetTableObject" type="" overloaded="no">
        <autodoc>SetTableObject(GridTableBase table)</autodoc>
        <paramlist>
          <param name="table" type="GridTableBase" default=""/>
        </paramlist>
      </method>
      <method name="GetTableObject" type="GridTableBase" overloaded="no">
        <autodoc>GetTableObject() -&gt; GridTableBase</autodoc>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(int id)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetId" type="int" overloaded="no">
        <autodoc>GetId() -&gt; int</autodoc>
      </method>
      <method name="SetCommandInt" type="" overloaded="no">
        <autodoc>SetCommandInt(int comInt1)</autodoc>
        <paramlist>
          <param name="comInt1" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCommandInt" type="int" overloaded="no">
        <autodoc>GetCommandInt() -&gt; int</autodoc>
      </method>
      <method name="SetCommandInt2" type="" overloaded="no">
        <autodoc>SetCommandInt2(int comInt2)</autodoc>
        <paramlist>
          <param name="comInt2" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCommandInt2" type="int" overloaded="no">
        <autodoc>GetCommandInt2() -&gt; int</autodoc>
      </method>
    </class>
    <class name="GridCellCoords" oldname="wxGridCellCoords" module="grid">
      <constructor name="GridCellCoords" overloaded="no">
        <autodoc>__init__(int r=-1, int c=-1) -&gt; GridCellCoords</autodoc>
        <paramlist>
          <param name="r" type="int" default="-1"/>
          <param name="c" type="int" default="-1"/>
        </paramlist>
      </constructor>
      <destructor name="~wxGridCellCoords" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="GetRow" type="int" overloaded="no">
        <autodoc>GetRow() -&gt; int</autodoc>
      </method>
      <method name="SetRow" type="" overloaded="no">
        <autodoc>SetRow(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCol" type="int" overloaded="no">
        <autodoc>GetCol() -&gt; int</autodoc>
      </method>
      <method name="SetCol" type="" overloaded="no">
        <autodoc>SetCol(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(int row, int col)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="__eq__" type="bool" overloaded="no">
        <autodoc>__eq__(GridCellCoords other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="GridCellCoords" default=""/>
        </paramlist>
      </method>
      <method name="__ne__" type="bool" overloaded="no">
        <autodoc>__ne__(GridCellCoords other) -&gt; bool</autodoc>
        <paramlist>
          <param name="other" type="GridCellCoords" default=""/>
        </paramlist>
      </method>
      <method name="asTuple" type="PyObject" overloaded="no">
        <autodoc>asTuple() -&gt; PyObject</autodoc>
      </method>
    </class>
    <class name="Grid" oldname="wxGrid" module="grid">
      <baseclass name="ScrolledWindow"/>
      <constructor name="Grid" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=WANTS_CHARS, 
    String name=PanelNameStr) -&gt; Grid</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxWANTS_CHARS"/>
          <param name="name" type="String" default="wxPyPanelNameStr"/>
        </paramlist>
      </constructor>
      <method name="CreateGrid" type="bool" overloaded="no">
        <autodoc>CreateGrid(int numRows, int numCols, WXGRIDSELECTIONMODES selmode=wxGridSelectCells) -&gt; bool</autodoc>
        <paramlist>
          <param name="numRows" type="int" default=""/>
          <param name="numCols" type="int" default=""/>
          <param name="selmode" type="WXGRIDSELECTIONMODES" default="wxGrid::wxGridSelectCells"/>
        </paramlist>
      </method>
      <method name="SetSelectionMode" type="" overloaded="no">
        <autodoc>SetSelectionMode(WXGRIDSELECTIONMODES selmode)</autodoc>
        <paramlist>
          <param name="selmode" type="WXGRIDSELECTIONMODES" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectionMode" type="WXGRIDSELECTIONMODES" overloaded="no">
        <autodoc>GetSelectionMode() -&gt; WXGRIDSELECTIONMODES</autodoc>
      </method>
      <method name="GetNumberRows" type="int" overloaded="no">
        <autodoc>GetNumberRows() -&gt; int</autodoc>
      </method>
      <method name="GetNumberCols" type="int" overloaded="no">
        <autodoc>GetNumberCols() -&gt; int</autodoc>
      </method>
      <method name="ProcessTableMessage" type="bool" overloaded="no">
        <autodoc>ProcessTableMessage(GridTableMessage ??) -&gt; bool</autodoc>
        <paramlist>
          <param name="" type="GridTableMessage" default=""/>
        </paramlist>
      </method>
      <method name="GetTable" type="GridTableBase" overloaded="no">
        <autodoc>GetTable() -&gt; GridTableBase</autodoc>
      </method>
      <method name="SetTable" type="bool" overloaded="no">
        <autodoc>SetTable(GridTableBase table, bool takeOwnership=False, WXGRIDSELECTIONMODES selmode=wxGridSelectCells) -&gt; bool</autodoc>
        <paramlist>
          <param name="table" type="GridTableBase" default=""/>
          <param name="takeOwnership" type="bool" default="False"/>
          <param name="selmode" type="WXGRIDSELECTIONMODES" default="wxGrid::wxGridSelectCells"/>
        </paramlist>
      </method>
      <method name="ClearGrid" type="" overloaded="no">
        <autodoc>ClearGrid()</autodoc>
      </method>
      <method name="InsertRows" type="bool" overloaded="no">
        <autodoc>InsertRows(int pos=0, int numRows=1, bool updateLabels=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="int" default="0"/>
          <param name="numRows" type="int" default="1"/>
          <param name="updateLabels" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="AppendRows" type="bool" overloaded="no">
        <autodoc>AppendRows(int numRows=1, bool updateLabels=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="numRows" type="int" default="1"/>
          <param name="updateLabels" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DeleteRows" type="bool" overloaded="no">
        <autodoc>DeleteRows(int pos=0, int numRows=1, bool updateLabels=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="int" default="0"/>
          <param name="numRows" type="int" default="1"/>
          <param name="updateLabels" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="InsertCols" type="bool" overloaded="no">
        <autodoc>InsertCols(int pos=0, int numCols=1, bool updateLabels=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="int" default="0"/>
          <param name="numCols" type="int" default="1"/>
          <param name="updateLabels" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="AppendCols" type="bool" overloaded="no">
        <autodoc>AppendCols(int numCols=1, bool updateLabels=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="numCols" type="int" default="1"/>
          <param name="updateLabels" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DeleteCols" type="bool" overloaded="no">
        <autodoc>DeleteCols(int pos=0, int numCols=1, bool updateLabels=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="pos" type="int" default="0"/>
          <param name="numCols" type="int" default="1"/>
          <param name="updateLabels" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DrawCellHighlight" type="" overloaded="no">
        <autodoc>DrawCellHighlight(DC dc, GridCellAttr attr)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="attr" type="GridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="DrawTextRectangle" type="" overloaded="no">
        <autodoc>DrawTextRectangle(DC dc, String ??, Rect ??, int horizontalAlignment=LEFT, 
    int verticalAlignment=TOP, int textOrientation=HORIZONTAL)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="" type="String" default=""/>
          <param name="" type="Rect" default=""/>
          <param name="horizontalAlignment" type="int" default="wxLEFT"/>
          <param name="verticalAlignment" type="int" default="wxTOP"/>
          <param name="textOrientation" type="int" default="wxHORIZONTAL"/>
        </paramlist>
      </method>
      <method name="GetTextBoxSize" type="" overloaded="no">
        <autodoc>GetTextBoxSize(DC dc, list lines) -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="lines" type="wxArrayString" default=""/>
          <param name="OUTPUT" type="long" default=""/>
          <param name="OUTPUT" type="long" default=""/>
        </paramlist>
      </method>
      <method name="BeginBatch" type="" overloaded="no">
        <autodoc>BeginBatch()</autodoc>
      </method>
      <method name="EndBatch" type="" overloaded="no">
        <autodoc>EndBatch()</autodoc>
      </method>
      <method name="GetBatchCount" type="int" overloaded="no">
        <autodoc>GetBatchCount() -&gt; int</autodoc>
      </method>
      <method name="ForceRefresh" type="" overloaded="no">
        <autodoc>ForceRefresh()</autodoc>
      </method>
      <method name="IsEditable" type="bool" overloaded="no">
        <autodoc>IsEditable() -&gt; bool</autodoc>
      </method>
      <method name="EnableEditing" type="" overloaded="no">
        <autodoc>EnableEditing(bool edit)</autodoc>
        <paramlist>
          <param name="edit" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="EnableCellEditControl" type="" overloaded="no">
        <autodoc>EnableCellEditControl(bool enable=True)</autodoc>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DisableCellEditControl" type="" overloaded="no">
        <autodoc>DisableCellEditControl()</autodoc>
      </method>
      <method name="CanEnableCellControl" type="bool" overloaded="no">
        <autodoc>CanEnableCellControl() -&gt; bool</autodoc>
      </method>
      <method name="IsCellEditControlEnabled" type="bool" overloaded="no">
        <autodoc>IsCellEditControlEnabled() -&gt; bool</autodoc>
      </method>
      <method name="IsCellEditControlShown" type="bool" overloaded="no">
        <autodoc>IsCellEditControlShown() -&gt; bool</autodoc>
      </method>
      <method name="IsCurrentCellReadOnly" type="bool" overloaded="no">
        <autodoc>IsCurrentCellReadOnly() -&gt; bool</autodoc>
      </method>
      <method name="ShowCellEditControl" type="" overloaded="no">
        <autodoc>ShowCellEditControl()</autodoc>
      </method>
      <method name="HideCellEditControl" type="" overloaded="no">
        <autodoc>HideCellEditControl()</autodoc>
      </method>
      <method name="SaveEditControlValue" type="" overloaded="no">
        <autodoc>SaveEditControlValue()</autodoc>
      </method>
      <method name="XYToCell" type="GridCellCoords" overloaded="no">
        <autodoc>XYToCell(int x, int y) -&gt; GridCellCoords</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="YToRow" type="int" overloaded="no">
        <autodoc>YToRow(int y) -&gt; int</autodoc>
        <paramlist>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="XToCol" type="int" overloaded="no">
        <autodoc>XToCol(int x) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="YToEdgeOfRow" type="int" overloaded="no">
        <autodoc>YToEdgeOfRow(int y) -&gt; int</autodoc>
        <paramlist>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="XToEdgeOfCol" type="int" overloaded="no">
        <autodoc>XToEdgeOfCol(int x) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CellToRect" type="Rect" overloaded="no">
        <autodoc>CellToRect(int row, int col) -&gt; Rect</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetGridCursorRow" type="int" overloaded="no">
        <autodoc>GetGridCursorRow() -&gt; int</autodoc>
      </method>
      <method name="GetGridCursorCol" type="int" overloaded="no">
        <autodoc>GetGridCursorCol() -&gt; int</autodoc>
      </method>
      <method name="IsVisible" type="bool" overloaded="no">
        <autodoc>IsVisible(int row, int col, bool wholeCellVisible=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="wholeCellVisible" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="MakeCellVisible" type="" overloaded="no">
        <autodoc>MakeCellVisible(int row, int col)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetGridCursor" type="" overloaded="no">
        <autodoc>SetGridCursor(int row, int col)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MoveCursorUp" type="bool" overloaded="no">
        <autodoc>MoveCursorUp(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="MoveCursorDown" type="bool" overloaded="no">
        <autodoc>MoveCursorDown(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="MoveCursorLeft" type="bool" overloaded="no">
        <autodoc>MoveCursorLeft(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="MoveCursorRight" type="bool" overloaded="no">
        <autodoc>MoveCursorRight(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="MovePageDown" type="bool" overloaded="no">
        <autodoc>MovePageDown() -&gt; bool</autodoc>
      </method>
      <method name="MovePageUp" type="bool" overloaded="no">
        <autodoc>MovePageUp() -&gt; bool</autodoc>
      </method>
      <method name="MoveCursorUpBlock" type="bool" overloaded="no">
        <autodoc>MoveCursorUpBlock(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="MoveCursorDownBlock" type="bool" overloaded="no">
        <autodoc>MoveCursorDownBlock(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="MoveCursorLeftBlock" type="bool" overloaded="no">
        <autodoc>MoveCursorLeftBlock(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="MoveCursorRightBlock" type="bool" overloaded="no">
        <autodoc>MoveCursorRightBlock(bool expandSelection) -&gt; bool</autodoc>
        <paramlist>
          <param name="expandSelection" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultRowLabelSize" type="int" overloaded="no">
        <autodoc>GetDefaultRowLabelSize() -&gt; int</autodoc>
      </method>
      <method name="GetRowLabelSize" type="int" overloaded="no">
        <autodoc>GetRowLabelSize() -&gt; int</autodoc>
      </method>
      <method name="GetDefaultColLabelSize" type="int" overloaded="no">
        <autodoc>GetDefaultColLabelSize() -&gt; int</autodoc>
      </method>
      <method name="GetColLabelSize" type="int" overloaded="no">
        <autodoc>GetColLabelSize() -&gt; int</autodoc>
      </method>
      <method name="GetLabelBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetLabelBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetLabelTextColour" type="Colour" overloaded="no">
        <autodoc>GetLabelTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetLabelFont" type="Font" overloaded="no">
        <autodoc>GetLabelFont() -&gt; Font</autodoc>
      </method>
      <method name="GetRowLabelAlignment" type="" overloaded="no">
        <autodoc>GetRowLabelAlignment() -&gt; (horiz, vert)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetColLabelAlignment" type="" overloaded="no">
        <autodoc>GetColLabelAlignment() -&gt; (horiz, vert)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetColLabelTextOrientation" type="int" overloaded="no">
        <autodoc>GetColLabelTextOrientation() -&gt; int</autodoc>
      </method>
      <method name="GetRowLabelValue" type="String" overloaded="no">
        <autodoc>GetRowLabelValue(int row) -&gt; String</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetColLabelValue" type="String" overloaded="no">
        <autodoc>GetColLabelValue(int col) -&gt; String</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetGridLineColour" type="Colour" overloaded="no">
        <autodoc>GetGridLineColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetCellHighlightColour" type="Colour" overloaded="no">
        <autodoc>GetCellHighlightColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetCellHighlightPenWidth" type="int" overloaded="no">
        <autodoc>GetCellHighlightPenWidth() -&gt; int</autodoc>
      </method>
      <method name="GetCellHighlightROPenWidth" type="int" overloaded="no">
        <autodoc>GetCellHighlightROPenWidth() -&gt; int</autodoc>
      </method>
      <method name="SetRowLabelSize" type="" overloaded="no">
        <autodoc>SetRowLabelSize(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColLabelSize" type="" overloaded="no">
        <autodoc>SetColLabelSize(int height)</autodoc>
        <paramlist>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLabelBackgroundColour" type="" overloaded="no">
        <autodoc>SetLabelBackgroundColour(Colour ??)</autodoc>
        <paramlist>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetLabelTextColour" type="" overloaded="no">
        <autodoc>SetLabelTextColour(Colour ??)</autodoc>
        <paramlist>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetLabelFont" type="" overloaded="no">
        <autodoc>SetLabelFont(Font ??)</autodoc>
        <paramlist>
          <param name="" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetRowLabelAlignment" type="" overloaded="no">
        <autodoc>SetRowLabelAlignment(int horiz, int vert)</autodoc>
        <paramlist>
          <param name="horiz" type="int" default=""/>
          <param name="vert" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColLabelAlignment" type="" overloaded="no">
        <autodoc>SetColLabelAlignment(int horiz, int vert)</autodoc>
        <paramlist>
          <param name="horiz" type="int" default=""/>
          <param name="vert" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColLabelTextOrientation" type="" overloaded="no">
        <autodoc>SetColLabelTextOrientation(int textOrientation)</autodoc>
        <paramlist>
          <param name="textOrientation" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRowLabelValue" type="" overloaded="no">
        <autodoc>SetRowLabelValue(int row, String ??)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetColLabelValue" type="" overloaded="no">
        <autodoc>SetColLabelValue(int col, String ??)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetGridLineColour" type="" overloaded="no">
        <autodoc>SetGridLineColour(Colour ??)</autodoc>
        <paramlist>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetCellHighlightColour" type="" overloaded="no">
        <autodoc>SetCellHighlightColour(Colour ??)</autodoc>
        <paramlist>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetCellHighlightPenWidth" type="" overloaded="no">
        <autodoc>SetCellHighlightPenWidth(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCellHighlightROPenWidth" type="" overloaded="no">
        <autodoc>SetCellHighlightROPenWidth(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="EnableDragRowSize" type="" overloaded="no">
        <autodoc>EnableDragRowSize(bool enable=True)</autodoc>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DisableDragRowSize" type="" overloaded="no">
        <autodoc>DisableDragRowSize()</autodoc>
      </method>
      <method name="CanDragRowSize" type="bool" overloaded="no">
        <autodoc>CanDragRowSize() -&gt; bool</autodoc>
      </method>
      <method name="EnableDragColSize" type="" overloaded="no">
        <autodoc>EnableDragColSize(bool enable=True)</autodoc>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DisableDragColSize" type="" overloaded="no">
        <autodoc>DisableDragColSize()</autodoc>
      </method>
      <method name="CanDragColSize" type="bool" overloaded="no">
        <autodoc>CanDragColSize() -&gt; bool</autodoc>
      </method>
      <method name="EnableDragGridSize" type="" overloaded="no">
        <autodoc>EnableDragGridSize(bool enable=True)</autodoc>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="DisableDragGridSize" type="" overloaded="no">
        <autodoc>DisableDragGridSize()</autodoc>
      </method>
      <method name="CanDragGridSize" type="bool" overloaded="no">
        <autodoc>CanDragGridSize() -&gt; bool</autodoc>
      </method>
      <method name="SetAttr" type="" overloaded="no">
        <autodoc>SetAttr(int row, int col, GridCellAttr attr)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="attr" type="GridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="SetRowAttr" type="" overloaded="no">
        <autodoc>SetRowAttr(int row, GridCellAttr attr)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="attr" type="GridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="SetColAttr" type="" overloaded="no">
        <autodoc>SetColAttr(int col, GridCellAttr attr)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="attr" type="GridCellAttr" default=""/>
        </paramlist>
      </method>
      <method name="SetColFormatBool" type="" overloaded="no">
        <autodoc>SetColFormatBool(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColFormatNumber" type="" overloaded="no">
        <autodoc>SetColFormatNumber(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColFormatFloat" type="" overloaded="no">
        <autodoc>SetColFormatFloat(int col, int width=-1, int precision=-1)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="width" type="int" default="-1"/>
          <param name="precision" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="SetColFormatCustom" type="" overloaded="no">
        <autodoc>SetColFormatCustom(int col, String typeName)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="typeName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="EnableGridLines" type="" overloaded="no">
        <autodoc>EnableGridLines(bool enable=True)</autodoc>
        <paramlist>
          <param name="enable" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GridLinesEnabled" type="bool" overloaded="no">
        <autodoc>GridLinesEnabled() -&gt; bool</autodoc>
      </method>
      <method name="GetDefaultRowSize" type="int" overloaded="no">
        <autodoc>GetDefaultRowSize() -&gt; int</autodoc>
      </method>
      <method name="GetRowSize" type="int" overloaded="no">
        <autodoc>GetRowSize(int row) -&gt; int</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultColSize" type="int" overloaded="no">
        <autodoc>GetDefaultColSize() -&gt; int</autodoc>
      </method>
      <method name="GetColSize" type="int" overloaded="no">
        <autodoc>GetColSize(int col) -&gt; int</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultCellBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetDefaultCellBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetCellBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetCellBackgroundColour(int row, int col) -&gt; Colour</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultCellTextColour" type="Colour" overloaded="no">
        <autodoc>GetDefaultCellTextColour() -&gt; Colour</autodoc>
      </method>
      <method name="GetCellTextColour" type="Colour" overloaded="no">
        <autodoc>GetCellTextColour(int row, int col) -&gt; Colour</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultCellFont" type="Font" overloaded="no">
        <autodoc>GetDefaultCellFont() -&gt; Font</autodoc>
      </method>
      <method name="GetCellFont" type="Font" overloaded="no">
        <autodoc>GetCellFont(int row, int col) -&gt; Font</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultCellAlignment" type="" overloaded="no">
        <autodoc>GetDefaultCellAlignment() -&gt; (horiz, vert)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCellAlignment" type="" overloaded="no">
        <autodoc>GetCellAlignment() -&gt; (horiz, vert)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultCellOverflow" type="bool" overloaded="no">
        <autodoc>GetDefaultCellOverflow() -&gt; bool</autodoc>
      </method>
      <method name="GetCellOverflow" type="bool" overloaded="no">
        <autodoc>GetCellOverflow(int row, int col) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCellSize" type="" overloaded="no">
        <autodoc>GetCellSize(int row, int col) -&gt; (num_rows, num_cols)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultRowSize" type="" overloaded="no">
        <autodoc>SetDefaultRowSize(int height, bool resizeExistingRows=False)</autodoc>
        <paramlist>
          <param name="height" type="int" default=""/>
          <param name="resizeExistingRows" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="SetRowSize" type="" overloaded="no">
        <autodoc>SetRowSize(int row, int height)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultColSize" type="" overloaded="no">
        <autodoc>SetDefaultColSize(int width, bool resizeExistingCols=False)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="resizeExistingCols" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="SetColSize" type="" overloaded="no">
        <autodoc>SetColSize(int col, int width)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AutoSizeColumn" type="" overloaded="no">
        <autodoc>AutoSizeColumn(int col, bool setAsMin=True)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="setAsMin" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="AutoSizeRow" type="" overloaded="no">
        <autodoc>AutoSizeRow(int row, bool setAsMin=True)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="setAsMin" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="AutoSizeColumns" type="" overloaded="no">
        <autodoc>AutoSizeColumns(bool setAsMin=True)</autodoc>
        <paramlist>
          <param name="setAsMin" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="AutoSizeRows" type="" overloaded="no">
        <autodoc>AutoSizeRows(bool setAsMin=True)</autodoc>
        <paramlist>
          <param name="setAsMin" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="AutoSize" type="" overloaded="no">
        <autodoc>AutoSize()</autodoc>
      </method>
      <method name="AutoSizeRowLabelSize" type="" overloaded="no">
        <autodoc>AutoSizeRowLabelSize(int row)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AutoSizeColLabelSize" type="" overloaded="no">
        <autodoc>AutoSizeColLabelSize(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColMinimalWidth" type="" overloaded="no">
        <autodoc>SetColMinimalWidth(int col, int width)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRowMinimalHeight" type="" overloaded="no">
        <autodoc>SetRowMinimalHeight(int row, int width)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetColMinimalAcceptableWidth" type="" overloaded="no">
        <autodoc>SetColMinimalAcceptableWidth(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetRowMinimalAcceptableHeight" type="" overloaded="no">
        <autodoc>SetRowMinimalAcceptableHeight(int width)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetColMinimalAcceptableWidth" type="int" overloaded="no">
        <autodoc>GetColMinimalAcceptableWidth() -&gt; int</autodoc>
      </method>
      <method name="GetRowMinimalAcceptableHeight" type="int" overloaded="no">
        <autodoc>GetRowMinimalAcceptableHeight() -&gt; int</autodoc>
      </method>
      <method name="SetDefaultCellBackgroundColour" type="" overloaded="no">
        <autodoc>SetDefaultCellBackgroundColour(Colour ??)</autodoc>
        <paramlist>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetCellBackgroundColour" type="" overloaded="no">
        <autodoc>SetCellBackgroundColour(int row, int col, Colour ??)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultCellTextColour" type="" overloaded="no">
        <autodoc>SetDefaultCellTextColour(Colour ??)</autodoc>
        <paramlist>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetCellTextColour" type="" overloaded="no">
        <autodoc>SetCellTextColour(int row, int col, Colour ??)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultCellFont" type="" overloaded="no">
        <autodoc>SetDefaultCellFont(Font ??)</autodoc>
        <paramlist>
          <param name="" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetCellFont" type="" overloaded="no">
        <autodoc>SetCellFont(int row, int col, Font ??)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultCellAlignment" type="" overloaded="no">
        <autodoc>SetDefaultCellAlignment(int horiz, int vert)</autodoc>
        <paramlist>
          <param name="horiz" type="int" default=""/>
          <param name="vert" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCellAlignment" type="" overloaded="no">
        <autodoc>SetCellAlignment(int row, int col, int horiz, int vert)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="horiz" type="int" default=""/>
          <param name="vert" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultCellOverflow" type="" overloaded="no">
        <autodoc>SetDefaultCellOverflow(bool allow)</autodoc>
        <paramlist>
          <param name="allow" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetCellOverflow" type="" overloaded="no">
        <autodoc>SetCellOverflow(int row, int col, bool allow)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="allow" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetCellSize" type="" overloaded="no">
        <autodoc>SetCellSize(int row, int col, int num_rows, int num_cols)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="num_rows" type="int" default=""/>
          <param name="num_cols" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultRenderer" type="" overloaded="no">
        <autodoc>SetDefaultRenderer(GridCellRenderer renderer)</autodoc>
        <paramlist>
          <param name="renderer" type="GridCellRenderer" default=""/>
        </paramlist>
      </method>
      <method name="SetCellRenderer" type="" overloaded="no">
        <autodoc>SetCellRenderer(int row, int col, GridCellRenderer renderer)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="renderer" type="GridCellRenderer" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultRenderer" type="GridCellRenderer" overloaded="no">
        <autodoc>GetDefaultRenderer() -&gt; GridCellRenderer</autodoc>
      </method>
      <method name="GetCellRenderer" type="GridCellRenderer" overloaded="no">
        <autodoc>GetCellRenderer(int row, int col) -&gt; GridCellRenderer</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDefaultEditor" type="" overloaded="no">
        <autodoc>SetDefaultEditor(GridCellEditor editor)</autodoc>
        <paramlist>
          <param name="editor" type="GridCellEditor" default=""/>
        </paramlist>
      </method>
      <method name="SetCellEditor" type="" overloaded="no">
        <autodoc>SetCellEditor(int row, int col, GridCellEditor editor)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="editor" type="GridCellEditor" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultEditor" type="GridCellEditor" overloaded="no">
        <autodoc>GetDefaultEditor() -&gt; GridCellEditor</autodoc>
      </method>
      <method name="GetCellEditor" type="GridCellEditor" overloaded="no">
        <autodoc>GetCellEditor(int row, int col) -&gt; GridCellEditor</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCellValue" type="String" overloaded="no">
        <autodoc>GetCellValue(int row, int col) -&gt; String</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCellValue" type="" overloaded="no">
        <autodoc>SetCellValue(int row, int col, String s)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="IsReadOnly" type="bool" overloaded="no">
        <autodoc>IsReadOnly(int row, int col) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetReadOnly" type="" overloaded="no">
        <autodoc>SetReadOnly(int row, int col, bool isReadOnly=True)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="isReadOnly" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SelectRow" type="" overloaded="no">
        <autodoc>SelectRow(int row, bool addToSelected=False)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="addToSelected" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="SelectCol" type="" overloaded="no">
        <autodoc>SelectCol(int col, bool addToSelected=False)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
          <param name="addToSelected" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="SelectBlock" type="" overloaded="no">
        <autodoc>SelectBlock(int topRow, int leftCol, int bottomRow, int rightCol, 
    bool addToSelected=False)</autodoc>
        <paramlist>
          <param name="topRow" type="int" default=""/>
          <param name="leftCol" type="int" default=""/>
          <param name="bottomRow" type="int" default=""/>
          <param name="rightCol" type="int" default=""/>
          <param name="addToSelected" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="SelectAll" type="" overloaded="no">
        <autodoc>SelectAll()</autodoc>
      </method>
      <method name="IsSelection" type="bool" overloaded="no">
        <autodoc>IsSelection() -&gt; bool</autodoc>
      </method>
      <method name="ClearSelection" type="" overloaded="no">
        <autodoc>ClearSelection()</autodoc>
      </method>
      <method name="IsInSelection" type="bool" overloaded="no">
        <autodoc>IsInSelection(int row, int col) -&gt; bool</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectedCells" type="wxGridCellCoordsArray" overloaded="no">
        <autodoc>GetSelectedCells() -&gt; wxGridCellCoordsArray</autodoc>
      </method>
      <method name="GetSelectionBlockTopLeft" type="wxGridCellCoordsArray" overloaded="no">
        <autodoc>GetSelectionBlockTopLeft() -&gt; wxGridCellCoordsArray</autodoc>
      </method>
      <method name="GetSelectionBlockBottomRight" type="wxGridCellCoordsArray" overloaded="no">
        <autodoc>GetSelectionBlockBottomRight() -&gt; wxGridCellCoordsArray</autodoc>
      </method>
      <method name="GetSelectedRows" type="wxArrayInt" overloaded="no">
        <autodoc>GetSelectedRows() -&gt; wxArrayInt</autodoc>
      </method>
      <method name="GetSelectedCols" type="wxArrayInt" overloaded="no">
        <autodoc>GetSelectedCols() -&gt; wxArrayInt</autodoc>
      </method>
      <method name="DeselectRow" type="" overloaded="no">
        <autodoc>DeselectRow(int row)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeselectCol" type="" overloaded="no">
        <autodoc>DeselectCol(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DeselectCell" type="" overloaded="no">
        <autodoc>DeselectCell(int row, int col)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="BlockToDeviceRect" type="Rect" overloaded="no">
        <autodoc>BlockToDeviceRect(GridCellCoords topLeft, GridCellCoords bottomRight) -&gt; Rect</autodoc>
        <paramlist>
          <param name="topLeft" type="GridCellCoords" default=""/>
          <param name="bottomRight" type="GridCellCoords" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectionBackground" type="Colour" overloaded="no">
        <autodoc>GetSelectionBackground() -&gt; Colour</autodoc>
      </method>
      <method name="GetSelectionForeground" type="Colour" overloaded="no">
        <autodoc>GetSelectionForeground() -&gt; Colour</autodoc>
      </method>
      <method name="SetSelectionBackground" type="" overloaded="no">
        <autodoc>SetSelectionBackground(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetSelectionForeground" type="" overloaded="no">
        <autodoc>SetSelectionForeground(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="RegisterDataType" type="" overloaded="no">
        <autodoc>RegisterDataType(String typeName, GridCellRenderer renderer, GridCellEditor editor)</autodoc>
        <paramlist>
          <param name="typeName" type="String" default=""/>
          <param name="renderer" type="GridCellRenderer" default=""/>
          <param name="editor" type="GridCellEditor" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultEditorForCell" type="GridCellEditor" overloaded="no">
        <autodoc>GetDefaultEditorForCell(int row, int col) -&gt; GridCellEditor</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultRendererForCell" type="GridCellRenderer" overloaded="no">
        <autodoc>GetDefaultRendererForCell(int row, int col) -&gt; GridCellRenderer</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultEditorForType" type="GridCellEditor" overloaded="no">
        <autodoc>GetDefaultEditorForType(String typeName) -&gt; GridCellEditor</autodoc>
        <paramlist>
          <param name="typeName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetDefaultRendererForType" type="GridCellRenderer" overloaded="no">
        <autodoc>GetDefaultRendererForType(String typeName) -&gt; GridCellRenderer</autodoc>
        <paramlist>
          <param name="typeName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetMargins" type="" overloaded="no">
        <autodoc>SetMargins(int extraWidth, int extraHeight)</autodoc>
        <paramlist>
          <param name="extraWidth" type="int" default=""/>
          <param name="extraHeight" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetGridWindow" type="Window" overloaded="no">
        <autodoc>GetGridWindow() -&gt; Window</autodoc>
      </method>
      <method name="GetGridRowLabelWindow" type="Window" overloaded="no">
        <autodoc>GetGridRowLabelWindow() -&gt; Window</autodoc>
      </method>
      <method name="GetGridColLabelWindow" type="Window" overloaded="no">
        <autodoc>GetGridColLabelWindow() -&gt; Window</autodoc>
      </method>
      <method name="GetGridCornerLabelWindow" type="Window" overloaded="no">
        <autodoc>GetGridCornerLabelWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <class name="GridEvent" oldname="wxGridEvent" module="grid">
      <baseclass name="NotifyEvent"/>
      <constructor name="GridEvent" overloaded="no">
        <autodoc>__init__(int id, wxEventType type, Grid obj, int row=-1, int col=-1, 
    int x=-1, int y=-1, bool sel=True, bool control=False, 
    bool shift=False, bool alt=False, 
    bool meta=False) -&gt; GridEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="type" type="wxEventType" default=""/>
          <param name="obj" type="Grid" default=""/>
          <param name="row" type="int" default="-1"/>
          <param name="col" type="int" default="-1"/>
          <param name="x" type="int" default="-1"/>
          <param name="y" type="int" default="-1"/>
          <param name="sel" type="bool" default="True"/>
          <param name="control" type="bool" default="False"/>
          <param name="shift" type="bool" default="False"/>
          <param name="alt" type="bool" default="False"/>
          <param name="meta" type="bool" default="False"/>
        </paramlist>
      </constructor>
      <method name="GetRow" type="int" overloaded="no">
        <autodoc>GetRow() -&gt; int</autodoc>
      </method>
      <method name="GetCol" type="int" overloaded="no">
        <autodoc>GetCol() -&gt; int</autodoc>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="Selecting" type="bool" overloaded="no">
        <autodoc>Selecting() -&gt; bool</autodoc>
      </method>
      <method name="ControlDown" type="bool" overloaded="no">
        <autodoc>ControlDown() -&gt; bool</autodoc>
      </method>
      <method name="MetaDown" type="bool" overloaded="no">
        <autodoc>MetaDown() -&gt; bool</autodoc>
      </method>
      <method name="ShiftDown" type="bool" overloaded="no">
        <autodoc>ShiftDown() -&gt; bool</autodoc>
      </method>
      <method name="AltDown" type="bool" overloaded="no">
        <autodoc>AltDown() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="GridSizeEvent" oldname="wxGridSizeEvent" module="grid">
      <baseclass name="NotifyEvent"/>
      <constructor name="GridSizeEvent" overloaded="no">
        <autodoc>__init__(int id, wxEventType type, Grid obj, int rowOrCol=-1, 
    int x=-1, int y=-1, bool control=False, bool shift=False, 
    bool alt=False, bool meta=False) -&gt; GridSizeEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="type" type="wxEventType" default=""/>
          <param name="obj" type="Grid" default=""/>
          <param name="rowOrCol" type="int" default="-1"/>
          <param name="x" type="int" default="-1"/>
          <param name="y" type="int" default="-1"/>
          <param name="control" type="bool" default="False"/>
          <param name="shift" type="bool" default="False"/>
          <param name="alt" type="bool" default="False"/>
          <param name="meta" type="bool" default="False"/>
        </paramlist>
      </constructor>
      <method name="GetRowOrCol" type="int" overloaded="no">
        <autodoc>GetRowOrCol() -&gt; int</autodoc>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition() -&gt; Point</autodoc>
      </method>
      <method name="ControlDown" type="bool" overloaded="no">
        <autodoc>ControlDown() -&gt; bool</autodoc>
      </method>
      <method name="MetaDown" type="bool" overloaded="no">
        <autodoc>MetaDown() -&gt; bool</autodoc>
      </method>
      <method name="ShiftDown" type="bool" overloaded="no">
        <autodoc>ShiftDown() -&gt; bool</autodoc>
      </method>
      <method name="AltDown" type="bool" overloaded="no">
        <autodoc>AltDown() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="GridRangeSelectEvent" oldname="wxGridRangeSelectEvent" module="grid">
      <baseclass name="NotifyEvent"/>
      <constructor name="GridRangeSelectEvent" overloaded="no">
        <autodoc>__init__(int id, wxEventType type, Grid obj, GridCellCoords topLeft, 
    GridCellCoords bottomRight, bool sel=True, 
    bool control=False, bool shift=False, 
    bool alt=False, bool meta=False) -&gt; GridRangeSelectEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="type" type="wxEventType" default=""/>
          <param name="obj" type="Grid" default=""/>
          <param name="topLeft" type="GridCellCoords" default=""/>
          <param name="bottomRight" type="GridCellCoords" default=""/>
          <param name="sel" type="bool" default="True"/>
          <param name="control" type="bool" default="False"/>
          <param name="shift" type="bool" default="False"/>
          <param name="alt" type="bool" default="False"/>
          <param name="meta" type="bool" default="False"/>
        </paramlist>
      </constructor>
      <method name="GetTopLeftCoords" type="GridCellCoords" overloaded="no">
        <autodoc>GetTopLeftCoords() -&gt; GridCellCoords</autodoc>
      </method>
      <method name="GetBottomRightCoords" type="GridCellCoords" overloaded="no">
        <autodoc>GetBottomRightCoords() -&gt; GridCellCoords</autodoc>
      </method>
      <method name="GetTopRow" type="int" overloaded="no">
        <autodoc>GetTopRow() -&gt; int</autodoc>
      </method>
      <method name="GetBottomRow" type="int" overloaded="no">
        <autodoc>GetBottomRow() -&gt; int</autodoc>
      </method>
      <method name="GetLeftCol" type="int" overloaded="no">
        <autodoc>GetLeftCol() -&gt; int</autodoc>
      </method>
      <method name="GetRightCol" type="int" overloaded="no">
        <autodoc>GetRightCol() -&gt; int</autodoc>
      </method>
      <method name="Selecting" type="bool" overloaded="no">
        <autodoc>Selecting() -&gt; bool</autodoc>
      </method>
      <method name="ControlDown" type="bool" overloaded="no">
        <autodoc>ControlDown() -&gt; bool</autodoc>
      </method>
      <method name="MetaDown" type="bool" overloaded="no">
        <autodoc>MetaDown() -&gt; bool</autodoc>
      </method>
      <method name="ShiftDown" type="bool" overloaded="no">
        <autodoc>ShiftDown() -&gt; bool</autodoc>
      </method>
      <method name="AltDown" type="bool" overloaded="no">
        <autodoc>AltDown() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="GridEditorCreatedEvent" oldname="wxGridEditorCreatedEvent" module="grid">
      <baseclass name="CommandEvent"/>
      <constructor name="GridEditorCreatedEvent" overloaded="no">
        <autodoc>__init__(int id, wxEventType type, Object obj, int row, int col, 
    Control ctrl) -&gt; GridEditorCreatedEvent</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
          <param name="type" type="wxEventType" default=""/>
          <param name="obj" type="Object" default=""/>
          <param name="row" type="int" default=""/>
          <param name="col" type="int" default=""/>
          <param name="ctrl" type="Control" default=""/>
        </paramlist>
      </constructor>
      <method name="GetRow" type="int" overloaded="no">
        <autodoc>GetRow() -&gt; int</autodoc>
      </method>
      <method name="GetCol" type="int" overloaded="no">
        <autodoc>GetCol() -&gt; int</autodoc>
      </method>
      <method name="GetControl" type="Control" overloaded="no">
        <autodoc>GetControl() -&gt; Control</autodoc>
      </method>
      <method name="SetRow" type="" overloaded="no">
        <autodoc>SetRow(int row)</autodoc>
        <paramlist>
          <param name="row" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCol" type="" overloaded="no">
        <autodoc>SetCol(int col)</autodoc>
        <paramlist>
          <param name="col" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetControl" type="" overloaded="no">
        <autodoc>SetControl(Control ctrl)</autodoc>
        <paramlist>
          <param name="ctrl" type="Control" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
EVT_GRID_CELL_LEFT_CLICK = wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_CLICK )
EVT_GRID_CELL_RIGHT_CLICK = wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_CLICK )
EVT_GRID_CELL_LEFT_DCLICK = wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_DCLICK )
EVT_GRID_CELL_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_DCLICK )
EVT_GRID_LABEL_LEFT_CLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_CLICK )
EVT_GRID_LABEL_RIGHT_CLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_CLICK )
EVT_GRID_LABEL_LEFT_DCLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_DCLICK )
EVT_GRID_LABEL_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_DCLICK )
EVT_GRID_ROW_SIZE = wx.PyEventBinder( wxEVT_GRID_ROW_SIZE )
EVT_GRID_COL_SIZE = wx.PyEventBinder( wxEVT_GRID_COL_SIZE )
EVT_GRID_RANGE_SELECT = wx.PyEventBinder( wxEVT_GRID_RANGE_SELECT )
EVT_GRID_CELL_CHANGE = wx.PyEventBinder( wxEVT_GRID_CELL_CHANGE )
EVT_GRID_SELECT_CELL = wx.PyEventBinder( wxEVT_GRID_SELECT_CELL )
EVT_GRID_EDITOR_SHOWN = wx.PyEventBinder( wxEVT_GRID_EDITOR_SHOWN )
EVT_GRID_EDITOR_HIDDEN = wx.PyEventBinder( wxEVT_GRID_EDITOR_HIDDEN )
EVT_GRID_EDITOR_CREATED = wx.PyEventBinder( wxEVT_GRID_EDITOR_CREATED )
</pythoncode>
  </module>
  <module name="html">
    <import name="windows"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="HtmlLinkInfo" oldname="wxHtmlLinkInfo" module="html">
      <baseclass name="Object"/>
      <constructor name="HtmlLinkInfo" overloaded="no">
        <autodoc>__init__(String href, String target=EmptyString) -&gt; HtmlLinkInfo</autodoc>
        <paramlist>
          <param name="href" type="String" default=""/>
          <param name="target" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <method name="GetHref" type="String" overloaded="no">
        <autodoc>GetHref() -&gt; String</autodoc>
      </method>
      <method name="GetTarget" type="String" overloaded="no">
        <autodoc>GetTarget() -&gt; String</autodoc>
      </method>
      <method name="GetEvent" type="MouseEvent" overloaded="no">
        <autodoc>GetEvent() -&gt; MouseEvent</autodoc>
      </method>
      <method name="GetHtmlCell" type="wxHtmlCell" overloaded="no">
        <autodoc>GetHtmlCell() -&gt; HtmlCell</autodoc>
      </method>
      <method name="SetEvent" type="" overloaded="no">
        <autodoc>SetEvent(MouseEvent e)</autodoc>
        <paramlist>
          <param name="e" type="MouseEvent" default=""/>
        </paramlist>
      </method>
      <method name="SetHtmlCell" type="" overloaded="no">
        <autodoc>SetHtmlCell(HtmlCell e)</autodoc>
        <paramlist>
          <param name="e" type="wxHtmlCell" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="HtmlTag" oldname="wxHtmlTag" module="html">
      <baseclass name="Object"/>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="HasParam" type="bool" overloaded="no">
        <autodoc>HasParam(String par) -&gt; bool</autodoc>
        <paramlist>
          <param name="par" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetParam" type="String" overloaded="no">
        <autodoc>GetParam(String par, int with_commas=False) -&gt; String</autodoc>
        <paramlist>
          <param name="par" type="String" default=""/>
          <param name="with_commas" type="int" default="False"/>
        </paramlist>
      </method>
      <method name="GetAllParams" type="String" overloaded="no">
        <autodoc>GetAllParams() -&gt; String</autodoc>
      </method>
      <method name="HasEnding" type="bool" overloaded="no">
        <autodoc>HasEnding() -&gt; bool</autodoc>
      </method>
      <method name="GetBeginPos" type="int" overloaded="no">
        <autodoc>GetBeginPos() -&gt; int</autodoc>
      </method>
      <method name="GetEndPos1" type="int" overloaded="no">
        <autodoc>GetEndPos1() -&gt; int</autodoc>
      </method>
      <method name="GetEndPos2" type="int" overloaded="no">
        <autodoc>GetEndPos2() -&gt; int</autodoc>
      </method>
    </class>
    <class name="HtmlParser" oldname="wxHtmlParser" module="html">
      <baseclass name="Object"/>
      <method name="SetFS" type="" overloaded="no">
        <autodoc>SetFS(FileSystem fs)</autodoc>
        <paramlist>
          <param name="fs" type="FileSystem" default=""/>
        </paramlist>
      </method>
      <method name="GetFS" type="FileSystem" overloaded="no">
        <autodoc>GetFS() -&gt; FileSystem</autodoc>
      </method>
      <method name="Parse" type="Object" overloaded="no">
        <autodoc>Parse(String source) -&gt; Object</autodoc>
        <paramlist>
          <param name="source" type="String" default=""/>
        </paramlist>
      </method>
      <method name="InitParser" type="" overloaded="no">
        <autodoc>InitParser(String source)</autodoc>
        <paramlist>
          <param name="source" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DoneParser" type="" overloaded="no">
        <autodoc>DoneParser()</autodoc>
      </method>
      <method name="DoParsing" type="" overloaded="no">
        <autodoc>DoParsing(int begin_pos, int end_pos)</autodoc>
        <paramlist>
          <param name="begin_pos" type="int" default=""/>
          <param name="end_pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="StopParsing" type="" overloaded="no">
        <autodoc>StopParsing()</autodoc>
      </method>
      <method name="AddTagHandler" type="" overloaded="no">
        <autodoc>AddTagHandler(HtmlTagHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="wxHtmlTagHandler" default=""/>
        </paramlist>
      </method>
      <method name="GetSource" type="String" overloaded="no">
        <autodoc>GetSource() -&gt; String</autodoc>
      </method>
      <method name="PushTagHandler" type="" overloaded="no">
        <autodoc>PushTagHandler(HtmlTagHandler handler, String tags)</autodoc>
        <paramlist>
          <param name="handler" type="wxHtmlTagHandler" default=""/>
          <param name="tags" type="String" default=""/>
        </paramlist>
      </method>
      <method name="PopTagHandler" type="" overloaded="no">
        <autodoc>PopTagHandler()</autodoc>
      </method>
    </class>
    <class name="HtmlWinParser" oldname="wxHtmlWinParser" module="html">
      <baseclass name="HtmlParser"/>
      <constructor name="HtmlWinParser" overloaded="no">
        <autodoc>__init__(HtmlWindow wnd=None) -&gt; HtmlWinParser</autodoc>
        <paramlist>
          <param name="wnd" type="wxPyHtmlWindow" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="SetDC" type="" overloaded="no">
        <autodoc>SetDC(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="GetDC" type="DC" overloaded="no">
        <autodoc>GetDC() -&gt; DC</autodoc>
      </method>
      <method name="GetCharHeight" type="int" overloaded="no">
        <autodoc>GetCharHeight() -&gt; int</autodoc>
      </method>
      <method name="GetCharWidth" type="int" overloaded="no">
        <autodoc>GetCharWidth() -&gt; int</autodoc>
      </method>
      <method name="GetWindow" type="wxPyHtmlWindow" overloaded="no">
        <autodoc>GetWindow() -&gt; HtmlWindow</autodoc>
      </method>
      <method name="SetFonts" type="" overloaded="no">
        <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
        <paramlist>
          <param name="normal_face" type="String" default=""/>
          <param name="fixed_face" type="String" default=""/>
          <param name="sizes" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="GetContainer" type="wxHtmlContainerCell" overloaded="no">
        <autodoc>GetContainer() -&gt; HtmlContainerCell</autodoc>
      </method>
      <method name="OpenContainer" type="wxHtmlContainerCell" overloaded="no">
        <autodoc>OpenContainer() -&gt; HtmlContainerCell</autodoc>
      </method>
      <method name="SetContainer" type="wxHtmlContainerCell" overloaded="no">
        <autodoc>SetContainer(HtmlContainerCell c) -&gt; HtmlContainerCell</autodoc>
        <paramlist>
          <param name="c" type="wxHtmlContainerCell" default=""/>
        </paramlist>
      </method>
      <method name="CloseContainer" type="wxHtmlContainerCell" overloaded="no">
        <autodoc>CloseContainer() -&gt; HtmlContainerCell</autodoc>
      </method>
      <method name="GetFontSize" type="int" overloaded="no">
        <autodoc>GetFontSize() -&gt; int</autodoc>
      </method>
      <method name="SetFontSize" type="" overloaded="no">
        <autodoc>SetFontSize(int s)</autodoc>
        <paramlist>
          <param name="s" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFontBold" type="int" overloaded="no">
        <autodoc>GetFontBold() -&gt; int</autodoc>
      </method>
      <method name="SetFontBold" type="" overloaded="no">
        <autodoc>SetFontBold(int x)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFontItalic" type="int" overloaded="no">
        <autodoc>GetFontItalic() -&gt; int</autodoc>
      </method>
      <method name="SetFontItalic" type="" overloaded="no">
        <autodoc>SetFontItalic(int x)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFontUnderlined" type="int" overloaded="no">
        <autodoc>GetFontUnderlined() -&gt; int</autodoc>
      </method>
      <method name="SetFontUnderlined" type="" overloaded="no">
        <autodoc>SetFontUnderlined(int x)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFontFixed" type="int" overloaded="no">
        <autodoc>GetFontFixed() -&gt; int</autodoc>
      </method>
      <method name="SetFontFixed" type="" overloaded="no">
        <autodoc>SetFontFixed(int x)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAlign" type="int" overloaded="no">
        <autodoc>GetAlign() -&gt; int</autodoc>
      </method>
      <method name="SetAlign" type="" overloaded="no">
        <autodoc>SetAlign(int a)</autodoc>
        <paramlist>
          <param name="a" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLinkColor" type="Colour" overloaded="no">
        <autodoc>GetLinkColor() -&gt; Colour</autodoc>
      </method>
      <method name="SetLinkColor" type="" overloaded="no">
        <autodoc>SetLinkColor(Colour clr)</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetActualColor" type="Colour" overloaded="no">
        <autodoc>GetActualColor() -&gt; Colour</autodoc>
      </method>
      <method name="SetActualColor" type="" overloaded="no">
        <autodoc>SetActualColor(Colour clr)</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetLink" type="" overloaded="no">
        <autodoc>SetLink(String link)</autodoc>
        <paramlist>
          <param name="link" type="String" default=""/>
        </paramlist>
      </method>
      <method name="CreateCurrentFont" type="Font" overloaded="no">
        <autodoc>CreateCurrentFont() -&gt; Font</autodoc>
      </method>
      <method name="GetLink" type="HtmlLinkInfo" overloaded="no">
        <autodoc>GetLink() -&gt; HtmlLinkInfo</autodoc>
      </method>
    </class>
    <class name="HtmlTagHandler" oldname="wxPyHtmlTagHandler" module="html">
      <baseclass name="Object"/>
      <constructor name="wxPyHtmlTagHandler" overloaded="no">
        <autodoc>__init__() -&gt; HtmlTagHandler</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetParser" type="" overloaded="no">
        <autodoc>SetParser(HtmlParser parser)</autodoc>
        <paramlist>
          <param name="parser" type="HtmlParser" default=""/>
        </paramlist>
      </method>
      <method name="GetParser" type="HtmlParser" overloaded="no">
        <autodoc>GetParser() -&gt; HtmlParser</autodoc>
      </method>
      <method name="ParseInner" type="" overloaded="no">
        <autodoc>ParseInner(HtmlTag tag)</autodoc>
        <paramlist>
          <param name="tag" type="HtmlTag" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="HtmlWinTagHandler" oldname="wxPyHtmlWinTagHandler" module="html">
      <baseclass name="HtmlTagHandler"/>
      <constructor name="wxPyHtmlWinTagHandler" overloaded="no">
        <autodoc>__init__() -&gt; HtmlWinTagHandler</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetParser" type="" overloaded="no">
        <autodoc>SetParser(HtmlParser parser)</autodoc>
        <paramlist>
          <param name="parser" type="HtmlParser" default=""/>
        </paramlist>
      </method>
      <method name="GetParser" type="HtmlWinParser" overloaded="no">
        <autodoc>GetParser() -&gt; HtmlWinParser</autodoc>
      </method>
      <method name="ParseInner" type="" overloaded="no">
        <autodoc>ParseInner(HtmlTag tag)</autodoc>
        <paramlist>
          <param name="tag" type="HtmlTag" default=""/>
        </paramlist>
      </method>
    </class>
    <method name="HtmlWinParser_AddTagHandler" oldname="wxHtmlWinParser_AddTagHandler" type="" overloaded="no">
      <autodoc>HtmlWinParser_AddTagHandler(PyObject tagHandlerClass)</autodoc>
      <paramlist>
        <param name="tagHandlerClass" type="PyObject" default=""/>
      </paramlist>
    </method>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="HtmlSelection" oldname="wxHtmlSelection" module="html">
      <constructor name="HtmlSelection" overloaded="no">
        <autodoc>__init__() -&gt; HtmlSelection</autodoc>
      </constructor>
      <destructor name="~wxHtmlSelection" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Set" type="" overloaded="no">
        <autodoc>Set(Point fromPos, HtmlCell fromCell, Point toPos, HtmlCell toCell)</autodoc>
        <paramlist>
          <param name="fromPos" type="Point" default=""/>
          <param name="fromCell" type="wxHtmlCell" default=""/>
          <param name="toPos" type="Point" default=""/>
          <param name="toCell" type="wxHtmlCell" default=""/>
        </paramlist>
      </method>
      <method name="SetCells" type="" overloaded="no">
        <autodoc>SetCells(HtmlCell fromCell, HtmlCell toCell)</autodoc>
        <paramlist>
          <param name="fromCell" type="wxHtmlCell" default=""/>
          <param name="toCell" type="wxHtmlCell" default=""/>
        </paramlist>
      </method>
      <method name="GetFromCell" type="wxHtmlCell" overloaded="no">
        <autodoc>GetFromCell() -&gt; HtmlCell</autodoc>
      </method>
      <method name="GetToCell" type="wxHtmlCell" overloaded="no">
        <autodoc>GetToCell() -&gt; HtmlCell</autodoc>
      </method>
      <method name="GetFromPos" type="Point" overloaded="no">
        <autodoc>GetFromPos() -&gt; Point</autodoc>
      </method>
      <method name="GetToPos" type="Point" overloaded="no">
        <autodoc>GetToPos() -&gt; Point</autodoc>
      </method>
      <method name="GetFromPrivPos" type="Point" overloaded="no">
        <autodoc>GetFromPrivPos() -&gt; Point</autodoc>
      </method>
      <method name="GetToPrivPos" type="Point" overloaded="no">
        <autodoc>GetToPrivPos() -&gt; Point</autodoc>
      </method>
      <method name="SetFromPrivPos" type="" overloaded="no">
        <autodoc>SetFromPrivPos(Point pos)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetToPrivPos" type="" overloaded="no">
        <autodoc>SetToPrivPos(Point pos)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="ClearPrivPos" type="" overloaded="no">
        <autodoc>ClearPrivPos()</autodoc>
      </method>
      <method name="IsEmpty" type="bool" overloaded="no">
        <autodoc>IsEmpty() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="HtmlRenderingState" oldname="wxHtmlRenderingState" module="html">
      <constructor name="HtmlRenderingState" overloaded="no">
        <autodoc>__init__() -&gt; HtmlRenderingState</autodoc>
      </constructor>
      <destructor name="~wxHtmlRenderingState" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetSelectionState" type="" overloaded="no">
        <autodoc>SetSelectionState(int s)</autodoc>
        <paramlist>
          <param name="s" type="wxHtmlSelectionState" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectionState" type="wxHtmlSelectionState" overloaded="no">
        <autodoc>GetSelectionState() -&gt; int</autodoc>
      </method>
      <method name="SetFgColour" type="" overloaded="no">
        <autodoc>SetFgColour(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetFgColour" type="Colour" overloaded="no">
        <autodoc>GetFgColour() -&gt; Colour</autodoc>
      </method>
      <method name="SetBgColour" type="" overloaded="no">
        <autodoc>SetBgColour(Colour c)</autodoc>
        <paramlist>
          <param name="c" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetBgColour" type="Colour" overloaded="no">
        <autodoc>GetBgColour() -&gt; Colour</autodoc>
      </method>
    </class>
    <class name="HtmlRenderingStyle" oldname="wxHtmlRenderingStyle" module="html">
      <method name="GetSelectedTextColour" type="Colour" overloaded="no">
        <autodoc>GetSelectedTextColour(Colour clr) -&gt; Colour</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectedTextBgColour" type="Colour" overloaded="no">
        <autodoc>GetSelectedTextBgColour(Colour clr) -&gt; Colour</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="DefaultHtmlRenderingStyle" oldname="wxDefaultHtmlRenderingStyle" module="html">
      <baseclass name="HtmlRenderingStyle"/>
      <method name="GetSelectedTextColour" type="Colour" overloaded="no">
        <autodoc>GetSelectedTextColour(Colour clr) -&gt; Colour</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectedTextBgColour" type="Colour" overloaded="no">
        <autodoc>GetSelectedTextBgColour(Colour clr) -&gt; Colour</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="HtmlRenderingInfo" oldname="wxHtmlRenderingInfo" module="html">
      <constructor name="HtmlRenderingInfo" overloaded="no">
        <autodoc>__init__() -&gt; HtmlRenderingInfo</autodoc>
      </constructor>
      <destructor name="~wxHtmlRenderingInfo" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(HtmlSelection s)</autodoc>
        <paramlist>
          <param name="s" type="HtmlSelection" default=""/>
        </paramlist>
      </method>
      <method name="GetSelection" type="HtmlSelection" overloaded="no">
        <autodoc>GetSelection() -&gt; HtmlSelection</autodoc>
      </method>
      <method name="SetStyle" type="" overloaded="no">
        <autodoc>SetStyle(HtmlRenderingStyle style)</autodoc>
        <paramlist>
          <param name="style" type="HtmlRenderingStyle" default=""/>
        </paramlist>
      </method>
      <method name="GetStyle" type="HtmlRenderingStyle" overloaded="no">
        <autodoc>GetStyle() -&gt; HtmlRenderingStyle</autodoc>
      </method>
      <method name="GetState" type="HtmlRenderingState" overloaded="no">
        <autodoc>GetState() -&gt; HtmlRenderingState</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="HtmlCell" oldname="wxHtmlCell" module="html">
      <baseclass name="Object"/>
      <constructor name="HtmlCell" overloaded="no">
        <autodoc>__init__() -&gt; HtmlCell</autodoc>
      </constructor>
      <method name="GetPosX" type="int" overloaded="no">
        <autodoc>GetPosX() -&gt; int</autodoc>
      </method>
      <method name="GetPosY" type="int" overloaded="no">
        <autodoc>GetPosY() -&gt; int</autodoc>
      </method>
      <method name="GetWidth" type="int" overloaded="no">
        <autodoc>GetWidth() -&gt; int</autodoc>
      </method>
      <method name="GetHeight" type="int" overloaded="no">
        <autodoc>GetHeight() -&gt; int</autodoc>
      </method>
      <method name="GetDescent" type="int" overloaded="no">
        <autodoc>GetDescent() -&gt; int</autodoc>
      </method>
      <method name="GetMaxTotalWidth" type="int" overloaded="no">
        <autodoc>GetMaxTotalWidth() -&gt; int</autodoc>
      </method>
      <method name="GetId" type="String" overloaded="no">
        <autodoc>GetId() -&gt; String</autodoc>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(String id)</autodoc>
        <paramlist>
          <param name="id" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetLink" type="HtmlLinkInfo" overloaded="no">
        <autodoc>GetLink(int x=0, int y=0) -&gt; HtmlLinkInfo</autodoc>
        <paramlist>
          <param name="x" type="int" default="0"/>
          <param name="y" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetNext" type="HtmlCell" overloaded="no">
        <autodoc>GetNext() -&gt; HtmlCell</autodoc>
      </method>
      <method name="GetParent" type="wxHtmlContainerCell" overloaded="no">
        <autodoc>GetParent() -&gt; HtmlContainerCell</autodoc>
      </method>
      <method name="GetFirstChild" type="HtmlCell" overloaded="no">
        <autodoc>GetFirstChild() -&gt; HtmlCell</autodoc>
      </method>
      <method name="GetCursor" type="Cursor" overloaded="no">
        <autodoc>GetCursor() -&gt; Cursor</autodoc>
      </method>
      <method name="IsFormattingCell" type="bool" overloaded="no">
        <autodoc>IsFormattingCell() -&gt; bool</autodoc>
      </method>
      <method name="SetLink" type="" overloaded="no">
        <autodoc>SetLink(HtmlLinkInfo link)</autodoc>
        <paramlist>
          <param name="link" type="HtmlLinkInfo" default=""/>
        </paramlist>
      </method>
      <method name="SetNext" type="" overloaded="no">
        <autodoc>SetNext(HtmlCell cell)</autodoc>
        <paramlist>
          <param name="cell" type="HtmlCell" default=""/>
        </paramlist>
      </method>
      <method name="SetParent" type="" overloaded="no">
        <autodoc>SetParent(HtmlContainerCell p)</autodoc>
        <paramlist>
          <param name="p" type="wxHtmlContainerCell" default=""/>
        </paramlist>
      </method>
      <method name="SetPos" type="" overloaded="no">
        <autodoc>SetPos(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Layout" type="" overloaded="no">
        <autodoc>Layout(int w)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Draw" type="" overloaded="no">
        <autodoc>Draw(DC dc, int x, int y, int view_y1, int view_y2, HtmlRenderingInfo info)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="view_y1" type="int" default=""/>
          <param name="view_y2" type="int" default=""/>
          <param name="info" type="HtmlRenderingInfo" default=""/>
        </paramlist>
      </method>
      <method name="DrawInvisible" type="" overloaded="no">
        <autodoc>DrawInvisible(DC dc, int x, int y, HtmlRenderingInfo info)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="info" type="HtmlRenderingInfo" default=""/>
        </paramlist>
      </method>
      <method name="Find" type="HtmlCell" overloaded="no">
        <autodoc>Find(int condition, void param) -&gt; HtmlCell</autodoc>
        <paramlist>
          <param name="condition" type="int" default=""/>
          <param name="param" type="" default=""/>
        </paramlist>
      </method>
      <method name="AdjustPagebreak" type="bool" overloaded="no">
        <autodoc>AdjustPagebreak(int INOUT) -&gt; bool</autodoc>
        <paramlist>
          <param name="INOUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCanLiveOnPagebreak" type="" overloaded="no">
        <autodoc>SetCanLiveOnPagebreak(bool can)</autodoc>
        <paramlist>
          <param name="can" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsLinebreakAllowed" type="bool" overloaded="no">
        <autodoc>IsLinebreakAllowed() -&gt; bool</autodoc>
      </method>
      <method name="IsTerminalCell" type="bool" overloaded="no">
        <autodoc>IsTerminalCell() -&gt; bool</autodoc>
      </method>
      <method name="FindCellByPos" type="HtmlCell" overloaded="no">
        <autodoc>FindCellByPos(int x, int y, unsigned int flags=HTML_FIND_EXACT) -&gt; HtmlCell</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="flags" type="unsigned int" default="wxHTML_FIND_EXACT"/>
        </paramlist>
      </method>
      <method name="GetAbsPos" type="Point" overloaded="no">
        <autodoc>GetAbsPos() -&gt; Point</autodoc>
      </method>
      <method name="GetFirstTerminal" type="HtmlCell" overloaded="no">
        <autodoc>GetFirstTerminal() -&gt; HtmlCell</autodoc>
      </method>
      <method name="GetLastTerminal" type="HtmlCell" overloaded="no">
        <autodoc>GetLastTerminal() -&gt; HtmlCell</autodoc>
      </method>
      <method name="GetDepth" type="unsigned int" overloaded="no">
        <autodoc>GetDepth() -&gt; unsigned int</autodoc>
      </method>
      <method name="IsBefore" type="bool" overloaded="no">
        <autodoc>IsBefore(HtmlCell cell) -&gt; bool</autodoc>
        <paramlist>
          <param name="cell" type="HtmlCell" default=""/>
        </paramlist>
      </method>
      <method name="ConvertToText" type="String" overloaded="no">
        <autodoc>ConvertToText(HtmlSelection sel) -&gt; String</autodoc>
        <paramlist>
          <param name="sel" type="HtmlSelection" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="HtmlWordCell" oldname="wxHtmlWordCell" module="html">
      <baseclass name="HtmlCell"/>
      <constructor name="HtmlWordCell" overloaded="no">
        <autodoc>__init__(String word, DC dc) -&gt; HtmlWordCell</autodoc>
        <paramlist>
          <param name="word" type="String" default=""/>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </constructor>
    </class>
    <class name="HtmlContainerCell" oldname="wxHtmlContainerCell" module="html">
      <baseclass name="HtmlCell"/>
      <constructor name="HtmlContainerCell" overloaded="no">
        <autodoc>__init__(HtmlContainerCell parent) -&gt; HtmlContainerCell</autodoc>
        <paramlist>
          <param name="parent" type="HtmlContainerCell" default=""/>
        </paramlist>
      </constructor>
      <method name="InsertCell" type="" overloaded="no">
        <autodoc>InsertCell(HtmlCell cell)</autodoc>
        <paramlist>
          <param name="cell" type="HtmlCell" default=""/>
        </paramlist>
      </method>
      <method name="SetAlignHor" type="" overloaded="no">
        <autodoc>SetAlignHor(int al)</autodoc>
        <paramlist>
          <param name="al" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAlignHor" type="int" overloaded="no">
        <autodoc>GetAlignHor() -&gt; int</autodoc>
      </method>
      <method name="SetAlignVer" type="" overloaded="no">
        <autodoc>SetAlignVer(int al)</autodoc>
        <paramlist>
          <param name="al" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAlignVer" type="int" overloaded="no">
        <autodoc>GetAlignVer() -&gt; int</autodoc>
      </method>
      <method name="SetIndent" type="" overloaded="no">
        <autodoc>SetIndent(int i, int what, int units=HTML_UNITS_PIXELS)</autodoc>
        <paramlist>
          <param name="i" type="int" default=""/>
          <param name="what" type="int" default=""/>
          <param name="units" type="int" default="wxHTML_UNITS_PIXELS"/>
        </paramlist>
      </method>
      <method name="GetIndent" type="int" overloaded="no">
        <autodoc>GetIndent(int ind) -&gt; int</autodoc>
        <paramlist>
          <param name="ind" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetIndentUnits" type="int" overloaded="no">
        <autodoc>GetIndentUnits(int ind) -&gt; int</autodoc>
        <paramlist>
          <param name="ind" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAlign" type="" overloaded="no">
        <autodoc>SetAlign(HtmlTag tag)</autodoc>
        <paramlist>
          <param name="tag" type="HtmlTag" default=""/>
        </paramlist>
      </method>
      <method name="SetWidthFloat" type="" overloaded="no">
        <autodoc>SetWidthFloat(int w, int units)</autodoc>
        <paramlist>
          <param name="w" type="int" default=""/>
          <param name="units" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWidthFloatFromTag" type="" overloaded="no">
        <autodoc>SetWidthFloatFromTag(HtmlTag tag)</autodoc>
        <paramlist>
          <param name="tag" type="HtmlTag" default=""/>
        </paramlist>
      </method>
      <method name="SetMinHeight" type="" overloaded="no">
        <autodoc>SetMinHeight(int h, int align=HTML_ALIGN_TOP)</autodoc>
        <paramlist>
          <param name="h" type="int" default=""/>
          <param name="align" type="int" default="wxHTML_ALIGN_TOP"/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="" overloaded="no">
        <autodoc>SetBackgroundColour(Colour clr)</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetBackgroundColour() -&gt; Colour</autodoc>
      </method>
      <method name="SetBorder" type="" overloaded="no">
        <autodoc>SetBorder(Colour clr1, Colour clr2)</autodoc>
        <paramlist>
          <param name="clr1" type="Colour" default=""/>
          <param name="clr2" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstChild" type="HtmlCell" overloaded="no">
        <autodoc>GetFirstChild() -&gt; HtmlCell</autodoc>
      </method>
    </class>
    <class name="HtmlColourCell" oldname="wxHtmlColourCell" module="html">
      <baseclass name="HtmlCell"/>
      <constructor name="HtmlColourCell" overloaded="no">
        <autodoc>__init__(Colour clr, int flags=HTML_CLR_FOREGROUND) -&gt; HtmlColourCell</autodoc>
        <paramlist>
          <param name="clr" type="Colour" default=""/>
          <param name="flags" type="int" default="wxHTML_CLR_FOREGROUND"/>
        </paramlist>
      </constructor>
    </class>
    <class name="HtmlFontCell" oldname="wxHtmlFontCell" module="html">
      <baseclass name="HtmlCell"/>
      <constructor name="HtmlFontCell" overloaded="no">
        <autodoc>__init__(Font font) -&gt; HtmlFontCell</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </constructor>
    </class>
    <class name="HtmlWidgetCell" oldname="wxHtmlWidgetCell" module="html">
      <baseclass name="HtmlCell"/>
      <constructor name="HtmlWidgetCell" overloaded="no">
        <autodoc>__init__(Window wnd, int w=0) -&gt; HtmlWidgetCell</autodoc>
        <paramlist>
          <param name="wnd" type="Window" default=""/>
          <param name="w" type="int" default="0"/>
        </paramlist>
      </constructor>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="HtmlFilter" oldname="wxPyHtmlFilter" module="html">
      <baseclass name="Object"/>
      <constructor name="wxPyHtmlFilter" overloaded="no">
        <autodoc>__init__() -&gt; HtmlFilter</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="HtmlWindow" oldname="wxPyHtmlWindow" module="html">
      <baseclass name="ScrolledWindow"/>
      <constructor name="wxPyHtmlWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, int style=HW_DEFAULT_STYLE, 
    String name=HtmlWindowNameStr) -&gt; HtmlWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="int" default="wxHW_DEFAULT_STYLE"/>
          <param name="name" type="String" default="wxPyHtmlWindowNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreHtmlWindow" overloaded="no">
        <autodoc>PreHtmlWindow() -&gt; HtmlWindow</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, int style=HW_SCROLLBAR_AUTO, 
    String name=HtmlWindowNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="int" default="wxHW_SCROLLBAR_AUTO"/>
          <param name="name" type="String" default="wxPyHtmlWindowNameStr"/>
        </paramlist>
      </method>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetPage" type="bool" overloaded="no">
        <autodoc>SetPage(String source) -&gt; bool</autodoc>
        <paramlist>
          <param name="source" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadPage" type="bool" overloaded="no">
        <autodoc>LoadPage(String location) -&gt; bool</autodoc>
        <paramlist>
          <param name="location" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadFile" type="bool" overloaded="no">
        <autodoc>LoadFile(String filename) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AppendToPage" type="bool" overloaded="no">
        <autodoc>AppendToPage(String source) -&gt; bool</autodoc>
        <paramlist>
          <param name="source" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetOpenedPage" type="String" overloaded="no">
        <autodoc>GetOpenedPage() -&gt; String</autodoc>
      </method>
      <method name="GetOpenedAnchor" type="String" overloaded="no">
        <autodoc>GetOpenedAnchor() -&gt; String</autodoc>
      </method>
      <method name="GetOpenedPageTitle" type="String" overloaded="no">
        <autodoc>GetOpenedPageTitle() -&gt; String</autodoc>
      </method>
      <method name="SetRelatedFrame" type="" overloaded="no">
        <autodoc>SetRelatedFrame(Frame frame, String format)</autodoc>
        <paramlist>
          <param name="frame" type="Frame" default=""/>
          <param name="format" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetRelatedFrame" type="Frame" overloaded="no">
        <autodoc>GetRelatedFrame() -&gt; Frame</autodoc>
      </method>
      <method name="SetRelatedStatusBar" type="" overloaded="no">
        <autodoc>SetRelatedStatusBar(int bar)</autodoc>
        <paramlist>
          <param name="bar" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFonts" type="" overloaded="no">
        <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
        <paramlist>
          <param name="normal_face" type="String" default=""/>
          <param name="fixed_face" type="String" default=""/>
          <param name="sizes" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="SetTitle" type="" overloaded="no">
        <autodoc>SetTitle(String title)</autodoc>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetBorders" type="" overloaded="no">
        <autodoc>SetBorders(int b)</autodoc>
        <paramlist>
          <param name="b" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ReadCustomization" type="" overloaded="no">
        <autodoc>ReadCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
        <paramlist>
          <param name="cfg" type="ConfigBase" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="WriteCustomization" type="" overloaded="no">
        <autodoc>WriteCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
        <paramlist>
          <param name="cfg" type="ConfigBase" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="HistoryBack" type="bool" overloaded="no">
        <autodoc>HistoryBack() -&gt; bool</autodoc>
      </method>
      <method name="HistoryForward" type="bool" overloaded="no">
        <autodoc>HistoryForward() -&gt; bool</autodoc>
      </method>
      <method name="HistoryCanBack" type="bool" overloaded="no">
        <autodoc>HistoryCanBack() -&gt; bool</autodoc>
      </method>
      <method name="HistoryCanForward" type="bool" overloaded="no">
        <autodoc>HistoryCanForward() -&gt; bool</autodoc>
      </method>
      <method name="HistoryClear" type="" overloaded="no">
        <autodoc>HistoryClear()</autodoc>
      </method>
      <method name="GetInternalRepresentation" type="HtmlContainerCell" overloaded="no">
        <autodoc>GetInternalRepresentation() -&gt; HtmlContainerCell</autodoc>
      </method>
      <method name="GetParser" type="HtmlWinParser" overloaded="no">
        <autodoc>GetParser() -&gt; HtmlWinParser</autodoc>
      </method>
      <method name="ScrollToAnchor" type="bool" overloaded="no">
        <autodoc>ScrollToAnchor(String anchor) -&gt; bool</autodoc>
        <paramlist>
          <param name="anchor" type="String" default=""/>
        </paramlist>
      </method>
      <method name="HasAnchor" type="bool" overloaded="no">
        <autodoc>HasAnchor(String anchor) -&gt; bool</autodoc>
        <paramlist>
          <param name="anchor" type="String" default=""/>
        </paramlist>
      </method>
      <staticmethod name="AddFilter" type="" overloaded="no">
        <autodoc>AddFilter(HtmlFilter filter)</autodoc>
        <paramlist>
          <param name="filter" type="HtmlFilter" default=""/>
        </paramlist>
      </staticmethod>
      <method name="SelectWord" type="" overloaded="no">
        <autodoc>SelectWord(Point pos)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SelectLine" type="" overloaded="no">
        <autodoc>SelectLine(Point pos)</autodoc>
        <paramlist>
          <param name="pos" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SelectAll" type="" overloaded="no">
        <autodoc>SelectAll()</autodoc>
      </method>
      <method name="base_OnLinkClicked" type="" overloaded="no">
        <autodoc>base_OnLinkClicked(HtmlLinkInfo link)</autodoc>
        <paramlist>
          <param name="link" type="HtmlLinkInfo" default=""/>
        </paramlist>
      </method>
      <method name="base_OnSetTitle" type="" overloaded="no">
        <autodoc>base_OnSetTitle(String title)</autodoc>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="base_OnCellMouseHover" type="" overloaded="no">
        <autodoc>base_OnCellMouseHover(HtmlCell cell, int x, int y)</autodoc>
        <paramlist>
          <param name="cell" type="HtmlCell" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_OnCellClicked" type="" overloaded="no">
        <autodoc>base_OnCellClicked(HtmlCell cell, int x, int y, MouseEvent event)</autodoc>
        <paramlist>
          <param name="cell" type="HtmlCell" default=""/>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="event" type="MouseEvent" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="HtmlDCRenderer" oldname="wxHtmlDCRenderer" module="html">
      <baseclass name="Object"/>
      <constructor name="HtmlDCRenderer" overloaded="no">
        <autodoc>__init__() -&gt; HtmlDCRenderer</autodoc>
      </constructor>
      <destructor name="~wxHtmlDCRenderer" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetDC" type="" overloaded="no">
        <autodoc>SetDC(DC dc, int maxwidth)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="maxwidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetHtmlText" type="" overloaded="no">
        <autodoc>SetHtmlText(String html, String basepath=EmptyString, bool isdir=True)</autodoc>
        <paramlist>
          <param name="html" type="String" default=""/>
          <param name="basepath" type="String" default="wxPyEmptyString"/>
          <param name="isdir" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetFonts" type="" overloaded="no">
        <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
        <paramlist>
          <param name="normal_face" type="String" default=""/>
          <param name="fixed_face" type="String" default=""/>
          <param name="sizes" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="Render" type="int" overloaded="no">
        <autodoc>Render(int x, int y, int from=0, int dont_render=False, int to=INT_MAX, 
    int choices=None, int LCOUNT=0) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="from" type="int" default="0"/>
          <param name="dont_render" type="int" default="False"/>
          <param name="to" type="int" default="INT_MAX"/>
          <param name="choices" type="int" default="NULL"/>
          <param name="LCOUNT" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetTotalHeight" type="int" overloaded="no">
        <autodoc>GetTotalHeight() -&gt; int</autodoc>
      </method>
    </class>
    <class name="HtmlPrintout" oldname="wxHtmlPrintout" module="html">
      <baseclass name="Printout"/>
      <constructor name="HtmlPrintout" overloaded="no">
        <autodoc>__init__(String title=HtmlPrintoutTitleStr) -&gt; HtmlPrintout</autodoc>
        <paramlist>
          <param name="title" type="String" default="wxPyHtmlPrintoutTitleStr"/>
        </paramlist>
      </constructor>
      <method name="SetHtmlText" type="" overloaded="no">
        <autodoc>SetHtmlText(String html, String basepath=EmptyString, bool isdir=True)</autodoc>
        <paramlist>
          <param name="html" type="String" default=""/>
          <param name="basepath" type="String" default="wxPyEmptyString"/>
          <param name="isdir" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetHtmlFile" type="" overloaded="no">
        <autodoc>SetHtmlFile(String htmlfile)</autodoc>
        <paramlist>
          <param name="htmlfile" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetHeader" type="" overloaded="no">
        <autodoc>SetHeader(String header, int pg=PAGE_ALL)</autodoc>
        <paramlist>
          <param name="header" type="String" default=""/>
          <param name="pg" type="int" default="wxPAGE_ALL"/>
        </paramlist>
      </method>
      <method name="SetFooter" type="" overloaded="no">
        <autodoc>SetFooter(String footer, int pg=PAGE_ALL)</autodoc>
        <paramlist>
          <param name="footer" type="String" default=""/>
          <param name="pg" type="int" default="wxPAGE_ALL"/>
        </paramlist>
      </method>
      <method name="SetFonts" type="" overloaded="no">
        <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
        <paramlist>
          <param name="normal_face" type="String" default=""/>
          <param name="fixed_face" type="String" default=""/>
          <param name="sizes" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="SetMargins" type="" overloaded="no">
        <autodoc>SetMargins(float top=25.2, float bottom=25.2, float left=25.2, 
    float right=25.2, float spaces=5)</autodoc>
        <paramlist>
          <param name="top" type="float" default="25.2"/>
          <param name="bottom" type="float" default="25.2"/>
          <param name="left" type="float" default="25.2"/>
          <param name="right" type="float" default="25.2"/>
          <param name="spaces" type="float" default="5"/>
        </paramlist>
      </method>
      <staticmethod name="AddFilter" type="" overloaded="no">
        <autodoc>AddFilter(wxHtmlFilter filter)</autodoc>
        <paramlist>
          <param name="filter" type="wxHtmlFilter" default=""/>
        </paramlist>
      </staticmethod>
      <staticmethod name="CleanUpStatics" type="" overloaded="no">
        <autodoc>CleanUpStatics()</autodoc>
      </staticmethod>
    </class>
    <class name="HtmlEasyPrinting" oldname="wxHtmlEasyPrinting" module="html">
      <baseclass name="Object"/>
      <constructor name="HtmlEasyPrinting" overloaded="no">
        <autodoc>__init__(String name=HtmlPrintingTitleStr, Window parentWindow=None) -&gt; HtmlEasyPrinting</autodoc>
        <paramlist>
          <param name="name" type="String" default="wxPyHtmlPrintingTitleStr"/>
          <param name="parentWindow" type="Window" default="NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxHtmlEasyPrinting" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="PreviewFile" type="" overloaded="no">
        <autodoc>PreviewFile(String htmlfile)</autodoc>
        <paramlist>
          <param name="htmlfile" type="String" default=""/>
        </paramlist>
      </method>
      <method name="PreviewText" type="" overloaded="no">
        <autodoc>PreviewText(String htmltext, String basepath=EmptyString)</autodoc>
        <paramlist>
          <param name="htmltext" type="String" default=""/>
          <param name="basepath" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="PrintFile" type="" overloaded="no">
        <autodoc>PrintFile(String htmlfile)</autodoc>
        <paramlist>
          <param name="htmlfile" type="String" default=""/>
        </paramlist>
      </method>
      <method name="PrintText" type="" overloaded="no">
        <autodoc>PrintText(String htmltext, String basepath=EmptyString)</autodoc>
        <paramlist>
          <param name="htmltext" type="String" default=""/>
          <param name="basepath" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="PrinterSetup" type="" overloaded="no">
        <autodoc>PrinterSetup()</autodoc>
      </method>
      <method name="PageSetup" type="" overloaded="no">
        <autodoc>PageSetup()</autodoc>
      </method>
      <method name="SetHeader" type="" overloaded="no">
        <autodoc>SetHeader(String header, int pg=PAGE_ALL)</autodoc>
        <paramlist>
          <param name="header" type="String" default=""/>
          <param name="pg" type="int" default="wxPAGE_ALL"/>
        </paramlist>
      </method>
      <method name="SetFooter" type="" overloaded="no">
        <autodoc>SetFooter(String footer, int pg=PAGE_ALL)</autodoc>
        <paramlist>
          <param name="footer" type="String" default=""/>
          <param name="pg" type="int" default="wxPAGE_ALL"/>
        </paramlist>
      </method>
      <method name="SetFonts" type="" overloaded="no">
        <autodoc>SetFonts(String normal_face, String fixed_face, PyObject sizes=None)</autodoc>
        <paramlist>
          <param name="normal_face" type="String" default=""/>
          <param name="fixed_face" type="String" default=""/>
          <param name="sizes" type="PyObject" default="NULL"/>
        </paramlist>
      </method>
      <method name="GetPrintData" type="PrintData" overloaded="no">
        <autodoc>GetPrintData() -&gt; PrintData</autodoc>
      </method>
      <method name="GetPageSetupData" type="PageSetupDialogData" overloaded="no">
        <autodoc>GetPageSetupData() -&gt; PageSetupDialogData</autodoc>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="HtmlBookRecord" oldname="wxHtmlBookRecord" module="html">
      <constructor name="HtmlBookRecord" overloaded="no">
        <autodoc>__init__(String bookfile, String basepath, String title, String start) -&gt; HtmlBookRecord</autodoc>
        <paramlist>
          <param name="bookfile" type="String" default=""/>
          <param name="basepath" type="String" default=""/>
          <param name="title" type="String" default=""/>
          <param name="start" type="String" default=""/>
        </paramlist>
      </constructor>
      <method name="GetBookFile" type="String" overloaded="no">
        <autodoc>GetBookFile() -&gt; String</autodoc>
      </method>
      <method name="GetTitle" type="String" overloaded="no">
        <autodoc>GetTitle() -&gt; String</autodoc>
      </method>
      <method name="GetStart" type="String" overloaded="no">
        <autodoc>GetStart() -&gt; String</autodoc>
      </method>
      <method name="GetBasePath" type="String" overloaded="no">
        <autodoc>GetBasePath() -&gt; String</autodoc>
      </method>
      <method name="SetContentsRange" type="" overloaded="no">
        <autodoc>SetContentsRange(int start, int end)</autodoc>
        <paramlist>
          <param name="start" type="int" default=""/>
          <param name="end" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetContentsStart" type="int" overloaded="no">
        <autodoc>GetContentsStart() -&gt; int</autodoc>
      </method>
      <method name="GetContentsEnd" type="int" overloaded="no">
        <autodoc>GetContentsEnd() -&gt; int</autodoc>
      </method>
      <method name="SetTitle" type="" overloaded="no">
        <autodoc>SetTitle(String title)</autodoc>
        <paramlist>
          <param name="title" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetBasePath" type="" overloaded="no">
        <autodoc>SetBasePath(String path)</autodoc>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetStart" type="" overloaded="no">
        <autodoc>SetStart(String start)</autodoc>
        <paramlist>
          <param name="start" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetFullPath" type="String" overloaded="no">
        <autodoc>GetFullPath(String page) -&gt; String</autodoc>
        <paramlist>
          <param name="page" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="HtmlContentsItem" oldname="wxHtmlContentsItem" module="html">
      <method name="GetLevel" type="int" overloaded="no">
        <autodoc>GetLevel() -&gt; int</autodoc>
      </method>
      <method name="GetID" type="int" overloaded="no">
        <autodoc>GetID() -&gt; int</autodoc>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="GetPage" type="String" overloaded="no">
        <autodoc>GetPage() -&gt; String</autodoc>
      </method>
      <method name="GetBook" type="HtmlBookRecord" overloaded="no">
        <autodoc>GetBook() -&gt; HtmlBookRecord</autodoc>
      </method>
    </class>
    <class name="HtmlSearchStatus" oldname="wxHtmlSearchStatus" module="html">
      <method name="Search" type="bool" overloaded="no">
        <autodoc>Search() -&gt; bool</autodoc>
      </method>
      <method name="IsActive" type="bool" overloaded="no">
        <autodoc>IsActive() -&gt; bool</autodoc>
      </method>
      <method name="GetCurIndex" type="int" overloaded="no">
        <autodoc>GetCurIndex() -&gt; int</autodoc>
      </method>
      <method name="GetMaxIndex" type="int" overloaded="no">
        <autodoc>GetMaxIndex() -&gt; int</autodoc>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="GetContentsItem" type="HtmlContentsItem" overloaded="no">
        <autodoc>GetContentsItem() -&gt; HtmlContentsItem</autodoc>
      </method>
    </class>
    <class name="HtmlHelpData" oldname="wxHtmlHelpData" module="html">
      <constructor name="HtmlHelpData" overloaded="no">
        <autodoc>__init__() -&gt; HtmlHelpData</autodoc>
      </constructor>
      <destructor name="~wxHtmlHelpData" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetTempDir" type="" overloaded="no">
        <autodoc>SetTempDir(String path)</autodoc>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AddBook" type="bool" overloaded="no">
        <autodoc>AddBook(String book) -&gt; bool</autodoc>
        <paramlist>
          <param name="book" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindPageByName" type="String" overloaded="no">
        <autodoc>FindPageByName(String page) -&gt; String</autodoc>
        <paramlist>
          <param name="page" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindPageById" type="String" overloaded="no">
        <autodoc>FindPageById(int id) -&gt; String</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBookRecArray" type="wxHtmlBookRecArray" overloaded="no">
        <autodoc>GetBookRecArray() -&gt; wxHtmlBookRecArray</autodoc>
      </method>
      <method name="GetContents" type="HtmlContentsItem" overloaded="no">
        <autodoc>GetContents() -&gt; HtmlContentsItem</autodoc>
      </method>
      <method name="GetContentsCnt" type="int" overloaded="no">
        <autodoc>GetContentsCnt() -&gt; int</autodoc>
      </method>
      <method name="GetIndex" type="HtmlContentsItem" overloaded="no">
        <autodoc>GetIndex() -&gt; HtmlContentsItem</autodoc>
      </method>
      <method name="GetIndexCnt" type="int" overloaded="no">
        <autodoc>GetIndexCnt() -&gt; int</autodoc>
      </method>
    </class>
    <class name="HtmlHelpFrame" oldname="wxHtmlHelpFrame" module="html">
      <baseclass name="Frame"/>
      <constructor name="HtmlHelpFrame" overloaded="no">
        <autodoc>__init__(Window parent, int ??, String title=EmptyString, int style=HF_DEFAULTSTYLE, 
    HtmlHelpData data=None) -&gt; HtmlHelpFrame</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="" type="int" default=""/>
          <param name="title" type="String" default="wxPyEmptyString"/>
          <param name="style" type="int" default="wxHF_DEFAULTSTYLE"/>
          <param name="data" type="HtmlHelpData" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetData" type="HtmlHelpData" overloaded="no">
        <autodoc>GetData() -&gt; HtmlHelpData</autodoc>
      </method>
      <method name="SetTitleFormat" type="" overloaded="no">
        <autodoc>SetTitleFormat(String format)</autodoc>
        <paramlist>
          <param name="format" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Display" type="" overloaded="no">
        <autodoc>Display(String x)</autodoc>
        <paramlist>
          <param name="x" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DisplayID" type="" overloaded="no">
        <autodoc>DisplayID(int id)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DisplayContents" type="" overloaded="no">
        <autodoc>DisplayContents()</autodoc>
      </method>
      <method name="DisplayIndex" type="" overloaded="no">
        <autodoc>DisplayIndex()</autodoc>
      </method>
      <method name="KeywordSearch" type="bool" overloaded="no">
        <autodoc>KeywordSearch(String keyword) -&gt; bool</autodoc>
        <paramlist>
          <param name="keyword" type="String" default=""/>
        </paramlist>
      </method>
      <method name="UseConfig" type="" overloaded="no">
        <autodoc>UseConfig(ConfigBase config, String rootpath=EmptyString)</autodoc>
        <paramlist>
          <param name="config" type="ConfigBase" default=""/>
          <param name="rootpath" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="ReadCustomization" type="" overloaded="no">
        <autodoc>ReadCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
        <paramlist>
          <param name="cfg" type="ConfigBase" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="WriteCustomization" type="" overloaded="no">
        <autodoc>WriteCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
        <paramlist>
          <param name="cfg" type="ConfigBase" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
    </class>
    <class name="HtmlHelpController" oldname="wxHtmlHelpController" module="html">
      <baseclass name="EvtHandler"/>
      <constructor name="HtmlHelpController" overloaded="no">
        <autodoc>__init__(int style=HF_DEFAULTSTYLE) -&gt; HtmlHelpController</autodoc>
        <paramlist>
          <param name="style" type="int" default="wxHF_DEFAULTSTYLE"/>
        </paramlist>
      </constructor>
      <destructor name="~wxHtmlHelpController" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetTitleFormat" type="" overloaded="no">
        <autodoc>SetTitleFormat(String format)</autodoc>
        <paramlist>
          <param name="format" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetTempDir" type="" overloaded="no">
        <autodoc>SetTempDir(String path)</autodoc>
        <paramlist>
          <param name="path" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AddBook" type="bool" overloaded="no">
        <autodoc>AddBook(String book, int show_wait_msg=False) -&gt; bool</autodoc>
        <paramlist>
          <param name="book" type="String" default=""/>
          <param name="show_wait_msg" type="int" default="False"/>
        </paramlist>
      </method>
      <method name="Display" type="" overloaded="no">
        <autodoc>Display(String x)</autodoc>
        <paramlist>
          <param name="x" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DisplayID" type="" overloaded="no">
        <autodoc>DisplayID(int id)</autodoc>
        <paramlist>
          <param name="id" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DisplayContents" type="" overloaded="no">
        <autodoc>DisplayContents()</autodoc>
      </method>
      <method name="DisplayIndex" type="" overloaded="no">
        <autodoc>DisplayIndex()</autodoc>
      </method>
      <method name="KeywordSearch" type="bool" overloaded="no">
        <autodoc>KeywordSearch(String keyword) -&gt; bool</autodoc>
        <paramlist>
          <param name="keyword" type="String" default=""/>
        </paramlist>
      </method>
      <method name="UseConfig" type="" overloaded="no">
        <autodoc>UseConfig(ConfigBase config, String rootpath=EmptyString)</autodoc>
        <paramlist>
          <param name="config" type="ConfigBase" default=""/>
          <param name="rootpath" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="ReadCustomization" type="" overloaded="no">
        <autodoc>ReadCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
        <paramlist>
          <param name="cfg" type="ConfigBase" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="WriteCustomization" type="" overloaded="no">
        <autodoc>WriteCustomization(ConfigBase cfg, String path=EmptyString)</autodoc>
        <paramlist>
          <param name="cfg" type="ConfigBase" default=""/>
          <param name="path" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="GetFrame" type="HtmlHelpFrame" overloaded="no">
        <autodoc>GetFrame() -&gt; HtmlHelpFrame</autodoc>
      </method>
    </class>
  </module>
  <module name="wizard">
    <import name="windows"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
EVT_WIZARD_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_WIZARD_PAGE_CHANGED, 1)
EVT_WIZARD_PAGE_CHANGING = wx.PyEventBinder( wxEVT_WIZARD_PAGE_CHANGING, 1)
EVT_WIZARD_CANCEL        = wx.PyEventBinder( wxEVT_WIZARD_CANCEL, 1)
EVT_WIZARD_HELP          = wx.PyEventBinder( wxEVT_WIZARD_HELP, 1)
EVT_WIZARD_FINISHED      = wx.PyEventBinder( wxEVT_WIZARD_FINISHED, 1)
</pythoncode>
    <class name="WizardEvent" oldname="wxWizardEvent" module="wizard">
      <baseclass name="NotifyEvent"/>
      <constructor name="WizardEvent" overloaded="no">
        <autodoc>__init__(wxEventType type=wxEVT_NULL, int id=-1, bool direction=True, 
    WizardPage page=None) -&gt; WizardEvent</autodoc>
        <paramlist>
          <param name="type" type="wxEventType" default="wxEVT_NULL"/>
          <param name="id" type="int" default="-1"/>
          <param name="direction" type="bool" default="True"/>
          <param name="page" type="wxWizardPage" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetDirection" type="bool" overloaded="no">
        <autodoc>GetDirection() -&gt; bool</autodoc>
      </method>
      <method name="GetPage" type="wxWizardPage" overloaded="no">
        <autodoc>GetPage() -&gt; WizardPage</autodoc>
      </method>
    </class>
    <class name="WizardPage" oldname="wxWizardPage" module="wizard">
      <baseclass name="Panel"/>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Wizard parent, Bitmap bitmap=wxNullBitmap, String resource=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="wxWizard" default=""/>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
          <param name="resource" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="GetPrev" type="WizardPage" overloaded="no">
        <autodoc>GetPrev() -&gt; WizardPage</autodoc>
      </method>
      <method name="GetNext" type="WizardPage" overloaded="no">
        <autodoc>GetNext() -&gt; WizardPage</autodoc>
      </method>
      <method name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
      </method>
    </class>
    <class name="PyWizardPage" oldname="wxPyWizardPage" module="wizard">
      <baseclass name="WizardPage"/>
      <constructor name="PyWizardPage" overloaded="no">
        <autodoc>__init__(Wizard parent, Bitmap bitmap=&amp;wxNullBitmap, String resource=&amp;wxPyEmptyString) -&gt; PyWizardPage</autodoc>
        <paramlist>
          <param name="parent" type="wxWizard" default=""/>
          <param name="bitmap" type="Bitmap" default="&amp;wxNullBitmap"/>
          <param name="resource" type="String" default="&amp;wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <constructor name="PrePyWizardPage" overloaded="no">
        <autodoc>PrePyWizardPage() -&gt; PyWizardPage</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Wizard parent, Bitmap bitmap=wxNullBitmap, String resource=EmptyString) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="wxWizard" default=""/>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
          <param name="resource" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_DoMoveWindow" type="" overloaded="no">
        <autodoc>base_DoMoveWindow(int x, int y, int width, int height)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetSize" type="" overloaded="no">
        <autodoc>base_DoSetSize(int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
          <param name="sizeFlags" type="int" default="wxSIZE_AUTO"/>
        </paramlist>
      </method>
      <method name="base_DoSetClientSize" type="" overloaded="no">
        <autodoc>base_DoSetClientSize(int width, int height)</autodoc>
        <paramlist>
          <param name="width" type="int" default=""/>
          <param name="height" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoSetVirtualSize" type="" overloaded="no">
        <autodoc>base_DoSetVirtualSize(int x, int y)</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetSize" type="" overloaded="no">
        <autodoc>base_DoGetSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetClientSize" type="" overloaded="no">
        <autodoc>base_DoGetClientSize() -&gt; (width, height)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetPosition" type="" overloaded="no">
        <autodoc>base_DoGetPosition() -&gt; (x,y)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="base_DoGetVirtualSize" type="Size" overloaded="no">
        <autodoc>base_DoGetVirtualSize() -&gt; Size</autodoc>
      </method>
      <method name="base_DoGetBestSize" type="Size" overloaded="no">
        <autodoc>base_DoGetBestSize() -&gt; Size</autodoc>
      </method>
      <method name="base_InitDialog" type="" overloaded="no">
        <autodoc>base_InitDialog()</autodoc>
      </method>
      <method name="base_TransferDataToWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataToWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_TransferDataFromWindow" type="bool" overloaded="no">
        <autodoc>base_TransferDataFromWindow() -&gt; bool</autodoc>
      </method>
      <method name="base_Validate" type="bool" overloaded="no">
        <autodoc>base_Validate() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocus" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocus() -&gt; bool</autodoc>
      </method>
      <method name="base_AcceptsFocusFromKeyboard" type="bool" overloaded="no">
        <autodoc>base_AcceptsFocusFromKeyboard() -&gt; bool</autodoc>
      </method>
      <method name="base_GetMaxSize" type="Size" overloaded="no">
        <autodoc>base_GetMaxSize() -&gt; Size</autodoc>
      </method>
      <method name="base_AddChild" type="" overloaded="no">
        <autodoc>base_AddChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="base_RemoveChild" type="" overloaded="no">
        <autodoc>base_RemoveChild(Window child)</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="WizardPageSimple" oldname="wxWizardPageSimple" module="wizard">
      <baseclass name="WizardPage"/>
      <constructor name="WizardPageSimple" overloaded="no">
        <autodoc>__init__(Wizard parent, WizardPage prev=None, WizardPage next=None, 
    Bitmap bitmap=wxNullBitmap, wxChar resource=None) -&gt; WizardPageSimple</autodoc>
        <paramlist>
          <param name="parent" type="wxWizard" default=""/>
          <param name="prev" type="WizardPage" default="NULL"/>
          <param name="next" type="WizardPage" default="NULL"/>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
          <param name="resource" type="wxChar" default="NULL"/>
        </paramlist>
      </constructor>
      <constructor name="PreWizardPageSimple" overloaded="no">
        <autodoc>PreWizardPageSimple() -&gt; WizardPageSimple</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Wizard parent=None, WizardPage prev=None, WizardPage next=None, 
    Bitmap bitmap=wxNullBitmap, wxChar resource=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="wxWizard" default="NULL"/>
          <param name="prev" type="WizardPage" default="NULL"/>
          <param name="next" type="WizardPage" default="NULL"/>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
          <param name="resource" type="wxChar" default="NULL"/>
        </paramlist>
      </method>
      <method name="SetPrev" type="" overloaded="no">
        <autodoc>SetPrev(WizardPage prev)</autodoc>
        <paramlist>
          <param name="prev" type="WizardPage" default=""/>
        </paramlist>
      </method>
      <method name="SetNext" type="" overloaded="no">
        <autodoc>SetNext(WizardPage next)</autodoc>
        <paramlist>
          <param name="next" type="WizardPage" default=""/>
        </paramlist>
      </method>
      <staticmethod name="Chain" type="" overloaded="no">
        <autodoc>Chain(WizardPageSimple first, WizardPageSimple second)</autodoc>
        <paramlist>
          <param name="first" type="WizardPageSimple" default=""/>
          <param name="second" type="WizardPageSimple" default=""/>
        </paramlist>
      </staticmethod>
    </class>
    <class name="Wizard" oldname="wxWizard" module="wizard">
      <baseclass name="Dialog"/>
      <constructor name="Wizard" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, String title=EmptyString, 
    Bitmap bitmap=wxNullBitmap, Point pos=DefaultPosition, 
    long style=DEFAULT_DIALOG_STYLE) -&gt; Wizard</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="title" type="String" default="wxPyEmptyString"/>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="style" type="long" default="wxDEFAULT_DIALOG_STYLE"/>
        </paramlist>
      </constructor>
      <constructor name="PreWizard" overloaded="no">
        <autodoc>PreWizard() -&gt; Wizard</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, String title=EmptyString, 
    Bitmap bitmap=wxNullBitmap, Point pos=DefaultPosition) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="title" type="String" default="wxPyEmptyString"/>
          <param name="bitmap" type="Bitmap" default="wxNullBitmap"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
        </paramlist>
      </method>
      <method name="Init" type="" overloaded="no">
        <autodoc>Init()</autodoc>
      </method>
      <method name="RunWizard" type="bool" overloaded="no">
        <autodoc>RunWizard(WizardPage firstPage) -&gt; bool</autodoc>
        <paramlist>
          <param name="firstPage" type="WizardPage" default=""/>
        </paramlist>
      </method>
      <method name="GetCurrentPage" type="WizardPage" overloaded="no">
        <autodoc>GetCurrentPage() -&gt; WizardPage</autodoc>
      </method>
      <method name="SetPageSize" type="" overloaded="no">
        <autodoc>SetPageSize(Size size)</autodoc>
        <paramlist>
          <param name="size" type="Size" default=""/>
        </paramlist>
      </method>
      <method name="GetPageSize" type="Size" overloaded="no">
        <autodoc>GetPageSize() -&gt; Size</autodoc>
      </method>
      <method name="FitToPage" type="" overloaded="no">
        <autodoc>FitToPage(WizardPage firstPage)</autodoc>
        <paramlist>
          <param name="firstPage" type="WizardPage" default=""/>
        </paramlist>
      </method>
      <method name="GetPageAreaSizer" type="Sizer" overloaded="no">
        <autodoc>GetPageAreaSizer() -&gt; Sizer</autodoc>
      </method>
      <method name="SetBorder" type="" overloaded="no">
        <autodoc>SetBorder(int border)</autodoc>
        <paramlist>
          <param name="border" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IsRunning" type="bool" overloaded="no">
        <autodoc>IsRunning() -&gt; bool</autodoc>
      </method>
      <method name="ShowPage" type="bool" overloaded="no">
        <autodoc>ShowPage(WizardPage page, bool goingForward=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="page" type="WizardPage" default=""/>
          <param name="goingForward" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="HasNextPage" type="bool" overloaded="no">
        <autodoc>HasNextPage(WizardPage page) -&gt; bool</autodoc>
        <paramlist>
          <param name="page" type="WizardPage" default=""/>
        </paramlist>
      </method>
      <method name="HasPrevPage" type="bool" overloaded="no">
        <autodoc>HasPrevPage(WizardPage page) -&gt; bool</autodoc>
        <paramlist>
          <param name="page" type="WizardPage" default=""/>
        </paramlist>
      </method>
    </class>
  </module>
  <module name="glcanvas">
    <import name="core"/>
    <pythoncode> wx = core </pythoncode>
    <class name="GLContext" oldname="wxGLContext" module="glcanvas">
      <baseclass name="Object"/>
      <constructor name="GLContext" overloaded="no">
        <autodoc>__init__(bool isRGB, GLCanvas win, wxPalette palette=wxNullPalette, 
    GLContext other=None) -&gt; GLContext</autodoc>
        <paramlist>
          <param name="isRGB" type="bool" default=""/>
          <param name="win" type="wxGLCanvas" default=""/>
          <param name="palette" type="Palette" default="wxNullPalette"/>
          <param name="other" type="GLContext" default="NULL"/>
        </paramlist>
      </constructor>
      <destructor name="~wxGLContext" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetCurrent" type="" overloaded="no">
        <autodoc>SetCurrent()</autodoc>
      </method>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(String colour)</autodoc>
        <paramlist>
          <param name="colour" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SwapBuffers" type="" overloaded="no">
        <autodoc>SwapBuffers()</autodoc>
      </method>
      <method name="SetupPixelFormat" type="" overloaded="no">
        <autodoc>SetupPixelFormat()</autodoc>
      </method>
      <method name="SetupPalette" type="" overloaded="no">
        <autodoc>SetupPalette(wxPalette palette)</autodoc>
        <paramlist>
          <param name="palette" type="Palette" default=""/>
        </paramlist>
      </method>
      <method name="CreateDefaultPalette" type="Palette" overloaded="no">
        <autodoc>CreateDefaultPalette() -&gt; wxPalette</autodoc>
      </method>
      <method name="GetPalette" type="Palette" overloaded="no">
        <autodoc>GetPalette() -&gt; wxPalette</autodoc>
      </method>
      <method name="GetWindow" type="Window" overloaded="no">
        <autodoc>GetWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <class name="GLCanvas" oldname="wxGLCanvas" module="glcanvas">
      <baseclass name="Window"/>
      <constructor name="GLCanvas" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0, String name=GLCanvasNameStr, 
    int attribList=None, wxPalette palette=wxNullPalette) -&gt; GLCanvas</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyGLCanvasNameStr"/>
          <param name="attribList" type="int" default="NULL"/>
          <param name="palette" type="Palette" default="wxNullPalette"/>
        </paramlist>
      </constructor>
      <constructor name="GLCanvasWithContext" overloaded="no">
        <autodoc>GLCanvasWithContext(Window parent, GLContext shared=None, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, 
    long style=0, String name=GLCanvasNameStr, 
    int attribList=None, wxPalette palette=wxNullPalette) -&gt; GLCanvas</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="shared" type="GLContext" default="NULL"/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPyGLCanvasNameStr"/>
          <param name="attribList" type="int" default="NULL"/>
          <param name="palette" type="Palette" default="wxNullPalette"/>
        </paramlist>
      </constructor>
      <method name="SetCurrent" type="" overloaded="no">
        <autodoc>SetCurrent()</autodoc>
      </method>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(String colour)</autodoc>
        <paramlist>
          <param name="colour" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SwapBuffers" type="" overloaded="no">
        <autodoc>SwapBuffers()</autodoc>
      </method>
      <method name="GetContext" type="GLContext" overloaded="no">
        <autodoc>GetContext() -&gt; GLContext</autodoc>
      </method>
    </class>
  </module>
  <module name="ogl">
    <import name="windows"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="ShapeRegion" oldname="wxShapeRegion" module="ogl">
      <baseclass name="Object"/>
      <constructor name="ShapeRegion" overloaded="no">
        <autodoc>__init__() -&gt; ShapeRegion</autodoc>
      </constructor>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String s)</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font f)</autodoc>
        <paramlist>
          <param name="f" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetMinSize" type="" overloaded="no">
        <autodoc>SetMinSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetProportions" type="" overloaded="no">
        <autodoc>SetProportions(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetFormatMode" type="" overloaded="no">
        <autodoc>SetFormatMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetName" type="" overloaded="no">
        <autodoc>SetName(String s)</autodoc>
        <paramlist>
          <param name="s" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetColour" type="" overloaded="no">
        <autodoc>SetColour(String col)</autodoc>
        <paramlist>
          <param name="col" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont() -&gt; Font</autodoc>
      </method>
      <method name="GetMinSize" type="" overloaded="no">
        <autodoc>GetMinSize(double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetProportion" type="" overloaded="no">
        <autodoc>GetProportion(double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="" overloaded="no">
        <autodoc>GetSize(double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetPosition" type="" overloaded="no">
        <autodoc>GetPosition(double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetFormatMode" type="int" overloaded="no">
        <autodoc>GetFormatMode() -&gt; int</autodoc>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="GetColour" type="String" overloaded="no">
        <autodoc>GetColour() -&gt; String</autodoc>
      </method>
      <method name="GetActualColourObject" type="Colour" overloaded="no">
        <autodoc>GetActualColourObject() -&gt; Colour</autodoc>
      </method>
      <method name="GetFormattedText" type="wxList" overloaded="no">
        <autodoc>GetFormattedText() -&gt; wxList</autodoc>
      </method>
      <method name="GetPenColour" type="String" overloaded="no">
        <autodoc>GetPenColour() -&gt; String</autodoc>
      </method>
      <method name="GetPenStyle" type="int" overloaded="no">
        <autodoc>GetPenStyle() -&gt; int</autodoc>
      </method>
      <method name="SetPenStyle" type="" overloaded="no">
        <autodoc>SetPenStyle(int style)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPenColour" type="" overloaded="no">
        <autodoc>SetPenColour(String col)</autodoc>
        <paramlist>
          <param name="col" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetActualPen" type="Pen" overloaded="no">
        <autodoc>GetActualPen() -&gt; wxPen</autodoc>
      </method>
      <method name="GetWidth" type="double" overloaded="no">
        <autodoc>GetWidth() -&gt; double</autodoc>
      </method>
      <method name="GetHeight" type="double" overloaded="no">
        <autodoc>GetHeight() -&gt; double</autodoc>
      </method>
      <method name="ClearText" type="" overloaded="no">
        <autodoc>ClearText()</autodoc>
      </method>
    </class>
    <class name="AttachmentPoint" oldname="wxAttachmentPoint" module="ogl">
      <baseclass name="Object"/>
      <constructor name="AttachmentPoint" overloaded="no">
        <autodoc>__init__(int id=0, double x=0.0, double y=0.0) -&gt; AttachmentPoint</autodoc>
        <paramlist>
          <param name="id" type="int" default="0"/>
          <param name="x" type="double" default="0.0"/>
          <param name="y" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <property name="m_id" type="int" readonly="no"/>
      <property name="m_x" type="double" readonly="no"/>
      <property name="m_y" type="double" readonly="no"/>
    </class>
    <class name="PyShapeEvtHandler" oldname="wxPyShapeEvtHandler" module="ogl">
      <baseclass name="Object"/>
      <constructor name="PyShapeEvtHandler" overloaded="no">
        <autodoc>__init__(PyShapeEvtHandler prev=None, PyShape shape=None) -&gt; PyShapeEvtHandler</autodoc>
        <paramlist>
          <param name="prev" type="PyShapeEvtHandler" default="NULL"/>
          <param name="shape" type="wxPyShape" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="_setOORInfo" type="" overloaded="no">
        <autodoc>_setOORInfo(PyObject _self)</autodoc>
        <paramlist>
          <param name="_self" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetShape" type="" overloaded="no">
        <autodoc>SetShape(PyShape sh)</autodoc>
        <paramlist>
          <param name="sh" type="wxPyShape" default=""/>
        </paramlist>
      </method>
      <method name="GetShape" type="wxPyShape" overloaded="no">
        <autodoc>GetShape() -&gt; PyShape</autodoc>
      </method>
      <method name="SetPreviousHandler" type="" overloaded="no">
        <autodoc>SetPreviousHandler(PyShapeEvtHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="PyShapeEvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="GetPreviousHandler" type="PyShapeEvtHandler" overloaded="no">
        <autodoc>GetPreviousHandler() -&gt; PyShapeEvtHandler</autodoc>
      </method>
      <method name="CreateNewCopy" type="PyShapeEvtHandler" overloaded="no">
        <autodoc>CreateNewCopy() -&gt; PyShapeEvtHandler</autodoc>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=False)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyShape" oldname="wxPyShape" module="ogl">
      <baseclass name="PyShapeEvtHandler"/>
      <constructor name="PyShape" overloaded="no">
        <autodoc>__init__(PyShapeCanvas can=None) -&gt; PyShape</autodoc>
        <paramlist>
          <param name="can" type="wxPyShapeCanvas" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetBoundingBoxMax" type="" overloaded="no">
        <autodoc>GetBoundingBoxMax(double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetBoundingBoxMin" type="" overloaded="no">
        <autodoc>GetBoundingBoxMin(double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetPerimeterPoint" type="bool" overloaded="no">
        <autodoc>GetPerimeterPoint(double x1, double y1, double x2, double y2, double OUTPUT, 
    double OUTPUT) -&gt; bool</autodoc>
        <paramlist>
          <param name="x1" type="double" default=""/>
          <param name="y1" type="double" default=""/>
          <param name="x2" type="double" default=""/>
          <param name="y2" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetCanvas" type="wxPyShapeCanvas" overloaded="no">
        <autodoc>GetCanvas() -&gt; PyShapeCanvas</autodoc>
      </method>
      <method name="SetCanvas" type="" overloaded="no">
        <autodoc>SetCanvas(PyShapeCanvas the_canvas)</autodoc>
        <paramlist>
          <param name="the_canvas" type="wxPyShapeCanvas" default=""/>
        </paramlist>
      </method>
      <method name="AddToCanvas" type="" overloaded="no">
        <autodoc>AddToCanvas(PyShapeCanvas the_canvas, PyShape addAfter=None)</autodoc>
        <paramlist>
          <param name="the_canvas" type="wxPyShapeCanvas" default=""/>
          <param name="addAfter" type="PyShape" default="NULL"/>
        </paramlist>
      </method>
      <method name="InsertInCanvas" type="" overloaded="no">
        <autodoc>InsertInCanvas(PyShapeCanvas the_canvas)</autodoc>
        <paramlist>
          <param name="the_canvas" type="wxPyShapeCanvas" default=""/>
        </paramlist>
      </method>
      <method name="RemoveFromCanvas" type="" overloaded="no">
        <autodoc>RemoveFromCanvas(PyShapeCanvas the_canvas)</autodoc>
        <paramlist>
          <param name="the_canvas" type="wxPyShapeCanvas" default=""/>
        </paramlist>
      </method>
      <method name="GetX" type="double" overloaded="no">
        <autodoc>GetX() -&gt; double</autodoc>
      </method>
      <method name="GetY" type="double" overloaded="no">
        <autodoc>GetY() -&gt; double</autodoc>
      </method>
      <method name="SetX" type="" overloaded="no">
        <autodoc>SetX(double x)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetY" type="" overloaded="no">
        <autodoc>SetY(double y)</autodoc>
        <paramlist>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetParent" type="PyShape" overloaded="no">
        <autodoc>GetParent() -&gt; PyShape</autodoc>
      </method>
      <method name="SetParent" type="" overloaded="no">
        <autodoc>SetParent(PyShape p)</autodoc>
        <paramlist>
          <param name="p" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="GetTopAncestor" type="PyShape" overloaded="no">
        <autodoc>GetTopAncestor() -&gt; PyShape</autodoc>
      </method>
      <method name="GetChildren" type="PyObject" overloaded="no">
        <autodoc>GetChildren() -&gt; PyObject</autodoc>
      </method>
      <method name="Unlink" type="" overloaded="no">
        <autodoc>Unlink()</autodoc>
      </method>
      <method name="SetDrawHandles" type="" overloaded="no">
        <autodoc>SetDrawHandles(bool drawH)</autodoc>
        <paramlist>
          <param name="drawH" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetDrawHandles" type="bool" overloaded="no">
        <autodoc>GetDrawHandles() -&gt; bool</autodoc>
      </method>
      <method name="MakeControlPoints" type="" overloaded="no">
        <autodoc>MakeControlPoints()</autodoc>
      </method>
      <method name="DeleteControlPoints" type="" overloaded="no">
        <autodoc>DeleteControlPoints(DC dc=None)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default="NULL"/>
        </paramlist>
      </method>
      <method name="ResetControlPoints" type="" overloaded="no">
        <autodoc>ResetControlPoints()</autodoc>
      </method>
      <method name="GetEventHandler" type="PyShapeEvtHandler" overloaded="no">
        <autodoc>GetEventHandler() -&gt; PyShapeEvtHandler</autodoc>
      </method>
      <method name="SetEventHandler" type="" overloaded="no">
        <autodoc>SetEventHandler(PyShapeEvtHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="PyShapeEvtHandler" default=""/>
        </paramlist>
      </method>
      <method name="MakeMandatoryControlPoints" type="" overloaded="no">
        <autodoc>MakeMandatoryControlPoints()</autodoc>
      </method>
      <method name="ResetMandatoryControlPoints" type="" overloaded="no">
        <autodoc>ResetMandatoryControlPoints()</autodoc>
      </method>
      <method name="Recompute" type="bool" overloaded="no">
        <autodoc>Recompute() -&gt; bool</autodoc>
      </method>
      <method name="CalculateSize" type="" overloaded="no">
        <autodoc>CalculateSize()</autodoc>
      </method>
      <method name="Select" type="" overloaded="no">
        <autodoc>Select(bool select=True, DC dc=None)</autodoc>
        <paramlist>
          <param name="select" type="bool" default="True"/>
          <param name="dc" type="DC" default="NULL"/>
        </paramlist>
      </method>
      <method name="SetHighlight" type="" overloaded="no">
        <autodoc>SetHighlight(bool hi=True, bool recurse=False)</autodoc>
        <paramlist>
          <param name="hi" type="bool" default="True"/>
          <param name="recurse" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="IsHighlighted" type="bool" overloaded="no">
        <autodoc>IsHighlighted() -&gt; bool</autodoc>
      </method>
      <method name="Selected" type="bool" overloaded="no">
        <autodoc>Selected() -&gt; bool</autodoc>
      </method>
      <method name="AncestorSelected" type="bool" overloaded="no">
        <autodoc>AncestorSelected() -&gt; bool</autodoc>
      </method>
      <method name="SetSensitivityFilter" type="" overloaded="no">
        <autodoc>SetSensitivityFilter(int sens=OP_ALL, bool recursive=False)</autodoc>
        <paramlist>
          <param name="sens" type="int" default="OP_ALL"/>
          <param name="recursive" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="GetSensitivityFilter" type="int" overloaded="no">
        <autodoc>GetSensitivityFilter() -&gt; int</autodoc>
      </method>
      <method name="SetDraggable" type="" overloaded="no">
        <autodoc>SetDraggable(bool drag, bool recursive=False)</autodoc>
        <paramlist>
          <param name="drag" type="bool" default=""/>
          <param name="recursive" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="SetFixedSize" type="" overloaded="no">
        <autodoc>SetFixedSize(bool x, bool y)</autodoc>
        <paramlist>
          <param name="x" type="bool" default=""/>
          <param name="y" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetFixedSize" type="" overloaded="no">
        <autodoc>GetFixedSize(bool OUTPUT, bool OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="bool" default=""/>
          <param name="OUTPUT" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetFixedWidth" type="bool" overloaded="no">
        <autodoc>GetFixedWidth() -&gt; bool</autodoc>
      </method>
      <method name="GetFixedHeight" type="bool" overloaded="no">
        <autodoc>GetFixedHeight() -&gt; bool</autodoc>
      </method>
      <method name="SetSpaceAttachments" type="" overloaded="no">
        <autodoc>SetSpaceAttachments(bool sp)</autodoc>
        <paramlist>
          <param name="sp" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetSpaceAttachments" type="bool" overloaded="no">
        <autodoc>GetSpaceAttachments() -&gt; bool</autodoc>
      </method>
      <method name="SetShadowMode" type="" overloaded="no">
        <autodoc>SetShadowMode(int mode, bool redraw=False)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
          <param name="redraw" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="GetShadowMode" type="int" overloaded="no">
        <autodoc>GetShadowMode() -&gt; int</autodoc>
      </method>
      <method name="HitTest" type="bool" overloaded="no">
        <autodoc>HitTest(double x, double y, int OUTPUT, double OUTPUT) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetCentreResize" type="" overloaded="no">
        <autodoc>SetCentreResize(bool cr)</autodoc>
        <paramlist>
          <param name="cr" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetCentreResize" type="bool" overloaded="no">
        <autodoc>GetCentreResize() -&gt; bool</autodoc>
      </method>
      <method name="SetMaintainAspectRatio" type="" overloaded="no">
        <autodoc>SetMaintainAspectRatio(bool ar)</autodoc>
        <paramlist>
          <param name="ar" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetMaintainAspectRatio" type="bool" overloaded="no">
        <autodoc>GetMaintainAspectRatio() -&gt; bool</autodoc>
      </method>
      <method name="GetLines" type="PyObject" overloaded="no">
        <autodoc>GetLines() -&gt; PyObject</autodoc>
      </method>
      <method name="SetDisableLabel" type="" overloaded="no">
        <autodoc>SetDisableLabel(bool flag)</autodoc>
        <paramlist>
          <param name="flag" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetDisableLabel" type="bool" overloaded="no">
        <autodoc>GetDisableLabel() -&gt; bool</autodoc>
      </method>
      <method name="SetAttachmentMode" type="" overloaded="no">
        <autodoc>SetAttachmentMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAttachmentMode" type="int" overloaded="no">
        <autodoc>GetAttachmentMode() -&gt; int</autodoc>
      </method>
      <method name="SetId" type="" overloaded="no">
        <autodoc>SetId(long i)</autodoc>
        <paramlist>
          <param name="i" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetId" type="long" overloaded="no">
        <autodoc>GetId() -&gt; long</autodoc>
      </method>
      <method name="SetPen" type="" overloaded="no">
        <autodoc>SetPen(wxPen pen)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="SetBrush" type="" overloaded="no">
        <autodoc>SetBrush(wxBrush brush)</autodoc>
        <paramlist>
          <param name="brush" type="Brush" default=""/>
        </paramlist>
      </method>
      <method name="Show" type="" overloaded="no">
        <autodoc>Show(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="IsShown" type="bool" overloaded="no">
        <autodoc>IsShown() -&gt; bool</autodoc>
      </method>
      <method name="Move" type="" overloaded="no">
        <autodoc>Move(DC dc, double x1, double y1, bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x1" type="double" default=""/>
          <param name="y1" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Erase" type="" overloaded="no">
        <autodoc>Erase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="EraseContents" type="" overloaded="no">
        <autodoc>EraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="Draw" type="" overloaded="no">
        <autodoc>Draw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="Flash" type="" overloaded="no">
        <autodoc>Flash()</autodoc>
      </method>
      <method name="MoveLinks" type="" overloaded="no">
        <autodoc>MoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="DrawContents" type="" overloaded="no">
        <autodoc>DrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(double x, double y, bool recursive=True)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="recursive" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetAttachmentSize" type="" overloaded="no">
        <autodoc>SetAttachmentSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="Attach" type="" overloaded="no">
        <autodoc>Attach(PyShapeCanvas can)</autodoc>
        <paramlist>
          <param name="can" type="wxPyShapeCanvas" default=""/>
        </paramlist>
      </method>
      <method name="Detach" type="" overloaded="no">
        <autodoc>Detach()</autodoc>
      </method>
      <method name="Constrain" type="bool" overloaded="no">
        <autodoc>Constrain() -&gt; bool</autodoc>
      </method>
      <method name="AddLine" type="" overloaded="no">
        <autodoc>AddLine(PyLineShape line, PyShape other, int attachFrom=0, 
    int attachTo=0, int positionFrom=-1, int positionTo=-1)</autodoc>
        <paramlist>
          <param name="line" type="wxPyLineShape" default=""/>
          <param name="other" type="PyShape" default=""/>
          <param name="attachFrom" type="int" default="0"/>
          <param name="attachTo" type="int" default="0"/>
          <param name="positionFrom" type="int" default="-1"/>
          <param name="positionTo" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="GetLinePosition" type="int" overloaded="no">
        <autodoc>GetLinePosition(PyLineShape line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="wxPyLineShape" default=""/>
        </paramlist>
      </method>
      <method name="AddText" type="" overloaded="no">
        <autodoc>AddText(String string)</autodoc>
        <paramlist>
          <param name="string" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetPen" type="Pen" overloaded="no">
        <autodoc>GetPen() -&gt; wxPen</autodoc>
      </method>
      <method name="GetBrush" type="Brush" overloaded="no">
        <autodoc>GetBrush() -&gt; wxBrush</autodoc>
      </method>
      <method name="SetDefaultRegionSize" type="" overloaded="no">
        <autodoc>SetDefaultRegionSize()</autodoc>
      </method>
      <method name="FormatText" type="" overloaded="no">
        <autodoc>FormatText(DC dc, String s, int regionId=0)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="s" type="String" default=""/>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetFormatMode" type="" overloaded="no">
        <autodoc>SetFormatMode(int mode, int regionId=0)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetFormatMode" type="int" overloaded="no">
        <autodoc>GetFormatMode(int regionId=0) -&gt; int</autodoc>
        <paramlist>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font, int regionId=0)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont(int regionId=0) -&gt; Font</autodoc>
        <paramlist>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(String colour, int regionId=0)</autodoc>
        <paramlist>
          <param name="colour" type="String" default=""/>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetTextColour" type="String" overloaded="no">
        <autodoc>GetTextColour(int regionId=0) -&gt; String</autodoc>
        <paramlist>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetNumberOfTextRegions" type="int" overloaded="no">
        <autodoc>GetNumberOfTextRegions() -&gt; int</autodoc>
      </method>
      <method name="SetRegionName" type="" overloaded="no">
        <autodoc>SetRegionName(String name, int regionId=0)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetRegionName" type="String" overloaded="no">
        <autodoc>GetRegionName(int regionId) -&gt; String</autodoc>
        <paramlist>
          <param name="regionId" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetRegionId" type="int" overloaded="no">
        <autodoc>GetRegionId(String name) -&gt; int</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="NameRegions" type="" overloaded="no">
        <autodoc>NameRegions(String parentName=EmptyString)</autodoc>
        <paramlist>
          <param name="parentName" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </method>
      <method name="GetRegions" type="PyObject" overloaded="no">
        <autodoc>GetRegions() -&gt; PyObject</autodoc>
      </method>
      <method name="AddRegion" type="" overloaded="no">
        <autodoc>AddRegion(ShapeRegion region)</autodoc>
        <paramlist>
          <param name="region" type="ShapeRegion" default=""/>
        </paramlist>
      </method>
      <method name="ClearRegions" type="" overloaded="no">
        <autodoc>ClearRegions()</autodoc>
      </method>
      <method name="AssignNewIds" type="" overloaded="no">
        <autodoc>AssignNewIds()</autodoc>
      </method>
      <method name="FindRegion" type="PyShape" overloaded="no">
        <autodoc>FindRegion(String regionName, int OUTPUT) -&gt; PyShape</autodoc>
        <paramlist>
          <param name="regionName" type="String" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="FindRegionNames" type="" overloaded="no">
        <autodoc>FindRegionNames(wxStringList list)</autodoc>
        <paramlist>
          <param name="list" type="wxStringList" default=""/>
        </paramlist>
      </method>
      <method name="ClearText" type="" overloaded="no">
        <autodoc>ClearText(int regionId=0)</autodoc>
        <paramlist>
          <param name="regionId" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="RemoveLine" type="" overloaded="no">
        <autodoc>RemoveLine(PyLineShape line)</autodoc>
        <paramlist>
          <param name="line" type="wxPyLineShape" default=""/>
        </paramlist>
      </method>
      <method name="GetAttachmentPosition" type="bool" overloaded="no">
        <autodoc>GetAttachmentPosition(int attachment, double OUTPUT, double OUTPUT, int nth=0, 
    int no_arcs=1, PyLineShape line=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="attachment" type="int" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="nth" type="int" default="0"/>
          <param name="no_arcs" type="int" default="1"/>
          <param name="line" type="wxPyLineShape" default="NULL"/>
        </paramlist>
      </method>
      <method name="GetNumberOfAttachments" type="int" overloaded="no">
        <autodoc>GetNumberOfAttachments() -&gt; int</autodoc>
      </method>
      <method name="AttachmentIsValid" type="bool" overloaded="no">
        <autodoc>AttachmentIsValid(int attachment) -&gt; bool</autodoc>
        <paramlist>
          <param name="attachment" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAttachments" type="PyObject" overloaded="no">
        <autodoc>GetAttachments() -&gt; PyObject</autodoc>
      </method>
      <method name="GetAttachmentPositionEdge" type="bool" overloaded="no">
        <autodoc>GetAttachmentPositionEdge(int attachment, double OUTPUT, double OUTPUT, int nth=0, 
    int no_arcs=1, PyLineShape line=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="attachment" type="int" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="nth" type="int" default="0"/>
          <param name="no_arcs" type="int" default="1"/>
          <param name="line" type="wxPyLineShape" default="NULL"/>
        </paramlist>
      </method>
      <method name="CalcSimpleAttachment" type="RealPoint" overloaded="no">
        <autodoc>CalcSimpleAttachment(RealPoint pt1, RealPoint pt2, int nth, int noArcs, 
    PyLineShape line) -&gt; RealPoint</autodoc>
        <paramlist>
          <param name="pt1" type="RealPoint" default=""/>
          <param name="pt2" type="RealPoint" default=""/>
          <param name="nth" type="int" default=""/>
          <param name="noArcs" type="int" default=""/>
          <param name="line" type="wxPyLineShape" default=""/>
        </paramlist>
      </method>
      <method name="AttachmentSortTest" type="bool" overloaded="no">
        <autodoc>AttachmentSortTest(int attachmentPoint, RealPoint pt1, RealPoint pt2) -&gt; bool</autodoc>
        <paramlist>
          <param name="attachmentPoint" type="int" default=""/>
          <param name="pt1" type="RealPoint" default=""/>
          <param name="pt2" type="RealPoint" default=""/>
        </paramlist>
      </method>
      <method name="EraseLinks" type="" overloaded="no">
        <autodoc>EraseLinks(DC dc, int attachment=-1, bool recurse=False)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="attachment" type="int" default="-1"/>
          <param name="recurse" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="DrawLinks" type="" overloaded="no">
        <autodoc>DrawLinks(DC dc, int attachment=-1, bool recurse=False)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="attachment" type="int" default="-1"/>
          <param name="recurse" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="MoveLineToNewAttachment" type="bool" overloaded="no">
        <autodoc>MoveLineToNewAttachment(DC dc, PyLineShape to_move, double x, double y) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="to_move" type="wxPyLineShape" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="ApplyAttachmentOrdering" type="" overloaded="no">
        <autodoc>ApplyAttachmentOrdering(PyObject linesToSort)</autodoc>
        <paramlist>
          <param name="linesToSort" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetBranchingAttachmentRoot" type="RealPoint" overloaded="no">
        <autodoc>GetBranchingAttachmentRoot(int attachment) -&gt; RealPoint</autodoc>
        <paramlist>
          <param name="attachment" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBranchingAttachmentInfo" type="bool" overloaded="no">
        <autodoc>GetBranchingAttachmentInfo(int attachment, RealPoint root, RealPoint neck, RealPoint shoulder1, 
    RealPoint shoulder2) -&gt; bool</autodoc>
        <paramlist>
          <param name="attachment" type="int" default=""/>
          <param name="root" type="RealPoint" default=""/>
          <param name="neck" type="RealPoint" default=""/>
          <param name="shoulder1" type="RealPoint" default=""/>
          <param name="shoulder2" type="RealPoint" default=""/>
        </paramlist>
      </method>
      <method name="GetBranchingAttachmentPoint" type="bool" overloaded="no">
        <autodoc>GetBranchingAttachmentPoint(int attachment, int n, RealPoint attachmentPoint, RealPoint stemPoint) -&gt; bool</autodoc>
        <paramlist>
          <param name="attachment" type="int" default=""/>
          <param name="n" type="int" default=""/>
          <param name="attachmentPoint" type="RealPoint" default=""/>
          <param name="stemPoint" type="RealPoint" default=""/>
        </paramlist>
      </method>
      <method name="GetAttachmentLineCount" type="int" overloaded="no">
        <autodoc>GetAttachmentLineCount(int attachment) -&gt; int</autodoc>
        <paramlist>
          <param name="attachment" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetBranchNeckLength" type="" overloaded="no">
        <autodoc>SetBranchNeckLength(int len)</autodoc>
        <paramlist>
          <param name="len" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBranchNeckLength" type="int" overloaded="no">
        <autodoc>GetBranchNeckLength() -&gt; int</autodoc>
      </method>
      <method name="SetBranchStemLength" type="" overloaded="no">
        <autodoc>SetBranchStemLength(int len)</autodoc>
        <paramlist>
          <param name="len" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBranchStemLength" type="int" overloaded="no">
        <autodoc>GetBranchStemLength() -&gt; int</autodoc>
      </method>
      <method name="SetBranchSpacing" type="" overloaded="no">
        <autodoc>SetBranchSpacing(int len)</autodoc>
        <paramlist>
          <param name="len" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBranchSpacing" type="int" overloaded="no">
        <autodoc>GetBranchSpacing() -&gt; int</autodoc>
      </method>
      <method name="SetBranchStyle" type="" overloaded="no">
        <autodoc>SetBranchStyle(long style)</autodoc>
        <paramlist>
          <param name="style" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetBranchStyle" type="long" overloaded="no">
        <autodoc>GetBranchStyle() -&gt; long</autodoc>
      </method>
      <method name="PhysicalToLogicalAttachment" type="int" overloaded="no">
        <autodoc>PhysicalToLogicalAttachment(int physicalAttachment) -&gt; int</autodoc>
        <paramlist>
          <param name="physicalAttachment" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LogicalToPhysicalAttachment" type="int" overloaded="no">
        <autodoc>LogicalToPhysicalAttachment(int logicalAttachment) -&gt; int</autodoc>
        <paramlist>
          <param name="logicalAttachment" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Draggable" type="bool" overloaded="no">
        <autodoc>Draggable() -&gt; bool</autodoc>
      </method>
      <method name="HasDescendant" type="bool" overloaded="no">
        <autodoc>HasDescendant(PyShape image) -&gt; bool</autodoc>
        <paramlist>
          <param name="image" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="CreateNewCopy" type="PyShape" overloaded="no">
        <autodoc>CreateNewCopy(bool resetMapping=True, bool recompute=True) -&gt; PyShape</autodoc>
        <paramlist>
          <param name="resetMapping" type="bool" default="True"/>
          <param name="recompute" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="Copy" type="" overloaded="no">
        <autodoc>Copy(PyShape copy)</autodoc>
        <paramlist>
          <param name="copy" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="CopyWithHandler" type="" overloaded="no">
        <autodoc>CopyWithHandler(PyShape copy)</autodoc>
        <paramlist>
          <param name="copy" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="Rotate" type="" overloaded="no">
        <autodoc>Rotate(double x, double y, double theta)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="theta" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetRotation" type="double" overloaded="no">
        <autodoc>GetRotation() -&gt; double</autodoc>
      </method>
      <method name="SetRotation" type="" overloaded="no">
        <autodoc>SetRotation(double rotation)</autodoc>
        <paramlist>
          <param name="rotation" type="double" default=""/>
        </paramlist>
      </method>
      <method name="ClearAttachments" type="" overloaded="no">
        <autodoc>ClearAttachments()</autodoc>
      </method>
      <method name="Recentre" type="" overloaded="no">
        <autodoc>Recentre(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="ClearPointList" type="" overloaded="no">
        <autodoc>ClearPointList(wxList list)</autodoc>
        <paramlist>
          <param name="list" type="wxList" default=""/>
        </paramlist>
      </method>
      <method name="GetBackgroundPen" type="Pen" overloaded="no">
        <autodoc>GetBackgroundPen() -&gt; wxPen</autodoc>
      </method>
      <method name="GetBackgroundBrush" type="Brush" overloaded="no">
        <autodoc>GetBackgroundBrush() -&gt; wxBrush</autodoc>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=False)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PseudoMetaFile" oldname="wxPseudoMetaFile" module="ogl">
      <baseclass name="Object"/>
      <constructor name="PseudoMetaFile" overloaded="no">
        <autodoc>__init__() -&gt; PseudoMetaFile</autodoc>
      </constructor>
      <destructor name="~wxPseudoMetaFile" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Draw" type="" overloaded="no">
        <autodoc>Draw(DC dc, double xoffset, double yoffset)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="xoffset" type="double" default=""/>
          <param name="yoffset" type="double" default=""/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="Copy" type="" overloaded="no">
        <autodoc>Copy(PseudoMetaFile copy)</autodoc>
        <paramlist>
          <param name="copy" type="PseudoMetaFile" default=""/>
        </paramlist>
      </method>
      <method name="Scale" type="" overloaded="no">
        <autodoc>Scale(double sx, double sy)</autodoc>
        <paramlist>
          <param name="sx" type="double" default=""/>
          <param name="sy" type="double" default=""/>
        </paramlist>
      </method>
      <method name="ScaleTo" type="" overloaded="no">
        <autodoc>ScaleTo(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="Translate" type="" overloaded="no">
        <autodoc>Translate(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="Rotate" type="" overloaded="no">
        <autodoc>Rotate(double x, double y, double theta)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="theta" type="double" default=""/>
        </paramlist>
      </method>
      <method name="LoadFromMetaFile" type="bool" overloaded="no">
        <autodoc>LoadFromMetaFile(String filename, double width, double height) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="width" type="double" default=""/>
          <param name="height" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetBounds" type="" overloaded="no">
        <autodoc>GetBounds(double minX, double minY, double maxX, double maxY)</autodoc>
        <paramlist>
          <param name="minX" type="double" default=""/>
          <param name="minY" type="double" default=""/>
          <param name="maxX" type="double" default=""/>
          <param name="maxY" type="double" default=""/>
        </paramlist>
      </method>
      <method name="CalculateSize" type="" overloaded="no">
        <autodoc>CalculateSize(PyDrawnShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="wxPyDrawnShape" default=""/>
        </paramlist>
      </method>
      <method name="SetRotateable" type="" overloaded="no">
        <autodoc>SetRotateable(bool rot)</autodoc>
        <paramlist>
          <param name="rot" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetRotateable" type="bool" overloaded="no">
        <autodoc>GetRotateable() -&gt; bool</autodoc>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetFillBrush" type="" overloaded="no">
        <autodoc>SetFillBrush(wxBrush brush)</autodoc>
        <paramlist>
          <param name="brush" type="Brush" default=""/>
        </paramlist>
      </method>
      <method name="GetFillBrush" type="Brush" overloaded="no">
        <autodoc>GetFillBrush() -&gt; wxBrush</autodoc>
      </method>
      <method name="SetOutlinePen" type="" overloaded="no">
        <autodoc>SetOutlinePen(wxPen pen)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="GetOutlinePen" type="Pen" overloaded="no">
        <autodoc>GetOutlinePen() -&gt; wxPen</autodoc>
      </method>
      <method name="SetOutlineOp" type="" overloaded="no">
        <autodoc>SetOutlineOp(int op)</autodoc>
        <paramlist>
          <param name="op" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetOutlineOp" type="int" overloaded="no">
        <autodoc>GetOutlineOp() -&gt; int</autodoc>
      </method>
      <method name="IsValid" type="bool" overloaded="no">
        <autodoc>IsValid() -&gt; bool</autodoc>
      </method>
      <method name="DrawLine" type="" overloaded="no">
        <autodoc>DrawLine(Point pt1, Point pt2)</autodoc>
        <paramlist>
          <param name="pt1" type="Point" default=""/>
          <param name="pt2" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawRectangle" type="" overloaded="no">
        <autodoc>DrawRectangle(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="DrawRoundedRectangle" type="" overloaded="no">
        <autodoc>DrawRoundedRectangle(Rect rect, double radius)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
          <param name="radius" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawArc" type="" overloaded="no">
        <autodoc>DrawArc(Point centrePt, Point startPt, Point endPt)</autodoc>
        <paramlist>
          <param name="centrePt" type="Point" default=""/>
          <param name="startPt" type="Point" default=""/>
          <param name="endPt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipticArc" type="" overloaded="no">
        <autodoc>DrawEllipticArc(Rect rect, double startAngle, double endAngle)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
          <param name="startAngle" type="double" default=""/>
          <param name="endAngle" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipse" type="" overloaded="no">
        <autodoc>DrawEllipse(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="DrawPoint" type="" overloaded="no">
        <autodoc>DrawPoint(Point pt)</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawText" type="" overloaded="no">
        <autodoc>DrawText(String text, Point pt)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawLines" type="" overloaded="no">
        <autodoc>DrawLines(int PCOUNT, Point points)</autodoc>
        <paramlist>
          <param name="PCOUNT" type="int" default=""/>
          <param name="points" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawPolygon" type="" overloaded="no">
        <autodoc>DrawPolygon(int PCOUNT, Point points, int flags=0)</autodoc>
        <paramlist>
          <param name="PCOUNT" type="int" default=""/>
          <param name="points" type="Point" default=""/>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="DrawSpline" type="" overloaded="no">
        <autodoc>DrawSpline(int PCOUNT, Point points)</autodoc>
        <paramlist>
          <param name="PCOUNT" type="int" default=""/>
          <param name="points" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="SetClippingRect" type="" overloaded="no">
        <autodoc>SetClippingRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="DestroyClippingRect" type="" overloaded="no">
        <autodoc>DestroyClippingRect()</autodoc>
      </method>
      <method name="SetPen" type="" overloaded="no">
        <autodoc>SetPen(wxPen pen, bool isOutline=FALSE)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
          <param name="isOutline" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="SetBrush" type="" overloaded="no">
        <autodoc>SetBrush(wxBrush brush, bool isFill=FALSE)</autodoc>
        <paramlist>
          <param name="brush" type="Brush" default=""/>
          <param name="isFill" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="SetFont" type="" overloaded="no">
        <autodoc>SetFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetTextColour" type="" overloaded="no">
        <autodoc>SetTextColour(Colour colour)</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundColour" type="" overloaded="no">
        <autodoc>SetBackgroundColour(Colour colour)</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetBackgroundMode" type="" overloaded="no">
        <autodoc>SetBackgroundMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyRectangleShape" oldname="wxPyRectangleShape" module="ogl">
      <baseclass name="PyShape"/>
      <constructor name="PyRectangleShape" overloaded="no">
        <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyRectangleShape</autodoc>
        <paramlist>
          <param name="width" type="double" default="0.0"/>
          <param name="height" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetCornerRadius" type="" overloaded="no">
        <autodoc>SetCornerRadius(double radius)</autodoc>
        <paramlist>
          <param name="radius" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetCornerRadius" type="double" overloaded="no">
        <autodoc>GetCornerRadius() -&gt; double</autodoc>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="wxPyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyControlPoint" oldname="wxPyControlPoint" module="ogl">
      <baseclass name="PyRectangleShape"/>
      <constructor name="PyControlPoint" overloaded="no">
        <autodoc>__init__(PyShapeCanvas the_canvas=None, PyShape object=None, 
    double size=0.0, double the_xoffset=0.0, double the_yoffset=0.0, 
    int the_type=0) -&gt; PyControlPoint</autodoc>
        <paramlist>
          <param name="the_canvas" type="wxPyShapeCanvas" default="NULL"/>
          <param name="object" type="PyShape" default="NULL"/>
          <param name="size" type="double" default="0.0"/>
          <param name="the_xoffset" type="double" default="0.0"/>
          <param name="the_yoffset" type="double" default="0.0"/>
          <param name="the_type" type="int" default="0"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetCornerRadius" type="" overloaded="no">
        <autodoc>SetCornerRadius(double radius)</autodoc>
        <paramlist>
          <param name="radius" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyBitmapShape" oldname="wxPyBitmapShape" module="ogl">
      <baseclass name="PyRectangleShape"/>
      <constructor name="PyBitmapShape" overloaded="no">
        <autodoc>__init__() -&gt; PyBitmapShape</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap() -&gt; Bitmap</autodoc>
      </method>
      <method name="GetFilename" type="String" overloaded="no">
        <autodoc>GetFilename() -&gt; String</autodoc>
      </method>
      <method name="SetBitmap" type="" overloaded="no">
        <autodoc>SetBitmap(Bitmap bitmap)</autodoc>
        <paramlist>
          <param name="bitmap" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetFilename" type="" overloaded="no">
        <autodoc>SetFilename(String filename)</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyDrawnShape" oldname="wxPyDrawnShape" module="ogl">
      <baseclass name="PyRectangleShape"/>
      <constructor name="PyDrawnShape" overloaded="no">
        <autodoc>__init__() -&gt; PyDrawnShape</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="CalculateSize" type="" overloaded="no">
        <autodoc>CalculateSize()</autodoc>
      </method>
      <method name="DestroyClippingRect" type="" overloaded="no">
        <autodoc>DestroyClippingRect()</autodoc>
      </method>
      <method name="DrawArc" type="" overloaded="no">
        <autodoc>DrawArc(Point centrePoint, Point startPoint, Point endPoint)</autodoc>
        <paramlist>
          <param name="centrePoint" type="Point" default=""/>
          <param name="startPoint" type="Point" default=""/>
          <param name="endPoint" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawAtAngle" type="" overloaded="no">
        <autodoc>DrawAtAngle(int angle)</autodoc>
        <paramlist>
          <param name="angle" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DrawEllipticArc" type="" overloaded="no">
        <autodoc>DrawEllipticArc(Rect rect, double startAngle, double endAngle)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
          <param name="startAngle" type="double" default=""/>
          <param name="endAngle" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawLine" type="" overloaded="no">
        <autodoc>DrawLine(Point point1, Point point2)</autodoc>
        <paramlist>
          <param name="point1" type="Point" default=""/>
          <param name="point2" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawLines" type="" overloaded="no">
        <autodoc>DrawLines(int PCOUNT, Point points)</autodoc>
        <paramlist>
          <param name="PCOUNT" type="int" default=""/>
          <param name="points" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawPoint" type="" overloaded="no">
        <autodoc>DrawPoint(Point point)</autodoc>
        <paramlist>
          <param name="point" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawPolygon" type="" overloaded="no">
        <autodoc>DrawPolygon(int PCOUNT, Point points, int flags=0)</autodoc>
        <paramlist>
          <param name="PCOUNT" type="int" default=""/>
          <param name="points" type="Point" default=""/>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="DrawRectangle" type="" overloaded="no">
        <autodoc>DrawRectangle(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="DrawRoundedRectangle" type="" overloaded="no">
        <autodoc>DrawRoundedRectangle(Rect rect, double radius)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
          <param name="radius" type="double" default=""/>
        </paramlist>
      </method>
      <method name="DrawSpline" type="" overloaded="no">
        <autodoc>DrawSpline(int PCOUNT, Point points)</autodoc>
        <paramlist>
          <param name="PCOUNT" type="int" default=""/>
          <param name="points" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="DrawText" type="" overloaded="no">
        <autodoc>DrawText(String text, Point point)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="point" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="GetAngle" type="int" overloaded="no">
        <autodoc>GetAngle() -&gt; int</autodoc>
      </method>
      <method name="GetMetaFile" type="PseudoMetaFile" overloaded="no">
        <autodoc>GetMetaFile() -&gt; PseudoMetaFile</autodoc>
      </method>
      <method name="GetRotation" type="double" overloaded="no">
        <autodoc>GetRotation() -&gt; double</autodoc>
      </method>
      <method name="LoadFromMetaFile" type="bool" overloaded="no">
        <autodoc>LoadFromMetaFile(String filename) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="Rotate" type="" overloaded="no">
        <autodoc>Rotate(double x, double y, double theta)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="theta" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetClippingRect" type="" overloaded="no">
        <autodoc>SetClippingRect(Rect rect)</autodoc>
        <paramlist>
          <param name="rect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="SetDrawnBackgroundColour" type="" overloaded="no">
        <autodoc>SetDrawnBackgroundColour(Colour colour)</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetDrawnBackgroundMode" type="" overloaded="no">
        <autodoc>SetDrawnBackgroundMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDrawnBrush" type="" overloaded="no">
        <autodoc>SetDrawnBrush(wxBrush pen, bool isOutline=FALSE)</autodoc>
        <paramlist>
          <param name="pen" type="Brush" default=""/>
          <param name="isOutline" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="SetDrawnFont" type="" overloaded="no">
        <autodoc>SetDrawnFont(Font font)</autodoc>
        <paramlist>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="SetDrawnPen" type="" overloaded="no">
        <autodoc>SetDrawnPen(wxPen pen, bool isOutline=FALSE)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
          <param name="isOutline" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="SetDrawnTextColour" type="" overloaded="no">
        <autodoc>SetDrawnTextColour(Colour colour)</autodoc>
        <paramlist>
          <param name="colour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="Scale" type="" overloaded="no">
        <autodoc>Scale(double sx, double sy)</autodoc>
        <paramlist>
          <param name="sx" type="double" default=""/>
          <param name="sy" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetSaveToFile" type="" overloaded="no">
        <autodoc>SetSaveToFile(bool save)</autodoc>
        <paramlist>
          <param name="save" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Translate" type="" overloaded="no">
        <autodoc>Translate(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="OGLConstraint" oldname="wxOGLConstraint" module="ogl">
      <baseclass name="Object"/>
      <constructor name="OGLConstraint" overloaded="no">
        <autodoc>__init__(int type, PyShape constraining, PyObject constrained) -&gt; OGLConstraint</autodoc>
        <paramlist>
          <param name="type" type="int" default=""/>
          <param name="constraining" type="PyShape" default=""/>
          <param name="constrained" type="PyObject" default=""/>
        </paramlist>
      </constructor>
      <method name="Evaluate" type="bool" overloaded="no">
        <autodoc>Evaluate() -&gt; bool</autodoc>
      </method>
      <method name="SetSpacing" type="" overloaded="no">
        <autodoc>SetSpacing(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="Equals" type="bool" overloaded="no">
        <autodoc>Equals(double a, double b) -&gt; bool</autodoc>
        <paramlist>
          <param name="a" type="double" default=""/>
          <param name="b" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyCompositeShape" oldname="wxPyCompositeShape" module="ogl">
      <baseclass name="PyRectangleShape"/>
      <constructor name="PyCompositeShape" overloaded="no">
        <autodoc>__init__() -&gt; PyCompositeShape</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="AddChild" type="" overloaded="no">
        <autodoc>AddChild(PyShape child, PyShape addAfter=None)</autodoc>
        <paramlist>
          <param name="child" type="PyShape" default=""/>
          <param name="addAfter" type="PyShape" default="NULL"/>
        </paramlist>
      </method>
      <method name="AddConstraint" type="OGLConstraint" overloaded="no">
        <autodoc>AddConstraint(OGLConstraint constraint) -&gt; OGLConstraint</autodoc>
        <paramlist>
          <param name="constraint" type="OGLConstraint" default=""/>
        </paramlist>
      </method>
      <method name="AddConstrainedShapes" type="OGLConstraint" overloaded="no">
        <autodoc>AddConstrainedShapes(int type, PyShape constraining, PyObject constrained) -&gt; OGLConstraint</autodoc>
        <paramlist>
          <param name="type" type="int" default=""/>
          <param name="constraining" type="PyShape" default=""/>
          <param name="constrained" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="AddSimpleConstraint" type="OGLConstraint" overloaded="no">
        <autodoc>AddSimpleConstraint(int type, PyShape constraining, PyShape constrained) -&gt; OGLConstraint</autodoc>
        <paramlist>
          <param name="type" type="int" default=""/>
          <param name="constraining" type="PyShape" default=""/>
          <param name="constrained" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="CalculateSize" type="" overloaded="no">
        <autodoc>CalculateSize()</autodoc>
      </method>
      <method name="ContainsDivision" type="bool" overloaded="no">
        <autodoc>ContainsDivision(PyDivisionShape division) -&gt; bool</autodoc>
        <paramlist>
          <param name="division" type="wxPyDivisionShape" default=""/>
        </paramlist>
      </method>
      <method name="DeleteConstraint" type="" overloaded="no">
        <autodoc>DeleteConstraint(OGLConstraint constraint)</autodoc>
        <paramlist>
          <param name="constraint" type="OGLConstraint" default=""/>
        </paramlist>
      </method>
      <method name="DeleteConstraintsInvolvingChild" type="" overloaded="no">
        <autodoc>DeleteConstraintsInvolvingChild(PyShape child)</autodoc>
        <paramlist>
          <param name="child" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="FindContainerImage" type="PyShape" overloaded="no">
        <autodoc>FindContainerImage() -&gt; PyShape</autodoc>
      </method>
      <method name="GetConstraints" type="PyObject" overloaded="no">
        <autodoc>GetConstraints() -&gt; PyObject</autodoc>
      </method>
      <method name="GetDivisions" type="PyObject" overloaded="no">
        <autodoc>GetDivisions() -&gt; PyObject</autodoc>
      </method>
      <method name="MakeContainer" type="" overloaded="no">
        <autodoc>MakeContainer()</autodoc>
      </method>
      <method name="Recompute" type="bool" overloaded="no">
        <autodoc>Recompute() -&gt; bool</autodoc>
      </method>
      <method name="RemoveChild" type="" overloaded="no">
        <autodoc>RemoveChild(PyShape child)</autodoc>
        <paramlist>
          <param name="child" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyDividedShape" oldname="wxPyDividedShape" module="ogl">
      <baseclass name="PyRectangleShape"/>
      <constructor name="PyDividedShape" overloaded="no">
        <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyDividedShape</autodoc>
        <paramlist>
          <param name="width" type="double" default="0.0"/>
          <param name="height" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="EditRegions" type="" overloaded="no">
        <autodoc>EditRegions()</autodoc>
      </method>
      <method name="SetRegionSizes" type="" overloaded="no">
        <autodoc>SetRegionSizes()</autodoc>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyDivisionShape" oldname="wxPyDivisionShape" module="ogl">
      <baseclass name="PyCompositeShape"/>
      <constructor name="PyDivisionShape" overloaded="no">
        <autodoc>__init__() -&gt; PyDivisionShape</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="AdjustBottom" type="" overloaded="no">
        <autodoc>AdjustBottom(double bottom, bool test)</autodoc>
        <paramlist>
          <param name="bottom" type="double" default=""/>
          <param name="test" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AdjustLeft" type="" overloaded="no">
        <autodoc>AdjustLeft(double left, bool test)</autodoc>
        <paramlist>
          <param name="left" type="double" default=""/>
          <param name="test" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AdjustRight" type="" overloaded="no">
        <autodoc>AdjustRight(double right, bool test)</autodoc>
        <paramlist>
          <param name="right" type="double" default=""/>
          <param name="test" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AdjustTop" type="" overloaded="no">
        <autodoc>AdjustTop(double top, bool test)</autodoc>
        <paramlist>
          <param name="top" type="double" default=""/>
          <param name="test" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Divide" type="" overloaded="no">
        <autodoc>Divide(int direction)</autodoc>
        <paramlist>
          <param name="direction" type="int" default=""/>
        </paramlist>
      </method>
      <method name="EditEdge" type="" overloaded="no">
        <autodoc>EditEdge(int side)</autodoc>
        <paramlist>
          <param name="side" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBottomSide" type="PyDivisionShape" overloaded="no">
        <autodoc>GetBottomSide() -&gt; PyDivisionShape</autodoc>
      </method>
      <method name="GetHandleSide" type="int" overloaded="no">
        <autodoc>GetHandleSide() -&gt; int</autodoc>
      </method>
      <method name="GetLeftSide" type="PyDivisionShape" overloaded="no">
        <autodoc>GetLeftSide() -&gt; PyDivisionShape</autodoc>
      </method>
      <method name="GetLeftSideColour" type="String" overloaded="no">
        <autodoc>GetLeftSideColour() -&gt; String</autodoc>
      </method>
      <method name="GetLeftSidePen" type="Pen" overloaded="no">
        <autodoc>GetLeftSidePen() -&gt; wxPen</autodoc>
      </method>
      <method name="GetRightSide" type="PyDivisionShape" overloaded="no">
        <autodoc>GetRightSide() -&gt; PyDivisionShape</autodoc>
      </method>
      <method name="GetTopSide" type="PyDivisionShape" overloaded="no">
        <autodoc>GetTopSide() -&gt; PyDivisionShape</autodoc>
      </method>
      <method name="GetTopSidePen" type="Pen" overloaded="no">
        <autodoc>GetTopSidePen() -&gt; wxPen</autodoc>
      </method>
      <method name="ResizeAdjoining" type="" overloaded="no">
        <autodoc>ResizeAdjoining(int side, double newPos, bool test)</autodoc>
        <paramlist>
          <param name="side" type="int" default=""/>
          <param name="newPos" type="double" default=""/>
          <param name="test" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="PopupMenu" type="" overloaded="no">
        <autodoc>PopupMenu(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetBottomSide" type="" overloaded="no">
        <autodoc>SetBottomSide(PyDivisionShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyDivisionShape" default=""/>
        </paramlist>
      </method>
      <method name="SetHandleSide" type="" overloaded="no">
        <autodoc>SetHandleSide(int side)</autodoc>
        <paramlist>
          <param name="side" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLeftSide" type="" overloaded="no">
        <autodoc>SetLeftSide(PyDivisionShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyDivisionShape" default=""/>
        </paramlist>
      </method>
      <method name="SetLeftSideColour" type="" overloaded="no">
        <autodoc>SetLeftSideColour(String colour)</autodoc>
        <paramlist>
          <param name="colour" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetLeftSidePen" type="" overloaded="no">
        <autodoc>SetLeftSidePen(wxPen pen)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="SetRightSide" type="" overloaded="no">
        <autodoc>SetRightSide(PyDivisionShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyDivisionShape" default=""/>
        </paramlist>
      </method>
      <method name="SetTopSide" type="" overloaded="no">
        <autodoc>SetTopSide(PyDivisionShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyDivisionShape" default=""/>
        </paramlist>
      </method>
      <method name="SetTopSideColour" type="" overloaded="no">
        <autodoc>SetTopSideColour(String colour)</autodoc>
        <paramlist>
          <param name="colour" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetTopSidePen" type="" overloaded="no">
        <autodoc>SetTopSidePen(wxPen pen)</autodoc>
        <paramlist>
          <param name="pen" type="Pen" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyEllipseShape" oldname="wxPyEllipseShape" module="ogl">
      <baseclass name="PyShape"/>
      <constructor name="PyEllipseShape" overloaded="no">
        <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyEllipseShape</autodoc>
        <paramlist>
          <param name="width" type="double" default="0.0"/>
          <param name="height" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyCircleShape" oldname="wxPyCircleShape" module="ogl">
      <baseclass name="PyEllipseShape"/>
      <constructor name="PyCircleShape" overloaded="no">
        <autodoc>__init__(double width=0.0) -&gt; PyCircleShape</autodoc>
        <paramlist>
          <param name="width" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="ArrowHead" oldname="wxArrowHead" module="ogl">
      <baseclass name="Object"/>
      <constructor name="ArrowHead" overloaded="no">
        <autodoc>__init__(int type=0, int end=0, double size=0.0, double dist=0.0, 
    String name=EmptyString, PseudoMetaFile mf=None, 
    long arrowId=-1) -&gt; ArrowHead</autodoc>
        <paramlist>
          <param name="type" type="int" default="0"/>
          <param name="end" type="int" default="0"/>
          <param name="size" type="double" default="0.0"/>
          <param name="dist" type="double" default="0.0"/>
          <param name="name" type="String" default="wxPyEmptyString"/>
          <param name="mf" type="PseudoMetaFile" default="NULL"/>
          <param name="arrowId" type="long" default="-1"/>
        </paramlist>
      </constructor>
      <destructor name="~wxArrowHead" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="_GetType" type="int" overloaded="no">
        <autodoc>_GetType() -&gt; int</autodoc>
      </method>
      <method name="GetPosition" type="int" overloaded="no">
        <autodoc>GetPosition() -&gt; int</autodoc>
      </method>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetXOffset" type="double" overloaded="no">
        <autodoc>GetXOffset() -&gt; double</autodoc>
      </method>
      <method name="GetYOffset" type="double" overloaded="no">
        <autodoc>GetYOffset() -&gt; double</autodoc>
      </method>
      <method name="GetSpacing" type="double" overloaded="no">
        <autodoc>GetSpacing() -&gt; double</autodoc>
      </method>
      <method name="GetSize" type="double" overloaded="no">
        <autodoc>GetSize() -&gt; double</autodoc>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="SetXOffset" type="" overloaded="no">
        <autodoc>SetXOffset(double x)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetYOffset" type="" overloaded="no">
        <autodoc>SetYOffset(double y)</autodoc>
        <paramlist>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetMetaFile" type="PseudoMetaFile" overloaded="no">
        <autodoc>GetMetaFile() -&gt; PseudoMetaFile</autodoc>
      </method>
      <method name="GetId" type="long" overloaded="no">
        <autodoc>GetId() -&gt; long</autodoc>
      </method>
      <method name="GetArrowEnd" type="int" overloaded="no">
        <autodoc>GetArrowEnd() -&gt; int</autodoc>
      </method>
      <method name="GetArrowSize" type="double" overloaded="no">
        <autodoc>GetArrowSize() -&gt; double</autodoc>
      </method>
      <method name="SetSize" type="" overloaded="no">
        <autodoc>SetSize(double size)</autodoc>
        <paramlist>
          <param name="size" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetSpacing" type="" overloaded="no">
        <autodoc>SetSpacing(double sp)</autodoc>
        <paramlist>
          <param name="sp" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyLineShape" oldname="wxPyLineShape" module="ogl">
      <baseclass name="PyShape"/>
      <constructor name="PyLineShape" overloaded="no">
        <autodoc>__init__() -&gt; PyLineShape</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="AddArrow" type="" overloaded="no">
        <autodoc>AddArrow(int type, int end=ARROW_POSITION_END, double arrowSize=10.0, 
    double xOffset=0.0, String name=EmptyString, 
    PseudoMetaFile mf=None, long arrowId=-1)</autodoc>
        <paramlist>
          <param name="type" type="int" default=""/>
          <param name="end" type="int" default="ARROW_POSITION_END"/>
          <param name="arrowSize" type="double" default="10.0"/>
          <param name="xOffset" type="double" default="0.0"/>
          <param name="name" type="String" default="wxPyEmptyString"/>
          <param name="mf" type="PseudoMetaFile" default="NULL"/>
          <param name="arrowId" type="long" default="-1"/>
        </paramlist>
      </method>
      <method name="AddArrowOrdered" type="" overloaded="no">
        <autodoc>AddArrowOrdered(ArrowHead arrow, PyObject referenceList, int end)</autodoc>
        <paramlist>
          <param name="arrow" type="ArrowHead" default=""/>
          <param name="referenceList" type="PyObject" default=""/>
          <param name="end" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ClearArrow" type="bool" overloaded="no">
        <autodoc>ClearArrow(String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ClearArrowsAtPosition" type="" overloaded="no">
        <autodoc>ClearArrowsAtPosition(int position=-1)</autodoc>
        <paramlist>
          <param name="position" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="DrawArrow" type="" overloaded="no">
        <autodoc>DrawArrow(DC dc, ArrowHead arrow, double xOffset, bool proportionalOffset)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="arrow" type="ArrowHead" default=""/>
          <param name="xOffset" type="double" default=""/>
          <param name="proportionalOffset" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="DeleteArrowHeadId" type="bool" overloaded="no">
        <autodoc>DeleteArrowHeadId(long arrowId) -&gt; bool</autodoc>
        <paramlist>
          <param name="arrowId" type="long" default=""/>
        </paramlist>
      </method>
      <method name="DeleteArrowHead" type="bool" overloaded="no">
        <autodoc>DeleteArrowHead(int position, String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="position" type="int" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DeleteLineControlPoint" type="bool" overloaded="no">
        <autodoc>DeleteLineControlPoint() -&gt; bool</autodoc>
      </method>
      <method name="DrawArrows" type="" overloaded="no">
        <autodoc>DrawArrows(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="DrawRegion" type="" overloaded="no">
        <autodoc>DrawRegion(DC dc, ShapeRegion region, double x, double y)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="region" type="ShapeRegion" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="EraseRegion" type="" overloaded="no">
        <autodoc>EraseRegion(DC dc, ShapeRegion region, double x, double y)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="region" type="ShapeRegion" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="FindArrowHeadId" type="ArrowHead" overloaded="no">
        <autodoc>FindArrowHeadId(long arrowId) -&gt; ArrowHead</autodoc>
        <paramlist>
          <param name="arrowId" type="long" default=""/>
        </paramlist>
      </method>
      <method name="FindArrowHead" type="ArrowHead" overloaded="no">
        <autodoc>FindArrowHead(int position, String name) -&gt; ArrowHead</autodoc>
        <paramlist>
          <param name="position" type="int" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="FindLineEndPoints" type="" overloaded="no">
        <autodoc>FindLineEndPoints(double OUTPUT, double OUTPUT, double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="FindLinePosition" type="int" overloaded="no">
        <autodoc>FindLinePosition(double x, double y) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="FindMinimumWidth" type="double" overloaded="no">
        <autodoc>FindMinimumWidth() -&gt; double</autodoc>
      </method>
      <method name="FindNth" type="" overloaded="no">
        <autodoc>FindNth(PyShape image, int OUTPUT, int OUTPUT, bool incoming)</autodoc>
        <paramlist>
          <param name="image" type="PyShape" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="incoming" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetAttachmentFrom" type="int" overloaded="no">
        <autodoc>GetAttachmentFrom() -&gt; int</autodoc>
      </method>
      <method name="GetAttachmentTo" type="int" overloaded="no">
        <autodoc>GetAttachmentTo() -&gt; int</autodoc>
      </method>
      <method name="GetEnds" type="" overloaded="no">
        <autodoc>GetEnds(double OUTPUT, double OUTPUT, double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetFrom" type="PyShape" overloaded="no">
        <autodoc>GetFrom() -&gt; PyShape</autodoc>
      </method>
      <method name="GetLabelPosition" type="" overloaded="no">
        <autodoc>GetLabelPosition(int position, double OUTPUT, double OUTPUT)</autodoc>
        <paramlist>
          <param name="position" type="int" default=""/>
          <param name="OUTPUT" type="double" default=""/>
          <param name="OUTPUT" type="double" default=""/>
        </paramlist>
      </method>
      <method name="GetNextControlPoint" type="RealPoint" overloaded="no">
        <autodoc>GetNextControlPoint(PyShape shape) -&gt; RealPoint</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="GetTo" type="PyShape" overloaded="no">
        <autodoc>GetTo() -&gt; PyShape</autodoc>
      </method>
      <method name="Initialise" type="" overloaded="no">
        <autodoc>Initialise()</autodoc>
      </method>
      <method name="InsertLineControlPoint" type="" overloaded="no">
        <autodoc>InsertLineControlPoint(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="IsEnd" type="bool" overloaded="no">
        <autodoc>IsEnd(PyShape shape) -&gt; bool</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="IsSpline" type="bool" overloaded="no">
        <autodoc>IsSpline() -&gt; bool</autodoc>
      </method>
      <method name="MakeLineControlPoints" type="" overloaded="no">
        <autodoc>MakeLineControlPoints(int n)</autodoc>
        <paramlist>
          <param name="n" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineControlPoints" type="PyObject" overloaded="no">
        <autodoc>GetLineControlPoints() -&gt; PyObject</autodoc>
      </method>
      <method name="SetAttachmentFrom" type="" overloaded="no">
        <autodoc>SetAttachmentFrom(int fromAttach)</autodoc>
        <paramlist>
          <param name="fromAttach" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAttachments" type="" overloaded="no">
        <autodoc>SetAttachments(int fromAttach, int toAttach)</autodoc>
        <paramlist>
          <param name="fromAttach" type="int" default=""/>
          <param name="toAttach" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAttachmentTo" type="" overloaded="no">
        <autodoc>SetAttachmentTo(int toAttach)</autodoc>
        <paramlist>
          <param name="toAttach" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetEnds" type="" overloaded="no">
        <autodoc>SetEnds(double x1, double y1, double x2, double y2)</autodoc>
        <paramlist>
          <param name="x1" type="double" default=""/>
          <param name="y1" type="double" default=""/>
          <param name="x2" type="double" default=""/>
          <param name="y2" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetFrom" type="" overloaded="no">
        <autodoc>SetFrom(PyShape object)</autodoc>
        <paramlist>
          <param name="object" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="SetIgnoreOffsets" type="" overloaded="no">
        <autodoc>SetIgnoreOffsets(bool ignore)</autodoc>
        <paramlist>
          <param name="ignore" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetSpline" type="" overloaded="no">
        <autodoc>SetSpline(bool spline)</autodoc>
        <paramlist>
          <param name="spline" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetTo" type="" overloaded="no">
        <autodoc>SetTo(PyShape object)</autodoc>
        <paramlist>
          <param name="object" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="Straighten" type="" overloaded="no">
        <autodoc>Straighten(DC dc=None)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default="NULL"/>
        </paramlist>
      </method>
      <method name="Unlink" type="" overloaded="no">
        <autodoc>Unlink()</autodoc>
      </method>
      <method name="SetAlignmentOrientation" type="" overloaded="no">
        <autodoc>SetAlignmentOrientation(bool isEnd, bool isHoriz)</autodoc>
        <paramlist>
          <param name="isEnd" type="bool" default=""/>
          <param name="isHoriz" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetAlignmentType" type="" overloaded="no">
        <autodoc>SetAlignmentType(bool isEnd, int alignType)</autodoc>
        <paramlist>
          <param name="isEnd" type="bool" default=""/>
          <param name="alignType" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetAlignmentOrientation" type="bool" overloaded="no">
        <autodoc>GetAlignmentOrientation(bool isEnd) -&gt; bool</autodoc>
        <paramlist>
          <param name="isEnd" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetAlignmentType" type="int" overloaded="no">
        <autodoc>GetAlignmentType(bool isEnd) -&gt; int</autodoc>
        <paramlist>
          <param name="isEnd" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetAlignmentStart" type="int" overloaded="no">
        <autodoc>GetAlignmentStart() -&gt; int</autodoc>
      </method>
      <method name="GetAlignmentEnd" type="int" overloaded="no">
        <autodoc>GetAlignmentEnd() -&gt; int</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyPolygonShape" oldname="wxPyPolygonShape" module="ogl">
      <baseclass name="PyShape"/>
      <constructor name="PyPolygonShape" overloaded="no">
        <autodoc>__init__() -&gt; PyPolygonShape</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="Create" type="PyObject" overloaded="no">
        <autodoc>Create(PyObject points) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="points" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="AddPolygonPoint" type="" overloaded="no">
        <autodoc>AddPolygonPoint(int pos=0)</autodoc>
        <paramlist>
          <param name="pos" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="CalculatePolygonCentre" type="" overloaded="no">
        <autodoc>CalculatePolygonCentre()</autodoc>
      </method>
      <method name="DeletePolygonPoint" type="" overloaded="no">
        <autodoc>DeletePolygonPoint(int pos=0)</autodoc>
        <paramlist>
          <param name="pos" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetPoints" type="PyObject" overloaded="no">
        <autodoc>GetPoints() -&gt; PyObject</autodoc>
      </method>
      <method name="GetOriginalPoints" type="PyObject" overloaded="no">
        <autodoc>GetOriginalPoints() -&gt; PyObject</autodoc>
      </method>
      <method name="GetOriginalWidth" type="double" overloaded="no">
        <autodoc>GetOriginalWidth() -&gt; double</autodoc>
      </method>
      <method name="GetOriginalHeight" type="double" overloaded="no">
        <autodoc>GetOriginalHeight() -&gt; double</autodoc>
      </method>
      <method name="SetOriginalWidth" type="" overloaded="no">
        <autodoc>SetOriginalWidth(double w)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetOriginalHeight" type="" overloaded="no">
        <autodoc>SetOriginalHeight(double h)</autodoc>
        <paramlist>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="UpdateOriginalPoints" type="" overloaded="no">
        <autodoc>UpdateOriginalPoints()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyTextShape" oldname="wxPyTextShape" module="ogl">
      <baseclass name="PyRectangleShape"/>
      <constructor name="PyTextShape" overloaded="no">
        <autodoc>__init__(double width=0.0, double height=0.0) -&gt; PyTextShape</autodoc>
        <paramlist>
          <param name="width" type="double" default="0.0"/>
          <param name="height" type="double" default="0.0"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDelete" type="" overloaded="no">
        <autodoc>base_OnDelete()</autodoc>
      </method>
      <method name="base_OnDraw" type="" overloaded="no">
        <autodoc>base_OnDraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawContents" type="" overloaded="no">
        <autodoc>base_OnDrawContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawBranches" type="" overloaded="no">
        <autodoc>base_OnDrawBranches(DC dc, bool erase=FALSE)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="erase" type="bool" default="FALSE"/>
        </paramlist>
      </method>
      <method name="base_OnMoveLinks" type="" overloaded="no">
        <autodoc>base_OnMoveLinks(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnErase" type="" overloaded="no">
        <autodoc>base_OnErase(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseContents" type="" overloaded="no">
        <autodoc>base_OnEraseContents(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnHighlight" type="" overloaded="no">
        <autodoc>base_OnHighlight(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftDoubleClick" type="" overloaded="no">
        <autodoc>base_OnLeftDoubleClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSize" type="" overloaded="no">
        <autodoc>base_OnSize(double x, double y)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMovePre" type="bool" overloaded="no">
        <autodoc>base_OnMovePre(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True) -&gt; bool</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnMovePost" type="" overloaded="no">
        <autodoc>base_OnMovePost(DC dc, double x, double y, double old_x, double old_y, 
    bool display=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="old_x" type="double" default=""/>
          <param name="old_y" type="double" default=""/>
          <param name="display" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0, int attachment=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDrawOutline" type="" overloaded="no">
        <autodoc>base_OnDrawOutline(DC dc, double x, double y, double w, double h)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnDrawControlPoints" type="" overloaded="no">
        <autodoc>base_OnDrawControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEraseControlPoints" type="" overloaded="no">
        <autodoc>base_OnEraseControlPoints(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="base_OnMoveLink" type="" overloaded="no">
        <autodoc>base_OnMoveLink(DC dc, bool moveControlPoints=True)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="moveControlPoints" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="base_OnSizingDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingDragLeft(PyControlPoint pt, bool draw, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingBeginDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnSizingEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnSizingEndDragLeft(PyControlPoint pt, double x, double y, int keys=0, 
    int attachment=0)</autodoc>
        <paramlist>
          <param name="pt" type="PyControlPoint" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
          <param name="attachment" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginSize" type="" overloaded="no">
        <autodoc>base_OnBeginSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
      <method name="base_OnEndSize" type="" overloaded="no">
        <autodoc>base_OnEndSize(double w, double h)</autodoc>
        <paramlist>
          <param name="w" type="double" default=""/>
          <param name="h" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="Diagram" oldname="wxDiagram" module="ogl">
      <baseclass name="Object"/>
      <constructor name="Diagram" overloaded="no">
        <autodoc>__init__() -&gt; Diagram</autodoc>
      </constructor>
      <method name="AddShape" type="" overloaded="no">
        <autodoc>AddShape(PyShape shape, PyShape addAfter=None)</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
          <param name="addAfter" type="PyShape" default="NULL"/>
        </paramlist>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="DeleteAllShapes" type="" overloaded="no">
        <autodoc>DeleteAllShapes()</autodoc>
      </method>
      <method name="DrawOutline" type="" overloaded="no">
        <autodoc>DrawOutline(DC dc, double x1, double y1, double x2, double y2)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
          <param name="x1" type="double" default=""/>
          <param name="y1" type="double" default=""/>
          <param name="x2" type="double" default=""/>
          <param name="y2" type="double" default=""/>
        </paramlist>
      </method>
      <method name="FindShape" type="PyShape" overloaded="no">
        <autodoc>FindShape(long id) -&gt; PyShape</autodoc>
        <paramlist>
          <param name="id" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetCanvas" type="wxPyShapeCanvas" overloaded="no">
        <autodoc>GetCanvas() -&gt; PyShapeCanvas</autodoc>
      </method>
      <method name="GetCount" type="int" overloaded="no">
        <autodoc>GetCount() -&gt; int</autodoc>
      </method>
      <method name="GetGridSpacing" type="double" overloaded="no">
        <autodoc>GetGridSpacing() -&gt; double</autodoc>
      </method>
      <method name="GetMouseTolerance" type="int" overloaded="no">
        <autodoc>GetMouseTolerance() -&gt; int</autodoc>
      </method>
      <method name="GetShapeList" type="PyObject" overloaded="no">
        <autodoc>GetShapeList() -&gt; PyObject</autodoc>
      </method>
      <method name="GetQuickEditMode" type="bool" overloaded="no">
        <autodoc>GetQuickEditMode() -&gt; bool</autodoc>
      </method>
      <method name="GetSnapToGrid" type="bool" overloaded="no">
        <autodoc>GetSnapToGrid() -&gt; bool</autodoc>
      </method>
      <method name="InsertShape" type="" overloaded="no">
        <autodoc>InsertShape(PyShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="RecentreAll" type="" overloaded="no">
        <autodoc>RecentreAll(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="Redraw" type="" overloaded="no">
        <autodoc>Redraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="RemoveAllShapes" type="" overloaded="no">
        <autodoc>RemoveAllShapes()</autodoc>
      </method>
      <method name="RemoveShape" type="" overloaded="no">
        <autodoc>RemoveShape(PyShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="SetCanvas" type="" overloaded="no">
        <autodoc>SetCanvas(PyShapeCanvas canvas)</autodoc>
        <paramlist>
          <param name="canvas" type="wxPyShapeCanvas" default=""/>
        </paramlist>
      </method>
      <method name="SetGridSpacing" type="" overloaded="no">
        <autodoc>SetGridSpacing(double spacing)</autodoc>
        <paramlist>
          <param name="spacing" type="double" default=""/>
        </paramlist>
      </method>
      <method name="SetMouseTolerance" type="" overloaded="no">
        <autodoc>SetMouseTolerance(int tolerance)</autodoc>
        <paramlist>
          <param name="tolerance" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetQuickEditMode" type="" overloaded="no">
        <autodoc>SetQuickEditMode(bool mode)</autodoc>
        <paramlist>
          <param name="mode" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetSnapToGrid" type="" overloaded="no">
        <autodoc>SetSnapToGrid(bool snap)</autodoc>
        <paramlist>
          <param name="snap" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="ShowAll" type="" overloaded="no">
        <autodoc>ShowAll(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="Snap" type="" overloaded="no">
        <autodoc>Snap(double INOUT, double INOUT)</autodoc>
        <paramlist>
          <param name="INOUT" type="double" default=""/>
          <param name="INOUT" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="PyShapeCanvas" oldname="wxPyShapeCanvas" module="ogl">
      <baseclass name="ScrolledWindow"/>
      <constructor name="PyShapeCanvas" overloaded="no">
        <autodoc>__init__(Window parent=None, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=BORDER, 
    String name=wxPyShapeCanvasNameStr) -&gt; PyShapeCanvas</autodoc>
        <paramlist>
          <param name="parent" type="Window" default="NULL"/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxBORDER"/>
          <param name="name" type="String" default="wxPyShapeCanvasNameStr"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="AddShape" type="" overloaded="no">
        <autodoc>AddShape(PyShape shape, PyShape addAfter=None)</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
          <param name="addAfter" type="PyShape" default="NULL"/>
        </paramlist>
      </method>
      <method name="FindShape" type="PyShape" overloaded="no">
        <autodoc>FindShape(double x1, double y, int OUTPUT, wxClassInfo info=None, 
    PyShape notImage=None) -&gt; PyShape</autodoc>
        <paramlist>
          <param name="x1" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="info" type="wxClassInfo" default="NULL"/>
          <param name="notImage" type="PyShape" default="NULL"/>
        </paramlist>
      </method>
      <method name="FindFirstSensitiveShape" type="PyShape" overloaded="no">
        <autodoc>FindFirstSensitiveShape(double x1, double y, int OUTPUT, int op) -&gt; PyShape</autodoc>
        <paramlist>
          <param name="x1" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="op" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetDiagram" type="Diagram" overloaded="no">
        <autodoc>GetDiagram() -&gt; Diagram</autodoc>
      </method>
      <method name="GetQuickEditMode" type="bool" overloaded="no">
        <autodoc>GetQuickEditMode() -&gt; bool</autodoc>
      </method>
      <method name="InsertShape" type="" overloaded="no">
        <autodoc>InsertShape(PyShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragLeft" type="" overloaded="no">
        <autodoc>base_OnBeginDragLeft(double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnBeginDragRight" type="" overloaded="no">
        <autodoc>base_OnBeginDragRight(double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragLeft" type="" overloaded="no">
        <autodoc>base_OnEndDragLeft(double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnEndDragRight" type="" overloaded="no">
        <autodoc>base_OnEndDragRight(double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragLeft" type="" overloaded="no">
        <autodoc>base_OnDragLeft(bool draw, double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnDragRight" type="" overloaded="no">
        <autodoc>base_OnDragRight(bool draw, double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="draw" type="bool" default=""/>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnLeftClick" type="" overloaded="no">
        <autodoc>base_OnLeftClick(double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="base_OnRightClick" type="" overloaded="no">
        <autodoc>base_OnRightClick(double x, double y, int keys=0)</autodoc>
        <paramlist>
          <param name="x" type="double" default=""/>
          <param name="y" type="double" default=""/>
          <param name="keys" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="Redraw" type="" overloaded="no">
        <autodoc>Redraw(DC dc)</autodoc>
        <paramlist>
          <param name="dc" type="DC" default=""/>
        </paramlist>
      </method>
      <method name="RemoveShape" type="" overloaded="no">
        <autodoc>RemoveShape(PyShape shape)</autodoc>
        <paramlist>
          <param name="shape" type="PyShape" default=""/>
        </paramlist>
      </method>
      <method name="SetDiagram" type="" overloaded="no">
        <autodoc>SetDiagram(Diagram diagram)</autodoc>
        <paramlist>
          <param name="diagram" type="Diagram" default=""/>
        </paramlist>
      </method>
      <method name="Snap" type="" overloaded="no">
        <autodoc>Snap(double INOUT, double INOUT)</autodoc>
        <paramlist>
          <param name="INOUT" type="double" default=""/>
          <param name="INOUT" type="double" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
# Aliases    
ShapeCanvas =       PyShapeCanvas
ShapeEvtHandler =   PyShapeEvtHandler
Shape =             PyShape
RectangleShape =    PyRectangleShape
BitmapShape =       PyBitmapShape
DrawnShape =        PyDrawnShape
CompositeShape =    PyCompositeShape
DividedShape =      PyDividedShape
DivisionShape =     PyDivisionShape
EllipseShape =      PyEllipseShape
CircleShape =       PyCircleShape
LineShape =         PyLineShape
PolygonShape =      PyPolygonShape
TextShape =         PyTextShape
ControlPoint =      PyControlPoint
</pythoncode>
    <method name="OGLInitialize" oldname="wxOGLInitialize" type="" overloaded="no">
      <autodoc>OGLInitialize()</autodoc>
    </method>
    <method name="OGLCleanUp" oldname="wxOGLCleanUp" type="" overloaded="no">
      <autodoc>OGLCleanUp()</autodoc>
    </method>
  </module>
  <module name="stc">
    <import name="core"/>
    <import name="misc"/>
    <pythoncode> wx = core </pythoncode>
    <class name="StyledTextCtrl" oldname="wxStyledTextCtrl" module="stc">
      <baseclass name="Control"/>
      <constructor name="StyledTextCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=STCNameStr) -&gt; StyledTextCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxPySTCNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreStyledTextCtrl" overloaded="no">
        <autodoc>PreStyledTextCtrl() -&gt; StyledTextCtrl</autodoc>
      </constructor>
      <method name="Create" type="" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=0, String name=wxSTCNameStr)</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
          <param name="name" type="String" default="wxSTCNameStr"/>
        </paramlist>
      </method>
      <method name="AddText" type="" overloaded="no">
        <autodoc>AddText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AddStyledText" type="" overloaded="no">
        <autodoc>AddStyledText(wxMemoryBuffer data)</autodoc>
        <paramlist>
          <param name="data" type="wxMemoryBuffer" default=""/>
        </paramlist>
      </method>
      <method name="InsertText" type="" overloaded="no">
        <autodoc>InsertText(int pos, String text)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ClearAll" type="" overloaded="no">
        <autodoc>ClearAll()</autodoc>
      </method>
      <method name="ClearDocumentStyle" type="" overloaded="no">
        <autodoc>ClearDocumentStyle()</autodoc>
      </method>
      <method name="GetLength" type="int" overloaded="no">
        <autodoc>GetLength() -&gt; int</autodoc>
      </method>
      <method name="GetCharAt" type="int" overloaded="no">
        <autodoc>GetCharAt(int pos) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCurrentPos" type="int" overloaded="no">
        <autodoc>GetCurrentPos() -&gt; int</autodoc>
      </method>
      <method name="GetAnchor" type="int" overloaded="no">
        <autodoc>GetAnchor() -&gt; int</autodoc>
      </method>
      <method name="GetStyleAt" type="int" overloaded="no">
        <autodoc>GetStyleAt(int pos) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="Redo" type="" overloaded="no">
        <autodoc>Redo()</autodoc>
      </method>
      <method name="SetUndoCollection" type="" overloaded="no">
        <autodoc>SetUndoCollection(bool collectUndo)</autodoc>
        <paramlist>
          <param name="collectUndo" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SelectAll" type="" overloaded="no">
        <autodoc>SelectAll()</autodoc>
      </method>
      <method name="SetSavePoint" type="" overloaded="no">
        <autodoc>SetSavePoint()</autodoc>
      </method>
      <method name="GetStyledText" type="wxMemoryBuffer" overloaded="no">
        <autodoc>GetStyledText(int startPos, int endPos) -&gt; wxMemoryBuffer</autodoc>
        <paramlist>
          <param name="startPos" type="int" default=""/>
          <param name="endPos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CanRedo" type="bool" overloaded="no">
        <autodoc>CanRedo() -&gt; bool</autodoc>
      </method>
      <method name="MarkerLineFromHandle" type="int" overloaded="no">
        <autodoc>MarkerLineFromHandle(int handle) -&gt; int</autodoc>
        <paramlist>
          <param name="handle" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerDeleteHandle" type="" overloaded="no">
        <autodoc>MarkerDeleteHandle(int handle)</autodoc>
        <paramlist>
          <param name="handle" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetUndoCollection" type="bool" overloaded="no">
        <autodoc>GetUndoCollection() -&gt; bool</autodoc>
      </method>
      <method name="GetViewWhiteSpace" type="int" overloaded="no">
        <autodoc>GetViewWhiteSpace() -&gt; int</autodoc>
      </method>
      <method name="SetViewWhiteSpace" type="" overloaded="no">
        <autodoc>SetViewWhiteSpace(int viewWS)</autodoc>
        <paramlist>
          <param name="viewWS" type="int" default=""/>
        </paramlist>
      </method>
      <method name="PositionFromPoint" type="int" overloaded="no">
        <autodoc>PositionFromPoint(Point pt) -&gt; int</autodoc>
        <paramlist>
          <param name="pt" type="Point" default=""/>
        </paramlist>
      </method>
      <method name="PositionFromPointClose" type="int" overloaded="no">
        <autodoc>PositionFromPointClose(int x, int y) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GotoLine" type="" overloaded="no">
        <autodoc>GotoLine(int line)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GotoPos" type="" overloaded="no">
        <autodoc>GotoPos(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetAnchor" type="" overloaded="no">
        <autodoc>SetAnchor(int posAnchor)</autodoc>
        <paramlist>
          <param name="posAnchor" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCurLine" type="String" overloaded="no">
        <autodoc>GetCurLine(int OUTPUT) -&gt; String</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetEndStyled" type="int" overloaded="no">
        <autodoc>GetEndStyled() -&gt; int</autodoc>
      </method>
      <method name="ConvertEOLs" type="" overloaded="no">
        <autodoc>ConvertEOLs(int eolMode)</autodoc>
        <paramlist>
          <param name="eolMode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetEOLMode" type="int" overloaded="no">
        <autodoc>GetEOLMode() -&gt; int</autodoc>
      </method>
      <method name="SetEOLMode" type="" overloaded="no">
        <autodoc>SetEOLMode(int eolMode)</autodoc>
        <paramlist>
          <param name="eolMode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="StartStyling" type="" overloaded="no">
        <autodoc>StartStyling(int pos, int mask)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
          <param name="mask" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetStyling" type="" overloaded="no">
        <autodoc>SetStyling(int length, int style)</autodoc>
        <paramlist>
          <param name="length" type="int" default=""/>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBufferedDraw" type="bool" overloaded="no">
        <autodoc>GetBufferedDraw() -&gt; bool</autodoc>
      </method>
      <method name="SetBufferedDraw" type="" overloaded="no">
        <autodoc>SetBufferedDraw(bool buffered)</autodoc>
        <paramlist>
          <param name="buffered" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetTabWidth" type="" overloaded="no">
        <autodoc>SetTabWidth(int tabWidth)</autodoc>
        <paramlist>
          <param name="tabWidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetTabWidth" type="int" overloaded="no">
        <autodoc>GetTabWidth() -&gt; int</autodoc>
      </method>
      <method name="SetCodePage" type="" overloaded="no">
        <autodoc>SetCodePage(int codePage)</autodoc>
        <paramlist>
          <param name="codePage" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerDefine" type="" overloaded="no">
        <autodoc>MarkerDefine(int markerNumber, int markerSymbol, Colour foreground=wxNullColour, 
    Colour background=wxNullColour)</autodoc>
        <paramlist>
          <param name="markerNumber" type="int" default=""/>
          <param name="markerSymbol" type="int" default=""/>
          <param name="foreground" type="Colour" default="wxNullColour"/>
          <param name="background" type="Colour" default="wxNullColour"/>
        </paramlist>
      </method>
      <method name="MarkerSetForeground" type="" overloaded="no">
        <autodoc>MarkerSetForeground(int markerNumber, Colour fore)</autodoc>
        <paramlist>
          <param name="markerNumber" type="int" default=""/>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="MarkerSetBackground" type="" overloaded="no">
        <autodoc>MarkerSetBackground(int markerNumber, Colour back)</autodoc>
        <paramlist>
          <param name="markerNumber" type="int" default=""/>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="MarkerAdd" type="int" overloaded="no">
        <autodoc>MarkerAdd(int line, int markerNumber) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
          <param name="markerNumber" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerDelete" type="" overloaded="no">
        <autodoc>MarkerDelete(int line, int markerNumber)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
          <param name="markerNumber" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerDeleteAll" type="" overloaded="no">
        <autodoc>MarkerDeleteAll(int markerNumber)</autodoc>
        <paramlist>
          <param name="markerNumber" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerGet" type="int" overloaded="no">
        <autodoc>MarkerGet(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerNext" type="int" overloaded="no">
        <autodoc>MarkerNext(int lineStart, int markerMask) -&gt; int</autodoc>
        <paramlist>
          <param name="lineStart" type="int" default=""/>
          <param name="markerMask" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerPrevious" type="int" overloaded="no">
        <autodoc>MarkerPrevious(int lineStart, int markerMask) -&gt; int</autodoc>
        <paramlist>
          <param name="lineStart" type="int" default=""/>
          <param name="markerMask" type="int" default=""/>
        </paramlist>
      </method>
      <method name="MarkerDefineBitmap" type="" overloaded="no">
        <autodoc>MarkerDefineBitmap(int markerNumber, Bitmap bmp)</autodoc>
        <paramlist>
          <param name="markerNumber" type="int" default=""/>
          <param name="bmp" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginType" type="" overloaded="no">
        <autodoc>SetMarginType(int margin, int marginType)</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
          <param name="marginType" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMarginType" type="int" overloaded="no">
        <autodoc>GetMarginType(int margin) -&gt; int</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginWidth" type="" overloaded="no">
        <autodoc>SetMarginWidth(int margin, int pixelWidth)</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
          <param name="pixelWidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMarginWidth" type="int" overloaded="no">
        <autodoc>GetMarginWidth(int margin) -&gt; int</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginMask" type="" overloaded="no">
        <autodoc>SetMarginMask(int margin, int mask)</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
          <param name="mask" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMarginMask" type="int" overloaded="no">
        <autodoc>GetMarginMask(int margin) -&gt; int</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMarginSensitive" type="" overloaded="no">
        <autodoc>SetMarginSensitive(int margin, bool sensitive)</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
          <param name="sensitive" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetMarginSensitive" type="bool" overloaded="no">
        <autodoc>GetMarginSensitive(int margin) -&gt; bool</autodoc>
        <paramlist>
          <param name="margin" type="int" default=""/>
        </paramlist>
      </method>
      <method name="StyleClearAll" type="" overloaded="no">
        <autodoc>StyleClearAll()</autodoc>
      </method>
      <method name="StyleSetForeground" type="" overloaded="no">
        <autodoc>StyleSetForeground(int style, Colour fore)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetBackground" type="" overloaded="no">
        <autodoc>StyleSetBackground(int style, Colour back)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetBold" type="" overloaded="no">
        <autodoc>StyleSetBold(int style, bool bold)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="bold" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetItalic" type="" overloaded="no">
        <autodoc>StyleSetItalic(int style, bool italic)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="italic" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetSize" type="" overloaded="no">
        <autodoc>StyleSetSize(int style, int sizePoints)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="sizePoints" type="int" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetFaceName" type="" overloaded="no">
        <autodoc>StyleSetFaceName(int style, String fontName)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="fontName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetEOLFilled" type="" overloaded="no">
        <autodoc>StyleSetEOLFilled(int style, bool filled)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="filled" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="StyleResetDefault" type="" overloaded="no">
        <autodoc>StyleResetDefault()</autodoc>
      </method>
      <method name="StyleSetUnderline" type="" overloaded="no">
        <autodoc>StyleSetUnderline(int style, bool underline)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="underline" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetCase" type="" overloaded="no">
        <autodoc>StyleSetCase(int style, int caseForce)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="caseForce" type="int" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetCharacterSet" type="" overloaded="no">
        <autodoc>StyleSetCharacterSet(int style, int characterSet)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="characterSet" type="int" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetHotSpot" type="" overloaded="no">
        <autodoc>StyleSetHotSpot(int style, bool hotspot)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="hotspot" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetSelForeground" type="" overloaded="no">
        <autodoc>SetSelForeground(bool useSetting, Colour fore)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetSelBackground" type="" overloaded="no">
        <autodoc>SetSelBackground(bool useSetting, Colour back)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetCaretForeground" type="" overloaded="no">
        <autodoc>SetCaretForeground(Colour fore)</autodoc>
        <paramlist>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="CmdKeyAssign" type="" overloaded="no">
        <autodoc>CmdKeyAssign(int key, int modifiers, int cmd)</autodoc>
        <paramlist>
          <param name="key" type="int" default=""/>
          <param name="modifiers" type="int" default=""/>
          <param name="cmd" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CmdKeyClear" type="" overloaded="no">
        <autodoc>CmdKeyClear(int key, int modifiers)</autodoc>
        <paramlist>
          <param name="key" type="int" default=""/>
          <param name="modifiers" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CmdKeyClearAll" type="" overloaded="no">
        <autodoc>CmdKeyClearAll()</autodoc>
      </method>
      <method name="SetStyleBytes" type="" overloaded="no">
        <autodoc>SetStyleBytes(int length, char styleBytes)</autodoc>
        <paramlist>
          <param name="length" type="int" default=""/>
          <param name="styleBytes" type="char" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetVisible" type="" overloaded="no">
        <autodoc>StyleSetVisible(int style, bool visible)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="visible" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetCaretPeriod" type="int" overloaded="no">
        <autodoc>GetCaretPeriod() -&gt; int</autodoc>
      </method>
      <method name="SetCaretPeriod" type="" overloaded="no">
        <autodoc>SetCaretPeriod(int periodMilliseconds)</autodoc>
        <paramlist>
          <param name="periodMilliseconds" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWordChars" type="" overloaded="no">
        <autodoc>SetWordChars(String characters)</autodoc>
        <paramlist>
          <param name="characters" type="String" default=""/>
        </paramlist>
      </method>
      <method name="BeginUndoAction" type="" overloaded="no">
        <autodoc>BeginUndoAction()</autodoc>
      </method>
      <method name="EndUndoAction" type="" overloaded="no">
        <autodoc>EndUndoAction()</autodoc>
      </method>
      <method name="IndicatorSetStyle" type="" overloaded="no">
        <autodoc>IndicatorSetStyle(int indic, int style)</autodoc>
        <paramlist>
          <param name="indic" type="int" default=""/>
          <param name="style" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IndicatorGetStyle" type="int" overloaded="no">
        <autodoc>IndicatorGetStyle(int indic) -&gt; int</autodoc>
        <paramlist>
          <param name="indic" type="int" default=""/>
        </paramlist>
      </method>
      <method name="IndicatorSetForeground" type="" overloaded="no">
        <autodoc>IndicatorSetForeground(int indic, Colour fore)</autodoc>
        <paramlist>
          <param name="indic" type="int" default=""/>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="IndicatorGetForeground" type="Colour" overloaded="no">
        <autodoc>IndicatorGetForeground(int indic) -&gt; Colour</autodoc>
        <paramlist>
          <param name="indic" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWhitespaceForeground" type="" overloaded="no">
        <autodoc>SetWhitespaceForeground(bool useSetting, Colour fore)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetWhitespaceBackground" type="" overloaded="no">
        <autodoc>SetWhitespaceBackground(bool useSetting, Colour back)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetStyleBits" type="" overloaded="no">
        <autodoc>SetStyleBits(int bits)</autodoc>
        <paramlist>
          <param name="bits" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetStyleBits" type="int" overloaded="no">
        <autodoc>GetStyleBits() -&gt; int</autodoc>
      </method>
      <method name="SetLineState" type="" overloaded="no">
        <autodoc>SetLineState(int line, int state)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
          <param name="state" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineState" type="int" overloaded="no">
        <autodoc>GetLineState(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMaxLineState" type="int" overloaded="no">
        <autodoc>GetMaxLineState() -&gt; int</autodoc>
      </method>
      <method name="GetCaretLineVisible" type="bool" overloaded="no">
        <autodoc>GetCaretLineVisible() -&gt; bool</autodoc>
      </method>
      <method name="SetCaretLineVisible" type="" overloaded="no">
        <autodoc>SetCaretLineVisible(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetCaretLineBack" type="Colour" overloaded="no">
        <autodoc>GetCaretLineBack() -&gt; Colour</autodoc>
      </method>
      <method name="SetCaretLineBack" type="" overloaded="no">
        <autodoc>SetCaretLineBack(Colour back)</autodoc>
        <paramlist>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetChangeable" type="" overloaded="no">
        <autodoc>StyleSetChangeable(int style, bool changeable)</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="changeable" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompShow" type="" overloaded="no">
        <autodoc>AutoCompShow(int lenEntered, String itemList)</autodoc>
        <paramlist>
          <param name="lenEntered" type="int" default=""/>
          <param name="itemList" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompCancel" type="" overloaded="no">
        <autodoc>AutoCompCancel()</autodoc>
      </method>
      <method name="AutoCompActive" type="bool" overloaded="no">
        <autodoc>AutoCompActive() -&gt; bool</autodoc>
      </method>
      <method name="AutoCompPosStart" type="int" overloaded="no">
        <autodoc>AutoCompPosStart() -&gt; int</autodoc>
      </method>
      <method name="AutoCompComplete" type="" overloaded="no">
        <autodoc>AutoCompComplete()</autodoc>
      </method>
      <method name="AutoCompStops" type="" overloaded="no">
        <autodoc>AutoCompStops(String characterSet)</autodoc>
        <paramlist>
          <param name="characterSet" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompSetSeparator" type="" overloaded="no">
        <autodoc>AutoCompSetSeparator(int separatorCharacter)</autodoc>
        <paramlist>
          <param name="separatorCharacter" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompGetSeparator" type="int" overloaded="no">
        <autodoc>AutoCompGetSeparator() -&gt; int</autodoc>
      </method>
      <method name="AutoCompSelect" type="" overloaded="no">
        <autodoc>AutoCompSelect(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompSetCancelAtStart" type="" overloaded="no">
        <autodoc>AutoCompSetCancelAtStart(bool cancel)</autodoc>
        <paramlist>
          <param name="cancel" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompGetCancelAtStart" type="bool" overloaded="no">
        <autodoc>AutoCompGetCancelAtStart() -&gt; bool</autodoc>
      </method>
      <method name="AutoCompSetFillUps" type="" overloaded="no">
        <autodoc>AutoCompSetFillUps(String characterSet)</autodoc>
        <paramlist>
          <param name="characterSet" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompSetChooseSingle" type="" overloaded="no">
        <autodoc>AutoCompSetChooseSingle(bool chooseSingle)</autodoc>
        <paramlist>
          <param name="chooseSingle" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompGetChooseSingle" type="bool" overloaded="no">
        <autodoc>AutoCompGetChooseSingle() -&gt; bool</autodoc>
      </method>
      <method name="AutoCompSetIgnoreCase" type="" overloaded="no">
        <autodoc>AutoCompSetIgnoreCase(bool ignoreCase)</autodoc>
        <paramlist>
          <param name="ignoreCase" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompGetIgnoreCase" type="bool" overloaded="no">
        <autodoc>AutoCompGetIgnoreCase() -&gt; bool</autodoc>
      </method>
      <method name="UserListShow" type="" overloaded="no">
        <autodoc>UserListShow(int listType, String itemList)</autodoc>
        <paramlist>
          <param name="listType" type="int" default=""/>
          <param name="itemList" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompSetAutoHide" type="" overloaded="no">
        <autodoc>AutoCompSetAutoHide(bool autoHide)</autodoc>
        <paramlist>
          <param name="autoHide" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompGetAutoHide" type="bool" overloaded="no">
        <autodoc>AutoCompGetAutoHide() -&gt; bool</autodoc>
      </method>
      <method name="AutoCompSetDropRestOfWord" type="" overloaded="no">
        <autodoc>AutoCompSetDropRestOfWord(bool dropRestOfWord)</autodoc>
        <paramlist>
          <param name="dropRestOfWord" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="AutoCompGetDropRestOfWord" type="bool" overloaded="no">
        <autodoc>AutoCompGetDropRestOfWord() -&gt; bool</autodoc>
      </method>
      <method name="RegisterImage" type="" overloaded="no">
        <autodoc>RegisterImage(int type, Bitmap bmp)</autodoc>
        <paramlist>
          <param name="type" type="int" default=""/>
          <param name="bmp" type="Bitmap" default=""/>
        </paramlist>
      </method>
      <method name="ClearRegisteredImages" type="" overloaded="no">
        <autodoc>ClearRegisteredImages()</autodoc>
      </method>
      <method name="AutoCompGetTypeSeparator" type="int" overloaded="no">
        <autodoc>AutoCompGetTypeSeparator() -&gt; int</autodoc>
      </method>
      <method name="AutoCompSetTypeSeparator" type="" overloaded="no">
        <autodoc>AutoCompSetTypeSeparator(int separatorCharacter)</autodoc>
        <paramlist>
          <param name="separatorCharacter" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetIndent" type="" overloaded="no">
        <autodoc>SetIndent(int indentSize)</autodoc>
        <paramlist>
          <param name="indentSize" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetIndent" type="int" overloaded="no">
        <autodoc>GetIndent() -&gt; int</autodoc>
      </method>
      <method name="SetUseTabs" type="" overloaded="no">
        <autodoc>SetUseTabs(bool useTabs)</autodoc>
        <paramlist>
          <param name="useTabs" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetUseTabs" type="bool" overloaded="no">
        <autodoc>GetUseTabs() -&gt; bool</autodoc>
      </method>
      <method name="SetLineIndentation" type="" overloaded="no">
        <autodoc>SetLineIndentation(int line, int indentSize)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
          <param name="indentSize" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineIndentation" type="int" overloaded="no">
        <autodoc>GetLineIndentation(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineIndentPosition" type="int" overloaded="no">
        <autodoc>GetLineIndentPosition(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetColumn" type="int" overloaded="no">
        <autodoc>GetColumn(int pos) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetUseHorizontalScrollBar" type="" overloaded="no">
        <autodoc>SetUseHorizontalScrollBar(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetUseHorizontalScrollBar" type="bool" overloaded="no">
        <autodoc>GetUseHorizontalScrollBar() -&gt; bool</autodoc>
      </method>
      <method name="SetIndentationGuides" type="" overloaded="no">
        <autodoc>SetIndentationGuides(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetIndentationGuides" type="bool" overloaded="no">
        <autodoc>GetIndentationGuides() -&gt; bool</autodoc>
      </method>
      <method name="SetHighlightGuide" type="" overloaded="no">
        <autodoc>SetHighlightGuide(int column)</autodoc>
        <paramlist>
          <param name="column" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetHighlightGuide" type="int" overloaded="no">
        <autodoc>GetHighlightGuide() -&gt; int</autodoc>
      </method>
      <method name="GetLineEndPosition" type="int" overloaded="no">
        <autodoc>GetLineEndPosition(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCodePage" type="int" overloaded="no">
        <autodoc>GetCodePage() -&gt; int</autodoc>
      </method>
      <method name="GetCaretForeground" type="Colour" overloaded="no">
        <autodoc>GetCaretForeground() -&gt; Colour</autodoc>
      </method>
      <method name="GetReadOnly" type="bool" overloaded="no">
        <autodoc>GetReadOnly() -&gt; bool</autodoc>
      </method>
      <method name="SetCurrentPos" type="" overloaded="no">
        <autodoc>SetCurrentPos(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSelectionStart" type="" overloaded="no">
        <autodoc>SetSelectionStart(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectionStart" type="int" overloaded="no">
        <autodoc>GetSelectionStart() -&gt; int</autodoc>
      </method>
      <method name="SetSelectionEnd" type="" overloaded="no">
        <autodoc>SetSelectionEnd(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectionEnd" type="int" overloaded="no">
        <autodoc>GetSelectionEnd() -&gt; int</autodoc>
      </method>
      <method name="SetPrintMagnification" type="" overloaded="no">
        <autodoc>SetPrintMagnification(int magnification)</autodoc>
        <paramlist>
          <param name="magnification" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintMagnification" type="int" overloaded="no">
        <autodoc>GetPrintMagnification() -&gt; int</autodoc>
      </method>
      <method name="SetPrintColourMode" type="" overloaded="no">
        <autodoc>SetPrintColourMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintColourMode" type="int" overloaded="no">
        <autodoc>GetPrintColourMode() -&gt; int</autodoc>
      </method>
      <method name="FindText" type="int" overloaded="no">
        <autodoc>FindText(int minPos, int maxPos, String text, int flags=0) -&gt; int</autodoc>
        <paramlist>
          <param name="minPos" type="int" default=""/>
          <param name="maxPos" type="int" default=""/>
          <param name="text" type="String" default=""/>
          <param name="flags" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="FormatRange" type="int" overloaded="no">
        <autodoc>FormatRange(bool doDraw, int startPos, int endPos, DC draw, DC target, 
    Rect renderRect, Rect pageRect) -&gt; int</autodoc>
        <paramlist>
          <param name="doDraw" type="bool" default=""/>
          <param name="startPos" type="int" default=""/>
          <param name="endPos" type="int" default=""/>
          <param name="draw" type="DC" default=""/>
          <param name="target" type="DC" default=""/>
          <param name="renderRect" type="Rect" default=""/>
          <param name="pageRect" type="Rect" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstVisibleLine" type="int" overloaded="no">
        <autodoc>GetFirstVisibleLine() -&gt; int</autodoc>
      </method>
      <method name="GetLine" type="String" overloaded="no">
        <autodoc>GetLine(int line) -&gt; String</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineCount" type="int" overloaded="no">
        <autodoc>GetLineCount() -&gt; int</autodoc>
      </method>
      <method name="SetMarginLeft" type="" overloaded="no">
        <autodoc>SetMarginLeft(int pixelWidth)</autodoc>
        <paramlist>
          <param name="pixelWidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMarginLeft" type="int" overloaded="no">
        <autodoc>GetMarginLeft() -&gt; int</autodoc>
      </method>
      <method name="SetMarginRight" type="" overloaded="no">
        <autodoc>SetMarginRight(int pixelWidth)</autodoc>
        <paramlist>
          <param name="pixelWidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMarginRight" type="int" overloaded="no">
        <autodoc>GetMarginRight() -&gt; int</autodoc>
      </method>
      <method name="GetModify" type="bool" overloaded="no">
        <autodoc>GetModify() -&gt; bool</autodoc>
      </method>
      <method name="SetSelection" type="" overloaded="no">
        <autodoc>SetSelection(int start, int end)</autodoc>
        <paramlist>
          <param name="start" type="int" default=""/>
          <param name="end" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectedText" type="String" overloaded="no">
        <autodoc>GetSelectedText() -&gt; String</autodoc>
      </method>
      <method name="GetTextRange" type="String" overloaded="no">
        <autodoc>GetTextRange(int startPos, int endPos) -&gt; String</autodoc>
        <paramlist>
          <param name="startPos" type="int" default=""/>
          <param name="endPos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="HideSelection" type="" overloaded="no">
        <autodoc>HideSelection(bool normal)</autodoc>
        <paramlist>
          <param name="normal" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="LineFromPosition" type="int" overloaded="no">
        <autodoc>LineFromPosition(int pos) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="PositionFromLine" type="int" overloaded="no">
        <autodoc>PositionFromLine(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LineScroll" type="" overloaded="no">
        <autodoc>LineScroll(int columns, int lines)</autodoc>
        <paramlist>
          <param name="columns" type="int" default=""/>
          <param name="lines" type="int" default=""/>
        </paramlist>
      </method>
      <method name="EnsureCaretVisible" type="" overloaded="no">
        <autodoc>EnsureCaretVisible()</autodoc>
      </method>
      <method name="ReplaceSelection" type="" overloaded="no">
        <autodoc>ReplaceSelection(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetReadOnly" type="" overloaded="no">
        <autodoc>SetReadOnly(bool readOnly)</autodoc>
        <paramlist>
          <param name="readOnly" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="CanPaste" type="bool" overloaded="no">
        <autodoc>CanPaste() -&gt; bool</autodoc>
      </method>
      <method name="CanUndo" type="bool" overloaded="no">
        <autodoc>CanUndo() -&gt; bool</autodoc>
      </method>
      <method name="EmptyUndoBuffer" type="" overloaded="no">
        <autodoc>EmptyUndoBuffer()</autodoc>
      </method>
      <method name="Undo" type="" overloaded="no">
        <autodoc>Undo()</autodoc>
      </method>
      <method name="Cut" type="" overloaded="no">
        <autodoc>Cut()</autodoc>
      </method>
      <method name="Copy" type="" overloaded="no">
        <autodoc>Copy()</autodoc>
      </method>
      <method name="Paste" type="" overloaded="no">
        <autodoc>Paste()</autodoc>
      </method>
      <method name="Clear" type="" overloaded="no">
        <autodoc>Clear()</autodoc>
      </method>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="GetTextLength" type="int" overloaded="no">
        <autodoc>GetTextLength() -&gt; int</autodoc>
      </method>
      <method name="SetOvertype" type="" overloaded="no">
        <autodoc>SetOvertype(bool overtype)</autodoc>
        <paramlist>
          <param name="overtype" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetOvertype" type="bool" overloaded="no">
        <autodoc>GetOvertype() -&gt; bool</autodoc>
      </method>
      <method name="SetCaretWidth" type="" overloaded="no">
        <autodoc>SetCaretWidth(int pixelWidth)</autodoc>
        <paramlist>
          <param name="pixelWidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetCaretWidth" type="int" overloaded="no">
        <autodoc>GetCaretWidth() -&gt; int</autodoc>
      </method>
      <method name="SetTargetStart" type="" overloaded="no">
        <autodoc>SetTargetStart(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetTargetStart" type="int" overloaded="no">
        <autodoc>GetTargetStart() -&gt; int</autodoc>
      </method>
      <method name="SetTargetEnd" type="" overloaded="no">
        <autodoc>SetTargetEnd(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetTargetEnd" type="int" overloaded="no">
        <autodoc>GetTargetEnd() -&gt; int</autodoc>
      </method>
      <method name="ReplaceTarget" type="int" overloaded="no">
        <autodoc>ReplaceTarget(String text) -&gt; int</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="ReplaceTargetRE" type="int" overloaded="no">
        <autodoc>ReplaceTargetRE(String text) -&gt; int</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SearchInTarget" type="int" overloaded="no">
        <autodoc>SearchInTarget(String text) -&gt; int</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetSearchFlags" type="" overloaded="no">
        <autodoc>SetSearchFlags(int flags)</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSearchFlags" type="int" overloaded="no">
        <autodoc>GetSearchFlags() -&gt; int</autodoc>
      </method>
      <method name="CallTipShow" type="" overloaded="no">
        <autodoc>CallTipShow(int pos, String definition)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
          <param name="definition" type="String" default=""/>
        </paramlist>
      </method>
      <method name="CallTipCancel" type="" overloaded="no">
        <autodoc>CallTipCancel()</autodoc>
      </method>
      <method name="CallTipActive" type="bool" overloaded="no">
        <autodoc>CallTipActive() -&gt; bool</autodoc>
      </method>
      <method name="CallTipPosAtStart" type="int" overloaded="no">
        <autodoc>CallTipPosAtStart() -&gt; int</autodoc>
      </method>
      <method name="CallTipSetHighlight" type="" overloaded="no">
        <autodoc>CallTipSetHighlight(int start, int end)</autodoc>
        <paramlist>
          <param name="start" type="int" default=""/>
          <param name="end" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CallTipSetBackground" type="" overloaded="no">
        <autodoc>CallTipSetBackground(Colour back)</autodoc>
        <paramlist>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="CallTipSetForeground" type="" overloaded="no">
        <autodoc>CallTipSetForeground(Colour fore)</autodoc>
        <paramlist>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="CallTipSetForegroundHighlight" type="" overloaded="no">
        <autodoc>CallTipSetForegroundHighlight(Colour fore)</autodoc>
        <paramlist>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="VisibleFromDocLine" type="int" overloaded="no">
        <autodoc>VisibleFromDocLine(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DocLineFromVisible" type="int" overloaded="no">
        <autodoc>DocLineFromVisible(int lineDisplay) -&gt; int</autodoc>
        <paramlist>
          <param name="lineDisplay" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFoldLevel" type="" overloaded="no">
        <autodoc>SetFoldLevel(int line, int level)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
          <param name="level" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFoldLevel" type="int" overloaded="no">
        <autodoc>GetFoldLevel(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLastChild" type="int" overloaded="no">
        <autodoc>GetLastChild(int line, int level) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
          <param name="level" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetFoldParent" type="int" overloaded="no">
        <autodoc>GetFoldParent(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ShowLines" type="" overloaded="no">
        <autodoc>ShowLines(int lineStart, int lineEnd)</autodoc>
        <paramlist>
          <param name="lineStart" type="int" default=""/>
          <param name="lineEnd" type="int" default=""/>
        </paramlist>
      </method>
      <method name="HideLines" type="" overloaded="no">
        <autodoc>HideLines(int lineStart, int lineEnd)</autodoc>
        <paramlist>
          <param name="lineStart" type="int" default=""/>
          <param name="lineEnd" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineVisible" type="bool" overloaded="no">
        <autodoc>GetLineVisible(int line) -&gt; bool</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFoldExpanded" type="" overloaded="no">
        <autodoc>SetFoldExpanded(int line, bool expanded)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
          <param name="expanded" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetFoldExpanded" type="bool" overloaded="no">
        <autodoc>GetFoldExpanded(int line) -&gt; bool</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ToggleFold" type="" overloaded="no">
        <autodoc>ToggleFold(int line)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="EnsureVisible" type="" overloaded="no">
        <autodoc>EnsureVisible(int line)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFoldFlags" type="" overloaded="no">
        <autodoc>SetFoldFlags(int flags)</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
        </paramlist>
      </method>
      <method name="EnsureVisibleEnforcePolicy" type="" overloaded="no">
        <autodoc>EnsureVisibleEnforcePolicy(int line)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetTabIndents" type="" overloaded="no">
        <autodoc>SetTabIndents(bool tabIndents)</autodoc>
        <paramlist>
          <param name="tabIndents" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetTabIndents" type="bool" overloaded="no">
        <autodoc>GetTabIndents() -&gt; bool</autodoc>
      </method>
      <method name="SetBackSpaceUnIndents" type="" overloaded="no">
        <autodoc>SetBackSpaceUnIndents(bool bsUnIndents)</autodoc>
        <paramlist>
          <param name="bsUnIndents" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetBackSpaceUnIndents" type="bool" overloaded="no">
        <autodoc>GetBackSpaceUnIndents() -&gt; bool</autodoc>
      </method>
      <method name="SetMouseDwellTime" type="" overloaded="no">
        <autodoc>SetMouseDwellTime(int periodMilliseconds)</autodoc>
        <paramlist>
          <param name="periodMilliseconds" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetMouseDwellTime" type="int" overloaded="no">
        <autodoc>GetMouseDwellTime() -&gt; int</autodoc>
      </method>
      <method name="WordStartPosition" type="int" overloaded="no">
        <autodoc>WordStartPosition(int pos, bool onlyWordCharacters) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
          <param name="onlyWordCharacters" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="WordEndPosition" type="int" overloaded="no">
        <autodoc>WordEndPosition(int pos, bool onlyWordCharacters) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
          <param name="onlyWordCharacters" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetWrapMode" type="" overloaded="no">
        <autodoc>SetWrapMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetWrapMode" type="int" overloaded="no">
        <autodoc>GetWrapMode() -&gt; int</autodoc>
      </method>
      <method name="SetLayoutCache" type="" overloaded="no">
        <autodoc>SetLayoutCache(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLayoutCache" type="int" overloaded="no">
        <autodoc>GetLayoutCache() -&gt; int</autodoc>
      </method>
      <method name="SetScrollWidth" type="" overloaded="no">
        <autodoc>SetScrollWidth(int pixelWidth)</autodoc>
        <paramlist>
          <param name="pixelWidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetScrollWidth" type="int" overloaded="no">
        <autodoc>GetScrollWidth() -&gt; int</autodoc>
      </method>
      <method name="TextWidth" type="int" overloaded="no">
        <autodoc>TextWidth(int style, String text) -&gt; int</autodoc>
        <paramlist>
          <param name="style" type="int" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetEndAtLastLine" type="" overloaded="no">
        <autodoc>SetEndAtLastLine(bool endAtLastLine)</autodoc>
        <paramlist>
          <param name="endAtLastLine" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetEndAtLastLine" type="int" overloaded="no">
        <autodoc>GetEndAtLastLine() -&gt; int</autodoc>
      </method>
      <method name="TextHeight" type="int" overloaded="no">
        <autodoc>TextHeight(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetUseVerticalScrollBar" type="" overloaded="no">
        <autodoc>SetUseVerticalScrollBar(bool show)</autodoc>
        <paramlist>
          <param name="show" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetUseVerticalScrollBar" type="bool" overloaded="no">
        <autodoc>GetUseVerticalScrollBar() -&gt; bool</autodoc>
      </method>
      <method name="AppendText" type="" overloaded="no">
        <autodoc>AppendText(int length, String text)</autodoc>
        <paramlist>
          <param name="length" type="int" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetTwoPhaseDraw" type="bool" overloaded="no">
        <autodoc>GetTwoPhaseDraw() -&gt; bool</autodoc>
      </method>
      <method name="SetTwoPhaseDraw" type="" overloaded="no">
        <autodoc>SetTwoPhaseDraw(bool twoPhase)</autodoc>
        <paramlist>
          <param name="twoPhase" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="TargetFromSelection" type="" overloaded="no">
        <autodoc>TargetFromSelection()</autodoc>
      </method>
      <method name="LinesJoin" type="" overloaded="no">
        <autodoc>LinesJoin()</autodoc>
      </method>
      <method name="LinesSplit" type="" overloaded="no">
        <autodoc>LinesSplit(int pixelWidth)</autodoc>
        <paramlist>
          <param name="pixelWidth" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFoldMarginColour" type="" overloaded="no">
        <autodoc>SetFoldMarginColour(bool useSetting, Colour back)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetFoldMarginHiColour" type="" overloaded="no">
        <autodoc>SetFoldMarginHiColour(bool useSetting, Colour fore)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="LineDown" type="" overloaded="no">
        <autodoc>LineDown()</autodoc>
        <docstring>This is just a wrapper for ScrollLines(1).</docstring>
      </method>
      <method name="LineDownExtend" type="" overloaded="no">
        <autodoc>LineDownExtend()</autodoc>
      </method>
      <method name="LineUp" type="" overloaded="no">
        <autodoc>LineUp()</autodoc>
        <docstring>This is just a wrapper for ScrollLines(-1).</docstring>
      </method>
      <method name="LineUpExtend" type="" overloaded="no">
        <autodoc>LineUpExtend()</autodoc>
      </method>
      <method name="CharLeft" type="" overloaded="no">
        <autodoc>CharLeft()</autodoc>
      </method>
      <method name="CharLeftExtend" type="" overloaded="no">
        <autodoc>CharLeftExtend()</autodoc>
      </method>
      <method name="CharRight" type="" overloaded="no">
        <autodoc>CharRight()</autodoc>
      </method>
      <method name="CharRightExtend" type="" overloaded="no">
        <autodoc>CharRightExtend()</autodoc>
      </method>
      <method name="WordLeft" type="" overloaded="no">
        <autodoc>WordLeft()</autodoc>
      </method>
      <method name="WordLeftExtend" type="" overloaded="no">
        <autodoc>WordLeftExtend()</autodoc>
      </method>
      <method name="WordRight" type="" overloaded="no">
        <autodoc>WordRight()</autodoc>
      </method>
      <method name="WordRightExtend" type="" overloaded="no">
        <autodoc>WordRightExtend()</autodoc>
      </method>
      <method name="Home" type="" overloaded="no">
        <autodoc>Home()</autodoc>
      </method>
      <method name="HomeExtend" type="" overloaded="no">
        <autodoc>HomeExtend()</autodoc>
      </method>
      <method name="LineEnd" type="" overloaded="no">
        <autodoc>LineEnd()</autodoc>
      </method>
      <method name="LineEndExtend" type="" overloaded="no">
        <autodoc>LineEndExtend()</autodoc>
      </method>
      <method name="DocumentStart" type="" overloaded="no">
        <autodoc>DocumentStart()</autodoc>
      </method>
      <method name="DocumentStartExtend" type="" overloaded="no">
        <autodoc>DocumentStartExtend()</autodoc>
      </method>
      <method name="DocumentEnd" type="" overloaded="no">
        <autodoc>DocumentEnd()</autodoc>
      </method>
      <method name="DocumentEndExtend" type="" overloaded="no">
        <autodoc>DocumentEndExtend()</autodoc>
      </method>
      <method name="PageUp" type="" overloaded="no">
        <autodoc>PageUp()</autodoc>
        <docstring>This is just a wrapper for ScrollPages(-1).</docstring>
      </method>
      <method name="PageUpExtend" type="" overloaded="no">
        <autodoc>PageUpExtend()</autodoc>
      </method>
      <method name="PageDown" type="" overloaded="no">
        <autodoc>PageDown()</autodoc>
        <docstring>This is just a wrapper for ScrollPages(1).</docstring>
      </method>
      <method name="PageDownExtend" type="" overloaded="no">
        <autodoc>PageDownExtend()</autodoc>
      </method>
      <method name="EditToggleOvertype" type="" overloaded="no">
        <autodoc>EditToggleOvertype()</autodoc>
      </method>
      <method name="Cancel" type="" overloaded="no">
        <autodoc>Cancel()</autodoc>
      </method>
      <method name="DeleteBack" type="" overloaded="no">
        <autodoc>DeleteBack()</autodoc>
      </method>
      <method name="Tab" type="" overloaded="no">
        <autodoc>Tab()</autodoc>
      </method>
      <method name="BackTab" type="" overloaded="no">
        <autodoc>BackTab()</autodoc>
      </method>
      <method name="NewLine" type="" overloaded="no">
        <autodoc>NewLine()</autodoc>
      </method>
      <method name="FormFeed" type="" overloaded="no">
        <autodoc>FormFeed()</autodoc>
      </method>
      <method name="VCHome" type="" overloaded="no">
        <autodoc>VCHome()</autodoc>
      </method>
      <method name="VCHomeExtend" type="" overloaded="no">
        <autodoc>VCHomeExtend()</autodoc>
      </method>
      <method name="ZoomIn" type="" overloaded="no">
        <autodoc>ZoomIn()</autodoc>
      </method>
      <method name="ZoomOut" type="" overloaded="no">
        <autodoc>ZoomOut()</autodoc>
      </method>
      <method name="DelWordLeft" type="" overloaded="no">
        <autodoc>DelWordLeft()</autodoc>
      </method>
      <method name="DelWordRight" type="" overloaded="no">
        <autodoc>DelWordRight()</autodoc>
      </method>
      <method name="LineCut" type="" overloaded="no">
        <autodoc>LineCut()</autodoc>
      </method>
      <method name="LineDelete" type="" overloaded="no">
        <autodoc>LineDelete()</autodoc>
      </method>
      <method name="LineTranspose" type="" overloaded="no">
        <autodoc>LineTranspose()</autodoc>
      </method>
      <method name="LineDuplicate" type="" overloaded="no">
        <autodoc>LineDuplicate()</autodoc>
      </method>
      <method name="LowerCase" type="" overloaded="no">
        <autodoc>LowerCase()</autodoc>
      </method>
      <method name="UpperCase" type="" overloaded="no">
        <autodoc>UpperCase()</autodoc>
      </method>
      <method name="LineScrollDown" type="" overloaded="no">
        <autodoc>LineScrollDown()</autodoc>
      </method>
      <method name="LineScrollUp" type="" overloaded="no">
        <autodoc>LineScrollUp()</autodoc>
      </method>
      <method name="DeleteBackNotLine" type="" overloaded="no">
        <autodoc>DeleteBackNotLine()</autodoc>
      </method>
      <method name="HomeDisplay" type="" overloaded="no">
        <autodoc>HomeDisplay()</autodoc>
      </method>
      <method name="HomeDisplayExtend" type="" overloaded="no">
        <autodoc>HomeDisplayExtend()</autodoc>
      </method>
      <method name="LineEndDisplay" type="" overloaded="no">
        <autodoc>LineEndDisplay()</autodoc>
      </method>
      <method name="LineEndDisplayExtend" type="" overloaded="no">
        <autodoc>LineEndDisplayExtend()</autodoc>
      </method>
      <method name="HomeWrap" type="" overloaded="no">
        <autodoc>HomeWrap()</autodoc>
      </method>
      <method name="HomeWrapExtend" type="" overloaded="no">
        <autodoc>HomeWrapExtend()</autodoc>
      </method>
      <method name="LineEndWrap" type="" overloaded="no">
        <autodoc>LineEndWrap()</autodoc>
      </method>
      <method name="LineEndWrapExtend" type="" overloaded="no">
        <autodoc>LineEndWrapExtend()</autodoc>
      </method>
      <method name="VCHomeWrap" type="" overloaded="no">
        <autodoc>VCHomeWrap()</autodoc>
      </method>
      <method name="VCHomeWrapExtend" type="" overloaded="no">
        <autodoc>VCHomeWrapExtend()</autodoc>
      </method>
      <method name="LineCopy" type="" overloaded="no">
        <autodoc>LineCopy()</autodoc>
      </method>
      <method name="MoveCaretInsideView" type="" overloaded="no">
        <autodoc>MoveCaretInsideView()</autodoc>
      </method>
      <method name="LineLength" type="int" overloaded="no">
        <autodoc>LineLength(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="BraceHighlight" type="" overloaded="no">
        <autodoc>BraceHighlight(int pos1, int pos2)</autodoc>
        <paramlist>
          <param name="pos1" type="int" default=""/>
          <param name="pos2" type="int" default=""/>
        </paramlist>
      </method>
      <method name="BraceBadLight" type="" overloaded="no">
        <autodoc>BraceBadLight(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="BraceMatch" type="int" overloaded="no">
        <autodoc>BraceMatch(int pos) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetViewEOL" type="bool" overloaded="no">
        <autodoc>GetViewEOL() -&gt; bool</autodoc>
      </method>
      <method name="SetViewEOL" type="" overloaded="no">
        <autodoc>SetViewEOL(bool visible)</autodoc>
        <paramlist>
          <param name="visible" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetDocPointer" type="" overloaded="no">
        <autodoc>GetDocPointer() -&gt; void</autodoc>
      </method>
      <method name="SetDocPointer" type="" overloaded="no">
        <autodoc>SetDocPointer(void docPointer)</autodoc>
        <paramlist>
          <param name="docPointer" type="" default=""/>
        </paramlist>
      </method>
      <method name="SetModEventMask" type="" overloaded="no">
        <autodoc>SetModEventMask(int mask)</autodoc>
        <paramlist>
          <param name="mask" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetEdgeColumn" type="int" overloaded="no">
        <autodoc>GetEdgeColumn() -&gt; int</autodoc>
      </method>
      <method name="SetEdgeColumn" type="" overloaded="no">
        <autodoc>SetEdgeColumn(int column)</autodoc>
        <paramlist>
          <param name="column" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetEdgeMode" type="int" overloaded="no">
        <autodoc>GetEdgeMode() -&gt; int</autodoc>
      </method>
      <method name="SetEdgeMode" type="" overloaded="no">
        <autodoc>SetEdgeMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetEdgeColour" type="Colour" overloaded="no">
        <autodoc>GetEdgeColour() -&gt; Colour</autodoc>
      </method>
      <method name="SetEdgeColour" type="" overloaded="no">
        <autodoc>SetEdgeColour(Colour edgeColour)</autodoc>
        <paramlist>
          <param name="edgeColour" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SearchAnchor" type="" overloaded="no">
        <autodoc>SearchAnchor()</autodoc>
      </method>
      <method name="SearchNext" type="int" overloaded="no">
        <autodoc>SearchNext(int flags, String text) -&gt; int</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SearchPrev" type="int" overloaded="no">
        <autodoc>SearchPrev(int flags, String text) -&gt; int</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LinesOnScreen" type="int" overloaded="no">
        <autodoc>LinesOnScreen() -&gt; int</autodoc>
      </method>
      <method name="UsePopUp" type="" overloaded="no">
        <autodoc>UsePopUp(bool allowPopUp)</autodoc>
        <paramlist>
          <param name="allowPopUp" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SelectionIsRectangle" type="bool" overloaded="no">
        <autodoc>SelectionIsRectangle() -&gt; bool</autodoc>
      </method>
      <method name="SetZoom" type="" overloaded="no">
        <autodoc>SetZoom(int zoom)</autodoc>
        <paramlist>
          <param name="zoom" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetZoom" type="int" overloaded="no">
        <autodoc>GetZoom() -&gt; int</autodoc>
      </method>
      <method name="CreateDocument" type="" overloaded="no">
        <autodoc>CreateDocument() -&gt; void</autodoc>
      </method>
      <method name="AddRefDocument" type="" overloaded="no">
        <autodoc>AddRefDocument(void docPointer)</autodoc>
        <paramlist>
          <param name="docPointer" type="" default=""/>
        </paramlist>
      </method>
      <method name="ReleaseDocument" type="" overloaded="no">
        <autodoc>ReleaseDocument(void docPointer)</autodoc>
        <paramlist>
          <param name="docPointer" type="" default=""/>
        </paramlist>
      </method>
      <method name="GetModEventMask" type="int" overloaded="no">
        <autodoc>GetModEventMask() -&gt; int</autodoc>
      </method>
      <method name="SetSTCFocus" type="" overloaded="no">
        <autodoc>SetSTCFocus(bool focus)</autodoc>
        <paramlist>
          <param name="focus" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetSTCFocus" type="bool" overloaded="no">
        <autodoc>GetSTCFocus() -&gt; bool</autodoc>
      </method>
      <method name="SetStatus" type="" overloaded="no">
        <autodoc>SetStatus(int statusCode)</autodoc>
        <paramlist>
          <param name="statusCode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetStatus" type="int" overloaded="no">
        <autodoc>GetStatus() -&gt; int</autodoc>
      </method>
      <method name="SetMouseDownCaptures" type="" overloaded="no">
        <autodoc>SetMouseDownCaptures(bool captures)</autodoc>
        <paramlist>
          <param name="captures" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetMouseDownCaptures" type="bool" overloaded="no">
        <autodoc>GetMouseDownCaptures() -&gt; bool</autodoc>
      </method>
      <method name="SetSTCCursor" type="" overloaded="no">
        <autodoc>SetSTCCursor(int cursorType)</autodoc>
        <paramlist>
          <param name="cursorType" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSTCCursor" type="int" overloaded="no">
        <autodoc>GetSTCCursor() -&gt; int</autodoc>
      </method>
      <method name="SetControlCharSymbol" type="" overloaded="no">
        <autodoc>SetControlCharSymbol(int symbol)</autodoc>
        <paramlist>
          <param name="symbol" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetControlCharSymbol" type="int" overloaded="no">
        <autodoc>GetControlCharSymbol() -&gt; int</autodoc>
      </method>
      <method name="WordPartLeft" type="" overloaded="no">
        <autodoc>WordPartLeft()</autodoc>
      </method>
      <method name="WordPartLeftExtend" type="" overloaded="no">
        <autodoc>WordPartLeftExtend()</autodoc>
      </method>
      <method name="WordPartRight" type="" overloaded="no">
        <autodoc>WordPartRight()</autodoc>
      </method>
      <method name="WordPartRightExtend" type="" overloaded="no">
        <autodoc>WordPartRightExtend()</autodoc>
      </method>
      <method name="SetVisiblePolicy" type="" overloaded="no">
        <autodoc>SetVisiblePolicy(int visiblePolicy, int visibleSlop)</autodoc>
        <paramlist>
          <param name="visiblePolicy" type="int" default=""/>
          <param name="visibleSlop" type="int" default=""/>
        </paramlist>
      </method>
      <method name="DelLineLeft" type="" overloaded="no">
        <autodoc>DelLineLeft()</autodoc>
      </method>
      <method name="DelLineRight" type="" overloaded="no">
        <autodoc>DelLineRight()</autodoc>
      </method>
      <method name="SetXOffset" type="" overloaded="no">
        <autodoc>SetXOffset(int newOffset)</autodoc>
        <paramlist>
          <param name="newOffset" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetXOffset" type="int" overloaded="no">
        <autodoc>GetXOffset() -&gt; int</autodoc>
      </method>
      <method name="ChooseCaretX" type="" overloaded="no">
        <autodoc>ChooseCaretX()</autodoc>
      </method>
      <method name="SetXCaretPolicy" type="" overloaded="no">
        <autodoc>SetXCaretPolicy(int caretPolicy, int caretSlop)</autodoc>
        <paramlist>
          <param name="caretPolicy" type="int" default=""/>
          <param name="caretSlop" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetYCaretPolicy" type="" overloaded="no">
        <autodoc>SetYCaretPolicy(int caretPolicy, int caretSlop)</autodoc>
        <paramlist>
          <param name="caretPolicy" type="int" default=""/>
          <param name="caretSlop" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetPrintWrapMode" type="" overloaded="no">
        <autodoc>SetPrintWrapMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetPrintWrapMode" type="int" overloaded="no">
        <autodoc>GetPrintWrapMode() -&gt; int</autodoc>
      </method>
      <method name="SetHotspotActiveForeground" type="" overloaded="no">
        <autodoc>SetHotspotActiveForeground(bool useSetting, Colour fore)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="fore" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetHotspotActiveBackground" type="" overloaded="no">
        <autodoc>SetHotspotActiveBackground(bool useSetting, Colour back)</autodoc>
        <paramlist>
          <param name="useSetting" type="bool" default=""/>
          <param name="back" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetHotspotActiveUnderline" type="" overloaded="no">
        <autodoc>SetHotspotActiveUnderline(bool underline)</autodoc>
        <paramlist>
          <param name="underline" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetHotspotSingleLine" type="" overloaded="no">
        <autodoc>SetHotspotSingleLine(bool singleLine)</autodoc>
        <paramlist>
          <param name="singleLine" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="ParaDown" type="" overloaded="no">
        <autodoc>ParaDown()</autodoc>
      </method>
      <method name="ParaDownExtend" type="" overloaded="no">
        <autodoc>ParaDownExtend()</autodoc>
      </method>
      <method name="ParaUp" type="" overloaded="no">
        <autodoc>ParaUp()</autodoc>
      </method>
      <method name="ParaUpExtend" type="" overloaded="no">
        <autodoc>ParaUpExtend()</autodoc>
      </method>
      <method name="PositionBefore" type="int" overloaded="no">
        <autodoc>PositionBefore(int pos) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="PositionAfter" type="int" overloaded="no">
        <autodoc>PositionAfter(int pos) -&gt; int</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CopyRange" type="" overloaded="no">
        <autodoc>CopyRange(int start, int end)</autodoc>
        <paramlist>
          <param name="start" type="int" default=""/>
          <param name="end" type="int" default=""/>
        </paramlist>
      </method>
      <method name="CopyText" type="" overloaded="no">
        <autodoc>CopyText(int length, String text)</autodoc>
        <paramlist>
          <param name="length" type="int" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetSelectionMode" type="" overloaded="no">
        <autodoc>SetSelectionMode(int mode)</autodoc>
        <paramlist>
          <param name="mode" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelectionMode" type="int" overloaded="no">
        <autodoc>GetSelectionMode() -&gt; int</autodoc>
      </method>
      <method name="GetLineSelStartPosition" type="int" overloaded="no">
        <autodoc>GetLineSelStartPosition(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineSelEndPosition" type="int" overloaded="no">
        <autodoc>GetLineSelEndPosition(int line) -&gt; int</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="LineDownRectExtend" type="" overloaded="no">
        <autodoc>LineDownRectExtend()</autodoc>
      </method>
      <method name="LineUpRectExtend" type="" overloaded="no">
        <autodoc>LineUpRectExtend()</autodoc>
      </method>
      <method name="CharLeftRectExtend" type="" overloaded="no">
        <autodoc>CharLeftRectExtend()</autodoc>
      </method>
      <method name="CharRightRectExtend" type="" overloaded="no">
        <autodoc>CharRightRectExtend()</autodoc>
      </method>
      <method name="HomeRectExtend" type="" overloaded="no">
        <autodoc>HomeRectExtend()</autodoc>
      </method>
      <method name="VCHomeRectExtend" type="" overloaded="no">
        <autodoc>VCHomeRectExtend()</autodoc>
      </method>
      <method name="LineEndRectExtend" type="" overloaded="no">
        <autodoc>LineEndRectExtend()</autodoc>
      </method>
      <method name="PageUpRectExtend" type="" overloaded="no">
        <autodoc>PageUpRectExtend()</autodoc>
      </method>
      <method name="PageDownRectExtend" type="" overloaded="no">
        <autodoc>PageDownRectExtend()</autodoc>
      </method>
      <method name="StutteredPageUp" type="" overloaded="no">
        <autodoc>StutteredPageUp()</autodoc>
      </method>
      <method name="StutteredPageUpExtend" type="" overloaded="no">
        <autodoc>StutteredPageUpExtend()</autodoc>
      </method>
      <method name="StutteredPageDown" type="" overloaded="no">
        <autodoc>StutteredPageDown()</autodoc>
      </method>
      <method name="StutteredPageDownExtend" type="" overloaded="no">
        <autodoc>StutteredPageDownExtend()</autodoc>
      </method>
      <method name="WordLeftEnd" type="" overloaded="no">
        <autodoc>WordLeftEnd()</autodoc>
      </method>
      <method name="WordLeftEndExtend" type="" overloaded="no">
        <autodoc>WordLeftEndExtend()</autodoc>
      </method>
      <method name="WordRightEnd" type="" overloaded="no">
        <autodoc>WordRightEnd()</autodoc>
      </method>
      <method name="WordRightEndExtend" type="" overloaded="no">
        <autodoc>WordRightEndExtend()</autodoc>
      </method>
      <method name="SetWhitespaceChars" type="" overloaded="no">
        <autodoc>SetWhitespaceChars(String characters)</autodoc>
        <paramlist>
          <param name="characters" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetCharsDefault" type="" overloaded="no">
        <autodoc>SetCharsDefault()</autodoc>
      </method>
      <method name="AutoCompGetCurrent" type="int" overloaded="no">
        <autodoc>AutoCompGetCurrent() -&gt; int</autodoc>
      </method>
      <method name="StartRecord" type="" overloaded="no">
        <autodoc>StartRecord()</autodoc>
      </method>
      <method name="StopRecord" type="" overloaded="no">
        <autodoc>StopRecord()</autodoc>
      </method>
      <method name="SetLexer" type="" overloaded="no">
        <autodoc>SetLexer(int lexer)</autodoc>
        <paramlist>
          <param name="lexer" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetLexer" type="int" overloaded="no">
        <autodoc>GetLexer() -&gt; int</autodoc>
      </method>
      <method name="Colourise" type="" overloaded="no">
        <autodoc>Colourise(int start, int end)</autodoc>
        <paramlist>
          <param name="start" type="int" default=""/>
          <param name="end" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetProperty" type="" overloaded="no">
        <autodoc>SetProperty(String key, String value)</autodoc>
        <paramlist>
          <param name="key" type="String" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetKeyWords" type="" overloaded="no">
        <autodoc>SetKeyWords(int keywordSet, String keyWords)</autodoc>
        <paramlist>
          <param name="keywordSet" type="int" default=""/>
          <param name="keyWords" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetLexerLanguage" type="" overloaded="no">
        <autodoc>SetLexerLanguage(String language)</autodoc>
        <paramlist>
          <param name="language" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetCurrentLine" type="int" overloaded="no">
        <autodoc>GetCurrentLine() -&gt; int</autodoc>
      </method>
      <method name="StyleSetSpec" type="" overloaded="no">
        <autodoc>StyleSetSpec(int styleNum, String spec)</autodoc>
        <paramlist>
          <param name="styleNum" type="int" default=""/>
          <param name="spec" type="String" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetFont" type="" overloaded="no">
        <autodoc>StyleSetFont(int styleNum, Font font)</autodoc>
        <paramlist>
          <param name="styleNum" type="int" default=""/>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="StyleSetFontAttr" type="" overloaded="no">
        <autodoc>StyleSetFontAttr(int styleNum, int size, String faceName, bool bold, 
    bool italic, bool underline)</autodoc>
        <paramlist>
          <param name="styleNum" type="int" default=""/>
          <param name="size" type="int" default=""/>
          <param name="faceName" type="String" default=""/>
          <param name="bold" type="bool" default=""/>
          <param name="italic" type="bool" default=""/>
          <param name="underline" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="CmdKeyExecute" type="" overloaded="no">
        <autodoc>CmdKeyExecute(int cmd)</autodoc>
        <paramlist>
          <param name="cmd" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMargins" type="" overloaded="no">
        <autodoc>SetMargins(int left, int right)</autodoc>
        <paramlist>
          <param name="left" type="int" default=""/>
          <param name="right" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetSelection" type="" overloaded="no">
        <autodoc>GetSelection(int OUTPUT, int OUTPUT)</autodoc>
        <paramlist>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="PointFromPosition" type="Point" overloaded="no">
        <autodoc>PointFromPosition(int pos) -&gt; Point</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ScrollToLine" type="" overloaded="no">
        <autodoc>ScrollToLine(int line)</autodoc>
        <paramlist>
          <param name="line" type="int" default=""/>
        </paramlist>
      </method>
      <method name="ScrollToColumn" type="" overloaded="no">
        <autodoc>ScrollToColumn(int column)</autodoc>
        <paramlist>
          <param name="column" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SendMsg" type="long" overloaded="no">
        <autodoc>SendMsg(int msg, long wp=0, long lp=0) -&gt; long</autodoc>
        <paramlist>
          <param name="msg" type="int" default=""/>
          <param name="wp" type="long" default="0"/>
          <param name="lp" type="long" default="0"/>
        </paramlist>
      </method>
      <method name="SetVScrollBar" type="" overloaded="no">
        <autodoc>SetVScrollBar(wxScrollBar bar)</autodoc>
        <paramlist>
          <param name="bar" type="ScrollBar" default=""/>
        </paramlist>
      </method>
      <method name="SetHScrollBar" type="" overloaded="no">
        <autodoc>SetHScrollBar(wxScrollBar bar)</autodoc>
        <paramlist>
          <param name="bar" type="ScrollBar" default=""/>
        </paramlist>
      </method>
      <method name="GetLastKeydownProcessed" type="bool" overloaded="no">
        <autodoc>GetLastKeydownProcessed() -&gt; bool</autodoc>
      </method>
      <method name="SetLastKeydownProcessed" type="" overloaded="no">
        <autodoc>SetLastKeydownProcessed(bool val)</autodoc>
        <paramlist>
          <param name="val" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SaveFile" type="bool" overloaded="no">
        <autodoc>SaveFile(String filename) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadFile" type="bool" overloaded="no">
        <autodoc>LoadFile(String filename) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DoDragOver" type="wxDragResult" overloaded="no">
        <autodoc>DoDragOver(int x, int y, int def) -&gt; int</autodoc>
        <paramlist>
          <param name="x" type="int" default=""/>
          <param name="y" type="int" default=""/>
          <param name="def" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="DoDropText" type="bool" overloaded="no">
        <autodoc>DoDropText(long x, long y, String data) -&gt; bool</autodoc>
        <paramlist>
          <param name="x" type="long" default=""/>
          <param name="y" type="long" default=""/>
          <param name="data" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetUseAntiAliasing" type="" overloaded="no">
        <autodoc>SetUseAntiAliasing(bool useAA)</autodoc>
        <paramlist>
          <param name="useAA" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="GetUseAntiAliasing" type="bool" overloaded="no">
        <autodoc>GetUseAntiAliasing() -&gt; bool</autodoc>
      </method>
    </class>
    <class name="StyledTextEvent" oldname="wxStyledTextEvent" module="stc">
      <baseclass name="CommandEvent"/>
      <constructor name="StyledTextEvent" overloaded="no">
        <autodoc>__init__(wxEventType commandType=0, int id=0) -&gt; StyledTextEvent</autodoc>
        <paramlist>
          <param name="commandType" type="wxEventType" default="0"/>
          <param name="id" type="int" default="0"/>
        </paramlist>
      </constructor>
      <destructor name="~wxStyledTextEvent" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="SetPosition" type="" overloaded="no">
        <autodoc>SetPosition(int pos)</autodoc>
        <paramlist>
          <param name="pos" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetKey" type="" overloaded="no">
        <autodoc>SetKey(int k)</autodoc>
        <paramlist>
          <param name="k" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetModifiers" type="" overloaded="no">
        <autodoc>SetModifiers(int m)</autodoc>
        <paramlist>
          <param name="m" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetModificationType" type="" overloaded="no">
        <autodoc>SetModificationType(int t)</autodoc>
        <paramlist>
          <param name="t" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String t)</autodoc>
        <paramlist>
          <param name="t" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetLength" type="" overloaded="no">
        <autodoc>SetLength(int len)</autodoc>
        <paramlist>
          <param name="len" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLinesAdded" type="" overloaded="no">
        <autodoc>SetLinesAdded(int num)</autodoc>
        <paramlist>
          <param name="num" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLine" type="" overloaded="no">
        <autodoc>SetLine(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFoldLevelNow" type="" overloaded="no">
        <autodoc>SetFoldLevelNow(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetFoldLevelPrev" type="" overloaded="no">
        <autodoc>SetFoldLevelPrev(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMargin" type="" overloaded="no">
        <autodoc>SetMargin(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetMessage" type="" overloaded="no">
        <autodoc>SetMessage(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWParam" type="" overloaded="no">
        <autodoc>SetWParam(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetLParam" type="" overloaded="no">
        <autodoc>SetLParam(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetListType" type="" overloaded="no">
        <autodoc>SetListType(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetX" type="" overloaded="no">
        <autodoc>SetX(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetY" type="" overloaded="no">
        <autodoc>SetY(int val)</autodoc>
        <paramlist>
          <param name="val" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetDragText" type="" overloaded="no">
        <autodoc>SetDragText(String val)</autodoc>
        <paramlist>
          <param name="val" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetDragAllowMove" type="" overloaded="no">
        <autodoc>SetDragAllowMove(bool val)</autodoc>
        <paramlist>
          <param name="val" type="bool" default=""/>
        </paramlist>
      </method>
      <method name="SetDragResult" type="" overloaded="no">
        <autodoc>SetDragResult(int val)</autodoc>
        <paramlist>
          <param name="val" type="wxDragResult" default=""/>
        </paramlist>
      </method>
      <method name="GetPosition" type="int" overloaded="no">
        <autodoc>GetPosition() -&gt; int</autodoc>
      </method>
      <method name="GetKey" type="int" overloaded="no">
        <autodoc>GetKey() -&gt; int</autodoc>
      </method>
      <method name="GetModifiers" type="int" overloaded="no">
        <autodoc>GetModifiers() -&gt; int</autodoc>
      </method>
      <method name="GetModificationType" type="int" overloaded="no">
        <autodoc>GetModificationType() -&gt; int</autodoc>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="GetLength" type="int" overloaded="no">
        <autodoc>GetLength() -&gt; int</autodoc>
      </method>
      <method name="GetLinesAdded" type="int" overloaded="no">
        <autodoc>GetLinesAdded() -&gt; int</autodoc>
      </method>
      <method name="GetLine" type="int" overloaded="no">
        <autodoc>GetLine() -&gt; int</autodoc>
      </method>
      <method name="GetFoldLevelNow" type="int" overloaded="no">
        <autodoc>GetFoldLevelNow() -&gt; int</autodoc>
      </method>
      <method name="GetFoldLevelPrev" type="int" overloaded="no">
        <autodoc>GetFoldLevelPrev() -&gt; int</autodoc>
      </method>
      <method name="GetMargin" type="int" overloaded="no">
        <autodoc>GetMargin() -&gt; int</autodoc>
      </method>
      <method name="GetMessage" type="int" overloaded="no">
        <autodoc>GetMessage() -&gt; int</autodoc>
      </method>
      <method name="GetWParam" type="int" overloaded="no">
        <autodoc>GetWParam() -&gt; int</autodoc>
      </method>
      <method name="GetLParam" type="int" overloaded="no">
        <autodoc>GetLParam() -&gt; int</autodoc>
      </method>
      <method name="GetListType" type="int" overloaded="no">
        <autodoc>GetListType() -&gt; int</autodoc>
      </method>
      <method name="GetX" type="int" overloaded="no">
        <autodoc>GetX() -&gt; int</autodoc>
      </method>
      <method name="GetY" type="int" overloaded="no">
        <autodoc>GetY() -&gt; int</autodoc>
      </method>
      <method name="GetDragText" type="String" overloaded="no">
        <autodoc>GetDragText() -&gt; String</autodoc>
      </method>
      <method name="GetDragAllowMove" type="bool" overloaded="no">
        <autodoc>GetDragAllowMove() -&gt; bool</autodoc>
      </method>
      <method name="GetDragResult" type="wxDragResult" overloaded="no">
        <autodoc>GetDragResult() -&gt; int</autodoc>
      </method>
      <method name="GetShift" type="bool" overloaded="no">
        <autodoc>GetShift() -&gt; bool</autodoc>
      </method>
      <method name="GetControl" type="bool" overloaded="no">
        <autodoc>GetControl() -&gt; bool</autodoc>
      </method>
      <method name="GetAlt" type="bool" overloaded="no">
        <autodoc>GetAlt() -&gt; bool</autodoc>
      </method>
      <method name="Clone" type="Event" overloaded="no">
        <autodoc>Clone() -&gt; Event</autodoc>
      </method>
    </class>
    <pythoncode>
EVT_STC_CHANGE = wx.PyEventBinder( wxEVT_STC_CHANGE, 1 )
EVT_STC_STYLENEEDED = wx.PyEventBinder( wxEVT_STC_STYLENEEDED, 1 )
EVT_STC_CHARADDED = wx.PyEventBinder( wxEVT_STC_CHARADDED, 1 )
EVT_STC_SAVEPOINTREACHED = wx.PyEventBinder( wxEVT_STC_SAVEPOINTREACHED, 1 )
EVT_STC_SAVEPOINTLEFT = wx.PyEventBinder( wxEVT_STC_SAVEPOINTLEFT, 1 )
EVT_STC_ROMODIFYATTEMPT = wx.PyEventBinder( wxEVT_STC_ROMODIFYATTEMPT, 1 )
EVT_STC_KEY = wx.PyEventBinder( wxEVT_STC_KEY, 1 )
EVT_STC_DOUBLECLICK = wx.PyEventBinder( wxEVT_STC_DOUBLECLICK, 1 )
EVT_STC_UPDATEUI = wx.PyEventBinder( wxEVT_STC_UPDATEUI, 1 )
EVT_STC_MODIFIED = wx.PyEventBinder( wxEVT_STC_MODIFIED, 1 )
EVT_STC_MACRORECORD = wx.PyEventBinder( wxEVT_STC_MACRORECORD, 1 )
EVT_STC_MARGINCLICK = wx.PyEventBinder( wxEVT_STC_MARGINCLICK, 1 )
EVT_STC_NEEDSHOWN = wx.PyEventBinder( wxEVT_STC_NEEDSHOWN, 1 )
EVT_STC_POSCHANGED = wx.PyEventBinder( wxEVT_STC_POSCHANGED, 1 )
EVT_STC_PAINTED = wx.PyEventBinder( wxEVT_STC_PAINTED, 1 )
EVT_STC_USERLISTSELECTION = wx.PyEventBinder( wxEVT_STC_USERLISTSELECTION, 1 )
EVT_STC_URIDROPPED = wx.PyEventBinder( wxEVT_STC_URIDROPPED, 1 )
EVT_STC_DWELLSTART = wx.PyEventBinder( wxEVT_STC_DWELLSTART, 1 )
EVT_STC_DWELLEND = wx.PyEventBinder( wxEVT_STC_DWELLEND, 1 )
EVT_STC_START_DRAG = wx.PyEventBinder( wxEVT_STC_START_DRAG, 1 )
EVT_STC_DRAG_OVER = wx.PyEventBinder( wxEVT_STC_DRAG_OVER, 1 )
EVT_STC_DO_DROP = wx.PyEventBinder( wxEVT_STC_DO_DROP, 1 )
EVT_STC_ZOOM = wx.PyEventBinder( wxEVT_STC_ZOOM, 1 )
EVT_STC_HOTSPOT_CLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_CLICK, 1 )
EVT_STC_HOTSPOT_DCLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_DCLICK, 1 )
EVT_STC_CALLTIP_CLICK = wx.PyEventBinder( wxEVT_STC_CALLTIP_CLICK, 1 )
</pythoncode>
  </module>
  <module name="xrc">
    <import name="core"/>
    <pythoncode> wx = core </pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="XmlResource" oldname="wxXmlResource" module="xrc">
      <baseclass name="Object"/>
      <constructor name="XmlResource" overloaded="no">
        <autodoc>__init__(String filemask, int flags=XRC_USE_LOCALE) -&gt; XmlResource</autodoc>
        <paramlist>
          <param name="filemask" type="String" default=""/>
          <param name="flags" type="int" default="wxXRC_USE_LOCALE"/>
        </paramlist>
      </constructor>
      <constructor name="EmptyXmlResource" overloaded="no">
        <autodoc>EmptyXmlResource(int flags=XRC_USE_LOCALE) -&gt; XmlResource</autodoc>
        <paramlist>
          <param name="flags" type="int" default="wxXRC_USE_LOCALE"/>
        </paramlist>
      </constructor>
      <destructor name="~wxXmlResource" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Load" type="bool" overloaded="no">
        <autodoc>Load(String filemask) -&gt; bool</autodoc>
        <paramlist>
          <param name="filemask" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadFromString" type="bool" overloaded="no">
        <autodoc>LoadFromString(String data) -&gt; bool</autodoc>
        <paramlist>
          <param name="data" type="String" default=""/>
        </paramlist>
      </method>
      <method name="InitAllHandlers" type="" overloaded="no">
        <autodoc>InitAllHandlers()</autodoc>
      </method>
      <method name="AddHandler" type="" overloaded="no">
        <autodoc>AddHandler(XmlResourceHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="wxPyXmlResourceHandler" default=""/>
        </paramlist>
      </method>
      <method name="InsertHandler" type="" overloaded="no">
        <autodoc>InsertHandler(XmlResourceHandler handler)</autodoc>
        <paramlist>
          <param name="handler" type="wxPyXmlResourceHandler" default=""/>
        </paramlist>
      </method>
      <method name="ClearHandlers" type="" overloaded="no">
        <autodoc>ClearHandlers()</autodoc>
      </method>
      <staticmethod name="AddSubclassFactory" type="" overloaded="no">
        <autodoc>AddSubclassFactory(XmlSubclassFactory factory)</autodoc>
        <paramlist>
          <param name="factory" type="wxPyXmlSubclassFactory" default=""/>
        </paramlist>
      </staticmethod>
      <method name="LoadMenu" type="Menu" overloaded="no">
        <autodoc>LoadMenu(String name) -&gt; Menu</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadMenuBar" type="MenuBar" overloaded="no">
        <autodoc>LoadMenuBar(String name) -&gt; MenuBar</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadMenuBarOnFrame" type="MenuBar" overloaded="no">
        <autodoc>LoadMenuBarOnFrame(Window parent, String name) -&gt; MenuBar</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadToolBar" type="ToolBar" overloaded="no">
        <autodoc>LoadToolBar(Window parent, String name) -&gt; wxToolBar</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadDialog" type="Dialog" overloaded="no">
        <autodoc>LoadDialog(Window parent, String name) -&gt; wxDialog</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadOnDialog" type="bool" overloaded="no">
        <autodoc>LoadOnDialog(wxDialog dlg, Window parent, String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="dlg" type="Dialog" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadPanel" type="Panel" overloaded="no">
        <autodoc>LoadPanel(Window parent, String name) -&gt; wxPanel</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadOnPanel" type="bool" overloaded="no">
        <autodoc>LoadOnPanel(wxPanel panel, Window parent, String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="panel" type="Panel" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadFrame" type="Frame" overloaded="no">
        <autodoc>LoadFrame(Window parent, String name) -&gt; wxFrame</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadOnFrame" type="bool" overloaded="no">
        <autodoc>LoadOnFrame(wxFrame frame, Window parent, String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="frame" type="Frame" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadObject" type="Object" overloaded="no">
        <autodoc>LoadObject(Window parent, String name, String classname) -&gt; Object</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
          <param name="classname" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadOnObject" type="bool" overloaded="no">
        <autodoc>LoadOnObject(Object instance, Window parent, String name, String classname) -&gt; bool</autodoc>
        <paramlist>
          <param name="instance" type="Object" default=""/>
          <param name="parent" type="Window" default=""/>
          <param name="name" type="String" default=""/>
          <param name="classname" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadBitmap" type="Bitmap" overloaded="no">
        <autodoc>LoadBitmap(String name) -&gt; Bitmap</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="LoadIcon" type="Icon" overloaded="no">
        <autodoc>LoadIcon(String name) -&gt; Icon</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AttachUnknownControl" type="bool" overloaded="no">
        <autodoc>AttachUnknownControl(String name, Window control, Window parent=None) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="control" type="Window" default=""/>
          <param name="parent" type="Window" default="NULL"/>
        </paramlist>
      </method>
      <staticmethod name="GetXRCID" type="int" overloaded="no">
        <autodoc>GetXRCID(String str_id) -&gt; int</autodoc>
        <paramlist>
          <param name="str_id" type="String" default=""/>
        </paramlist>
      </staticmethod>
      <method name="GetVersion" type="long" overloaded="no">
        <autodoc>GetVersion() -&gt; long</autodoc>
      </method>
      <method name="CompareVersion" type="int" overloaded="no">
        <autodoc>CompareVersion(int major, int minor, int release, int revision) -&gt; int</autodoc>
        <paramlist>
          <param name="major" type="int" default=""/>
          <param name="minor" type="int" default=""/>
          <param name="release" type="int" default=""/>
          <param name="revision" type="int" default=""/>
        </paramlist>
      </method>
      <staticmethod name="Get" type="XmlResource" overloaded="no">
        <autodoc>Get() -&gt; XmlResource</autodoc>
      </staticmethod>
      <staticmethod name="Set" type="XmlResource" overloaded="no">
        <autodoc>Set(XmlResource res) -&gt; XmlResource</autodoc>
        <paramlist>
          <param name="res" type="XmlResource" default=""/>
        </paramlist>
      </staticmethod>
      <method name="GetFlags" type="int" overloaded="no">
        <autodoc>GetFlags() -&gt; int</autodoc>
      </method>
      <method name="SetFlags" type="" overloaded="no">
        <autodoc>SetFlags(int flags)</autodoc>
        <paramlist>
          <param name="flags" type="int" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
def XRCID(str_id):
    return XmlResource_GetXRCID(str_id)

def XRCCTRL(window, str_id, *ignoreargs):
    return window.FindWindowById(XRCID(str_id))
</pythoncode>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="XmlSubclassFactory" oldname="wxPyXmlSubclassFactory" module="xrc">
      <constructor name="wxPyXmlSubclassFactory" overloaded="no">
        <autodoc>__init__() -&gt; XmlSubclassFactory</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="XmlProperty" oldname="wxXmlProperty" module="xrc">
      <constructor name="XmlProperty" overloaded="no">
        <autodoc>__init__(String name=EmptyString, String value=EmptyString, 
    XmlProperty next=None) -&gt; XmlProperty</autodoc>
        <paramlist>
          <param name="name" type="String" default="wxPyEmptyString"/>
          <param name="value" type="String" default="wxPyEmptyString"/>
          <param name="next" type="XmlProperty" default="NULL"/>
        </paramlist>
      </constructor>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
      <method name="GetNext" type="XmlProperty" overloaded="no">
        <autodoc>GetNext() -&gt; XmlProperty</autodoc>
      </method>
      <method name="SetName" type="" overloaded="no">
        <autodoc>SetName(String name)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(String value)</autodoc>
        <paramlist>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetNext" type="" overloaded="no">
        <autodoc>SetNext(XmlProperty next)</autodoc>
        <paramlist>
          <param name="next" type="XmlProperty" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="XmlNode" oldname="wxXmlNode" module="xrc">
      <constructor name="XmlNode" overloaded="no">
        <autodoc>__init__(XmlNode parent=None, int type=0, String name=EmptyString, 
    String content=EmptyString, XmlProperty props=None, 
    XmlNode next=None) -&gt; XmlNode</autodoc>
        <paramlist>
          <param name="parent" type="XmlNode" default="NULL"/>
          <param name="type" type="wxXmlNodeType" default="0"/>
          <param name="name" type="String" default="wxPyEmptyString"/>
          <param name="content" type="String" default="wxPyEmptyString"/>
          <param name="props" type="XmlProperty" default="NULL"/>
          <param name="next" type="XmlNode" default="NULL"/>
        </paramlist>
      </constructor>
      <constructor name="XmlNodeEasy" overloaded="no">
        <autodoc>XmlNodeEasy(int type, String name, String content=EmptyString) -&gt; XmlNode</autodoc>
        <paramlist>
          <param name="type" type="wxXmlNodeType" default=""/>
          <param name="name" type="String" default=""/>
          <param name="content" type="String" default="wxPyEmptyString"/>
        </paramlist>
      </constructor>
      <destructor name="~wxXmlNode" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="AddChild" type="" overloaded="no">
        <autodoc>AddChild(XmlNode child)</autodoc>
        <paramlist>
          <param name="child" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="InsertChild" type="" overloaded="no">
        <autodoc>InsertChild(XmlNode child, XmlNode before_node)</autodoc>
        <paramlist>
          <param name="child" type="XmlNode" default=""/>
          <param name="before_node" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="RemoveChild" type="bool" overloaded="no">
        <autodoc>RemoveChild(XmlNode child) -&gt; bool</autodoc>
        <paramlist>
          <param name="child" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="AddProperty" type="" overloaded="no">
        <autodoc>AddProperty(XmlProperty prop)</autodoc>
        <paramlist>
          <param name="prop" type="XmlProperty" default=""/>
        </paramlist>
      </method>
      <method name="AddPropertyName" type="" overloaded="no">
        <autodoc>AddPropertyName(String name, String value)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="value" type="String" default=""/>
        </paramlist>
      </method>
      <method name="DeleteProperty" type="bool" overloaded="no">
        <autodoc>DeleteProperty(String name) -&gt; bool</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetType" type="wxXmlNodeType" overloaded="no">
        <autodoc>GetType() -&gt; int</autodoc>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="GetContent" type="String" overloaded="no">
        <autodoc>GetContent() -&gt; String</autodoc>
      </method>
      <method name="GetParent" type="XmlNode" overloaded="no">
        <autodoc>GetParent() -&gt; XmlNode</autodoc>
      </method>
      <method name="GetNext" type="XmlNode" overloaded="no">
        <autodoc>GetNext() -&gt; XmlNode</autodoc>
      </method>
      <method name="GetChildren" type="XmlNode" overloaded="no">
        <autodoc>GetChildren() -&gt; XmlNode</autodoc>
      </method>
      <method name="GetProperties" type="XmlProperty" overloaded="no">
        <autodoc>GetProperties() -&gt; XmlProperty</autodoc>
      </method>
      <method name="GetPropVal" type="String" overloaded="no">
        <autodoc>GetPropVal(String propName, String defaultVal) -&gt; String</autodoc>
        <paramlist>
          <param name="propName" type="String" default=""/>
          <param name="defaultVal" type="String" default=""/>
        </paramlist>
      </method>
      <method name="HasProp" type="bool" overloaded="no">
        <autodoc>HasProp(String propName) -&gt; bool</autodoc>
        <paramlist>
          <param name="propName" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetType" type="" overloaded="no">
        <autodoc>SetType(int type)</autodoc>
        <paramlist>
          <param name="type" type="wxXmlNodeType" default=""/>
        </paramlist>
      </method>
      <method name="SetName" type="" overloaded="no">
        <autodoc>SetName(String name)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetContent" type="" overloaded="no">
        <autodoc>SetContent(String con)</autodoc>
        <paramlist>
          <param name="con" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetParent" type="" overloaded="no">
        <autodoc>SetParent(XmlNode parent)</autodoc>
        <paramlist>
          <param name="parent" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="SetNext" type="" overloaded="no">
        <autodoc>SetNext(XmlNode next)</autodoc>
        <paramlist>
          <param name="next" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="SetChildren" type="" overloaded="no">
        <autodoc>SetChildren(XmlNode child)</autodoc>
        <paramlist>
          <param name="child" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="SetProperties" type="" overloaded="no">
        <autodoc>SetProperties(XmlProperty prop)</autodoc>
        <paramlist>
          <param name="prop" type="XmlProperty" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="XmlDocument" oldname="wxXmlDocument" module="xrc">
      <baseclass name="Object"/>
      <constructor name="XmlDocument" overloaded="no">
        <autodoc>__init__(String filename, String encoding=UTF8String) -&gt; XmlDocument</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="encoding" type="String" default="wxPyUTF8String"/>
        </paramlist>
      </constructor>
      <constructor name="XmlDocumentFromStream" overloaded="no">
        <autodoc>XmlDocumentFromStream(InputStream stream, String encoding=UTF8String) -&gt; XmlDocument</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
          <param name="encoding" type="String" default="wxPyUTF8String"/>
        </paramlist>
      </constructor>
      <constructor name="EmptyXmlDocument" overloaded="no">
        <autodoc>EmptyXmlDocument() -&gt; XmlDocument</autodoc>
      </constructor>
      <destructor name="~wxXmlDocument" overloaded="no">
        <autodoc>__del__()</autodoc>
      </destructor>
      <method name="Load" type="bool" overloaded="no">
        <autodoc>Load(String filename, String encoding=UTF8String) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
          <param name="encoding" type="String" default="wxPyUTF8String"/>
        </paramlist>
      </method>
      <method name="LoadFromStream" type="bool" overloaded="no">
        <autodoc>LoadFromStream(InputStream stream, String encoding=UTF8String) -&gt; bool</autodoc>
        <paramlist>
          <param name="stream" type="wxInputStream" default=""/>
          <param name="encoding" type="String" default="wxPyUTF8String"/>
        </paramlist>
      </method>
      <method name="Save" type="bool" overloaded="no">
        <autodoc>Save(String filename) -&gt; bool</autodoc>
        <paramlist>
          <param name="filename" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SaveToStream" type="bool" overloaded="no">
        <autodoc>SaveToStream(OutputStream stream) -&gt; bool</autodoc>
        <paramlist>
          <param name="stream" type="OutputStream" default=""/>
        </paramlist>
      </method>
      <method name="IsOk" type="bool" overloaded="no">
        <autodoc>IsOk() -&gt; bool</autodoc>
      </method>
      <method name="GetRoot" type="XmlNode" overloaded="no">
        <autodoc>GetRoot() -&gt; XmlNode</autodoc>
      </method>
      <method name="GetVersion" type="String" overloaded="no">
        <autodoc>GetVersion() -&gt; String</autodoc>
      </method>
      <method name="GetFileEncoding" type="String" overloaded="no">
        <autodoc>GetFileEncoding() -&gt; String</autodoc>
      </method>
      <method name="SetRoot" type="" overloaded="no">
        <autodoc>SetRoot(XmlNode node)</autodoc>
        <paramlist>
          <param name="node" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="SetVersion" type="" overloaded="no">
        <autodoc>SetVersion(String version)</autodoc>
        <paramlist>
          <param name="version" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetFileEncoding" type="" overloaded="no">
        <autodoc>SetFileEncoding(String encoding)</autodoc>
        <paramlist>
          <param name="encoding" type="String" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
#---------------------------------------------------------------------------
</pythoncode>
    <class name="XmlResourceHandler" oldname="wxPyXmlResourceHandler" module="xrc">
      <baseclass name="Object"/>
      <constructor name="wxPyXmlResourceHandler" overloaded="no">
        <autodoc>__init__() -&gt; XmlResourceHandler</autodoc>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="CreateResource" type="Object" overloaded="no">
        <autodoc>CreateResource(XmlNode node, Object parent, Object instance) -&gt; Object</autodoc>
        <paramlist>
          <param name="node" type="XmlNode" default=""/>
          <param name="parent" type="Object" default=""/>
          <param name="instance" type="Object" default=""/>
        </paramlist>
      </method>
      <method name="SetParentResource" type="" overloaded="no">
        <autodoc>SetParentResource(XmlResource res)</autodoc>
        <paramlist>
          <param name="res" type="XmlResource" default=""/>
        </paramlist>
      </method>
      <method name="GetResource" type="XmlResource" overloaded="no">
        <autodoc>GetResource() -&gt; XmlResource</autodoc>
      </method>
      <method name="GetNode" type="XmlNode" overloaded="no">
        <autodoc>GetNode() -&gt; XmlNode</autodoc>
      </method>
      <method name="GetClass" type="String" overloaded="no">
        <autodoc>GetClass() -&gt; String</autodoc>
      </method>
      <method name="GetParent" type="Object" overloaded="no">
        <autodoc>GetParent() -&gt; Object</autodoc>
      </method>
      <method name="GetInstance" type="Object" overloaded="no">
        <autodoc>GetInstance() -&gt; Object</autodoc>
      </method>
      <method name="GetParentAsWindow" type="Window" overloaded="no">
        <autodoc>GetParentAsWindow() -&gt; Window</autodoc>
      </method>
      <method name="GetInstanceAsWindow" type="Window" overloaded="no">
        <autodoc>GetInstanceAsWindow() -&gt; Window</autodoc>
      </method>
      <method name="IsOfClass" type="bool" overloaded="no">
        <autodoc>IsOfClass(XmlNode node, String classname) -&gt; bool</autodoc>
        <paramlist>
          <param name="node" type="XmlNode" default=""/>
          <param name="classname" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetNodeContent" type="String" overloaded="no">
        <autodoc>GetNodeContent(XmlNode node) -&gt; String</autodoc>
        <paramlist>
          <param name="node" type="XmlNode" default=""/>
        </paramlist>
      </method>
      <method name="HasParam" type="bool" overloaded="no">
        <autodoc>HasParam(String param) -&gt; bool</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetParamNode" type="XmlNode" overloaded="no">
        <autodoc>GetParamNode(String param) -&gt; XmlNode</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetParamValue" type="String" overloaded="no">
        <autodoc>GetParamValue(String param) -&gt; String</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AddStyle" type="" overloaded="no">
        <autodoc>AddStyle(String name, int value)</autodoc>
        <paramlist>
          <param name="name" type="String" default=""/>
          <param name="value" type="int" default=""/>
        </paramlist>
      </method>
      <method name="AddWindowStyles" type="" overloaded="no">
        <autodoc>AddWindowStyles()</autodoc>
      </method>
      <method name="GetStyle" type="int" overloaded="no">
        <autodoc>GetStyle(String param=StyleString, int defaults=0) -&gt; int</autodoc>
        <paramlist>
          <param name="param" type="String" default="wxPyStyleString"/>
          <param name="defaults" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText(String param, bool translate=True) -&gt; String</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
          <param name="translate" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetID" type="int" overloaded="no">
        <autodoc>GetID() -&gt; int</autodoc>
      </method>
      <method name="GetName" type="String" overloaded="no">
        <autodoc>GetName() -&gt; String</autodoc>
      </method>
      <method name="GetBool" type="bool" overloaded="no">
        <autodoc>GetBool(String param, bool defaultv=False) -&gt; bool</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
          <param name="defaultv" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="GetLong" type="long" overloaded="no">
        <autodoc>GetLong(String param, long defaultv=0) -&gt; long</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
          <param name="defaultv" type="long" default="0"/>
        </paramlist>
      </method>
      <method name="GetColour" type="Colour" overloaded="no">
        <autodoc>GetColour(String param) -&gt; Colour</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetSize" type="Size" overloaded="no">
        <autodoc>GetSize(String param=SizeString) -&gt; Size</autodoc>
        <paramlist>
          <param name="param" type="String" default="wxPySizeString"/>
        </paramlist>
      </method>
      <method name="GetPosition" type="Point" overloaded="no">
        <autodoc>GetPosition(String param=PosString) -&gt; Point</autodoc>
        <paramlist>
          <param name="param" type="String" default="wxPyPosString"/>
        </paramlist>
      </method>
      <method name="GetDimension" type="int" overloaded="no">
        <autodoc>GetDimension(String param, int defaultv=0) -&gt; int</autodoc>
        <paramlist>
          <param name="param" type="String" default=""/>
          <param name="defaultv" type="int" default="0"/>
        </paramlist>
      </method>
      <method name="GetBitmap" type="Bitmap" overloaded="no">
        <autodoc>GetBitmap(String param=BitmapString, wxArtClient defaultArtClient=wxART_OTHER, 
    Size size=DefaultSize) -&gt; Bitmap</autodoc>
        <paramlist>
          <param name="param" type="String" default="wxPyBitmapString"/>
          <param name="defaultArtClient" type="wxArtClient" default="wxART_OTHER"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
        </paramlist>
      </method>
      <method name="GetIcon" type="Icon" overloaded="no">
        <autodoc>GetIcon(String param=IconString, wxArtClient defaultArtClient=wxART_OTHER, 
    Size size=DefaultSize) -&gt; Icon</autodoc>
        <paramlist>
          <param name="param" type="String" default="wxPyIconString"/>
          <param name="defaultArtClient" type="wxArtClient" default="wxART_OTHER"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
        </paramlist>
      </method>
      <method name="GetFont" type="Font" overloaded="no">
        <autodoc>GetFont(String param=FontString) -&gt; Font</autodoc>
        <paramlist>
          <param name="param" type="String" default="wxPyFontString"/>
        </paramlist>
      </method>
      <method name="SetupWindow" type="" overloaded="no">
        <autodoc>SetupWindow(Window wnd)</autodoc>
        <paramlist>
          <param name="wnd" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="CreateChildren" type="" overloaded="no">
        <autodoc>CreateChildren(Object parent, bool this_hnd_only=False)</autodoc>
        <paramlist>
          <param name="parent" type="Object" default=""/>
          <param name="this_hnd_only" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="CreateChildrenPrivately" type="" overloaded="no">
        <autodoc>CreateChildrenPrivately(Object parent, XmlNode rootnode=None)</autodoc>
        <paramlist>
          <param name="parent" type="Object" default=""/>
          <param name="rootnode" type="XmlNode" default="NULL"/>
        </paramlist>
      </method>
      <method name="CreateResFromNode" type="Object" overloaded="no">
        <autodoc>CreateResFromNode(XmlNode node, Object parent, Object instance=None) -&gt; Object</autodoc>
        <paramlist>
          <param name="node" type="XmlNode" default=""/>
          <param name="parent" type="Object" default=""/>
          <param name="instance" type="Object" default="NULL"/>
        </paramlist>
      </method>
      <method name="GetCurFileSystem" type="FileSystem" overloaded="no">
        <autodoc>GetCurFileSystem() -&gt; FileSystem</autodoc>
      </method>
    </class>
    <pythoncode>#----------------------------------------------------------------------------
# The global was removed  in favor of static accessor functions.  This is for
# backwards compatibility:

TheXmlResource = XmlResource_Get()


#----------------------------------------------------------------------------
#  Create a factory for handling the subclass property of the object tag.


def _my_import(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod


class XmlSubclassFactory_Python(XmlSubclassFactory):
    def __init__(self):
        XmlSubclassFactory.__init__(self)

    def Create(self, className):
        assert className.find('.') != -1, "Module name must be specified!"
        mname = className[:className.rfind('.')]
        cname = className[className.rfind('.')+1:]
        module = _my_import(mname)
        klass = getattr(module, cname)
        inst = klass()
        return inst


XmlResource_AddSubclassFactory(XmlSubclassFactory_Python())

#----------------------------------------------------------------------------
</pythoncode>
  </module>
  <module name="gizmos">
    <import name="windows"/>
    <import name="controls"/>
    <pythoncode> wx = core </pythoncode>
    <class name="DynamicSashSplitEvent" oldname="wxDynamicSashSplitEvent" module="gizmos">
      <baseclass name="CommandEvent"/>
      <constructor name="DynamicSashSplitEvent" overloaded="no">
        <autodoc>__init__(Object target) -&gt; DynamicSashSplitEvent</autodoc>
        <paramlist>
          <param name="target" type="Object" default=""/>
        </paramlist>
      </constructor>
    </class>
    <class name="DynamicSashUnifyEvent" oldname="wxDynamicSashUnifyEvent" module="gizmos">
      <baseclass name="CommandEvent"/>
      <constructor name="DynamicSashUnifyEvent" overloaded="no">
        <autodoc>__init__(Object target) -&gt; DynamicSashUnifyEvent</autodoc>
        <paramlist>
          <param name="target" type="Object" default=""/>
        </paramlist>
      </constructor>
    </class>
    <class name="DynamicSashWindow" oldname="wxDynamicSashWindow" module="gizmos">
      <baseclass name="Window"/>
      <constructor name="DynamicSashWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER, 
    String name=DynamicSashNameStr) -&gt; DynamicSashWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER"/>
          <param name="name" type="String" default="wxPyDynamicSashNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreDynamicSashWindow" overloaded="no">
        <autodoc>PreDynamicSashWindow() -&gt; DynamicSashWindow</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER, 
    String name=DynamicSashNameStr) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxCLIP_CHILDREN|wxDS_MANAGE_SCROLLBARS|wxDS_DRAG_CORNER"/>
          <param name="name" type="String" default="wxPyDynamicSashNameStr"/>
        </paramlist>
      </method>
      <method name="GetHScrollBar" type="ScrollBar" overloaded="no">
        <autodoc>GetHScrollBar(Window child) -&gt; ScrollBar</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetVScrollBar" type="ScrollBar" overloaded="no">
        <autodoc>GetVScrollBar(Window child) -&gt; ScrollBar</autodoc>
        <paramlist>
          <param name="child" type="Window" default=""/>
        </paramlist>
      </method>
    </class>
    <pythoncode>
EVT_DYNAMIC_SASH_SPLIT = wx.PyEventBinder( wxEVT_DYNAMIC_SASH_SPLIT, 1 )
EVT_DYNAMIC_SASH_UNIFY = wx.PyEventBinder( wxEVT_DYNAMIC_SASH_UNIFY, 1 )
</pythoncode>
    <class name="EditableListBox" oldname="wxEditableListBox" module="gizmos">
      <baseclass name="Panel"/>
      <constructor name="EditableListBox" overloaded="no">
        <autodoc>__init__(Window parent, int id, String label, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxEL_ALLOW_NEW|wxEL_ALLOW_EDIT|wxEL_ALLOW_DELETE, 
    String name=EditableListBoxNameStr) -&gt; EditableListBox</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="label" type="String" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxEL_ALLOW_NEW|wxEL_ALLOW_EDIT|wxEL_ALLOW_DELETE"/>
          <param name="name" type="String" default="wxPyEditableListBoxNameStr"/>
        </paramlist>
      </constructor>
      <method name="SetStrings" type="" overloaded="no">
        <autodoc>SetStrings(wxArrayString strings)</autodoc>
        <paramlist>
          <param name="strings" type="wxArrayString" default=""/>
        </paramlist>
      </method>
      <method name="GetStrings" type="PyObject" overloaded="no">
        <autodoc>GetStrings() -&gt; PyObject</autodoc>
      </method>
      <method name="GetListCtrl" type="wxListCtrl" overloaded="no">
        <autodoc>GetListCtrl() -&gt; wxListCtrl</autodoc>
      </method>
      <method name="GetDelButton" type="BitmapButton" overloaded="no">
        <autodoc>GetDelButton() -&gt; BitmapButton</autodoc>
      </method>
      <method name="GetNewButton" type="BitmapButton" overloaded="no">
        <autodoc>GetNewButton() -&gt; BitmapButton</autodoc>
      </method>
      <method name="GetUpButton" type="BitmapButton" overloaded="no">
        <autodoc>GetUpButton() -&gt; BitmapButton</autodoc>
      </method>
      <method name="GetDownButton" type="BitmapButton" overloaded="no">
        <autodoc>GetDownButton() -&gt; BitmapButton</autodoc>
      </method>
      <method name="GetEditButton" type="BitmapButton" overloaded="no">
        <autodoc>GetEditButton() -&gt; BitmapButton</autodoc>
      </method>
    </class>
    <class name="RemotelyScrolledTreeCtrl" oldname="wxRemotelyScrolledTreeCtrl" module="gizmos">
      <baseclass name="TreeCtrl"/>
      <constructor name="RemotelyScrolledTreeCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, 
    long style=TR_HAS_BUTTONS) -&gt; RemotelyScrolledTreeCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default=""/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTR_HAS_BUTTONS"/>
        </paramlist>
      </constructor>
      <method name="HideVScrollbar" type="" overloaded="no">
        <autodoc>HideVScrollbar()</autodoc>
      </method>
      <method name="AdjustRemoteScrollbars" type="" overloaded="no">
        <autodoc>AdjustRemoteScrollbars()</autodoc>
      </method>
      <method name="GetScrolledWindow" type="ScrolledWindow" overloaded="no">
        <autodoc>GetScrolledWindow() -&gt; ScrolledWindow</autodoc>
      </method>
      <method name="ScrollToLine" type="" overloaded="no">
        <autodoc>ScrollToLine(int posHoriz, int posVert)</autodoc>
        <paramlist>
          <param name="posHoriz" type="int" default=""/>
          <param name="posVert" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetCompanionWindow" type="" overloaded="no">
        <autodoc>SetCompanionWindow(Window companion)</autodoc>
        <paramlist>
          <param name="companion" type="Window" default=""/>
        </paramlist>
      </method>
      <method name="GetCompanionWindow" type="Window" overloaded="no">
        <autodoc>GetCompanionWindow() -&gt; Window</autodoc>
      </method>
    </class>
    <class name="TreeCompanionWindow" oldname="wxPyTreeCompanionWindow" module="gizmos">
      <baseclass name="Window"/>
      <constructor name="wxPyTreeCompanionWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; TreeCompanionWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </constructor>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetTreeCtrl" type="RemotelyScrolledTreeCtrl" overloaded="no">
        <autodoc>GetTreeCtrl() -&gt; RemotelyScrolledTreeCtrl</autodoc>
      </method>
      <method name="SetTreeCtrl" type="" overloaded="no">
        <autodoc>SetTreeCtrl(RemotelyScrolledTreeCtrl treeCtrl)</autodoc>
        <paramlist>
          <param name="treeCtrl" type="RemotelyScrolledTreeCtrl" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="ThinSplitterWindow" oldname="wxThinSplitterWindow" module="gizmos">
      <baseclass name="SplitterWindow"/>
      <constructor name="ThinSplitterWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxSP_3D|wxCLIP_CHILDREN) -&gt; ThinSplitterWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxSP_3D|wxCLIP_CHILDREN"/>
        </paramlist>
      </constructor>
    </class>
    <class name="SplitterScrolledWindow" oldname="wxSplitterScrolledWindow" module="gizmos">
      <baseclass name="ScrolledWindow"/>
      <constructor name="SplitterScrolledWindow" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=0) -&gt; SplitterScrolledWindow</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="0"/>
        </paramlist>
      </constructor>
    </class>
    <class name="LEDNumberCtrl" oldname="wxLEDNumberCtrl" module="gizmos">
      <baseclass name="Control"/>
      <constructor name="LEDNumberCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxLED_ALIGN_LEFT|wxLED_DRAW_FADED) -&gt; LEDNumberCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLED_ALIGN_LEFT|wxLED_DRAW_FADED"/>
        </paramlist>
      </constructor>
      <constructor name="PreLEDNumberCtrl" overloaded="no">
        <autodoc>PreLEDNumberCtrl() -&gt; LEDNumberCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=wxLED_ALIGN_LEFT|wxLED_DRAW_FADED) -&gt; bool</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxLED_ALIGN_LEFT|wxLED_DRAW_FADED"/>
        </paramlist>
      </method>
      <method name="GetAlignment" type="wxLEDValueAlign" overloaded="no">
        <autodoc>GetAlignment() -&gt; int</autodoc>
      </method>
      <method name="GetDrawFaded" type="bool" overloaded="no">
        <autodoc>GetDrawFaded() -&gt; bool</autodoc>
      </method>
      <method name="GetValue" type="String" overloaded="no">
        <autodoc>GetValue() -&gt; String</autodoc>
      </method>
      <method name="SetAlignment" type="" overloaded="no">
        <autodoc>SetAlignment(int Alignment, bool Redraw=true)</autodoc>
        <paramlist>
          <param name="Alignment" type="wxLEDValueAlign" default=""/>
          <param name="Redraw" type="bool" default="true"/>
        </paramlist>
      </method>
      <method name="SetDrawFaded" type="" overloaded="no">
        <autodoc>SetDrawFaded(bool DrawFaded, bool Redraw=true)</autodoc>
        <paramlist>
          <param name="DrawFaded" type="bool" default=""/>
          <param name="Redraw" type="bool" default="true"/>
        </paramlist>
      </method>
      <method name="SetValue" type="" overloaded="no">
        <autodoc>SetValue(String Value, bool Redraw=true)</autodoc>
        <paramlist>
          <param name="Value" type="String" default=""/>
          <param name="Redraw" type="bool" default="true"/>
        </paramlist>
      </method>
    </class>
    <class name="TreeListColumnInfo" oldname="wxTreeListColumnInfo" module="gizmos">
      <baseclass name="Object"/>
      <constructor name="TreeListColumnInfo" overloaded="no">
        <autodoc>__init__(String text=EmptyString, int image=-1, size_t width=100, 
    int alignment=TL_ALIGN_LEFT) -&gt; TreeListColumnInfo</autodoc>
        <paramlist>
          <param name="text" type="String" default="wxPyEmptyString"/>
          <param name="image" type="int" default="-1"/>
          <param name="width" type="size_t" default="100"/>
          <param name="alignment" type="wxTreeListColumnAlign" default="wxTL_ALIGN_LEFT"/>
        </paramlist>
      </constructor>
      <method name="GetAlignment" type="wxTreeListColumnAlign" overloaded="no">
        <autodoc>GetAlignment() -&gt; int</autodoc>
      </method>
      <method name="GetText" type="String" overloaded="no">
        <autodoc>GetText() -&gt; String</autodoc>
      </method>
      <method name="GetImage" type="int" overloaded="no">
        <autodoc>GetImage() -&gt; int</autodoc>
      </method>
      <method name="GetSelectedImage" type="int" overloaded="no">
        <autodoc>GetSelectedImage() -&gt; int</autodoc>
      </method>
      <method name="GetWidth" type="size_t" overloaded="no">
        <autodoc>GetWidth() -&gt; size_t</autodoc>
      </method>
      <method name="SetAlignment" type="" overloaded="no">
        <autodoc>SetAlignment(int alignment)</autodoc>
        <paramlist>
          <param name="alignment" type="wxTreeListColumnAlign" default=""/>
        </paramlist>
      </method>
      <method name="SetText" type="" overloaded="no">
        <autodoc>SetText(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="SetImage" type="" overloaded="no">
        <autodoc>SetImage(int image)</autodoc>
        <paramlist>
          <param name="image" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetSelectedImage" type="" overloaded="no">
        <autodoc>SetSelectedImage(int image)</autodoc>
        <paramlist>
          <param name="image" type="int" default=""/>
        </paramlist>
      </method>
      <method name="SetWidth" type="" overloaded="no">
        <autodoc>SetWidth(size_t with)</autodoc>
        <paramlist>
          <param name="with" type="size_t" default=""/>
        </paramlist>
      </method>
    </class>
    <class name="TreeListCtrl" oldname="wxPyTreeListCtrl" module="gizmos">
      <baseclass name="Control"/>
      <constructor name="wxPyTreeListCtrl" overloaded="no">
        <autodoc>__init__(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeListCtrlNameStr) -&gt; TreeListCtrl</autodoc>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyTreeListCtrlNameStr"/>
        </paramlist>
      </constructor>
      <constructor name="PreTreeListCtrl" overloaded="no">
        <autodoc>PreTreeListCtrl() -&gt; TreeListCtrl</autodoc>
      </constructor>
      <method name="Create" type="bool" overloaded="no">
        <autodoc>Create(Window parent, int id=-1, Point pos=DefaultPosition, 
    Size size=DefaultSize, long style=TR_DEFAULT_STYLE, 
    Validator validator=DefaultValidator, 
    String name=TreeListCtrlNameStr) -&gt; bool</autodoc>
        <docstring>Do the 2nd phase and create the GUI control.</docstring>
        <paramlist>
          <param name="parent" type="Window" default=""/>
          <param name="id" type="int" default="-1"/>
          <param name="pos" type="Point" default="wxDefaultPosition"/>
          <param name="size" type="Size" default="wxDefaultSize"/>
          <param name="style" type="long" default="wxTR_DEFAULT_STYLE"/>
          <param name="validator" type="Validator" default="wxDefaultValidator"/>
          <param name="name" type="String" default="wxPyTreeListCtrlNameStr"/>
        </paramlist>
      </method>
      <method name="_setCallbackInfo" type="" overloaded="no">
        <autodoc>_setCallbackInfo(PyObject self, PyObject _class)</autodoc>
        <paramlist>
          <param name="self" type="PyObject" default=""/>
          <param name="_class" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="GetCount" type="size_t" overloaded="no">
        <autodoc>GetCount() -&gt; size_t</autodoc>
      </method>
      <method name="GetIndent" type="unsigned int" overloaded="no">
        <autodoc>GetIndent() -&gt; unsigned int</autodoc>
      </method>
      <method name="SetIndent" type="" overloaded="no">
        <autodoc>SetIndent(unsigned int indent)</autodoc>
        <paramlist>
          <param name="indent" type="unsigned int" default=""/>
        </paramlist>
      </method>
      <method name="GetSpacing" type="unsigned int" overloaded="no">
        <autodoc>GetSpacing() -&gt; unsigned int</autodoc>
      </method>
      <method name="SetSpacing" type="" overloaded="no">
        <autodoc>SetSpacing(unsigned int spacing)</autodoc>
        <paramlist>
          <param name="spacing" type="unsigned int" default=""/>
        </paramlist>
      </method>
      <method name="GetLineSpacing" type="unsigned int" overloaded="no">
        <autodoc>GetLineSpacing() -&gt; unsigned int</autodoc>
      </method>
      <method name="SetLineSpacing" type="" overloaded="no">
        <autodoc>SetLineSpacing(unsigned int spacing)</autodoc>
        <paramlist>
          <param name="spacing" type="unsigned int" default=""/>
        </paramlist>
      </method>
      <method name="GetImageList" type="ImageList" overloaded="no">
        <autodoc>GetImageList() -&gt; ImageList</autodoc>
      </method>
      <method name="GetStateImageList" type="ImageList" overloaded="no">
        <autodoc>GetStateImageList() -&gt; ImageList</autodoc>
      </method>
      <method name="GetButtonsImageList" type="ImageList" overloaded="no">
        <autodoc>GetButtonsImageList() -&gt; ImageList</autodoc>
      </method>
      <method name="SetImageList" type="" overloaded="no">
        <autodoc>SetImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="SetStateImageList" type="" overloaded="no">
        <autodoc>SetStateImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="SetButtonsImageList" type="" overloaded="no">
        <autodoc>SetButtonsImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="AssignImageList" type="" overloaded="no">
        <autodoc>AssignImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="AssignStateImageList" type="" overloaded="no">
        <autodoc>AssignStateImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="AssignButtonsImageList" type="" overloaded="no">
        <autodoc>AssignButtonsImageList(ImageList imageList)</autodoc>
        <paramlist>
          <param name="imageList" type="ImageList" default=""/>
        </paramlist>
      </method>
      <method name="AddColumn" type="" overloaded="no">
        <autodoc>AddColumn(String text)</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="AddColumnInfo" type="" overloaded="no">
        <autodoc>AddColumnInfo(TreeListColumnInfo col)</autodoc>
        <paramlist>
          <param name="col" type="TreeListColumnInfo" default=""/>
        </paramlist>
      </method>
      <method name="InsertColumn" type="" overloaded="no">
        <autodoc>InsertColumn(size_t before, String text)</autodoc>
        <paramlist>
          <param name="before" type="size_t" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="InsertColumnInfo" type="" overloaded="no">
        <autodoc>InsertColumnInfo(size_t before, TreeListColumnInfo col)</autodoc>
        <paramlist>
          <param name="before" type="size_t" default=""/>
          <param name="col" type="TreeListColumnInfo" default=""/>
        </paramlist>
      </method>
      <method name="RemoveColumn" type="" overloaded="no">
        <autodoc>RemoveColumn(size_t column)</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="GetColumnCount" type="size_t" overloaded="no">
        <autodoc>GetColumnCount() -&gt; size_t</autodoc>
      </method>
      <method name="SetColumnWidth" type="" overloaded="no">
        <autodoc>SetColumnWidth(size_t column, size_t width)</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
          <param name="width" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="GetColumnWidth" type="int" overloaded="no">
        <autodoc>GetColumnWidth(size_t column) -&gt; int</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetMainColumn" type="" overloaded="no">
        <autodoc>SetMainColumn(size_t column)</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="GetMainColumn" type="size_t" overloaded="no">
        <autodoc>GetMainColumn() -&gt; size_t</autodoc>
      </method>
      <method name="SetColumnText" type="" overloaded="no">
        <autodoc>SetColumnText(size_t column, String text)</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
          <param name="text" type="String" default=""/>
        </paramlist>
      </method>
      <method name="GetColumnText" type="String" overloaded="no">
        <autodoc>GetColumnText(size_t column) -&gt; String</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetColumn" type="" overloaded="no">
        <autodoc>SetColumn(size_t column, TreeListColumnInfo info)</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
          <param name="info" type="TreeListColumnInfo" default=""/>
        </paramlist>
      </method>
      <method name="GetColumn" type="TreeListColumnInfo" overloaded="no">
        <autodoc>GetColumn(size_t column) -&gt; TreeListColumnInfo</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetColumnAlignment" type="" overloaded="no">
        <autodoc>SetColumnAlignment(size_t column, int align)</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
          <param name="align" type="wxTreeListColumnAlign" default=""/>
        </paramlist>
      </method>
      <method name="GetColumnAlignment" type="wxTreeListColumnAlign" overloaded="no">
        <autodoc>GetColumnAlignment(size_t column) -&gt; int</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="SetColumnImage" type="" overloaded="no">
        <autodoc>SetColumnImage(size_t column, int image)</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
          <param name="image" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetColumnImage" type="int" overloaded="no">
        <autodoc>GetColumnImage(size_t column) -&gt; int</autodoc>
        <paramlist>
          <param name="column" type="size_t" default=""/>
        </paramlist>
      </method>
      <method name="GetItemText" type="String" overloaded="no">
        <autodoc>GetItemText(TreeItemId item, int column=-1) -&gt; String</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="column" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="GetItemImage" type="int" overloaded="no">
        <autodoc>GetItemImage(TreeItemId item, int column=-1, int which=TreeItemIcon_Normal) -&gt; int</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="column" type="int" default="-1"/>
          <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
        </paramlist>
      </method>
      <method name="SetItemText" type="" overloaded="no">
        <autodoc>SetItemText(TreeItemId item, String text, int column=-1)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
          <param name="column" type="int" default="-1"/>
        </paramlist>
      </method>
      <method name="SetItemImage" type="" overloaded="no">
        <autodoc>SetItemImage(TreeItemId item, int image, int column=-1, int which=TreeItemIcon_Normal)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="image" type="int" default=""/>
          <param name="column" type="int" default="-1"/>
          <param name="which" type="wxTreeItemIcon" default="wxTreeItemIcon_Normal"/>
        </paramlist>
      </method>
      <method name="GetItemData" type="TreeItemData" overloaded="no">
        <autodoc>GetItemData(TreeItemId item) -&gt; TreeItemData</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="SetItemData" type="" overloaded="no">
        <autodoc>SetItemData(TreeItemId item, TreeItemData data)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="data" type="TreeItemData" default=""/>
        </paramlist>
      </method>
      <method name="GetItemPyData" type="PyObject" overloaded="no">
        <autodoc>GetItemPyData(TreeItemId item) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="SetItemPyData" type="" overloaded="no">
        <autodoc>SetItemPyData(TreeItemId item, PyObject obj)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="obj" type="PyObject" default=""/>
        </paramlist>
      </method>
      <method name="SetItemHasChildren" type="" overloaded="no">
        <autodoc>SetItemHasChildren(TreeItemId item, bool has=True)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="has" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetItemBold" type="" overloaded="no">
        <autodoc>SetItemBold(TreeItemId item, bool bold=True)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="bold" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="SetItemTextColour" type="" overloaded="no">
        <autodoc>SetItemTextColour(TreeItemId item, Colour col)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetItemBackgroundColour" type="" overloaded="no">
        <autodoc>SetItemBackgroundColour(TreeItemId item, Colour col)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="col" type="Colour" default=""/>
        </paramlist>
      </method>
      <method name="SetItemFont" type="" overloaded="no">
        <autodoc>SetItemFont(TreeItemId item, Font font)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="font" type="Font" default=""/>
        </paramlist>
      </method>
      <method name="GetItemBold" type="bool" overloaded="no">
        <autodoc>GetItemBold(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemTextColour" type="Colour" overloaded="no">
        <autodoc>GetItemTextColour(TreeItemId item) -&gt; Colour</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemBackgroundColour" type="Colour" overloaded="no">
        <autodoc>GetItemBackgroundColour(TreeItemId item) -&gt; Colour</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemFont" type="Font" overloaded="no">
        <autodoc>GetItemFont(TreeItemId item) -&gt; Font</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="IsVisible" type="bool" overloaded="no">
        <autodoc>IsVisible(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="ItemHasChildren" type="bool" overloaded="no">
        <autodoc>ItemHasChildren(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="IsExpanded" type="bool" overloaded="no">
        <autodoc>IsExpanded(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="IsSelected" type="bool" overloaded="no">
        <autodoc>IsSelected(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="IsBold" type="bool" overloaded="no">
        <autodoc>IsBold(TreeItemId item) -&gt; bool</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetChildrenCount" type="size_t" overloaded="no">
        <autodoc>GetChildrenCount(TreeItemId item, bool recursively=True) -&gt; size_t</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="recursively" type="bool" default="True"/>
        </paramlist>
      </method>
      <method name="GetRootItem" type="TreeItemId" overloaded="no">
        <autodoc>GetRootItem() -&gt; TreeItemId</autodoc>
      </method>
      <method name="GetSelection" type="TreeItemId" overloaded="no">
        <autodoc>GetSelection() -&gt; TreeItemId</autodoc>
      </method>
      <method name="GetSelections" type="PyObject" overloaded="no">
        <autodoc>GetSelections() -&gt; PyObject</autodoc>
      </method>
      <method name="GetItemParent" type="TreeItemId" overloaded="no">
        <autodoc>GetItemParent(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstChild" type="PyObject" overloaded="no">
        <autodoc>GetFirstChild(TreeItemId item) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetNextChild" type="PyObject" overloaded="no">
        <autodoc>GetNextChild(TreeItemId item, long cookie) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="cookie" type="long" default=""/>
        </paramlist>
      </method>
      <method name="GetLastChild" type="TreeItemId" overloaded="no">
        <autodoc>GetLastChild(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetNextSibling" type="TreeItemId" overloaded="no">
        <autodoc>GetNextSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetPrevSibling" type="TreeItemId" overloaded="no">
        <autodoc>GetPrevSibling(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetFirstVisibleItem" type="TreeItemId" overloaded="no">
        <autodoc>GetFirstVisibleItem() -&gt; TreeItemId</autodoc>
      </method>
      <method name="GetNextVisible" type="TreeItemId" overloaded="no">
        <autodoc>GetNextVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetPrevVisible" type="TreeItemId" overloaded="no">
        <autodoc>GetPrevVisible(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetNext" type="TreeItemId" overloaded="no">
        <autodoc>GetNext(TreeItemId item) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="AddRoot" type="TreeItemId" overloaded="no">
        <autodoc>AddRoot(String text, int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="PrependItem" type="TreeItemId" overloaded="no">
        <autodoc>PrependItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="InsertItem" type="TreeItemId" overloaded="no">
        <autodoc>InsertItem(TreeItemId parent, TreeItemId idPrevious, String text, 
    int image=-1, int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="idPrevious" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="InsertItemBefore" type="TreeItemId" overloaded="no">
        <autodoc>InsertItemBefore(TreeItemId parent, size_t index, String text, int image=-1, 
    int selectedImage=-1, TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="index" type="size_t" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="AppendItem" type="TreeItemId" overloaded="no">
        <autodoc>AppendItem(TreeItemId parent, String text, int image=-1, int selectedImage=-1, 
    TreeItemData data=None) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="parent" type="TreeItemId" default=""/>
          <param name="text" type="String" default=""/>
          <param name="image" type="int" default="-1"/>
          <param name="selectedImage" type="int" default="-1"/>
          <param name="data" type="TreeItemData" default="NULL"/>
        </paramlist>
      </method>
      <method name="Delete" type="" overloaded="no">
        <autodoc>Delete(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="DeleteChildren" type="" overloaded="no">
        <autodoc>DeleteChildren(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="DeleteAllItems" type="" overloaded="no">
        <autodoc>DeleteAllItems()</autodoc>
      </method>
      <method name="Expand" type="" overloaded="no">
        <autodoc>Expand(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="ExpandAll" type="" overloaded="no">
        <autodoc>ExpandAll(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Collapse" type="" overloaded="no">
        <autodoc>Collapse(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="CollapseAndReset" type="" overloaded="no">
        <autodoc>CollapseAndReset(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Toggle" type="" overloaded="no">
        <autodoc>Toggle(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Unselect" type="" overloaded="no">
        <autodoc>Unselect()</autodoc>
      </method>
      <method name="UnselectAll" type="" overloaded="no">
        <autodoc>UnselectAll()</autodoc>
      </method>
      <method name="SelectItem" type="" overloaded="no">
        <autodoc>SelectItem(TreeItemId item, bool unselect_others=True, bool extended_select=False)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="unselect_others" type="bool" default="True"/>
          <param name="extended_select" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="EnsureVisible" type="" overloaded="no">
        <autodoc>EnsureVisible(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="ScrollTo" type="" overloaded="no">
        <autodoc>ScrollTo(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="HitTest" type="TreeItemId" overloaded="no">
        <autodoc>HitTest(Point point, int OUTPUT, int OUTPUT) -&gt; TreeItemId</autodoc>
        <paramlist>
          <param name="point" type="Point" default=""/>
          <param name="OUTPUT" type="int" default=""/>
          <param name="OUTPUT" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetBoundingRect" type="PyObject" overloaded="no">
        <autodoc>GetBoundingRect(TreeItemId item, bool textOnly=False) -&gt; PyObject</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="textOnly" type="bool" default="False"/>
        </paramlist>
      </method>
      <method name="EditLabel" type="" overloaded="no">
        <autodoc>EditLabel(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="Edit" type="" overloaded="no">
        <autodoc>Edit(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="SortChildren" type="" overloaded="no">
        <autodoc>SortChildren(TreeItemId item)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="GetItemSelectedImage" type="int" overloaded="no">
        <autodoc>GetItemSelectedImage(TreeItemId item) -&gt; int</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
        </paramlist>
      </method>
      <method name="SetItemSelectedImage" type="" overloaded="no">
        <autodoc>SetItemSelectedImage(TreeItemId item, int image)</autodoc>
        <paramlist>
          <param name="item" type="TreeItemId" default=""/>
          <param name="image" type="int" default=""/>
        </paramlist>
      </method>
      <method name="GetHeaderWindow" type="Window" overloaded="no">
        <autodoc>GetHeaderWindow() -&gt; Window</autodoc>
      </method>
      <method name="GetMainWindow" type="Window" overloaded="no">
        <autodoc>GetMainWindow() -&gt; Window</autodoc>
      </method>
    </class>
  </module>
</wxPython-metadata>
