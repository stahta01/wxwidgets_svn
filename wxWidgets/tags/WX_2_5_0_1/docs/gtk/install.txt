wxWindows 2.5 for GTK installation
----------------------------------

IMPORTANT NOTE:

  If you experience problems installing, please re-read these
  instructions and other related files (todo.txt, bugs.txt and
  osname.txt for your platform if it exists) carefully before
  mailing wxwin-users or the author. Preferably, try to fix the
  problem first and then send a patch to the author.

  When sending bug reports tell us what version of wxWindows you are
  using (including the beta) and what compiler on what system. One
  example: wxGTK 2.4.0, gcc 2.95.4, Redhat 6.2

* The simplest case
-------------------

If you compile wxWindows on Linux for the first time and don't like to read
install instructions just do (in the base dir):

> ./configure --with-gtk
> make
> su <type root password>
> make install
> ldconfig
> exit

Afterwards you can continue with

> make
> su <type root password>
> make install
> ldconfig
> exit

If you want to remove wxWindows on Unix you can do this:

> su <type root password>
> make uninstall
> ldconfig
> exit

* The GTK+ 2 case
-----------------

wxGTK has support for the new version 2.0.X of GTK+ since version 2.4.0.
This means that wxGTK apps can now make use Unicode as the underlying encoding
for all text operations. This is a very fundamental change and will need time
to stabilize, so be careful. Anyways, after installing a recent version of GTK+
2.0, do this

> ./configure --with-gtk --enable-gtk2 --enable-unicode
> make
> su <type root password>
> make install
> ldconfig
> exit

If you are adventurous, you can install the FcConfig 2.0 package
and the Pango library from CVS (or a very recent snapshot from
the upcoming 1.2 series) and set do "export GDK_USE_XFT=1" so
that the display as well as the printing code will use render
using the same FreeType code even for Far Eastern encodings.

Expect problems.

* The expert case
-----------------

If you want to do some more serious cross-platform programming with wxWindows,
such as for GTK and Motif, you can now build two complete libraries and use
them concurrently. For this end, you have to create a directory for each build
of wxWindows - you may also want to create different versions of wxWindows
and test them concurrently. Most typically, this would be a version configured
with --enable-debug and one without. Note, that only one build can
currently be installed, so you'd have to use local version of the library for
that purpose.

For building three versions (one GTK, one Motif and a debug version of the GTK
source) you'd do this:

md buildmotif
cd buildmotif
../configure --with-motif
make
cd ..

md buildgtk
cd buildgtk
../configure --with-gtk
make
cd ..

md buildgtkd
cd buildgtkd
../configure --with-gtk --enable-debug
make
cd ..

* The simplest errors
---------------------

For any configure errors: please look at config.log file which was generated
during configure run, it usually contains some useful information.

configure reports, that you don't have GTK 1.2 installed although you are
very sure you have. Well, you have installed it, but you also have another
version of the GTK installed, which you may need to remove including other
versions of glib (and its headers). Or maybe you installed it in non default
location and configure can't find it there, so please check that your PATH
variable includes the path to the correct gtk-config. Also check that your
LD_LIBRARY_PATH or equivalent variable contains the path to GTK+ libraries if
they were installed in a non default location.

You get errors from make: please use GNU make instead of the native make
program. Currently wxWindows can be built only with GNU make, BSD make and
Solaris make. Other versions might work or not (any which don't have VPATH
support definitely won't).

You get errors during compilation: The reason is that you probably have a
broken compiler.  GCC 2.8 and earlier versions and egcs are likely to cause
problems due to incomplete support for C++ and optimisation bugs.  Best to use
GCC 2.95 or later.

You get immediate segfault when starting any sample or application: This is
either due to having compiled the library with different flags or options than
your program - typically you might have the __WXDEBUG__ option set for the
library but not for your program - or due to using a compiler with optimisation
bugs.

Linker complains about missing PROIO_yy_flex_alloc and similar symbols: you
probably have an old version of flex, 2.5.4 is recommended.

* The simplest program
----------------------

Now create your super-application myfoo.cpp and compile anywhere with

g++ myfoo.cpp `wx-config --libs --cxxflags` -o myfoo

* General
---------

The Unix variants of wxWindows use GNU configure. If you have problems with
your make use GNU make instead.

If you have general problems with installation, read my homepage at

  http://wesley.informatik.uni-freiburg.de/~wxxt/

for newest information. If you still don't have any success, please send a bug
report to one of our mailing lists (see my homepage) INCLUDING A DESCRIPTION OF
YOUR SYSTEM AND YOUR PROBLEM, SUCH AS YOUR VERSION OF GTK, WXGTK, WHAT
DISTRIBUTION YOU USE AND WHAT ERROR WAS REPORTED. I know this has no effect,
but I tried...

* GUI libraries
---------------

wxWindows/GTK requires the GTK+ library to be installed on your system. It has
to be a stable version, preferably version 1.2.10 (at least 1.2.3 is required,
1.2.7 is strongly recommended).

You can get the newest version of the GTK+ from the GTK homepage at:

  http://www.gtk.org

We also mirror GTK+ at my ftp site. You'll find information about downloading
at my homepage.

* Additional libraries
----------------------

wxWindows/Gtk requires a thread library and X libraries known to work with
threads.  This is the case on all commercial Unix-Variants and all
Linux-Versions that are based on glibc 2 except RedHat 5.0 which is broken in
many aspects. As of writing this, virtually all Linux distributions have
correct glibc 2 support.

You can disable thread support by running

./configure --disable-threads
make
su <type root password>
make install
ldconfig
exit

* Building wxGTK on OS/2
------------------------

Please send comments and question about the OS/2 installation
to Andrea Venturoli <a.ventu@flashnet.it> and patches to
the wxWindows mailing list.

You'll need OS/2 Warp (4.00FP#6), X-Free86/2 (3.3.3 or newer),
GTK+ (1.2.5 or newer), emx (0.9d fix 1), flex (2.5.4), yacc (1.8),
korn shell (5.2.13), Autoconf (2.13),  GNU file utilities (3.6),
GNU text utilities (1.3), GNU shell utilites (1.12), m4 (1.4),
sed (2.05), grep (2.0), Awk (3.0.3), GNU Make (3.76.1).

Open an OS/2 prompt and switch to the directory above.
First set some global environment variables we need:

SET CXXFLAGS=-Zmtd -D__ST_MT_ERRNO__
SET CFLAGS=-Zmtd -D__ST_MT_ERRNO__
SET OSTYPE=OS2X
SET COMSPEC=sh

Notice you can choose whatever you want, if you don't like OS2X.

Now, run autoconf in the main directory and in the samples, demos
and utils subdirectory. This will generate the OS/2 specific
versions of the configure scripts. Now run
    configure --with-gtk
as described above.

If you have pthreads library installed, but have a gtk version
which does not yet support threading, you need to explicitly
disable threading by using the option --disable-threads.

Note that configure assumes your flex will generate files named
"lexyy.c", not "lex.yy.c". If you have a version which does
generate "lex.yy.c", you need to manually change the generated
makefile.

* Building wxGTK on SGI
-----------------------

Using the SGI native compilers, it is recommended that you
also set CFLAGS and CXXFLAGS before running configure. These
should be set to :

CFLAGS="-mips3 -n32"
CXXFLAGS="-mips3 -n32"

This is essential if you want to use the resultant binaries
on any other machine than the one it was compiled on. If you
have a 64bit machine (Octane) you should also do this to ensure
you don't accidently build the libraries as 64bit (which is
untested).

The SGI native compiler support has only been tested on Irix 6.5.

* Create your configuration
---------------------------

Usage:
    ./configure options

If you want to use system's C and C++ compiler,
set environment variables CC and CCC as

    % setenv CC cc
    % setenv CXX CC
    % ./configure [options]

to see all the options please use:

    ./configure --help

It is recommended to build wxWindows in another directory (maybe a
subdirectory of your wxWindows installation) as this allows you to
have multiple configurations (for example, debug and release or GTK
and Motif) simultaneously.


* General options
-----------------

Given below are the commands to change the default behaviour,
i.e. if it says "--disable-threads" it means that threads
are enabled by default.

Normally, you won't have to choose a toolkit, because when
you download wxGTK, it will default to --with-gtk etc. But
if you use all of our CVS repository you have to choose a
toolkit. You must do this by running configure with either of:

    --with-gtk              Use the GIMP ToolKit (GTK). Default.

    --with-motif            Use either Motif or Lesstif
                            Configure will look for both.

The following options handle the kind of library you want to build.

    --disable-threads       Compile without thread support.

    --disable-shared        Do not create shared libraries, but
                            build static libraries instead.

    --enable-monolithic     Build wxWindows as single library instead
                            of as several smaller libraries (which is
                            the default since wxWindows 2.5.0).

    --disable-optimise      Do not optimise the code. Can
                            sometimes be useful for debugging
                            and is required on some architectures
                            such as Sun with gcc 2.8.X which
                            would otherwise produce segvs.

    --enable-profile        Add profiling info to the object
                            files. Currently broken, I think.

    --enable-no_rtti        Enable compilation without creation of
                            C++ RTTI information in object files.
                            This will speed-up compilation and reduce
                            binary size.

    --enable-no_exceptions  Enable compilation without creation of
                            C++ exception information in object files.
                            This will speed-up compilation and reduce
                            binary size. Also fewer crashes during the
                            actual compilation...

    --enable-no_deps        Enable compilation without creation of
                            dependency information.

    --enable-permissive     Enable compilation without checking for strict
                            ANSI conformance.  Useful to prevent the build
                            dying with errors as soon as you compile with
                            Solaris' ANSI-defying headers.

    --enable-mem_tracing    Add built-in memory tracing.

    --enable-dmalloc        Use the dmalloc memory debugger.
                            Read more at www.letters.com/dmalloc/

    --enable-debug_info     Add debug info to object files and
                            executables for use with debuggers
                            such as gdb (or its many frontends).

    --enable-debug_flag     Define __DEBUG__ and __WXDEBUG__ when
                            compiling. This enable wxWindows' very
                            useful internal debugging tricks (such
                            as automatically reporting illegal calls)
                            to work. Note that program and library
                            must be compiled with the same debug
                            options.

    --enable-debug          Same as --enable-debug_info and
                            --enable-debug_flag together. Unless you have
                            some very specific needs, you should use this
                            option instead of --enable-debug_info/flag ones
                            separately.

* Feature Options
-----------------

When producing an executable that is linked statically with wxGTK
you'll be surprised at its immense size. This can sometimes be
drastically reduced by removing features from wxWindows that
are not used in your program. The most relevant such features
are

    --with-odbc             Enables ODBC code. This is disabled
                            by default because iODBC is under the
                            L-GPL license which is less liberal than
                            wxWindows license.

    --without-libpng        Disables PNG image format code.

    --without-libjpeg       Disables JPEG image format code.

    --without-libtiff       Disables TIFF image format code.

    --without-expat         Disable XML classes based on Expat parser.

    --disable-pnm           Disables PNM image format code.

    --disable-gif           Disables GIF image format code.

    --disable-pcx           Disables PCX image format code.

    --disable-iff           Disables IFF image format code.

    --disable-resources     Disables the use of *.wxr type resources.

    --disable-threads       Disables threads. Will also disable sockets.

    --disable-sockets       Disables sockets.

    --disable-dnd           Disables Drag'n'Drop.

    --disable-clipboard     Disables Clipboard.

    --disable-serial        Disables object instance serialisation.

    --disable-streams       Disables the wxStream classes.

    --disable-file          Disables the wxFile class.

    --disable-textfile      Disables the wxTextFile class.

    --disable-intl          Disables the internationalisation.

    --disable-validators    Disables validators.

    --disable-accel         Disables accelerators support.

Apart from disabling certain features you can very often "strip"
the program of its debugging information resulting in a significant
reduction in size.

Please see the output of "./configure --help" for comprehensive list
of all configurable options.


* Compiling
-----------

The following must be done in the base directory (e.g. ~/wxGTK
or ~/wxWin or whatever)

Now the makefiles are created (by configure) and you can compile
the library by typing:

    make

make yourself some coffee, as it will take some time. On an old
386SX possibly two weeks. During compilation, you'll get a few
warning messages depending in your compiler.

If you want to be more selective, you can change into a specific
directory and type "make" there.

Then you may install the library and its header files under
/usr/local/include/wx and /usr/local/lib respectively. You
have to log in as root (i.e. run "su" and enter the root
password) and type

        make install

You can remove any traces of wxWindows by typing

        make uninstall

If you want to save disk space by removing unnecessary
object-files:

make clean

in the various directories will do the work for you.

* Creating a new Project
--------------------------

1) The first way uses the installed libraries and header files
automatically using wx-config

g++ myfoo.cpp `wx-config --cxxflags --libs` -o myfoo

Using this way, a make file for the minimal sample would look
like this

CC = gcc

minimal: minimal.o
	$(CC) -o minimal minimal.o `wx-config --libs`

minimal.o: minimal.cpp mondrian.xpm
	$(CC) `wx-config --cxxflags` -c minimal.cpp -o minimal.o

clean:
	rm -f *.o minimal

This is certain to become the standard way unless we decide
to stick to tmake.

If your application uses only some of wxWindows libraries, you can
specify required libraries when running wx-config. For example,
`wx-config --libs=html,core` will only output link command to link
with libraries required by core GUI classes and wxHTML classes. See
the manual for more information on the libraries.

2) The other way creates a project within the source code
directories of wxWindows. For this endeavour, you'll need
GNU autoconf version 2.14 and add an entry to your Makefile.in
to the bottom of the configure.in script and run autoconf
and configure before you can type make.

----------------------

In the hope that it will be useful,

        Robert Roebling

