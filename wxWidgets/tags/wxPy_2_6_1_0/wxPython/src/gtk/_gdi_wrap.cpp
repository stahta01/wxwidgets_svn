/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#define SWIGINTERN static 
#endif

#ifndef SWIGINTERNSHORT
#ifdef __cplusplus
#define SWIGINTERNSHORT static inline 
#else /* C case */
#define SWIGINTERNSHORT static 
#endif /* __cplusplus */
#endif


/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)


/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  char buf[100];
  unsigned long x = (unsigned long)v->ptr;
  if (x == 0)
    strcpy(buf, "0");
  else
    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
  return PyString_FromString(buf);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  char buf[100];
  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
  return PyString_FromString(buf);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : (i > j) ? 1 : 0;
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_GetType() {
  static char PySwigObject_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static int type_init = 0;  
  static PyTypeObject PySwigObject_Type;

  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigObject_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigObject_Type = tmp;
    type_init = 1;
  }

  return &PySwigObject_Type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
  if (self == NULL) return NULL;
  self->ptr = ptr;
  self->desc = desc;
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_GetType() {
  static char PySwigPacked_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static int type_init = 0;
  
  static PyTypeObject PySwigPacked_Type;
  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigPacked_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigPacked_Type = tmp;
    type_init = 1;
  }
  
      

  return &PySwigPacked_Type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    memcpy(pack, ptr, size);
    self->pack = pack;
    self->desc = desc;
    self->size = size;
    return (PyObject *) self;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	if (str)
          Py_DECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    sprintf(mesg, "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_type_info **
SWIG_Python_GetTypeListHandle() {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_type_info **) type_pointer;
}

/*
  Search for a swig_type_info structure
 */
SWIGRUNTIMEINLINE swig_type_info *
SWIG_Python_GetTypeList() {
  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
  return tlh ? *tlh : (swig_type_info*)0;
}

#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_wxPostScriptDC swig_types[0] 
#define  SWIGTYPE_p_wxBrush swig_types[1] 
#define  SWIGTYPE_p_wxColour swig_types[2] 
#define  SWIGTYPE_p_wxDC swig_types[3] 
#define  SWIGTYPE_p_wxMirrorDC swig_types[4] 
#define  SWIGTYPE_p_form_ops_t swig_types[5] 
#define  SWIGTYPE_p_wxDuplexMode swig_types[6] 
#define  SWIGTYPE_p_wxPyFontEnumerator swig_types[7] 
#define  SWIGTYPE_p_char swig_types[8] 
#define  SWIGTYPE_p_wxIconLocation swig_types[9] 
#define  SWIGTYPE_p_wxImage swig_types[10] 
#define  SWIGTYPE_p_wxMetaFileDC swig_types[11] 
#define  SWIGTYPE_p_wxMask swig_types[12] 
#define  SWIGTYPE_p_wxSize swig_types[13] 
#define  SWIGTYPE_p_wxFont swig_types[14] 
#define  SWIGTYPE_p_wxWindow swig_types[15] 
#define  SWIGTYPE_p_double swig_types[16] 
#define  SWIGTYPE_p_wxMemoryDC swig_types[17] 
#define  SWIGTYPE_p_wxFontMapper swig_types[18] 
#define  SWIGTYPE_p_wxEffects swig_types[19] 
#define  SWIGTYPE_p_wxNativeEncodingInfo swig_types[20] 
#define  SWIGTYPE_p_wxPalette swig_types[21] 
#define  SWIGTYPE_p_wxBitmap swig_types[22] 
#define  SWIGTYPE_p_wxObject swig_types[23] 
#define  SWIGTYPE_p_wxRegionIterator swig_types[24] 
#define  SWIGTYPE_p_wxRect swig_types[25] 
#define  SWIGTYPE_p_wxPaperSize swig_types[26] 
#define  SWIGTYPE_p_wxString swig_types[27] 
#define  SWIGTYPE_unsigned_int swig_types[28] 
#define  SWIGTYPE_p_unsigned_int swig_types[29] 
#define  SWIGTYPE_p_wxPrinterDC swig_types[30] 
#define  SWIGTYPE_p_wxIconBundle swig_types[31] 
#define  SWIGTYPE_p_wxPoint swig_types[32] 
#define  SWIGTYPE_p_wxDash swig_types[33] 
#define  SWIGTYPE_p_wxScreenDC swig_types[34] 
#define  SWIGTYPE_p_wxCursor swig_types[35] 
#define  SWIGTYPE_p_wxClientDC swig_types[36] 
#define  SWIGTYPE_p_wxBufferedDC swig_types[37] 
#define  SWIGTYPE_p_wxImageList swig_types[38] 
#define  SWIGTYPE_p_unsigned_char swig_types[39] 
#define  SWIGTYPE_p_wxGDIObject swig_types[40] 
#define  SWIGTYPE_p_wxIcon swig_types[41] 
#define  SWIGTYPE_p_wxLocale swig_types[42] 
#define  SWIGTYPE_ptrdiff_t swig_types[43] 
#define  SWIGTYPE_std__ptrdiff_t swig_types[44] 
#define  SWIGTYPE_p_wxRegion swig_types[45] 
#define  SWIGTYPE_p_wxConfigBase swig_types[46] 
#define  SWIGTYPE_p_wxLanguageInfo swig_types[47] 
#define  SWIGTYPE_p_wxWindowDC swig_types[48] 
#define  SWIGTYPE_p_wxPrintData swig_types[49] 
#define  SWIGTYPE_p_wxBrushList swig_types[50] 
#define  SWIGTYPE_p_wxFontList swig_types[51] 
#define  SWIGTYPE_p_wxPen swig_types[52] 
#define  SWIGTYPE_p_wxBufferedPaintDC swig_types[53] 
#define  SWIGTYPE_p_wxPaintDC swig_types[54] 
#define  SWIGTYPE_p_wxPenList swig_types[55] 
#define  SWIGTYPE_p_int swig_types[56] 
#define  SWIGTYPE_p_wxMetaFile swig_types[57] 
#define  SWIGTYPE_p_unsigned_long swig_types[58] 
#define  SWIGTYPE_p_wxNativeFontInfo swig_types[59] 
#define  SWIGTYPE_p_wxEncodingConverter swig_types[60] 
#define  SWIGTYPE_p_wxColourDatabase swig_types[61] 
static swig_type_info *swig_types[63];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _gdi_.so
  ------------------------------------------------*/
#define SWIG_init    init_gdi_

#define SWIG_name    "_gdi_"

#include "wx/wxPython/wxPython.h"
#include "wx/wxPython/pyclasses.h"
    

 static const wxString wxPyEmptyString(wxEmptyString); 

#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
SWIG_AsVal_long(PyObject* obj, long* val)
{
    if (PyNumber_Check(obj)) {
        if (val) *val = PyInt_AsLong(obj);
        return 1;
    }
    else {
        SWIG_type_error("number", obj);
    }
    return 0;
}


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNSHORT bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


SWIGINTERN int 
SWIG_AsVal_unsigned_SS_long(PyObject* obj, unsigned long* val)
{
    long v = 0;
    if (SWIG_AsVal_long(obj, &v) && v < 0) {
        SWIG_type_error("unsigned number", obj);
    }
    else if (val)
        *val = (unsigned long)v;
    return 1;
}


SWIGINTERNSHORT int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_char(PyObject *obj, unsigned char *val)
{ 
  const char* errmsg = val ? "unsigned char" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, UCHAR_MAX,errmsg)) {
      if (val) *val = (unsigned char)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNSHORT unsigned char
SWIG_As_unsigned_SS_char(PyObject* obj)
{
  unsigned char v;
  if (!SWIG_AsVal_unsigned_SS_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned char));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_char(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_char(obj, (unsigned char*)0);
}


SWIGINTERNSHORT unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}


  /*@/opt/swig/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/


  /*@/opt/swig/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/

static PyObject *wxColour_Get(wxColour *self){
            PyObject* rv = PyTuple_New(3);
            int red = -1;
            int green = -1;
            int blue = -1;
            if (self->Ok()) {
                red =   self->Red();
                green = self->Green();
                blue =  self->Blue();
            }
            PyTuple_SetItem(rv, 0, PyInt_FromLong(red));
            PyTuple_SetItem(rv, 1, PyInt_FromLong(green));
            PyTuple_SetItem(rv, 2, PyInt_FromLong(blue));
            return rv;
        }
static unsigned long wxColour_GetRGB(wxColour *self){
            return self->Red() | (self->Green() << 8) | (self->Blue() << 16);
        }

SWIGINTERNSHORT PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


  /*@/opt/swig/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


  static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;
    
    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {
        if (!PyTuple_Check(target)) {
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }            
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
  }


static PyObject *wxPen_GetDashes(wxPen *self){
            wxDash* dashes;
            int count = self->GetDashes(&dashes);
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            PyObject* retval = PyList_New(0);
            for (int x=0; x<count; x++) {
                PyObject* pyint = PyInt_FromLong(dashes[x]);
                PyList_Append(retval, pyint);
                Py_DECREF(pyint);
            }
            wxPyEndBlockThreads(blocked);
            return retval;
        }
static void wxPen__SetDashes(wxPen *self,PyObject *_self,PyObject *pyDashes){
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            int size = PyList_Size(pyDashes);
            wxDash* dashes = (wxDash*)byte_LIST_helper(pyDashes);

            // black magic warning!  The array of wxDashes needs to exist as
            // long as the pen does because wxPen does not copy the array.  So
            // stick a copy in a Python string object and attach it to _self,
            // and then call SetDashes with a pointer to that array.  Then
            // when the Python pen object is destroyed the array will be
            // cleaned up too.
            PyObject* strDashes = PyString_FromStringAndSize((char*)dashes, size*sizeof(wxDash));
            PyObject_SetAttrString(_self, "_dashes", strDashes);
                        
            self->SetDashes(size, (wxDash*)PyString_AS_STRING(strDashes));
            delete [] dashes;
            Py_DECREF(strDashes);
            wxPyEndBlockThreads(blocked);
        }
static bool wxPen___eq__(wxPen *self,wxPen const *other){ return other ? (*self == *other) : false; }
static bool wxPen___ne__(wxPen *self,wxPen const *other){ return other ? (*self != *other) : true;  }

#include <wx/image.h>
    
    static char** ConvertListOfStrings(PyObject* listOfStrings) {
        char**    cArray = NULL;
        int       count;

        if (!PyList_Check(listOfStrings)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
            return NULL;
        }
        count = PyList_Size(listOfStrings);
        cArray = new char*[count];

        for(int x=0; x<count; x++) {
            // TODO: Need some validation and error checking here
            cArray[x] = PyString_AsString(PyList_GET_ITEM(listOfStrings, x));
        }
        return cArray;
    }


static wxBitmap *new_wxBitmap(PyObject *listOfStrings){
            char**    cArray = NULL;
            wxBitmap* bmp;

            cArray = ConvertListOfStrings(listOfStrings);
            if (! cArray)
                return NULL;
            bmp = new wxBitmap(cArray);
            delete [] cArray;
            return bmp;
        }
static wxBitmap *new_wxBitmap(PyObject *bits,int width,int height,int depth=1){
            char* buf;
            int   length;
            PyString_AsStringAndSize(bits, &buf, &length);
            return new wxBitmap(buf, width, height, depth);
        }
static wxSize wxBitmap_GetSize(wxBitmap *self){
            wxSize size(self->GetWidth(), self->GetHeight());
            return size;
        }
static void wxBitmap_SetMaskColour(wxBitmap *self,wxColour const &colour){
            wxMask *mask = new wxMask(*self, colour);
            self->SetMask(mask);
        }
static void wxBitmap_SetSize(wxBitmap *self,wxSize const &size){
            self->SetWidth(size.x);
            self->SetHeight(size.y);
        }
static bool wxBitmap___eq__(wxBitmap *self,wxBitmap const *other){ return other ? (*self == *other) : false; }
static bool wxBitmap___ne__(wxBitmap *self,wxBitmap const *other){ return other ? (*self != *other) : true;  }
static wxMask *new_wxMask(wxBitmap const &bitmap,wxColour const &colour=wxNullColour){
            if ( !colour.Ok() )
                return new wxMask(bitmap, *wxBLACK);
            else
                return new wxMask(bitmap, colour);
        }

#include <wx/iconbndl.h>

static wxIcon *new_wxIcon(wxBitmap const &bmp){
            wxIcon* icon = new wxIcon();
            icon->CopyFromBitmap(bmp);
            return icon;
        }
static wxIcon *new_wxIcon(PyObject *listOfStrings){
            char**  cArray = NULL;
            wxIcon* icon;

            cArray = ConvertListOfStrings(listOfStrings);
            if (! cArray)
                return NULL;
            icon = new wxIcon(cArray);
            delete [] cArray;
            return icon;
        }
static wxIconLocation *new_wxIconLocation(wxString const *filename=&wxPyEmptyString,int num=0){



            return new wxIconLocation(*filename);

        }
static void wxIconLocation_SetIndex(wxIconLocation *self,int num){



            // do nothing

        }
static int wxIconLocation_GetIndex(wxIconLocation *self){



            return -1;

        }

SWIGINTERNSHORT long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

static wxCursor *new_wxCursor(wxString const &cursorName,long type,int hotSpotX=0,int hotSpotY=0){
#ifdef __WXGTK__
            wxImage img(cursorName, type);
            img.SetOption(wxIMAGE_OPTION_CUR_HOTSPOT_X, hotSpotX);
            img.SetOption(wxIMAGE_OPTION_CUR_HOTSPOT_Y, hotSpotY);
            return new wxCursor(img);
#else
            return new wxCursor(cursorName, type, hotSpotX, hotSpotY);
#endif
        }


static void wxRegionIterator_Next(wxRegionIterator *self){
            (*self) ++;
        }
static bool wxRegionIterator___nonzero__(wxRegionIterator *self){
            return self->operator bool();
        }

#include <wx/fontutil.h>
#include <wx/fontmap.h>
#include <wx/fontenum.h>

static wxString wxNativeFontInfo___str__(wxNativeFontInfo *self){
            return self->ToString();
        }

    wxNativeEncodingInfo* wxGetNativeFontEncoding(wxFontEncoding encoding) {
        static wxNativeEncodingInfo info;
        if ( wxGetNativeFontEncoding(encoding, &info) )
            return &info;
        else
            return NULL;
    }

static PyObject *wxFontMapper_GetAltForEncoding(wxFontMapper *self,wxFontEncoding encoding,wxString const &facename=wxPyEmptyString,bool interactive=true){
            wxFontEncoding alt_enc;
            if (self->GetAltForEncoding(encoding, &alt_enc, facename, interactive))
                return PyInt_FromLong(alt_enc);
            else {
                Py_INCREF(Py_None);
                return Py_None;
            }
        }
static wxFont *new_wxFont(wxString const &info){
                wxNativeFontInfo nfi;
                nfi.FromString(info);
                return new wxFont(nfi);
            }
static wxFont *new_wxFont(int pointSize,wxFontFamily family,int flags=wxFONTFLAG_DEFAULT,wxString const &face=wxPyEmptyString,wxFontEncoding encoding=wxFONTENCODING_DEFAULT){
                return wxFont::New(pointSize, family, flags, face, encoding);
            }
static wxFont *new_wxFont(wxSize const &pixelSize,int family,int style,int weight,bool underlined=false,wxString const &face=wxEmptyString,wxFontEncoding encoding=wxFONTENCODING_DEFAULT){
                return wxFontBase::New(pixelSize, family,
                                       style, weight, underlined,
                                       face, encoding);
            }
static wxFont *new_wxFont(wxSize const &pixelSize,wxFontFamily family,int flags=wxFONTFLAG_DEFAULT,wxString const &face=wxEmptyString,wxFontEncoding encoding=wxFONTENCODING_DEFAULT){
                return wxFontBase::New(pixelSize, family, flags, face, encoding);
            }
static bool wxFont___eq__(wxFont *self,wxFont const *other){ return other ? (*self == *other) : false; }
static bool wxFont___ne__(wxFont *self,wxFont const *other){ return other ? (*self != *other) : true;  }

class wxPyFontEnumerator : public wxFontEnumerator {
public:
    wxPyFontEnumerator() {}
    ~wxPyFontEnumerator() {}

    DEC_PYCALLBACK_BOOL_STRING(OnFacename);
    DEC_PYCALLBACK_BOOL_STRINGSTRING(OnFontEncoding);

    PYPRIVATE;
};

IMP_PYCALLBACK_BOOL_STRING(wxPyFontEnumerator, wxFontEnumerator, OnFacename);
IMP_PYCALLBACK_BOOL_STRINGSTRING(wxPyFontEnumerator, wxFontEnumerator, OnFontEncoding);


static PyObject *wxPyFontEnumerator_GetEncodings(wxPyFontEnumerator *self){
            wxArrayString* arr = self->GetEncodings();
            if (arr)
                return wxArrayString2PyList_helper(*arr);
            else
                return PyList_New(0);
        }
static PyObject *wxPyFontEnumerator_GetFacenames(wxPyFontEnumerator *self){
            wxArrayString* arr = self->GetFacenames();
            if (arr)
                return wxArrayString2PyList_helper(*arr);
            else
                return PyList_New(0);
        }

#include <locale.h>

static wxLocale *new_wxLocale(int language=-1,int flags=wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING){
            wxLocale* loc;
            if (language == -1)
                loc = new wxLocale();
            else
                loc = new wxLocale(language, flags);
            // Python before 2.4 needs to have LC_NUMERIC set to "C" in order
            // for the floating point conversions and such to work right.
#if PY_VERSION_HEX < 0x02040000
            setlocale(LC_NUMERIC, "C");
#endif
            return loc;
        }
static bool wxLocale_Init1(wxLocale *self,wxString const &szName,wxString const &szShort=wxPyEmptyString,wxString const &szLocale=wxPyEmptyString,bool bLoadDefault=true,bool bConvertEncoding=false){
            bool rc = self->Init(szName, szShort, szLocale, bLoadDefault, bConvertEncoding);
            // Python before 2.4 needs to have LC_NUMERIC set to "C" in order
            // for the floating point conversions and such to work right.
#if PY_VERSION_HEX < 0x02040000
            setlocale(LC_NUMERIC, "C");
#endif
            return rc;
        }
static bool wxLocale_Init2(wxLocale *self,int language=wxLANGUAGE_DEFAULT,int flags=wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING){
            bool rc = self->Init(language, flags);
            // Python before 2.4 needs to have LC_NUMERIC set to "C" in order
            // for the floating point conversions and such to work right.
#if PY_VERSION_HEX < 0x02040000
            setlocale(LC_NUMERIC, "C");
#endif
            return rc;
        }

#include "wx/wxPython/pydrawxxx.h"

static wxColour wxDC_GetPixel(wxDC *self,int x,int y){
            wxColour col;
            self->GetPixel(x, y, &col);
            return col;
        }
static wxColour wxDC_GetPixelPoint(wxDC *self,wxPoint const &pt){
            wxColour col;
            self->GetPixel(pt, &col);
            return col;
        }

SWIGINTERN int
SWIG_AsVal_double(PyObject *obj, double* val)
{
    if (PyNumber_Check(obj)) {
        if (val) *val = PyFloat_AsDouble(obj);
        return 1;
    }
    else {
        SWIG_type_error("number", obj);
    }
    return 0;
}


SWIGINTERNSHORT double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}

static wxRect wxDC_DrawImageLabel(wxDC *self,wxString const &text,wxBitmap const &image,wxRect const &rect,int alignment=wxALIGN_LEFT|wxALIGN_TOP,int indexAccel=-1){
            wxRect rv;
            self->DrawLabel(text, image, rect, alignment, indexAccel, &rv);
            return rv;
        }

static wxRect wxDC_GetClippingRect(wxDC *self){
            wxRect rect;
            self->GetClippingBox(rect);
            return rect;
        }
static wxArrayInt wxDC_GetPartialTextExtents(wxDC *self,wxString const &text){
            wxArrayInt widths;
            self->GetPartialTextExtents(text, widths);
            return widths;
        }

  /*@/opt/swig/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


static void wxDC_SetLogicalOriginPoint(wxDC *self,wxPoint const &point){
            self->SetLogicalOrigin(point.x, point.y);
        }
static void wxDC_SetDeviceOriginPoint(wxDC *self,wxPoint const &point){
            self->SetDeviceOrigin(point.x, point.y);
        }
static void wxDC_CalcBoundingBoxPoint(wxDC *self,wxPoint const &point){
            self->CalcBoundingBox(point.x, point.y);
        }
static PyObject *wxDC__DrawPointList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXPoint, pyCoords, pyPens, pyBrushes);
        }
static PyObject *wxDC__DrawLineList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXLine, pyCoords, pyPens, pyBrushes);
        }
static PyObject *wxDC__DrawRectangleList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXRectangle, pyCoords, pyPens, pyBrushes);
        }
static PyObject *wxDC__DrawEllipseList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXEllipse, pyCoords, pyPens, pyBrushes);
        }
static PyObject *wxDC__DrawPolygonList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXPolygon, pyCoords, pyPens, pyBrushes);
        }
static PyObject *wxDC__DrawTextList(wxDC *self,PyObject *textList,PyObject *pyPoints,PyObject *foregroundList,PyObject *backgroundList){
            return wxPyDrawTextList(*self, textList, pyPoints, foregroundList, backgroundList);
        }

static void wxDC_GetBoundingBox(wxDC* dc, int* x1, int* y1, int* x2, int* y2) {
    *x1 = dc->MinX();
    *y1 = dc->MinY();
    *x2 = dc->MaxX();
    *y2 = dc->MaxY();
}


#include <wx/dcbuffer.h>


#include <wx/dcps.h>


class wxMetaFile : public wxObject {
public:
    wxMetaFile(const wxString&)
        { wxPyRaiseNotImplemented(); }
};

class wxMetaFileDC : public wxClientDC {
public:
    wxMetaFileDC(const wxString&, int, int, const wxString&)
        { wxPyRaiseNotImplemented(); }
};



class  wxPrinterDC : public wxClientDC {
public:
    wxPrinterDC(const wxPrintData&)
        { wxPyRaiseNotImplemented(); }

};



static void wxColourDatabase_Append(wxColourDatabase *self,wxString const &name,int red,int green,int blue){
            self->AddColour(name, wxColour(red, green, blue));
        }

#include <wx/effects.h>

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_GDIObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_GDIObject",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxGDIObject *)new wxGDIObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxGDIObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GDIObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_GDIObject",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxGDIObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GDIObject_GetVisible(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GDIObject_GetVisible",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxGDIObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetVisible();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GDIObject_SetVisible(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "visible", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:GDIObject_SetVisible",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxGDIObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetVisible(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GDIObject_IsNull(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GDIObject_IsNull",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxGDIObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsNull();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GDIObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxGDIObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Colour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    byte arg1 = (byte) 0 ;
    byte arg2 = (byte) 0 ;
    byte arg3 = (byte) 0 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOO:new_Colour",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if (obj0) {
        {
            arg1 = (byte)(SWIG_As_unsigned_SS_char(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = (byte)(SWIG_As_unsigned_SS_char(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (byte)(SWIG_As_unsigned_SS_char(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColour *)new wxColour(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxColour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NamedColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxColour *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "colorName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_NamedColour",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColour *)new wxColour((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxColour, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_ColourRGB(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    unsigned long arg1 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "colRGB", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_ColourRGB",kwnames,&obj0)) goto fail;
    {
        arg1 = (unsigned long)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColour *)new wxColour(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxColour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Colour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Colour",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Red(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    byte result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Red",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (byte)(arg1)->Red();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Green(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    byte result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Green",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (byte)(arg1)->Green();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Blue(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    byte result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Blue",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (byte)(arg1)->Blue();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    byte arg2 ;
    byte arg3 ;
    byte arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Colour_Set",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (byte)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (byte)(SWIG_As_unsigned_SS_char(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (byte)(SWIG_As_unsigned_SS_char(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Set(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_SetRGB(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colRGB", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour_SetRGB",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Set(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_SetFromName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colourName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour_SetFromName",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->InitFromName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Colour_GetPixel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_GetPixel",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (long)((wxColour const *)arg1)->GetPixel();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    wxColour *arg2 = 0 ;
    bool result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxColour const *)arg1)->operator ==((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    wxColour *arg2 = 0 ;
    bool result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxColour const *)arg1)->operator !=((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxColour_Get(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_GetRGB(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_GetRGB",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (unsigned long)wxColour_GetRGB(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Colour_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxColour, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Palette(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    unsigned char *arg3 = (unsigned char *) 0 ;
    unsigned char *arg4 = (unsigned char *) 0 ;
    wxPalette *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "n",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:new_Palette",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_char, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_unsigned_char, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_unsigned_char, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPalette *)new wxPalette(arg1,(unsigned char const *)arg2,(unsigned char const *)arg3,(unsigned char const *)arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPalette, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Palette(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Palette",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPalette, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Palette_GetPixel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    byte arg2 ;
    byte arg3 ;
    byte arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Palette_GetPixel",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPalette, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (byte)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (byte)(SWIG_As_unsigned_SS_char(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (byte)(SWIG_As_unsigned_SS_char(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetPixel(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Palette_GetRGB(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    int arg2 ;
    byte *arg3 = (byte *) 0 ;
    byte *arg4 = (byte *) 0 ;
    byte *arg5 = (byte *) 0 ;
    bool result;
    byte temp3 ;
    int res3 = 0 ;
    byte temp4 ;
    int res4 = 0 ;
    byte temp5 ;
    int res5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pixel", NULL 
    };
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Palette_GetRGB",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPalette, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetRGB(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_unsigned_SS_char((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_unsigned_char, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_unsigned_SS_char((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_unsigned_char, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_unsigned_SS_char((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_unsigned_char, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Palette_GetColoursCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Palette_GetColoursCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPalette, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxPalette const *)arg1)->GetColoursCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Palette_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Palette_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPalette, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Palette_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPalette, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Pen(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = 0 ;
    int arg2 = (int) 1 ;
    int arg3 = (int) wxSOLID ;
    wxPen *result;
    wxColour temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "colour",(char *) "width",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_Pen",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxColour_helper(obj0, &arg1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPen *)new wxPen(*arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPen, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Pen(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Pen",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetCap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetCap",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetColour",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetJoin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetJoin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetJoin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetStyle",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetWidth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetCap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "cap_style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetCap",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetCap(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetColour",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetColour(*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetJoin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "join_style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetJoin",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetJoin(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "width", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetWidth",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWidth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetDashes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    wxDash *arg3 = (wxDash *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dashes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetDashes",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyList_Size(obj1);
        arg3 = (wxDash*)byte_LIST_helper(obj1);
        if (arg3 == NULL) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDashes(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_Pen_GetDashes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetDashes",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxPen_GetDashes(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen__SetDashes(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "_self",(char *) "pyDashes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Pen__SetDashes",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPen__SetDashes(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetDashCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetDashCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxPen const *)arg1)->GetDashCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    wxPen *arg2 = (wxPen *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxPen___eq__(arg1,(wxPen const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    wxPen *arg2 = (wxPen *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxPen___ne__(arg1,(wxPen const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Pen_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPen, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Brush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = 0 ;
    int arg2 = (int) wxSOLID ;
    wxBrush *result;
    wxColour temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "colour",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_Brush",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxColour_helper(obj0, &arg1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBrush *)new wxBrush((wxColour const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBrush, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BrushFromBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxBrush *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "stippleBitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_BrushFromBitmap",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBrush *)new wxBrush((wxBitmap const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBrush, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Brush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Brush",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_SetColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "col", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Brush_SetColour",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetColour((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_SetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Brush_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_SetStipple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxBitmap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "stipple", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Brush_SetStipple",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStipple((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_GetColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_GetColour",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxBrush const *)arg1)->GetColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_GetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_GetStyle",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxBrush const *)arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_GetStipple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_GetStipple",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)((wxBrush const *)arg1)->GetStipple();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmap, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_IsHatch(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_IsHatch",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxBrush const *)arg1)->IsHatch();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Brush_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBrush, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Bitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxBitmapType arg2 = (wxBitmapType) wxBITMAP_TYPE_ANY ;
    wxBitmap *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "name",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_Bitmap",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    if (obj1) {
        {
            arg2 = (wxBitmapType)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap((wxString const &)*arg1,(wxBitmapType )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmap, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_Bitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Bitmap",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EmptyBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 = (int) -1 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "width",(char *) "height",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_EmptyBitmap",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = 0 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_BitmapFromIcon",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxIcon");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap((wxIcon const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromImage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImage *arg1 = 0 ;
    int arg2 = (int) -1 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "image",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_BitmapFromImage",kwnames,&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImage, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxImage");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap((wxImage const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromXPMData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "listOfStrings", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_BitmapFromXPMData",kwnames,&obj0)) goto fail;
    arg1 = obj0;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new_wxBitmap(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromBits(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 = (int) 1 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "bits",(char *) "width",(char *) "height",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:new_BitmapFromBits",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = obj0;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new_wxBitmap(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetWidth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetHeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetHeight",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetDepth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxBitmap_GetSize(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_ConvertToImage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    SwigValueWrapper<wxImage > result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_ConvertToImage",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxBitmap const *)arg1)->ConvertToImage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxImage, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxMask *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetMask",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMask *)((wxBitmap const *)arg1)->GetMask();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMask, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxMask *arg2 = (wxMask *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetMask",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxMask, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMask(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetMaskColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetMaskColour",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxBitmap_SetMaskColour(arg1,(wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetSubBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxRect *arg2 = 0 ;
    SwigValueWrapper<wxBitmap > result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_GetSubBitmap",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxBitmap const *)arg1)->GetSubBitmap((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBitmap * resultptr;
        resultptr = new wxBitmap((wxBitmap &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxBitmap, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SaveFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxString *arg2 = 0 ;
    wxBitmapType arg3 ;
    wxPalette *arg4 = (wxPalette *) NULL ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "type",(char *) "palette", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Bitmap_SaveFile",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (wxBitmapType)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    if (obj3) {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxPalette, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SaveFile((wxString const &)*arg2,(wxBitmapType )arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Bitmap_LoadFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxString *arg2 = 0 ;
    wxBitmapType arg3 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Bitmap_LoadFile",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (wxBitmapType)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->LoadFile((wxString const &)*arg2,(wxBitmapType )arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Bitmap_GetPalette(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxPalette *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetPalette",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPalette *)((wxBitmap const *)arg1)->GetPalette();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPalette, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_CopyFromIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxIcon *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_CopyFromIcon",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxIcon");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->CopyFromIcon((wxIcon const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetHeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetHeight",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetHeight(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "width", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetWidth",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWidth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetDepth",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDepth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxSize *arg2 = 0 ;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "size", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetSize",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxBitmap_SetSize(arg1,(wxSize const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxBitmap *arg2 = (wxBitmap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxBitmap___eq__(arg1,(wxBitmap const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxBitmap *arg2 = (wxBitmap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxBitmap___ne__(arg1,(wxBitmap const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Bitmap_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBitmap, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Mask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxColour const &arg2_defvalue = wxNullColour ;
    wxColour *arg2 = (wxColour *) &arg2_defvalue ;
    wxMask *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "bitmap",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_Mask",kwnames,&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = &temp2;
            if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMask *)new_wxMask((wxBitmap const &)*arg1,(wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMask, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Mask_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMask, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Icon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxBitmapType arg2 ;
    int arg3 = (int) -1 ;
    int arg4 = (int) -1 ;
    wxIcon *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "name",(char *) "type",(char *) "desiredWidth",(char *) "desiredHeight", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_Icon",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = (wxBitmapType)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new wxIcon((wxString const &)*arg1,(wxBitmapType )arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIcon, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_Icon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Icon",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EmptyIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_EmptyIcon",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new wxIcon();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconFromLocation(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = 0 ;
    wxIcon *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "loc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconFromLocation",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconLocation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxIconLocation");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new wxIcon((wxIconLocation const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconFromBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxIcon *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "bmp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconFromBitmap",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new_wxIcon((wxBitmap const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconFromXPMData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    wxIcon *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "listOfStrings", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconFromXPMData",kwnames,&obj0)) goto fail;
    arg1 = obj0;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new_wxIcon(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_LoadFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    wxString *arg2 = 0 ;
    wxBitmapType arg3 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Icon_LoadFile",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (wxBitmapType)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->LoadFile((wxString const &)*arg2,(wxBitmapType )arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Icon_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_GetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_GetWidth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_GetHeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_GetHeight",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_GetDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_GetDepth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_SetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "w", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_SetWidth",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWidth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_SetHeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "h", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_SetHeight",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetHeight(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_SetDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "d", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_SetDepth",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDepth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_CopyFromBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    wxBitmap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_CopyFromBitmap",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CopyFromBitmap((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Icon_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxIcon, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IconLocation(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = (wxString *) &wxPyEmptyString ;
    int arg2 = (int) 0 ;
    wxIconLocation *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "filename",(char *) "num", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_IconLocation",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconLocation *)new_wxIconLocation((wxString const *)arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIconLocation, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_IconLocation(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_IconLocation",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_IsOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IconLocation_IsOk",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxIconLocation const *)arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_SetFileName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconLocation_SetFileName",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFileName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_IconLocation_GetFileName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IconLocation_GetFileName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxIconLocation const *)arg1)->GetFileName();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_SetIndex(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "num", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconLocation_SetIndex",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxIconLocation_SetIndex(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_GetIndex(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IconLocation_GetIndex",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxIconLocation_GetIndex(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IconLocation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxIconLocation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IconBundle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_IconBundle",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconBundle *)new wxIconBundle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIconBundle, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconBundleFromFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    long arg2 ;
    wxIconBundle *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "file",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_IconBundleFromFile",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconBundle *)new wxIconBundle((wxString const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIconBundle, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_IconBundleFromIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = 0 ;
    wxIconBundle *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconBundleFromIcon",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxIcon");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconBundle *)new wxIconBundle((wxIcon const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIconBundle, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IconBundle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_IconBundle",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconBundle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconBundle_AddIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    wxIcon *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconBundle_AddIcon",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconBundle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxIcon");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddIcon((wxIcon const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconBundle_AddIconFromFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    wxString *arg2 = 0 ;
    long arg3 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "file",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:IconBundle_AddIconFromFile",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconBundle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (long)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddIcon((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_IconBundle_GetIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    wxSize *arg2 = 0 ;
    wxIcon *result;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "size", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconBundle_GetIcon",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIconBundle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxIcon const &_result_ref = ((wxIconBundle const *)arg1)->GetIcon((wxSize const &)*arg2);
            result = (wxIcon *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxIcon* resultptr = new wxIcon(*result);
        resultobj = SWIG_NewPointerObj((void*)(resultptr), SWIGTYPE_p_wxIcon, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IconBundle_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxIconBundle, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Cursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    long arg2 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    wxCursor *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "cursorName",(char *) "type",(char *) "hotSpotX",(char *) "hotSpotY", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_Cursor",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCursor *)new_wxCursor((wxString const &)*arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxCursor, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_Cursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxCursor *arg1 = (wxCursor *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Cursor",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCursor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StockCursor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxCursor *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_StockCursor",kwnames,&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCursor *)new wxCursor(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxCursor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CursorFromImage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImage *arg1 = 0 ;
    wxCursor *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "image", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_CursorFromImage",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImage, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxImage");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCursor *)new wxCursor((wxImage const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxCursor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursor_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxCursor *arg1 = (wxCursor *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Cursor_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxCursor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Cursor_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxCursor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Region(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 = (int) 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    wxRegion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_Region",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = (int)(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegion *)new wxRegion(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxRegion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RegionFromBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxRegion *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "bmp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_RegionFromBitmap",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegion *)new wxRegion((wxBitmap const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxRegion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RegionFromBitmapColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxColour *arg2 = 0 ;
    int arg3 = (int) 0 ;
    wxRegion *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "bmp",(char *) "transColour",(char *) "tolerance", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_RegionFromBitmapColour",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegion *)new wxRegion((wxBitmap const &)*arg1,(wxColour const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxRegion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RegionFromPoints(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxPoint *arg2 = (wxPoint *) 0 ;
    int arg3 = (int) wxWINDING_RULE ;
    wxRegion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "points",(char *) "fillStyle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_RegionFromPoints",kwnames,&obj0,&obj1)) goto fail;
    {
        arg2 = wxPoint_LIST_helper(obj0, &arg1);
        if (arg2 == NULL) SWIG_fail;
    }
    if (obj1) {
        {
            arg3 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegion *)new wxRegion(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxRegion, 1);
    {
        if (arg2) delete [] arg2;
    }
    return resultobj;
    fail:
    {
        if (arg2) delete [] arg2;
    }
    return NULL;
}


static PyObject *_wrap_delete_Region(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Region",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Clear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_Clear",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Clear();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Offset(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Region_Offset",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Offset(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Contains(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    wxRegionContain result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Region_Contains",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegionContain)(arg1)->Contains(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ContainsPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxPoint *arg2 = 0 ;
    wxRegionContain result;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_ContainsPoint",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegionContain)(arg1)->Contains((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ContainsRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    wxRegionContain result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_ContainsRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegionContain)(arg1)->Contains((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ContainsRectDim(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    wxRegionContain result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "w",(char *) "h", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_ContainsRectDim",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegionContain)(arg1)->Contains(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_GetBox(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_GetBox",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetBox();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Intersect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Intersect",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Intersect(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_IntersectRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_IntersectRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Intersect((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_IntersectRegion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_IntersectRegion",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxRegion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Intersect((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_IsEmpty(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_IsEmpty",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsEmpty();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Union(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Union",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_UnionRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_UnionRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_UnionRegion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_UnionRegion",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxRegion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Subtract(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Subtract",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Subtract(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_SubtractRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_SubtractRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Subtract((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_SubtractRegion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_SubtractRegion",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxRegion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Subtract((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Xor(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Xor",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Xor(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_XorRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_XorRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Xor((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_XorRegion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_XorRegion",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxRegion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Xor((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ConvertToBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    SwigValueWrapper<wxBitmap > result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_ConvertToBitmap",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->ConvertToBitmap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBitmap * resultptr;
        resultptr = new wxBitmap((wxBitmap &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxBitmap, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_UnionBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxBitmap *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_UnionBitmap",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_UnionBitmapColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    int arg4 = (int) 0 ;
    bool result;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp",(char *) "transColour",(char *) "tolerance", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Region_UnionBitmapColour",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union((wxBitmap const &)*arg2,(wxColour const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Region_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxRegion, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RegionIterator(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = 0 ;
    wxRegionIterator *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_RegionIterator",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxRegion");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegionIterator *)new wxRegionIterator((wxRegion const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxRegionIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RegionIterator(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_RegionIterator",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetX(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetX",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetX();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetY",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetY();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetW(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetW",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetW();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetWidth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetH(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetH",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetH();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetHeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetHeight",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    wxRect result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetRect",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetRect();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_HaveRects(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_HaveRects",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HaveRects();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_Reset(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_Reset",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Reset();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_Next(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_Next",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxRegionIterator_Next(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator___nonzero__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator___nonzero__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxRegionIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxRegionIterator___nonzero__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RegionIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxRegionIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_NativeFontInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_NativeFontInfo",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeFontInfo *)new wxNativeFontInfo();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxNativeFontInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_NativeFontInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_NativeFontInfo",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_Init(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_Init",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Init();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_InitFromFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFont *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_InitFromFont",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxFont");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->InitFromFont((wxFont const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetPointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetPointSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxNativeFontInfo const *)arg1)->GetPointSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontStyle result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetStyle",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontStyle)((wxNativeFontInfo const *)arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetWeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontWeight result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetWeight",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontWeight)((wxNativeFontInfo const *)arg1)->GetWeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetUnderlined(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetUnderlined",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxNativeFontInfo const *)arg1)->GetUnderlined();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetFaceName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetFaceName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeFontInfo const *)arg1)->GetFaceName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetFamily(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontFamily result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetFamily",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontFamily)((wxNativeFontInfo const *)arg1)->GetFamily();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontEncoding result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetEncoding",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontEncoding)((wxNativeFontInfo const *)arg1)->GetEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetPointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pointsize", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetPointSize",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPointSize(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontStyle arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontStyle)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle((wxFontStyle )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetWeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontWeight arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weight", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetWeight",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontWeight)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWeight((wxFontWeight )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetUnderlined(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "underlined", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetUnderlined",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetUnderlined(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetFaceName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetFaceName",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        wxString* sptr = wxString_in_helper(obj1);
        if (sptr == NULL) SWIG_fail;
        arg2 = *sptr;
        delete sptr;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFaceName(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetFamily(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontFamily arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "family", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetFamily",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontFamily)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFamily((wxFontFamily )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFontEncoding arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetEncoding",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetEncoding((wxFontEncoding )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_FromString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "s", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_FromString",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FromString((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_ToString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_ToString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeFontInfo const *)arg1)->ToString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo___str__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo___str__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxNativeFontInfo___str__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_FromUserString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "s", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_FromUserString",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FromUserString((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_ToUserString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_ToUserString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeFontInfo const *)arg1)->ToUserString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NativeFontInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxNativeFontInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_NativeEncodingInfo_facename_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString *arg2 = (wxString *) 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeEncodingInfo_facename_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (arg1) (arg1)->facename = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_facename_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeEncodingInfo_facename_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxString *)& ((arg1)->facename);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_encoding_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxFontEncoding arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeEncodingInfo_encoding_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->encoding = (wxFontEncoding )arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_encoding_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxFontEncoding result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeEncodingInfo_encoding_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxFontEncoding) ((arg1)->encoding);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NativeEncodingInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_NativeEncodingInfo",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeEncodingInfo *)new wxNativeEncodingInfo();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxNativeEncodingInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_NativeEncodingInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_NativeEncodingInfo",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_FromString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "s", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeEncodingInfo_FromString",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FromString((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_ToString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeEncodingInfo_ToString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeEncodingInfo const *)arg1)->ToString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NativeEncodingInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxNativeEncodingInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GetNativeFontEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding arg1 ;
    wxNativeEncodingInfo *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GetNativeFontEncoding",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeEncodingInfo *)wxGetNativeFontEncoding((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxNativeEncodingInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TestFontEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TestFontEncoding",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeEncodingInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxNativeEncodingInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTestFontEncoding((wxNativeEncodingInfo const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FontMapper(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_FontMapper",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontMapper *)new wxFontMapper();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFontMapper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FontMapper(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FontMapper",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_Get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":FontMapper_Get",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontMapper *)wxFontMapper::Get();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFontMapper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_Set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxFontMapper *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "mapper", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_Set",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontMapper *)wxFontMapper::Set(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFontMapper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_CharsetToEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxString *arg2 = 0 ;
    bool arg3 = (bool) true ;
    wxFontEncoding result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "charset",(char *) "interactive", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FontMapper_CharsetToEncoding",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = (bool)(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontEncoding)(arg1)->CharsetToEncoding((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_GetSupportedEncodingsCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    size_t result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":FontMapper_GetSupportedEncodingsCount",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)wxFontMapper::GetSupportedEncodingsCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    size_t arg1 ;
    wxFontEncoding result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_GetEncoding",kwnames,&obj0)) goto fail;
    {
        arg1 = (size_t)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontEncoding)wxFontMapper::GetEncoding(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetEncodingName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding arg1 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_GetEncodingName",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFontMapper::GetEncodingName((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetEncodingDescription(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding arg1 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_GetEncodingDescription",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFontMapper::GetEncodingDescription((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetEncodingFromName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxFontEncoding result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_GetEncodingFromName",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontEncoding)wxFontMapper::GetEncodingFromName((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_SetConfig(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxConfigBase *arg2 = (wxConfigBase *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "config", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetConfig",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxConfigBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetConfig(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_SetConfigPath(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "prefix", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetConfigPath",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetConfigPath((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_GetDefaultConfigPath(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":FontMapper_GetDefaultConfigPath",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFontMapper::GetDefaultConfigPath();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetAltForEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxFontEncoding arg2 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    bool arg4 = (bool) true ;
    PyObject *result;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding",(char *) "facename",(char *) "interactive", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:FontMapper_GetAltForEncoding",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        {
            arg4 = (bool)(SWIG_As_bool(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFontMapper_GetAltForEncoding(arg1,(wxFontEncoding )arg2,(wxString const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_IsEncodingAvailable(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxFontEncoding arg2 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    bool result;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FontMapper_IsEncodingAvailable",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsEncodingAvailable((wxFontEncoding )arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_SetDialogParent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "parent", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetDialogParent",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDialogParent(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_SetDialogTitle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "title", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetDialogTitle",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontMapper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDialogTitle((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * FontMapper_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFontMapper, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Font(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    bool arg5 = (bool) false ;
    wxString const &arg6_defvalue = wxPyEmptyString ;
    wxString *arg6 = (wxString *) &arg6_defvalue ;
    wxFontEncoding arg7 = (wxFontEncoding) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    bool temp6 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "pointSize",(char *) "family",(char *) "style",(char *) "weight",(char *) "underline",(char *) "face",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OOO:new_Font",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (bool)(SWIG_As_bool(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = wxString_in_helper(obj5);
            if (arg6 == NULL) SWIG_fail;
            temp6 = true;
        }
    }
    if (obj6) {
        {
            arg7 = (wxFontEncoding)(SWIG_As_int(obj6)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new wxFont(arg1,arg2,arg3,arg4,arg5,(wxString const &)*arg6,(wxFontEncoding )arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFont, 1);
    {
        if (temp6)
        delete arg6;
    }
    return resultobj;
    fail:
    {
        if (temp6)
        delete arg6;
    }
    return NULL;
}


static PyObject *_wrap_delete_Font(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Font",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FontFromNativeInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = 0 ;
    wxFont *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_FontFromNativeInfo",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxNativeFontInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new wxFont((wxNativeFontInfo const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFont, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FontFromNativeInfoString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxFont *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_FontFromNativeInfoString",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new_wxFont((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFont, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_FFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxFontFamily arg2 ;
    int arg3 = (int) wxFONTFLAG_DEFAULT ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    wxFontEncoding arg5 = (wxFontEncoding) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "pointSize",(char *) "family",(char *) "flags",(char *) "face",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:new_FFont",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (wxFontFamily)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = true;
        }
    }
    if (obj4) {
        {
            arg5 = (wxFontEncoding)(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new_wxFont(arg1,(wxFontFamily )arg2,arg3,(wxString const &)*arg4,(wxFontEncoding )arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFont, 1);
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_new_FontFromPixelSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxSize *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    bool arg5 = (bool) false ;
    wxString const &arg6_defvalue = wxEmptyString ;
    wxString *arg6 = (wxString *) &arg6_defvalue ;
    wxFontEncoding arg7 = (wxFontEncoding) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    wxSize temp1 ;
    bool temp6 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "pixelSize",(char *) "family",(char *) "style",(char *) "weight",(char *) "underlined",(char *) "face",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OOO:new_FontFromPixelSize",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxSize_helper(obj0, &arg1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (bool)(SWIG_As_bool(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = wxString_in_helper(obj5);
            if (arg6 == NULL) SWIG_fail;
            temp6 = true;
        }
    }
    if (obj6) {
        {
            arg7 = (wxFontEncoding)(SWIG_As_int(obj6)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new_wxFont((wxSize const &)*arg1,arg2,arg3,arg4,arg5,(wxString const &)*arg6,(wxFontEncoding )arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFont, 1);
    {
        if (temp6)
        delete arg6;
    }
    return resultobj;
    fail:
    {
        if (temp6)
        delete arg6;
    }
    return NULL;
}


static PyObject *_wrap_new_FFontFromPixelSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxSize *arg1 = 0 ;
    wxFontFamily arg2 ;
    int arg3 = (int) wxFONTFLAG_DEFAULT ;
    wxString const &arg4_defvalue = wxEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    wxFontEncoding arg5 = (wxFontEncoding) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    wxSize temp1 ;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "pixelSize",(char *) "family",(char *) "flags",(char *) "face",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:new_FFontFromPixelSize",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxSize_helper(obj0, &arg1)) SWIG_fail;
    }
    {
        arg2 = (wxFontFamily)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = true;
        }
    }
    if (obj4) {
        {
            arg5 = (wxFontEncoding)(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new_wxFont((wxSize const &)*arg1,(wxFontFamily )arg2,arg3,(wxString const &)*arg4,(wxFontEncoding )arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFont, 1);
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_Font_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font___eq__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxFont *arg2 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font___eq__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxFont___eq__(arg1,(wxFont const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font___ne__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxFont *arg2 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "other", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font___ne__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxFont___ne__(arg1,(wxFont const *)arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetPointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetPointSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetPointSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetPixelSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetPixelSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetPixelSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_IsUsingSizeInPixels(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_IsUsingSizeInPixels",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->IsUsingSizeInPixels();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetFamily(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetFamily",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetFamily();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetStyle",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetWeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetWeight",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetWeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetUnderlined(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetUnderlined",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->GetUnderlined();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetFaceName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetFaceName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetFaceName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxFontEncoding result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetEncoding",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontEncoding)((wxFont const *)arg1)->GetEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNativeFontInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxNativeFontInfo *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNativeFontInfo",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeFontInfo *)((wxFont const *)arg1)->GetNativeFontInfo();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxNativeFontInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_IsFixedWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_IsFixedWidth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->IsFixedWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNativeFontInfoDesc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNativeFontInfoDesc",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetNativeFontInfoDesc();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNativeFontInfoUserDesc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNativeFontInfoUserDesc",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetNativeFontInfoUserDesc();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetPointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pointSize", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetPointSize",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPointSize(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetPixelSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxSize *arg2 = 0 ;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pixelSize", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetPixelSize",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPixelSize((wxSize const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetFamily(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "family", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetFamily",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFamily(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetStyle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetWeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weight", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetWeight",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWeight(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetFaceName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "faceName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetFaceName",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFaceName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Font_SetUnderlined(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "underlined", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetUnderlined",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetUnderlined(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxFontEncoding arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetEncoding",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetEncoding((wxFontEncoding )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetNativeFontInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxNativeFontInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetNativeFontInfo",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxNativeFontInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxNativeFontInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNativeFontInfo((wxNativeFontInfo const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetNativeFontInfoFromString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetNativeFontInfoFromString",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNativeFontInfo((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Font_SetNativeFontInfoUserDesc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetNativeFontInfoUserDesc",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNativeFontInfoUserDesc((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Font_GetFamilyString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetFamilyString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetFamilyString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetStyleString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetStyleString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetStyleString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetWeightString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetWeightString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetWeightString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetNoAntiAliasing(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "no", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Font_SetNoAntiAliasing",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = (bool)(SWIG_As_bool(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNoAntiAliasing(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNoAntiAliasing(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNoAntiAliasing",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->GetNoAntiAliasing();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetDefaultEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Font_GetDefaultEncoding",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontEncoding)wxFont::GetDefaultEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetDefaultEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_SetDefaultEncoding",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxFont::SetDefaultEncoding((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Font_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFont, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FontEnumerator(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_FontEnumerator",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyFontEnumerator *)new wxPyFontEnumerator();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPyFontEnumerator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FontEnumerator(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FontEnumerator",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFontEnumerator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator__setCallbackInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class",(char *) "incref", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:FontEnumerator__setCallbackInfo",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFontEnumerator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator_EnumerateFacenames(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    wxFontEncoding arg2 = (wxFontEncoding) wxFONTENCODING_SYSTEM ;
    bool arg3 = (bool) false ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding",(char *) "fixedWidthOnly", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:FontEnumerator_EnumerateFacenames",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFontEnumerator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (bool)(SWIG_As_bool(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->EnumerateFacenames((wxFontEncoding )arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator_EnumerateEncodings(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:FontEnumerator_EnumerateEncodings",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFontEnumerator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->EnumerateEncodings((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FontEnumerator_GetEncodings(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontEnumerator_GetEncodings",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFontEnumerator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxPyFontEnumerator_GetEncodings(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator_GetFacenames(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontEnumerator_GetFacenames",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPyFontEnumerator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxPyFontEnumerator_GetFacenames(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FontEnumerator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyFontEnumerator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_LanguageInfo_Language_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "Language", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LanguageInfo_Language_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLanguageInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Language = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LanguageInfo_Language_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LanguageInfo_Language_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLanguageInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->Language);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LanguageInfo_CanonicalName_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *arg2 = (wxString *) 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "CanonicalName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LanguageInfo_CanonicalName_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLanguageInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (arg1) (arg1)->CanonicalName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LanguageInfo_CanonicalName_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LanguageInfo_CanonicalName_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLanguageInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxString *)& ((arg1)->CanonicalName);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LanguageInfo_Description_set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *arg2 = (wxString *) 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "Description", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LanguageInfo_Description_set",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLanguageInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (arg1) (arg1)->Description = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LanguageInfo_Description_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LanguageInfo_Description_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLanguageInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxString *)& ((arg1)->Description);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LanguageInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLanguageInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Locale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 = (int) -1 ;
    int arg2 = (int) wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING ;
    wxLocale *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "language",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Locale",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = (int)(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLocale *)new_wxLocale(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLocale, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Locale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Locale",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_Init1(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    bool arg5 = (bool) true ;
    bool arg6 = (bool) false ;
    bool result;
    bool temp2 = false ;
    bool temp3 = false ;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szName",(char *) "szShort",(char *) "szLocale",(char *) "bLoadDefault",(char *) "bConvertEncoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOO:Locale_Init1",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = true;
        }
    }
    if (obj4) {
        {
            arg5 = (bool)(SWIG_As_bool(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = (bool)(SWIG_As_bool(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxLocale_Init1(arg1,(wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_Locale_Init2(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    int arg2 = (int) wxLANGUAGE_DEFAULT ;
    int arg3 = (int) wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "language",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:Locale_Init2",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxLocale_Init2(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSystemLanguage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Locale_GetSystemLanguage",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxLocale::GetSystemLanguage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSystemEncoding(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Locale_GetSystemEncoding",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontEncoding)wxLocale::GetSystemEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSystemEncodingName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Locale_GetSystemEncodingName",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxLocale::GetSystemEncodingName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_IsOk(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_IsOk",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxLocale const *)arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetLocale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLocale",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetLocale();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetLanguage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLanguage",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxLocale const *)arg1)->GetLanguage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSysName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetSysName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetSysName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetCanonicalName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetCanonicalName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetCanonicalName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_AddCatalogLookupPathPrefix(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "prefix", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_AddCatalogLookupPathPrefix",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLocale::AddCatalogLookupPathPrefix((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Locale_AddCatalog(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szDomain", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Locale_AddCatalog",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->AddCatalog((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Locale_IsLoaded(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szDomain", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Locale_IsLoaded",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxLocale const *)arg1)->IsLoaded((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Locale_GetLanguageInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxLanguageInfo *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "lang", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLanguageInfo",kwnames,&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLanguageInfo *)wxLocale::GetLanguageInfo(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLanguageInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetLanguageName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "lang", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLanguageName",kwnames,&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxLocale::GetLanguageName(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_FindLanguageInfo(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxLanguageInfo *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "locale", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_FindLanguageInfo",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLanguageInfo *)wxLocale::FindLanguageInfo((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLanguageInfo, 0);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Locale_AddLanguage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_AddLanguage",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLanguageInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxLanguageInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLocale::AddLanguage((wxLanguageInfo const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString result;
    bool temp2 = false ;
    bool temp3 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szOrigString",(char *) "szDomain", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:Locale_GetString",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = true;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetString((wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_Locale_GetName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxLocale, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxLocale const *)arg1)->GetName();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Locale_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLocale, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GetLocale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetLocale",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLocale *)wxGetLocale();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxLocale, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetTranslation__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxString result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetTranslation",&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetTranslation((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_GetTranslation__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    size_t arg3 ;
    wxString result;
    bool temp1 = false ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:GetTranslation",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (size_t)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetTranslation((wxString const &)*arg1,(wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_GetTranslation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
        }
        if (_v) {
            return _wrap_GetTranslation__SWIG_0(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    return _wrap_GetTranslation__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'GetTranslation'");
    return NULL;
}


static PyObject *_wrap_new_EncodingConverter(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_EncodingConverter",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxEncodingConverter *)new wxEncodingConverter();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxEncodingConverter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EncodingConverter(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *arg1 = (wxEncodingConverter *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_EncodingConverter",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEncodingConverter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_Init(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *arg1 = (wxEncodingConverter *) 0 ;
    wxFontEncoding arg2 ;
    wxFontEncoding arg3 ;
    int arg4 = (int) wxCONVERT_STRICT ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "input_enc",(char *) "output_enc",(char *) "method", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:EncodingConverter_Init",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEncodingConverter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (wxFontEncoding)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Init((wxFontEncoding )arg2,(wxFontEncoding )arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_Convert(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *arg1 = (wxEncodingConverter *) 0 ;
    wxString *arg2 = 0 ;
    wxString result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "input", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EncodingConverter_Convert",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEncodingConverter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->Convert((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_EncodingConverter_GetPlatformEquivalents(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding arg1 ;
    int arg2 = (int) wxPLATFORM_CURRENT ;
    wxFontEncodingArray result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "enc",(char *) "platform", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:EncodingConverter_GetPlatformEquivalents",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = (wxFontEncoding)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxEncodingConverter::GetPlatformEquivalents((wxFontEncoding )arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = PyList_New(0);
        for (size_t i=0; i < (&result)->GetCount(); i++) {
            PyObject* number = PyInt_FromLong((&result)->Item(i));
            PyList_Append(resultobj, number);
            Py_DECREF(number);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_GetAllEquivalents(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding arg1 ;
    wxFontEncodingArray result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "enc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:EncodingConverter_GetAllEquivalents",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxEncodingConverter::GetAllEquivalents((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = PyList_New(0);
        for (size_t i=0; i < (&result)->GetCount(); i++) {
            PyObject* number = PyInt_FromLong((&result)->Item(i));
            PyList_Append(resultobj, number);
            Py_DECREF(number);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_CanConvert(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontEncoding arg1 ;
    wxFontEncoding arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "encIn",(char *) "encOut", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EncodingConverter_CanConvert",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = (wxFontEncoding)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (wxFontEncoding)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxEncodingConverter::CanConvert((wxFontEncoding )arg1,(wxFontEncoding )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EncodingConverter_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxEncodingConverter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_DC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DC",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_BeginDrawing(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_BeginDrawing",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->BeginDrawing();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_EndDrawing(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_EndDrawing",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->EndDrawing();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_FloodFill(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    wxColour *arg4 = 0 ;
    int arg5 = (int) wxFLOOD_SURFACE ;
    bool result;
    wxColour temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "col",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:DC_FloodFill",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = &temp4;
        if ( ! wxColour_helper(obj3, &arg4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (int)(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FloodFill(arg2,arg3,(wxColour const &)*arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_FloodFillPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    int arg4 = (int) wxFLOOD_SURFACE ;
    bool result;
    wxPoint temp2 ;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "col",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:DC_FloodFillPoint",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FloodFill((wxPoint const &)*arg2,(wxColour const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPixel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_GetPixel",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_GetPixel(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPixelPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxColour result;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_GetPixelPoint",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_GetPixelPoint(arg1,(wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawLine(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x1",(char *) "y1",(char *) "x2",(char *) "y2", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawLine",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLine(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawLinePoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    wxPoint temp2 ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt1",(char *) "pt2", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawLinePoint",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLine((wxPoint const &)*arg2,(wxPoint const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CrossHair(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_CrossHair",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CrossHair(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CrossHairPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_CrossHairPoint",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CrossHair((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawArc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x1",(char *) "y1",(char *) "x2",(char *) "y2",(char *) "xc",(char *) "yc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:DC_DrawArc",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawArc(arg2,arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawArcPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    wxPoint *arg4 = 0 ;
    wxPoint temp2 ;
    wxPoint temp3 ;
    wxPoint temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt1",(char *) "pt2",(char *) "center", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawArcPoint",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = &temp4;
        if ( ! wxPoint_helper(obj3, &arg4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawArc((wxPoint const &)*arg2,(wxPoint const &)*arg3,(wxPoint const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCheckMark(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawCheckMark",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCheckMark(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCheckMarkRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawCheckMarkRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCheckMark((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipticArc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    double arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "w",(char *) "h",(char *) "start",(char *) "end", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:DC_DrawEllipticArc",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipticArc(arg2,arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipticArcPointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz",(char *) "start",(char *) "end", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawEllipticArcPointSize",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipticArc((wxPoint const &)*arg2,(wxSize const &)*arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawPoint",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawPoint(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawPointPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawPointPoint",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawPoint((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRectangle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawRectangle",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRectangle(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRectangleRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawRectangleRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRectangle((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRectanglePointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawRectanglePointSize",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRectangle((wxPoint const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRoundedRectangle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    double arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:DC_DrawRoundedRectangle",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRoundedRectangle(arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRoundedRectangleRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    double arg3 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "r",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawRoundedRectangleRect",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRoundedRectangle((wxRect const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRoundedRectanglePointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    double arg4 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawRoundedRectanglePointSize",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRoundedRectangle((wxPoint const &)*arg2,(wxSize const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCircle(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawCircle",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCircle(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCirclePoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    int arg3 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawCirclePoint",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCircle((wxPoint const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipse(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawEllipse",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipse(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipseRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawEllipseRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipse((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipsePointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawEllipsePointSize",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipse((wxPoint const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxIcon *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawIcon",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxIcon");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawIcon((wxIcon const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawIconPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxIcon *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawIconPoint",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxIcon");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawIcon((wxIcon const &)*arg2,(wxPoint const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBitmap *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    bool arg5 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp",(char *) "x",(char *) "y",(char *) "useMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:DC_DrawBitmap",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (bool)(SWIG_As_bool(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawBitmap((wxBitmap const &)*arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawBitmapPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    bool arg4 = (bool) false ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp",(char *) "pt",(char *) "useMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:DC_DrawBitmapPoint",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (bool)(SWIG_As_bool(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawBitmap((wxBitmap const &)*arg2,(wxPoint const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawText(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawText",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawText((wxString const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawTextPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    bool temp2 = false ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawTextPoint",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawText((wxString const &)*arg2,(wxPoint const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawRotatedText(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    double arg5 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "x",(char *) "y",(char *) "angle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawRotatedText",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRotatedText((wxString const &)*arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawRotatedTextPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    double arg4 ;
    bool temp2 = false ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "pt",(char *) "angle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawRotatedTextPoint",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRotatedText((wxString const &)*arg2,(wxPoint const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_Blit(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    wxDC *arg6 = (wxDC *) 0 ;
    int arg7 ;
    int arg8 ;
    int arg9 = (int) wxCOPY ;
    bool arg10 = (bool) false ;
    int arg11 = (int) -1 ;
    int arg12 = (int) -1 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "xdest",(char *) "ydest",(char *) "width",(char *) "height",(char *) "source",(char *) "xsrc",(char *) "ysrc",(char *) "rop",(char *) "useMask",(char *) "xsrcMask",(char *) "ysrcMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO|OOOO:DC_Blit",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (int)(SWIG_As_int(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    if (obj8) {
        {
            arg9 = (int)(SWIG_As_int(obj8)); 
            if (SWIG_arg_fail(9)) SWIG_fail;
        }
    }
    if (obj9) {
        {
            arg10 = (bool)(SWIG_As_bool(obj9)); 
            if (SWIG_arg_fail(10)) SWIG_fail;
        }
    }
    if (obj10) {
        {
            arg11 = (int)(SWIG_As_int(obj10)); 
            if (SWIG_arg_fail(11)) SWIG_fail;
        }
    }
    if (obj11) {
        {
            arg12 = (int)(SWIG_As_int(obj11)); 
            if (SWIG_arg_fail(12)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Blit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_BlitPointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxDC *arg4 = (wxDC *) 0 ;
    wxPoint *arg5 = 0 ;
    int arg6 = (int) wxCOPY ;
    bool arg7 = (bool) false ;
    wxPoint const &arg8_defvalue = wxDefaultPosition ;
    wxPoint *arg8 = (wxPoint *) &arg8_defvalue ;
    bool result;
    wxPoint temp2 ;
    wxSize temp3 ;
    wxPoint temp5 ;
    wxPoint temp8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "destPt",(char *) "sz",(char *) "source",(char *) "srcPt",(char *) "rop",(char *) "useMask",(char *) "srcPtMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|OOO:DC_BlitPointSize",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = &temp5;
        if ( ! wxPoint_helper(obj4, &arg5)) SWIG_fail;
    }
    if (obj5) {
        {
            arg6 = (int)(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = (bool)(SWIG_As_bool(obj6)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    if (obj7) {
        {
            arg8 = &temp8;
            if ( ! wxPoint_helper(obj7, &arg8)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Blit((wxPoint const &)*arg2,(wxSize const &)*arg3,arg4,(wxPoint const &)*arg5,arg6,arg7,(wxPoint const &)*arg8);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRegion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_SetClippingRegion",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRegionPointSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetClippingRegionPointSize",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion((wxPoint const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRegionAsRegion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRegion *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetClippingRegionAsRegion",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxRegion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxRegion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetClippingRect",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawLines(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    wxPoint *arg3 = (wxPoint *) 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "points",(char *) "xoffset",(char *) "yoffset", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:DC_DrawLines",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg3 = wxPoint_LIST_helper(obj1, &arg2);
        if (arg3 == NULL) SWIG_fail;
    }
    if (obj2) {
        {
            arg4 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg5 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLines(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawPolygon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    wxPoint *arg3 = (wxPoint *) 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) 0 ;
    int arg6 = (int) wxODDEVEN_RULE ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "points",(char *) "xoffset",(char *) "yoffset",(char *) "fillStyle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:DC_DrawPolygon",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg3 = wxPoint_LIST_helper(obj1, &arg2);
        if (arg3 == NULL) SWIG_fail;
    }
    if (obj2) {
        {
            arg4 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg5 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg6 = (int)(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawPolygon(arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawLabel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxRect *arg3 = 0 ;
    int arg4 = (int) wxALIGN_LEFT|wxALIGN_TOP ;
    int arg5 = (int) -1 ;
    bool temp2 = false ;
    wxRect temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "rect",(char *) "alignment",(char *) "indexAccel", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:DC_DrawLabel",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = &temp3;
        if ( ! wxRect_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = (int)(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLabel((wxString const &)*arg2,(wxRect const &)*arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawImageLabel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxBitmap *arg3 = 0 ;
    wxRect *arg4 = 0 ;
    int arg5 = (int) wxALIGN_LEFT|wxALIGN_TOP ;
    int arg6 = (int) -1 ;
    wxRect result;
    bool temp2 = false ;
    wxRect temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "image",(char *) "rect",(char *) "alignment",(char *) "indexAccel", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OO:DC_DrawImageLabel",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = &temp4;
        if ( ! wxRect_helper(obj3, &arg4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (int)(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = (int)(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_DrawImageLabel(arg1,(wxString const &)*arg2,(wxBitmap const &)*arg3,(wxRect const &)*arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxRect, 1);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawSpline(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    wxPoint *arg3 = (wxPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "points", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawSpline",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg3 = wxPoint_LIST_helper(obj1, &arg2);
        if (arg3 == NULL) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawSpline(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_DC_Clear(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_Clear",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Clear();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_StartDoc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "message", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_StartDoc",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->StartDoc((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_EndDoc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_EndDoc",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->EndDoc();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_StartPage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_StartPage",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->StartPage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_EndPage(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_EndPage",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->EndPage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxFont *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetFont",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxFont");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFont((wxFont const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetPen(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPen *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pen", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetPen",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxPen");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPen((wxPen const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetBrush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetBrush",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBrush");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetBrush((wxBrush const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetBackground(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetBackground",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBrush");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetBackground((wxBrush const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetBackgroundMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetBackgroundMode",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetBackgroundMode(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetPalette(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPalette *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "palette", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetPalette",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxPalette, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxPalette");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPalette((wxPalette const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DestroyClippingRegion(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_DestroyClippingRegion",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DestroyClippingRegion();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetClippingBox(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    int temp5 ;
    int res5 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetClippingBox",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetClippingBox(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetClippingRect(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetClippingRect",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_GetClippingRect(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetCharHeight(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetCharHeight",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetCharHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetCharWidth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetCharWidth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetCharWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetTextExtent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    bool temp2 = false ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "string", NULL 
    };
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_GetTextExtent",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_GetFullTextExtent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int *arg6 = (int *) 0 ;
    wxFont *arg7 = (wxFont *) NULL ;
    bool temp2 = false ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    int temp5 ;
    int res5 = 0 ;
    int temp6 ;
    int res6 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "string",(char *) "font", NULL 
    };
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    arg6 = &temp6; res6 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DC_GetFullTextExtent",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg7, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res6 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg6)) : SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, 0)));
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_GetMultiLineTextExtent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    wxFont *arg6 = (wxFont *) NULL ;
    bool temp2 = false ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    int temp5 ;
    int res5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "font", NULL 
    };
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DC_GetMultiLineTextExtent",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    if (obj2) {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg6, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetMultiLineTextExtent((wxString const &)*arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, 0)));
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_GetPartialTextExtents(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxArrayInt result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_GetPartialTextExtents",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_GetPartialTextExtents(arg1,(wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = PyList_New(0);
        size_t idx;
        for (idx = 0; idx < (&result)->GetCount(); idx += 1) {
            PyObject* val = PyInt_FromLong( (&result)->Item(idx) );
            PyList_Append(resultobj, val);
            Py_DECREF(val);
        }
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_GetSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSize",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetSizeTuple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSizeTuple",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetSize(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetSizeMM(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSizeMM",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetSizeMM();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetSizeMMTuple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSizeMMTuple",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetSizeMM(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalX(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalX",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalX(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalY",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalY(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalXRel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalXRel",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalXRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalYRel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalYRel",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalYRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceX(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceX",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceX(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceY",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceY(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceXRel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceXRel",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceXRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceYRel(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceYRel",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceYRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CanDrawBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_CanDrawBitmap",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDC const *)arg1)->CanDrawBitmap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CanGetTextExtent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_CanGetTextExtent",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDC const *)arg1)->CanGetTextExtent();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetDepth(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetDepth",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPPI(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetPPI",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetPPI();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_Ok(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_Ok",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDC const *)arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBackgroundMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBackgroundMode",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetBackgroundMode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBackground(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBackground",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxBrush const &_result_ref = ((wxDC const *)arg1)->GetBackground();
            result = (wxBrush *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBrush* resultptr = new wxBrush(*result);
        resultobj = SWIG_NewPointerObj((void*)(resultptr), SWIGTYPE_p_wxBrush, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBrush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBrush",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxBrush const &_result_ref = ((wxDC const *)arg1)->GetBrush();
            result = (wxBrush *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBrush* resultptr = new wxBrush(*result);
        resultobj = SWIG_NewPointerObj((void*)(resultptr), SWIGTYPE_p_wxBrush, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxFont *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetFont",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFont const &_result_ref = ((wxDC const *)arg1)->GetFont();
            result = (wxFont *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxFont* resultptr = new wxFont(*result);
        resultobj = SWIG_NewPointerObj((void*)(resultptr), SWIGTYPE_p_wxFont, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPen(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPen *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetPen",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPen const &_result_ref = ((wxDC const *)arg1)->GetPen();
            result = (wxPen *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPen* resultptr = new wxPen(*result);
        resultobj = SWIG_NewPointerObj((void*)(resultptr), SWIGTYPE_p_wxPen, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetTextBackground(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetTextBackground",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxColour const &_result_ref = ((wxDC const *)arg1)->GetTextBackground();
            result = (wxColour *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxColour, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetTextForeground(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetTextForeground",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxColour const &_result_ref = ((wxDC const *)arg1)->GetTextForeground();
            result = (wxColour *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxColour, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetTextForeground(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetTextForeground",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetTextForeground((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetTextBackground(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetTextBackground",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetTextBackground((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetMapMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetMapMode",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetMapMode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetMapMode(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetMapMode",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMapMode(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetUserScale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetUserScale",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetUserScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetUserScale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetUserScale",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetUserScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalScale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalScale",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetLogicalScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetLogicalScale(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetLogicalScale",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLogicalScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalOrigin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalOrigin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetLogicalOrigin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalOriginTuple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalOriginTuple",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetLogicalOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetLogicalOrigin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetLogicalOrigin",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLogicalOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetLogicalOriginPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "point", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetLogicalOriginPoint",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDC_SetLogicalOriginPoint(arg1,(wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetDeviceOrigin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetDeviceOrigin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetDeviceOrigin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetDeviceOriginTuple(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetDeviceOriginTuple",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetDeviceOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetDeviceOrigin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetDeviceOrigin",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDeviceOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetDeviceOriginPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "point", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetDeviceOriginPoint",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDC_SetDeviceOriginPoint(arg1,(wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetAxisOrientation(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "xLeftRight",(char *) "yBottomUp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetAxisOrientation",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetAxisOrientation(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalFunction(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalFunction",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetLogicalFunction();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetLogicalFunction(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "function", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetLogicalFunction",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLogicalFunction(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_ComputeScaleAndOrigin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_ComputeScaleAndOrigin",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->ComputeScaleAndOrigin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CalcBoundingBox(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_CalcBoundingBox",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CalcBoundingBox(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CalcBoundingBoxPoint(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "point", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_CalcBoundingBoxPoint",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDC_CalcBoundingBoxPoint(arg1,(wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_ResetBoundingBox(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_ResetBoundingBox",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->ResetBoundingBox();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MinX(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MinX",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MinX();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MaxX(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MaxX",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MaxX();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MinY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MinY",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MinY();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MaxY(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MaxY",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MaxY();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBoundingBox(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    int temp5 ;
    int res5 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBoundingBox",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDC_GetBoundingBox(arg1,arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawPointList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawPointList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawPointList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawLineList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawLineList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawLineList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawRectangleList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawRectangleList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawRectangleList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawEllipseList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawEllipseList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawEllipseList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawPolygonList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawPolygonList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawPolygonList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawTextList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *arg5 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "textList",(char *) "pyPoints",(char *) "foregroundList",(char *) "backgroundList", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC__DrawTextList",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    arg5 = obj4;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawTextList(arg1,arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MemoryDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxMemoryDC *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_MemoryDC",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMemoryDC *)new wxMemoryDC();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMemoryDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MemoryDCFromDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxMemoryDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "oldDC", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_MemoryDCFromDC",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMemoryDC *)new wxMemoryDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMemoryDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MemoryDC_SelectObject(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxMemoryDC *arg1 = (wxMemoryDC *) 0 ;
    wxBitmap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MemoryDC_SelectObject",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxMemoryDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SelectObject((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MemoryDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMemoryDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BufferedDC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBitmap const &arg2_defvalue = wxNullBitmap ;
    wxBitmap *arg2 = (wxBitmap *) &arg2_defvalue ;
    int arg3 = (int) wxBUFFER_CLIENT_AREA ;
    wxBufferedDC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:new_BufferedDC",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(2)) SWIG_fail;
            if (arg2 == NULL) {
                SWIG_null_ref("wxBitmap");
            }
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBufferedDC *)new wxBufferedDC(arg1,(wxBitmap const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBufferedDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BufferedDC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize *arg2 = 0 ;
    int arg3 = (int) wxBUFFER_CLIENT_AREA ;
    wxBufferedDC *result;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:new_BufferedDC",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBufferedDC *)new wxBufferedDC(arg1,(wxSize const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBufferedDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BufferedDC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 1) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_BufferedDC__SWIG_0(self,args);
            }
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxBitmap, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_BufferedDC__SWIG_0(self,args);
                }
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_BufferedDC__SWIG_0(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxDC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = wxPySimple_typecheck(argv[1], wxT("wxSize"), 2);
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_BufferedDC__SWIG_1(self,args);
                }
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_BufferedDC__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_BufferedDC'");
    return NULL;
}


static PyObject *_wrap_delete_BufferedDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBufferedDC *arg1 = (wxBufferedDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_BufferedDC",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBufferedDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BufferedDC_UnMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBufferedDC *arg1 = (wxBufferedDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:BufferedDC_UnMask",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBufferedDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->UnMask();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BufferedDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBufferedDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BufferedPaintDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxBitmap const &arg2_defvalue = wxNullBitmap ;
    wxBitmap *arg2 = (wxBitmap *) &arg2_defvalue ;
    int arg3 = (int) wxBUFFER_CLIENT_AREA ;
    wxBufferedPaintDC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "window",(char *) "buffer",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_BufferedPaintDC",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        {
            SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(2)) SWIG_fail;
            if (arg2 == NULL) {
                SWIG_null_ref("wxBitmap");
            }
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBufferedPaintDC *)new wxBufferedPaintDC(arg1,(wxBitmap const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBufferedPaintDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BufferedPaintDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBufferedPaintDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ScreenDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ScreenDC",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxScreenDC *)new wxScreenDC();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxScreenDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenDC_StartDrawingOnTopWin(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *arg1 = (wxScreenDC *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "window", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ScreenDC_StartDrawingOnTopWin",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxScreenDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->StartDrawingOnTop(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenDC_StartDrawingOnTop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *arg1 = (wxScreenDC *) 0 ;
    wxRect *arg2 = (wxRect *) NULL ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ScreenDC_StartDrawingOnTop",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxScreenDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (obj1) {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxRect, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->StartDrawingOnTop(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenDC_EndDrawingOnTop(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *arg1 = (wxScreenDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ScreenDC_EndDrawingOnTop",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxScreenDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->EndDrawingOnTop();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ScreenDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxScreenDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ClientDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxClientDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_ClientDC",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxClientDC *)new wxClientDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxClientDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ClientDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxClientDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PaintDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPaintDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_PaintDC",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPaintDC *)new wxPaintDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPaintDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PaintDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPaintDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_WindowDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindowDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_WindowDC",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindowDC *)new wxWindowDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxWindowDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * WindowDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxWindowDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MirrorDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = 0 ;
    bool arg2 ;
    wxMirrorDC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "dc",(char *) "mirror", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_MirrorDC",kwnames,&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxDC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMirrorDC *)new wxMirrorDC(*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMirrorDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MirrorDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMirrorDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PostScriptDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPrintData *arg1 = 0 ;
    wxPostScriptDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "printData", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_PostScriptDC",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPrintData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxPrintData");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPostScriptDC *)new wxPostScriptDC((wxPrintData const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPostScriptDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_GetPrintData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPostScriptDC *arg1 = (wxPostScriptDC *) 0 ;
    wxPrintData *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PostScriptDC_GetPrintData",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPostScriptDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPrintData &_result_ref = (arg1)->GetPrintData();
            result = (wxPrintData *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPrintData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_SetPrintData(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPostScriptDC *arg1 = (wxPostScriptDC *) 0 ;
    wxPrintData *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PostScriptDC_SetPrintData",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPostScriptDC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxPrintData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxPrintData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPrintData((wxPrintData const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_SetResolution(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "ppi", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PostScriptDC_SetResolution",kwnames,&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPostScriptDC::SetResolution(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_GetResolution(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":PostScriptDC_GetResolution",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxPostScriptDC::GetResolution();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PostScriptDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPostScriptDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MetaFile(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxMetaFile *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "filename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_MetaFile",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMetaFile *)new wxMetaFile((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMetaFile, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject * MetaFile_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMetaFile, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MetaFileDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    wxMetaFileDC *result;
    bool temp1 = false ;
    bool temp4 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "filename",(char *) "width",(char *) "height",(char *) "description", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_MetaFileDC",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = true;
        }
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = true;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMetaFileDC *)new wxMetaFileDC((wxString const &)*arg1,arg2,arg3,(wxString const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxMetaFileDC, 1);
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject * MetaFileDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMetaFileDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PrinterDC(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPrintData *arg1 = 0 ;
    wxPrinterDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "printData", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_PrinterDC",kwnames,&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPrintData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("wxPrintData");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPrinterDC *)new wxPrinterDC((wxPrintData const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPrinterDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PrinterDC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPrinterDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ImageList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 = (int) true ;
    int arg4 = (int) 1 ;
    wxImageList *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "width",(char *) "height",(char *) "mask",(char *) "initialCount", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_ImageList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxImageList *)new wxImageList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result, 1); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ImageList(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ImageList",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Add(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxBitmap const &arg3_defvalue = wxNullBitmap ;
    wxBitmap *arg3 = (wxBitmap *) &arg3_defvalue ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bitmap",(char *) "mask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ImageList_Add",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
            if (SWIG_arg_fail(3)) SWIG_fail;
            if (arg3 == NULL) {
                SWIG_null_ref("wxBitmap");
            }
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Add((wxBitmap const &)*arg2,(wxBitmap const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_AddWithColourMask(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    int result;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bitmap",(char *) "maskColour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ImageList_AddWithColourMask",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Add((wxBitmap const &)*arg2,(wxColour const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_AddIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    wxIcon *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_AddIcon",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxIcon, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxIcon");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Add((wxIcon const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_GetBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    SwigValueWrapper<wxBitmap > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_GetBitmap",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxImageList const *)arg1)->GetBitmap(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBitmap * resultptr;
        resultptr = new wxBitmap((wxBitmap &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxBitmap, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_GetIcon(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    wxIcon result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_GetIcon",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxImageList const *)arg1)->GetIcon(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxIcon * resultptr;
        resultptr = new wxIcon((wxIcon &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxIcon, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Replace(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    wxBitmap *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index",(char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ImageList_Replace",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Replace(arg2,(wxBitmap const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Draw(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    wxDC *arg3 = 0 ;
    int arg4 ;
    int arg5 ;
    int arg6 = (int) wxIMAGELIST_DRAW_NORMAL ;
    bool arg7 = (bool) (bool)false ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index",(char *) "dc",(char *) "x",(char *) "x",(char *) "flags",(char *) "solidBackground", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|OO:ImageList_Draw",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxDC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    if (obj5) {
        {
            arg6 = (int)(SWIG_As_int(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = (bool const)(SWIG_As_bool(obj6)); 
            if (SWIG_arg_fail(7)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Draw(arg2,*arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_GetImageCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ImageList_GetImageCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetImageCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Remove(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_Remove",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Remove(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_RemoveAll(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ImageList_RemoveAll",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->RemoveAll();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_GetSize(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    int *arg4 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_GetSize",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxImageList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetSize(arg2,*arg3,*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ImageList_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxImageList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_NORMAL_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NORMAL_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_NORMAL_FONT_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxNORMAL_FONT), SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_SMALL_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SMALL_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_SMALL_FONT_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxSMALL_FONT), SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_ITALIC_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ITALIC_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_ITALIC_FONT_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxITALIC_FONT), SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_SWISS_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SWISS_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_SWISS_FONT_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxSWISS_FONT), SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_RED_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RED_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_RED_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxRED_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_CYAN_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CYAN_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_CYAN_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxCYAN_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_GREEN_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREEN_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_GREEN_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxGREEN_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_BLACK_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxBLACK_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_WHITE_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable WHITE_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_WHITE_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxWHITE_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_TRANSPARENT_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TRANSPARENT_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_TRANSPARENT_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxTRANSPARENT_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_BLACK_DASHED_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK_DASHED_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_DASHED_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxBLACK_DASHED_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_GREY_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREY_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_GREY_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxGREY_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_MEDIUM_GREY_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable MEDIUM_GREY_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_MEDIUM_GREY_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxMEDIUM_GREY_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_LIGHT_GREY_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable LIGHT_GREY_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_LIGHT_GREY_PEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxLIGHT_GREY_PEN), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_BLUE_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLUE_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_BLUE_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxBLUE_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_GREEN_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREEN_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_GREEN_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxGREEN_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_WHITE_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable WHITE_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_WHITE_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxWHITE_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_BLACK_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxBLACK_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_TRANSPARENT_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TRANSPARENT_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_TRANSPARENT_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxTRANSPARENT_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_CYAN_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CYAN_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_CYAN_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxCYAN_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_RED_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RED_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_RED_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxRED_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_GREY_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREY_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_GREY_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxGREY_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_MEDIUM_GREY_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable MEDIUM_GREY_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_MEDIUM_GREY_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxMEDIUM_GREY_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_LIGHT_GREY_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable LIGHT_GREY_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_LIGHT_GREY_BRUSH_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxLIGHT_GREY_BRUSH), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_BLACK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxBLACK), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_WHITE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable WHITE is read-only.");
    return 1;
}


static PyObject *_wrap_WHITE_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxWHITE), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_RED_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RED is read-only.");
    return 1;
}


static PyObject *_wrap_RED_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxRED), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_BLUE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLUE is read-only.");
    return 1;
}


static PyObject *_wrap_BLUE_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxBLUE), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_GREEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREEN is read-only.");
    return 1;
}


static PyObject *_wrap_GREEN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxGREEN), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_CYAN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CYAN is read-only.");
    return 1;
}


static PyObject *_wrap_CYAN_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxCYAN), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_LIGHT_GREY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable LIGHT_GREY is read-only.");
    return 1;
}


static PyObject *_wrap_LIGHT_GREY_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxLIGHT_GREY), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_STANDARD_CURSOR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable STANDARD_CURSOR is read-only.");
    return 1;
}


static PyObject *_wrap_STANDARD_CURSOR_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxSTANDARD_CURSOR), SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_HOURGLASS_CURSOR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable HOURGLASS_CURSOR is read-only.");
    return 1;
}


static PyObject *_wrap_HOURGLASS_CURSOR_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxHOURGLASS_CURSOR), SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_CROSS_CURSOR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CROSS_CURSOR is read-only.");
    return 1;
}


static PyObject *_wrap_CROSS_CURSOR_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxCROSS_CURSOR), SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_NullBitmap_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullBitmap is read-only.");
    return 1;
}


static PyObject *_wrap_NullBitmap_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullBitmap), SWIGTYPE_p_wxBitmap, 0);
    return pyobj;
}


static int _wrap_NullIcon_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullIcon is read-only.");
    return 1;
}


static PyObject *_wrap_NullIcon_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullIcon), SWIGTYPE_p_wxIcon, 0);
    return pyobj;
}


static int _wrap_NullCursor_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullCursor is read-only.");
    return 1;
}


static PyObject *_wrap_NullCursor_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullCursor), SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_NullPen_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullPen is read-only.");
    return 1;
}


static PyObject *_wrap_NullPen_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullPen), SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_NullBrush_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullBrush is read-only.");
    return 1;
}


static PyObject *_wrap_NullBrush_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullBrush), SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_NullPalette_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullPalette is read-only.");
    return 1;
}


static PyObject *_wrap_NullPalette_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullPalette), SWIGTYPE_p_wxPalette, 0);
    return pyobj;
}


static int _wrap_NullFont_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullFont is read-only.");
    return 1;
}


static PyObject *_wrap_NullFont_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullFont), SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_NullColour_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullColour is read-only.");
    return 1;
}


static PyObject *_wrap_NullColour_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&wxNullColour), SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static PyObject *_wrap_PenList_AddPen(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    wxPen *arg2 = (wxPen *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pen", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PenList_AddPen",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPenList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddPen(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PenList_FindOrCreatePen(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    wxColour *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    wxPen *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour",(char *) "width",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:PenList_FindOrCreatePen",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPenList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPen *)(arg1)->FindOrCreatePen((wxColour const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPen, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PenList_RemovePen(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    wxPen *arg2 = (wxPen *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pen", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PenList_RemovePen",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPenList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxPen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemovePen(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PenList_GetCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PenList_GetCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPenList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PenList_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPenList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_BrushList_AddBrush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    wxBrush *arg2 = (wxBrush *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BrushList_AddBrush",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrushList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddBrush(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BrushList_FindOrCreateBrush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    wxColour *arg2 = 0 ;
    int arg3 = (int) wxSOLID ;
    wxBrush *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:BrushList_FindOrCreateBrush",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrushList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBrush *)(arg1)->FindOrCreateBrush((wxColour const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxBrush, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BrushList_RemoveBrush(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    wxBrush *arg2 = (wxBrush *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BrushList_RemoveBrush",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrushList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxBrush, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemoveBrush(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BrushList_GetCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:BrushList_GetCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxBrushList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BrushList_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBrushList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ColourDatabase(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ColourDatabase",kwnames)) goto fail;
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColourDatabase *)new wxColourDatabase();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxColourDatabase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ColourDatabase(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ColourDatabase",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColourDatabase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ColourDatabase_Find(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxString *arg2 = 0 ;
    wxColour result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ColourDatabase_Find",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColourDatabase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxColourDatabase const *)arg1)->Find((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ColourDatabase_FindName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxColour *arg2 = 0 ;
    wxString result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ColourDatabase_FindName",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColourDatabase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxColourDatabase const *)arg1)->FindName((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ColourDatabase_AddColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxString *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    bool temp2 = false ;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ColourDatabase_AddColour",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColourDatabase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddColour((wxString const &)*arg2,(wxColour const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ColourDatabase_Append(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:ColourDatabase_Append",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxColourDatabase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxColourDatabase_Append(arg1,(wxString const &)*arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * ColourDatabase_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxColourDatabase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_FontList_AddFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    wxFont *arg2 = (wxFont *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontList_AddFont",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddFont(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontList_FindOrCreateFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool arg6 = (bool) false ;
    wxString const &arg7_defvalue = wxPyEmptyString ;
    wxString *arg7 = (wxString *) &arg7_defvalue ;
    wxFontEncoding arg8 = (wxFontEncoding) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    bool temp7 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "point_size",(char *) "family",(char *) "style",(char *) "weight",(char *) "underline",(char *) "facename",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|OOO:FontList_FindOrCreateFont",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    if (obj5) {
        {
            arg6 = (bool)(SWIG_As_bool(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = wxString_in_helper(obj6);
            if (arg7 == NULL) SWIG_fail;
            temp7 = true;
        }
    }
    if (obj7) {
        {
            arg8 = (wxFontEncoding)(SWIG_As_int(obj7)); 
            if (SWIG_arg_fail(8)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)(arg1)->FindOrCreateFont(arg2,arg3,arg4,arg5,arg6,(wxString const &)*arg7,(wxFontEncoding )arg8);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFont, 0);
    {
        if (temp7)
        delete arg7;
    }
    return resultobj;
    fail:
    {
        if (temp7)
        delete arg7;
    }
    return NULL;
}


static PyObject *_wrap_FontList_RemoveFont(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    wxFont *arg2 = (wxFont *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontList_RemoveFont",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemoveFont(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontList_GetCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontList_GetCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFontList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FontList_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFontList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_TheFontList_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TheFontList is read-only.");
    return 1;
}


static PyObject *_wrap_TheFontList_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxTheFontList), SWIGTYPE_p_wxFontList, 0);
    return pyobj;
}


static int _wrap_ThePenList_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ThePenList is read-only.");
    return 1;
}


static PyObject *_wrap_ThePenList_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxThePenList), SWIGTYPE_p_wxPenList, 0);
    return pyobj;
}


static int _wrap_TheBrushList_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TheBrushList is read-only.");
    return 1;
}


static PyObject *_wrap_TheBrushList_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxTheBrushList), SWIGTYPE_p_wxBrushList, 0);
    return pyobj;
}


static int _wrap_TheColourDatabase_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TheColourDatabase is read-only.");
    return 1;
}


static PyObject *_wrap_TheColourDatabase_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(wxTheColourDatabase), SWIGTYPE_p_wxColourDatabase, 0);
    return pyobj;
}


static PyObject *_wrap_new_Effects(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_Effects",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxEffects *)new wxEffects();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxEffects, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetHighlightColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetHighlightColour",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetHighlightColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetLightShadow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetLightShadow",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetLightShadow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetFaceColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetFaceColour",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetFaceColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetMediumShadow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetMediumShadow",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetMediumShadow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetDarkShadow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetDarkShadow",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetDarkShadow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetHighlightColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetHighlightColour",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetHighlightColour((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetLightShadow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetLightShadow",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLightShadow((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetFaceColour(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetFaceColour",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFaceColour((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetMediumShadow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetMediumShadow",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMediumShadow((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetDarkShadow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetDarkShadow",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDarkShadow((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_Set(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    wxColour *arg4 = 0 ;
    wxColour *arg5 = 0 ;
    wxColour *arg6 = 0 ;
    wxColour temp2 ;
    wxColour temp3 ;
    wxColour temp4 ;
    wxColour temp5 ;
    wxColour temp6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "highlightColour",(char *) "lightShadow",(char *) "faceColour",(char *) "mediumShadow",(char *) "darkShadow", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:Effects_Set",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = &temp4;
        if ( ! wxColour_helper(obj3, &arg4)) SWIG_fail;
    }
    {
        arg5 = &temp5;
        if ( ! wxColour_helper(obj4, &arg5)) SWIG_fail;
    }
    {
        arg6 = &temp6;
        if ( ! wxColour_helper(obj5, &arg6)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Set((wxColour const &)*arg2,(wxColour const &)*arg3,(wxColour const &)*arg4,(wxColour const &)*arg5,(wxColour const &)*arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_DrawSunkenEdge(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxDC *arg2 = 0 ;
    wxRect *arg3 = 0 ;
    int arg4 = (int) 1 ;
    wxRect temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dc",(char *) "rect",(char *) "borderSize", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Effects_DrawSunkenEdge",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("wxDC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxRect_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int)(SWIG_As_int(obj3)); 
            if (SWIG_arg_fail(4)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawSunkenEdge(*arg2,(wxRect const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_TileBitmap(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxRect *arg2 = 0 ;
    wxDC *arg3 = 0 ;
    wxBitmap *arg4 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect",(char *) "dc",(char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Effects_TileBitmap",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxEffects, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_wxDC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("wxDC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_wxBitmap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("wxBitmap");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->TileBitmap((wxRect const &)*arg2,*arg3,*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Effects_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxEffects, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_GDIObject", (PyCFunction) _wrap_new_GDIObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_GDIObject", (PyCFunction) _wrap_delete_GDIObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GDIObject_GetVisible", (PyCFunction) _wrap_GDIObject_GetVisible, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GDIObject_SetVisible", (PyCFunction) _wrap_GDIObject_SetVisible, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GDIObject_IsNull", (PyCFunction) _wrap_GDIObject_IsNull, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GDIObject_swigregister", GDIObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Colour", (PyCFunction) _wrap_new_Colour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_NamedColour", (PyCFunction) _wrap_new_NamedColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_ColourRGB", (PyCFunction) _wrap_new_ColourRGB, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Colour", (PyCFunction) _wrap_delete_Colour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_Red", (PyCFunction) _wrap_Colour_Red, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_Green", (PyCFunction) _wrap_Colour_Green, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_Blue", (PyCFunction) _wrap_Colour_Blue, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_Ok", (PyCFunction) _wrap_Colour_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_Set", (PyCFunction) _wrap_Colour_Set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_SetRGB", (PyCFunction) _wrap_Colour_SetRGB, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_SetFromName", (PyCFunction) _wrap_Colour_SetFromName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_GetPixel", (PyCFunction) _wrap_Colour_GetPixel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour___eq__", (PyCFunction) _wrap_Colour___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour___ne__", (PyCFunction) _wrap_Colour___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_Get", (PyCFunction) _wrap_Colour_Get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_GetRGB", (PyCFunction) _wrap_Colour_GetRGB, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Colour_swigregister", Colour_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Palette", (PyCFunction) _wrap_new_Palette, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Palette", (PyCFunction) _wrap_delete_Palette, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Palette_GetPixel", (PyCFunction) _wrap_Palette_GetPixel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Palette_GetRGB", (PyCFunction) _wrap_Palette_GetRGB, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Palette_GetColoursCount", (PyCFunction) _wrap_Palette_GetColoursCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Palette_Ok", (PyCFunction) _wrap_Palette_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Palette_swigregister", Palette_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Pen", (PyCFunction) _wrap_new_Pen, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Pen", (PyCFunction) _wrap_delete_Pen, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_GetCap", (PyCFunction) _wrap_Pen_GetCap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_GetColour", (PyCFunction) _wrap_Pen_GetColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_GetJoin", (PyCFunction) _wrap_Pen_GetJoin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_GetStyle", (PyCFunction) _wrap_Pen_GetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_GetWidth", (PyCFunction) _wrap_Pen_GetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_Ok", (PyCFunction) _wrap_Pen_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_SetCap", (PyCFunction) _wrap_Pen_SetCap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_SetColour", (PyCFunction) _wrap_Pen_SetColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_SetJoin", (PyCFunction) _wrap_Pen_SetJoin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_SetStyle", (PyCFunction) _wrap_Pen_SetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_SetWidth", (PyCFunction) _wrap_Pen_SetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_SetDashes", (PyCFunction) _wrap_Pen_SetDashes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_GetDashes", (PyCFunction) _wrap_Pen_GetDashes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen__SetDashes", (PyCFunction) _wrap_Pen__SetDashes, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_GetDashCount", (PyCFunction) _wrap_Pen_GetDashCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen___eq__", (PyCFunction) _wrap_Pen___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen___ne__", (PyCFunction) _wrap_Pen___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Pen_swigregister", Pen_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Brush", (PyCFunction) _wrap_new_Brush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_BrushFromBitmap", (PyCFunction) _wrap_new_BrushFromBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Brush", (PyCFunction) _wrap_delete_Brush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_SetColour", (PyCFunction) _wrap_Brush_SetColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_SetStyle", (PyCFunction) _wrap_Brush_SetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_SetStipple", (PyCFunction) _wrap_Brush_SetStipple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_GetColour", (PyCFunction) _wrap_Brush_GetColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_GetStyle", (PyCFunction) _wrap_Brush_GetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_GetStipple", (PyCFunction) _wrap_Brush_GetStipple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_IsHatch", (PyCFunction) _wrap_Brush_IsHatch, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_Ok", (PyCFunction) _wrap_Brush_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Brush_swigregister", Brush_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Bitmap", (PyCFunction) _wrap_new_Bitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Bitmap", (PyCFunction) _wrap_delete_Bitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_EmptyBitmap", (PyCFunction) _wrap_new_EmptyBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_BitmapFromIcon", (PyCFunction) _wrap_new_BitmapFromIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_BitmapFromImage", (PyCFunction) _wrap_new_BitmapFromImage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_BitmapFromXPMData", (PyCFunction) _wrap_new_BitmapFromXPMData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_BitmapFromBits", (PyCFunction) _wrap_new_BitmapFromBits, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_Ok", (PyCFunction) _wrap_Bitmap_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_GetWidth", (PyCFunction) _wrap_Bitmap_GetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_GetHeight", (PyCFunction) _wrap_Bitmap_GetHeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_GetDepth", (PyCFunction) _wrap_Bitmap_GetDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_GetSize", (PyCFunction) _wrap_Bitmap_GetSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_ConvertToImage", (PyCFunction) _wrap_Bitmap_ConvertToImage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_GetMask", (PyCFunction) _wrap_Bitmap_GetMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_SetMask", (PyCFunction) _wrap_Bitmap_SetMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_SetMaskColour", (PyCFunction) _wrap_Bitmap_SetMaskColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_GetSubBitmap", (PyCFunction) _wrap_Bitmap_GetSubBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_SaveFile", (PyCFunction) _wrap_Bitmap_SaveFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_LoadFile", (PyCFunction) _wrap_Bitmap_LoadFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_GetPalette", (PyCFunction) _wrap_Bitmap_GetPalette, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_CopyFromIcon", (PyCFunction) _wrap_Bitmap_CopyFromIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_SetHeight", (PyCFunction) _wrap_Bitmap_SetHeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_SetWidth", (PyCFunction) _wrap_Bitmap_SetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_SetDepth", (PyCFunction) _wrap_Bitmap_SetDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_SetSize", (PyCFunction) _wrap_Bitmap_SetSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap___eq__", (PyCFunction) _wrap_Bitmap___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap___ne__", (PyCFunction) _wrap_Bitmap___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Bitmap_swigregister", Bitmap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Mask", (PyCFunction) _wrap_new_Mask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Mask_swigregister", Mask_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Icon", (PyCFunction) _wrap_new_Icon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Icon", (PyCFunction) _wrap_delete_Icon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_EmptyIcon", (PyCFunction) _wrap_new_EmptyIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_IconFromLocation", (PyCFunction) _wrap_new_IconFromLocation, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_IconFromBitmap", (PyCFunction) _wrap_new_IconFromBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_IconFromXPMData", (PyCFunction) _wrap_new_IconFromXPMData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_LoadFile", (PyCFunction) _wrap_Icon_LoadFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_Ok", (PyCFunction) _wrap_Icon_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_GetWidth", (PyCFunction) _wrap_Icon_GetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_GetHeight", (PyCFunction) _wrap_Icon_GetHeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_GetDepth", (PyCFunction) _wrap_Icon_GetDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_SetWidth", (PyCFunction) _wrap_Icon_SetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_SetHeight", (PyCFunction) _wrap_Icon_SetHeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_SetDepth", (PyCFunction) _wrap_Icon_SetDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_CopyFromBitmap", (PyCFunction) _wrap_Icon_CopyFromBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Icon_swigregister", Icon_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IconLocation", (PyCFunction) _wrap_new_IconLocation, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_IconLocation", (PyCFunction) _wrap_delete_IconLocation, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconLocation_IsOk", (PyCFunction) _wrap_IconLocation_IsOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconLocation_SetFileName", (PyCFunction) _wrap_IconLocation_SetFileName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconLocation_GetFileName", (PyCFunction) _wrap_IconLocation_GetFileName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconLocation_SetIndex", (PyCFunction) _wrap_IconLocation_SetIndex, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconLocation_GetIndex", (PyCFunction) _wrap_IconLocation_GetIndex, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconLocation_swigregister", IconLocation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IconBundle", (PyCFunction) _wrap_new_IconBundle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_IconBundleFromFile", (PyCFunction) _wrap_new_IconBundleFromFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_IconBundleFromIcon", (PyCFunction) _wrap_new_IconBundleFromIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_IconBundle", (PyCFunction) _wrap_delete_IconBundle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconBundle_AddIcon", (PyCFunction) _wrap_IconBundle_AddIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconBundle_AddIconFromFile", (PyCFunction) _wrap_IconBundle_AddIconFromFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconBundle_GetIcon", (PyCFunction) _wrap_IconBundle_GetIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IconBundle_swigregister", IconBundle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Cursor", (PyCFunction) _wrap_new_Cursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Cursor", (PyCFunction) _wrap_delete_Cursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_StockCursor", (PyCFunction) _wrap_new_StockCursor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_CursorFromImage", (PyCFunction) _wrap_new_CursorFromImage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Cursor_Ok", (PyCFunction) _wrap_Cursor_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Cursor_swigregister", Cursor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Region", (PyCFunction) _wrap_new_Region, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_RegionFromBitmap", (PyCFunction) _wrap_new_RegionFromBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_RegionFromBitmapColour", (PyCFunction) _wrap_new_RegionFromBitmapColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_RegionFromPoints", (PyCFunction) _wrap_new_RegionFromPoints, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Region", (PyCFunction) _wrap_delete_Region, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_Clear", (PyCFunction) _wrap_Region_Clear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_Offset", (PyCFunction) _wrap_Region_Offset, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_Contains", (PyCFunction) _wrap_Region_Contains, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_ContainsPoint", (PyCFunction) _wrap_Region_ContainsPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_ContainsRect", (PyCFunction) _wrap_Region_ContainsRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_ContainsRectDim", (PyCFunction) _wrap_Region_ContainsRectDim, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_GetBox", (PyCFunction) _wrap_Region_GetBox, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_Intersect", (PyCFunction) _wrap_Region_Intersect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_IntersectRect", (PyCFunction) _wrap_Region_IntersectRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_IntersectRegion", (PyCFunction) _wrap_Region_IntersectRegion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_IsEmpty", (PyCFunction) _wrap_Region_IsEmpty, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_Union", (PyCFunction) _wrap_Region_Union, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_UnionRect", (PyCFunction) _wrap_Region_UnionRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_UnionRegion", (PyCFunction) _wrap_Region_UnionRegion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_Subtract", (PyCFunction) _wrap_Region_Subtract, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_SubtractRect", (PyCFunction) _wrap_Region_SubtractRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_SubtractRegion", (PyCFunction) _wrap_Region_SubtractRegion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_Xor", (PyCFunction) _wrap_Region_Xor, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_XorRect", (PyCFunction) _wrap_Region_XorRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_XorRegion", (PyCFunction) _wrap_Region_XorRegion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_ConvertToBitmap", (PyCFunction) _wrap_Region_ConvertToBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_UnionBitmap", (PyCFunction) _wrap_Region_UnionBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_UnionBitmapColour", (PyCFunction) _wrap_Region_UnionBitmapColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Region_swigregister", Region_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RegionIterator", (PyCFunction) _wrap_new_RegionIterator, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_RegionIterator", (PyCFunction) _wrap_delete_RegionIterator, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_GetX", (PyCFunction) _wrap_RegionIterator_GetX, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_GetY", (PyCFunction) _wrap_RegionIterator_GetY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_GetW", (PyCFunction) _wrap_RegionIterator_GetW, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_GetWidth", (PyCFunction) _wrap_RegionIterator_GetWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_GetH", (PyCFunction) _wrap_RegionIterator_GetH, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_GetHeight", (PyCFunction) _wrap_RegionIterator_GetHeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_GetRect", (PyCFunction) _wrap_RegionIterator_GetRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_HaveRects", (PyCFunction) _wrap_RegionIterator_HaveRects, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_Reset", (PyCFunction) _wrap_RegionIterator_Reset, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_Next", (PyCFunction) _wrap_RegionIterator_Next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator___nonzero__", (PyCFunction) _wrap_RegionIterator___nonzero__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RegionIterator_swigregister", RegionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NativeFontInfo", (PyCFunction) _wrap_new_NativeFontInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_NativeFontInfo", (PyCFunction) _wrap_delete_NativeFontInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_Init", (PyCFunction) _wrap_NativeFontInfo_Init, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_InitFromFont", (PyCFunction) _wrap_NativeFontInfo_InitFromFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_GetPointSize", (PyCFunction) _wrap_NativeFontInfo_GetPointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_GetStyle", (PyCFunction) _wrap_NativeFontInfo_GetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_GetWeight", (PyCFunction) _wrap_NativeFontInfo_GetWeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_GetUnderlined", (PyCFunction) _wrap_NativeFontInfo_GetUnderlined, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_GetFaceName", (PyCFunction) _wrap_NativeFontInfo_GetFaceName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_GetFamily", (PyCFunction) _wrap_NativeFontInfo_GetFamily, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_GetEncoding", (PyCFunction) _wrap_NativeFontInfo_GetEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_SetPointSize", (PyCFunction) _wrap_NativeFontInfo_SetPointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_SetStyle", (PyCFunction) _wrap_NativeFontInfo_SetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_SetWeight", (PyCFunction) _wrap_NativeFontInfo_SetWeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_SetUnderlined", (PyCFunction) _wrap_NativeFontInfo_SetUnderlined, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_SetFaceName", (PyCFunction) _wrap_NativeFontInfo_SetFaceName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_SetFamily", (PyCFunction) _wrap_NativeFontInfo_SetFamily, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_SetEncoding", (PyCFunction) _wrap_NativeFontInfo_SetEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_FromString", (PyCFunction) _wrap_NativeFontInfo_FromString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_ToString", (PyCFunction) _wrap_NativeFontInfo_ToString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo___str__", (PyCFunction) _wrap_NativeFontInfo___str__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_FromUserString", (PyCFunction) _wrap_NativeFontInfo_FromUserString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_ToUserString", (PyCFunction) _wrap_NativeFontInfo_ToUserString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeFontInfo_swigregister", NativeFontInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"NativeEncodingInfo_facename_set", (PyCFunction) _wrap_NativeEncodingInfo_facename_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeEncodingInfo_facename_get", (PyCFunction) _wrap_NativeEncodingInfo_facename_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeEncodingInfo_encoding_set", (PyCFunction) _wrap_NativeEncodingInfo_encoding_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeEncodingInfo_encoding_get", (PyCFunction) _wrap_NativeEncodingInfo_encoding_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_NativeEncodingInfo", (PyCFunction) _wrap_new_NativeEncodingInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_NativeEncodingInfo", (PyCFunction) _wrap_delete_NativeEncodingInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeEncodingInfo_FromString", (PyCFunction) _wrap_NativeEncodingInfo_FromString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeEncodingInfo_ToString", (PyCFunction) _wrap_NativeEncodingInfo_ToString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NativeEncodingInfo_swigregister", NativeEncodingInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetNativeFontEncoding", (PyCFunction) _wrap_GetNativeFontEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TestFontEncoding", (PyCFunction) _wrap_TestFontEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_FontMapper", (PyCFunction) _wrap_new_FontMapper, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_FontMapper", (PyCFunction) _wrap_delete_FontMapper, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_Get", (PyCFunction) _wrap_FontMapper_Get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_Set", (PyCFunction) _wrap_FontMapper_Set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_CharsetToEncoding", (PyCFunction) _wrap_FontMapper_CharsetToEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_GetSupportedEncodingsCount", (PyCFunction) _wrap_FontMapper_GetSupportedEncodingsCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_GetEncoding", (PyCFunction) _wrap_FontMapper_GetEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_GetEncodingName", (PyCFunction) _wrap_FontMapper_GetEncodingName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_GetEncodingDescription", (PyCFunction) _wrap_FontMapper_GetEncodingDescription, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_GetEncodingFromName", (PyCFunction) _wrap_FontMapper_GetEncodingFromName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_SetConfig", (PyCFunction) _wrap_FontMapper_SetConfig, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_SetConfigPath", (PyCFunction) _wrap_FontMapper_SetConfigPath, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_GetDefaultConfigPath", (PyCFunction) _wrap_FontMapper_GetDefaultConfigPath, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_GetAltForEncoding", (PyCFunction) _wrap_FontMapper_GetAltForEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_IsEncodingAvailable", (PyCFunction) _wrap_FontMapper_IsEncodingAvailable, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_SetDialogParent", (PyCFunction) _wrap_FontMapper_SetDialogParent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_SetDialogTitle", (PyCFunction) _wrap_FontMapper_SetDialogTitle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontMapper_swigregister", FontMapper_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Font", (PyCFunction) _wrap_new_Font, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Font", (PyCFunction) _wrap_delete_Font, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_FontFromNativeInfo", (PyCFunction) _wrap_new_FontFromNativeInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_FontFromNativeInfoString", (PyCFunction) _wrap_new_FontFromNativeInfoString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_FFont", (PyCFunction) _wrap_new_FFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_FontFromPixelSize", (PyCFunction) _wrap_new_FontFromPixelSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_FFontFromPixelSize", (PyCFunction) _wrap_new_FFontFromPixelSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_Ok", (PyCFunction) _wrap_Font_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font___eq__", (PyCFunction) _wrap_Font___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font___ne__", (PyCFunction) _wrap_Font___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetPointSize", (PyCFunction) _wrap_Font_GetPointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetPixelSize", (PyCFunction) _wrap_Font_GetPixelSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_IsUsingSizeInPixels", (PyCFunction) _wrap_Font_IsUsingSizeInPixels, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetFamily", (PyCFunction) _wrap_Font_GetFamily, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetStyle", (PyCFunction) _wrap_Font_GetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetWeight", (PyCFunction) _wrap_Font_GetWeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetUnderlined", (PyCFunction) _wrap_Font_GetUnderlined, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetFaceName", (PyCFunction) _wrap_Font_GetFaceName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetEncoding", (PyCFunction) _wrap_Font_GetEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetNativeFontInfo", (PyCFunction) _wrap_Font_GetNativeFontInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_IsFixedWidth", (PyCFunction) _wrap_Font_IsFixedWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetNativeFontInfoDesc", (PyCFunction) _wrap_Font_GetNativeFontInfoDesc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetNativeFontInfoUserDesc", (PyCFunction) _wrap_Font_GetNativeFontInfoUserDesc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetPointSize", (PyCFunction) _wrap_Font_SetPointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetPixelSize", (PyCFunction) _wrap_Font_SetPixelSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetFamily", (PyCFunction) _wrap_Font_SetFamily, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetStyle", (PyCFunction) _wrap_Font_SetStyle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetWeight", (PyCFunction) _wrap_Font_SetWeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetFaceName", (PyCFunction) _wrap_Font_SetFaceName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetUnderlined", (PyCFunction) _wrap_Font_SetUnderlined, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetEncoding", (PyCFunction) _wrap_Font_SetEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetNativeFontInfo", (PyCFunction) _wrap_Font_SetNativeFontInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetNativeFontInfoFromString", (PyCFunction) _wrap_Font_SetNativeFontInfoFromString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetNativeFontInfoUserDesc", (PyCFunction) _wrap_Font_SetNativeFontInfoUserDesc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetFamilyString", (PyCFunction) _wrap_Font_GetFamilyString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetStyleString", (PyCFunction) _wrap_Font_GetStyleString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetWeightString", (PyCFunction) _wrap_Font_GetWeightString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetNoAntiAliasing", (PyCFunction) _wrap_Font_SetNoAntiAliasing, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetNoAntiAliasing", (PyCFunction) _wrap_Font_GetNoAntiAliasing, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_GetDefaultEncoding", (PyCFunction) _wrap_Font_GetDefaultEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_SetDefaultEncoding", (PyCFunction) _wrap_Font_SetDefaultEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Font_swigregister", Font_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FontEnumerator", (PyCFunction) _wrap_new_FontEnumerator, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_FontEnumerator", (PyCFunction) _wrap_delete_FontEnumerator, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontEnumerator__setCallbackInfo", (PyCFunction) _wrap_FontEnumerator__setCallbackInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontEnumerator_EnumerateFacenames", (PyCFunction) _wrap_FontEnumerator_EnumerateFacenames, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontEnumerator_EnumerateEncodings", (PyCFunction) _wrap_FontEnumerator_EnumerateEncodings, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontEnumerator_GetEncodings", (PyCFunction) _wrap_FontEnumerator_GetEncodings, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontEnumerator_GetFacenames", (PyCFunction) _wrap_FontEnumerator_GetFacenames, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontEnumerator_swigregister", FontEnumerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"LanguageInfo_Language_set", (PyCFunction) _wrap_LanguageInfo_Language_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LanguageInfo_Language_get", (PyCFunction) _wrap_LanguageInfo_Language_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LanguageInfo_CanonicalName_set", (PyCFunction) _wrap_LanguageInfo_CanonicalName_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LanguageInfo_CanonicalName_get", (PyCFunction) _wrap_LanguageInfo_CanonicalName_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LanguageInfo_Description_set", (PyCFunction) _wrap_LanguageInfo_Description_set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LanguageInfo_Description_get", (PyCFunction) _wrap_LanguageInfo_Description_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LanguageInfo_swigregister", LanguageInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Locale", (PyCFunction) _wrap_new_Locale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Locale", (PyCFunction) _wrap_delete_Locale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_Init1", (PyCFunction) _wrap_Locale_Init1, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_Init2", (PyCFunction) _wrap_Locale_Init2, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetSystemLanguage", (PyCFunction) _wrap_Locale_GetSystemLanguage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetSystemEncoding", (PyCFunction) _wrap_Locale_GetSystemEncoding, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetSystemEncodingName", (PyCFunction) _wrap_Locale_GetSystemEncodingName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_IsOk", (PyCFunction) _wrap_Locale_IsOk, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetLocale", (PyCFunction) _wrap_Locale_GetLocale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetLanguage", (PyCFunction) _wrap_Locale_GetLanguage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetSysName", (PyCFunction) _wrap_Locale_GetSysName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetCanonicalName", (PyCFunction) _wrap_Locale_GetCanonicalName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_AddCatalogLookupPathPrefix", (PyCFunction) _wrap_Locale_AddCatalogLookupPathPrefix, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_AddCatalog", (PyCFunction) _wrap_Locale_AddCatalog, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_IsLoaded", (PyCFunction) _wrap_Locale_IsLoaded, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetLanguageInfo", (PyCFunction) _wrap_Locale_GetLanguageInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetLanguageName", (PyCFunction) _wrap_Locale_GetLanguageName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_FindLanguageInfo", (PyCFunction) _wrap_Locale_FindLanguageInfo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_AddLanguage", (PyCFunction) _wrap_Locale_AddLanguage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetString", (PyCFunction) _wrap_Locale_GetString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_GetName", (PyCFunction) _wrap_Locale_GetName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Locale_swigregister", Locale_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetLocale", (PyCFunction) _wrap_GetLocale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GetTranslation", _wrap_GetTranslation, METH_VARARGS, NULL},
	 { (char *)"new_EncodingConverter", (PyCFunction) _wrap_new_EncodingConverter, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_EncodingConverter", (PyCFunction) _wrap_delete_EncodingConverter, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EncodingConverter_Init", (PyCFunction) _wrap_EncodingConverter_Init, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EncodingConverter_Convert", (PyCFunction) _wrap_EncodingConverter_Convert, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EncodingConverter_GetPlatformEquivalents", (PyCFunction) _wrap_EncodingConverter_GetPlatformEquivalents, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EncodingConverter_GetAllEquivalents", (PyCFunction) _wrap_EncodingConverter_GetAllEquivalents, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EncodingConverter_CanConvert", (PyCFunction) _wrap_EncodingConverter_CanConvert, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"EncodingConverter_swigregister", EncodingConverter_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DC", (PyCFunction) _wrap_delete_DC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_BeginDrawing", (PyCFunction) _wrap_DC_BeginDrawing, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_EndDrawing", (PyCFunction) _wrap_DC_EndDrawing, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_FloodFill", (PyCFunction) _wrap_DC_FloodFill, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_FloodFillPoint", (PyCFunction) _wrap_DC_FloodFillPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetPixel", (PyCFunction) _wrap_DC_GetPixel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetPixelPoint", (PyCFunction) _wrap_DC_GetPixelPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawLine", (PyCFunction) _wrap_DC_DrawLine, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawLinePoint", (PyCFunction) _wrap_DC_DrawLinePoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_CrossHair", (PyCFunction) _wrap_DC_CrossHair, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_CrossHairPoint", (PyCFunction) _wrap_DC_CrossHairPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawArc", (PyCFunction) _wrap_DC_DrawArc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawArcPoint", (PyCFunction) _wrap_DC_DrawArcPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawCheckMark", (PyCFunction) _wrap_DC_DrawCheckMark, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawCheckMarkRect", (PyCFunction) _wrap_DC_DrawCheckMarkRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawEllipticArc", (PyCFunction) _wrap_DC_DrawEllipticArc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawEllipticArcPointSize", (PyCFunction) _wrap_DC_DrawEllipticArcPointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawPoint", (PyCFunction) _wrap_DC_DrawPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawPointPoint", (PyCFunction) _wrap_DC_DrawPointPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRectangle", (PyCFunction) _wrap_DC_DrawRectangle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRectangleRect", (PyCFunction) _wrap_DC_DrawRectangleRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRectanglePointSize", (PyCFunction) _wrap_DC_DrawRectanglePointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRoundedRectangle", (PyCFunction) _wrap_DC_DrawRoundedRectangle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRoundedRectangleRect", (PyCFunction) _wrap_DC_DrawRoundedRectangleRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRoundedRectanglePointSize", (PyCFunction) _wrap_DC_DrawRoundedRectanglePointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawCircle", (PyCFunction) _wrap_DC_DrawCircle, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawCirclePoint", (PyCFunction) _wrap_DC_DrawCirclePoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawEllipse", (PyCFunction) _wrap_DC_DrawEllipse, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawEllipseRect", (PyCFunction) _wrap_DC_DrawEllipseRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawEllipsePointSize", (PyCFunction) _wrap_DC_DrawEllipsePointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawIcon", (PyCFunction) _wrap_DC_DrawIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawIconPoint", (PyCFunction) _wrap_DC_DrawIconPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawBitmap", (PyCFunction) _wrap_DC_DrawBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawBitmapPoint", (PyCFunction) _wrap_DC_DrawBitmapPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawText", (PyCFunction) _wrap_DC_DrawText, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawTextPoint", (PyCFunction) _wrap_DC_DrawTextPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRotatedText", (PyCFunction) _wrap_DC_DrawRotatedText, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawRotatedTextPoint", (PyCFunction) _wrap_DC_DrawRotatedTextPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_Blit", (PyCFunction) _wrap_DC_Blit, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_BlitPointSize", (PyCFunction) _wrap_DC_BlitPointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetClippingRegion", (PyCFunction) _wrap_DC_SetClippingRegion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetClippingRegionPointSize", (PyCFunction) _wrap_DC_SetClippingRegionPointSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetClippingRegionAsRegion", (PyCFunction) _wrap_DC_SetClippingRegionAsRegion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetClippingRect", (PyCFunction) _wrap_DC_SetClippingRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawLines", (PyCFunction) _wrap_DC_DrawLines, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawPolygon", (PyCFunction) _wrap_DC_DrawPolygon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawLabel", (PyCFunction) _wrap_DC_DrawLabel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawImageLabel", (PyCFunction) _wrap_DC_DrawImageLabel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DrawSpline", (PyCFunction) _wrap_DC_DrawSpline, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_Clear", (PyCFunction) _wrap_DC_Clear, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_StartDoc", (PyCFunction) _wrap_DC_StartDoc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_EndDoc", (PyCFunction) _wrap_DC_EndDoc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_StartPage", (PyCFunction) _wrap_DC_StartPage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_EndPage", (PyCFunction) _wrap_DC_EndPage, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetFont", (PyCFunction) _wrap_DC_SetFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetPen", (PyCFunction) _wrap_DC_SetPen, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetBrush", (PyCFunction) _wrap_DC_SetBrush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetBackground", (PyCFunction) _wrap_DC_SetBackground, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetBackgroundMode", (PyCFunction) _wrap_DC_SetBackgroundMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetPalette", (PyCFunction) _wrap_DC_SetPalette, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DestroyClippingRegion", (PyCFunction) _wrap_DC_DestroyClippingRegion, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetClippingBox", (PyCFunction) _wrap_DC_GetClippingBox, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetClippingRect", (PyCFunction) _wrap_DC_GetClippingRect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetCharHeight", (PyCFunction) _wrap_DC_GetCharHeight, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetCharWidth", (PyCFunction) _wrap_DC_GetCharWidth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetTextExtent", (PyCFunction) _wrap_DC_GetTextExtent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetFullTextExtent", (PyCFunction) _wrap_DC_GetFullTextExtent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetMultiLineTextExtent", (PyCFunction) _wrap_DC_GetMultiLineTextExtent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetPartialTextExtents", (PyCFunction) _wrap_DC_GetPartialTextExtents, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetSize", (PyCFunction) _wrap_DC_GetSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetSizeTuple", (PyCFunction) _wrap_DC_GetSizeTuple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetSizeMM", (PyCFunction) _wrap_DC_GetSizeMM, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetSizeMMTuple", (PyCFunction) _wrap_DC_GetSizeMMTuple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DeviceToLogicalX", (PyCFunction) _wrap_DC_DeviceToLogicalX, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DeviceToLogicalY", (PyCFunction) _wrap_DC_DeviceToLogicalY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DeviceToLogicalXRel", (PyCFunction) _wrap_DC_DeviceToLogicalXRel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_DeviceToLogicalYRel", (PyCFunction) _wrap_DC_DeviceToLogicalYRel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_LogicalToDeviceX", (PyCFunction) _wrap_DC_LogicalToDeviceX, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_LogicalToDeviceY", (PyCFunction) _wrap_DC_LogicalToDeviceY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_LogicalToDeviceXRel", (PyCFunction) _wrap_DC_LogicalToDeviceXRel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_LogicalToDeviceYRel", (PyCFunction) _wrap_DC_LogicalToDeviceYRel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_CanDrawBitmap", (PyCFunction) _wrap_DC_CanDrawBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_CanGetTextExtent", (PyCFunction) _wrap_DC_CanGetTextExtent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetDepth", (PyCFunction) _wrap_DC_GetDepth, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetPPI", (PyCFunction) _wrap_DC_GetPPI, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_Ok", (PyCFunction) _wrap_DC_Ok, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetBackgroundMode", (PyCFunction) _wrap_DC_GetBackgroundMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetBackground", (PyCFunction) _wrap_DC_GetBackground, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetBrush", (PyCFunction) _wrap_DC_GetBrush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetFont", (PyCFunction) _wrap_DC_GetFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetPen", (PyCFunction) _wrap_DC_GetPen, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetTextBackground", (PyCFunction) _wrap_DC_GetTextBackground, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetTextForeground", (PyCFunction) _wrap_DC_GetTextForeground, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetTextForeground", (PyCFunction) _wrap_DC_SetTextForeground, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetTextBackground", (PyCFunction) _wrap_DC_SetTextBackground, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetMapMode", (PyCFunction) _wrap_DC_GetMapMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetMapMode", (PyCFunction) _wrap_DC_SetMapMode, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetUserScale", (PyCFunction) _wrap_DC_GetUserScale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetUserScale", (PyCFunction) _wrap_DC_SetUserScale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetLogicalScale", (PyCFunction) _wrap_DC_GetLogicalScale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetLogicalScale", (PyCFunction) _wrap_DC_SetLogicalScale, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetLogicalOrigin", (PyCFunction) _wrap_DC_GetLogicalOrigin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetLogicalOriginTuple", (PyCFunction) _wrap_DC_GetLogicalOriginTuple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetLogicalOrigin", (PyCFunction) _wrap_DC_SetLogicalOrigin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetLogicalOriginPoint", (PyCFunction) _wrap_DC_SetLogicalOriginPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetDeviceOrigin", (PyCFunction) _wrap_DC_GetDeviceOrigin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetDeviceOriginTuple", (PyCFunction) _wrap_DC_GetDeviceOriginTuple, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetDeviceOrigin", (PyCFunction) _wrap_DC_SetDeviceOrigin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetDeviceOriginPoint", (PyCFunction) _wrap_DC_SetDeviceOriginPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetAxisOrientation", (PyCFunction) _wrap_DC_SetAxisOrientation, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetLogicalFunction", (PyCFunction) _wrap_DC_GetLogicalFunction, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_SetLogicalFunction", (PyCFunction) _wrap_DC_SetLogicalFunction, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_ComputeScaleAndOrigin", (PyCFunction) _wrap_DC_ComputeScaleAndOrigin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_CalcBoundingBox", (PyCFunction) _wrap_DC_CalcBoundingBox, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_CalcBoundingBoxPoint", (PyCFunction) _wrap_DC_CalcBoundingBoxPoint, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_ResetBoundingBox", (PyCFunction) _wrap_DC_ResetBoundingBox, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_MinX", (PyCFunction) _wrap_DC_MinX, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_MaxX", (PyCFunction) _wrap_DC_MaxX, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_MinY", (PyCFunction) _wrap_DC_MinY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_MaxY", (PyCFunction) _wrap_DC_MaxY, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_GetBoundingBox", (PyCFunction) _wrap_DC_GetBoundingBox, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC__DrawPointList", (PyCFunction) _wrap_DC__DrawPointList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC__DrawLineList", (PyCFunction) _wrap_DC__DrawLineList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC__DrawRectangleList", (PyCFunction) _wrap_DC__DrawRectangleList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC__DrawEllipseList", (PyCFunction) _wrap_DC__DrawEllipseList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC__DrawPolygonList", (PyCFunction) _wrap_DC__DrawPolygonList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC__DrawTextList", (PyCFunction) _wrap_DC__DrawTextList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DC_swigregister", DC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MemoryDC", (PyCFunction) _wrap_new_MemoryDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"new_MemoryDCFromDC", (PyCFunction) _wrap_new_MemoryDCFromDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MemoryDC_SelectObject", (PyCFunction) _wrap_MemoryDC_SelectObject, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MemoryDC_swigregister", MemoryDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BufferedDC", _wrap_new_BufferedDC, METH_VARARGS, NULL},
	 { (char *)"delete_BufferedDC", (PyCFunction) _wrap_delete_BufferedDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BufferedDC_UnMask", (PyCFunction) _wrap_BufferedDC_UnMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BufferedDC_swigregister", BufferedDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BufferedPaintDC", (PyCFunction) _wrap_new_BufferedPaintDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BufferedPaintDC_swigregister", BufferedPaintDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScreenDC", (PyCFunction) _wrap_new_ScreenDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ScreenDC_StartDrawingOnTopWin", (PyCFunction) _wrap_ScreenDC_StartDrawingOnTopWin, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ScreenDC_StartDrawingOnTop", (PyCFunction) _wrap_ScreenDC_StartDrawingOnTop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ScreenDC_EndDrawingOnTop", (PyCFunction) _wrap_ScreenDC_EndDrawingOnTop, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ScreenDC_swigregister", ScreenDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClientDC", (PyCFunction) _wrap_new_ClientDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ClientDC_swigregister", ClientDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PaintDC", (PyCFunction) _wrap_new_PaintDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PaintDC_swigregister", PaintDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WindowDC", (PyCFunction) _wrap_new_WindowDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WindowDC_swigregister", WindowDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MirrorDC", (PyCFunction) _wrap_new_MirrorDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MirrorDC_swigregister", MirrorDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PostScriptDC", (PyCFunction) _wrap_new_PostScriptDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PostScriptDC_GetPrintData", (PyCFunction) _wrap_PostScriptDC_GetPrintData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PostScriptDC_SetPrintData", (PyCFunction) _wrap_PostScriptDC_SetPrintData, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PostScriptDC_SetResolution", (PyCFunction) _wrap_PostScriptDC_SetResolution, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PostScriptDC_GetResolution", (PyCFunction) _wrap_PostScriptDC_GetResolution, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PostScriptDC_swigregister", PostScriptDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetaFile", (PyCFunction) _wrap_new_MetaFile, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MetaFile_swigregister", MetaFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetaFileDC", (PyCFunction) _wrap_new_MetaFileDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MetaFileDC_swigregister", MetaFileDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PrinterDC", (PyCFunction) _wrap_new_PrinterDC, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PrinterDC_swigregister", PrinterDC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ImageList", (PyCFunction) _wrap_new_ImageList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_ImageList", (PyCFunction) _wrap_delete_ImageList, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_Add", (PyCFunction) _wrap_ImageList_Add, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_AddWithColourMask", (PyCFunction) _wrap_ImageList_AddWithColourMask, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_AddIcon", (PyCFunction) _wrap_ImageList_AddIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_GetBitmap", (PyCFunction) _wrap_ImageList_GetBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_GetIcon", (PyCFunction) _wrap_ImageList_GetIcon, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_Replace", (PyCFunction) _wrap_ImageList_Replace, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_Draw", (PyCFunction) _wrap_ImageList_Draw, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_GetImageCount", (PyCFunction) _wrap_ImageList_GetImageCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_Remove", (PyCFunction) _wrap_ImageList_Remove, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_RemoveAll", (PyCFunction) _wrap_ImageList_RemoveAll, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_GetSize", (PyCFunction) _wrap_ImageList_GetSize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ImageList_swigregister", ImageList_swigregister, METH_VARARGS, NULL},
	 { (char *)"PenList_AddPen", (PyCFunction) _wrap_PenList_AddPen, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PenList_FindOrCreatePen", (PyCFunction) _wrap_PenList_FindOrCreatePen, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PenList_RemovePen", (PyCFunction) _wrap_PenList_RemovePen, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PenList_GetCount", (PyCFunction) _wrap_PenList_GetCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PenList_swigregister", PenList_swigregister, METH_VARARGS, NULL},
	 { (char *)"BrushList_AddBrush", (PyCFunction) _wrap_BrushList_AddBrush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BrushList_FindOrCreateBrush", (PyCFunction) _wrap_BrushList_FindOrCreateBrush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BrushList_RemoveBrush", (PyCFunction) _wrap_BrushList_RemoveBrush, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BrushList_GetCount", (PyCFunction) _wrap_BrushList_GetCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BrushList_swigregister", BrushList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ColourDatabase", (PyCFunction) _wrap_new_ColourDatabase, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_ColourDatabase", (PyCFunction) _wrap_delete_ColourDatabase, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ColourDatabase_Find", (PyCFunction) _wrap_ColourDatabase_Find, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ColourDatabase_FindName", (PyCFunction) _wrap_ColourDatabase_FindName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ColourDatabase_AddColour", (PyCFunction) _wrap_ColourDatabase_AddColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ColourDatabase_Append", (PyCFunction) _wrap_ColourDatabase_Append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ColourDatabase_swigregister", ColourDatabase_swigregister, METH_VARARGS, NULL},
	 { (char *)"FontList_AddFont", (PyCFunction) _wrap_FontList_AddFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontList_FindOrCreateFont", (PyCFunction) _wrap_FontList_FindOrCreateFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontList_RemoveFont", (PyCFunction) _wrap_FontList_RemoveFont, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontList_GetCount", (PyCFunction) _wrap_FontList_GetCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FontList_swigregister", FontList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Effects", (PyCFunction) _wrap_new_Effects, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_GetHighlightColour", (PyCFunction) _wrap_Effects_GetHighlightColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_GetLightShadow", (PyCFunction) _wrap_Effects_GetLightShadow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_GetFaceColour", (PyCFunction) _wrap_Effects_GetFaceColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_GetMediumShadow", (PyCFunction) _wrap_Effects_GetMediumShadow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_GetDarkShadow", (PyCFunction) _wrap_Effects_GetDarkShadow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_SetHighlightColour", (PyCFunction) _wrap_Effects_SetHighlightColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_SetLightShadow", (PyCFunction) _wrap_Effects_SetLightShadow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_SetFaceColour", (PyCFunction) _wrap_Effects_SetFaceColour, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_SetMediumShadow", (PyCFunction) _wrap_Effects_SetMediumShadow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_SetDarkShadow", (PyCFunction) _wrap_Effects_SetDarkShadow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_Set", (PyCFunction) _wrap_Effects_Set, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_DrawSunkenEdge", (PyCFunction) _wrap_Effects_DrawSunkenEdge, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_TileBitmap", (PyCFunction) _wrap_Effects_TileBitmap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Effects_swigregister", Effects_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_wxBufferedDCTo_p_wxMemoryDC(void *x) {
    return (void *)((wxMemoryDC *)  ((wxBufferedDC *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxMemoryDC(void *x) {
    return (void *)((wxMemoryDC *) (wxBufferedDC *) ((wxBufferedPaintDC *) x));
}
static void *_p_wxIconTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxIcon *) x));
}
static void *_p_wxPaletteTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxPalette *) x));
}
static void *_p_wxPenTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxPen *) x));
}
static void *_p_wxFontTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxFont *) x));
}
static void *_p_wxCursorTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxCursor *) x));
}
static void *_p_wxBitmapTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxBitmap *) x));
}
static void *_p_wxRegionTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxRegion *) x));
}
static void *_p_wxBrushTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxBrush *) x));
}
static void *_p_wxBufferedDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *) (wxMemoryDC *) ((wxBufferedDC *) x));
}
static void *_p_wxScreenDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxScreenDC *) x));
}
static void *_p_wxMirrorDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxMirrorDC *) x));
}
static void *_p_wxMemoryDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxMemoryDC *) x));
}
static void *_p_wxWindowDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxWindowDC *) x));
}
static void *_p_wxMetaFileDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxMetaFileDC *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *) (wxMemoryDC *)(wxBufferedDC *) ((wxBufferedPaintDC *) x));
}
static void *_p_wxClientDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxClientDC *) x));
}
static void *_p_wxPaintDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxPaintDC *) x));
}
static void *_p_wxPostScriptDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxPostScriptDC *) x));
}
static void *_p_wxPrinterDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxPrinterDC *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxBufferedDC(void *x) {
    return (void *)((wxBufferedDC *)  ((wxBufferedPaintDC *) x));
}
static void *_p_wxLayoutConstraintsTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxLayoutConstraints *) x));
}
static void *_p_wxPenTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxPen *) x));
}
static void *_p_wxRegionIteratorTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxRegionIterator *) x));
}
static void *_p_wxGBSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizerItem *) ((wxGBSizerItem *) x));
}
static void *_p_wxSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizerItem *) x));
}
static void *_p_wxColourDatabaseTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxColourDatabase *) x));
}
static void *_p_wxScrollEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxScrollEvent *) x));
}
static void *_p_wxIndividualLayoutConstraintTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxIndividualLayoutConstraint *) x));
}
static void *_p_wxIconTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxIcon *) x));
}
static void *_p_wxStaticBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxBoxSizer *) ((wxStaticBoxSizer *) x));
}
static void *_p_wxBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxBoxSizer *) x));
}
static void *_p_wxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizer *) x));
}
static void *_p_wxGridBagSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *)(wxFlexGridSizer *) ((wxGridBagSizer *) x));
}
static void *_p_wxUpdateUIEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxUpdateUIEvent *) x));
}
static void *_p_wxPenListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxPenList *) x));
}
static void *_p_wxEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvent *) x));
}
static void *_p_wxFlexGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *) ((wxFlexGridSizer *) x));
}
static void *_p_wxGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxGridSizer *) x));
}
static void *_p_wxInitDialogEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxInitDialogEvent *) x));
}
static void *_p_wxPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaintEvent *) x));
}
static void *_p_wxNcPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNcPaintEvent *) x));
}
static void *_p_wxDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxDC *) x));
}
static void *_p_wxPaletteChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaletteChangedEvent *) x));
}
static void *_p_wxDisplayChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDisplayChangedEvent *) x));
}
static void *_p_wxMouseCaptureChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseCaptureChangedEvent *) x));
}
static void *_p_wxSysColourChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSysColourChangedEvent *) x));
}
static void *_p_wxControlTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxControl *) x));
}
static void *_p_wxSetCursorEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSetCursorEvent *) x));
}
static void *_p_wxClientDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxClientDC *) x));
}
static void *_p_wxFSFileTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFSFile *) x));
}
static void *_p_wxMemoryDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxMemoryDC *) x));
}
static void *_p_wxRegionTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxRegion *) x));
}
static void *_p_wxPySizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxPySizer *) x));
}
static void *_p_wxWindowDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxWindowDC *) x));
}
static void *_p_wxGDIObjectTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxGDIObject *) x));
}
static void *_p_wxEffectsTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEffects *) x));
}
static void *_p_wxPyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPyEvent *) x));
}
static void *_p_wxNotifyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxNotifyEvent *) x));
}
static void *_p_wxPostScriptDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxPostScriptDC *) x));
}
static void *_p_wxShowEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxShowEvent *) x));
}
static void *_p_wxMenuItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMenuItem *) x));
}
static void *_p_wxDateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxDateEvent *) x));
}
static void *_p_wxIdleEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIdleEvent *) x));
}
static void *_p_wxWindowCreateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowCreateEvent *) x));
}
static void *_p_wxQueryNewPaletteEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxQueryNewPaletteEvent *) x));
}
static void *_p_wxMaximizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMaximizeEvent *) x));
}
static void *_p_wxIconizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIconizeEvent *) x));
}
static void *_p_wxSizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSizeEvent *) x));
}
static void *_p_wxMoveEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMoveEvent *) x));
}
static void *_p_wxActivateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxActivateEvent *) x));
}
static void *_p_wxXPMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxXPMHandler *) x));
}
static void *_p_wxPNMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNMHandler *) x));
}
static void *_p_wxJPEGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxJPEGHandler *) x));
}
static void *_p_wxPCXHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPCXHandler *) x));
}
static void *_p_wxGIFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxGIFHandler *) x));
}
static void *_p_wxPNGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNGHandler *) x));
}
static void *_p_wxANIHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *)(wxCURHandler *) ((wxANIHandler *) x));
}
static void *_p_wxCURHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *) ((wxCURHandler *) x));
}
static void *_p_wxICOHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *) ((wxICOHandler *) x));
}
static void *_p_wxBMPHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxBMPHandler *) x));
}
static void *_p_wxImageHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImageHandler *) x));
}
static void *_p_wxTIFFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxTIFFHandler *) x));
}
static void *_p_wxEvtHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvtHandler *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *)(wxMemoryDC *)(wxBufferedDC *) ((wxBufferedPaintDC *) x));
}
static void *_p_wxPaintDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxPaintDC *) x));
}
static void *_p_wxPrinterDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxPrinterDC *) x));
}
static void *_p_wxScreenDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxScreenDC *) x));
}
static void *_p_wxStdDialogButtonSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxBoxSizer *) ((wxStdDialogButtonSizer *) x));
}
static void *_p_wxAcceleratorTableTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxAcceleratorTable *) x));
}
static void *_p_wxImageTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImage *) x));
}
static void *_p_wxScrollWinEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxScrollWinEvent *) x));
}
static void *_p_wxPaletteTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxPalette *) x));
}
static void *_p_wxBufferedDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *)(wxMemoryDC *) ((wxBufferedDC *) x));
}
static void *_p_wxImageListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImageList *) x));
}
static void *_p_wxCursorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxCursor *) x));
}
static void *_p_wxEncodingConverterTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEncodingConverter *) x));
}
static void *_p_wxMirrorDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxMirrorDC *) x));
}
static void *_p_wxWindowDestroyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowDestroyEvent *) x));
}
static void *_p_wxNavigationKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNavigationKeyEvent *) x));
}
static void *_p_wxKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxKeyEvent *) x));
}
static void *_p_wxWindowTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxWindow *) x));
}
static void *_p_wxMenuTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxMenu *) x));
}
static void *_p_wxMenuBarTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxMenuBar *) x));
}
static void *_p_wxMetaFileDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxMetaFileDC *) x));
}
static void *_p_wxBrushListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxBrushList *) x));
}
static void *_p_wxFileSystemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFileSystem *) x));
}
static void *_p_wxBitmapTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxBitmap *) x));
}
static void *_p_wxMaskTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMask *) x));
}
static void *_p_wxContextMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxContextMenuEvent *) x));
}
static void *_p_wxMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMenuEvent *) x));
}
static void *_p_wxPyAppTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxPyApp *) x));
}
static void *_p_wxCloseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCloseEvent *) x));
}
static void *_p_wxMouseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseEvent *) x));
}
static void *_p_wxEraseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxEraseEvent *) x));
}
static void *_p_wxPyCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxPyCommandEvent *) x));
}
static void *_p_wxCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCommandEvent *) x));
}
static void *_p_wxDropFilesEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDropFilesEvent *) x));
}
static void *_p_wxFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxFocusEvent *) x));
}
static void *_p_wxChildFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxChildFocusEvent *) x));
}
static void *_p_wxFontTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxFont *) x));
}
static void *_p_wxBrushTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxBrush *) x));
}
static void *_p_wxMetaFileTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMetaFile *) x));
}
static void *_p_wxControlWithItemsTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *)(wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxColourTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxColour *) x));
}
static void *_p_wxFontListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFontList *) x));
}
static void *_p_wxPyValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxValidator *) ((wxPyValidator *) x));
}
static void *_p_wxValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxValidator *) x));
}
static void *_p_wxControlTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxControl *) x));
}
static void *_p_wxControlWithItemsTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *) (wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxMenuBarTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxMenuBar *) x));
}
static swig_type_info _swigt__p_wxPostScriptDC[] = {{"_p_wxPostScriptDC", 0, "wxPostScriptDC *", 0, 0, 0, 0},{"_p_wxPostScriptDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxBrush[] = {{"_p_wxBrush", 0, "wxBrush *", 0, 0, 0, 0},{"_p_wxBrush", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxColour[] = {{"_p_wxColour", 0, "wxColour *", 0, 0, 0, 0},{"_p_wxColour", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxDC[] = {{"_p_wxDC", 0, "wxDC *", 0, 0, 0, 0},{"_p_wxBufferedDC", _p_wxBufferedDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxScreenDC", _p_wxScreenDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxMirrorDC", _p_wxMirrorDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxMemoryDC", _p_wxMemoryDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxWindowDC", _p_wxWindowDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxDC", 0, 0, 0, 0, 0, 0},{"_p_wxMetaFileDC", _p_wxMetaFileDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxClientDC", _p_wxClientDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxPaintDC", _p_wxPaintDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxPostScriptDC", _p_wxPostScriptDCTo_p_wxDC, 0, 0, 0, 0, 0},{"_p_wxPrinterDC", _p_wxPrinterDCTo_p_wxDC, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxMirrorDC[] = {{"_p_wxMirrorDC", 0, "wxMirrorDC *", 0, 0, 0, 0},{"_p_wxMirrorDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_form_ops_t[] = {{"_p_form_ops_t", 0, "enum form_ops_t *|form_ops_t *", 0, 0, 0, 0},{"_p_form_ops_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxDuplexMode[] = {{"_p_wxDuplexMode", 0, "enum wxDuplexMode *|wxDuplexMode *", 0, 0, 0, 0},{"_p_wxDuplexMode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPyFontEnumerator[] = {{"_p_wxPyFontEnumerator", 0, "wxPyFontEnumerator *", 0, 0, 0, 0},{"_p_wxPyFontEnumerator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxIconLocation[] = {{"_p_wxIconLocation", 0, "wxIconLocation *", 0, 0, 0, 0},{"_p_wxIconLocation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxImage[] = {{"_p_wxImage", 0, "wxImage *", 0, 0, 0, 0},{"_p_wxImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxMetaFileDC[] = {{"_p_wxMetaFileDC", 0, "wxMetaFileDC *", 0, 0, 0, 0},{"_p_wxMetaFileDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxMask[] = {{"_p_wxMask", 0, "wxMask *", 0, 0, 0, 0},{"_p_wxMask", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxSize[] = {{"_p_wxSize", 0, "wxSize *", 0, 0, 0, 0},{"_p_wxSize", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxFont[] = {{"_p_wxFont", 0, "wxFont *", 0, 0, 0, 0},{"_p_wxFont", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxWindow[] = {{"_p_wxWindow", 0, "wxWindow *", 0, 0, 0, 0},{"_p_wxControl", _p_wxControlTo_p_wxWindow, 0, 0, 0, 0, 0},{"_p_wxWindow", 0, 0, 0, 0, 0, 0},{"_p_wxControlWithItems", _p_wxControlWithItemsTo_p_wxWindow, 0, 0, 0, 0, 0},{"_p_wxMenuBar", _p_wxMenuBarTo_p_wxWindow, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0, 0, 0, 0},{"_p_double", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxMemoryDC[] = {{"_p_wxMemoryDC", 0, "wxMemoryDC *", 0, 0, 0, 0},{"_p_wxBufferedDC", _p_wxBufferedDCTo_p_wxMemoryDC, 0, 0, 0, 0, 0},{"_p_wxMemoryDC", 0, 0, 0, 0, 0, 0},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxMemoryDC, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxFontMapper[] = {{"_p_wxFontMapper", 0, "wxFontMapper *", 0, 0, 0, 0},{"_p_wxFontMapper", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxEffects[] = {{"_p_wxEffects", 0, "wxEffects *", 0, 0, 0, 0},{"_p_wxEffects", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxNativeEncodingInfo[] = {{"_p_wxNativeEncodingInfo", 0, "wxNativeEncodingInfo *", 0, 0, 0, 0},{"_p_wxNativeEncodingInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPalette[] = {{"_p_wxPalette", 0, "wxPalette *", 0, 0, 0, 0},{"_p_wxPalette", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxBitmap[] = {{"_p_wxBitmap", 0, "wxBitmap *", 0, 0, 0, 0},{"_p_wxBitmap", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxObject[] = {{"_p_wxObject", 0, "wxObject *", 0, 0, 0, 0},{"_p_wxLayoutConstraints", _p_wxLayoutConstraintsTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxRegionIterator", _p_wxRegionIteratorTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPen", _p_wxPenTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxColourDatabase", _p_wxColourDatabaseTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxGBSizerItem", _p_wxGBSizerItemTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxSizerItem", _p_wxSizerItemTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxScrollEvent", _p_wxScrollEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxIndividualLayoutConstraint", _p_wxIndividualLayoutConstraintTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxStaticBoxSizer", _p_wxStaticBoxSizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxBoxSizer", _p_wxBoxSizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxSizer", _p_wxSizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxGridBagSizer", _p_wxGridBagSizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPenList", _p_wxPenListTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxUpdateUIEvent", _p_wxUpdateUIEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMenu", _p_wxMenuTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxEvent", _p_wxEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxFlexGridSizer", _p_wxFlexGridSizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxGridSizer", _p_wxGridSizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxInitDialogEvent", _p_wxInitDialogEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMask", _p_wxMaskTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPaintEvent", _p_wxPaintEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxNcPaintEvent", _p_wxNcPaintEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPaletteChangedEvent", _p_wxPaletteChangedEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxDisplayChangedEvent", _p_wxDisplayChangedEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMouseCaptureChangedEvent", _p_wxMouseCaptureChangedEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxSysColourChangedEvent", _p_wxSysColourChangedEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxControl", _p_wxControlTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxFont", _p_wxFontTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxSetCursorEvent", _p_wxSetCursorEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxClientDC", _p_wxClientDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxFSFile", _p_wxFSFileTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMemoryDC", _p_wxMemoryDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxRegion", _p_wxRegionTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPySizer", _p_wxPySizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxDC", _p_wxDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxIcon", _p_wxIconTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxWindowDC", _p_wxWindowDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxGDIObject", _p_wxGDIObjectTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxEffects", _p_wxEffectsTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPyEvent", _p_wxPyEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxNotifyEvent", _p_wxNotifyEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPostScriptDC", _p_wxPostScriptDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxShowEvent", _p_wxShowEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMenuItem", _p_wxMenuItemTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxDateEvent", _p_wxDateEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxIdleEvent", _p_wxIdleEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxWindowCreateEvent", _p_wxWindowCreateEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxQueryNewPaletteEvent", _p_wxQueryNewPaletteEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMaximizeEvent", _p_wxMaximizeEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxIconizeEvent", _p_wxIconizeEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxSizeEvent", _p_wxSizeEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMoveEvent", _p_wxMoveEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxActivateEvent", _p_wxActivateEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxGIFHandler", _p_wxGIFHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPNGHandler", _p_wxPNGHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxANIHandler", _p_wxANIHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxCURHandler", _p_wxCURHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxICOHandler", _p_wxICOHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxBMPHandler", _p_wxBMPHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxImageHandler", _p_wxImageHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxTIFFHandler", _p_wxTIFFHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxEvtHandler", _p_wxEvtHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPCXHandler", _p_wxPCXHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxJPEGHandler", _p_wxJPEGHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPNMHandler", _p_wxPNMHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxXPMHandler", _p_wxXPMHandlerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPaintDC", _p_wxPaintDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPrinterDC", _p_wxPrinterDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxScreenDC", _p_wxScreenDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxStdDialogButtonSizer", _p_wxStdDialogButtonSizerTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxAcceleratorTable", _p_wxAcceleratorTableTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxImage", _p_wxImageTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxScrollWinEvent", _p_wxScrollWinEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxBufferedDC", _p_wxBufferedDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPalette", _p_wxPaletteTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxImageList", _p_wxImageListTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxCursor", _p_wxCursorTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxObject", 0, 0, 0, 0, 0, 0},{"_p_wxMirrorDC", _p_wxMirrorDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxEncodingConverter", _p_wxEncodingConverterTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxWindowDestroyEvent", _p_wxWindowDestroyEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxNavigationKeyEvent", _p_wxNavigationKeyEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxKeyEvent", _p_wxKeyEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMetaFileDC", _p_wxMetaFileDCTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxWindow", _p_wxWindowTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMenuBar", _p_wxMenuBarTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxBrushList", _p_wxBrushListTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxFileSystem", _p_wxFileSystemTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxBitmap", _p_wxBitmapTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxContextMenuEvent", _p_wxContextMenuEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMenuEvent", _p_wxMenuEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPyApp", _p_wxPyAppTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxCloseEvent", _p_wxCloseEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMouseEvent", _p_wxMouseEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxEraseEvent", _p_wxEraseEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPyCommandEvent", _p_wxPyCommandEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxCommandEvent", _p_wxCommandEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxDropFilesEvent", _p_wxDropFilesEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxFocusEvent", _p_wxFocusEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxChildFocusEvent", _p_wxChildFocusEventTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxBrush", _p_wxBrushTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxMetaFile", _p_wxMetaFileTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxControlWithItems", _p_wxControlWithItemsTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxColour", _p_wxColourTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxFontList", _p_wxFontListTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxPyValidator", _p_wxPyValidatorTo_p_wxObject, 0, 0, 0, 0, 0},{"_p_wxValidator", _p_wxValidatorTo_p_wxObject, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxRegionIterator[] = {{"_p_wxRegionIterator", 0, "wxRegionIterator *", 0, 0, 0, 0},{"_p_wxRegionIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxRect[] = {{"_p_wxRect", 0, "wxRect *", 0, 0, 0, 0},{"_p_wxRect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPaperSize[] = {{"_p_wxPaperSize", 0, "enum wxPaperSize *|wxPaperSize *", 0, 0, 0, 0},{"_p_wxPaperSize", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxString[] = {{"_p_wxString", 0, "wxString *", 0, 0, 0, 0},{"_p_wxString", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__unsigned_int[] = {{"_unsigned_int", 0, "unsigned int|std::size_t", 0, 0, 0, 0},{"_unsigned_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_int[] = {{"_p_unsigned_int", 0, "unsigned int *|time_t *", 0, 0, 0, 0},{"_p_unsigned_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPrinterDC[] = {{"_p_wxPrinterDC", 0, "wxPrinterDC *", 0, 0, 0, 0},{"_p_wxPrinterDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxIconBundle[] = {{"_p_wxIconBundle", 0, "wxIconBundle *", 0, 0, 0, 0},{"_p_wxIconBundle", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPoint[] = {{"_p_wxPoint", 0, "wxPoint *", 0, 0, 0, 0},{"_p_wxPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxDash[] = {{"_p_wxDash", 0, "wxDash *", 0, 0, 0, 0},{"_p_wxDash", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxScreenDC[] = {{"_p_wxScreenDC", 0, "wxScreenDC *", 0, 0, 0, 0},{"_p_wxScreenDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxCursor[] = {{"_p_wxCursor", 0, "wxCursor *", 0, 0, 0, 0},{"_p_wxCursor", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxClientDC[] = {{"_p_wxClientDC", 0, "wxClientDC *", 0, 0, 0, 0},{"_p_wxClientDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxBufferedDC[] = {{"_p_wxBufferedDC", 0, "wxBufferedDC *", 0, 0, 0, 0},{"_p_wxBufferedDC", 0, 0, 0, 0, 0, 0},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxBufferedDC, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxImageList[] = {{"_p_wxImageList", 0, "wxImageList *", 0, 0, 0, 0},{"_p_wxImageList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *|byte *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxGDIObject[] = {{"_p_wxGDIObject", 0, "wxGDIObject *", 0, 0, 0, 0},{"_p_wxIcon", _p_wxIconTo_p_wxGDIObject, 0, 0, 0, 0, 0},{"_p_wxPen", _p_wxPenTo_p_wxGDIObject, 0, 0, 0, 0, 0},{"_p_wxFont", _p_wxFontTo_p_wxGDIObject, 0, 0, 0, 0, 0},{"_p_wxPalette", _p_wxPaletteTo_p_wxGDIObject, 0, 0, 0, 0, 0},{"_p_wxGDIObject", 0, 0, 0, 0, 0, 0},{"_p_wxCursor", _p_wxCursorTo_p_wxGDIObject, 0, 0, 0, 0, 0},{"_p_wxBitmap", _p_wxBitmapTo_p_wxGDIObject, 0, 0, 0, 0, 0},{"_p_wxRegion", _p_wxRegionTo_p_wxGDIObject, 0, 0, 0, 0, 0},{"_p_wxBrush", _p_wxBrushTo_p_wxGDIObject, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxIcon[] = {{"_p_wxIcon", 0, "wxIcon *", 0, 0, 0, 0},{"_p_wxIcon", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxLocale[] = {{"_p_wxLocale", 0, "wxLocale *", 0, 0, 0, 0},{"_p_wxLocale", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__ptrdiff_t[] = {{"_std__ptrdiff_t", 0, "std::ptrdiff_t", 0, 0, 0, 0},{"_std__ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxRegion[] = {{"_p_wxRegion", 0, "wxRegion *", 0, 0, 0, 0},{"_p_wxRegion", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxConfigBase[] = {{"_p_wxConfigBase", 0, "wxConfigBase *", 0, 0, 0, 0},{"_p_wxConfigBase", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxLanguageInfo[] = {{"_p_wxLanguageInfo", 0, "wxLanguageInfo *", 0, 0, 0, 0},{"_p_wxLanguageInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxWindowDC[] = {{"_p_wxWindowDC", 0, "wxWindowDC *", 0, 0, 0, 0},{"_p_wxWindowDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPrintData[] = {{"_p_wxPrintData", 0, "wxPrintData *", 0, 0, 0, 0},{"_p_wxPrintData", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxBrushList[] = {{"_p_wxBrushList", 0, "wxBrushList *", 0, 0, 0, 0},{"_p_wxBrushList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxFontList[] = {{"_p_wxFontList", 0, "wxFontList *", 0, 0, 0, 0},{"_p_wxFontList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPen[] = {{"_p_wxPen", 0, "wxPen *", 0, 0, 0, 0},{"_p_wxPen", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxBufferedPaintDC[] = {{"_p_wxBufferedPaintDC", 0, "wxBufferedPaintDC *", 0, 0, 0, 0},{"_p_wxBufferedPaintDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPaintDC[] = {{"_p_wxPaintDC", 0, "wxPaintDC *", 0, 0, 0, 0},{"_p_wxPaintDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPenList[] = {{"_p_wxPenList", 0, "wxPenList *", 0, 0, 0, 0},{"_p_wxPenList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxMetaFile[] = {{"_p_wxMetaFile", 0, "wxMetaFile *", 0, 0, 0, 0},{"_p_wxMetaFile", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_long[] = {{"_p_unsigned_long", 0, "unsigned long *|wxUIntPtr *", 0, 0, 0, 0},{"_p_unsigned_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxNativeFontInfo[] = {{"_p_wxNativeFontInfo", 0, "wxNativeFontInfo *", 0, 0, 0, 0},{"_p_wxNativeFontInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxEncodingConverter[] = {{"_p_wxEncodingConverter", 0, "wxEncodingConverter *", 0, 0, 0, 0},{"_p_wxEncodingConverter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxColourDatabase[] = {{"_p_wxColourDatabase", 0, "wxColourDatabase *", 0, 0, 0, 0},{"_p_wxColourDatabase", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_wxPostScriptDC, 
_swigt__p_wxBrush, 
_swigt__p_wxColour, 
_swigt__p_wxDC, 
_swigt__p_wxMirrorDC, 
_swigt__p_form_ops_t, 
_swigt__p_wxDuplexMode, 
_swigt__p_wxPyFontEnumerator, 
_swigt__p_char, 
_swigt__p_wxIconLocation, 
_swigt__p_wxImage, 
_swigt__p_wxMetaFileDC, 
_swigt__p_wxMask, 
_swigt__p_wxSize, 
_swigt__p_wxFont, 
_swigt__p_wxWindow, 
_swigt__p_double, 
_swigt__p_wxMemoryDC, 
_swigt__p_wxFontMapper, 
_swigt__p_wxEffects, 
_swigt__p_wxNativeEncodingInfo, 
_swigt__p_wxPalette, 
_swigt__p_wxBitmap, 
_swigt__p_wxObject, 
_swigt__p_wxRegionIterator, 
_swigt__p_wxRect, 
_swigt__p_wxPaperSize, 
_swigt__p_wxString, 
_swigt__unsigned_int, 
_swigt__p_unsigned_int, 
_swigt__p_wxPrinterDC, 
_swigt__p_wxIconBundle, 
_swigt__p_wxPoint, 
_swigt__p_wxDash, 
_swigt__p_wxScreenDC, 
_swigt__p_wxCursor, 
_swigt__p_wxClientDC, 
_swigt__p_wxBufferedDC, 
_swigt__p_wxImageList, 
_swigt__p_unsigned_char, 
_swigt__p_wxGDIObject, 
_swigt__p_wxIcon, 
_swigt__p_wxLocale, 
_swigt__ptrdiff_t, 
_swigt__std__ptrdiff_t, 
_swigt__p_wxRegion, 
_swigt__p_wxConfigBase, 
_swigt__p_wxLanguageInfo, 
_swigt__p_wxWindowDC, 
_swigt__p_wxPrintData, 
_swigt__p_wxBrushList, 
_swigt__p_wxFontList, 
_swigt__p_wxPen, 
_swigt__p_wxBufferedPaintDC, 
_swigt__p_wxPaintDC, 
_swigt__p_wxPenList, 
_swigt__p_int, 
_swigt__p_wxMetaFile, 
_swigt__p_unsigned_long, 
_swigt__p_wxNativeFontInfo, 
_swigt__p_wxEncodingConverter, 
_swigt__p_wxColourDatabase, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)();           /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    static PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    static int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    static PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    static int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    static PyTypeObject varlinktype = {
        PyObject_HEAD_INIT(0)              
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        0,                                  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        0,                                  /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        0,                                  /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
    
    /* Create a variable linking object for use later */
    static PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = 0;
        result = PyMem_NEW(swig_varlinkobject,1);
        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
        result->ob_type = &varlinktype;
        result->vars = 0;
        result->ob_refcnt = 0;
        Py_XINCREF((PyObject *) result);
        return ((PyObject*) result);
    }
    
    static void
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v;
        swig_globalvar *gv;
        v= (swig_varlinkobject *) p;
        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        gv->name = (char *) malloc(strlen(name)+1);
        strcpy(gv->name,name);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    static void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; i++) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    static void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; j++) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    char *buff = ndoc;
                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
                    strncpy(buff, methods[i].ml_doc, ldoc);
                    buff += ldoc;
                    strncpy(buff, "swig_ptr: ", 10);
                    buff += 10;
                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                    methods[i].ml_doc = ndoc;
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    static int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
    static swig_type_info **
    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
        static PyMethodDef swig_empty_runtime_method_table[] = {
            {
                NULL, NULL, 0, NULL
            } 
        };/* Sentinel */
        
        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
        swig_empty_runtime_method_table);
        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
        if (pointer && module) {
            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
        }
        return type_list_handle;
    } 
    
    static swig_type_info **
    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
        swig_type_info **type_pointer;
        
        /* first check if module already created */
        type_pointer = SWIG_Python_GetTypeListHandle();
        if (type_pointer) {
            return type_pointer;
        } else {
            /* create a new module and variable */
            return SWIG_Python_SetTypeListHandle(type_list_handle);
        }
    }
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
#ifdef SWIG_LINK_RUNTIME
        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
#else
#  ifndef SWIG_STATIC_RUNTIME
        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
#  endif
#endif
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"OutRegion", SWIG_From_int((int)(wxOutRegion))); 
    }
    {
        PyDict_SetItemString(d,"PartRegion", SWIG_From_int((int)(wxPartRegion))); 
    }
    {
        PyDict_SetItemString(d,"InRegion", SWIG_From_int((int)(wxInRegion))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_DEFAULT", SWIG_From_int((int)(wxFONTFAMILY_DEFAULT))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_DECORATIVE", SWIG_From_int((int)(wxFONTFAMILY_DECORATIVE))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_ROMAN", SWIG_From_int((int)(wxFONTFAMILY_ROMAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_SCRIPT", SWIG_From_int((int)(wxFONTFAMILY_SCRIPT))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_SWISS", SWIG_From_int((int)(wxFONTFAMILY_SWISS))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_MODERN", SWIG_From_int((int)(wxFONTFAMILY_MODERN))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_TELETYPE", SWIG_From_int((int)(wxFONTFAMILY_TELETYPE))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_MAX", SWIG_From_int((int)(wxFONTFAMILY_MAX))); 
    }
    {
        PyDict_SetItemString(d,"FONTFAMILY_UNKNOWN", SWIG_From_int((int)(wxFONTFAMILY_UNKNOWN))); 
    }
    {
        PyDict_SetItemString(d,"FONTSTYLE_NORMAL", SWIG_From_int((int)(wxFONTSTYLE_NORMAL))); 
    }
    {
        PyDict_SetItemString(d,"FONTSTYLE_ITALIC", SWIG_From_int((int)(wxFONTSTYLE_ITALIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTSTYLE_SLANT", SWIG_From_int((int)(wxFONTSTYLE_SLANT))); 
    }
    {
        PyDict_SetItemString(d,"FONTSTYLE_MAX", SWIG_From_int((int)(wxFONTSTYLE_MAX))); 
    }
    {
        PyDict_SetItemString(d,"FONTWEIGHT_NORMAL", SWIG_From_int((int)(wxFONTWEIGHT_NORMAL))); 
    }
    {
        PyDict_SetItemString(d,"FONTWEIGHT_LIGHT", SWIG_From_int((int)(wxFONTWEIGHT_LIGHT))); 
    }
    {
        PyDict_SetItemString(d,"FONTWEIGHT_BOLD", SWIG_From_int((int)(wxFONTWEIGHT_BOLD))); 
    }
    {
        PyDict_SetItemString(d,"FONTWEIGHT_MAX", SWIG_From_int((int)(wxFONTWEIGHT_MAX))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_DEFAULT", SWIG_From_int((int)(wxFONTFLAG_DEFAULT))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_ITALIC", SWIG_From_int((int)(wxFONTFLAG_ITALIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_SLANT", SWIG_From_int((int)(wxFONTFLAG_SLANT))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_LIGHT", SWIG_From_int((int)(wxFONTFLAG_LIGHT))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_BOLD", SWIG_From_int((int)(wxFONTFLAG_BOLD))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_ANTIALIASED", SWIG_From_int((int)(wxFONTFLAG_ANTIALIASED))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_NOT_ANTIALIASED", SWIG_From_int((int)(wxFONTFLAG_NOT_ANTIALIASED))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_UNDERLINED", SWIG_From_int((int)(wxFONTFLAG_UNDERLINED))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_STRIKETHROUGH", SWIG_From_int((int)(wxFONTFLAG_STRIKETHROUGH))); 
    }
    {
        PyDict_SetItemString(d,"FONTFLAG_MASK", SWIG_From_int((int)(wxFONTFLAG_MASK))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_SYSTEM", SWIG_From_int((int)(wxFONTENCODING_SYSTEM))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_DEFAULT", SWIG_From_int((int)(wxFONTENCODING_DEFAULT))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_1", SWIG_From_int((int)(wxFONTENCODING_ISO8859_1))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_2", SWIG_From_int((int)(wxFONTENCODING_ISO8859_2))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_3", SWIG_From_int((int)(wxFONTENCODING_ISO8859_3))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_4", SWIG_From_int((int)(wxFONTENCODING_ISO8859_4))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_5", SWIG_From_int((int)(wxFONTENCODING_ISO8859_5))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_6", SWIG_From_int((int)(wxFONTENCODING_ISO8859_6))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_7", SWIG_From_int((int)(wxFONTENCODING_ISO8859_7))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_8", SWIG_From_int((int)(wxFONTENCODING_ISO8859_8))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_9", SWIG_From_int((int)(wxFONTENCODING_ISO8859_9))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_10", SWIG_From_int((int)(wxFONTENCODING_ISO8859_10))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_11", SWIG_From_int((int)(wxFONTENCODING_ISO8859_11))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_12", SWIG_From_int((int)(wxFONTENCODING_ISO8859_12))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_13", SWIG_From_int((int)(wxFONTENCODING_ISO8859_13))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_14", SWIG_From_int((int)(wxFONTENCODING_ISO8859_14))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_15", SWIG_From_int((int)(wxFONTENCODING_ISO8859_15))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ISO8859_MAX", SWIG_From_int((int)(wxFONTENCODING_ISO8859_MAX))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_KOI8", SWIG_From_int((int)(wxFONTENCODING_KOI8))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_KOI8_U", SWIG_From_int((int)(wxFONTENCODING_KOI8_U))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_ALTERNATIVE", SWIG_From_int((int)(wxFONTENCODING_ALTERNATIVE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_BULGARIAN", SWIG_From_int((int)(wxFONTENCODING_BULGARIAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP437", SWIG_From_int((int)(wxFONTENCODING_CP437))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP850", SWIG_From_int((int)(wxFONTENCODING_CP850))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP852", SWIG_From_int((int)(wxFONTENCODING_CP852))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP855", SWIG_From_int((int)(wxFONTENCODING_CP855))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP866", SWIG_From_int((int)(wxFONTENCODING_CP866))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP874", SWIG_From_int((int)(wxFONTENCODING_CP874))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP932", SWIG_From_int((int)(wxFONTENCODING_CP932))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP936", SWIG_From_int((int)(wxFONTENCODING_CP936))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP949", SWIG_From_int((int)(wxFONTENCODING_CP949))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP950", SWIG_From_int((int)(wxFONTENCODING_CP950))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1250", SWIG_From_int((int)(wxFONTENCODING_CP1250))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1251", SWIG_From_int((int)(wxFONTENCODING_CP1251))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1252", SWIG_From_int((int)(wxFONTENCODING_CP1252))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1253", SWIG_From_int((int)(wxFONTENCODING_CP1253))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1254", SWIG_From_int((int)(wxFONTENCODING_CP1254))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1255", SWIG_From_int((int)(wxFONTENCODING_CP1255))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1256", SWIG_From_int((int)(wxFONTENCODING_CP1256))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP1257", SWIG_From_int((int)(wxFONTENCODING_CP1257))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_CP12_MAX", SWIG_From_int((int)(wxFONTENCODING_CP12_MAX))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF7", SWIG_From_int((int)(wxFONTENCODING_UTF7))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF8", SWIG_From_int((int)(wxFONTENCODING_UTF8))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_EUC_JP", SWIG_From_int((int)(wxFONTENCODING_EUC_JP))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF16BE", SWIG_From_int((int)(wxFONTENCODING_UTF16BE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF16LE", SWIG_From_int((int)(wxFONTENCODING_UTF16LE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF32BE", SWIG_From_int((int)(wxFONTENCODING_UTF32BE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF32LE", SWIG_From_int((int)(wxFONTENCODING_UTF32LE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACROMAN", SWIG_From_int((int)(wxFONTENCODING_MACROMAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACJAPANESE", SWIG_From_int((int)(wxFONTENCODING_MACJAPANESE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACCHINESETRAD", SWIG_From_int((int)(wxFONTENCODING_MACCHINESETRAD))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACKOREAN", SWIG_From_int((int)(wxFONTENCODING_MACKOREAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACARABIC", SWIG_From_int((int)(wxFONTENCODING_MACARABIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACHEBREW", SWIG_From_int((int)(wxFONTENCODING_MACHEBREW))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACGREEK", SWIG_From_int((int)(wxFONTENCODING_MACGREEK))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACCYRILLIC", SWIG_From_int((int)(wxFONTENCODING_MACCYRILLIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACDEVANAGARI", SWIG_From_int((int)(wxFONTENCODING_MACDEVANAGARI))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACGURMUKHI", SWIG_From_int((int)(wxFONTENCODING_MACGURMUKHI))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACGUJARATI", SWIG_From_int((int)(wxFONTENCODING_MACGUJARATI))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACORIYA", SWIG_From_int((int)(wxFONTENCODING_MACORIYA))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACBENGALI", SWIG_From_int((int)(wxFONTENCODING_MACBENGALI))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACTAMIL", SWIG_From_int((int)(wxFONTENCODING_MACTAMIL))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACTELUGU", SWIG_From_int((int)(wxFONTENCODING_MACTELUGU))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACKANNADA", SWIG_From_int((int)(wxFONTENCODING_MACKANNADA))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACMALAJALAM", SWIG_From_int((int)(wxFONTENCODING_MACMALAJALAM))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACSINHALESE", SWIG_From_int((int)(wxFONTENCODING_MACSINHALESE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACBURMESE", SWIG_From_int((int)(wxFONTENCODING_MACBURMESE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACKHMER", SWIG_From_int((int)(wxFONTENCODING_MACKHMER))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACTHAI", SWIG_From_int((int)(wxFONTENCODING_MACTHAI))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACLAOTIAN", SWIG_From_int((int)(wxFONTENCODING_MACLAOTIAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACGEORGIAN", SWIG_From_int((int)(wxFONTENCODING_MACGEORGIAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACARMENIAN", SWIG_From_int((int)(wxFONTENCODING_MACARMENIAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACCHINESESIMP", SWIG_From_int((int)(wxFONTENCODING_MACCHINESESIMP))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACTIBETAN", SWIG_From_int((int)(wxFONTENCODING_MACTIBETAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACMONGOLIAN", SWIG_From_int((int)(wxFONTENCODING_MACMONGOLIAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACETHIOPIC", SWIG_From_int((int)(wxFONTENCODING_MACETHIOPIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACCENTRALEUR", SWIG_From_int((int)(wxFONTENCODING_MACCENTRALEUR))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACVIATNAMESE", SWIG_From_int((int)(wxFONTENCODING_MACVIATNAMESE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACARABICEXT", SWIG_From_int((int)(wxFONTENCODING_MACARABICEXT))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACSYMBOL", SWIG_From_int((int)(wxFONTENCODING_MACSYMBOL))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACDINGBATS", SWIG_From_int((int)(wxFONTENCODING_MACDINGBATS))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACTURKISH", SWIG_From_int((int)(wxFONTENCODING_MACTURKISH))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACCROATIAN", SWIG_From_int((int)(wxFONTENCODING_MACCROATIAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACICELANDIC", SWIG_From_int((int)(wxFONTENCODING_MACICELANDIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACROMANIAN", SWIG_From_int((int)(wxFONTENCODING_MACROMANIAN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACCELTIC", SWIG_From_int((int)(wxFONTENCODING_MACCELTIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACGAELIC", SWIG_From_int((int)(wxFONTENCODING_MACGAELIC))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACKEYBOARD", SWIG_From_int((int)(wxFONTENCODING_MACKEYBOARD))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACMIN", SWIG_From_int((int)(wxFONTENCODING_MACMIN))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MACMAX", SWIG_From_int((int)(wxFONTENCODING_MACMAX))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_MAX", SWIG_From_int((int)(wxFONTENCODING_MAX))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF16", SWIG_From_int((int)(wxFONTENCODING_UTF16))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UTF32", SWIG_From_int((int)(wxFONTENCODING_UTF32))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_UNICODE", SWIG_From_int((int)(wxFONTENCODING_UNICODE))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_GB2312", SWIG_From_int((int)(wxFONTENCODING_GB2312))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_BIG5", SWIG_From_int((int)(wxFONTENCODING_BIG5))); 
    }
    {
        PyDict_SetItemString(d,"FONTENCODING_SHIFT_JIS", SWIG_From_int((int)(wxFONTENCODING_SHIFT_JIS))); 
    }
    
    wxPyPtrTypeMap_Add("wxFontEnumerator", "wxPyFontEnumerator");
    
    {
        PyDict_SetItemString(d,"LANGUAGE_DEFAULT", SWIG_From_int((int)(wxLANGUAGE_DEFAULT))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_UNKNOWN", SWIG_From_int((int)(wxLANGUAGE_UNKNOWN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ABKHAZIAN", SWIG_From_int((int)(wxLANGUAGE_ABKHAZIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_AFAR", SWIG_From_int((int)(wxLANGUAGE_AFAR))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_AFRIKAANS", SWIG_From_int((int)(wxLANGUAGE_AFRIKAANS))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ALBANIAN", SWIG_From_int((int)(wxLANGUAGE_ALBANIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_AMHARIC", SWIG_From_int((int)(wxLANGUAGE_AMHARIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC", SWIG_From_int((int)(wxLANGUAGE_ARABIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_ALGERIA", SWIG_From_int((int)(wxLANGUAGE_ARABIC_ALGERIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_BAHRAIN", SWIG_From_int((int)(wxLANGUAGE_ARABIC_BAHRAIN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_EGYPT", SWIG_From_int((int)(wxLANGUAGE_ARABIC_EGYPT))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_IRAQ", SWIG_From_int((int)(wxLANGUAGE_ARABIC_IRAQ))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_JORDAN", SWIG_From_int((int)(wxLANGUAGE_ARABIC_JORDAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_KUWAIT", SWIG_From_int((int)(wxLANGUAGE_ARABIC_KUWAIT))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_LEBANON", SWIG_From_int((int)(wxLANGUAGE_ARABIC_LEBANON))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_LIBYA", SWIG_From_int((int)(wxLANGUAGE_ARABIC_LIBYA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_MOROCCO", SWIG_From_int((int)(wxLANGUAGE_ARABIC_MOROCCO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_OMAN", SWIG_From_int((int)(wxLANGUAGE_ARABIC_OMAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_QATAR", SWIG_From_int((int)(wxLANGUAGE_ARABIC_QATAR))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_SAUDI_ARABIA", SWIG_From_int((int)(wxLANGUAGE_ARABIC_SAUDI_ARABIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_SUDAN", SWIG_From_int((int)(wxLANGUAGE_ARABIC_SUDAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_SYRIA", SWIG_From_int((int)(wxLANGUAGE_ARABIC_SYRIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_TUNISIA", SWIG_From_int((int)(wxLANGUAGE_ARABIC_TUNISIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_UAE", SWIG_From_int((int)(wxLANGUAGE_ARABIC_UAE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARABIC_YEMEN", SWIG_From_int((int)(wxLANGUAGE_ARABIC_YEMEN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ARMENIAN", SWIG_From_int((int)(wxLANGUAGE_ARMENIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ASSAMESE", SWIG_From_int((int)(wxLANGUAGE_ASSAMESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_AYMARA", SWIG_From_int((int)(wxLANGUAGE_AYMARA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_AZERI", SWIG_From_int((int)(wxLANGUAGE_AZERI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_AZERI_CYRILLIC", SWIG_From_int((int)(wxLANGUAGE_AZERI_CYRILLIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_AZERI_LATIN", SWIG_From_int((int)(wxLANGUAGE_AZERI_LATIN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BASHKIR", SWIG_From_int((int)(wxLANGUAGE_BASHKIR))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BASQUE", SWIG_From_int((int)(wxLANGUAGE_BASQUE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BELARUSIAN", SWIG_From_int((int)(wxLANGUAGE_BELARUSIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BENGALI", SWIG_From_int((int)(wxLANGUAGE_BENGALI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BHUTANI", SWIG_From_int((int)(wxLANGUAGE_BHUTANI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BIHARI", SWIG_From_int((int)(wxLANGUAGE_BIHARI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BISLAMA", SWIG_From_int((int)(wxLANGUAGE_BISLAMA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BRETON", SWIG_From_int((int)(wxLANGUAGE_BRETON))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BULGARIAN", SWIG_From_int((int)(wxLANGUAGE_BULGARIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_BURMESE", SWIG_From_int((int)(wxLANGUAGE_BURMESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CAMBODIAN", SWIG_From_int((int)(wxLANGUAGE_CAMBODIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CATALAN", SWIG_From_int((int)(wxLANGUAGE_CATALAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CHINESE", SWIG_From_int((int)(wxLANGUAGE_CHINESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CHINESE_SIMPLIFIED", SWIG_From_int((int)(wxLANGUAGE_CHINESE_SIMPLIFIED))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CHINESE_TRADITIONAL", SWIG_From_int((int)(wxLANGUAGE_CHINESE_TRADITIONAL))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CHINESE_HONGKONG", SWIG_From_int((int)(wxLANGUAGE_CHINESE_HONGKONG))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CHINESE_MACAU", SWIG_From_int((int)(wxLANGUAGE_CHINESE_MACAU))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CHINESE_SINGAPORE", SWIG_From_int((int)(wxLANGUAGE_CHINESE_SINGAPORE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CHINESE_TAIWAN", SWIG_From_int((int)(wxLANGUAGE_CHINESE_TAIWAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CORSICAN", SWIG_From_int((int)(wxLANGUAGE_CORSICAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CROATIAN", SWIG_From_int((int)(wxLANGUAGE_CROATIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_CZECH", SWIG_From_int((int)(wxLANGUAGE_CZECH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_DANISH", SWIG_From_int((int)(wxLANGUAGE_DANISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_DUTCH", SWIG_From_int((int)(wxLANGUAGE_DUTCH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_DUTCH_BELGIAN", SWIG_From_int((int)(wxLANGUAGE_DUTCH_BELGIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH", SWIG_From_int((int)(wxLANGUAGE_ENGLISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_UK", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_UK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_US", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_US))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_AUSTRALIA", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_AUSTRALIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_BELIZE", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_BELIZE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_BOTSWANA", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_BOTSWANA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_CANADA", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_CANADA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_CARIBBEAN", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_CARIBBEAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_DENMARK", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_DENMARK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_EIRE", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_EIRE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_JAMAICA", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_JAMAICA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_NEW_ZEALAND", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_NEW_ZEALAND))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_PHILIPPINES", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_PHILIPPINES))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_SOUTH_AFRICA", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_SOUTH_AFRICA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_TRINIDAD", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_TRINIDAD))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ENGLISH_ZIMBABWE", SWIG_From_int((int)(wxLANGUAGE_ENGLISH_ZIMBABWE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ESPERANTO", SWIG_From_int((int)(wxLANGUAGE_ESPERANTO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ESTONIAN", SWIG_From_int((int)(wxLANGUAGE_ESTONIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FAEROESE", SWIG_From_int((int)(wxLANGUAGE_FAEROESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FARSI", SWIG_From_int((int)(wxLANGUAGE_FARSI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FIJI", SWIG_From_int((int)(wxLANGUAGE_FIJI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FINNISH", SWIG_From_int((int)(wxLANGUAGE_FINNISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FRENCH", SWIG_From_int((int)(wxLANGUAGE_FRENCH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FRENCH_BELGIAN", SWIG_From_int((int)(wxLANGUAGE_FRENCH_BELGIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FRENCH_CANADIAN", SWIG_From_int((int)(wxLANGUAGE_FRENCH_CANADIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FRENCH_LUXEMBOURG", SWIG_From_int((int)(wxLANGUAGE_FRENCH_LUXEMBOURG))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FRENCH_MONACO", SWIG_From_int((int)(wxLANGUAGE_FRENCH_MONACO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FRENCH_SWISS", SWIG_From_int((int)(wxLANGUAGE_FRENCH_SWISS))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_FRISIAN", SWIG_From_int((int)(wxLANGUAGE_FRISIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GALICIAN", SWIG_From_int((int)(wxLANGUAGE_GALICIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GEORGIAN", SWIG_From_int((int)(wxLANGUAGE_GEORGIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GERMAN", SWIG_From_int((int)(wxLANGUAGE_GERMAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GERMAN_AUSTRIAN", SWIG_From_int((int)(wxLANGUAGE_GERMAN_AUSTRIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GERMAN_BELGIUM", SWIG_From_int((int)(wxLANGUAGE_GERMAN_BELGIUM))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GERMAN_LIECHTENSTEIN", SWIG_From_int((int)(wxLANGUAGE_GERMAN_LIECHTENSTEIN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GERMAN_LUXEMBOURG", SWIG_From_int((int)(wxLANGUAGE_GERMAN_LUXEMBOURG))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GERMAN_SWISS", SWIG_From_int((int)(wxLANGUAGE_GERMAN_SWISS))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GREEK", SWIG_From_int((int)(wxLANGUAGE_GREEK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GREENLANDIC", SWIG_From_int((int)(wxLANGUAGE_GREENLANDIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GUARANI", SWIG_From_int((int)(wxLANGUAGE_GUARANI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_GUJARATI", SWIG_From_int((int)(wxLANGUAGE_GUJARATI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_HAUSA", SWIG_From_int((int)(wxLANGUAGE_HAUSA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_HEBREW", SWIG_From_int((int)(wxLANGUAGE_HEBREW))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_HINDI", SWIG_From_int((int)(wxLANGUAGE_HINDI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_HUNGARIAN", SWIG_From_int((int)(wxLANGUAGE_HUNGARIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ICELANDIC", SWIG_From_int((int)(wxLANGUAGE_ICELANDIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_INDONESIAN", SWIG_From_int((int)(wxLANGUAGE_INDONESIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_INTERLINGUA", SWIG_From_int((int)(wxLANGUAGE_INTERLINGUA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_INTERLINGUE", SWIG_From_int((int)(wxLANGUAGE_INTERLINGUE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_INUKTITUT", SWIG_From_int((int)(wxLANGUAGE_INUKTITUT))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_INUPIAK", SWIG_From_int((int)(wxLANGUAGE_INUPIAK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_IRISH", SWIG_From_int((int)(wxLANGUAGE_IRISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ITALIAN", SWIG_From_int((int)(wxLANGUAGE_ITALIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ITALIAN_SWISS", SWIG_From_int((int)(wxLANGUAGE_ITALIAN_SWISS))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_JAPANESE", SWIG_From_int((int)(wxLANGUAGE_JAPANESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_JAVANESE", SWIG_From_int((int)(wxLANGUAGE_JAVANESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KANNADA", SWIG_From_int((int)(wxLANGUAGE_KANNADA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KASHMIRI", SWIG_From_int((int)(wxLANGUAGE_KASHMIRI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KASHMIRI_INDIA", SWIG_From_int((int)(wxLANGUAGE_KASHMIRI_INDIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KAZAKH", SWIG_From_int((int)(wxLANGUAGE_KAZAKH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KERNEWEK", SWIG_From_int((int)(wxLANGUAGE_KERNEWEK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KINYARWANDA", SWIG_From_int((int)(wxLANGUAGE_KINYARWANDA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KIRGHIZ", SWIG_From_int((int)(wxLANGUAGE_KIRGHIZ))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KIRUNDI", SWIG_From_int((int)(wxLANGUAGE_KIRUNDI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KONKANI", SWIG_From_int((int)(wxLANGUAGE_KONKANI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KOREAN", SWIG_From_int((int)(wxLANGUAGE_KOREAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_KURDISH", SWIG_From_int((int)(wxLANGUAGE_KURDISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_LAOTHIAN", SWIG_From_int((int)(wxLANGUAGE_LAOTHIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_LATIN", SWIG_From_int((int)(wxLANGUAGE_LATIN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_LATVIAN", SWIG_From_int((int)(wxLANGUAGE_LATVIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_LINGALA", SWIG_From_int((int)(wxLANGUAGE_LINGALA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_LITHUANIAN", SWIG_From_int((int)(wxLANGUAGE_LITHUANIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MACEDONIAN", SWIG_From_int((int)(wxLANGUAGE_MACEDONIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MALAGASY", SWIG_From_int((int)(wxLANGUAGE_MALAGASY))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MALAY", SWIG_From_int((int)(wxLANGUAGE_MALAY))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MALAYALAM", SWIG_From_int((int)(wxLANGUAGE_MALAYALAM))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MALAY_BRUNEI_DARUSSALAM", SWIG_From_int((int)(wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MALAY_MALAYSIA", SWIG_From_int((int)(wxLANGUAGE_MALAY_MALAYSIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MALTESE", SWIG_From_int((int)(wxLANGUAGE_MALTESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MANIPURI", SWIG_From_int((int)(wxLANGUAGE_MANIPURI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MAORI", SWIG_From_int((int)(wxLANGUAGE_MAORI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MARATHI", SWIG_From_int((int)(wxLANGUAGE_MARATHI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MOLDAVIAN", SWIG_From_int((int)(wxLANGUAGE_MOLDAVIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_MONGOLIAN", SWIG_From_int((int)(wxLANGUAGE_MONGOLIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_NAURU", SWIG_From_int((int)(wxLANGUAGE_NAURU))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_NEPALI", SWIG_From_int((int)(wxLANGUAGE_NEPALI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_NEPALI_INDIA", SWIG_From_int((int)(wxLANGUAGE_NEPALI_INDIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_NORWEGIAN_BOKMAL", SWIG_From_int((int)(wxLANGUAGE_NORWEGIAN_BOKMAL))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_NORWEGIAN_NYNORSK", SWIG_From_int((int)(wxLANGUAGE_NORWEGIAN_NYNORSK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_OCCITAN", SWIG_From_int((int)(wxLANGUAGE_OCCITAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ORIYA", SWIG_From_int((int)(wxLANGUAGE_ORIYA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_OROMO", SWIG_From_int((int)(wxLANGUAGE_OROMO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_PASHTO", SWIG_From_int((int)(wxLANGUAGE_PASHTO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_POLISH", SWIG_From_int((int)(wxLANGUAGE_POLISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_PORTUGUESE", SWIG_From_int((int)(wxLANGUAGE_PORTUGUESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_PORTUGUESE_BRAZILIAN", SWIG_From_int((int)(wxLANGUAGE_PORTUGUESE_BRAZILIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_PUNJABI", SWIG_From_int((int)(wxLANGUAGE_PUNJABI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_QUECHUA", SWIG_From_int((int)(wxLANGUAGE_QUECHUA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_RHAETO_ROMANCE", SWIG_From_int((int)(wxLANGUAGE_RHAETO_ROMANCE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ROMANIAN", SWIG_From_int((int)(wxLANGUAGE_ROMANIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_RUSSIAN", SWIG_From_int((int)(wxLANGUAGE_RUSSIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_RUSSIAN_UKRAINE", SWIG_From_int((int)(wxLANGUAGE_RUSSIAN_UKRAINE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SAMOAN", SWIG_From_int((int)(wxLANGUAGE_SAMOAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SANGHO", SWIG_From_int((int)(wxLANGUAGE_SANGHO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SANSKRIT", SWIG_From_int((int)(wxLANGUAGE_SANSKRIT))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SCOTS_GAELIC", SWIG_From_int((int)(wxLANGUAGE_SCOTS_GAELIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SERBIAN", SWIG_From_int((int)(wxLANGUAGE_SERBIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SERBIAN_CYRILLIC", SWIG_From_int((int)(wxLANGUAGE_SERBIAN_CYRILLIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SERBIAN_LATIN", SWIG_From_int((int)(wxLANGUAGE_SERBIAN_LATIN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SERBO_CROATIAN", SWIG_From_int((int)(wxLANGUAGE_SERBO_CROATIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SESOTHO", SWIG_From_int((int)(wxLANGUAGE_SESOTHO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SETSWANA", SWIG_From_int((int)(wxLANGUAGE_SETSWANA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SHONA", SWIG_From_int((int)(wxLANGUAGE_SHONA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SINDHI", SWIG_From_int((int)(wxLANGUAGE_SINDHI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SINHALESE", SWIG_From_int((int)(wxLANGUAGE_SINHALESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SISWATI", SWIG_From_int((int)(wxLANGUAGE_SISWATI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SLOVAK", SWIG_From_int((int)(wxLANGUAGE_SLOVAK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SLOVENIAN", SWIG_From_int((int)(wxLANGUAGE_SLOVENIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SOMALI", SWIG_From_int((int)(wxLANGUAGE_SOMALI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH", SWIG_From_int((int)(wxLANGUAGE_SPANISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_ARGENTINA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_ARGENTINA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_BOLIVIA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_BOLIVIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_CHILE", SWIG_From_int((int)(wxLANGUAGE_SPANISH_CHILE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_COLOMBIA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_COLOMBIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_COSTA_RICA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_COSTA_RICA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_DOMINICAN_REPUBLIC", SWIG_From_int((int)(wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_ECUADOR", SWIG_From_int((int)(wxLANGUAGE_SPANISH_ECUADOR))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_EL_SALVADOR", SWIG_From_int((int)(wxLANGUAGE_SPANISH_EL_SALVADOR))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_GUATEMALA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_GUATEMALA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_HONDURAS", SWIG_From_int((int)(wxLANGUAGE_SPANISH_HONDURAS))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_MEXICAN", SWIG_From_int((int)(wxLANGUAGE_SPANISH_MEXICAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_MODERN", SWIG_From_int((int)(wxLANGUAGE_SPANISH_MODERN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_NICARAGUA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_NICARAGUA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_PANAMA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_PANAMA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_PARAGUAY", SWIG_From_int((int)(wxLANGUAGE_SPANISH_PARAGUAY))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_PERU", SWIG_From_int((int)(wxLANGUAGE_SPANISH_PERU))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_PUERTO_RICO", SWIG_From_int((int)(wxLANGUAGE_SPANISH_PUERTO_RICO))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_URUGUAY", SWIG_From_int((int)(wxLANGUAGE_SPANISH_URUGUAY))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_US", SWIG_From_int((int)(wxLANGUAGE_SPANISH_US))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SPANISH_VENEZUELA", SWIG_From_int((int)(wxLANGUAGE_SPANISH_VENEZUELA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SUNDANESE", SWIG_From_int((int)(wxLANGUAGE_SUNDANESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SWAHILI", SWIG_From_int((int)(wxLANGUAGE_SWAHILI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SWEDISH", SWIG_From_int((int)(wxLANGUAGE_SWEDISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_SWEDISH_FINLAND", SWIG_From_int((int)(wxLANGUAGE_SWEDISH_FINLAND))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TAGALOG", SWIG_From_int((int)(wxLANGUAGE_TAGALOG))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TAJIK", SWIG_From_int((int)(wxLANGUAGE_TAJIK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TAMIL", SWIG_From_int((int)(wxLANGUAGE_TAMIL))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TATAR", SWIG_From_int((int)(wxLANGUAGE_TATAR))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TELUGU", SWIG_From_int((int)(wxLANGUAGE_TELUGU))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_THAI", SWIG_From_int((int)(wxLANGUAGE_THAI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TIBETAN", SWIG_From_int((int)(wxLANGUAGE_TIBETAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TIGRINYA", SWIG_From_int((int)(wxLANGUAGE_TIGRINYA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TONGA", SWIG_From_int((int)(wxLANGUAGE_TONGA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TSONGA", SWIG_From_int((int)(wxLANGUAGE_TSONGA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TURKISH", SWIG_From_int((int)(wxLANGUAGE_TURKISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TURKMEN", SWIG_From_int((int)(wxLANGUAGE_TURKMEN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_TWI", SWIG_From_int((int)(wxLANGUAGE_TWI))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_UIGHUR", SWIG_From_int((int)(wxLANGUAGE_UIGHUR))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_UKRAINIAN", SWIG_From_int((int)(wxLANGUAGE_UKRAINIAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_URDU", SWIG_From_int((int)(wxLANGUAGE_URDU))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_URDU_INDIA", SWIG_From_int((int)(wxLANGUAGE_URDU_INDIA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_URDU_PAKISTAN", SWIG_From_int((int)(wxLANGUAGE_URDU_PAKISTAN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_UZBEK", SWIG_From_int((int)(wxLANGUAGE_UZBEK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_UZBEK_CYRILLIC", SWIG_From_int((int)(wxLANGUAGE_UZBEK_CYRILLIC))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_UZBEK_LATIN", SWIG_From_int((int)(wxLANGUAGE_UZBEK_LATIN))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_VIETNAMESE", SWIG_From_int((int)(wxLANGUAGE_VIETNAMESE))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_VOLAPUK", SWIG_From_int((int)(wxLANGUAGE_VOLAPUK))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_WELSH", SWIG_From_int((int)(wxLANGUAGE_WELSH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_WOLOF", SWIG_From_int((int)(wxLANGUAGE_WOLOF))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_XHOSA", SWIG_From_int((int)(wxLANGUAGE_XHOSA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_YIDDISH", SWIG_From_int((int)(wxLANGUAGE_YIDDISH))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_YORUBA", SWIG_From_int((int)(wxLANGUAGE_YORUBA))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ZHUANG", SWIG_From_int((int)(wxLANGUAGE_ZHUANG))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_ZULU", SWIG_From_int((int)(wxLANGUAGE_ZULU))); 
    }
    {
        PyDict_SetItemString(d,"LANGUAGE_USER_DEFINED", SWIG_From_int((int)(wxLANGUAGE_USER_DEFINED))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_CAT_NUMBER", SWIG_From_int((int)(wxLOCALE_CAT_NUMBER))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_CAT_DATE", SWIG_From_int((int)(wxLOCALE_CAT_DATE))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_CAT_MONEY", SWIG_From_int((int)(wxLOCALE_CAT_MONEY))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_CAT_MAX", SWIG_From_int((int)(wxLOCALE_CAT_MAX))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_THOUSANDS_SEP", SWIG_From_int((int)(wxLOCALE_THOUSANDS_SEP))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_DECIMAL_POINT", SWIG_From_int((int)(wxLOCALE_DECIMAL_POINT))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_LOAD_DEFAULT", SWIG_From_int((int)(wxLOCALE_LOAD_DEFAULT))); 
    }
    {
        PyDict_SetItemString(d,"LOCALE_CONV_ENCODING", SWIG_From_int((int)(wxLOCALE_CONV_ENCODING))); 
    }
    {
        PyDict_SetItemString(d,"CONVERT_STRICT", SWIG_From_int((int)(wxCONVERT_STRICT))); 
    }
    {
        PyDict_SetItemString(d,"CONVERT_SUBSTITUTE", SWIG_From_int((int)(wxCONVERT_SUBSTITUTE))); 
    }
    {
        PyDict_SetItemString(d,"PLATFORM_CURRENT", SWIG_From_int((int)(wxPLATFORM_CURRENT))); 
    }
    {
        PyDict_SetItemString(d,"PLATFORM_UNIX", SWIG_From_int((int)(wxPLATFORM_UNIX))); 
    }
    {
        PyDict_SetItemString(d,"PLATFORM_WINDOWS", SWIG_From_int((int)(wxPLATFORM_WINDOWS))); 
    }
    {
        PyDict_SetItemString(d,"PLATFORM_OS2", SWIG_From_int((int)(wxPLATFORM_OS2))); 
    }
    {
        PyDict_SetItemString(d,"PLATFORM_MAC", SWIG_From_int((int)(wxPLATFORM_MAC))); 
    }
    {
        PyDict_SetItemString(d,"BUFFER_VIRTUAL_AREA", SWIG_From_int((int)(wxBUFFER_VIRTUAL_AREA))); 
    }
    {
        PyDict_SetItemString(d,"BUFFER_CLIENT_AREA", SWIG_From_int((int)(wxBUFFER_CLIENT_AREA))); 
    }
    {
        PyDict_SetItemString(d,"IMAGELIST_DRAW_NORMAL", SWIG_From_int((int)(wxIMAGELIST_DRAW_NORMAL))); 
    }
    {
        PyDict_SetItemString(d,"IMAGELIST_DRAW_TRANSPARENT", SWIG_From_int((int)(wxIMAGELIST_DRAW_TRANSPARENT))); 
    }
    {
        PyDict_SetItemString(d,"IMAGELIST_DRAW_SELECTED", SWIG_From_int((int)(wxIMAGELIST_DRAW_SELECTED))); 
    }
    {
        PyDict_SetItemString(d,"IMAGELIST_DRAW_FOCUSED", SWIG_From_int((int)(wxIMAGELIST_DRAW_FOCUSED))); 
    }
    {
        PyDict_SetItemString(d,"IMAGE_LIST_NORMAL", SWIG_From_int((int)(wxIMAGE_LIST_NORMAL))); 
    }
    {
        PyDict_SetItemString(d,"IMAGE_LIST_SMALL", SWIG_From_int((int)(wxIMAGE_LIST_SMALL))); 
    }
    {
        PyDict_SetItemString(d,"IMAGE_LIST_STATE", SWIG_From_int((int)(wxIMAGE_LIST_STATE))); 
    }
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"NORMAL_FONT",_wrap_NORMAL_FONT_get, _wrap_NORMAL_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SMALL_FONT",_wrap_SMALL_FONT_get, _wrap_SMALL_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ITALIC_FONT",_wrap_ITALIC_FONT_get, _wrap_ITALIC_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SWISS_FONT",_wrap_SWISS_FONT_get, _wrap_SWISS_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RED_PEN",_wrap_RED_PEN_get, _wrap_RED_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CYAN_PEN",_wrap_CYAN_PEN_get, _wrap_CYAN_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREEN_PEN",_wrap_GREEN_PEN_get, _wrap_GREEN_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK_PEN",_wrap_BLACK_PEN_get, _wrap_BLACK_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"WHITE_PEN",_wrap_WHITE_PEN_get, _wrap_WHITE_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TRANSPARENT_PEN",_wrap_TRANSPARENT_PEN_get, _wrap_TRANSPARENT_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK_DASHED_PEN",_wrap_BLACK_DASHED_PEN_get, _wrap_BLACK_DASHED_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREY_PEN",_wrap_GREY_PEN_get, _wrap_GREY_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"MEDIUM_GREY_PEN",_wrap_MEDIUM_GREY_PEN_get, _wrap_MEDIUM_GREY_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"LIGHT_GREY_PEN",_wrap_LIGHT_GREY_PEN_get, _wrap_LIGHT_GREY_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLUE_BRUSH",_wrap_BLUE_BRUSH_get, _wrap_BLUE_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREEN_BRUSH",_wrap_GREEN_BRUSH_get, _wrap_GREEN_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"WHITE_BRUSH",_wrap_WHITE_BRUSH_get, _wrap_WHITE_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK_BRUSH",_wrap_BLACK_BRUSH_get, _wrap_BLACK_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TRANSPARENT_BRUSH",_wrap_TRANSPARENT_BRUSH_get, _wrap_TRANSPARENT_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CYAN_BRUSH",_wrap_CYAN_BRUSH_get, _wrap_CYAN_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RED_BRUSH",_wrap_RED_BRUSH_get, _wrap_RED_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREY_BRUSH",_wrap_GREY_BRUSH_get, _wrap_GREY_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"MEDIUM_GREY_BRUSH",_wrap_MEDIUM_GREY_BRUSH_get, _wrap_MEDIUM_GREY_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"LIGHT_GREY_BRUSH",_wrap_LIGHT_GREY_BRUSH_get, _wrap_LIGHT_GREY_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK",_wrap_BLACK_get, _wrap_BLACK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"WHITE",_wrap_WHITE_get, _wrap_WHITE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RED",_wrap_RED_get, _wrap_RED_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLUE",_wrap_BLUE_get, _wrap_BLUE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREEN",_wrap_GREEN_get, _wrap_GREEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CYAN",_wrap_CYAN_get, _wrap_CYAN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"LIGHT_GREY",_wrap_LIGHT_GREY_get, _wrap_LIGHT_GREY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"STANDARD_CURSOR",_wrap_STANDARD_CURSOR_get, _wrap_STANDARD_CURSOR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"HOURGLASS_CURSOR",_wrap_HOURGLASS_CURSOR_get, _wrap_HOURGLASS_CURSOR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CROSS_CURSOR",_wrap_CROSS_CURSOR_get, _wrap_CROSS_CURSOR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullBitmap",_wrap_NullBitmap_get, _wrap_NullBitmap_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullIcon",_wrap_NullIcon_get, _wrap_NullIcon_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullCursor",_wrap_NullCursor_get, _wrap_NullCursor_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullPen",_wrap_NullPen_get, _wrap_NullPen_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullBrush",_wrap_NullBrush_get, _wrap_NullBrush_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullPalette",_wrap_NullPalette_get, _wrap_NullPalette_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullFont",_wrap_NullFont_get, _wrap_NullFont_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullColour",_wrap_NullColour_get, _wrap_NullColour_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TheFontList",_wrap_TheFontList_get, _wrap_TheFontList_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ThePenList",_wrap_ThePenList_get, _wrap_ThePenList_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TheBrushList",_wrap_TheBrushList_get, _wrap_TheBrushList_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TheColourDatabase",_wrap_TheColourDatabase_get, _wrap_TheColourDatabase_set);
    
    // Work around a chicken/egg problem in drawlist.cpp
    wxPyDrawList_SetAPIPtr();
    
}

