Announcing wxWindows 2.3.4: a cross-platform GUI toolkit
----------------------------------------------------------------

September 16th, 2002 -- the wxWindows team is pleased to
announce the release of a development snapshot of the mature
cross-platform C++ application framework.

The following platforms are supported:

- Windows 95/98/ME, Windows NT, Windows 2000, Windows XP
- Unix with GTK+ 1.x and 2.0
- Unix with X11
- Unix with Motif/Lesstif
- VMS with GTK+ 1.x
- MacOS 8.6, 9.x and 10.x
- OS/2 (alpha)

To get wxWindows, go to the Download page at:

  http://www.wxwindows.org

This is likely to be the last development snapshot in the
2.3.x series, before the release of the stable 2.4.x series.

*** About wxWindows

wxWindows is a comprehensive open-source, multi-platform C++
GUI framework, that can be used to build commercial and free
software. It's used by many organisations all over the world,
including the company that invented the GUI.

For most ports, wxWindows adopts the native look and feel of
each platform since it uses the native widget sets. There is also
a generic widget set, used for the wxX11 port - no other widget set
is required, giving the potential for embedded use.

An extraordinary range of classes is provided - but don't be put
off by this because most people find wxWindows easier to learn
and use than MFC and other frameworks.

As well as comprehensive support for the usual widgets, advanced
features include: HTML viewing/printing, wxImage class providing
handlers for eading and writing many image types, resizeable panels
and dialogs on all platforms, document/view, OpenGL support,
HTML-based and context-sensitive help, wizards, drag and drop,
a grid class, ODBC support, threads, sockets, container classes,
and much more. An 1800-page reference manual is provided in HTML,
MS HTML Help, WinHelp, wxWindows Help and PDF, and there are over
70 samples and demos.

If you're an MFC user, you'll find many wxWindows concepts
reassuringly familiar, while often clearer and more consistent.
If you're not, you should still find it intuitive from the start.

wxWindows bindings for several other languages are available,
including Python, Perl, Basic, Lua, JavaScript and Eiffel.

If you're considering wxWindows, do check out some of these links:

    http://www.wxwindows.org/feedback.htm ; Comments from users
    http://www.wxwindows.org/screensh.htm ; Screenshots
    http://www.wxwindows.org/users.htm    ; A list of some of our
                                          ; users

Have fun!

Julian Smart and the wxWindows team

=====

A small selection of the comments from the Feedback page:

"wxWindows 2.xx has been an absolute dream; putting together a
nice interface has been quite easy, and I'm especially pleased
that I can do most of our development on *nix with confidence
that only minor issues will have to get cleaned up when we build
on Windows." 

"I use wxWindows as a GUI Toolkit for Python. Its stability,
flexibility and speed are the base of industrial strength
cross-platform GUI application design with interpreted languages
like Python. Porting is child's play. Thanks for this great
piece of software!" 

"Excellent, stable and intuitive API. Very straightforward to
learn and easy to port Java, X11 and Win32 code to." 

"Thanks heaps for the best piece of software I've ever come
across (wxWindows)." 

"I chose wxWindows for a very much Windows-only application
because of the simplicity of the API compared to MFC and Win32
GDI programming. Aside from some minor mistakes in the manual
which confused me for a while, wxWin has been really easy to use
and increased my productivity immensely compared to using
another framework." 

"wxWindows is a great product. One of its best features, IMHO,
are all the language bindings. It's very easy to prototype your
app in wxPython, then convert to a C/C++ app later." 

"Porting to wxWindows is easy - I recently ported an MFC project
at work to wxGTK on Solaris, and changing all the MFC calls to
wxWindows calls only took a couple of hours for a 2 man-month
project... I've never had an easier porting experience.
wxWindows was intentially built to work like MFC to make it easy
to port, and they most certainly succeeded, with the notable
exception of OLE support. I ported a several man month project
in a day or two, and none of it was hard or confusing, it just
amounted to looking up the equivalent functions in the help. I
could do the conversion much faster now because I wouldn't have
to keep glancing at the web page." 

"I'd like to take the opportunity and say a big thank you to all
the wxWin developers and contributors. wxWindows is the best
piece of software I have been using so far, and I can't believe
that I haven't discovered it earlier. I never thought that
cross-platform development could be so easy and simply cool.
Great stuff :)" 

"Just wanted to commend you on wxWindows. As I'm reading the
code samples (the checklistbox right now), I'm realizing that
this is so intuitive and so Java-like in some parts of it,
especially with the way the layout works... Very good work and
thank you." 

"I have used wxWindows in the past very successfully on multiple
projects, and think it's the bee's knees. Thanks for everything!" 

"Well, I'm using wxWindows since 2 days and I'm already in love
with it :) The sizers saved me from writing a complete layout
solution myself. Great work! You guys rock!" 

"wxWindows is jaw dropping amazing. Community support from the
mailing list is extraordinary. Are you sure this is free?" 

"I love wxWindows. I can program 10 times faster than with MFC,
and almost everything works the first time. And unlike MFC,
there are (useful) examples and documentation. Thanks to you
guys who did all the work to develop this framework. Big kudos." 

"ImageLinks now uses the Open Source version of wxWindows for
all its current GUI development. Doing this ensures that
everything interfaces cleanly and also makes it easier in the
long run to add other GUIs along the way because ImageLinks has
access to all the source code."

