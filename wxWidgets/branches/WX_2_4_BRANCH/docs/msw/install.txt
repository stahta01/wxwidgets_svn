
Installing wxWindows 2.4.2
--------------------------

This is wxWindows 2.4.2 for Microsoft Windows 9x/ME, Windows NT,
Windows 2000 and Windows XP. This is an official release.

Please note that the library naming conventions for VC++
compilation have changed after 2.3.1. This means that
you will need to change your application project files. See the
relevant section below for details.

IMPORTANT NOTE: If you experience problems installing, please
re-read this instructions and other related files (changes.txt,
readme.txt, FAQ) carefully before mailing wx-users. Preferably,
try to fix the problem first and then upload a patch to
SourceForge:

  http://sourceforge.net/patch/?group_id=9863

Please report bugs using the SourceForge bug tracker:

  http://sourceforge.net/bugs/?group_id=9863

Unarchiving
-----------

A setup program is provided (setup.exe) to automatically copy
files to a directory on your hard disk. Do not install into a
path that contains spaces. To avoid confusion with other
wxWindows installations that might be on your machine, the
installation program does not se the WXWIN environment variable;
please set this by hand via the System applet if you wish to
make it permanent.

The setup program contains the following:

- All common, generic and MSW-specific wxWindows source;
- samples;
- documentation in Windows Help format;
- makefiles for most Windows compilers, plus CodeWarrior,
  BC++ and VC++ IDE files;
- JPEG library source;
- TIFF library source;
- Object Graphics Library;
- Tex2RTF source;
- Dialog Editor binary.

Alternatively, you may unarchive the .zip form by hand:
wxMSW-x.y.z.zip where x.y.z is the version number.

Unarchive the required files plus any optional documentation
files into a suitable directory such as c:\wx.

Other add-on packages are available from the wxWindows Web site, such as:

- mmedia.zip. Audio, CD, video access for Windows and Linux.
- ogl3.zip. Object Graphics Library: build network diagrams, CASE tools etc.
- tex2rtf3.zip. Tex2RTF: create Windows Help, HTML, and Word RTF files from
  the same document source.

General installation notes
--------------------------

Alter your WXWIN environment variable to point to the root directory of the
wxWindows installation. For Cygwin or MinGW compilation, make sure WXWIN
contains only forward slashes.

If installing from the CVS server, copy include/wx/msw/setup0.h to
include/wx/msw/setup.h and edit the resulting file to choose
the features you would like to compile wxWindows with[out].

Compilation
-----------

The following sections explain how to compile wxWindows with each supported
compiler.

Visual C++ 6.0 compilation
---------------------------

Please note that the VC++ 6.0 project files will work for VC++ .NET also, but
you must open the .dsp files and not the .dsw files and in this case you will
need to manually build the other .dsp on which wxWindows.dsp depends: jpeg,
png, regex, tiff and zlib.

Also note that you can make the project files work with VC++ 5.0 but you'll
need to edit .dsp file by hand before this is possible (change the version in
the .dsp file header from 6.0 to 5.0).

Using project files (VC++ 6.0 and later):

1. Unarchive wxWindows-x.y.z-vc.zip, the VC++ 6 project
   makefiles (already included in wxMSW-x.y.z.zip and the setup version).
2. Open src/wxWindows.dsp, which has configurations for static
   compilation or DLL compilation, and each of these available in
   Unicode/ANSI and Debug/Release variations. Normally you'll use
   a static linking ANSI configuration. Choose the Win32 Debug or
   Win32 Release configuration for the wxWindows project, and compile.
   Alternatively, use Batch Build to build more than one
   configuration.
   The following libraries will be produced depending on chosen
   configuration:

   wxmsw.lib     wxmswd.lib      ; ANSI Release/Debug
   wxmswu.lib    wxmswud.lib     ; UNICODE Release/Debug
   wxmsw23x.lib  wxmsw23xd.lib   ; ANSI DLL Release/Debug
   wxmsw23xu.lib wxmsw23xud.lib  ; UNICODE DLL Release/Debug

   It will also produce similar variations on jpeg.lib, png.lib,
   tiff.lib, zlib.lib, and regex.lib.
3. Open a sample project file, choose a configuration such as
   Win32 Debug using Build | Set Active Configuration..., and compile.
   The project files don't use precompiled headers, to save disk
   space, but you can switch PCH compiling on for greater speed.
   NOTE: you may also use samples/samples.dsw to access all
   sample projects without opening each workspace individually.
   You can use the Batch Build facility to make several samples
   at a time.

Using makefiles:

1. Make sure your WXWIN variable is set.
2. If you do NOT have the TIFF or JPEG source code, please remove
   the tiff and jpeg targets from the 'all' target in
   src\msw\makefile.vc. Also ensure the settings in
   include\wx\msw\setup.h specify not to use JPEG or TIFF.
3. Change directory to wx\src\msw. Type:

  'nmake -f makefile.vc'

   to make the wxWindows core library with debug information
   (wx\lib\wxd.lib), then

  'nmake -f makefile.vc cleanall FINAL=1'
  'nmake -f makefile.vc FINAL=1'

   to make the wxWindows core library without debug information.
4. Change directory to wx\samples and type 'nmake -f makefile.vc'
   to make all the samples. You can also make them individually.

Makefile notes:

  Use the 'cleanall' target to clean all objects, libraries and
  executables.

  To build the release version using makefiles, add FINAL=1 to your
  nmake invocation, both when building the library and for samples.
  You MUST use the 'cleanall' target (with FINAL=1 or FINAL=0)
  before making a different configuration, because otherwise
  object files used to build the previous configuration may be
  used accidentally for the current configuration. You might see
  this manifested in unexpected link errors or warnings. This problem
  doesn't occur when using project files to build wxWindows.

  To build Unicode versions of the libraries, add UNICODE=1
  to the nmake invocation (default is UNICODE=0). If you want to
  be able to use Unicode version on Windows9x, you will need 
  MSLU (Microsoft Layer for Unicode) runtime DLL and import lib.
  The former can be downloaded from Microsoft, the latter is part
  of the latest Platform SDK from Microsoft (see msdn.microsoft.com 
  for details). An alternative implementation of import library can
  be downloaded from http://libunicows.sourceforge.net - unlike the
  official one, this one works with other compilers and does not
  require 300+ MB Platform SDK update. Add MSLU=1 to the nmake
  invocation to enable MSLU.

  Note that the wxWindows core library allows you to have debug
  and release libraries available simultaneously, by compiling the
  objects in different subdirectories, whereas samples must be
  cleaned and re-made to build a different configuration.

To build the DLL version using makefiles:

1. Change directory to wx\src\msw. Type 'nmake -f makefile.vc dll'
   to make both a suitable DLL and import library, and to build a
   suitable precompiled header file for compiling applications.
   See the previous section for library names.
2. Invoke a sample makefile with 'nmake -f makefile.vc WXUSINGDLL=1'
   (or edit src\makeprog.vc to set WXUSINGDLL to 1 for all
   applications).

Note (1): if you wish to use templates, please edit
include\wx\msw\setup.h and set wxUSE_DEBUG_NEW_ALWAYS to 0.
Without this, the redefinition of 'new' will cause problems in
the headers. Alternatively, #undef new before including template headers.
You will also need to set wxUSE_IOSTREAMH to 0 if you will be
using templates, to avoid the non-template stream files being included
within wxWindows.

Note (2): libraries and applications generated with makefiles and
project files are now (hopefully) compatible where static libraries
are concerned, but please exercise caution nevertheless and if
possible, use one method or the other.

Note (3): VC++ 5's optimization code seems to be broken and can
cause both compile and run-time problems: this can be seen when
deleting an object Dialog Editor, in Release mode with optimizations
on. If in doubt, switch off optimisations, although this will result in much
larger executables. It seems possible that the library can be created with
strong optimization, so long as the application is not strongly
optimized. For example, in wxWindows project, set to 'Minimum
Size'. In Dialog Editor project, set to 'Customize: Favor Small
Code' (and no others). This will then work.

Note (4): some crash problems can be due to inconsistent compiler
options. If strange/weird/impossible things start to happen please
check (dumping IDE project file as makefile and doing text comparison
if necessary) that the project settings, especially the list of defined
symbols, struct packing, etc. are exactly the same for all items in
the project. After this, delete everything (including PCH) and recompile.

Note (5): to create your own IDE files, see the technical note on the
wxWindows web site or CD-ROM, entitled "Compiling wxWindows
applications in the VC++ IDE" (technical note docs/tech/tn0010.htm in the
wxWindows distribution). You can also copy .dsp and .dsw
files from an existing wxWindows sample and adapt them.

Visual C++ 1.5 compilation (16-bit)
-----------------------------------

NOTE: this has not been tested recently and probably doesn't
work.

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Change directory to wx\src\msw. Type 'nmake -f makefile.dos' to
   make the wxWindows core library.
3. Change directory to a sample, such as wx\samples\minimal, and
   type 'nmake -f makefile.dos'.

Add FINAL=1 to your makefile invocation to build the release
versions of the library and samples.

Use the 'clean' target to clean all objects, libraries and
executables.

Borland C++ 4.5/5.0/5.5 compilation
-------------------------------

Compiling using the makefiles (updated 24 Sept 02):

1. Make sure your WXWIN variable is set [e.g add
   set WXWIN=c:\wxwindows
   to your autoexec.bat file], The WXWIN variable should contain neither spaces nor -
   You may like to use the short form as shown by a DOS directory listing. 
   Reboot if needed for the changes to autoexec.bat to take effect.   
2. Change directory to src\msw. Type 'make -f makefile.b32' to
   make the wxWindows core library. Ignore the compiler warnings.
   This produces a library in the wxwindows\lib directory called
   wx32ds.lib
3. Change directory to a sample or demo such as samples\minimal, and type
  'make -f makefile.b32'. This produces a windows exe file
4. For release versions, recompile wxWindows and samples using
   'make -f makefile.b32 clean'
   'make -f makefile.b32 FINAL=1'
   for the library and samples. This produces a library wx32s.lib eliminating
   all debugging information - if you wish to retain reduced debugging information
   'make -f makefile.b32 clean'
   'make -f makefile.b32 FINAL=hybrid'

5. To make and use wxWindows as a DLL, type
   'make -f makefile.b32 clean'
   'make -f makefile.b32 DLL=1'
   which generates a DLL (wx32d.dll) and import library (wx32d.lib), 
   and then for each sample,
   'make -f makefile.b32 WXUSINGDLL=1'
   Please note that the samples have not been exhaustively tested
   with this configuration. You may also generate a sepratae library
   and second DLL using the commands
   'make -f makefile.b32 clean'
   'make -f makefile.b32 DLL=1 FINAL=1'
   which generates a DLL (wx32.dll) and import library (wx32.lib), 
   and then for each sample,
   'make -f makefile.b32 WXUSINGDLL=1 FINAL=1'

6. You can use the WXUNIVERSAL widgets instead of the native MSW
   ones (eg if you want to build an application with the same
   look and feel on all platforms)
   Use the command
   'make -f makefile.b32 WXUSINGUNIV=1'
   Then run
   'make -f makefile.b32 WXUSINGUNIV=1' in the sample directory  which you wish
   to build using the wxUniversal widgets. Use 'SET WXTHEME=GTK' [or  WIN32 or METAL]
   to test the existing themes
   The makefile is written with the intention that you can build DLLs
   and  do final releases by combinations of commandline parameters.
   At the time of writing, (Oct 02) not all the wxDialogs are working

7. To make console mode applications with wxWindows functions go
   to the src\msw directory
   'make -f makebase.b32 clean'
   'make -f makebase.b32'
   There is a sample\console directory and in this type
   'make -f makefile.b32 wxUSE_GUI=0'

Note (0): This provides the ability to produce separate wxwindows libraries
   for different purposes, and only have to rebuild the applications


Note (1): In Borland 4.5 and earleir, using bcc.exe you also need to define BCCDIR
in the autoexec.bat file; like this:
   set BCCDIR=c:\progra~1\borland\bcc
   so that it points to the root directory of 
   your Borland C++ installation, and it uses the FAT (short
   name) form with no spaces.


Note (2): the wxWindows library and (some) samples compile in 16-bit mode
using makefile.bcc, but at present the wxWindows resource system is switched
off in this mode. See issues.txt for details.

Note (3): unfortunately most samples won't link in 16-bit mode,
because the automatic data segment exceeds 64K. The minimal
sample links and runs, however.

Note (4): the wxWindows makefiles assume byte structure alignment. Please
make sure that your own project or makefile settings use the
same alignment, or you could experience mysterious crashes. To
change the alignment, add a suitable option to the $(CFG) target code
in src/msw/makefile.b32.

Note (5): if you get undefined _SQL... symbols at link time,
either install odbc32.lib from the BC++ CD-ROM into your BC++ lib
directory, or set wxUSE_ODBC to 0 in include\wx\msw\setup.h and
recompile wxWindows. The same applies if compiling using the IDE.

Note (6): BC++ 4.5 (not 5.0) trips up over jdmerge.c in the JPEG folder;
you will therefore need to set wxUSE_LIBJPEG to 0 in setup.h and remove
the jpeg target from src\msw\makefile.b32, and remove jpeg from
src\makeprog.b32.


Note (7): If you wish debug messages to be sent to the console in
debug mode, edit src\makeb32.env and change /aa to /Tpe in
LINK_FLAGS.

Compiling using the IDE files: [Borland C++ 5.0, not Cbuilder]

1. Load src\bc32.ide (Release settings)
2. Go to Options|Project... and specify the correct BC++ include and lib path for
   your file structure.
3. Press F9 to compile the wxWindows library.
4. Load samples\bc32.ide.
5. Go to Options|Project... and specify the correct BC++ include and lib path for
   your file structure.
6. Press F9 to compile the samples (build each node separately if
   you prefer, by right clicking and choose Build Node).
7. Run each sample: you may need to run from each sample's directory
   since some (notably the wxHTML samples) look for files
   relative to the working directory.

Note (1): the samples project file contains a selection of
samples, and not all samples. The remaining samples can be made
with the makefiles. See also the demos hierarchy which doesn't
have any BC++ project files yet.

Note (2): to make the png, zlib, jpeg and tiff libraries (needed for
some samples) you need to compile them with bc32.ide.

Note (3): the debug version of the wxWindows library is about 40 MB, and the
release version is around 5 MB.

See also the file docs/tech/tn0007.txt for further instructions and details
of how to create your own project files.

** REMEMBER **

In all of your wxWindows applications, your source code should include 
the following preprocessor directive:

#ifdef __BORLANDC__
#pragma hdrstop
#endif

(check the samples -- e.g., \wx2\samples\minimal\minimal.cpp -- for 
more details) 

Borland C++Builder IDE compilation
------------------------------

1. Build the wxWindows libraries using the Borland make utility as
   specified in the section called "Borland C++ 4.5/5.0 compilation"
   above. (C++ Builder includes a stand-alone C++ compiler.  For example,
   C++ Builder 4.0 comes with C++ 5.4.)

2. You can build samples using the makefiles as per the
   instructions for BC++ above, or you can follow the instructions
   in docs/tech/tn0004.htm or http://biolpc22.york.ac.uk/wx/bc/ide.html.
   You can use the process_sample_bcb.bat command which is in
   wxwindows\distrib\msw to generate a .mak or .bpr file for most of the
   samples [mak for Cbuilder 1-3; bpr for v4]. Execute this in the sample
   directory, passing the name of the cpp files on the command line.

Watcom C++ 10.6/11 and OpenWatcom compilation
---------------------------------------------

1. Make sure your WXWIN variable is set, and uses the DOS short
   name form.
2. Change directory to wx\src\msw. Type 'wmake -f makefile.wat' to
   make the wxWindows core library.
3. Change directory to wx\samples\minimal and type 'wmake -f makefile.wat'
   to make this sample. The exe will be placed in a watcom subdirectory.
   Repeat for other samples of interest.


There are several makefile variables which may be modified:

- FINAL may be set to 1 (e.g. 'wmake -f makefile.wat FINAL=1') to build
  the release version of the library, i.e. without debug info and with
  optimizations enabled

- WATCOM_SUFFIX is appended to the names of all libraries produced by the
  makefile -- this allows to use several compilers in the same wxWindows
  source tree. If you only use Watcom compiler, set WATCOM_SUFFIX to nothing.

- OUTPUTDIR may be set to the name of the directory where you want all the
  object files to be generated (the library files are always created in
  %WXWIN\lib). Compilation will fail if you set it to an empty string 
  to create them in the same directory as the source. If you change OUTPUTDIR, 
  make sure that it does not have a trailing backslash!

- In the samples, you may use EXEDIR=adir to build the samples in adir. Setting
  EXEDIR=. will build in the current directory,


Note (1): if your installation of Watcom doesn't have odbc32.lib file and
          you need it (i.e. you have wxUSE_ODBC=1), you can use the file
          from lib\watcom directory. See the notes in that directory.

Note (2): if variant.cpp is compiled with date/time class options, the linker
          gives up. So the date/time option is switched off for Watcom C++.
          Also, wxAutomationObject is not compiled with Watcom C++ 10.

Note (3): if Watcom can't read the precompiled header when building a sample,
          try deleting src\msw\watcom.pch and compiling the sample again.


Metrowerks CodeWarrior compilation
----------------------------------

1. CodeWarrior Pro7 project files in XML format are already 
   included in wxMSW-2.4.2.zip and the setup version.
2. Review the file include\wx\msw\setup.h (or include\wx\msw\setup0.h if 
   you are working from the CVS version) to make sure the settings reflect 
   what you want.  If you aren't sure, leave it alone and go with the 
   default settings.  A few notes:
       - Don't use wxUSE_DEBUG_NEW_ALWAYS: it doesn't mix well with MSL
       - wxUSE_GLOBAL_MEMORY_OPERATORS works, but memory leak reports 
         will be rather confusing due to interactions with the MSL ANSI
         and runtime libs.
3. The project file to build the Win32 wxWindows libraries relies on the 
   Batch File Runner plug-in.  This plug-in is not installed as part of 
   a normal CW7 installation.  However, you can find this plug-in on the 
   CodeWarrior Reference CD, in the Thrill Seekers folder; it's call the 
   "Batch File Post Linker". 
4. If you choose not to install the Batch File Runner plug-in, then you 
   need to do the following by hand:
      (1) Create the directories lib\cw7msw\include\wx and copy the file 
          include\wx\msw\setup.h (or include\wx\msw\setup0.h if you are 
          working from the CVS version) to lib\cw7msw\include\wx\setup.h
      (2) Create the directories lib\cw7mswd\include\wx and copy the file 
          include\wx\msw\setup.h (or include\wx\msw\setup0.h if you are 
          working from the CVS version) to lib\cw7mswd\include\wx\setup.h
5. Import src\wxWindowsW7.xml to create the project file wxWindowsW7.mcp.
   Store this project file in directory src.  You may get warnings about 
   not being able to find certain project paths; ignore these warnings, the 
   appropriate paths will be created during the build by the Batch File Runner.
6. Choose the wxlib Win32 debug or wxlib Win32 Release target and build.  You 
   will get some warnings about hidden virtual functions, illegal conversions 
   from const pointers to pointers, etc., all of which you can safely ignore.
   ***Note:  if you get errors that the compiler can't find "wx/setup.h", just 
   stop the build and build again.  These errors occur because sometimes the 
   compiler starts doing its thing before the copying of setup.h has completed.
7. The following libraries will be produced depending on chosen
   target:
       - wx_x86.lib             ANSI Release (static)
       - wx_x86_d.lib           ANSI Debug (static)
8. Sorry, I haven't had time yet to create and test unicode or DLL versions.
   Volunteers for this are welcome (as neither DLLs nor unicode builds are 
   big priorities for me ;).
9. CodeWarrior Pro7 project files (in XML format) are also provided for some 
   of the samples.  In particular, there are project files for the minimal, 
   controls, dialogs, dnd, nd docview samples.  You can use these project 
   files as templates for the other samples and for your own projects.  
       - For example, to make a project file for the "newgrid" sample, 
         just copy the project file for the "minimal" sample, minimalW7.mcp 
         (made by importing minimalW7.xml into CodeWarrior), into the 
         sample/newgrid directory, calling it newgridW7.mcp.  Open 
         newgridW7.mcp and revise the project by deleting the files 
         minimal.rc and minimal.cpp and adding the files griddemo.rc and 
         griddemo.cpp.  Build and run....

Cygwin/MinGW compilation
----------------------------------

wxWindows 2 supports Cygwin (formerly GnuWin32) betas and
releases, and MinGW. Cygwin can be downloaded from:

    http://sources.redhat.com/cygwin/

and MinGW from:

    http://www.mingw.org/

Both Cygwin and MinGW can be used with the same makefiles, and both can be
used with configure.

NOTE: some notes specific to old Cygwin (< 1.1.x)
      and MinGW (< 1.0) are at the end of this section
      (see OLD VERSIONS)

There are two methods of compiling wxWindows, by using the
makefiles provided or by using 'configure'.

Retrieve and install the latest version of Cygwin, or MinGW, as per
the instructions with either of these packages.

If using MinGW, you can download the add-on MSYS package to
provide Unix-like tools that you'll need to build wxWindows.
If you do not want to use MSYS, then you need to download extra utilities from
ports/mingw32 on the wxWindows ftp site or CD-ROM:

  ftp://biolpc22.york.ac.uk/pub/ports/mingw32/extra.zip
  
These should be extracted to a directory in your path. If you have 
already downloaded rm, cp, mv from elsewhere, or are using
MSYS, you won't need all of these files. However if using MSYS
and configure to build wxWindows, you will need to unzip the
following files from extra.zip and place them in e.g. an
extrabin directory which you then add to your path:

  bison.exe bison.hairy bison.simple flex.exe

You will also need to set these variables:

  set BISON_SIMPLE=c:\apps\mingw2.0.0-3\extrabin\bison.simple
  set BISON_HAIRY=c:\apps\mingw2.0.0-3\extrabin\bison.hairy

Here we're setting them in DOS before invoking 'sh', but you
could set them within the shell instead.

The 'configure' method uses flex and bison, whereas the
direct makefile method uses pregenerated C files.

Using makefiles directly
========================

NOTE: The makefile are for compilation under Cygwin, MSYS, or
      command.com/cmd.exe, they won't work in other environments
      (such as UNIX)

Here are the steps required using the provided makefiles:

- Set your WXWIN variable to where wxWindows is installed.
  *** IMPORTANT: For Cygwin/MinGW, use forward slashes in the path, not
  backslashes.

- Edit src/makeg95.env and set the MINGW32 variable at the top of
  the file to either 1 (you have MinGW) or 0 (if you have
  Cygwin); also set the MINGW32VERSION variable appropriately for your
  GCC version.

- Use the makefile.g95 files for compiling wxWindows and samples,
  e.g. to compile a debugging version of wxWindows:
  > cd c:\wx\src\msw
  > make -f makefile.g95 clean
  > make -f makefile.g95
  > cd c:\wx\samples\minimal
  > make -f makefile.g95 cleanall
  > make -f makefile.g95

  to compile with optimizations:
  > cd c:\wx\src\msw
  > make -f makefile.g95 clean
  > make -f makefile.g95 FINAL=1
  > cd c:\wx\samples\minimal
  > make -f makefile.g95 cleanall
  > make -f makefile.g95 FINAL=1

  to compile a DLL:
  > cd c:\wx\src\msw
  > make -f makefile.g95 clean
  > make -f makefile.g95 WXMAKINGDLL=1
  > cd c:\wx\samples\minimal
  > make -f makefile.g95 cleanall
  > make -f makefile.g95 WXUSINGDLL=1

  to compile the Unicode version:
  > cd c:\wx\src\msw
  > make -f makefile.g95 clean
  > make -f makefile.g95 UNICODE=1
  > cd c:\wx\samples\minimal
  > make -f makefile.g95 cleanall
  > make -f makefile.g95 UNICODE=1

  Options can be combined (e.g.: UNICODE=1 FINAL=1)

  Ignore the warning about the default entry point.

- Use the 'strip' command to reduce executable/dll size (note that
  stripping an executable/dll will remove debug information!).

- With Cygwin, you can invoke gdb --nw myfile.exe to
  debug an executable. If there are memory leaks, they will be
  flagged when the program quits. You can use Cygwin gdb
  to debug MinGW executables.

All targets have 'clean' targets to allow removal of object files
and other intermediate compiler files and 'cleanall' targets to
allow removal of all object files and library files.

Using configure
===============

Instead of using the makefiles, you can use the configure
system to generate appropriate makefiles, as used on Unix
and Mac OS X systems.

Change directory to the root of the wxWindows distribution,
make a build directory, and run configure and make in this directory.

For example:

  cd $WXWIN
  mkdir build-debug
  cd build-debug
  ../configure --with-msw --enable-debug --enable-debug_gdb --disable-shared
  make
  make install % This step is optional, see note (8) below.
  cd samples/minimal
  make
  ./minimal.exe

Notes:

1. See also the Cygwin/MinGW on the web site or CD-ROM for
   further information about using wxWindows with these compilers.

2. libwx.a is 100 MB or more - but much less if compiled with no
   debug info (-g0) and level 4 optimization (-O4).

3. If you get a link error under MinGW 2.95.2 referring to:

   EnumDAdvise__11IDataObjectPP13IEnumSTATDATA@8

   then you need to edit the file objidl.h at line 663 and add
   a missing PURE keyword:

   STDMETHOD(EnumDAdvise)(THIS_ IEnumSTATDATA**) PURE;

4. There's a bug in MinGW headers for some early distributions.

   in include/windows32/defines.h, where it says:

   #define LPSTR_TEXTCALLBACKA (LPSTR)-1L)

   it should say:

   #define LPSTR_TEXTCALLBACKA ((LPSTR)-1L)

   (a missing bracket).

5. If there's a problem with the copy or remove commands in
   src/msw/makefile.g95, you may need to change the COPY and
   RM variables in makeg95.env.

6. If there's a problem executing the windres program, try
   commenting out RCPREPROCESSOR in makeg95.env.

7. OpenGL support should work with MinGW as-is. However,
   if you wish to generate import libraries appropriate either for
   the MS OpenGL libraries or the SGI OpenGL libraries, go to
   include/wx/msw/gl and use:

     dlltool -k -d opengl.def -llibopengl.a

   for the SGI DLLs, or

     dlltool -k -d opengl32.def -llibopengl32.a

   and similarly for glu[32].def.

8. The 'make install' step is optional, and copies files
   as follows:

   /usr/local/lib - wxmswXYZd.dll.a and wxmswXYZd.dll
   /usr/local/include/wx - wxWindows header files
   /usr/local/bin - wx-config

   You may need to do this if using wx-config with the
   default root path.

OLD VERSIONS:

- If using MinGW 2.95 and below with wxWindows 2.1 or above, you
  must hand-patch with Mingw32-gcc295.patches (located in the
  top-level of the wxWindows 2 installation). MinGW 2.95.2
  and above contain the fixes already.

- Modify the file wx/src/cygnus.bat (or mingw32.bat or mingegcs.bat)
  to set up appropriate variables, if necessary mounting drives.
  Run it before compiling.

- For Cygwin, make sure there's a \tmp directory on your
  Windows drive or bison will crash (actually you don't need
  bison for ordinary wxWindows compilation: a pre-generated .c file is
  supplied).

- If using GnuWin32 b18, you will need to copy windres.exe
  from e.g. the MinGW distribution, to a directory in your path.

Symantec C++ compilation
------------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Edit setup.h and set wxUSE_DRAG_AND_DROP to 0.
3. Change directory to wx\src\msw. Type 'make -f makefile.sc' to
   make the wxWindows core library.
4. Change directory to wx\samples\minimal and type 'make -f makefile.sc'
   to make this sample.

Note: the minimal sample doesn't link properly ('Error: no
start address').
32-bit compilation only (partially) supported at present, using SC++ 6.1.
Some functionality is missing using this compiler (see makefile).
Add -D__WIN95__ if your SC++ has Windows 95 support, and ignore
Step (2). 16-bit compilation is left as an exercise for the user!

Salford C++ compilation
-----------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Edit SALFORDDIR and RESOURCEDIR in src/makesl.env as per
   notes.
3. Change directory to wx\src\msw. Type 'mk32 -f makefile.sl all' to
   make the wxWindows core library.
4. Change directory to wx\samples\minimal and type 'mk32 -f makefile.sl'
   to make this sample.

Unfortunately, Salford C++ seems to have problems with its code generation for
operations on objects, as seen in wxFrame::OnMenuHighlight
(minimal sample) or wxWindow::SetValidator (mdi sample). Also the
the debugging version of the library is 90MB, with samples coming in
at 40MB :-) However, wxWindows at least makes a good test suite for
improving the compiler.

TWIN32 and gcc on Linux
-----------------------

The wxWindows 2 for Windows port may be compiled using
the TWIN32 emulator package from www.willows.com. However,
TWIN32 is by no means finished so this should be taken as
something to think about for the future, rather than
a tool for writing products with.

Use makefile.twn in much the same way as makefile.g95, as
described above. Not all sample makefiles are supplied yet.

For some reason, I found I had to copy TWIN32's Windows resource
compiler (rc) to the current working directory for it to be found.

General Notes
-------------

- Debugging: under Windows 95, debugging output isn't output in
  the same way that it is under NT or Windows 3.1.
  Please see DebugView (bin/dbgview.exe in the distribution), also
  available from http://www.sysinternals.com and on the wxWindows CD-ROM
  under Packages.

- If you are installing wxWindows 2 from CVS, you may find that
  include/wx/msw/setup.h is missing. This is deliberate, to avoid
  developers' different setup.h configurations getting confused.
  Please copy setup0.h to setup.h before compiling. Also, read
  the BuildCVS.txt for other hints.

