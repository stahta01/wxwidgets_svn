# =========================================================================
#     This makefile was generated by
#     Bakefile 0.1.4 (http://bakefile.sourceforge.net)
#     Do not modify, all changes will be overwritten!
# =========================================================================

include ../../build/msw/config.gcc

# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

### Variables: ###

WX_RELEASE_NODOT = 25
OBJS = \
	gcc_$(PORTNAME)$(WXUNIVNAME)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WXDLLFLAG)$(CFG)
SETUPHDIR = \
	$(LIBDIRNAME)\$(PORTNAME)$(WXUNIVNAME)$(WXUNICODEFLAG)$(WXDEBUGFLAG)
INTERNAT_CXXFLAGS = $(__DEBUGINFO) $(__OPTIMIZEFLAG_2) $(GCCFLAGS) \
	-DHAVE_W32API_H -D__WXMSW__ $(__WXUNIV_DEFINE_p) $(__DEBUG_DEFINE_p) \
	$(__UNICODE_DEFINE_p) -I.\..\..\include -I$(SETUPHDIR) -Wall -I. \
	$(__DLLFLAG_p) -I.\..\..\samples -DNOPCH $(__EXCEPTIONSFLAG_4) \
	$(__EXCEPTIONSFLAG_5) $(CPPFLAGS) $(CXXFLAGS)
INTERNAT_OBJECTS =  \
	$(OBJS)\internat_internat.o \
	$(OBJS)\internat_internat_rc.o

### Conditionally set variables: ###

ifeq ($(GCC_VERSION),2.95)
GCCFLAGS = -fvtable-thunks
endif
ifeq ($(USE_GUI),0)
PORTNAME = base
endif
ifeq ($(USE_GUI),1)
PORTNAME = msw
endif
ifeq ($(BUILD),debug)
ifeq ($(DEBUG_FLAG),default)
WXDEBUGFLAG = d
endif
endif
ifeq ($(DEBUG_FLAG),1)
WXDEBUGFLAG = d
endif
ifeq ($(UNICODE),1)
WXUNICODEFLAG = u
endif
ifeq ($(WXUNIV),1)
WXUNIVNAME = univ
endif
ifeq ($(SHARED),1)
WXDLLFLAG = dll
endif
ifeq ($(MONOLITHIC),0)
EXTRALIBS_FOR_BASE = 
endif
ifeq ($(MONOLITHIC),1)
EXTRALIBS_FOR_BASE =  
endif
ifeq ($(BUILD),debug)
__OPTIMIZEFLAG_2 = -O0
endif
ifeq ($(BUILD),release)
__OPTIMIZEFLAG_2 = -O2
endif
ifeq ($(USE_EXCEPTIONS),0)
__EXCEPTIONSFLAG_4 = -fno-rtti
endif
ifeq ($(USE_EXCEPTIONS),1)
__EXCEPTIONSFLAG_4 = 
endif
ifeq ($(USE_EXCEPTIONS),0)
__EXCEPTIONSFLAG_5 = -fno-exceptions
endif
ifeq ($(USE_EXCEPTIONS),1)
__EXCEPTIONSFLAG_5 = 
endif
ifeq ($(WXUNIV),1)
__WXUNIV_DEFINE_p = -D__WXUNIVERSAL__
endif
ifeq ($(WXUNIV),1)
__WXUNIV_DEFINE_p_1 = --define __WXUNIVERSAL__
endif
ifeq ($(BUILD),debug)
ifeq ($(DEBUG_FLAG),default)
__DEBUG_DEFINE_p = -D__WXDEBUG__
endif
endif
ifeq ($(DEBUG_FLAG),1)
__DEBUG_DEFINE_p = -D__WXDEBUG__
endif
ifeq ($(BUILD),debug)
ifeq ($(DEBUG_FLAG),default)
__DEBUG_DEFINE_p_1 = --define __WXDEBUG__
endif
endif
ifeq ($(DEBUG_FLAG),1)
__DEBUG_DEFINE_p_1 = --define __WXDEBUG__
endif
ifeq ($(UNICODE),1)
__UNICODE_DEFINE_p = -D_UNICODE
endif
ifeq ($(UNICODE),1)
__UNICODE_DEFINE_p_1 = --define _UNICODE
endif
ifeq ($(SHARED),1)
__DLLFLAG_p = -DWXUSINGDLL
endif
ifeq ($(SHARED),1)
__DLLFLAG_p_1 = --define WXUSINGDLL
endif
ifeq ($(MONOLITHIC),0)
__WXLIB_CORE_p = \
	-lwx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core
endif
ifeq ($(MONOLITHIC),0)
__WXLIB_BASE_p = \
	-lwxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)
endif
ifeq ($(MONOLITHIC),1)
__WXLIB_MONO_p = \
	-lwx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)
endif
ifeq ($(USE_GUI),1)
__LIB_TIFF_p = -lwxtiff$(WXDEBUGFLAG)
endif
ifeq ($(USE_GUI),1)
__LIB_JPEG_p = -lwxjpeg$(WXDEBUGFLAG)
endif
ifeq ($(USE_GUI),1)
__LIB_PNG_p = -lwxpng$(WXDEBUGFLAG)
endif
ifeq ($(MSLU),1)
__UNICOWS_LIB_p = -lunicows
endif
ifeq ($(SHARED),0)
LIBDIRNAME = .\..\..\lib\gcc_lib$(CFG)
endif
ifeq ($(SHARED),1)
LIBDIRNAME = .\..\..\lib\gcc_dll$(CFG)
endif
ifeq ($(BUILD),debug)
ifeq ($(DEBUG_INFO),default)
__DEBUGINFO = -g
endif
endif
ifeq ($(BUILD),release)
ifeq ($(DEBUG_INFO),default)
__DEBUGINFO = 
endif
endif
ifeq ($(DEBUG_INFO),0)
__DEBUGINFO = 
endif
ifeq ($(DEBUG_INFO),1)
__DEBUGINFO = -g
endif


all: $(OBJS)
$(OBJS):
	-if not exist $(OBJS) mkdir $(OBJS)

### Targets: ###

all: $(OBJS)\internat.exe bg cs de fr ja ka pl ru

clean: 
	-if exist $(OBJS)\*.o del $(OBJS)\*.o
	-if exist $(OBJS)\internat.exe del $(OBJS)\internat.exe

$(OBJS)\internat.exe: $(INTERNAT_OBJECTS) $(OBJS)\internat_internat_rc.o
	$(CXX) -o $@ $(INTERNAT_OBJECTS) $(LDFLAGS) $(__DEBUGINFO) -mthreads -L$(LIBDIRNAME) -Wl,--subsystem,windows -mwindows  $(__WXLIB_CORE_p)  $(__WXLIB_BASE_p)  $(__WXLIB_MONO_p) $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p) -lwxzlib$(WXDEBUGFLAG)  -lwxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG) -lwxexpat$(WXDEBUGFLAG) $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lole32 -loleaut32 -luuid -lrpcrt4 -ladvapi32 -lwsock32 -lodbc32

bg: 
	if not exist $(OBJS)\bg mkdir $(OBJS)\bg
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\bg\%%f copy .\bg\%%f $(OBJS)\bg

cs: 
	if not exist $(OBJS)\cs mkdir $(OBJS)\cs
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\cs\%%f copy .\cs\%%f $(OBJS)\cs

de: 
	if not exist $(OBJS)\de mkdir $(OBJS)\de
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\de\%%f copy .\de\%%f $(OBJS)\de

fr: 
	if not exist $(OBJS)\fr mkdir $(OBJS)\fr
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\fr\%%f copy .\fr\%%f $(OBJS)\fr

ja: 
	if not exist $(OBJS)\ja mkdir $(OBJS)\ja
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\ja\%%f copy .\ja\%%f $(OBJS)\ja

ka: 
	if not exist $(OBJS)\ka mkdir $(OBJS)\ka
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\ka\%%f copy .\ka\%%f $(OBJS)\ka

pl: 
	if not exist $(OBJS)\pl mkdir $(OBJS)\pl
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\pl\%%f copy .\pl\%%f $(OBJS)\pl

ru: 
	if not exist $(OBJS)\ru mkdir $(OBJS)\ru
	for %%f in (internat.po internat.mo) do if not exist $(OBJS)\ru\%%f copy .\ru\%%f $(OBJS)\ru

$(OBJS)\internat_internat.o: ./internat.cpp
	$(CXX) -c -o $@ $(INTERNAT_CXXFLAGS) $<

$(OBJS)\internat_internat_rc.o: ./internat.rc
	windres --use-temp-file -i$< -o$@  --define __WXMSW__ $(__WXUNIV_DEFINE_p_1) $(__DEBUG_DEFINE_p_1) $(__UNICODE_DEFINE_p_1) --include-dir ./../../include --include-dir $(SETUPHDIR) --include-dir . $(__DLLFLAG_p_1) --include-dir ./../../samples --define NOPCH

.PHONY: all clean bg cs de fr ja ka pl ru
