#
# File:    Makeva.env
# Author:	Ulrich Leodolter
# Created:	Wed May 17 08:36:42 1995
# Updated:
#
# VisualAge C++ V3.0 makefile include file
#

# Suffixes
OBJSUFF=obj
SRCSUFF=cpp

OS2FLAGS=/c /W3 /D__VISAGECPP__ /Ss /Q /N100
OS2LINKFLAGS=/BASE:0x00010000 /PMTYPE:PM /NOE /NOD /ALIGN:16
OS2LIBS=CPPOM30.lib CPPOOC3.LIB OS2386.LIB

# Change this to your WXWIN directory
WXDIR=i:\dev\Wx2\wxwindows

WXSRC=$(WXDIR)\src\os2
WXINC=$(WXDIR)\include
WXBASESRC=$(WXDIR)\src\common
EXTRAINC=$(WXDIR)\src\png

#####################################################################
# These are the possible DLL/non-DLL usages:
#
# Type             	_DLL/_WINDLL WXUSINGDLL  WXMAKINGDLL  Library
#--------------------------------------------------------------------
# Normal application    -            -           -            wx.lib
#
# wxWin as DLL          Defined      -           Defined      wx200.lib
#
# App using wxWin DLL   -            Defined     -            wx200.lib
#
# App built as one DLL  Defined      -           -            wx.lib
#
######################################################################
#
# Compiling your app:
#--------------------
# when compiling an app to use the DLL version of wxWindows
# (but not to be a DLL itself), set WXUSINGDLL to 1 in your
# makefile just before including ntwxwin.mak.
# To compile wxWin _and_ app itself as a DLL, set DLL to 1
# in ntwxwin.mak, and do not set WXUSINGDLL.
#
# Compiling wxWindows:
#---------------------
# Use the dll target to compile wxWindows as DLL; then make 'pch'
# to generate a precompiled header for your apps to use. BUG: must compile without
# wxExpr (USE_WX_RESOURCES = 0) for this to link properly. Don't know why yet.
# Use the dllapp target to compile wxWindows for making a DLL app (not implemented yet)

#DLL=0

!if "$(WXUSINGDLL)" == "1"
EXTRADLLFLAGS=/DWXUSINGDLL=1
EXTRALNKFLAGS=/EXEC
!endif

!if "$(WXMAKINGDLL)" == "1"
EXTRADLLFLAGS=/DWXMAKINGDLL=1 /Ge- /D__OS2DLL__
EXTRALNKFLAGS=/DLL
!endif

!if "$(WXMAKINGDLL)" == "0" && "$(DLL)" == "1"
EXTRADLLFLAGS=
EXTRALNKFLAGS=/EXEC
!endif

!ifndef FINAL
FINAL=0
DEBUG=1
!endif

!ifndef DLL
DLL=0
!endif

# This sets 'D' to a suitable directory name
# for this kind of build, and WXLIBNAME to one of wx (static release), wx_d (static debug),
# wx200 (DLL release), wx200_d (DLL debug)

!if "$(WXMAKINGDLL)" == "1" || "$(WXUSINGDLL)" == "1"
WXLIBNAME=wx200
!else
WXLIBNAME=wx
!endif

!if "$(NEW_WXLIBNAME)" != ""
WXLIBNAME=$(NEW_WXLIBNAME)
!endif

!if "$(FINAL)" == "1"
D=Release
!else
D=Debug
!endif

WXLIB=$(WXDIR)\lib\$(WXLIBNAME).lib

!if "$(WXMAKINGDLL)" == "1" || "$(WXUSINGDLL)" == "1"
D=$(D)DLL
!endif


INC=-I$(WXINC) -I$(WXDIR)/src/jpeg -I$(WXDIR)/src/zlib -I$(EXTRAINC)
LIBS = $(EXTRALIBS) $(WXLIB) $(WINLIBS) $(WXDIR)\lib\jpeg.lib

MAKEPRECOMP=/FiWX/WXPREC.H
OPTIONS=

!if "$(FINAL)" == "0"
OPT =
DEBUG_FLAGS= /Ti /D__WXDEBUG__ #/Fb
LINK_DEBUG_FLAGS=/DEBUG
CRTFLAG=/Gm /Gd
!else
# /O1 - smallest code
# /O2 - fastest code
OPT = /O+ /Oc /G5
DEBUG_FLAGS=
LINK_DEBUG_FLAGS=/RELEASE
CRTFLAG=/Gm /Gd
!endif

!if "$(DLL)" == "0"

!if "$(NOPCH)" == "1"
PCH=
PRECOMP=
MAKEPRECOMP=
!else
PCH=$(WXLIBNAME).pch
PRECOMP=/Si$(PCH)
MAKEPRECOMP=/Fi$(PCH)
!endif

CPPFLAGS=$(OS2FLAGS) $(DEBUG_FLAGS) $(PRECOMP) $(EXTRAFLAGS) /D__WXPM__ $(INC) $(OPT) $(EXTRADLLFLAGS)  $(CRTFLAG) $(OVERRIDEFLAGS)
# If you don't include wxprec.h, use CPPFLAGS2
CPPFLAGS2=$(OS2FLAGS) $(DEBUG_FLAGS) /D__WXPM__ $(INC) $(EXTRAFLAGS) $(OPT) $(EXTRADLLFLAGS) $(CRTFLAG) $(OVERRIDEFLAGS)
LINKFLAGS=$(LINK_DEBUG_FLAGS) $(OS2LINKFLAGS) $(EXTRALNKFLAGS)
DUMMY=dummy

!else

!if "$(WXMAKINGDLL)" == "1"
PCH=$(WXLIBNAME).pch
DUMMY=dummydll
!else
PCH=$(WXLIBNAME).pch
DUMMY=dummy
!endif

PRECOMP=/SiWX/WXPREC.H
CPPFLAGS=$(OS2FLAGS) $(DEBUG_FLAGS) $(PRECOMP) $(EXTRAFLAGS) /D__WXPM__ $(INC) $(OPT) $(CRTFLAG) $(EXTRADLLFLAGS)
CPPFLAGS2=$(OS2FLAGS) $(DEBUG_FLAGS) /D__WXPM__ $(INC) $(EXTRAFLAGS) $(OPT) $(CRTFLAG) $(EXTRADLLFLAGS)
LINKFLAGS=$(LINK_DEBUG_FLAGS) $(OS2LINKFLAGS) $(EXTRALNKFLAGS)
!endif

DUMMYOBJ=$(WXDIR)\src\os2\$D\$(DUMMY).obj

.c.obj:
 icc @<<
$(CPPFLAGS2) /Fo$@ /c $<
<<

.cpp.obj:
 icc @<<
$(CPPFLAGS2) /Fo$@ /c $<
<<

