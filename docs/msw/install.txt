
Installing wxWindows 2.0
------------------------

Unarchiving
-----------

If there is a setup program, run the setup program that comes with the Windows version.
Do not install into a path that contains spaces. The installation program should set the
WXWIN environment variable, which will be activated when your machine is rebooted.

If there is no setup program, it will come as a series of .zip
files:

wx200gen.zip            Generic source code and samples (required)
wx200msw.zip            Windows-specific source code and samples (required)
wx200doc.zip            Documentation source code (not required)
wx200hlp.zip            WinHelp documentation
wx200pdf.zip            Acrobat PDF documentation
wx200htm.zip            HTML documentation
wx200vc.zip             MS VC++ 5.0 project files
wx200cw.zip             Metrowerks CodeWarrior project files

Unarchive the required files plus any optional documentation
files into a suitable directory such as c:\wx. Alter your
WXWIN environment variable to point to this directory.

Compilation
-----------

At present, wxWindows compiles with VC++ 4.0/5.0/6.0,
BC++ 4.5/5.0, Gnu-Win32 b19/b20, and Mingw32. It may compile
with 16-bit compilers (BC++ and VC++ 1.5) but this hasn't
been tested lately.

Visual C++ 4.0/5.0/6.0 compilation
----------------------------------

Using project files:

1. Unarchive wx200vc.zip, the VC++ 5 project makefiles.
2. Open src/wxvc.dsp, set Debug or Release configuration, and
   compile. This will produce lib/wxvc.lib or lib/wxvc_debug.lib.
3. Open a sample project file, choose a configuration, and compile.
   The project files don't use precompiled headers, to save
   space, but you can switch PCH compiling on for greater speed.

Using makefiles:

1. Make sure your WXWIN variable is set.
2. Change directory to wx\src\msw. Type 'nmake -f makefile.vc' to
   make the wxWindows core library.
3. Change directory to wx\samples and type 'nmake -f makefile.vc'
   to make all the samples. You can also make them individually.

Note (1): if you wish to use templates, please edit
include\wx\msw\setup.h and set wxUSE_DEBUG_NEW_ALWAYS to 0.
Without this, the redefinition of 'new' will cause problems in
the headers. Alternatively, #undef new before including template headers.

Note (2): libraries and applications generated with makefiles and
project files are unlikely to be compatible, so use one method or
the other.

Visual C++ 1.5 compilation
--------------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Change directory to wx\src\msw. Type 'nmake -f makefile.dos' to
   make the wxWindows core library.
3. Change directory to a sample, such as wx\samples\minimal, and
   type 'nmake -f makefile.dos'.

Borland C++ 4.5/5.0 compilation
-------------------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form if doing a 16-bit compile.
2. Change directory to wx\src\msw. Type 'make -f makefile.b32' to
   make the wxWindows core library. Ignore the warnings about
   'XXX' not found in library.
3. Change directory to a sample such as minimal, and type
  'make -f makefile.b32'.
4. For release versions, recompile wxWindows and samples using
   'make -f makefile.b32 clean'
   'make -f makefile.b32 FINAL=1'
   for the library and samples.

Note: the wxWindows library and (some) samples compile in 16-bit mode
using makefile.bcc, but at present the wxWindows resource system is switched
off in this mode. See issues.txt for details.

Borland C++Builder compilation
------------------------------

C++Builder compilation is the same as for Borland C++ above.

Tested with C++Builder 1.0 and 3.0. Only makefiles are currently
supplied.

Watcom C++ 10.6 compilation
---------------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Change directory to wx\src\msw. Type 'wmake -f makefile.wat' to
   make the wxWindows core library.
3. Change directory to wx\samples\minimal and type 'wmake -f makefile.wat'
   to make this sample.

Metrowerks CodeWarrior compilation
----------------------------------

1. Downloaded and unzip wx200cw.zip.
2. Load the make_cw.mcp project in wx\src, and compile.
3. Load the make_cw.mcp project in wx\samples\minimal, and compile.
   Further project files for samples will be available in due
   course.

Symantec C++ compilation
------------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Edit setup.h and set wxUSE_DRAG_AND_DROP to 0.
3. Change directory to wx\src\msw. Type 'make -f makefile.sc' to
   make the wxWindows core library.
4. Change directory to wx\samples\minimal and type 'make -f makefile.sc'
   to make this sample.

Note: the minimal sample doesn't link properly ('Error: no
start address').
32-bit compilation only (partially) supported at present, using SC++ 6.1.
Some functionality is missing using this compiler (see makefile).
Add -D__WIN95__ if your SC++ has Windows 95 support, and ignore
Step (2). 16-bit compilation is left as an excercise for the user!

Salford C++ compilation
-----------------------

1. Make sure your WXWIN variable is set, and uses the FAT (short
   name) form.
2. Edit SALFORDDIR and RESOURCEDIR in src/makesl.env as per
   notes.
3. Change directory to wx\src\msw. Type 'mk32 -f makefile.sl all' to
   make the wxWindows core library.
4. Change directory to wx\samples\minimal and type 'mk32 -f makefile.sl'
   to make this sample.

Unfortunately, Salford C++ seems to have problems with its code generation for
operations on objects, as seen in wxFrame::OnMenuHighlight
(minimal sample) or wxWindow::SetValidator (mdi sample). Also the
the debugging version of the library is 90MB, with samples coming in
at 40MB :-) However, wxWindows at least makes a good test suite for
improving the compiler.

Gnu-Win32 b19/b20/Mingw32 compilation
-------------------------------------

wxWindows 2.0 supports Gnu-Win32/Cygwin b19, b20, Mingw32, and Mingw32/EGCS.

Thanks are due to Keith Garry Boyce (garp@opustel.com) and Cygnus for making
it all possible.

From wxWindows 2.0 beta 9, both Gnu-Win32 and Mingw32 (the minimal
distribution of Gnu-Win32) can be used with the same makefiles.

Here are the steps required:

- Retrieve and install the latest beta of Gnu-Win32, or Mingw32, as per the
  instructions with either of these packages.

- If using Mingw32 (including the EGCS variant), you need some
  extra files to use the wxWindows makefiles. You can find these
  files in ports/mingw32 on the ftp site or CD-ROM, as extra.zip.
  These should be extracted to the Mingw32 directory.
  IMPORTANT: also see mingw32.txt in this directory (docs/msw)
  about a fix that has to be applied to a Mingw32 header file.

- Modify the file wx/src/cygnus.bat (or mingw32.bat or mingegcs.bat)
  to set up appropriate variables, if necessary mounting drives.
  Run it before compiling.

- For Gnu-Win32, make sure there's a \tmp directory on your
  Windows drive or bison will crash.

- Edit wx/src/makeg95.env and search for MINGW32. Take note of
  the comments for adjusting settings to suit Gnu-Win32 or
  Mingw32. Basically, this is just a case of adding the __MINGW32__ symbol
  to OPTIONS for Mingw32, or removing it for Cygnus Gnu-Win32.
  For Mingw32/EGCS, add both __MINGW32__ and __EGCS__.

- Mingw32 may not support winsock.h, so comment out
  socket-related files in src/msw/makefile.g95.

- Use the makefile.g95 files for compiling wxWindows and samples,
  e.g.:
  > cd c:\wx\src\msw
  > make -f makefile.g95
  > cd c:\wx\samples\minimal
  > make -f makefile.g95

- Use the 'strip' command to reduce executable size.

- With Cygnus Gnu-Win32, you can invoke gdb --nw myfile.exe to
  debug an executable. If there are memory leaks, they will be
  flagged when the program quits.

- If using GnuWin32 b18, you will need to copy windres.exe
  from e.g. the Mingw32 distribution, to a directory in your path.

All targets have 'clean' targets to allow removal of object files
and other intermediate compiler files.

Gotchas:

- libwx.a is 48 MB or more - but much less if compiled with no
  debug info (-g0) and level 4 optimization (-O4).
- install.exe doesn't have built-in decompression because lzexpand.lib
  isn't available with Gnu-Win32. However, you can use it with external
  decompression utilities.
- Doesn't compile src/msw/ole files, so no drag and drop.

References:

 - The GNU-WIN32 site is at
     http://www.cygnus.com/gnu-win32/
 - Mingw32 is available at:
     http://agnes.dida.physik.uni-essen.de/~janjaap/mingw32/index.html
 - See also http://web.ukonline.co.uk/julian.smart/wxwin/gnuwin32.htm

TWIN32 and gcc on Linux
-----------------------

The wxWindows 2 for Windows port may be compiled using
the TWIN32 emulator package from www.willows.com. However,
TWIN32 is by no means finished so this should be taken as
something to think about for the future, rather than
a tool for writing products with.

Use makefile.twn in much the same way as makefile.g95, as
described above. Not all sample makefiles are supplied yet.

Notes
-----

- Debugging: under Windows 95, debugging output isn't output in
  the same way that it is under NT or Windows 3.1. Set
  wxUSE_DBWIN32 to 1 if you wish to enable code to output debugging
  info to an external debug monitor, such as Andrew Tucker's DBWIN32.
  You can download DBWIN32 from:

        http://ftp.digital.com/pub/micro/NT/WinSite/programr/dbwin32.zip

  and it's also on the wxWindows CD-ROM under Packages.

