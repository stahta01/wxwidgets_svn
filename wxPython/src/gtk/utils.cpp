/*
 * FILE : src/gtk/utils.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Build 883)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a) __declspec(dllexport) a
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a) a _export
#	else
#	    define SWIGEXPORT(a) a
#	endif
#   endif
#else
#   define SWIGEXPORT(a) a
#endif

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

extern void SWIG_MakePtr(char *, void *, char *);
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
extern char *SWIG_GetPtr(char *, void **, char *);
extern char *SWIG_GetPtrObj(PyObject *, void **, char *);
extern void SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
extern PyObject *SWIG_newvarlink(void);
#ifdef __cplusplus
}
#endif
#define SWIG_init    initutilsc

#define SWIG_name    "utilsc"

#include "export.h"
#include <wx/config.h>
#include <wx/fileconf.h>
#include <wx/datetime.h>


static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {
        target = o;
    } else if (target == Py_None) {
        Py_DECREF(Py_None);
        target = o;
    } else {
        if (!PyTuple_Check(target)) {
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);
        PyTuple_SetItem(o3, 0, o);

        o2 = target;
        target = PySequence_Concat(o2, o3);
        Py_DECREF(o2);
        Py_DECREF(o3);
    }
    return target;
}

#if PYTHON_API_VERSION >= 1009
    static char* wxStringErrorMsg = "String or Unicode type required";
#else
    static char* wxStringErrorMsg = "string type is required for parameter";
#endif

    static wxString wxPyEmptyStr("");

    static PyObject* __EnumerationHelper(bool flag, wxString& str, long index) {
        PyObject* ret = PyTuple_New(3);
        if (ret) {
            PyTuple_SET_ITEM(ret, 0, PyInt_FromLong(flag));
            PyTuple_SET_ITEM(ret, 1, PyString_FromString(str));
            PyTuple_SET_ITEM(ret, 2, PyInt_FromLong(index));
        }
        return ret;
    }

#define LOCAL *(new wxDateTime::TimeZone(wxDateTime::Local))
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_wxGetLocalTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxGetLocalTime",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (long )wxGetLocalTime();

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_wxGetUTCTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxGetUTCTime",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (long )wxGetUTCTime();

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_wxGetCurrentTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxGetCurrentTime",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (long )wxGetCurrentTime();

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_wxGetLocalTimeMillis(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxLongLong * _result;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxGetLocalTimeMillis",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxLongLong (wxGetLocalTimeMillis());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    PyObject *hi, *lo, *shifter, *shifted;
    hi = PyLong_FromLong(_result->GetHi());
    lo = PyLong_FromLong(_result->GetLo());
    shifter = PyLong_FromLong(32);
    shifted = PyNumber_Lshift(hi, shifter);
    _resultobj = PyNumber_Or(shifted, lo);
    Py_DECREF(hi);
    Py_DECREF(lo);
    Py_DECREF(shifter);
    Py_DECREF(shifted);
}
    return _resultobj;
}

#define delete_wxConfigBase(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_wxConfigBase(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_wxConfigBase",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_wxConfigBase. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        delete_wxConfigBase(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_wxConfigBase_Set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "pConfig", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_Set",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_Set. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxConfigBase *)wxConfigBase::Set(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxConfigBase_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static PyObject *_wrap_wxConfigBase_Get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _result;
    bool  _arg0 = (bool ) TRUE;
    int tempbool0 = (int) TRUE;
    char *_kwnames[] = { "createOnDemand", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|i:wxConfigBase_Get",_kwnames,&tempbool0)) 
        return NULL;
    _arg0 = (bool ) tempbool0;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxConfigBase *)wxConfigBase::Get(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxConfigBase_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static PyObject *_wrap_wxConfigBase_Create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxConfigBase_Create",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxConfigBase *)wxConfigBase::Create();

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxConfigBase_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static PyObject *_wrap_wxConfigBase_DontCreateOnDemand(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxConfigBase_DontCreateOnDemand",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxConfigBase::DontCreateOnDemand();

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define wxConfigBase_DeleteAll(_swigobj)  (_swigobj->DeleteAll())
static PyObject *_wrap_wxConfigBase_DeleteAll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_DeleteAll",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_DeleteAll. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_DeleteAll(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxConfigBase_DeleteEntry(_swigobj,_swigarg0,_swigarg1)  (_swigobj->DeleteEntry(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_DeleteEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    bool  _arg2 = (bool ) TRUE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    int tempbool2 = (int) TRUE;
    char *_kwnames[] = { "self","key","bDeleteGroupIfEmpty", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|i:wxConfigBase_DeleteEntry",_kwnames,&_argo0,&_obj1,&tempbool2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_DeleteEntry. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
    _arg2 = (bool ) tempbool2;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_DeleteEntry(_arg0,*_arg1,_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_DeleteGroup(_swigobj,_swigarg0)  (_swigobj->DeleteGroup(_swigarg0))
static PyObject *_wrap_wxConfigBase_DeleteGroup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","key", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_DeleteGroup",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_DeleteGroup. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_DeleteGroup(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_Exists(_swigobj,_swigarg0)  (_swigobj->Exists(_swigarg0))
static PyObject *_wrap_wxConfigBase_Exists(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","strName", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_Exists",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_Exists. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_Exists(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_Flush(_swigobj,_swigarg0)  (_swigobj->Flush(_swigarg0))
static PyObject *_wrap_wxConfigBase_Flush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    bool  _arg1 = (bool ) FALSE;
    PyObject * _argo0 = 0;
    int tempbool1 = (int) FALSE;
    char *_kwnames[] = { "self","bCurrentOnly", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxConfigBase_Flush",_kwnames,&_argo0,&tempbool1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_Flush. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
    _arg1 = (bool ) tempbool1;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_Flush(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxConfigBase_GetAppName(_swigobj)  (_swigobj->GetAppName())
static PyObject *_wrap_wxConfigBase_GetAppName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_GetAppName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetAppName. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxConfigBase_GetAppName(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

static PyObject * wxConfigBase_GetFirstGroup(wxConfigBase *self) {
            bool     cont;
            long     index = 0;
            wxString value;

            cont = self->GetFirstGroup(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static PyObject *_wrap_wxConfigBase_GetFirstGroup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_GetFirstGroup",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetFirstGroup. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (PyObject *)wxConfigBase_GetFirstGroup(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
  _resultobj = _result;
}
    return _resultobj;
}

static PyObject * wxConfigBase_GetFirstEntry(wxConfigBase *self) {
            bool     cont;
            long     index = 0;
            wxString value;

            cont = self->GetFirstEntry(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static PyObject *_wrap_wxConfigBase_GetFirstEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_GetFirstEntry",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetFirstEntry. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (PyObject *)wxConfigBase_GetFirstEntry(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
  _resultobj = _result;
}
    return _resultobj;
}

static PyObject * wxConfigBase_GetNextGroup(wxConfigBase *self,long  index) {
            bool     cont;
            wxString value;

            cont = self->GetNextGroup(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static PyObject *_wrap_wxConfigBase_GetNextGroup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    wxConfigBase * _arg0;
    long  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ol:wxConfigBase_GetNextGroup",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetNextGroup. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (PyObject *)wxConfigBase_GetNextGroup(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
  _resultobj = _result;
}
    return _resultobj;
}

static PyObject * wxConfigBase_GetNextEntry(wxConfigBase *self,long  index) {
            bool     cont;
            wxString value;

            cont = self->GetNextEntry(value, index);
            return __EnumerationHelper(cont, value, index);
        }
static PyObject *_wrap_wxConfigBase_GetNextEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    wxConfigBase * _arg0;
    long  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ol:wxConfigBase_GetNextEntry",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetNextEntry. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (PyObject *)wxConfigBase_GetNextEntry(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define wxConfigBase_GetNumberOfEntries(_swigobj,_swigarg0)  (_swigobj->GetNumberOfEntries(_swigarg0))
static PyObject *_wrap_wxConfigBase_GetNumberOfEntries(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxConfigBase * _arg0;
    bool  _arg1 = (bool ) FALSE;
    PyObject * _argo0 = 0;
    int tempbool1 = (int) FALSE;
    char *_kwnames[] = { "self","bRecursive", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxConfigBase_GetNumberOfEntries",_kwnames,&_argo0,&tempbool1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetNumberOfEntries. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
    _arg1 = (bool ) tempbool1;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxConfigBase_GetNumberOfEntries(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxConfigBase_GetNumberOfGroups(_swigobj,_swigarg0)  (_swigobj->GetNumberOfGroups(_swigarg0))
static PyObject *_wrap_wxConfigBase_GetNumberOfGroups(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxConfigBase * _arg0;
    bool  _arg1 = (bool ) FALSE;
    PyObject * _argo0 = 0;
    int tempbool1 = (int) FALSE;
    char *_kwnames[] = { "self","bRecursive", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxConfigBase_GetNumberOfGroups",_kwnames,&_argo0,&tempbool1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetNumberOfGroups. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
    _arg1 = (bool ) tempbool1;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxConfigBase_GetNumberOfGroups(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxConfigBase_GetPath(_swigobj)  (_swigobj->GetPath())
static PyObject *_wrap_wxConfigBase_GetPath(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_GetPath",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetPath. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxConfigBase_GetPath(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

#define wxConfigBase_GetVendorName(_swigobj)  (_swigobj->GetVendorName())
static PyObject *_wrap_wxConfigBase_GetVendorName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_GetVendorName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetVendorName. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxConfigBase_GetVendorName(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

#define wxConfigBase_HasEntry(_swigobj,_swigarg0)  (_swigobj->HasEntry(_swigarg0))
static PyObject *_wrap_wxConfigBase_HasEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","strName", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_HasEntry",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_HasEntry. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_HasEntry(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_HasGroup(_swigobj,_swigarg0)  (_swigobj->HasGroup(_swigarg0))
static PyObject *_wrap_wxConfigBase_HasGroup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","strName", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_HasGroup",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_HasGroup. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_HasGroup(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_IsExpandingEnvVars(_swigobj)  (_swigobj->IsExpandingEnvVars())
static PyObject *_wrap_wxConfigBase_IsExpandingEnvVars(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_IsExpandingEnvVars",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_IsExpandingEnvVars. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_IsExpandingEnvVars(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxConfigBase_IsRecordingDefaults(_swigobj)  (_swigobj->IsRecordingDefaults())
static PyObject *_wrap_wxConfigBase_IsRecordingDefaults(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_IsRecordingDefaults",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_IsRecordingDefaults. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_IsRecordingDefaults(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxConfigBase_Read(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Read(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_Read(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    wxString * _arg2 = (wxString *) &wxPyEmptyStr;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","key","defaultVal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|O:wxConfigBase_Read",_kwnames,&_argo0,&_obj1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_Read. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
    if (_obj2)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj2) && !PyUnicode_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj2, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg2 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg2 = new wxString(PyString_AS_STRING(_obj2), PyString_GET_SIZE(_obj2));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxConfigBase_Read(_arg0,*_arg1,*_arg2));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    if (_obj1)
        delete _arg1;
}
{
    if (_obj2)
        delete _arg2;
}
{
    delete _result;
}
    return _resultobj;
}

#define wxConfigBase_ReadInt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Read(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_ReadInt(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    long  _arg2 = (long ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","key","defaultVal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|l:wxConfigBase_ReadInt",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_ReadInt. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (long )wxConfigBase_ReadInt(_arg0,*_arg1,_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("l",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_ReadFloat(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Read(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_ReadFloat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    double  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    double  _arg2 = (double ) 0.0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","key","defaultVal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|d:wxConfigBase_ReadFloat",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_ReadFloat. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (double )wxConfigBase_ReadFloat(_arg0,*_arg1,_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("d",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_SetExpandEnvVars(_swigobj,_swigarg0)  (_swigobj->SetExpandEnvVars(_swigarg0))
static PyObject *_wrap_wxConfigBase_SetExpandEnvVars(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _arg0;
    bool  _arg1 = (bool ) TRUE;
    PyObject * _argo0 = 0;
    int tempbool1 = (int) TRUE;
    char *_kwnames[] = { "self","bDoIt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxConfigBase_SetExpandEnvVars",_kwnames,&_argo0,&tempbool1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_SetExpandEnvVars. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
    _arg1 = (bool ) tempbool1;
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxConfigBase_SetExpandEnvVars(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define wxConfigBase_SetPath(_swigobj,_swigarg0)  (_swigobj->SetPath(_swigarg0))
static PyObject *_wrap_wxConfigBase_SetPath(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","strPath", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_SetPath",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_SetPath. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxConfigBase_SetPath(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_SetRecordDefaults(_swigobj,_swigarg0)  (_swigobj->SetRecordDefaults(_swigarg0))
static PyObject *_wrap_wxConfigBase_SetRecordDefaults(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _arg0;
    bool  _arg1 = (bool ) TRUE;
    PyObject * _argo0 = 0;
    int tempbool1 = (int) TRUE;
    char *_kwnames[] = { "self","bDoIt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxConfigBase_SetRecordDefaults",_kwnames,&_argo0,&tempbool1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_SetRecordDefaults. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
    _arg1 = (bool ) tempbool1;
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxConfigBase_SetRecordDefaults(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define wxConfigBase_SetAppName(_swigobj,_swigarg0)  (_swigobj->SetAppName(_swigarg0))
static PyObject *_wrap_wxConfigBase_SetAppName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","appName", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_SetAppName",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_SetAppName. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxConfigBase_SetAppName(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_SetVendorName(_swigobj,_swigarg0)  (_swigobj->SetVendorName(_swigarg0))
static PyObject *_wrap_wxConfigBase_SetVendorName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","vendorName", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_SetVendorName",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_SetVendorName. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxConfigBase_SetVendorName(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_SetStyle(_swigobj,_swigarg0)  (_swigobj->SetStyle(_swigarg0))
static PyObject *_wrap_wxConfigBase_SetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase * _arg0;
    long  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ol:wxConfigBase_SetStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_SetStyle. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxConfigBase_SetStyle(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define wxConfigBase_GetStyle(_swigobj)  (_swigobj->GetStyle())
static PyObject *_wrap_wxConfigBase_GetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    wxConfigBase * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxConfigBase_GetStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetStyle. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (long )wxConfigBase_GetStyle(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define wxConfigBase_Write(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Write(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_Write(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    wxString * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","key","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:wxConfigBase_Write",_kwnames,&_argo0,&_obj1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_Write. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj2) && !PyUnicode_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj2, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg2 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg2 = new wxString(PyString_AS_STRING(_obj2), PyString_GET_SIZE(_obj2));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_Write(_arg0,*_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
{
    if (_obj2)
        delete _arg2;
}
    return _resultobj;
}

#define wxConfigBase_WriteInt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Write(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_WriteInt(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    long  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","key","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOl:wxConfigBase_WriteInt",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_WriteInt. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_WriteInt(_arg0,*_arg1,_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_WriteFloat(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Write(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_WriteFloat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    double  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","key","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOd:wxConfigBase_WriteFloat",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_WriteFloat. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_WriteFloat(_arg0,*_arg1,_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_GetEntryType(_swigobj,_swigarg0)  (_swigobj->GetEntryType(_swigarg0))
static PyObject *_wrap_wxConfigBase_GetEntryType(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfigBase::EntryType  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","name", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_GetEntryType",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_GetEntryType. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxConfigBase::EntryType )wxConfigBase_GetEntryType(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

#define wxConfigBase_RenameEntry(_swigobj,_swigarg0,_swigarg1)  (_swigobj->RenameEntry(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_RenameEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    wxString * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","oldName","newName", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:wxConfigBase_RenameEntry",_kwnames,&_argo0,&_obj1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_RenameEntry. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj2) && !PyUnicode_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj2, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg2 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg2 = new wxString(PyString_AS_STRING(_obj2), PyString_GET_SIZE(_obj2));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_RenameEntry(_arg0,*_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
{
    if (_obj2)
        delete _arg2;
}
    return _resultobj;
}

#define wxConfigBase_RenameGroup(_swigobj,_swigarg0,_swigarg1)  (_swigobj->RenameGroup(_swigarg0,_swigarg1))
static PyObject *_wrap_wxConfigBase_RenameGroup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    wxString * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","oldName","newName", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:wxConfigBase_RenameGroup",_kwnames,&_argo0,&_obj1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_RenameGroup. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj2) && !PyUnicode_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj2, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg2 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg2 = new wxString(PyString_AS_STRING(_obj2), PyString_GET_SIZE(_obj2));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxConfigBase_RenameGroup(_arg0,*_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_obj1)
        delete _arg1;
}
{
    if (_obj2)
        delete _arg2;
}
    return _resultobj;
}

#define wxConfigBase_ExpandEnvVars(_swigobj,_swigarg0)  (_swigobj->ExpandEnvVars(_swigarg0))
static PyObject *_wrap_wxConfigBase_ExpandEnvVars(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxConfigBase * _arg0;
    wxString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","str", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxConfigBase_ExpandEnvVars",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfigBase_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxConfigBase_ExpandEnvVars. Expected _wxConfigBase_p.");
        return NULL;
        }
    }
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxConfigBase_ExpandEnvVars(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    if (_obj1)
        delete _arg1;
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigwxConfigTowxConfigBase(void *ptr) {
    wxConfig *src;
    wxConfigBase *dest;
    src = (wxConfig *) ptr;
    dest = (wxConfigBase *) src;
    return (void *) dest;
}

#define new_wxConfig(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new wxConfig(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_wxConfig(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfig * _result;
    wxString * _arg0 = (wxString *) &wxPyEmptyStr;
    wxString * _arg1 = (wxString *) &wxPyEmptyStr;
    wxString * _arg2 = (wxString *) &wxPyEmptyStr;
    wxString * _arg3 = (wxString *) &wxPyEmptyStr;
    long  _arg4 = (long ) 0;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "appName","vendorName","localFilename","globalFilename","style", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|OOOOl:new_wxConfig",_kwnames,&_obj0,&_obj1,&_obj2,&_obj3,&_arg4)) 
        return NULL;
    if (_obj0)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj0) && !PyUnicode_Check(_obj0)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj0, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg0 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj0)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg0 = new wxString(PyString_AS_STRING(_obj0), PyString_GET_SIZE(_obj0));
#endif
}
    if (_obj1)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
    if (_obj2)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj2) && !PyUnicode_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj2, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg2 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg2 = new wxString(PyString_AS_STRING(_obj2), PyString_GET_SIZE(_obj2));
#endif
}
    if (_obj3)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj3) && !PyUnicode_Check(_obj3)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj3, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg3 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj3)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg3 = new wxString(PyString_AS_STRING(_obj3), PyString_GET_SIZE(_obj3));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxConfig *)new_wxConfig(*_arg0,*_arg1,*_arg2,*_arg3,_arg4);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxConfig_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    if (_obj0)
        delete _arg0;
}
{
    if (_obj1)
        delete _arg1;
}
{
    if (_obj2)
        delete _arg2;
}
{
    if (_obj3)
        delete _arg3;
}
    return _resultobj;
}

#define delete_wxConfig(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_wxConfig(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxConfig * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_wxConfig",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxConfig_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_wxConfig. Expected _wxConfig_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        delete_wxConfig(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigwxFileConfigTowxConfigBase(void *ptr) {
    wxFileConfig *src;
    wxConfigBase *dest;
    src = (wxFileConfig *) ptr;
    dest = (wxConfigBase *) src;
    return (void *) dest;
}

#define new_wxFileConfig(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new wxFileConfig(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_wxFileConfig(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxFileConfig * _result;
    wxString * _arg0 = (wxString *) &wxPyEmptyStr;
    wxString * _arg1 = (wxString *) &wxPyEmptyStr;
    wxString * _arg2 = (wxString *) &wxPyEmptyStr;
    wxString * _arg3 = (wxString *) &wxPyEmptyStr;
    long  _arg4 = (long ) 0;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "appName","vendorName","localFilename","globalFilename","style", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|OOOOl:new_wxFileConfig",_kwnames,&_obj0,&_obj1,&_obj2,&_obj3,&_arg4)) 
        return NULL;
    if (_obj0)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj0) && !PyUnicode_Check(_obj0)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj0, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg0 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj0)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg0 = new wxString(PyString_AS_STRING(_obj0), PyString_GET_SIZE(_obj0));
#endif
}
    if (_obj1)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
    if (_obj2)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj2) && !PyUnicode_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj2, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg2 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj2)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg2 = new wxString(PyString_AS_STRING(_obj2), PyString_GET_SIZE(_obj2));
#endif
}
    if (_obj3)
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj3) && !PyUnicode_Check(_obj3)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj3, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg3 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj3)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg3 = new wxString(PyString_AS_STRING(_obj3), PyString_GET_SIZE(_obj3));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxFileConfig *)new_wxFileConfig(*_arg0,*_arg1,*_arg2,*_arg3,_arg4);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxFileConfig_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    if (_obj0)
        delete _arg0;
}
{
    if (_obj1)
        delete _arg1;
}
{
    if (_obj2)
        delete _arg2;
}
{
    if (_obj3)
        delete _arg3;
}
    return _resultobj;
}

#define delete_wxFileConfig(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_wxFileConfig(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxFileConfig * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_wxFileConfig",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxFileConfig_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_wxFileConfig. Expected _wxFileConfig_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        delete_wxFileConfig(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_SetCountry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::Country  _arg0;
    char *_kwnames[] = { "country", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:wxDateTime_SetCountry",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime::SetCountry(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetCountry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::Country  _result;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxDateTime_GetCountry",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::Country )wxDateTime::GetCountry();

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_IsWestEuropeanCountry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime::Country  _arg0 = (wxDateTime::Country ) wxDateTime::Country_Default;
    char *_kwnames[] = { "country", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|i:wxDateTime_IsWestEuropeanCountry",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime::IsWestEuropeanCountry(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetCurrentYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateTime::Calendar  _arg0 = (wxDateTime::Calendar ) wxDateTime::Gregorian;
    char *_kwnames[] = { "cal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|i:wxDateTime_GetCurrentYear",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateTime::GetCurrentYear(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_ConvertYearToBC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    int  _arg0;
    char *_kwnames[] = { "year", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:wxDateTime_ConvertYearToBC",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateTime::ConvertYearToBC(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetCurrentMonth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::Month  _result;
    wxDateTime::Calendar  _arg0 = (wxDateTime::Calendar ) wxDateTime::Gregorian;
    char *_kwnames[] = { "cal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|i:wxDateTime_GetCurrentMonth",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::Month )wxDateTime::GetCurrentMonth(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_IsLeapYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    int  _arg0 = (int ) wxDateTime::Inv_Year;
    wxDateTime::Calendar  _arg1 = (wxDateTime::Calendar ) wxDateTime::Gregorian;
    char *_kwnames[] = { "year","cal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|ii:wxDateTime_IsLeapYear",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime::IsLeapYear(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetCentury(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    int  _arg0 = (int ) wxDateTime::Inv_Year;
    char *_kwnames[] = { "year", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|i:wxDateTime_GetCentury",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateTime::GetCentury(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetNumberOfDaysinYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    int  _arg0;
    wxDateTime::Calendar  _arg1 = (wxDateTime::Calendar ) wxDateTime::Gregorian;
    char *_kwnames[] = { "year","cal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i|i:wxDateTime_GetNumberOfDaysinYear",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime::GetNumberOfDays(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetNumberOfDaysInMonth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime::Month  _arg0;
    int  _arg1 = (int ) wxDateTime::Inv_Year;
    wxDateTime::Calendar  _arg2 = (wxDateTime::Calendar ) wxDateTime::Gregorian;
    char *_kwnames[] = { "month","year","cal", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i|ii:wxDateTime_GetNumberOfDaysInMonth",_kwnames,&_arg0,&_arg1,&_arg2)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime::GetNumberOfDays(_arg0,_arg1,_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetMonthName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxDateTime::Month  _arg0;
    wxDateTime::NameFlags  _arg1 = (wxDateTime::NameFlags ) wxDateTime::Name_Full;
    char *_kwnames[] = { "month","flags", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i|i:wxDateTime_GetMonthName",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxDateTime::GetMonthName(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetWeekDayName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxDateTime::WeekDay  _arg0;
    wxDateTime::NameFlags  _arg1 = (wxDateTime::NameFlags ) wxDateTime::Name_Full;
    char *_kwnames[] = { "weekday","flags", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i|i:wxDateTime_GetWeekDayName",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxDateTime::GetWeekDayName(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetAmPmStrings(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _arg0;
    wxString * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "OUTPUT","OUTPUT", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_GetAmPmStrings",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj0) && !PyUnicode_Check(_obj0)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj0, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg0 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj0)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg0 = new wxString(PyString_AS_STRING(_obj0), PyString_GET_SIZE(_obj0));
#endif
}
{
#if PYTHON_API_VERSION >= 1009
    char* tmpPtr; int tmpSize;
    if (!PyString_Check(_obj1) && !PyUnicode_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    if (PyString_AsStringAndSize(_obj1, &tmpPtr, &tmpSize) == -1)
        return NULL;
    _arg1 = new wxString(tmpPtr, tmpSize);
#else
    if (!PyString_Check(_obj1)) {
        PyErr_SetString(PyExc_TypeError, wxStringErrorMsg);
        return NULL;
    }
    _arg1 = new wxString(PyString_AS_STRING(_obj1), PyString_GET_SIZE(_obj1));
#endif
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime::GetAmPmStrings(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    if (_obj0)
        delete _arg0;
}
{
    if (_obj1)
        delete _arg1;
}
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_IsDSTApplicable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    int  _arg0 = (int ) wxDateTime::Inv_Year;
    wxDateTime::Country  _arg1 = (wxDateTime::Country ) wxDateTime::Country_Default;
    char *_kwnames[] = { "year","country", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|ii:wxDateTime_IsDSTApplicable",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime::IsDSTApplicable(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetBeginDST(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    int  _arg0 = (int ) wxDateTime::Inv_Year;
    wxDateTime::Country  _arg1 = (wxDateTime::Country ) wxDateTime::Country_Default;
    char *_kwnames[] = { "year","country", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|ii:wxDateTime_GetBeginDST",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime::GetBeginDST(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_GetEndDST(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    int  _arg0 = (int ) wxDateTime::Inv_Year;
    wxDateTime::Country  _arg1 = (wxDateTime::Country ) wxDateTime::Country_Default;
    char *_kwnames[] = { "year","country", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|ii:wxDateTime_GetEndDST",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime::GetEndDST(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_Now(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxDateTime_Now",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime::Now());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateTime_Today(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxDateTime_Today",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime::Today());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define new_wxDateTime() (new wxDateTime())
static PyObject *_wrap_new_wxDateTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_wxDateTime",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime *)new_wxDateTime();

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define new_wxDateTimeFromTimeT(_swigarg0) (new wxDateTime(_swigarg0))
static PyObject *_wrap_new_wxDateTimeFromTimeT(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    time_t  _arg0;
    char *_kwnames[] = { "timet", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:new_wxDateTimeFromTimeT",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime *)new_wxDateTimeFromTimeT(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define new_wxDateTimeFromJDN(_swigarg0) (new wxDateTime(_swigarg0))
static PyObject *_wrap_new_wxDateTimeFromJDN(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    double  _arg0;
    char *_kwnames[] = { "jdn", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"d:new_wxDateTimeFromJDN",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime *)new_wxDateTimeFromJDN(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define new_wxDateTimeFromHMS(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new wxDateTime(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_new_wxDateTimeFromHMS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime::wxDateTime_t  _arg0;
    wxDateTime::wxDateTime_t  _arg1 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg2 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg3 = (wxDateTime::wxDateTime_t ) 0;
    char *_kwnames[] = { "hour","minute","second","millisec", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"h|hhh:new_wxDateTimeFromHMS",_kwnames,&_arg0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime *)new_wxDateTimeFromHMS(_arg0,_arg1,_arg2,_arg3);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define new_wxDateTimeFromDMY(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6) (new wxDateTime(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6))
static PyObject *_wrap_new_wxDateTimeFromDMY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime::wxDateTime_t  _arg0;
    wxDateTime::Month  _arg1 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg2 = (int ) wxDateTime::Inv_Year;
    wxDateTime::wxDateTime_t  _arg3 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg4 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg5 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg6 = (wxDateTime::wxDateTime_t ) 0;
    char *_kwnames[] = { "day","month","year","hour","minute","second","millisec", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"h|iihhhh:new_wxDateTimeFromDMY",_kwnames,&_arg0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime *)new_wxDateTimeFromDMY(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define delete_wxDateTime(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_wxDateTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_wxDateTime",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_wxDateTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        delete_wxDateTime(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define wxDateTime_SetToCurrent(_swigobj)  (_swigobj->SetToCurrent())
static PyObject *_wrap_wxDateTime_SetToCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_SetToCurrent",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToCurrent. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetToCurrent(_arg0);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetTimeT(_swigobj,_swigarg0)  (_swigobj->Set(_swigarg0))
static PyObject *_wrap_wxDateTime_SetTimeT(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    time_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","timet", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_SetTimeT",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetTimeT. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetTimeT(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetJDN(_swigobj,_swigarg0)  (_swigobj->Set(_swigarg0))
static PyObject *_wrap_wxDateTime_SetJDN(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    double  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","jdn", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:wxDateTime_SetJDN",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetJDN. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetJDN(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetHMS(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->Set(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_wxDateTime_SetHMS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    wxDateTime::wxDateTime_t  _arg2 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg3 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg4 = (wxDateTime::wxDateTime_t ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hour","minute","second","millisec", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh|hhh:wxDateTime_SetHMS",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetHMS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetHMS(_arg0,_arg1,_arg2,_arg3,_arg4);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_Set(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6)  (_swigobj->Set(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6))
static PyObject *_wrap_wxDateTime_Set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    wxDateTime::Month  _arg2 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg3 = (int ) wxDateTime::Inv_Year;
    wxDateTime::wxDateTime_t  _arg4 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg5 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg6 = (wxDateTime::wxDateTime_t ) 0;
    wxDateTime::wxDateTime_t  _arg7 = (wxDateTime::wxDateTime_t ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","day","month","year","hour","minute","second","millisec", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh|iihhhh:wxDateTime_Set",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_Set. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_Set(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_ResetTime(_swigobj)  (_swigobj->ResetTime())
static PyObject *_wrap_wxDateTime_ResetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_ResetTime",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ResetTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_ResetTime(_arg0);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetYear(_swigobj,_swigarg0)  (_swigobj->SetYear(_swigarg0))
static PyObject *_wrap_wxDateTime_SetYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","year", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_SetYear",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetYear. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetYear(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetMonth(_swigobj,_swigarg0)  (_swigobj->SetMonth(_swigarg0))
static PyObject *_wrap_wxDateTime_SetMonth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::Month  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","month", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_SetMonth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetMonth. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetMonth(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetDay(_swigobj,_swigarg0)  (_swigobj->SetDay(_swigarg0))
static PyObject *_wrap_wxDateTime_SetDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","day", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:wxDateTime_SetDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetDay(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetHour(_swigobj,_swigarg0)  (_swigobj->SetHour(_swigarg0))
static PyObject *_wrap_wxDateTime_SetHour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hour", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:wxDateTime_SetHour",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetHour. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetHour(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetMinute(_swigobj,_swigarg0)  (_swigobj->SetMinute(_swigarg0))
static PyObject *_wrap_wxDateTime_SetMinute(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","minute", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:wxDateTime_SetMinute",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetMinute. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetMinute(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetSecond(_swigobj,_swigarg0)  (_swigobj->SetSecond(_swigarg0))
static PyObject *_wrap_wxDateTime_SetSecond(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","second", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:wxDateTime_SetSecond",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetSecond. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetSecond(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetMillisecond(_swigobj,_swigarg0)  (_swigobj->SetMillisecond(_swigarg0))
static PyObject *_wrap_wxDateTime_SetMillisecond(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","millisecond", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:wxDateTime_SetMillisecond",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetMillisecond. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetMillisecond(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SetToWeekDayInSameWeek(_swigobj,_swigarg0)  (_swigobj->SetToWeekDayInSameWeek(_swigarg0))
static PyObject *_wrap_wxDateTime_SetToWeekDayInSameWeek(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_SetToWeekDayInSameWeek",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToWeekDayInSameWeek. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetToWeekDayInSameWeek(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_GetWeekDayInSameWeek(_swigobj,_swigarg0)  (_swigobj->GetWeekDayInSameWeek(_swigarg0))
static PyObject *_wrap_wxDateTime_GetWeekDayInSameWeek(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_GetWeekDayInSameWeek",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetWeekDayInSameWeek. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetWeekDayInSameWeek(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_SetToNextWeekDay(_swigobj,_swigarg0)  (_swigobj->SetToNextWeekDay(_swigarg0))
static PyObject *_wrap_wxDateTime_SetToNextWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_SetToNextWeekDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToNextWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetToNextWeekDay(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_GetNextWeekDay(_swigobj,_swigarg0)  (_swigobj->GetNextWeekDay(_swigarg0))
static PyObject *_wrap_wxDateTime_GetNextWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_GetNextWeekDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetNextWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetNextWeekDay(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_SetToPrevWeekDay(_swigobj,_swigarg0)  (_swigobj->SetToPrevWeekDay(_swigarg0))
static PyObject *_wrap_wxDateTime_SetToPrevWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_SetToPrevWeekDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToPrevWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetToPrevWeekDay(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_GetPrevWeekDay(_swigobj,_swigarg0)  (_swigobj->GetPrevWeekDay(_swigarg0))
static PyObject *_wrap_wxDateTime_GetPrevWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateTime_GetPrevWeekDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetPrevWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetPrevWeekDay(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_SetToWeekDay(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->SetToWeekDay(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_wxDateTime_SetToWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    int  _arg2 = (int ) 1;
    wxDateTime::Month  _arg3 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg4 = (int ) wxDateTime::Inv_Year;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday","n","month","year", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|iii:wxDateTime_SetToWeekDay",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_SetToWeekDay(_arg0,_arg1,_arg2,_arg3,_arg4);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_GetWeekDay(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->GetWeekDay(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_wxDateTime_GetWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    int  _arg2 = (int ) 1;
    wxDateTime::Month  _arg3 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg4 = (int ) wxDateTime::Inv_Year;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday","n","month","year", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|iii:wxDateTime_GetWeekDay",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetWeekDay(_arg0,_arg1,_arg2,_arg3,_arg4));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_SetToLastWeekDay(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->SetToLastWeekDay(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_wxDateTime_SetToLastWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    wxDateTime::Month  _arg2 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg3 = (int ) wxDateTime::Inv_Year;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday","month","year", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|ii:wxDateTime_SetToLastWeekDay",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToLastWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_SetToLastWeekDay(_arg0,_arg1,_arg2,_arg3);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_GetLastWeekDay(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetLastWeekDay(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_wxDateTime_GetLastWeekDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::WeekDay  _arg1;
    wxDateTime::Month  _arg2 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg3 = (int ) wxDateTime::Inv_Year;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weekday","month","year", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|ii:wxDateTime_GetLastWeekDay",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetLastWeekDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetLastWeekDay(_arg0,_arg1,_arg2,_arg3));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_SetToTheWeek(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetToTheWeek(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_SetToTheWeek(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    wxDateTime::WeekDay  _arg2 = (wxDateTime::WeekDay ) wxDateTime::Mon;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","numWeek","weekday", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh|i:wxDateTime_SetToTheWeek",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToTheWeek. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_SetToTheWeek(_arg0,_arg1,_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_GetWeek(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetWeek(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_GetWeek(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    wxDateTime::WeekDay  _arg2 = (wxDateTime::WeekDay ) wxDateTime::Mon;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","numWeek","weekday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh|i:wxDateTime_GetWeek",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetWeek. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetWeek(_arg0,_arg1,_arg2));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_SetToLastMonthDay(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetToLastMonthDay(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_SetToLastMonthDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::Month  _arg1 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg2 = (int ) wxDateTime::Inv_Year;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","month","year", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|ii:wxDateTime_SetToLastMonthDay",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToLastMonthDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetToLastMonthDay(_arg0,_arg1,_arg2);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_GetLastMonthDay(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetLastMonthDay(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_GetLastMonthDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::Month  _arg1 = (wxDateTime::Month ) wxDateTime::Inv_Month;
    int  _arg2 = (int ) wxDateTime::Inv_Year;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","month","year", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|ii:wxDateTime_GetLastMonthDay",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetLastMonthDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetLastMonthDay(_arg0,_arg1,_arg2));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_SetToYearDay(_swigobj,_swigarg0)  (_swigobj->SetToYearDay(_swigarg0))
static PyObject *_wrap_wxDateTime_SetToYearDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","yday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:wxDateTime_SetToYearDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SetToYearDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SetToYearDay(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_GetYearDay(_swigobj,_swigarg0)  (_swigobj->GetYearDay(_swigarg0))
static PyObject *_wrap_wxDateTime_GetYearDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::wxDateTime_t  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","yday", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:wxDateTime_GetYearDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetYearDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_GetYearDay(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_GetJulianDayNumber(_swigobj)  (_swigobj->GetJulianDayNumber())
static PyObject *_wrap_wxDateTime_GetJulianDayNumber(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    double  _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_GetJulianDayNumber",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetJulianDayNumber. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (double )wxDateTime_GetJulianDayNumber(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define wxDateTime_GetJDN(_swigobj)  (_swigobj->GetJDN())
static PyObject *_wrap_wxDateTime_GetJDN(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    double  _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_GetJDN",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetJDN. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (double )wxDateTime_GetJDN(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define wxDateTime_GetModifiedJulianDayNumber(_swigobj)  (_swigobj->GetModifiedJulianDayNumber())
static PyObject *_wrap_wxDateTime_GetModifiedJulianDayNumber(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    double  _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_GetModifiedJulianDayNumber",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetModifiedJulianDayNumber. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (double )wxDateTime_GetModifiedJulianDayNumber(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define wxDateTime_GetMJD(_swigobj)  (_swigobj->GetMJD())
static PyObject *_wrap_wxDateTime_GetMJD(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    double  _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_GetMJD",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetMJD. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (double )wxDateTime_GetMJD(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define wxDateTime_GetRataDie(_swigobj)  (_swigobj->GetRataDie())
static PyObject *_wrap_wxDateTime_GetRataDie(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    double  _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_GetRataDie",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetRataDie. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (double )wxDateTime_GetRataDie(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define wxDateTime_ToTimezone(_swigobj,_swigarg0,_swigarg1)  (_swigobj->ToTimezone(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_ToTimezone(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1;
    bool  _arg2 = (bool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    int tempbool2 = (int) FALSE;
    char *_kwnames[] = { "self","tz","noDST", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|i:wxDateTime_ToTimezone",_kwnames,&_argo0,&_obj1,&tempbool2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ToTimezone. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
    _arg2 = (bool ) tempbool2;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_ToTimezone(_arg0,*_arg1,_arg2));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_MakeTimezone(_swigobj,_swigarg0,_swigarg1)  (_swigobj->MakeTimezone(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_MakeTimezone(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1;
    bool  _arg2 = (bool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    int tempbool2 = (int) FALSE;
    char *_kwnames[] = { "self","tz","noDST", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|i:wxDateTime_MakeTimezone",_kwnames,&_argo0,&_obj1,&tempbool2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_MakeTimezone. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
    _arg2 = (bool ) tempbool2;
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_MakeTimezone(_arg0,*_arg1,_arg2);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_ToGMT(_swigobj,_swigarg0)  (_swigobj->ToGMT(_swigarg0))
static PyObject *_wrap_wxDateTime_ToGMT(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    bool  _arg1 = (bool ) FALSE;
    PyObject * _argo0 = 0;
    int tempbool1 = (int) FALSE;
    char *_kwnames[] = { "self","noDST", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxDateTime_ToGMT",_kwnames,&_argo0,&tempbool1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ToGMT. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    _arg1 = (bool ) tempbool1;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime_ToGMT(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateTime_MakeGMT(_swigobj,_swigarg0)  (_swigobj->MakeGMT(_swigarg0))
static PyObject *_wrap_wxDateTime_MakeGMT(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    bool  _arg1 = (bool ) FALSE;
    PyObject * _argo0 = 0;
    int tempbool1 = (int) FALSE;
    char *_kwnames[] = { "self","noDST", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxDateTime_MakeGMT",_kwnames,&_argo0,&tempbool1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_MakeGMT. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    _arg1 = (bool ) tempbool1;
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_MakeGMT(_arg0,_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_IsDST(_swigobj,_swigarg0)  (_swigobj->IsDST(_swigarg0))
static PyObject *_wrap_wxDateTime_IsDST(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateTime * _arg0;
    wxDateTime::Country  _arg1 = (wxDateTime::Country ) wxDateTime::Country_Default;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","country", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxDateTime_IsDST",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsDST. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateTime_IsDST(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsValid(_swigobj)  (_swigobj->IsValid())
static PyObject *_wrap_wxDateTime_IsValid(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_IsValid",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsValid. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsValid(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_GetTicks(_swigobj)  (_swigobj->GetTicks())
static PyObject *_wrap_wxDateTime_GetTicks(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    time_t  _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_GetTicks",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetTicks. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (time_t )wxDateTime_GetTicks(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_GetYear(_swigobj,_swigarg0)  (_swigobj->GetYear(_swigarg0))
static PyObject *_wrap_wxDateTime_GetYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetYear",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetYear. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateTime_GetYear(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetMonth(_swigobj,_swigarg0)  (_swigobj->GetMonth(_swigarg0))
static PyObject *_wrap_wxDateTime_GetMonth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::Month  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetMonth",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetMonth. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::Month )wxDateTime_GetMonth(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetDay(_swigobj,_swigarg0)  (_swigobj->GetDay(_swigarg0))
static PyObject *_wrap_wxDateTime_GetDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetDay",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetDay(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetHour(_swigobj,_swigarg0)  (_swigobj->GetHour(_swigarg0))
static PyObject *_wrap_wxDateTime_GetHour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetHour",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetHour. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetHour(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetMinute(_swigobj,_swigarg0)  (_swigobj->GetMinute(_swigarg0))
static PyObject *_wrap_wxDateTime_GetMinute(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetMinute",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetMinute. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetMinute(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetSecond(_swigobj,_swigarg0)  (_swigobj->GetSecond(_swigarg0))
static PyObject *_wrap_wxDateTime_GetSecond(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetSecond",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetSecond. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetSecond(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetMillisecond(_swigobj,_swigarg0)  (_swigobj->GetMillisecond(_swigarg0))
static PyObject *_wrap_wxDateTime_GetMillisecond(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetMillisecond",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetMillisecond. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetMillisecond(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetDayOfYear(_swigobj,_swigarg0)  (_swigobj->GetDayOfYear(_swigarg0))
static PyObject *_wrap_wxDateTime_GetDayOfYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::TimeZone * _arg1 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:wxDateTime_GetDayOfYear",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetDayOfYear. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    _arg1 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj1));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetDayOfYear(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg1) delete _arg1;
}
    return _resultobj;
}

#define wxDateTime_GetWeekOfYear(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetWeekOfYear(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_GetWeekOfYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::WeekFlags  _arg1 = (wxDateTime::WeekFlags ) wxDateTime::Monday_First;
    wxDateTime::TimeZone * _arg2 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","flags","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iO:wxDateTime_GetWeekOfYear",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetWeekOfYear. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    _arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj2));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetWeekOfYear(_arg0,_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg2) delete _arg2;
}
    return _resultobj;
}

#define wxDateTime_GetWeekOfMonth(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetWeekOfMonth(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_GetWeekOfMonth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime::wxDateTime_t  _result;
    wxDateTime * _arg0;
    wxDateTime::WeekFlags  _arg1 = (wxDateTime::WeekFlags ) wxDateTime::Monday_First;
    wxDateTime::TimeZone * _arg2 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","flags","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iO:wxDateTime_GetWeekOfMonth",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_GetWeekOfMonth. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    _arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj2));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateTime::wxDateTime_t )wxDateTime_GetWeekOfMonth(_arg0,_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("h",_result);
{
    if (_arg2) delete _arg2;
}
    return _resultobj;
}

#define wxDateTime_IsWorkDay(_swigobj,_swigarg0)  (_swigobj->IsWorkDay(_swigarg0))
static PyObject *_wrap_wxDateTime_IsWorkDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime::Country  _arg1 = (wxDateTime::Country ) wxDateTime::Country_Default;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","country", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:wxDateTime_IsWorkDay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsWorkDay. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsWorkDay(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsEqualTo(_swigobj,_swigarg0)  (_swigobj->IsEqualTo(_swigarg0))
static PyObject *_wrap_wxDateTime_IsEqualTo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","datetime", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_IsEqualTo",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsEqualTo. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsEqualTo. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsEqualTo(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsEarlierThan(_swigobj,_swigarg0)  (_swigobj->IsEarlierThan(_swigarg0))
static PyObject *_wrap_wxDateTime_IsEarlierThan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","datetime", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_IsEarlierThan",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsEarlierThan. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsEarlierThan. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsEarlierThan(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsLaterThan(_swigobj,_swigarg0)  (_swigobj->IsLaterThan(_swigarg0))
static PyObject *_wrap_wxDateTime_IsLaterThan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","datetime", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_IsLaterThan",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsLaterThan. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsLaterThan. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsLaterThan(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsStrictlyBetween(_swigobj,_swigarg0,_swigarg1)  (_swigobj->IsStrictlyBetween(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_IsStrictlyBetween(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    wxDateTime * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","t1","t2", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:wxDateTime_IsStrictlyBetween",_kwnames,&_argo0,&_argo1,&_argo2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsStrictlyBetween. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsStrictlyBetween. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of wxDateTime_IsStrictlyBetween. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsStrictlyBetween(_arg0,*_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsBetween(_swigobj,_swigarg0,_swigarg1)  (_swigobj->IsBetween(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_IsBetween(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    wxDateTime * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","t1","t2", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:wxDateTime_IsBetween",_kwnames,&_argo0,&_argo1,&_argo2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsBetween. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsBetween. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of wxDateTime_IsBetween. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsBetween(_arg0,*_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsSameDate(_swigobj,_swigarg0)  (_swigobj->IsSameDate(_swigarg0))
static PyObject *_wrap_wxDateTime_IsSameDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","dt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_IsSameDate",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsSameDate. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsSameDate. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsSameDate(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsSameTime(_swigobj,_swigarg0)  (_swigobj->IsSameTime(_swigarg0))
static PyObject *_wrap_wxDateTime_IsSameTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","dt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_IsSameTime",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsSameTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsSameTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsSameTime(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_IsEqualUpTo(_swigobj,_swigarg0,_swigarg1)  (_swigobj->IsEqualUpTo(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_IsEqualUpTo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    wxTimeSpan * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","dt","ts", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:wxDateTime_IsEqualUpTo",_kwnames,&_argo0,&_argo1,&_argo2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_IsEqualUpTo. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_IsEqualUpTo. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of wxDateTime_IsEqualUpTo. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxDateTime_IsEqualUpTo(_arg0,*_arg1,*_arg2);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_AddTS(_swigobj,_swigarg0)  (_swigobj->Add(_swigarg0))
static PyObject *_wrap_wxDateTime_AddTS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","diff", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_AddTS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_AddTS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_AddTS. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_AddTS(_arg0,*_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_AddDS(_swigobj,_swigarg0)  (_swigobj->Add(_swigarg0))
static PyObject *_wrap_wxDateTime_AddDS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","diff", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_AddDS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_AddDS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_AddDS. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_AddDS(_arg0,*_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SubtractTS(_swigobj,_swigarg0)  (_swigobj->Subtract(_swigarg0))
static PyObject *_wrap_wxDateTime_SubtractTS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","diff", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_SubtractTS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SubtractTS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_SubtractTS. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SubtractTS(_arg0,*_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_SubtractDS(_swigobj,_swigarg0)  (_swigobj->Subtract(_swigarg0))
static PyObject *_wrap_wxDateTime_SubtractDS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","diff", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_SubtractDS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_SubtractDS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_SubtractDS. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateTime & _result_ref = wxDateTime_SubtractDS(_arg0,*_arg1);
    _result = (wxDateTime *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateTime_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateTime_Subtract(_swigobj,_swigarg0)  (_swigobj->Subtract(_swigarg0))
static PyObject *_wrap_wxDateTime_Subtract(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","dt", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime_Subtract",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_Subtract. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime_Subtract. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxDateTime_Subtract(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateTime  wxDateTime___add__TS(wxDateTime *self,const wxTimeSpan & other) { return *self + other; }
static PyObject *_wrap_wxDateTime___add__TS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime___add__TS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime___add__TS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime___add__TS. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime___add__TS(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateTime  wxDateTime___add__DS(wxDateTime *self,const wxDateSpan & other) { return *self + other; }
static PyObject *_wrap_wxDateTime___add__DS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime___add__DS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime___add__DS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime___add__DS. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime___add__DS(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxTimeSpan  wxDateTime___sub__DT(wxDateTime *self,const wxDateTime & other) { return *self - other; }
static PyObject *_wrap_wxDateTime___sub__DT(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime___sub__DT",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime___sub__DT. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime___sub__DT. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxDateTime___sub__DT(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateTime  wxDateTime___sub__TS(wxDateTime *self,const wxTimeSpan & other) { return *self - other; }
static PyObject *_wrap_wxDateTime___sub__TS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime___sub__TS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime___sub__TS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime___sub__TS. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime___sub__TS(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateTime  wxDateTime___sub__DS(wxDateTime *self,const wxDateSpan & other) { return *self - other; }
static PyObject *_wrap_wxDateTime___sub__DS(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateTime * _result;
    wxDateTime * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime___sub__DS",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime___sub__DS. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime___sub__DS. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateTime (wxDateTime___sub__DS(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateTime_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static int  wxDateTime___cmp__(wxDateTime *self,const wxDateTime & other) {
            if (*self <  other) return -1;
            if (*self == other) return 0;
            return 1;
        }
static PyObject *_wrap_wxDateTime___cmp__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateTime * _arg0;
    wxDateTime * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateTime___cmp__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime___cmp__. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateTime___cmp__. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateTime___cmp__(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateTime_ParseRfc822Date(_swigobj,_swigarg0)  (_swigobj->ParseRfc822Date(_swigarg0))
static PyObject *_wrap_wxDateTime_ParseRfc822Date(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    char * _result;
    wxDateTime * _arg0;
    char * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","date", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:wxDateTime_ParseRfc822Date",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ParseRfc822Date. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (char *)wxDateTime_ParseRfc822Date(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define wxDateTime_ParseFormat(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->ParseFormat(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_wxDateTime_ParseFormat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    char * _result;
    wxDateTime * _arg0;
    char * _arg1;
    char * _arg2 = (char *) "%c";
    wxDateTime * _arg3 = (wxDateTime *) &wxDefaultDateTime;
    PyObject * _argo0 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","date","format","dateDef", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os|sO:wxDateTime_ParseFormat",_kwnames,&_argo0,&_arg1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ParseFormat. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of wxDateTime_ParseFormat. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (char *)wxDateTime_ParseFormat(_arg0,_arg1,_arg2,*_arg3);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define wxDateTime_ParseDateTime(_swigobj,_swigarg0)  (_swigobj->ParseDateTime(_swigarg0))
static PyObject *_wrap_wxDateTime_ParseDateTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    char * _result;
    wxDateTime * _arg0;
    char * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","datetime", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:wxDateTime_ParseDateTime",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ParseDateTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (char *)wxDateTime_ParseDateTime(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define wxDateTime_ParseDate(_swigobj,_swigarg0)  (_swigobj->ParseDate(_swigarg0))
static PyObject *_wrap_wxDateTime_ParseDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    char * _result;
    wxDateTime * _arg0;
    char * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","date", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:wxDateTime_ParseDate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ParseDate. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (char *)wxDateTime_ParseDate(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define wxDateTime_ParseTime(_swigobj,_swigarg0)  (_swigobj->ParseTime(_swigarg0))
static PyObject *_wrap_wxDateTime_ParseTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    char * _result;
    wxDateTime * _arg0;
    char * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","time", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:wxDateTime_ParseTime",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_ParseTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (char *)wxDateTime_ParseTime(_arg0,_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define wxDateTime_Format(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Format(_swigarg0,_swigarg1))
static PyObject *_wrap_wxDateTime_Format(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxDateTime * _arg0;
    char * _arg1 = (char *) "%c";
    wxDateTime::TimeZone * _arg2 = (wxDateTime::TimeZone *) &LOCAL;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","format","tz", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|sO:wxDateTime_Format",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_Format. Expected _wxDateTime_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    _arg2 = new wxDateTime::TimeZone((wxDateTime::TZ)PyInt_AsLong(_obj2));
}
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxDateTime_Format(_arg0,_arg1,*_arg2));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    if (_arg2) delete _arg2;
}
{
    delete _result;
}
    return _resultobj;
}

#define wxDateTime_FormatDate(_swigobj)  (_swigobj->FormatDate())
static PyObject *_wrap_wxDateTime_FormatDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_FormatDate",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_FormatDate. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxDateTime_FormatDate(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

#define wxDateTime_FormatTime(_swigobj)  (_swigobj->FormatTime())
static PyObject *_wrap_wxDateTime_FormatTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_FormatTime",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_FormatTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxDateTime_FormatTime(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

#define wxDateTime_FormatISODate(_swigobj)  (_swigobj->FormatISODate())
static PyObject *_wrap_wxDateTime_FormatISODate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_FormatISODate",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_FormatISODate. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxDateTime_FormatISODate(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

#define wxDateTime_FormatISOTime(_swigobj)  (_swigobj->FormatISOTime())
static PyObject *_wrap_wxDateTime_FormatISOTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxDateTime * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateTime_FormatISOTime",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateTime_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateTime_FormatISOTime. Expected _wxDateTime_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxDateTime_FormatISOTime(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Seconds(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    long  _arg0;
    char *_kwnames[] = { "sec", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"l:wxTimeSpan_Seconds",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Seconds(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Second(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxTimeSpan_Second",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Second());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Minutes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    long  _arg0;
    char *_kwnames[] = { "min", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"l:wxTimeSpan_Minutes",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Minutes(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Minute(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxTimeSpan_Minute",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Minute());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Hours(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    long  _arg0;
    char *_kwnames[] = { "hours", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"l:wxTimeSpan_Hours",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Hours(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Hour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxTimeSpan_Hour",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Hour());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Days(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    long  _arg0;
    char *_kwnames[] = { "days", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"l:wxTimeSpan_Days",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Days(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Day(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxTimeSpan_Day",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Day());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Weeks(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    long  _arg0;
    char *_kwnames[] = { "days", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"l:wxTimeSpan_Weeks",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Weeks(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxTimeSpan_Week(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxTimeSpan_Week",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan::Week());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define new_wxTimeSpan(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new wxTimeSpan(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_new_wxTimeSpan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    long  _arg0 = (long ) 0;
    long  _arg1 = (long ) 0;
    long  _arg2 = (long ) 0;
    long  _arg3 = (long ) 0;
    char *_kwnames[] = { "hours","minutes","seconds","milliseconds", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|llll:new_wxTimeSpan",_kwnames,&_arg0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxTimeSpan *)new_wxTimeSpan(_arg0,_arg1,_arg2,_arg3);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxTimeSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define delete_wxTimeSpan(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_wxTimeSpan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_wxTimeSpan",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_wxTimeSpan. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        delete_wxTimeSpan(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define wxTimeSpan_Add(_swigobj,_swigarg0)  (_swigobj->Add(_swigarg0))
static PyObject *_wrap_wxTimeSpan_Add(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","diff", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan_Add",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_Add. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan_Add. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxTimeSpan & _result_ref = wxTimeSpan_Add(_arg0,*_arg1);
    _result = (wxTimeSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxTimeSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxTimeSpan_Subtract(_swigobj,_swigarg0)  (_swigobj->Subtract(_swigarg0))
static PyObject *_wrap_wxTimeSpan_Subtract(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","diff", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan_Subtract",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_Subtract. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan_Subtract. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxTimeSpan & _result_ref = wxTimeSpan_Subtract(_arg0,*_arg1);
    _result = (wxTimeSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxTimeSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxTimeSpan_Multiply(_swigobj,_swigarg0)  (_swigobj->Multiply(_swigarg0))
static PyObject *_wrap_wxTimeSpan_Multiply(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxTimeSpan_Multiply",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_Multiply. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxTimeSpan & _result_ref = wxTimeSpan_Multiply(_arg0,_arg1);
    _result = (wxTimeSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxTimeSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxTimeSpan_Neg(_swigobj)  (_swigobj->Neg())
static PyObject *_wrap_wxTimeSpan_Neg(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_Neg",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_Neg. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxTimeSpan & _result_ref = wxTimeSpan_Neg(_arg0);
    _result = (wxTimeSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxTimeSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxTimeSpan_Abs(_swigobj)  (_swigobj->Abs())
static PyObject *_wrap_wxTimeSpan_Abs(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_Abs",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_Abs. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan_Abs(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxTimeSpan  wxTimeSpan___add__(wxTimeSpan *self,const wxTimeSpan & other) { return *self + other; }
static PyObject *_wrap_wxTimeSpan___add__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan___add__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan___add__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan___add__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan___add__(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxTimeSpan  wxTimeSpan___sub__(wxTimeSpan *self,const wxTimeSpan & other) { return *self - other; }
static PyObject *_wrap_wxTimeSpan___sub__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan___sub__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan___sub__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan___sub__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan___sub__(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxTimeSpan  wxTimeSpan___mul__(wxTimeSpan *self,int  n) { return *self * n; }
static PyObject *_wrap_wxTimeSpan___mul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxTimeSpan___mul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan___mul__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan___mul__(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxTimeSpan  wxTimeSpan___rmul__(wxTimeSpan *self,int  n) { return n * *self; }
static PyObject *_wrap_wxTimeSpan___rmul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxTimeSpan___rmul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan___rmul__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan___rmul__(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxTimeSpan  wxTimeSpan___neg__(wxTimeSpan *self) { return self->Negate(); }
static PyObject *_wrap_wxTimeSpan___neg__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxTimeSpan * _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan___neg__",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan___neg__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxTimeSpan (wxTimeSpan___neg__(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxTimeSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static int  wxTimeSpan___cmp__(wxTimeSpan *self,const wxTimeSpan & other) {
            if (*self <  other) return -1;
            if (*self == other) return 0;
            return 1;
        }
static PyObject *_wrap_wxTimeSpan___cmp__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan___cmp__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan___cmp__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan___cmp__. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxTimeSpan___cmp__(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_IsNull(_swigobj)  (_swigobj->IsNull())
static PyObject *_wrap_wxTimeSpan_IsNull(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_IsNull",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_IsNull. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxTimeSpan_IsNull(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_IsPositive(_swigobj)  (_swigobj->IsPositive())
static PyObject *_wrap_wxTimeSpan_IsPositive(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_IsPositive",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_IsPositive. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxTimeSpan_IsPositive(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_IsNegative(_swigobj)  (_swigobj->IsNegative())
static PyObject *_wrap_wxTimeSpan_IsNegative(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_IsNegative",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_IsNegative. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxTimeSpan_IsNegative(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_IsEqualTo(_swigobj,_swigarg0)  (_swigobj->IsEqualTo(_swigarg0))
static PyObject *_wrap_wxTimeSpan_IsEqualTo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","ts", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan_IsEqualTo",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_IsEqualTo. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan_IsEqualTo. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxTimeSpan_IsEqualTo(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_IsLongerThan(_swigobj,_swigarg0)  (_swigobj->IsLongerThan(_swigarg0))
static PyObject *_wrap_wxTimeSpan_IsLongerThan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","ts", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan_IsLongerThan",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_IsLongerThan. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan_IsLongerThan. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxTimeSpan_IsLongerThan(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_IsShorterThan(_swigobj,_swigarg0)  (_swigobj->IsShorterThan(_swigarg0))
static PyObject *_wrap_wxTimeSpan_IsShorterThan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    bool  _result;
    wxTimeSpan * _arg0;
    wxTimeSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","t", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxTimeSpan_IsShorterThan",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_IsShorterThan. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxTimeSpan_IsShorterThan. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (bool )wxTimeSpan_IsShorterThan(_arg0,*_arg1);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_GetWeeks(_swigobj)  (_swigobj->GetWeeks())
static PyObject *_wrap_wxTimeSpan_GetWeeks(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_GetWeeks",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_GetWeeks. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxTimeSpan_GetWeeks(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_GetDays(_swigobj)  (_swigobj->GetDays())
static PyObject *_wrap_wxTimeSpan_GetDays(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_GetDays",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_GetDays. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxTimeSpan_GetDays(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_GetHours(_swigobj)  (_swigobj->GetHours())
static PyObject *_wrap_wxTimeSpan_GetHours(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_GetHours",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_GetHours. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxTimeSpan_GetHours(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_GetMinutes(_swigobj)  (_swigobj->GetMinutes())
static PyObject *_wrap_wxTimeSpan_GetMinutes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_GetMinutes",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_GetMinutes. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxTimeSpan_GetMinutes(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxTimeSpan_GetSeconds(_swigobj)  (_swigobj->GetSeconds())
static PyObject *_wrap_wxTimeSpan_GetSeconds(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxLongLong * _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_GetSeconds",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_GetSeconds. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxLongLong (wxTimeSpan_GetSeconds(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    PyObject *hi, *lo, *shifter, *shifted;
    hi = PyLong_FromLong(_result->GetHi());
    lo = PyLong_FromLong(_result->GetLo());
    shifter = PyLong_FromLong(32);
    shifted = PyNumber_Lshift(hi, shifter);
    _resultobj = PyNumber_Or(shifted, lo);
    Py_DECREF(hi);
    Py_DECREF(lo);
    Py_DECREF(shifter);
    Py_DECREF(shifted);
}
    return _resultobj;
}

#define wxTimeSpan_GetMilliseconds(_swigobj)  (_swigobj->GetMilliseconds())
static PyObject *_wrap_wxTimeSpan_GetMilliseconds(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxLongLong * _result;
    wxTimeSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxTimeSpan_GetMilliseconds",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_GetMilliseconds. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxLongLong (wxTimeSpan_GetMilliseconds(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    PyObject *hi, *lo, *shifter, *shifted;
    hi = PyLong_FromLong(_result->GetHi());
    lo = PyLong_FromLong(_result->GetLo());
    shifter = PyLong_FromLong(32);
    shifted = PyNumber_Lshift(hi, shifter);
    _resultobj = PyNumber_Or(shifted, lo);
    Py_DECREF(hi);
    Py_DECREF(lo);
    Py_DECREF(shifter);
    Py_DECREF(shifted);
}
    return _resultobj;
}

#define wxTimeSpan_Format(_swigobj,_swigarg0)  (_swigobj->Format(_swigarg0))
static PyObject *_wrap_wxTimeSpan_Format(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxString * _result;
    wxTimeSpan * _arg0;
    char * _arg1 = (char *) "%c";
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","format", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|s:wxTimeSpan_Format",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxTimeSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxTimeSpan_Format. Expected _wxTimeSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxString (wxTimeSpan_Format(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}{
    _resultobj = PyString_FromStringAndSize(_result->c_str(), _result->Len());
}
{
    delete _result;
}
    return _resultobj;
}

#define new_wxDateSpan(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new wxDateSpan(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_new_wxDateSpan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    int  _arg0 = (int ) 0;
    int  _arg1 = (int ) 0;
    int  _arg2 = (int ) 0;
    int  _arg3 = (int ) 0;
    char *_kwnames[] = { "years","months","weeks","days", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|iiii:new_wxDateSpan",_kwnames,&_arg0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (wxDateSpan *)new_wxDateSpan(_arg0,_arg1,_arg2,_arg3);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define delete_wxDateSpan(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_wxDateSpan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_wxDateSpan",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_wxDateSpan. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        delete_wxDateSpan(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Days(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    int  _arg0;
    char *_kwnames[] = { "days", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:wxDateSpan_Days",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Days(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Day(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxDateSpan_Day",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Day());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Weeks(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    int  _arg0;
    char *_kwnames[] = { "weeks", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:wxDateSpan_Weeks",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Weeks(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Week(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxDateSpan_Week",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Week());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Months(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    int  _arg0;
    char *_kwnames[] = { "mon", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:wxDateSpan_Months",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Months(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Month(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxDateSpan_Month",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Month());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Years(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    int  _arg0;
    char *_kwnames[] = { "years", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:wxDateSpan_Years",_kwnames,&_arg0)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Years(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_wxDateSpan_Year(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":wxDateSpan_Year",_kwnames)) 
        return NULL;
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan::Year());

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define wxDateSpan_SetYears(_swigobj,_swigarg0)  (_swigobj->SetYears(_swigarg0))
static PyObject *_wrap_wxDateSpan_SetYears(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateSpan_SetYears",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_SetYears. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_SetYears(_arg0,_arg1);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateSpan_SetMonths(_swigobj,_swigarg0)  (_swigobj->SetMonths(_swigarg0))
static PyObject *_wrap_wxDateSpan_SetMonths(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateSpan_SetMonths",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_SetMonths. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_SetMonths(_arg0,_arg1);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateSpan_SetWeeks(_swigobj,_swigarg0)  (_swigobj->SetWeeks(_swigarg0))
static PyObject *_wrap_wxDateSpan_SetWeeks(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateSpan_SetWeeks",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_SetWeeks. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_SetWeeks(_arg0,_arg1);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateSpan_SetDays(_swigobj,_swigarg0)  (_swigobj->SetDays(_swigarg0))
static PyObject *_wrap_wxDateSpan_SetDays(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateSpan_SetDays",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_SetDays. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_SetDays(_arg0,_arg1);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateSpan_GetYears(_swigobj)  (_swigobj->GetYears())
static PyObject *_wrap_wxDateSpan_GetYears(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateSpan_GetYears",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_GetYears. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateSpan_GetYears(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateSpan_GetMonths(_swigobj)  (_swigobj->GetMonths())
static PyObject *_wrap_wxDateSpan_GetMonths(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateSpan_GetMonths",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_GetMonths. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateSpan_GetMonths(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateSpan_GetWeeks(_swigobj)  (_swigobj->GetWeeks())
static PyObject *_wrap_wxDateSpan_GetWeeks(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateSpan_GetWeeks",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_GetWeeks. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateSpan_GetWeeks(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateSpan_GetDays(_swigobj)  (_swigobj->GetDays())
static PyObject *_wrap_wxDateSpan_GetDays(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateSpan_GetDays",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_GetDays. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateSpan_GetDays(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateSpan_GetTotalDays(_swigobj)  (_swigobj->GetTotalDays())
static PyObject *_wrap_wxDateSpan_GetTotalDays(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    int  _result;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateSpan_GetTotalDays",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_GetTotalDays. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = (int )wxDateSpan_GetTotalDays(_arg0);

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define wxDateSpan_Add(_swigobj,_swigarg0)  (_swigobj->Add(_swigarg0))
static PyObject *_wrap_wxDateSpan_Add(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateSpan_Add",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_Add. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateSpan_Add. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_Add(_arg0,*_arg1);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateSpan_Subtract(_swigobj,_swigarg0)  (_swigobj->Subtract(_swigarg0))
static PyObject *_wrap_wxDateSpan_Subtract(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateSpan_Subtract",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_Subtract. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateSpan_Subtract. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_Subtract(_arg0,*_arg1);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateSpan_Neg(_swigobj)  (_swigobj->Neg())
static PyObject *_wrap_wxDateSpan_Neg(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateSpan_Neg",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_Neg. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_Neg(_arg0);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define wxDateSpan_Multiply(_swigobj,_swigarg0)  (_swigobj->Multiply(_swigarg0))
static PyObject *_wrap_wxDateSpan_Multiply(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","factor", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateSpan_Multiply",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan_Multiply. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        wxDateSpan & _result_ref = wxDateSpan_Multiply(_arg0,_arg1);
    _result = (wxDateSpan *) &_result_ref;

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_wxDateSpan_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static wxDateSpan  wxDateSpan___add__(wxDateSpan *self,const wxDateSpan & other) { return *self + other; }
static PyObject *_wrap_wxDateSpan___add__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateSpan___add__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan___add__. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateSpan___add__. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan___add__(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateSpan  wxDateSpan___sub__(wxDateSpan *self,const wxDateSpan & other) { return *self - other; }
static PyObject *_wrap_wxDateSpan___sub__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    wxDateSpan * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:wxDateSpan___sub__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan___sub__. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of wxDateSpan___sub__. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan___sub__(_arg0,*_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateSpan  wxDateSpan___mul__(wxDateSpan *self,int  n) { return *self * n; }
static PyObject *_wrap_wxDateSpan___mul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateSpan___mul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan___mul__. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan___mul__(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateSpan  wxDateSpan___rmul__(wxDateSpan *self,int  n) { return n * *self; }
static PyObject *_wrap_wxDateSpan___rmul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    int  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","n", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:wxDateSpan___rmul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan___rmul__. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan___rmul__(_arg0,_arg1));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static wxDateSpan  wxDateSpan___neg__(wxDateSpan *self) { return self->Negate(); }
static PyObject *_wrap_wxDateSpan___neg__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    wxDateSpan * _result;
    wxDateSpan * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:wxDateSpan___neg__",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_wxDateSpan_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of wxDateSpan___neg__. Expected _wxDateSpan_p.");
        return NULL;
        }
    }
{
    wxPy_BEGIN_ALLOW_THREADS;
        _result = new wxDateSpan (wxDateSpan___neg__(_arg0));

    wxPy_END_ALLOW_THREADS;
    if (PyErr_Occurred()) return NULL;
}    SWIG_MakePtr(_ptemp, (void *) _result,"_wxDateSpan_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyMethodDef utilscMethods[] = {
	 { "wxDateSpan___neg__", (PyCFunction) _wrap_wxDateSpan___neg__, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan___rmul__", (PyCFunction) _wrap_wxDateSpan___rmul__, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan___mul__", (PyCFunction) _wrap_wxDateSpan___mul__, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan___sub__", (PyCFunction) _wrap_wxDateSpan___sub__, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan___add__", (PyCFunction) _wrap_wxDateSpan___add__, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Multiply", (PyCFunction) _wrap_wxDateSpan_Multiply, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Neg", (PyCFunction) _wrap_wxDateSpan_Neg, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Subtract", (PyCFunction) _wrap_wxDateSpan_Subtract, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Add", (PyCFunction) _wrap_wxDateSpan_Add, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_GetTotalDays", (PyCFunction) _wrap_wxDateSpan_GetTotalDays, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_GetDays", (PyCFunction) _wrap_wxDateSpan_GetDays, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_GetWeeks", (PyCFunction) _wrap_wxDateSpan_GetWeeks, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_GetMonths", (PyCFunction) _wrap_wxDateSpan_GetMonths, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_GetYears", (PyCFunction) _wrap_wxDateSpan_GetYears, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_SetDays", (PyCFunction) _wrap_wxDateSpan_SetDays, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_SetWeeks", (PyCFunction) _wrap_wxDateSpan_SetWeeks, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_SetMonths", (PyCFunction) _wrap_wxDateSpan_SetMonths, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_SetYears", (PyCFunction) _wrap_wxDateSpan_SetYears, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Year", (PyCFunction) _wrap_wxDateSpan_Year, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Years", (PyCFunction) _wrap_wxDateSpan_Years, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Month", (PyCFunction) _wrap_wxDateSpan_Month, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Months", (PyCFunction) _wrap_wxDateSpan_Months, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Week", (PyCFunction) _wrap_wxDateSpan_Week, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Weeks", (PyCFunction) _wrap_wxDateSpan_Weeks, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Day", (PyCFunction) _wrap_wxDateSpan_Day, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateSpan_Days", (PyCFunction) _wrap_wxDateSpan_Days, METH_VARARGS | METH_KEYWORDS },
	 { "delete_wxDateSpan", (PyCFunction) _wrap_delete_wxDateSpan, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxDateSpan", (PyCFunction) _wrap_new_wxDateSpan, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Format", (PyCFunction) _wrap_wxTimeSpan_Format, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_GetMilliseconds", (PyCFunction) _wrap_wxTimeSpan_GetMilliseconds, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_GetSeconds", (PyCFunction) _wrap_wxTimeSpan_GetSeconds, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_GetMinutes", (PyCFunction) _wrap_wxTimeSpan_GetMinutes, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_GetHours", (PyCFunction) _wrap_wxTimeSpan_GetHours, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_GetDays", (PyCFunction) _wrap_wxTimeSpan_GetDays, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_GetWeeks", (PyCFunction) _wrap_wxTimeSpan_GetWeeks, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_IsShorterThan", (PyCFunction) _wrap_wxTimeSpan_IsShorterThan, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_IsLongerThan", (PyCFunction) _wrap_wxTimeSpan_IsLongerThan, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_IsEqualTo", (PyCFunction) _wrap_wxTimeSpan_IsEqualTo, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_IsNegative", (PyCFunction) _wrap_wxTimeSpan_IsNegative, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_IsPositive", (PyCFunction) _wrap_wxTimeSpan_IsPositive, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_IsNull", (PyCFunction) _wrap_wxTimeSpan_IsNull, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan___cmp__", (PyCFunction) _wrap_wxTimeSpan___cmp__, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan___neg__", (PyCFunction) _wrap_wxTimeSpan___neg__, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan___rmul__", (PyCFunction) _wrap_wxTimeSpan___rmul__, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan___mul__", (PyCFunction) _wrap_wxTimeSpan___mul__, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan___sub__", (PyCFunction) _wrap_wxTimeSpan___sub__, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan___add__", (PyCFunction) _wrap_wxTimeSpan___add__, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Abs", (PyCFunction) _wrap_wxTimeSpan_Abs, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Neg", (PyCFunction) _wrap_wxTimeSpan_Neg, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Multiply", (PyCFunction) _wrap_wxTimeSpan_Multiply, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Subtract", (PyCFunction) _wrap_wxTimeSpan_Subtract, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Add", (PyCFunction) _wrap_wxTimeSpan_Add, METH_VARARGS | METH_KEYWORDS },
	 { "delete_wxTimeSpan", (PyCFunction) _wrap_delete_wxTimeSpan, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxTimeSpan", (PyCFunction) _wrap_new_wxTimeSpan, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Week", (PyCFunction) _wrap_wxTimeSpan_Week, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Weeks", (PyCFunction) _wrap_wxTimeSpan_Weeks, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Day", (PyCFunction) _wrap_wxTimeSpan_Day, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Days", (PyCFunction) _wrap_wxTimeSpan_Days, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Hour", (PyCFunction) _wrap_wxTimeSpan_Hour, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Hours", (PyCFunction) _wrap_wxTimeSpan_Hours, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Minute", (PyCFunction) _wrap_wxTimeSpan_Minute, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Minutes", (PyCFunction) _wrap_wxTimeSpan_Minutes, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Second", (PyCFunction) _wrap_wxTimeSpan_Second, METH_VARARGS | METH_KEYWORDS },
	 { "wxTimeSpan_Seconds", (PyCFunction) _wrap_wxTimeSpan_Seconds, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_FormatISOTime", (PyCFunction) _wrap_wxDateTime_FormatISOTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_FormatISODate", (PyCFunction) _wrap_wxDateTime_FormatISODate, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_FormatTime", (PyCFunction) _wrap_wxDateTime_FormatTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_FormatDate", (PyCFunction) _wrap_wxDateTime_FormatDate, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_Format", (PyCFunction) _wrap_wxDateTime_Format, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ParseTime", (PyCFunction) _wrap_wxDateTime_ParseTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ParseDate", (PyCFunction) _wrap_wxDateTime_ParseDate, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ParseDateTime", (PyCFunction) _wrap_wxDateTime_ParseDateTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ParseFormat", (PyCFunction) _wrap_wxDateTime_ParseFormat, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ParseRfc822Date", (PyCFunction) _wrap_wxDateTime_ParseRfc822Date, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime___cmp__", (PyCFunction) _wrap_wxDateTime___cmp__, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime___sub__DS", (PyCFunction) _wrap_wxDateTime___sub__DS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime___sub__TS", (PyCFunction) _wrap_wxDateTime___sub__TS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime___sub__DT", (PyCFunction) _wrap_wxDateTime___sub__DT, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime___add__DS", (PyCFunction) _wrap_wxDateTime___add__DS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime___add__TS", (PyCFunction) _wrap_wxDateTime___add__TS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_Subtract", (PyCFunction) _wrap_wxDateTime_Subtract, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SubtractDS", (PyCFunction) _wrap_wxDateTime_SubtractDS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SubtractTS", (PyCFunction) _wrap_wxDateTime_SubtractTS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_AddDS", (PyCFunction) _wrap_wxDateTime_AddDS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_AddTS", (PyCFunction) _wrap_wxDateTime_AddTS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsEqualUpTo", (PyCFunction) _wrap_wxDateTime_IsEqualUpTo, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsSameTime", (PyCFunction) _wrap_wxDateTime_IsSameTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsSameDate", (PyCFunction) _wrap_wxDateTime_IsSameDate, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsBetween", (PyCFunction) _wrap_wxDateTime_IsBetween, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsStrictlyBetween", (PyCFunction) _wrap_wxDateTime_IsStrictlyBetween, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsLaterThan", (PyCFunction) _wrap_wxDateTime_IsLaterThan, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsEarlierThan", (PyCFunction) _wrap_wxDateTime_IsEarlierThan, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsEqualTo", (PyCFunction) _wrap_wxDateTime_IsEqualTo, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsWorkDay", (PyCFunction) _wrap_wxDateTime_IsWorkDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetWeekOfMonth", (PyCFunction) _wrap_wxDateTime_GetWeekOfMonth, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetWeekOfYear", (PyCFunction) _wrap_wxDateTime_GetWeekOfYear, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetDayOfYear", (PyCFunction) _wrap_wxDateTime_GetDayOfYear, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetMillisecond", (PyCFunction) _wrap_wxDateTime_GetMillisecond, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetSecond", (PyCFunction) _wrap_wxDateTime_GetSecond, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetMinute", (PyCFunction) _wrap_wxDateTime_GetMinute, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetHour", (PyCFunction) _wrap_wxDateTime_GetHour, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetDay", (PyCFunction) _wrap_wxDateTime_GetDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetMonth", (PyCFunction) _wrap_wxDateTime_GetMonth, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetYear", (PyCFunction) _wrap_wxDateTime_GetYear, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetTicks", (PyCFunction) _wrap_wxDateTime_GetTicks, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsValid", (PyCFunction) _wrap_wxDateTime_IsValid, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsDST", (PyCFunction) _wrap_wxDateTime_IsDST, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_MakeGMT", (PyCFunction) _wrap_wxDateTime_MakeGMT, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ToGMT", (PyCFunction) _wrap_wxDateTime_ToGMT, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_MakeTimezone", (PyCFunction) _wrap_wxDateTime_MakeTimezone, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ToTimezone", (PyCFunction) _wrap_wxDateTime_ToTimezone, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetRataDie", (PyCFunction) _wrap_wxDateTime_GetRataDie, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetMJD", (PyCFunction) _wrap_wxDateTime_GetMJD, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetModifiedJulianDayNumber", (PyCFunction) _wrap_wxDateTime_GetModifiedJulianDayNumber, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetJDN", (PyCFunction) _wrap_wxDateTime_GetJDN, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetJulianDayNumber", (PyCFunction) _wrap_wxDateTime_GetJulianDayNumber, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetYearDay", (PyCFunction) _wrap_wxDateTime_GetYearDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToYearDay", (PyCFunction) _wrap_wxDateTime_SetToYearDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetLastMonthDay", (PyCFunction) _wrap_wxDateTime_GetLastMonthDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToLastMonthDay", (PyCFunction) _wrap_wxDateTime_SetToLastMonthDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetWeek", (PyCFunction) _wrap_wxDateTime_GetWeek, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToTheWeek", (PyCFunction) _wrap_wxDateTime_SetToTheWeek, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetLastWeekDay", (PyCFunction) _wrap_wxDateTime_GetLastWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToLastWeekDay", (PyCFunction) _wrap_wxDateTime_SetToLastWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetWeekDay", (PyCFunction) _wrap_wxDateTime_GetWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToWeekDay", (PyCFunction) _wrap_wxDateTime_SetToWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetPrevWeekDay", (PyCFunction) _wrap_wxDateTime_GetPrevWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToPrevWeekDay", (PyCFunction) _wrap_wxDateTime_SetToPrevWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetNextWeekDay", (PyCFunction) _wrap_wxDateTime_GetNextWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToNextWeekDay", (PyCFunction) _wrap_wxDateTime_SetToNextWeekDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetWeekDayInSameWeek", (PyCFunction) _wrap_wxDateTime_GetWeekDayInSameWeek, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToWeekDayInSameWeek", (PyCFunction) _wrap_wxDateTime_SetToWeekDayInSameWeek, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetMillisecond", (PyCFunction) _wrap_wxDateTime_SetMillisecond, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetSecond", (PyCFunction) _wrap_wxDateTime_SetSecond, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetMinute", (PyCFunction) _wrap_wxDateTime_SetMinute, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetHour", (PyCFunction) _wrap_wxDateTime_SetHour, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetDay", (PyCFunction) _wrap_wxDateTime_SetDay, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetMonth", (PyCFunction) _wrap_wxDateTime_SetMonth, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetYear", (PyCFunction) _wrap_wxDateTime_SetYear, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ResetTime", (PyCFunction) _wrap_wxDateTime_ResetTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_Set", (PyCFunction) _wrap_wxDateTime_Set, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetHMS", (PyCFunction) _wrap_wxDateTime_SetHMS, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetJDN", (PyCFunction) _wrap_wxDateTime_SetJDN, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetTimeT", (PyCFunction) _wrap_wxDateTime_SetTimeT, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetToCurrent", (PyCFunction) _wrap_wxDateTime_SetToCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "delete_wxDateTime", (PyCFunction) _wrap_delete_wxDateTime, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxDateTimeFromDMY", (PyCFunction) _wrap_new_wxDateTimeFromDMY, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxDateTimeFromHMS", (PyCFunction) _wrap_new_wxDateTimeFromHMS, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxDateTimeFromJDN", (PyCFunction) _wrap_new_wxDateTimeFromJDN, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxDateTimeFromTimeT", (PyCFunction) _wrap_new_wxDateTimeFromTimeT, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxDateTime", (PyCFunction) _wrap_new_wxDateTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_Today", (PyCFunction) _wrap_wxDateTime_Today, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_Now", (PyCFunction) _wrap_wxDateTime_Now, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetEndDST", (PyCFunction) _wrap_wxDateTime_GetEndDST, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetBeginDST", (PyCFunction) _wrap_wxDateTime_GetBeginDST, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsDSTApplicable", (PyCFunction) _wrap_wxDateTime_IsDSTApplicable, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetAmPmStrings", (PyCFunction) _wrap_wxDateTime_GetAmPmStrings, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetWeekDayName", (PyCFunction) _wrap_wxDateTime_GetWeekDayName, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetMonthName", (PyCFunction) _wrap_wxDateTime_GetMonthName, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetNumberOfDaysInMonth", (PyCFunction) _wrap_wxDateTime_GetNumberOfDaysInMonth, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetNumberOfDaysinYear", (PyCFunction) _wrap_wxDateTime_GetNumberOfDaysinYear, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetCentury", (PyCFunction) _wrap_wxDateTime_GetCentury, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsLeapYear", (PyCFunction) _wrap_wxDateTime_IsLeapYear, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetCurrentMonth", (PyCFunction) _wrap_wxDateTime_GetCurrentMonth, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_ConvertYearToBC", (PyCFunction) _wrap_wxDateTime_ConvertYearToBC, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetCurrentYear", (PyCFunction) _wrap_wxDateTime_GetCurrentYear, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_IsWestEuropeanCountry", (PyCFunction) _wrap_wxDateTime_IsWestEuropeanCountry, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_GetCountry", (PyCFunction) _wrap_wxDateTime_GetCountry, METH_VARARGS | METH_KEYWORDS },
	 { "wxDateTime_SetCountry", (PyCFunction) _wrap_wxDateTime_SetCountry, METH_VARARGS | METH_KEYWORDS },
	 { "delete_wxFileConfig", (PyCFunction) _wrap_delete_wxFileConfig, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxFileConfig", (PyCFunction) _wrap_new_wxFileConfig, METH_VARARGS | METH_KEYWORDS },
	 { "delete_wxConfig", (PyCFunction) _wrap_delete_wxConfig, METH_VARARGS | METH_KEYWORDS },
	 { "new_wxConfig", (PyCFunction) _wrap_new_wxConfig, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_ExpandEnvVars", (PyCFunction) _wrap_wxConfigBase_ExpandEnvVars, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_RenameGroup", (PyCFunction) _wrap_wxConfigBase_RenameGroup, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_RenameEntry", (PyCFunction) _wrap_wxConfigBase_RenameEntry, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetEntryType", (PyCFunction) _wrap_wxConfigBase_GetEntryType, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_WriteFloat", (PyCFunction) _wrap_wxConfigBase_WriteFloat, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_WriteInt", (PyCFunction) _wrap_wxConfigBase_WriteInt, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_Write", (PyCFunction) _wrap_wxConfigBase_Write, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetStyle", (PyCFunction) _wrap_wxConfigBase_GetStyle, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_SetStyle", (PyCFunction) _wrap_wxConfigBase_SetStyle, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_SetVendorName", (PyCFunction) _wrap_wxConfigBase_SetVendorName, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_SetAppName", (PyCFunction) _wrap_wxConfigBase_SetAppName, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_SetRecordDefaults", (PyCFunction) _wrap_wxConfigBase_SetRecordDefaults, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_SetPath", (PyCFunction) _wrap_wxConfigBase_SetPath, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_SetExpandEnvVars", (PyCFunction) _wrap_wxConfigBase_SetExpandEnvVars, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_ReadFloat", (PyCFunction) _wrap_wxConfigBase_ReadFloat, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_ReadInt", (PyCFunction) _wrap_wxConfigBase_ReadInt, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_Read", (PyCFunction) _wrap_wxConfigBase_Read, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_IsRecordingDefaults", (PyCFunction) _wrap_wxConfigBase_IsRecordingDefaults, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_IsExpandingEnvVars", (PyCFunction) _wrap_wxConfigBase_IsExpandingEnvVars, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_HasGroup", (PyCFunction) _wrap_wxConfigBase_HasGroup, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_HasEntry", (PyCFunction) _wrap_wxConfigBase_HasEntry, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetVendorName", (PyCFunction) _wrap_wxConfigBase_GetVendorName, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetPath", (PyCFunction) _wrap_wxConfigBase_GetPath, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetNumberOfGroups", (PyCFunction) _wrap_wxConfigBase_GetNumberOfGroups, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetNumberOfEntries", (PyCFunction) _wrap_wxConfigBase_GetNumberOfEntries, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetNextEntry", (PyCFunction) _wrap_wxConfigBase_GetNextEntry, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetNextGroup", (PyCFunction) _wrap_wxConfigBase_GetNextGroup, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetFirstEntry", (PyCFunction) _wrap_wxConfigBase_GetFirstEntry, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetFirstGroup", (PyCFunction) _wrap_wxConfigBase_GetFirstGroup, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_GetAppName", (PyCFunction) _wrap_wxConfigBase_GetAppName, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_Flush", (PyCFunction) _wrap_wxConfigBase_Flush, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_Exists", (PyCFunction) _wrap_wxConfigBase_Exists, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_DeleteGroup", (PyCFunction) _wrap_wxConfigBase_DeleteGroup, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_DeleteEntry", (PyCFunction) _wrap_wxConfigBase_DeleteEntry, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_DeleteAll", (PyCFunction) _wrap_wxConfigBase_DeleteAll, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_DontCreateOnDemand", (PyCFunction) _wrap_wxConfigBase_DontCreateOnDemand, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_Create", (PyCFunction) _wrap_wxConfigBase_Create, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_Get", (PyCFunction) _wrap_wxConfigBase_Get, METH_VARARGS | METH_KEYWORDS },
	 { "wxConfigBase_Set", (PyCFunction) _wrap_wxConfigBase_Set, METH_VARARGS | METH_KEYWORDS },
	 { "delete_wxConfigBase", (PyCFunction) _wrap_delete_wxConfigBase, METH_VARARGS | METH_KEYWORDS },
	 { "wxGetLocalTimeMillis", (PyCFunction) _wrap_wxGetLocalTimeMillis, METH_VARARGS | METH_KEYWORDS },
	 { "wxGetCurrentTime", (PyCFunction) _wrap_wxGetCurrentTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxGetUTCTime", (PyCFunction) _wrap_wxGetUTCTime, METH_VARARGS | METH_KEYWORDS },
	 { "wxGetLocalTime", (PyCFunction) _wrap_wxGetLocalTime, METH_VARARGS | METH_KEYWORDS },
	 { NULL, NULL }
};
#ifdef __cplusplus
}
#endif
/*
 * This table is used by the pointer type-checker
 */
static struct { char *n1; char *n2; void *(*pcnv)(void *); } _swig_mapping[] = {
    { "_signed_long","_long",0},
    { "_wxPrintQuality","_wxCoord",0},
    { "_wxPrintQuality","_int",0},
    { "_wxPrintQuality","_signed_int",0},
    { "_wxPrintQuality","_unsigned_int",0},
    { "_wxPrintQuality","_wxWindowID",0},
    { "_wxPrintQuality","_uint",0},
    { "_wxPrintQuality","_EBool",0},
    { "_wxPrintQuality","_size_t",0},
    { "_wxPrintQuality","_time_t",0},
    { "_byte","_unsigned_char",0},
    { "_long","_unsigned_long",0},
    { "_long","_signed_long",0},
    { "_size_t","_wxCoord",0},
    { "_size_t","_wxPrintQuality",0},
    { "_size_t","_time_t",0},
    { "_size_t","_unsigned_int",0},
    { "_size_t","_int",0},
    { "_size_t","_wxWindowID",0},
    { "_size_t","_uint",0},
    { "_uint","_wxCoord",0},
    { "_uint","_wxPrintQuality",0},
    { "_uint","_time_t",0},
    { "_uint","_size_t",0},
    { "_uint","_unsigned_int",0},
    { "_uint","_int",0},
    { "_uint","_wxWindowID",0},
    { "_wxChar","_char",0},
    { "_char","_wxChar",0},
    { "_EBool","_wxCoord",0},
    { "_EBool","_wxPrintQuality",0},
    { "_EBool","_signed_int",0},
    { "_EBool","_int",0},
    { "_EBool","_wxWindowID",0},
    { "_unsigned_long","_long",0},
    { "_signed_int","_wxCoord",0},
    { "_signed_int","_wxPrintQuality",0},
    { "_signed_int","_EBool",0},
    { "_signed_int","_wxWindowID",0},
    { "_signed_int","_int",0},
    { "_WXTYPE","_wxDateTime_t",0},
    { "_WXTYPE","_short",0},
    { "_WXTYPE","_signed_short",0},
    { "_WXTYPE","_unsigned_short",0},
    { "_unsigned_short","_wxDateTime_t",0},
    { "_unsigned_short","_WXTYPE",0},
    { "_unsigned_short","_short",0},
    { "_signed_short","_WXTYPE",0},
    { "_signed_short","_short",0},
    { "_unsigned_char","_byte",0},
    { "_unsigned_int","_wxCoord",0},
    { "_unsigned_int","_wxPrintQuality",0},
    { "_unsigned_int","_time_t",0},
    { "_unsigned_int","_size_t",0},
    { "_unsigned_int","_uint",0},
    { "_unsigned_int","_wxWindowID",0},
    { "_unsigned_int","_int",0},
    { "_wxConfigBase","_class_wxFileConfig",SwigwxFileConfigTowxConfigBase},
    { "_wxConfigBase","_wxFileConfig",SwigwxFileConfigTowxConfigBase},
    { "_wxConfigBase","_class_wxConfig",SwigwxConfigTowxConfigBase},
    { "_wxConfigBase","_wxConfig",SwigwxConfigTowxConfigBase},
    { "_short","_wxDateTime_t",0},
    { "_short","_WXTYPE",0},
    { "_short","_unsigned_short",0},
    { "_short","_signed_short",0},
    { "_wxWindowID","_wxCoord",0},
    { "_wxWindowID","_wxPrintQuality",0},
    { "_wxWindowID","_time_t",0},
    { "_wxWindowID","_size_t",0},
    { "_wxWindowID","_EBool",0},
    { "_wxWindowID","_uint",0},
    { "_wxWindowID","_int",0},
    { "_wxWindowID","_signed_int",0},
    { "_wxWindowID","_unsigned_int",0},
    { "_int","_wxCoord",0},
    { "_int","_wxPrintQuality",0},
    { "_int","_time_t",0},
    { "_int","_size_t",0},
    { "_int","_EBool",0},
    { "_int","_uint",0},
    { "_int","_wxWindowID",0},
    { "_int","_unsigned_int",0},
    { "_int","_signed_int",0},
    { "_wxDateTime_t","_unsigned_short",0},
    { "_wxDateTime_t","_short",0},
    { "_wxDateTime_t","_WXTYPE",0},
    { "_time_t","_wxCoord",0},
    { "_time_t","_wxPrintQuality",0},
    { "_time_t","_unsigned_int",0},
    { "_time_t","_int",0},
    { "_time_t","_wxWindowID",0},
    { "_time_t","_uint",0},
    { "_time_t","_size_t",0},
    { "_class_wxConfigBase","_class_wxFileConfig",SwigwxFileConfigTowxConfigBase},
    { "_class_wxConfigBase","_wxFileConfig",SwigwxFileConfigTowxConfigBase},
    { "_class_wxConfigBase","_class_wxConfig",SwigwxConfigTowxConfigBase},
    { "_class_wxConfigBase","_wxConfig",SwigwxConfigTowxConfigBase},
    { "_wxCoord","_int",0},
    { "_wxCoord","_signed_int",0},
    { "_wxCoord","_unsigned_int",0},
    { "_wxCoord","_wxWindowID",0},
    { "_wxCoord","_uint",0},
    { "_wxCoord","_EBool",0},
    { "_wxCoord","_size_t",0},
    { "_wxCoord","_time_t",0},
    { "_wxCoord","_wxPrintQuality",0},
{0,0,0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initutilsc() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("utilsc", utilscMethods);
	 d = PyModule_GetDict(m);
	 PyDict_SetItemString(d,"wxCONFIG_USE_LOCAL_FILE", PyInt_FromLong((long) wxCONFIG_USE_LOCAL_FILE));
	 PyDict_SetItemString(d,"wxCONFIG_USE_GLOBAL_FILE", PyInt_FromLong((long) wxCONFIG_USE_GLOBAL_FILE));
	 PyDict_SetItemString(d,"wxCONFIG_USE_RELATIVE_PATH", PyInt_FromLong((long) wxCONFIG_USE_RELATIVE_PATH));

    wxClassInfo::CleanUpClasses();
    wxClassInfo::InitializeClasses();
	 PyDict_SetItemString(d,"wxConfigBase_Type_Unknown", PyInt_FromLong((long) wxConfigBase::Type_Unknown));
	 PyDict_SetItemString(d,"wxConfigBase_Type_String", PyInt_FromLong((long) wxConfigBase::Type_String));
	 PyDict_SetItemString(d,"wxConfigBase_Type_Boolean", PyInt_FromLong((long) wxConfigBase::Type_Boolean));
	 PyDict_SetItemString(d,"wxConfigBase_Type_Integer", PyInt_FromLong((long) wxConfigBase::Type_Integer));
	 PyDict_SetItemString(d,"wxConfigBase_Type_Float", PyInt_FromLong((long) wxConfigBase::Type_Float));
	 PyDict_SetItemString(d,"wxDateTime_Local", PyInt_FromLong((long) wxDateTime::Local));
	 PyDict_SetItemString(d,"wxDateTime_GMT_12", PyInt_FromLong((long) wxDateTime::GMT_12));
	 PyDict_SetItemString(d,"wxDateTime_GMT_11", PyInt_FromLong((long) wxDateTime::GMT_11));
	 PyDict_SetItemString(d,"wxDateTime_GMT_10", PyInt_FromLong((long) wxDateTime::GMT_10));
	 PyDict_SetItemString(d,"wxDateTime_GMT_9", PyInt_FromLong((long) wxDateTime::GMT_9));
	 PyDict_SetItemString(d,"wxDateTime_GMT_8", PyInt_FromLong((long) wxDateTime::GMT_8));
	 PyDict_SetItemString(d,"wxDateTime_GMT_7", PyInt_FromLong((long) wxDateTime::GMT_7));
	 PyDict_SetItemString(d,"wxDateTime_GMT_6", PyInt_FromLong((long) wxDateTime::GMT_6));
	 PyDict_SetItemString(d,"wxDateTime_GMT_5", PyInt_FromLong((long) wxDateTime::GMT_5));
	 PyDict_SetItemString(d,"wxDateTime_GMT_4", PyInt_FromLong((long) wxDateTime::GMT_4));
	 PyDict_SetItemString(d,"wxDateTime_GMT_3", PyInt_FromLong((long) wxDateTime::GMT_3));
	 PyDict_SetItemString(d,"wxDateTime_GMT_2", PyInt_FromLong((long) wxDateTime::GMT_2));
	 PyDict_SetItemString(d,"wxDateTime_GMT_1", PyInt_FromLong((long) wxDateTime::GMT_1));
	 PyDict_SetItemString(d,"wxDateTime_GMT0", PyInt_FromLong((long) wxDateTime::GMT0));
	 PyDict_SetItemString(d,"wxDateTime_GMT1", PyInt_FromLong((long) wxDateTime::GMT1));
	 PyDict_SetItemString(d,"wxDateTime_GMT2", PyInt_FromLong((long) wxDateTime::GMT2));
	 PyDict_SetItemString(d,"wxDateTime_GMT3", PyInt_FromLong((long) wxDateTime::GMT3));
	 PyDict_SetItemString(d,"wxDateTime_GMT4", PyInt_FromLong((long) wxDateTime::GMT4));
	 PyDict_SetItemString(d,"wxDateTime_GMT5", PyInt_FromLong((long) wxDateTime::GMT5));
	 PyDict_SetItemString(d,"wxDateTime_GMT6", PyInt_FromLong((long) wxDateTime::GMT6));
	 PyDict_SetItemString(d,"wxDateTime_GMT7", PyInt_FromLong((long) wxDateTime::GMT7));
	 PyDict_SetItemString(d,"wxDateTime_GMT8", PyInt_FromLong((long) wxDateTime::GMT8));
	 PyDict_SetItemString(d,"wxDateTime_GMT9", PyInt_FromLong((long) wxDateTime::GMT9));
	 PyDict_SetItemString(d,"wxDateTime_GMT10", PyInt_FromLong((long) wxDateTime::GMT10));
	 PyDict_SetItemString(d,"wxDateTime_GMT11", PyInt_FromLong((long) wxDateTime::GMT11));
	 PyDict_SetItemString(d,"wxDateTime_GMT12", PyInt_FromLong((long) wxDateTime::GMT12));
	 PyDict_SetItemString(d,"wxDateTime_WET", PyInt_FromLong((long) wxDateTime::WET));
	 PyDict_SetItemString(d,"wxDateTime_WEST", PyInt_FromLong((long) wxDateTime::WEST));
	 PyDict_SetItemString(d,"wxDateTime_CET", PyInt_FromLong((long) wxDateTime::CET));
	 PyDict_SetItemString(d,"wxDateTime_CEST", PyInt_FromLong((long) wxDateTime::CEST));
	 PyDict_SetItemString(d,"wxDateTime_EET", PyInt_FromLong((long) wxDateTime::EET));
	 PyDict_SetItemString(d,"wxDateTime_EEST", PyInt_FromLong((long) wxDateTime::EEST));
	 PyDict_SetItemString(d,"wxDateTime_MSK", PyInt_FromLong((long) wxDateTime::MSK));
	 PyDict_SetItemString(d,"wxDateTime_MSD", PyInt_FromLong((long) wxDateTime::MSD));
	 PyDict_SetItemString(d,"wxDateTime_AST", PyInt_FromLong((long) wxDateTime::AST));
	 PyDict_SetItemString(d,"wxDateTime_ADT", PyInt_FromLong((long) wxDateTime::ADT));
	 PyDict_SetItemString(d,"wxDateTime_EST", PyInt_FromLong((long) wxDateTime::EST));
	 PyDict_SetItemString(d,"wxDateTime_EDT", PyInt_FromLong((long) wxDateTime::EDT));
	 PyDict_SetItemString(d,"wxDateTime_CST", PyInt_FromLong((long) wxDateTime::CST));
	 PyDict_SetItemString(d,"wxDateTime_CDT", PyInt_FromLong((long) wxDateTime::CDT));
	 PyDict_SetItemString(d,"wxDateTime_MST", PyInt_FromLong((long) wxDateTime::MST));
	 PyDict_SetItemString(d,"wxDateTime_MDT", PyInt_FromLong((long) wxDateTime::MDT));
	 PyDict_SetItemString(d,"wxDateTime_PST", PyInt_FromLong((long) wxDateTime::PST));
	 PyDict_SetItemString(d,"wxDateTime_PDT", PyInt_FromLong((long) wxDateTime::PDT));
	 PyDict_SetItemString(d,"wxDateTime_HST", PyInt_FromLong((long) wxDateTime::HST));
	 PyDict_SetItemString(d,"wxDateTime_AKST", PyInt_FromLong((long) wxDateTime::AKST));
	 PyDict_SetItemString(d,"wxDateTime_AKDT", PyInt_FromLong((long) wxDateTime::AKDT));
	 PyDict_SetItemString(d,"wxDateTime_A_WST", PyInt_FromLong((long) wxDateTime::A_WST));
	 PyDict_SetItemString(d,"wxDateTime_A_CST", PyInt_FromLong((long) wxDateTime::A_CST));
	 PyDict_SetItemString(d,"wxDateTime_A_EST", PyInt_FromLong((long) wxDateTime::A_EST));
	 PyDict_SetItemString(d,"wxDateTime_A_ESST", PyInt_FromLong((long) wxDateTime::A_ESST));
	 PyDict_SetItemString(d,"wxDateTime_UTC", PyInt_FromLong((long) wxDateTime::UTC));
	 PyDict_SetItemString(d,"wxDateTime_Gregorian", PyInt_FromLong((long) wxDateTime::Gregorian));
	 PyDict_SetItemString(d,"wxDateTime_Julian", PyInt_FromLong((long) wxDateTime::Julian));
	 PyDict_SetItemString(d,"wxDateTime_Country_Unknown", PyInt_FromLong((long) wxDateTime::Country_Unknown));
	 PyDict_SetItemString(d,"wxDateTime_Country_Default", PyInt_FromLong((long) wxDateTime::Country_Default));
	 PyDict_SetItemString(d,"wxDateTime_Country_WesternEurope_Start", PyInt_FromLong((long) wxDateTime::Country_WesternEurope_Start));
	 PyDict_SetItemString(d,"wxDateTime_Country_EEC", PyInt_FromLong((long) wxDateTime::Country_EEC));
	 PyDict_SetItemString(d,"wxDateTime_France", PyInt_FromLong((long) wxDateTime::France));
	 PyDict_SetItemString(d,"wxDateTime_Germany", PyInt_FromLong((long) wxDateTime::Germany));
	 PyDict_SetItemString(d,"wxDateTime_UK", PyInt_FromLong((long) wxDateTime::UK));
	 PyDict_SetItemString(d,"wxDateTime_Country_WesternEurope_End", PyInt_FromLong((long) wxDateTime::Country_WesternEurope_End));
	 PyDict_SetItemString(d,"wxDateTime_Russia", PyInt_FromLong((long) wxDateTime::Russia));
	 PyDict_SetItemString(d,"wxDateTime_USA", PyInt_FromLong((long) wxDateTime::USA));
	 PyDict_SetItemString(d,"wxDateTime_Jan", PyInt_FromLong((long) wxDateTime::Jan));
	 PyDict_SetItemString(d,"wxDateTime_Feb", PyInt_FromLong((long) wxDateTime::Feb));
	 PyDict_SetItemString(d,"wxDateTime_Mar", PyInt_FromLong((long) wxDateTime::Mar));
	 PyDict_SetItemString(d,"wxDateTime_Apr", PyInt_FromLong((long) wxDateTime::Apr));
	 PyDict_SetItemString(d,"wxDateTime_May", PyInt_FromLong((long) wxDateTime::May));
	 PyDict_SetItemString(d,"wxDateTime_Jun", PyInt_FromLong((long) wxDateTime::Jun));
	 PyDict_SetItemString(d,"wxDateTime_Jul", PyInt_FromLong((long) wxDateTime::Jul));
	 PyDict_SetItemString(d,"wxDateTime_Aug", PyInt_FromLong((long) wxDateTime::Aug));
	 PyDict_SetItemString(d,"wxDateTime_Sep", PyInt_FromLong((long) wxDateTime::Sep));
	 PyDict_SetItemString(d,"wxDateTime_Oct", PyInt_FromLong((long) wxDateTime::Oct));
	 PyDict_SetItemString(d,"wxDateTime_Nov", PyInt_FromLong((long) wxDateTime::Nov));
	 PyDict_SetItemString(d,"wxDateTime_Dec", PyInt_FromLong((long) wxDateTime::Dec));
	 PyDict_SetItemString(d,"wxDateTime_Inv_Month", PyInt_FromLong((long) wxDateTime::Inv_Month));
	 PyDict_SetItemString(d,"wxDateTime_Sun", PyInt_FromLong((long) wxDateTime::Sun));
	 PyDict_SetItemString(d,"wxDateTime_Mon", PyInt_FromLong((long) wxDateTime::Mon));
	 PyDict_SetItemString(d,"wxDateTime_Tue", PyInt_FromLong((long) wxDateTime::Tue));
	 PyDict_SetItemString(d,"wxDateTime_Wed", PyInt_FromLong((long) wxDateTime::Wed));
	 PyDict_SetItemString(d,"wxDateTime_Thu", PyInt_FromLong((long) wxDateTime::Thu));
	 PyDict_SetItemString(d,"wxDateTime_Fri", PyInt_FromLong((long) wxDateTime::Fri));
	 PyDict_SetItemString(d,"wxDateTime_Sat", PyInt_FromLong((long) wxDateTime::Sat));
	 PyDict_SetItemString(d,"wxDateTime_Inv_WeekDay", PyInt_FromLong((long) wxDateTime::Inv_WeekDay));
	 PyDict_SetItemString(d,"wxDateTime_Inv_Year", PyInt_FromLong((long) wxDateTime::Inv_Year));
	 PyDict_SetItemString(d,"wxDateTime_Name_Full", PyInt_FromLong((long) wxDateTime::Name_Full));
	 PyDict_SetItemString(d,"wxDateTime_Name_Abbr", PyInt_FromLong((long) wxDateTime::Name_Abbr));
	 PyDict_SetItemString(d,"wxDateTime_Default_First", PyInt_FromLong((long) wxDateTime::Default_First));
	 PyDict_SetItemString(d,"wxDateTime_Monday_First", PyInt_FromLong((long) wxDateTime::Monday_First));
	 PyDict_SetItemString(d,"wxDateTime_Sunday_First", PyInt_FromLong((long) wxDateTime::Sunday_First));
{
   int i;
   for (i = 0; _swig_mapping[i].n1; i++)
        SWIG_RegisterMapping(_swig_mapping[i].n1,_swig_mapping[i].n2,_swig_mapping[i].pcnv);
}
}
