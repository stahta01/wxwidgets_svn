/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_NOINCLUDE

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg for wxPython
 *
 * Include only the function prototypes and such from SWIG's common.swg,
 * but not the runtime functions themselves.  This helps keep the
 * wrapper files clean of unnecessary stuff that is in the libpy.c file
 * anyway.
 *
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;


SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);


#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg for wxPython
 *
 * Include only the function prototypes and such from SWIG's pyrun.swg,
 * but not the runtime functions themselves.  This helps keep the
 * wrapper files clean of unnecessary stuff that is in the libpy.c file
 * anyway.
 *
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 
/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

typedef double (*py_objasdbl_conv)(PyObject *obj);

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

/* -----------------------------------------------------------------------------
 *  the needed conversions between C++ and python
 * ----------------------------------------------------------------------------- */
/* basic types */
/*
  utilities
*/
SWIGIMPORT(char* )         SWIG_PyObj_AsCharPtr(PyObject *obj, swig_type_info* pchar_info);
SWIGIMPORT(PyObject *)     SWIG_PyObj_FromCharPtr(const char* cptr);
SWIGIMPORT(unsigned long)  SWIG_PyObj_AsUnsignedLong(PyObject * obj);
SWIGIMPORT(long)           SWIG_PyObj_AsLongInRange(PyObject * obj, const char* type,
						    long min_value, long max_value);
SWIGIMPORT(unsigned long)  SWIG_PyObj_AsUnsignedLongInRange(PyObject *obj, const char* type,
							    unsigned long max_value);
SWIGIMPORT(char *)         SWIG_PyObj_AsNewCharPtr(PyObject *obj, swig_type_info* pchar_info);
SWIGIMPORT(void)           SWIG_PyObj_AsCharPtrAndSize(PyObject *obj, swig_type_info* pchar_info,
						       char** cptr, size_t* size);
SWIGIMPORT(void)           SWIG_PyObj_AsCharArray(PyObject *obj, swig_type_info* pchar_info,
						  char* carray, size_t size);
SWIGIMPORT(PyObject *)     SWIG_PyObj_FromCharArray(const char* carray, size_t size);
SWIGIMPORT(float)          SWIG_PyObj_AsFloatConv(PyObject *obj,  py_objasdbl_conv pyconv);


/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_wxPostScriptDC swig_types[0] 
#define  SWIGTYPE_p_wxBrush swig_types[1] 
#define  SWIGTYPE_p_wxColour swig_types[2] 
#define  SWIGTYPE_p_wxDC swig_types[3] 
#define  SWIGTYPE_p_wxMirrorDC swig_types[4] 
#define  SWIGTYPE_p_byte swig_types[5] 
#define  SWIGTYPE_p_wxPyFontEnumerator swig_types[6] 
#define  SWIGTYPE_p_char swig_types[7] 
#define  SWIGTYPE_p_wxIconLocation swig_types[8] 
#define  SWIGTYPE_p_wxImage swig_types[9] 
#define  SWIGTYPE_p_wxMetaFileDC swig_types[10] 
#define  SWIGTYPE_p_wxMask swig_types[11] 
#define  SWIGTYPE_p_wxFont swig_types[12] 
#define  SWIGTYPE_p_wxWindow swig_types[13] 
#define  SWIGTYPE_p_wxSize swig_types[14] 
#define  SWIGTYPE_p_double swig_types[15] 
#define  SWIGTYPE_p_wxMemoryDC swig_types[16] 
#define  SWIGTYPE_p_wxFontMapper swig_types[17] 
#define  SWIGTYPE_p_wxEffects swig_types[18] 
#define  SWIGTYPE_p_wxNativeEncodingInfo swig_types[19] 
#define  SWIGTYPE_p_wxPalette swig_types[20] 
#define  SWIGTYPE_p_wxBitmap swig_types[21] 
#define  SWIGTYPE_p_wxObject swig_types[22] 
#define  SWIGTYPE_p_wxRegionIterator swig_types[23] 
#define  SWIGTYPE_p_wxRect swig_types[24] 
#define  SWIGTYPE_p_wxString swig_types[25] 
#define  SWIGTYPE_p_wxPrinterDC swig_types[26] 
#define  SWIGTYPE_p_wxIconBundle swig_types[27] 
#define  SWIGTYPE_p_wxPoint swig_types[28] 
#define  SWIGTYPE_p_wxDash swig_types[29] 
#define  SWIGTYPE_p_wxScreenDC swig_types[30] 
#define  SWIGTYPE_p_wxCursor swig_types[31] 
#define  SWIGTYPE_p_wxClientDC swig_types[32] 
#define  SWIGTYPE_p_wxBufferedDC swig_types[33] 
#define  SWIGTYPE_p_wxImageList swig_types[34] 
#define  SWIGTYPE_p_unsigned_char swig_types[35] 
#define  SWIGTYPE_p_wxGDIObject swig_types[36] 
#define  SWIGTYPE_p_wxIcon swig_types[37] 
#define  SWIGTYPE_p_wxLocale swig_types[38] 
#define  SWIGTYPE_p_wxRegion swig_types[39] 
#define  SWIGTYPE_p_wxLanguageInfo swig_types[40] 
#define  SWIGTYPE_p_wxConfigBase swig_types[41] 
#define  SWIGTYPE_p_wxWindowDC swig_types[42] 
#define  SWIGTYPE_p_wxPrintData swig_types[43] 
#define  SWIGTYPE_p_wxBrushList swig_types[44] 
#define  SWIGTYPE_p_wxFontList swig_types[45] 
#define  SWIGTYPE_p_wxPen swig_types[46] 
#define  SWIGTYPE_p_wxBufferedPaintDC swig_types[47] 
#define  SWIGTYPE_p_wxPaintDC swig_types[48] 
#define  SWIGTYPE_p_wxPenList swig_types[49] 
#define  SWIGTYPE_p_wxPyPen swig_types[50] 
#define  SWIGTYPE_p_int swig_types[51] 
#define  SWIGTYPE_p_wxMetaFile swig_types[52] 
#define  SWIGTYPE_p_wxNativeFontInfo swig_types[53] 
#define  SWIGTYPE_p_wxEncodingConverter swig_types[54] 
#define  SWIGTYPE_p_wxColourDatabase swig_types[55] 
static swig_type_info *swig_types[57];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _gdi.so
  ------------------------------------------------*/
#define SWIG_init    init_gdi

#define SWIG_name    "_gdi"

#include <limits.h>
#include <float.h>
#include <string.h>

#ifndef SWIGSTATIC
#ifdef __cplusplus
#define SWIGSTATIC(a) static inline a
#else
#define SWIGSTATIC(a) static a
#endif
#endif

#ifndef numeric_cast
#ifdef __cplusplus
#ifdef HAVE_NUMERIC_CAST
#define numeric_cast(type,a) numeric_cast<type>(a)
#else
#define numeric_cast(type,a) static_cast<type>(a)
#endif
#else
#define numeric_cast(type,a) (type)(a)
#endif
#endif



#define SWIG_PyObj_FromSignedChar     PyInt_FromLong
#define SWIG_PyObj_FromUnsignedChar   PyInt_FromLong
#define SWIG_PyObj_FromShort         PyInt_FromLong
#define SWIG_PyObj_FromUnsignedShort  PyInt_FromLong
#define SWIG_PyObj_FromInt           PyInt_FromLong
#define SWIG_PyObj_FromLong          PyInt_FromLong
#define SWIG_PyObj_FromFloat         PyFloat_FromDouble
#define SWIG_PyObj_FromDouble        PyFloat_FromDouble
#define SWIG_PyObj_FromFloat         PyFloat_FromDouble
#define SWIG_PyObj_FromDouble        PyFloat_FromDouble


#include "wx/wxPython/wxPython.h"
#include "wx/wxPython/pyclasses.h"
    

 static const wxString wxPyEmptyString(wxEmptyString); 

SWIGSTATIC(bool)
SWIG_PyObj_AsBool(PyObject *obj)
{
  return PyObject_IsTrue(obj) ? true : false;
}


SWIGSTATIC(unsigned char)
SWIG_PyObj_AsUnsignedChar(PyObject *obj)
{ 
  return numeric_cast(unsigned char,
    SWIG_PyObj_AsUnsignedLongInRange(obj, "unsigned char", UCHAR_MAX));
}

PyObject *wxColour_Get(wxColour *self){
            PyObject* rv = PyTuple_New(3);
            int red = -1;
            int green = -1;
            int blue = -1;
            if (self->Ok()) {
                red =   self->Red();
                green = self->Green();
                blue =  self->Blue();
            }
            PyTuple_SetItem(rv, 0, PyInt_FromLong(red));
            PyTuple_SetItem(rv, 1, PyInt_FromLong(green));
            PyTuple_SetItem(rv, 2, PyInt_FromLong(blue));
            return rv;
        }

SWIGSTATIC(int)
SWIG_PyObj_AsInt(PyObject *obj)
{ 
  return numeric_cast(int,
    SWIG_PyObj_AsLongInRange(obj, "int", INT_MIN, INT_MAX));
}


static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyTuple_Check(target)) {
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}

PyObject *wxPen_GetDashes(wxPen *self){
            wxDash* dashes;
            int count = self->GetDashes(&dashes);
            wxPyBeginBlockThreads();
            PyObject* retval = PyList_New(0);
            for (int x=0; x<count; x++)
                PyList_Append(retval, PyInt_FromLong(dashes[x]));
            wxPyEndBlockThreads();
            return retval;
        }

wxPyPen::~wxPyPen()
{
    if (m_dash)
        delete [] m_dash;
}

void wxPyPen::SetDashes(int nb_dashes, const wxDash *dash)
{
    if (m_dash)
        delete [] m_dash;
    m_dash = new wxDash[nb_dashes];
    for (int i=0; i<nb_dashes; i++) {
        m_dash[i] = dash[i];
    }
    wxPen::SetDashes(nb_dashes, m_dash);
} 


SWIGSTATIC(short)
SWIG_PyObj_AsShort(PyObject *obj)
{ 
  return numeric_cast(short,
    SWIG_PyObj_AsLongInRange(obj, "short", SHRT_MIN, SHRT_MAX));
}


#include <wx/image.h>
    
    static char** ConvertListOfStrings(PyObject* listOfStrings) {
        char**    cArray = NULL;
        int       count;

        if (!PyList_Check(listOfStrings)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
            return NULL;
        }
        count = PyList_Size(listOfStrings);
        cArray = new char*[count];

        for(int x=0; x<count; x++) {
            // TODO: Need some validation and error checking here
            cArray[x] = PyString_AsString(PyList_GET_ITEM(listOfStrings, x));
        }
        return cArray;
    }


wxBitmap *new_wxBitmap(PyObject *listOfStrings){
            char**    cArray = NULL;
            wxBitmap* bmp;

            cArray = ConvertListOfStrings(listOfStrings);
            if (! cArray)
                return NULL;
            bmp = new wxBitmap(cArray);
            delete [] cArray;
            return bmp;
        }
wxBitmap *new_wxBitmap(PyObject *bits,int width,int height,int depth){
            char* buf;
            int   length;
            PyString_AsStringAndSize(bits, &buf, &length);
            return new wxBitmap(buf, width, height, depth);
        }
void wxBitmap_SetMaskColour(wxBitmap *self,wxColour const &colour){
            wxMask *mask = new wxMask(*self, colour);
            self->SetMask(mask);
        }

#include <wx/iconbndl.h>

wxIcon *new_wxIcon(wxBitmap const &bmp){
            wxIcon* icon = new wxIcon();
            icon->CopyFromBitmap(bmp);
            return icon;
        }
wxIcon *new_wxIcon(PyObject *listOfStrings){
            char**  cArray = NULL;
            wxIcon* icon;

            cArray = ConvertListOfStrings(listOfStrings);
            if (! cArray)
                return NULL;
            icon = new wxIcon(cArray);
            delete [] cArray;
            return icon;
        }
wxIconLocation *new_wxIconLocation(wxString const *filename,int num){



            return new wxIconLocation(*filename);

        }
void wxIconLocation_SetIndex(wxIconLocation *self,int num){



            // do nothing

        }
int wxIconLocation_GetIndex(wxIconLocation *self){



            return -1;

        }

SWIGSTATIC(long)
SWIG_PyObj_AsLong(PyObject * obj)
{
  return PyInt_Check(obj) ? PyInt_AsLong(obj) : PyLong_AsLong(obj);
}

wxCursor *new_wxCursor(wxString const *cursorName,long flags,int hotSpotX,int hotSpotY){




            return new wxCursor(*cursorName, flags, hotSpotX, hotSpotY);

        }
wxCursor *new_wxCursor(PyObject *bits,int width,int height,int hotSpotX,int hotSpotY,PyObject *maskBits){
            char* bitsbuf;
            char* maskbuf = NULL;
            int   length;
            PyString_AsStringAndSize(bits, &bitsbuf, &length);
            if (maskBits)
                PyString_AsStringAndSize(maskBits, &maskbuf, &length);
            return new wxCursor(bitsbuf, width, height, hotSpotX, hotSpotY, maskbuf);
        }


wxRegion *new_wxRegion(int points,wxPoint *points_array,int fillStyle){
            wxPyRaiseNotImplemented();
            return NULL;
        }
void wxRegionIterator_Next(wxRegionIterator *self){
            (*self) ++;
        }
bool wxRegionIterator___nonzero__(wxRegionIterator *self){
            return self->operator bool();
        }

#include <wx/fontutil.h>
#include <wx/fontmap.h>
#include <wx/fontenum.h>

wxString wxNativeFontInfo___str__(wxNativeFontInfo *self){
            return self->ToString();
        }

    wxNativeEncodingInfo* wxGetNativeFontEncoding(wxFontEncoding encoding) {
        static wxNativeEncodingInfo info;
        if ( wxGetNativeFontEncoding(encoding, &info) )
            return &info;
        else
            return NULL;
    }


SWIGSTATIC(PyObject* )
SWIG_PyObj_FromUnsignedLong(unsigned long value)
{
  return (value > (unsigned long)(LONG_MAX)) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong((long)value); 
}

PyObject *wxFontMapper_GetAltForEncoding(wxFontMapper *self,wxFontEncoding encoding,wxString const &facename,bool interactive){
            wxFontEncoding alt_enc;
            if (self->GetAltForEncoding(encoding, &alt_enc, facename, interactive))
                return PyInt_FromLong(alt_enc);
            else {
                Py_INCREF(Py_None);
                return Py_None;
            }
        }
wxFont *new_wxFont(wxString const &info){
            wxNativeFontInfo nfi;
            nfi.FromString(info);
            return new wxFont(nfi);
        }
wxFont *new_wxFont(int pointSize,wxFontFamily family,int flags,wxString const &face,wxFontEncoding encoding){
            return wxFont::New(pointSize, family, flags, face, encoding);
        }

class wxPyFontEnumerator : public wxFontEnumerator {
public:
    wxPyFontEnumerator() {}
    ~wxPyFontEnumerator() {}

    DEC_PYCALLBACK_BOOL_STRING(OnFacename);
    DEC_PYCALLBACK_BOOL_STRINGSTRING(OnFontEncoding);

    PYPRIVATE;
};

IMP_PYCALLBACK_BOOL_STRING(wxPyFontEnumerator, wxFontEnumerator, OnFacename);
IMP_PYCALLBACK_BOOL_STRINGSTRING(wxPyFontEnumerator, wxFontEnumerator, OnFontEncoding);


PyObject *wxPyFontEnumerator_GetEncodings(wxPyFontEnumerator *self){
            wxArrayString* arr = self->GetEncodings();
            return wxArrayString2PyList_helper(*arr);
        }
PyObject *wxPyFontEnumerator_GetFacenames(wxPyFontEnumerator *self){
            wxArrayString* arr = self->GetFacenames();
            return wxArrayString2PyList_helper(*arr);
        }



#include "wx/wxPython/pydrawxxx.h"

wxColour wxDC_GetPixelXY(wxDC *self,int x,int y){
            wxColour col;
            self->GetPixel(x, y, &col);
            return col;
        }
wxColour wxDC_GetPixel(wxDC *self,wxPoint const &pt){
            wxColour col;
            self->GetPixel(pt, &col);
            return col;
        }

SWIGSTATIC(double)
SWIG_PyObj_AsDouble(PyObject *obj)
{
  return (PyFloat_Check(obj)) ? PyFloat_AsDouble(obj) :
#if HAVE_LONG_LONG
    (double)((PyInt_Check(obj)) ? PyInt_AsLong(obj) : PyLong_AsLongLong(obj));
#else
    (double)((PyInt_Check(obj)) ? PyInt_AsLong(obj) : PyLong_AsLong(obj));
#endif
  if (PyErr_Occurred()) {
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError, "a double is expected");
  }
}

wxRect wxDC_DrawImageLabel(wxDC *self,wxString const &text,wxBitmap const &image,wxRect const &rect,int alignment,int indexAccel){
            wxRect rv;
            self->DrawLabel(text, image, rect, alignment, indexAccel, &rv);
            return rv;
        }
wxRect wxDC_GetClippingRect(wxDC *self){
            wxRect rect;
            self->GetClippingBox(rect);
            return rect;
        }
PyObject *wxDC__DrawPointList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXPoint, pyCoords, pyPens, pyBrushes);
        }
PyObject *wxDC__DrawLineList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXLine, pyCoords, pyPens, pyBrushes);
        }
PyObject *wxDC__DrawRectangleList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXRectangle, pyCoords, pyPens, pyBrushes);
        }
PyObject *wxDC__DrawEllipseList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXEllipse, pyCoords, pyPens, pyBrushes);
        }
PyObject *wxDC__DrawPolygonList(wxDC *self,PyObject *pyCoords,PyObject *pyPens,PyObject *pyBrushes){
            return wxPyDrawXXXList(*self, wxPyDrawXXXPolygon, pyCoords, pyPens, pyBrushes);
        }
PyObject *wxDC__DrawTextList(wxDC *self,PyObject *textList,PyObject *pyPoints,PyObject *foregroundList,PyObject *backgroundList){
            return wxPyDrawTextList(*self, textList, pyPoints, foregroundList, backgroundList);
        }

static void wxDC_GetBoundingBox(wxDC* dc, int* x1, int* y1, int* x2, int* y2) {
    *x1 = dc->MinX();
    *y1 = dc->MinY();
    *x2 = dc->MaxX();
    *y2 = dc->MaxY();
}


#include <wx/dcps.h>


class wxMetaFile : public wxObject {
public:
    wxMetaFile(const wxString&)
        { wxPyRaiseNotImplemented(); }
};

class wxMetaFileDC : public wxClientDC {
public:
    wxMetaFileDC(const wxString&, int, int, const wxString&)
        { wxPyRaiseNotImplemented(); }
};




void wxColourDatabase_Append(wxColourDatabase *self,wxString const &name,int red,int green,int blue){
            self->AddColour(name, wxColour(red, green, blue));
        }

#include <wx/effects.h>

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_GDIObject(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_GDIObject",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxGDIObject *)new wxGDIObject();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxGDIObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GDIObject(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_GDIObject",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxGDIObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GDIObject_GetVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GDIObject_GetVisible",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxGDIObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetVisible();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GDIObject_SetVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "visible", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:GDIObject_SetVisible",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxGDIObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (bool) SWIG_PyObj_AsBool(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetVisible(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GDIObject_IsNull(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxGDIObject *arg1 = (wxGDIObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GDIObject_IsNull",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxGDIObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsNull();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GDIObject_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxGDIObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Colour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    unsigned char arg1 = (unsigned char) 0 ;
    unsigned char arg2 = (unsigned char) 0 ;
    unsigned char arg3 = (unsigned char) 0 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOO:new_Colour",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if (obj0) {
        {
            arg1 = (unsigned char) SWIG_PyObj_AsUnsignedChar(obj0);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = (unsigned char) SWIG_PyObj_AsUnsignedChar(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (unsigned char) SWIG_PyObj_AsUnsignedChar(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColour *)new wxColour(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxColour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Colour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Colour",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NamedColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxColour *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "colorName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_NamedColour",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColour *)new wxColour((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxColour, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_ColourRGB(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    unsigned long arg1 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "colRGB", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_ColourRGB",kwnames,&obj0)) goto fail;
    {
        arg1 = (unsigned long) SWIG_PyObj_AsUnsignedLong(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColour *)new wxColour(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxColour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Red(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Red",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (unsigned char)(arg1)->Red();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromUnsignedChar((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Green(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Green",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (unsigned char)(arg1)->Green();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromUnsignedChar((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Blue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Blue",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (unsigned char)(arg1)->Blue();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromUnsignedChar((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_Set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    unsigned char arg2 ;
    unsigned char arg3 ;
    unsigned char arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Colour_Set",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (unsigned char) SWIG_PyObj_AsUnsignedChar(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (unsigned char) SWIG_PyObj_AsUnsignedChar(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (unsigned char) SWIG_PyObj_AsUnsignedChar(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Set(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_SetRGB(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colRGB", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour_SetRGB",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (unsigned long) SWIG_PyObj_AsUnsignedLong(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Set(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour___eq__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    wxColour *arg2 = 0 ;
    bool result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour___eq__",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxColour const *)arg1)->operator ==((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour___ne__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    wxColour *arg2 = 0 ;
    bool result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour___ne__",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxColour const *)arg1)->operator !=((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Colour_InitFromName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colourName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Colour_InitFromName",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->InitFromName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Colour_Get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = (wxColour *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Colour_Get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxColour_Get(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Colour_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxColour, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Palette(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    unsigned char *arg3 = (unsigned char *) 0 ;
    unsigned char *arg4 = (unsigned char *) 0 ;
    wxPalette *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "n",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:new_Palette",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_unsigned_char,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_unsigned_char,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_unsigned_char,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPalette *)new wxPalette(arg1,(unsigned char const *)arg2,(unsigned char const *)arg3,(unsigned char const *)arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPalette, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Palette(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Palette",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Palette_GetPixel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    byte arg2 ;
    byte arg3 ;
    byte arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Palette_GetPixel",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (byte) SWIG_PyObj_AsUnsignedChar(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (byte) SWIG_PyObj_AsUnsignedChar(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (byte) SWIG_PyObj_AsUnsignedChar(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetPixel(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Palette_GetRGB(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    int arg2 ;
    byte *arg3 = (byte *) 0 ;
    byte *arg4 = (byte *) 0 ;
    byte *arg5 = (byte *) 0 ;
    bool result;
    byte temp3 ;
    byte temp4 ;
    byte temp5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pixel", NULL 
    };
    
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Palette_GetRGB",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetRGB(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg4));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg5));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Palette_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPalette *arg1 = (wxPalette *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Palette_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Palette_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPalette, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Pen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = 0 ;
    int arg2 = (int) 1 ;
    int arg3 = (int) wxSOLID ;
    wxPen *result;
    wxColour temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "colour",(char *) "width",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_Pen",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxColour_helper(obj0, &arg1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPen *)new wxPen(*arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPen, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Pen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Pen",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetCap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetCap",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetColour",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetJoin(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetJoin",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetJoin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetStyle",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_GetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetWidth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetCap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "cap_style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetCap",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetCap(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetColour",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetColour(*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetJoin(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "join_style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetJoin",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetJoin(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "width", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetWidth",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWidth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Pen_SetDashes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    int arg2 ;
    wxDash *arg3 = (wxDash *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dashes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Pen_SetDashes",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = PyList_Size(obj1);
        arg3 = (wxDash*)byte_LIST_helper(obj1);
        if (arg3 == NULL) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDashes(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_Pen_GetDashes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPen *arg1 = (wxPen *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Pen_GetDashes",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxPen_GetDashes(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Pen_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPen, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PyPen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = 0 ;
    int arg2 = (int) 1 ;
    int arg3 = (int) wxSOLID ;
    wxPyPen *result;
    wxColour temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "colour",(char *) "width",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_PyPen",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxColour_helper(obj0, &arg1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyPen *)new wxPyPen(*arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPyPen, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_PyPen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyPen *arg1 = (wxPyPen *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_PyPen",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PyPen_SetDashes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyPen *arg1 = (wxPyPen *) 0 ;
    int arg2 ;
    wxDash *arg3 = (wxDash *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dashes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PyPen_SetDashes",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = PyList_Size(obj1);
        arg3 = (wxDash*)byte_LIST_helper(obj1);
        if (arg3 == NULL) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDashes(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject * PyPen_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyPen, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Brush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColour *arg1 = 0 ;
    int arg2 = (int) wxSOLID ;
    wxBrush *result;
    wxColour temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "colour",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_Brush",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = &temp1;
        if ( ! wxColour_helper(obj0, &arg1)) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBrush *)new wxBrush((wxColour const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBrush, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Brush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Brush",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_SetColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "col", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Brush_SetColour",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetColour((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_SetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Brush_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_SetStipple(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxBitmap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "stipple", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Brush_SetStipple",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStipple((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_GetColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_GetColour",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxBrush const *)arg1)->GetColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_GetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_GetStyle",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxBrush const *)arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_GetStipple(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_GetStipple",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)((wxBrush const *)arg1)->GetStipple();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBitmap, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_GetMacTheme(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Brush_GetMacTheme",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (short)(arg1)->GetMacTheme();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromShort((short)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Brush_SetMacTheme(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrush *arg1 = (wxBrush *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "macThemeBrush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Brush_SetMacTheme",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (short) SWIG_PyObj_AsShort(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMacTheme(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Brush_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBrush, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Bitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    int arg2 = (int) wxBITMAP_TYPE_ANY ;
    wxBitmap *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "name",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_Bitmap",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    if (obj1) {
        {
            arg2 = (wxBitmapType) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap((wxString const &)*arg1,(wxBitmapType )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBitmap, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_Bitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Bitmap",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EmptyBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 = (int) -1 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "width",(char *) "height",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_EmptyBitmap",kwnames,&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = 0 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_BitmapFromIcon",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap((wxIcon const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImage *arg1 = 0 ;
    int arg2 = (int) -1 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "image",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_BitmapFromImage",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new wxBitmap((wxImage const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromXPMData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "listOfStrings", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_BitmapFromXPMData",kwnames,&obj0)) goto fail;
    arg1 = obj0;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new_wxBitmap(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BitmapFromBits(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 = (int) 1 ;
    wxBitmap *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "bits",(char *) "width",(char *) "height",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:new_BitmapFromBits",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = obj0;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBitmap *)new_wxBitmap(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBitmap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetWidth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetHeight",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetDepth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetDepth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_ConvertToImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    SwigValueWrapper< wxImage > result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_ConvertToImage",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxBitmap const *)arg1)->ConvertToImage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetMask(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxMask *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Bitmap_GetMask",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMask *)((wxBitmap const *)arg1)->GetMask();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMask, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetMask(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxMask *arg2 = (wxMask *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetMask",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxMask,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMask(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetMaskColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetMaskColour",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxBitmap_SetMaskColour(arg1,(wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_GetSubBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxRect *arg2 = 0 ;
    SwigValueWrapper< wxBitmap > result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_GetSubBitmap",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxBitmap const *)arg1)->GetSubBitmap((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBitmap * resultptr;
        resultptr = new wxBitmap((wxBitmap &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxBitmap, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SaveFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    wxPalette *arg4 = (wxPalette *) (wxPalette *) NULL ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "type",(char *) "palette", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Bitmap_SaveFile",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = (wxBitmapType) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_wxPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->SaveFile((wxString const &)*arg2,(wxBitmapType )arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Bitmap_LoadFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Bitmap_LoadFile",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = (wxBitmapType) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->LoadFile((wxString const &)*arg2,(wxBitmapType )arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Bitmap_CopyFromIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    wxIcon *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_CopyFromIcon",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->CopyFromIcon((wxIcon const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetHeight",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetHeight(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "width", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetWidth",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWidth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Bitmap_SetDepth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = (wxBitmap *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "depth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Bitmap_SetDepth",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDepth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Bitmap_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBitmap, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Mask(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxMask *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_Mask",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMask *)new wxMask((wxBitmap const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMask, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MaskColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxColour *arg2 = 0 ;
    wxMask *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "bitmap",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_MaskColour",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMask *)new wxMask((wxBitmap const &)*arg1,(wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMask, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Mask_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMask, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Icon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    int arg2 ;
    int arg3 = (int) -1 ;
    int arg4 = (int) -1 ;
    wxIcon *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "name",(char *) "type",(char *) "desiredWidth",(char *) "desiredHeight", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_Icon",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        arg2 = (wxBitmapType) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new wxIcon((wxString const &)*arg1,(wxBitmapType )arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIcon, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_Icon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Icon",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EmptyIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_EmptyIcon",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new wxIcon();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconFromLocation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = 0 ;
    wxIcon *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "loc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconFromLocation",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconLocation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new wxIcon((wxIconLocation const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconFromBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxIcon *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "bmp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconFromBitmap",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new_wxIcon((wxBitmap const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconFromXPMData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    wxIcon *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "listOfStrings", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconFromXPMData",kwnames,&obj0)) goto fail;
    arg1 = obj0;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIcon *)new_wxIcon(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIcon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_GetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_GetWidth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_GetHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_GetHeight",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_GetDepth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Icon_GetDepth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_SetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "w", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_SetWidth",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWidth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_SetHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "h", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_SetHeight",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetHeight(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_SetDepth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "d", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_SetDepth",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDepth(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Icon_CopyFromBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = (wxIcon *) 0 ;
    wxBitmap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Icon_CopyFromBitmap",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CopyFromBitmap((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Icon_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxIcon, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IconLocation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = (wxString *) &wxPyEmptyString ;
    int arg2 = (int) 0 ;
    wxIconLocation *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "filename",(char *) "num", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_IconLocation",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = True;
        }
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconLocation *)new_wxIconLocation((wxString const *)arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIconLocation, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_IconLocation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_IconLocation",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconLocation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_IsOk(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IconLocation_IsOk",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconLocation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxIconLocation const *)arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_SetFileName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "filename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconLocation_SetFileName",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconLocation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFileName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_IconLocation_GetFileName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IconLocation_GetFileName",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconLocation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxIconLocation const *)arg1)->GetFileName();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_SetIndex(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "num", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconLocation_SetIndex",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconLocation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxIconLocation_SetIndex(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconLocation_GetIndex(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconLocation *arg1 = (wxIconLocation *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:IconLocation_GetIndex",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconLocation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxIconLocation_GetIndex(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IconLocation_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxIconLocation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IconBundle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_IconBundle",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconBundle *)new wxIconBundle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIconBundle, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IconBundleFromFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    long arg2 ;
    wxIconBundle *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "file",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_IconBundleFromFile",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        arg2 = (long) SWIG_PyObj_AsLong(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconBundle *)new wxIconBundle((wxString const &)*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIconBundle, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_IconBundleFromIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIcon *arg1 = 0 ;
    wxIconBundle *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_IconBundleFromIcon",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIconBundle *)new wxIconBundle((wxIcon const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIconBundle, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IconBundle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_IconBundle",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconBundle,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconBundle_AddIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    wxIcon *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconBundle_AddIcon",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconBundle,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddIcon((wxIcon const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IconBundle_AddIconFromFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    wxString *arg2 = 0 ;
    long arg3 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "file",(char *) "type", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:IconBundle_AddIconFromFile",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconBundle,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = (long) SWIG_PyObj_AsLong(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddIcon((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_IconBundle_GetIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxIconBundle *arg1 = (wxIconBundle *) 0 ;
    wxSize *arg2 = 0 ;
    wxIcon *result;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "size", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IconBundle_GetIcon",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxIconBundle,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxIcon const &_result_ref = ((wxIconBundle const *)arg1)->GetIcon((wxSize const &)*arg2);
            result = (wxIcon *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxIcon, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IconBundle_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxIconBundle, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Cursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = (wxString *) 0 ;
    long arg2 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    wxCursor *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "cursorName",(char *) "flags",(char *) "hotSpotX",(char *) "hotSpotY", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_Cursor",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        arg2 = (long) SWIG_PyObj_AsLong(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCursor *)new_wxCursor((wxString const *)arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxCursor, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_Cursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxCursor *arg1 = (wxCursor *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Cursor",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxCursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StockCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxCursor *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_StockCursor",kwnames,&obj0)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCursor *)new wxCursor(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxCursor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CursorFromImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImage *arg1 = 0 ;
    wxCursor *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "image", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_CursorFromImage",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCursor *)new wxCursor((wxImage const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxCursor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CursorFromBits(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    PyObject *arg6 = (PyObject *) 0 ;
    wxCursor *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "bits",(char *) "width",(char *) "height",(char *) "hotSpotX",(char *) "hotSpotY",(char *) "maskBits", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OOO:new_CursorFromBits",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    arg1 = obj0;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = (int) SWIG_PyObj_AsInt(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj5) {
        arg6 = obj5;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxCursor *)new_wxCursor(arg1,arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxCursor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursor_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxCursor *arg1 = (wxCursor *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Cursor_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxCursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Cursor_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxCursor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Region(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 = (int) 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    int arg4 = (int) 0 ;
    wxRegion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_Region",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = (int) SWIG_PyObj_AsInt(obj0);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegion *)new wxRegion(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxRegion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RegionFromBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBitmap *arg1 = 0 ;
    wxColour const &arg2_defvalue = wxNullColour ;
    wxColour *arg2 = (wxColour *) &arg2_defvalue ;
    int arg3 = (int) 0 ;
    wxRegion *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "bmp",(char *) "transColour",(char *) "tolerance", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_RegionFromBitmap",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj1) {
        {
            arg2 = &temp2;
            if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegion *)new wxRegion((wxBitmap const &)*arg1,(wxColour const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxRegion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RegionFromPoints(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxPoint *arg2 = (wxPoint *) 0 ;
    int arg3 = (int) wxWINDING_RULE ;
    wxRegion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "points",(char *) "fillStyle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_RegionFromPoints",kwnames,&obj0,&obj1)) goto fail;
    {
        arg2 = wxPoint_LIST_helper(obj0, &arg1);
        if (arg2 == NULL) SWIG_fail;
    }
    if (obj1) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegion *)new_wxRegion(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxRegion, 1);
    {
        if (arg2) delete [] arg2;
    }
    return resultobj;
    fail:
    {
        if (arg2) delete [] arg2;
    }
    return NULL;
}


static PyObject *_wrap_delete_Region(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Region",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Clear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_Clear",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Clear();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Region_Contains",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Contains(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ContainsPoint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxPoint *arg2 = 0 ;
    int result;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_ContainsPoint",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Contains((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ContainsRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    int result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_ContainsRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Contains((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ContainsRectDim(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "w",(char *) "h", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_ContainsRectDim",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Contains(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_GetBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_GetBox",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetBox();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Intersect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Intersect",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Intersect(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_IntersectRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_IntersectRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Intersect((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_IntersectRegion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_IntersectRegion",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Intersect((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_IsEmpty(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_IsEmpty",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsEmpty();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Union(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Union",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_UnionRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_UnionRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_UnionRegion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_UnionRegion",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Subtract(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Subtract",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Subtract(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_SubtractRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_SubtractRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Subtract((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_SubtractRegion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_SubtractRegion",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Subtract((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_Xor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Region_Xor",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Xor(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_XorRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRect *arg2 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_XorRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Xor((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_XorRegion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxRegion *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Region_XorRegion",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Xor((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_ConvertToBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    SwigValueWrapper< wxBitmap > result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Region_ConvertToBitmap",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->ConvertToBitmap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxBitmap * resultptr;
        resultptr = new wxBitmap((wxBitmap &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxBitmap, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Region_UnionBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = (wxRegion *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxColour const &arg3_defvalue = wxNullColour ;
    wxColour *arg3 = (wxColour *) &arg3_defvalue ;
    int arg4 = (int) 0 ;
    bool result;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp",(char *) "transColour",(char *) "tolerance", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:Region_UnionBitmap",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        {
            arg3 = &temp3;
            if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Union((wxBitmap const &)*arg2,(wxColour const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Region_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxRegion, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RegionIterator(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegion *arg1 = 0 ;
    wxRegionIterator *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_RegionIterator",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxRegionIterator *)new wxRegionIterator((wxRegion const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxRegionIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RegionIterator(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_RegionIterator",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetX(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetX",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetX();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetY",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetY();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetW(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetW",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetW();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetWidth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetH(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetH",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetH();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetHeight",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_GetRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    wxRect result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_GetRect",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetRect();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_HaveRects(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_HaveRects",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->HaveRects();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_Reset(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_Reset",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Reset();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator_Next(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator_Next",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxRegionIterator_Next(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegionIterator___nonzero__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxRegionIterator *arg1 = (wxRegionIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegionIterator___nonzero__",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxRegionIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxRegionIterator___nonzero__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RegionIterator_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxRegionIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_NativeFontInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_NativeFontInfo",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeFontInfo *)new wxNativeFontInfo();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxNativeFontInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_NativeFontInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_NativeFontInfo",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_Init(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_Init",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Init();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_InitFromFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxFont *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_InitFromFont",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->InitFromFont((wxFont const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetPointSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetPointSize",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxNativeFontInfo const *)arg1)->GetPointSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetStyle",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxNativeFontInfo const *)arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetWeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetWeight",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxNativeFontInfo const *)arg1)->GetWeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetUnderlined(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetUnderlined",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxNativeFontInfo const *)arg1)->GetUnderlined();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetFaceName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetFaceName",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeFontInfo const *)arg1)->GetFaceName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetFamily(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetFamily",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxNativeFontInfo const *)arg1)->GetFamily();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_GetEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_GetEncoding",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxNativeFontInfo const *)arg1)->GetEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetPointSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pointsize", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetPointSize",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPointSize(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontStyle) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle((wxFontStyle )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetWeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weight", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetWeight",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontWeight) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWeight((wxFontWeight )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetUnderlined(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "underlined", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetUnderlined",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (bool) SWIG_PyObj_AsBool(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetUnderlined(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetFaceName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetFaceName",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        wxString* sptr = wxString_in_helper(obj1);
        if (sptr == NULL) SWIG_fail;
        arg2 = *sptr;
        delete sptr;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFaceName(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetFamily(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "family", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetFamily",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontFamily) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFamily((wxFontFamily )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_SetEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_SetEncoding",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetEncoding((wxFontEncoding )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_FromString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "s", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_FromString",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FromString((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_ToString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_ToString",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeFontInfo const *)arg1)->ToString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo___str__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo___str__",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxNativeFontInfo___str__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_FromUserString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "s", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeFontInfo_FromUserString",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FromUserString((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeFontInfo_ToUserString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = (wxNativeFontInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeFontInfo_ToUserString",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeFontInfo const *)arg1)->ToUserString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NativeFontInfo_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxNativeFontInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_NativeEncodingInfo_facename_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString *arg2 = (wxString *) 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeEncodingInfo_facename_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (arg1) (arg1)->facename = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_facename_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeEncodingInfo_facename_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (wxString *)& ((arg1)->facename);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_encoding_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeEncodingInfo_encoding_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (arg1) (arg1)->encoding = (wxFontEncoding )arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_encoding_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeEncodingInfo_encoding_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->encoding);
    
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NativeEncodingInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_NativeEncodingInfo",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeEncodingInfo *)new wxNativeEncodingInfo();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxNativeEncodingInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_NativeEncodingInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_NativeEncodingInfo",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_FromString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "s", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:NativeEncodingInfo_FromString",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FromString((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_NativeEncodingInfo_ToString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = (wxNativeEncodingInfo *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:NativeEncodingInfo_ToString",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxNativeEncodingInfo const *)arg1)->ToString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NativeEncodingInfo_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxNativeEncodingInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GetNativeFontEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxNativeEncodingInfo *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:GetNativeFontEncoding",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeEncodingInfo *)wxGetNativeFontEncoding((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxNativeEncodingInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TestFontEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeEncodingInfo *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:TestFontEncoding",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeEncodingInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxTestFontEncoding((wxNativeEncodingInfo const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FontMapper(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_FontMapper",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontMapper *)new wxFontMapper();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFontMapper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FontMapper(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FontMapper",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_Get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":FontMapper_Get",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontMapper *)wxFontMapper::Get();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFontMapper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_Set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxFontMapper *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "mapper", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_Set",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFontMapper *)wxFontMapper::Set(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFontMapper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_CharsetToEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxString *arg2 = 0 ;
    bool arg3 = (bool) True ;
    int result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "charset",(char *) "interactive", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FontMapper_CharsetToEncoding",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (obj2) {
        {
            arg3 = (bool) SWIG_PyObj_AsBool(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->CharsetToEncoding((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_GetSupportedEncodingsCount(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    size_t result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":FontMapper_GetSupportedEncodingsCount",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (size_t)wxFontMapper::GetSupportedEncodingsCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromUnsignedLong((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    size_t arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "n", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_GetEncoding",kwnames,&obj0)) goto fail;
    {
        arg1 = (size_t) SWIG_PyObj_AsUnsignedLong(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxFontMapper::GetEncoding(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetEncodingName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_GetEncodingName",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFontMapper::GetEncodingName((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetEncodingDescription(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontMapper_GetEncodingDescription",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFontMapper::GetEncodingDescription((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_SetConfig(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxConfigBase *arg2 = (wxConfigBase *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "config", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetConfig",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxConfigBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetConfig(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_SetConfigPath(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "prefix", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetConfigPath",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetConfigPath((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_GetDefaultConfigPath(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":FontMapper_GetDefaultConfigPath",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxFontMapper::GetDefaultConfigPath();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_GetAltForEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    int arg2 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    bool arg4 = (bool) True ;
    PyObject *result;
    bool temp3 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding",(char *) "facename",(char *) "interactive", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:FontMapper_GetAltForEncoding",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = True;
        }
    }
    if (obj3) {
        {
            arg4 = (bool) SWIG_PyObj_AsBool(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxFontMapper_GetAltForEncoding(arg1,(wxFontEncoding )arg2,(wxString const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_IsEncodingAvailable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    int arg2 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    bool result;
    bool temp3 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FontMapper_IsEncodingAvailable",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = True;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->IsEncodingAvailable((wxFontEncoding )arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_FontMapper_SetDialogParent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "parent", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetDialogParent",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDialogParent(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontMapper_SetDialogTitle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontMapper *arg1 = (wxFontMapper *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "title", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontMapper_SetDialogTitle",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontMapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDialogTitle((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * FontMapper_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFontMapper, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Font(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    bool arg5 = (bool) False ;
    wxString const &arg6_defvalue = wxPyEmptyString ;
    wxString *arg6 = (wxString *) &arg6_defvalue ;
    int arg7 = (int) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    bool temp6 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "pointSize",(char *) "family",(char *) "style",(char *) "weight",(char *) "underline",(char *) "face",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OOO:new_Font",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (bool) SWIG_PyObj_AsBool(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = wxString_in_helper(obj5);
            if (arg6 == NULL) SWIG_fail;
            temp6 = True;
        }
    }
    if (obj6) {
        {
            arg7 = (wxFontEncoding) SWIG_PyObj_AsInt(obj6);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new wxFont(arg1,arg2,arg3,arg4,arg5,(wxString const &)*arg6,(wxFontEncoding )arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFont, 1);
    {
        if (temp6)
        delete arg6;
    }
    return resultobj;
    fail:
    {
        if (temp6)
        delete arg6;
    }
    return NULL;
}


static PyObject *_wrap_delete_Font(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Font",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FontFromNativeInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxNativeFontInfo *arg1 = 0 ;
    wxFont *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_FontFromNativeInfo",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new wxFont((wxNativeFontInfo const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFont, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FontFromNativeInfoString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxFont *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_FontFromNativeInfoString",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new_wxFont((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFont, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_new_Font2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 = (int) wxFONTFLAG_DEFAULT ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    int arg5 = (int) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    bool temp4 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "pointSize",(char *) "family",(char *) "flags",(char *) "face",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:new_Font2",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (wxFontFamily) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = True;
        }
    }
    if (obj4) {
        {
            arg5 = (wxFontEncoding) SWIG_PyObj_AsInt(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)new_wxFont(arg1,(wxFontFamily )arg2,arg3,(wxString const &)*arg4,(wxFontEncoding )arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFont, 1);
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_Font_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font___eq__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxFont *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font___eq__",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->operator ==((wxFont const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font___ne__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxFont *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font___ne__",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->operator !=((wxFont const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetPointSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetPointSize",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetPointSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetFamily(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetFamily",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetFamily();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetStyle",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetStyle();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetWeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetWeight",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetWeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetUnderlined(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetUnderlined",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->GetUnderlined();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetFaceName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetFaceName",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetFaceName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetEncoding",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxFont const *)arg1)->GetEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNativeFontInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxNativeFontInfo *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNativeFontInfo",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxNativeFontInfo *)((wxFont const *)arg1)->GetNativeFontInfo();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxNativeFontInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_IsFixedWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_IsFixedWidth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxFont const *)arg1)->IsFixedWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNativeFontInfoDesc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNativeFontInfoDesc",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetNativeFontInfoDesc();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNativeFontInfoUserDesc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNativeFontInfoUserDesc",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetNativeFontInfoUserDesc();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetPointSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pointSize", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetPointSize",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPointSize(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetFamily(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "family", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetFamily",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFamily(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetStyle",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetStyle(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetWeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "weight", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetWeight",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetWeight(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetFaceName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "faceName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetFaceName",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFaceName((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Font_SetUnderlined(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "underlined", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetUnderlined",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (bool) SWIG_PyObj_AsBool(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetUnderlined(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetEncoding",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetEncoding((wxFontEncoding )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetNativeFontInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxNativeFontInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetNativeFontInfo",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxNativeFontInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNativeFontInfo((wxNativeFontInfo const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetNativeFontInfoFromString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetNativeFontInfoFromString",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNativeFontInfo((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Font_SetNativeFontInfoUserDesc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Font_SetNativeFontInfoUserDesc",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNativeFontInfoUserDesc((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Font_GetFamilyString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetFamilyString",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetFamilyString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetStyleString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetStyleString",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetStyleString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetWeightString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetWeightString",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxFont const *)arg1)->GetWeightString();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetNoAntiAliasing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool arg2 = (bool) True ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "no", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Font_SetNoAntiAliasing",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            arg2 = (bool) SWIG_PyObj_AsBool(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetNoAntiAliasing(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetNoAntiAliasing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFont *arg1 = (wxFont *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_GetNoAntiAliasing",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetNoAntiAliasing();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_GetDefaultEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Font_GetDefaultEncoding",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxFont::GetDefaultEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Font_SetDefaultEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Font_SetDefaultEncoding",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxFont::SetDefaultEncoding((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Font_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFont, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FontEnumerator(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_FontEnumerator",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPyFontEnumerator *)new wxPyFontEnumerator();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPyFontEnumerator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FontEnumerator(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FontEnumerator",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyFontEnumerator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator__setCallbackInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "self",(char *) "_class",(char *) "incref", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:FontEnumerator__setCallbackInfo",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyFontEnumerator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    {
        arg4 = (bool) SWIG_PyObj_AsBool(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->_setCallbackInfo(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator_EnumerateFacenames(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    int arg2 = (int) wxFONTENCODING_SYSTEM ;
    bool arg3 = (bool) False ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "encoding",(char *) "fixedWidthOnly", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:FontEnumerator_EnumerateFacenames",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyFontEnumerator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (bool) SWIG_PyObj_AsBool(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->EnumerateFacenames((wxFontEncoding )arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator_EnumerateEncodings(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    wxString const &arg2_defvalue = wxPyEmptyString ;
    wxString *arg2 = (wxString *) &arg2_defvalue ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "facename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:FontEnumerator_EnumerateEncodings",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyFontEnumerator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            arg2 = wxString_in_helper(obj1);
            if (arg2 == NULL) SWIG_fail;
            temp2 = True;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->EnumerateEncodings((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_FontEnumerator_GetEncodings(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontEnumerator_GetEncodings",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyFontEnumerator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxPyFontEnumerator_GetEncodings(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontEnumerator_GetFacenames(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPyFontEnumerator *arg1 = (wxPyFontEnumerator *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontEnumerator_GetFacenames",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPyFontEnumerator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxPyFontEnumerator_GetFacenames(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FontEnumerator_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPyFontEnumerator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_LanguageInfo_Language_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "Language", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LanguageInfo_Language_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLanguageInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (arg1) (arg1)->Language = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LanguageInfo_Language_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LanguageInfo_Language_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLanguageInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->Language);
    
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LanguageInfo_CanonicalName_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *arg2 = (wxString *) 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "CanonicalName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LanguageInfo_CanonicalName_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLanguageInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (arg1) (arg1)->CanonicalName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LanguageInfo_CanonicalName_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LanguageInfo_CanonicalName_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLanguageInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (wxString *)& ((arg1)->CanonicalName);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LanguageInfo_Description_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *arg2 = (wxString *) 0 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "Description", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LanguageInfo_Description_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLanguageInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (arg1) (arg1)->Description = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_LanguageInfo_Description_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = (wxLanguageInfo *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:LanguageInfo_Description_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLanguageInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (wxString *)& ((arg1)->Description);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LanguageInfo_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLanguageInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Locale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 = (int) wxLANGUAGE_DEFAULT ;
    int arg2 = (int) wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING ;
    wxLocale *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "language",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Locale",kwnames,&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            arg1 = (int) SWIG_PyObj_AsInt(obj0);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLocale *)new wxLocale(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxLocale, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Locale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Locale",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_Init1(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    bool arg5 = (bool) True ;
    bool arg6 = (bool) False ;
    bool result;
    bool temp2 = False ;
    bool temp3 = False ;
    bool temp4 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szName",(char *) "szShort",(char *) "szLocale",(char *) "bLoadDefault",(char *) "bConvertEncoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOO:Locale_Init1",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = True;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = True;
        }
    }
    if (obj4) {
        {
            arg5 = (bool) SWIG_PyObj_AsBool(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = (bool) SWIG_PyObj_AsBool(obj5);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Init((wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject *_wrap_Locale_Init2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    int arg2 = (int) wxLANGUAGE_DEFAULT ;
    int arg3 = (int) wxLOCALE_LOAD_DEFAULT|wxLOCALE_CONV_ENCODING ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "language",(char *) "flags", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:Locale_Init2",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Init(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSystemLanguage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Locale_GetSystemLanguage",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxLocale::GetSystemLanguage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSystemEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Locale_GetSystemEncoding",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxLocale::GetSystemEncoding();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSystemEncodingName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":Locale_GetSystemEncodingName",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxLocale::GetSystemEncodingName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_IsOk(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_IsOk",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxLocale const *)arg1)->IsOk();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetLocale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLocale",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetLocale();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetLanguage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLanguage",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxLocale const *)arg1)->GetLanguage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetSysName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetSysName",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetSysName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetCanonicalName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetCanonicalName",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetCanonicalName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_AddCatalogLookupPathPrefix(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "prefix", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_AddCatalogLookupPathPrefix",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLocale::AddCatalogLookupPathPrefix((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Locale_AddCatalog(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szDomain", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Locale_AddCatalog",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->AddCatalog((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Locale_IsLoaded(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szDomain", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Locale_IsLoaded",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxLocale const *)arg1)->IsLoaded((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_Locale_GetLanguageInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxLanguageInfo *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "lang", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLanguageInfo",kwnames,&obj0)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLanguageInfo *)wxLocale::GetLanguageInfo(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxLanguageInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetLanguageName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "lang", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetLanguageName",kwnames,&obj0)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxLocale::GetLanguageName(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_FindLanguageInfo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxLanguageInfo *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "locale", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_FindLanguageInfo",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLanguageInfo *)wxLocale::FindLanguageInfo((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxLanguageInfo, 0);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_Locale_AddLanguage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLanguageInfo *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "info", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_AddLanguage",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLanguageInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxLocale::AddLanguage((wxLanguageInfo const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Locale_GetString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *arg2 = 0 ;
    wxString const &arg3_defvalue = wxPyEmptyString ;
    wxString *arg3 = (wxString *) &arg3_defvalue ;
    wxString result;
    bool temp2 = False ;
    bool temp3 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "szOrigString",(char *) "szDomain", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:Locale_GetString",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (obj2) {
        {
            arg3 = wxString_in_helper(obj2);
            if (arg3 == NULL) SWIG_fail;
            temp3 = True;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxLocale const *)arg1)->GetString((wxString const &)*arg2,(wxString const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    {
        if (temp3)
        delete arg3;
    }
    return NULL;
}


static PyObject *_wrap_Locale_GetName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *arg1 = (wxLocale *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Locale_GetName",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxLocale,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxString const &_result_ref = ((wxLocale const *)arg1)->GetName();
            result = (wxString *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Locale_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxLocale, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GetLocale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxLocale *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":GetLocale",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxLocale *)wxGetLocale();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxLocale, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetTranslation__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxString result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetTranslation",&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetTranslation((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_GetTranslation__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    size_t arg3 ;
    wxString result;
    bool temp1 = False ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:GetTranslation",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = True;
    }
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = (size_t) SWIG_PyObj_AsUnsignedLong(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxGetTranslation((wxString const &)*arg1,(wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_GetTranslation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
        }
        if (_v) {
            return _wrap_GetTranslation__SWIG_0(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
            }
            if (_v) {
                {
                    SWIG_PyObj_AsUnsignedLong(argv[2]);
                    if (PyErr_Occurred()) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_GetTranslation__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetTranslation'");
    return NULL;
}


static PyObject *_wrap_new_EncodingConverter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_EncodingConverter",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxEncodingConverter *)new wxEncodingConverter();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxEncodingConverter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EncodingConverter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *arg1 = (wxEncodingConverter *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_EncodingConverter",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEncodingConverter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_Init(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *arg1 = (wxEncodingConverter *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 = (int) wxCONVERT_STRICT ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "input_enc",(char *) "output_enc",(char *) "method", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:EncodingConverter_Init",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEncodingConverter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (wxFontEncoding) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Init((wxFontEncoding )arg2,(wxFontEncoding )arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_Convert(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEncodingConverter *arg1 = (wxEncodingConverter *) 0 ;
    wxString *arg2 = 0 ;
    wxString result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "input", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EncodingConverter_Convert",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEncodingConverter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->Convert((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_EncodingConverter_GetPlatformEquivalents(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 = (int) wxPLATFORM_CURRENT ;
    wxFontEncodingArray result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "enc",(char *) "platform", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:EncodingConverter_GetPlatformEquivalents",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = (wxFontEncoding) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxEncodingConverter::GetPlatformEquivalents((wxFontEncoding )arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = PyList_New(0);
        for (size_t i=0; i < (&result)->GetCount(); i++) {
            PyObject* number = PyInt_FromLong((&result)->Item(i));
            PyList_Append(resultobj, number);
            Py_DECREF(number);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_GetAllEquivalents(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    wxFontEncodingArray result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "enc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:EncodingConverter_GetAllEquivalents",kwnames,&obj0)) goto fail;
    {
        arg1 = (wxFontEncoding) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxEncodingConverter::GetAllEquivalents((wxFontEncoding )arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = PyList_New(0);
        for (size_t i=0; i < (&result)->GetCount(); i++) {
            PyObject* number = PyInt_FromLong((&result)->Item(i));
            PyList_Append(resultobj, number);
            Py_DECREF(number);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EncodingConverter_CanConvert(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "encIn",(char *) "encOut", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EncodingConverter_CanConvert",kwnames,&obj0,&obj1)) goto fail;
    {
        arg1 = (wxFontEncoding) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (wxFontEncoding) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxEncodingConverter::CanConvert((wxFontEncoding )arg1,(wxFontEncoding )arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EncodingConverter_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxEncodingConverter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_DC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_DC",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_BeginDrawing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_BeginDrawing",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->BeginDrawing();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_EndDrawing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_EndDrawing",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->EndDrawing();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_FloodFillXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    wxColour *arg4 = 0 ;
    int arg5 = (int) wxFLOOD_SURFACE ;
    bool result;
    wxColour temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "col",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:DC_FloodFillXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = &temp4;
        if ( ! wxColour_helper(obj3, &arg4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (int) SWIG_PyObj_AsInt(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FloodFill(arg2,arg3,(wxColour const &)*arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_FloodFill(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    int arg4 = (int) wxFLOOD_SURFACE ;
    bool result;
    wxPoint temp2 ;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "col",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:DC_FloodFill",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->FloodFill((wxPoint const &)*arg2,(wxColour const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPixelXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_GetPixelXY",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_GetPixelXY(arg1,arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPixel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxColour result;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_GetPixel",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_GetPixel(arg1,(wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawLineXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x1",(char *) "y1",(char *) "x2",(char *) "y2", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawLineXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLine(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawLine(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    wxPoint temp2 ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt1",(char *) "pt2", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawLine",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLine((wxPoint const &)*arg2,(wxPoint const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CrossHairXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_CrossHairXY",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CrossHair(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CrossHair(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_CrossHair",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CrossHair((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawArcXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x1",(char *) "y1",(char *) "x2",(char *) "y2",(char *) "xc",(char *) "yc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:DC_DrawArcXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg6 = (int) SWIG_PyObj_AsInt(obj5);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg7 = (int) SWIG_PyObj_AsInt(obj6);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawArc(arg2,arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawArc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    wxPoint *arg4 = 0 ;
    wxPoint temp2 ;
    wxPoint temp3 ;
    wxPoint temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt1",(char *) "pt2",(char *) "centre", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawArc",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = &temp4;
        if ( ! wxPoint_helper(obj3, &arg4)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawArc((wxPoint const &)*arg2,(wxPoint const &)*arg3,(wxPoint const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCheckMarkXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawCheckMarkXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCheckMark(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCheckMark(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawCheckMark",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCheckMark((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipticArcXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    double arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "w",(char *) "h",(char *) "sa",(char *) "ea", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:DC_DrawEllipticArcXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg6 = (double) SWIG_PyObj_AsDouble(obj5);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg7 = (double) SWIG_PyObj_AsDouble(obj6);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipticArc(arg2,arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipticArc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz",(char *) "sa",(char *) "ea", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawEllipticArc",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = (double) SWIG_PyObj_AsDouble(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (double) SWIG_PyObj_AsDouble(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipticArc((wxPoint const &)*arg2,(wxSize const &)*arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawPointXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawPointXY",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawPoint(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawPoint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawPoint",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawPoint((wxPoint const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRectangleXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawRectangleXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRectangle(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRectangle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawRectangle",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRectangle((wxPoint const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRectangleRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawRectangleRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRectangle((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRoundedRectangleXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    double arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:DC_DrawRoundedRectangleXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg6 = (double) SWIG_PyObj_AsDouble(obj5);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRoundedRectangle(arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRoundedRectangle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    double arg4 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawRoundedRectangle",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = (double) SWIG_PyObj_AsDouble(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRoundedRectangle((wxPoint const &)*arg2,(wxSize const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawRoundedRectangleRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    double arg3 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "r",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawRoundedRectangleRect",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = (double) SWIG_PyObj_AsDouble(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRoundedRectangle((wxRect const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCircleXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawCircleXY",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCircle(arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawCircle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    int arg3 ;
    wxPoint temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "radius", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawCircle",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawCircle((wxPoint const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipseXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawEllipseXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipse(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipse(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawEllipse",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipse((wxPoint const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawEllipseRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawEllipseRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawEllipse((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawIconXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxIcon *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawIconXY",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawIcon((wxIcon const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxIcon *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawIcon",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawIcon((wxIcon const &)*arg2,(wxPoint const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawBitmapXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBitmap *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    bool arg5 = (bool) False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp",(char *) "x",(char *) "y",(char *) "useMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:DC_DrawBitmapXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (bool) SWIG_PyObj_AsBool(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawBitmap((wxBitmap const &)*arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    bool arg4 = (bool) False ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bmp",(char *) "pt",(char *) "useMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:DC_DrawBitmap",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (bool) SWIG_PyObj_AsBool(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawBitmap((wxBitmap const &)*arg2,(wxPoint const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawTextXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawTextXY",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawText((wxString const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    bool temp2 = False ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "pt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_DrawText",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawText((wxString const &)*arg2,(wxPoint const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawRotatedTextXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    double arg5 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "x",(char *) "y",(char *) "angle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_DrawRotatedTextXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (double) SWIG_PyObj_AsDouble(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRotatedText((wxString const &)*arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawRotatedText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxPoint *arg3 = 0 ;
    double arg4 ;
    bool temp2 = False ;
    wxPoint temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "pt",(char *) "angle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC_DrawRotatedText",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = &temp3;
        if ( ! wxPoint_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = (double) SWIG_PyObj_AsDouble(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawRotatedText((wxString const &)*arg2,(wxPoint const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_BlitXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    wxDC *arg6 = (wxDC *) 0 ;
    int arg7 ;
    int arg8 ;
    int arg9 = (int) wxCOPY ;
    bool arg10 = (bool) False ;
    int arg11 = (int) -1 ;
    int arg12 = (int) -1 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "xdest",(char *) "ydest",(char *) "width",(char *) "height",(char *) "source",(char *) "xsrc",(char *) "ysrc",(char *) "rop",(char *) "useMask",(char *) "xsrcMask",(char *) "ysrcMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO|OOOO:DC_BlitXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg7 = (int) SWIG_PyObj_AsInt(obj6);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg8 = (int) SWIG_PyObj_AsInt(obj7);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj8) {
        {
            arg9 = (int) SWIG_PyObj_AsInt(obj8);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj9) {
        {
            arg10 = (bool) SWIG_PyObj_AsBool(obj9);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj10) {
        {
            arg11 = (int) SWIG_PyObj_AsInt(obj10);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj11) {
        {
            arg12 = (int) SWIG_PyObj_AsInt(obj11);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Blit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_Blit(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxDC *arg4 = (wxDC *) 0 ;
    wxPoint *arg5 = 0 ;
    int arg6 = (int) wxCOPY ;
    bool arg7 = (bool) False ;
    wxPoint const &arg8_defvalue = wxDefaultPosition ;
    wxPoint *arg8 = (wxPoint *) &arg8_defvalue ;
    bool result;
    wxPoint temp2 ;
    wxSize temp3 ;
    wxPoint temp5 ;
    wxPoint temp8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "destPt",(char *) "sz",(char *) "source",(char *) "srcPt",(char *) "rop",(char *) "useMask",(char *) "srcPtMask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|OOO:DC_Blit",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg5 = &temp5;
        if ( ! wxPoint_helper(obj4, &arg5)) SWIG_fail;
    }
    if (obj5) {
        {
            arg6 = (int) SWIG_PyObj_AsInt(obj5);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = (bool) SWIG_PyObj_AsBool(obj6);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj7) {
        {
            arg8 = &temp8;
            if ( ! wxPoint_helper(obj7, &arg8)) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Blit((wxPoint const &)*arg2,(wxSize const &)*arg3,arg4,(wxPoint const &)*arg5,arg6,arg7,(wxPoint const &)*arg8);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DrawLines(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    wxPoint *arg3 = (wxPoint *) 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "points",(char *) "xoffset",(char *) "yoffset", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:DC_DrawLines",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg3 = wxPoint_LIST_helper(obj1, &arg2);
        if (arg3 == NULL) SWIG_fail;
    }
    if (obj2) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg5 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLines(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawPolygon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    wxPoint *arg3 = (wxPoint *) 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) 0 ;
    int arg6 = (int) wxODDEVEN_RULE ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "points",(char *) "xoffset",(char *) "yoffset",(char *) "fillStyle", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:DC_DrawPolygon",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg3 = wxPoint_LIST_helper(obj1, &arg2);
        if (arg3 == NULL) SWIG_fail;
    }
    if (obj2) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg5 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg6 = (int) SWIG_PyObj_AsInt(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawPolygon(arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawLabel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxRect *arg3 = 0 ;
    int arg4 = (int) wxALIGN_LEFT|wxALIGN_TOP ;
    int arg5 = (int) -1 ;
    bool temp2 = False ;
    wxRect temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "rect",(char *) "alignment",(char *) "indexAccel", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:DC_DrawLabel",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = &temp3;
        if ( ! wxRect_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = (int) SWIG_PyObj_AsInt(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawLabel((wxString const &)*arg2,(wxRect const &)*arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawImageLabel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    wxBitmap *arg3 = 0 ;
    wxRect *arg4 = 0 ;
    int arg5 = (int) wxALIGN_LEFT|wxALIGN_TOP ;
    int arg6 = (int) -1 ;
    wxRect result;
    bool temp2 = False ;
    wxRect temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "image",(char *) "rect",(char *) "alignment",(char *) "indexAccel", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OO:DC_DrawImageLabel",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg4 = &temp4;
        if ( ! wxRect_helper(obj3, &arg4)) SWIG_fail;
    }
    if (obj4) {
        {
            arg5 = (int) SWIG_PyObj_AsInt(obj4);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = (int) SWIG_PyObj_AsInt(obj5);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_DrawImageLabel(arg1,(wxString const &)*arg2,(wxBitmap const &)*arg3,(wxRect const &)*arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxRect, 1);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_DrawSpline(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    wxPoint *arg3 = (wxPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "points", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DrawSpline",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg3 = wxPoint_LIST_helper(obj1, &arg2);
        if (arg3 == NULL) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawSpline(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) delete [] arg3;
    }
    return resultobj;
    fail:
    {
        if (arg3) delete [] arg3;
    }
    return NULL;
}


static PyObject *_wrap_DC_Clear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_Clear",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Clear();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_StartDoc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "message", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_StartDoc",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->StartDoc((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_EndDoc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_EndDoc",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->EndDoc();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_StartPage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_StartPage",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->StartPage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_EndPage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_EndPage",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->EndPage();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxFont *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetFont",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFont((wxFont const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetPen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPen *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pen", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetPen",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPen((wxPen const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetBrush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetBrush",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetBrush((wxBrush const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetBackground(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetBackground",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetBackground((wxBrush const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetBackgroundMode(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetBackgroundMode",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetBackgroundMode(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetPalette(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPalette *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "palette", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetPalette",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPalette((wxPalette const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRegionXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y",(char *) "width",(char *) "height", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC_SetClippingRegionXY",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRegion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxPoint temp2 ;
    wxSize temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pt",(char *) "sz", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetClippingRegion",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxPoint_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxSize_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion((wxPoint const &)*arg2,(wxSize const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect *arg2 = 0 ;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetClippingRect",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion((wxRect const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetClippingRegionAsRegion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRegion *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "region", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetClippingRegionAsRegion",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxRegion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetClippingRegion((wxRegion const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DestroyClippingRegion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_DestroyClippingRegion",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DestroyClippingRegion();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetClippingBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int temp2 ;
    int temp3 ;
    int temp4 ;
    int temp5 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetClippingBox",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetClippingBox(arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg4));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg5));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetClippingRect(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxRect result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetClippingRect",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxDC_GetClippingRect(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetCharHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetCharHeight",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetCharHeight();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetCharWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetCharWidth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetCharWidth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetTextExtent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    bool temp2 = False ;
    int temp3 ;
    int temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "string", NULL 
    };
    
    arg3 = &temp3;
    arg4 = &temp4;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_GetTextExtent",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg4));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_GetFullTextExtent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int *arg6 = (int *) 0 ;
    wxFont *arg7 = (wxFont *) NULL ;
    bool temp2 = False ;
    int temp3 ;
    int temp4 ;
    int temp5 ;
    int temp6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "string",(char *) "font", NULL 
    };
    
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    arg6 = &temp6;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DC_GetFullTextExtent",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg7, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg4));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg5));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg6));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_GetMultiLineTextExtent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxString *arg2 = 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    wxFont *arg6 = (wxFont *) NULL ;
    bool temp2 = False ;
    int temp3 ;
    int temp4 ;
    int temp5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "text",(char *) "font", NULL 
    };
    
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:DC_GetMultiLineTextExtent",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg6, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetMultiLineTextExtent((wxString const &)*arg2,arg3,arg4,arg5,arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg4));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg5));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_DC_GetSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSize",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetSize();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetSizeTuple(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int temp3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSizeTuple",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetSize(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetSizeMM(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSizeMM",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetSizeMM();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetSizeMMTuple(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int temp3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetSizeMMTuple",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetSizeMM(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalX(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalX",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalX(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalY",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalY(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalXRel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalXRel",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalXRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_DeviceToLogicalYRel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_DeviceToLogicalYRel",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->DeviceToLogicalYRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceX(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceX",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceX(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceY",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceY(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceXRel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceXRel",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceXRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_LogicalToDeviceYRel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_LogicalToDeviceYRel",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->LogicalToDeviceYRel(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CanDrawBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_CanDrawBitmap",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDC const *)arg1)->CanDrawBitmap();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CanGetTextExtent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_CanGetTextExtent",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDC const *)arg1)->CanGetTextExtent();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetDepth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetDepth",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetDepth();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPPI(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetPPI",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetPPI();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_Ok(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_Ok",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxDC const *)arg1)->Ok();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBackgroundMode(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBackgroundMode",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetBackgroundMode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBackground(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBackground",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxBrush const &_result_ref = ((wxDC const *)arg1)->GetBackground();
            result = (wxBrush *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBrush, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBrush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBrush *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBrush",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxBrush const &_result_ref = ((wxDC const *)arg1)->GetBrush();
            result = (wxBrush *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBrush, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxFont *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetFont",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFont const &_result_ref = ((wxDC const *)arg1)->GetFont();
            result = (wxFont *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFont, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetPen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPen *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetPen",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPen const &_result_ref = ((wxDC const *)arg1)->GetPen();
            result = (wxPen *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPen, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetTextBackground(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetTextBackground",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxColour const &_result_ref = ((wxDC const *)arg1)->GetTextBackground();
            result = (wxColour *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxColour, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetTextForeground(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetTextForeground",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxColour const &_result_ref = ((wxDC const *)arg1)->GetTextForeground();
            result = (wxColour *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxColour, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetTextForeground(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetTextForeground",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetTextForeground((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetTextBackground(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetTextBackground",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetTextBackground((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetMapMode(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetMapMode",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetMapMode();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetMapMode(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "mode", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetMapMode",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMapMode(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetUserScale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetUserScale",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetUserScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyFloat_FromDouble((double) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyFloat_FromDouble((double) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetUserScale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetUserScale",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (double) SWIG_PyObj_AsDouble(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (double) SWIG_PyObj_AsDouble(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetUserScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalScale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalScale",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetLogicalScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyFloat_FromDouble((double) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyFloat_FromDouble((double) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetLogicalScale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetLogicalScale",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (double) SWIG_PyObj_AsDouble(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (double) SWIG_PyObj_AsDouble(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLogicalScale(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalOrigin(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalOrigin",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetLogicalOrigin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalOriginTuple(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int temp3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalOriginTuple",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetLogicalOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetLogicalOrigin(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetLogicalOrigin",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLogicalOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetDeviceOrigin(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxPoint result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetDeviceOrigin",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxDC const *)arg1)->GetDeviceOrigin();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetDeviceOriginTuple(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int temp3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetDeviceOriginTuple",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        ((wxDC const *)arg1)->GetDeviceOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetDeviceOrigin(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetDeviceOrigin",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDeviceOrigin(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetAxisOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "xLeftRight",(char *) "yBottomUp", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_SetAxisOrientation",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (bool) SWIG_PyObj_AsBool(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (bool) SWIG_PyObj_AsBool(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetAxisOrientation(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetLogicalFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetLogicalFunction",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->GetLogicalFunction();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetLogicalFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "function", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetLogicalFunction",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLogicalFunction(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_SetOptimization(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "opt", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DC_SetOptimization",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (bool) SWIG_PyObj_AsBool(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetOptimization(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetOptimization(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetOptimization",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->GetOptimization();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_CalcBoundingBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "x",(char *) "y", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DC_CalcBoundingBox",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->CalcBoundingBox(arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_ResetBoundingBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_ResetBoundingBox",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->ResetBoundingBox();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MinX(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MinX",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MinX();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MaxX(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MaxX",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MaxX();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MinY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MinY",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MinY();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_MaxY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_MaxY",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxDC const *)arg1)->MaxY();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC_GetBoundingBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int temp2 ;
    int temp3 ;
    int temp4 ;
    int temp5 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    arg2 = &temp2;
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:DC_GetBoundingBox",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxDC_GetBoundingBox(arg1,arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg2));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg4));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg5));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawPointList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawPointList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawPointList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawLineList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawLineList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawLineList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawRectangleList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawRectangleList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawRectangleList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawEllipseList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawEllipseList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawEllipseList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawPolygonList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyCoords",(char *) "pyPens",(char *) "pyBrushes", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:DC__DrawPolygonList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawPolygonList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DC__DrawTextList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *arg5 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "textList",(char *) "pyPoints",(char *) "foregroundList",(char *) "backgroundList", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:DC__DrawTextList",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    arg3 = obj2;
    arg4 = obj3;
    arg5 = obj4;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)wxDC__DrawTextList(arg1,arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MemoryDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxMemoryDC *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_MemoryDC",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMemoryDC *)new wxMemoryDC();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMemoryDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MemoryDCFromDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxMemoryDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "oldDC", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_MemoryDCFromDC",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMemoryDC *)new wxMemoryDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMemoryDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MemoryDC_SelectObject(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxMemoryDC *arg1 = (wxMemoryDC *) 0 ;
    wxBitmap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MemoryDC_SelectObject",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxMemoryDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SelectObject((wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MemoryDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMemoryDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BufferedDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxBufferedDC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "dc",(char *) "buffer", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_BufferedDC",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBufferedDC *)new wxBufferedDC(arg1,(wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBufferedDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BufferedDCInternalBuffer(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = (wxDC *) 0 ;
    wxSize *arg2 = 0 ;
    wxBufferedDC *result;
    wxSize temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "dc",(char *) "area", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_BufferedDCInternalBuffer",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxSize_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBufferedDC *)new wxBufferedDC(arg1,(wxSize const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBufferedDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BufferedDC_UnMask(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBufferedDC *arg1 = (wxBufferedDC *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:BufferedDC_UnMask",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBufferedDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->UnMask();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BufferedDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBufferedDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BufferedPaintDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxBitmap const &arg2_defvalue = wxNullBitmap ;
    wxBitmap *arg2 = (wxBitmap *) &arg2_defvalue ;
    wxBufferedPaintDC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "window",(char *) "buffer", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_BufferedPaintDC",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        if (arg2 == NULL) {
            PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBufferedPaintDC *)new wxBufferedPaintDC(arg1,(wxBitmap const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBufferedPaintDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BufferedPaintDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBufferedPaintDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ScreenDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ScreenDC",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxScreenDC *)new wxScreenDC();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxScreenDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenDC_StartDrawingOnTopWin(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *arg1 = (wxScreenDC *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "window", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ScreenDC_StartDrawingOnTopWin",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxScreenDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->StartDrawingOnTop(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenDC_StartDrawingOnTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *arg1 = (wxScreenDC *) 0 ;
    wxRect *arg2 = (wxRect *) NULL ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ScreenDC_StartDrawingOnTop",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxScreenDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxRect,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->StartDrawingOnTop(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenDC_EndDrawingOnTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxScreenDC *arg1 = (wxScreenDC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ScreenDC_EndDrawingOnTop",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxScreenDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->EndDrawingOnTop();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ScreenDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxScreenDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ClientDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxClientDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_ClientDC",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxClientDC *)new wxClientDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxClientDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ClientDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxClientDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PaintDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPaintDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_PaintDC",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPaintDC *)new wxPaintDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPaintDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PaintDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPaintDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_WindowDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindowDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "win", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_WindowDC",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxWindowDC *)new wxWindowDC(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindowDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * WindowDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxWindowDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MirrorDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxDC *arg1 = 0 ;
    bool arg2 ;
    wxMirrorDC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "dc",(char *) "mirror", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:new_MirrorDC",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg2 = (bool) SWIG_PyObj_AsBool(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMirrorDC *)new wxMirrorDC(*arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMirrorDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MirrorDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMirrorDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PostScriptDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPrintData *arg1 = 0 ;
    wxPostScriptDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "printData", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_PostScriptDC",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPrintData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPostScriptDC *)new wxPostScriptDC((wxPrintData const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPostScriptDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_GetPrintData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPostScriptDC *arg1 = (wxPostScriptDC *) 0 ;
    wxPrintData *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PostScriptDC_GetPrintData",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPostScriptDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPrintData &_result_ref = (arg1)->GetPrintData();
            result = (wxPrintData *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPrintData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_SetPrintData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPostScriptDC *arg1 = (wxPostScriptDC *) 0 ;
    wxPrintData *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PostScriptDC_SetPrintData",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPostScriptDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxPrintData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetPrintData((wxPrintData const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_SetResolution(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "ppi", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PostScriptDC_SetResolution",kwnames,&obj0)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxPostScriptDC::SetResolution(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostScriptDC_GetResolution(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":PostScriptDC_GetResolution",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxPostScriptDC::GetResolution();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PostScriptDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPostScriptDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MetaFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    wxMetaFile *result;
    bool temp1 = False ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "filename", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_MetaFile",kwnames,&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = True;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMetaFile *)new wxMetaFile((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMetaFile, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject * MetaFile_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMetaFile, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MetaFileDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxString const &arg1_defvalue = wxPyEmptyString ;
    wxString *arg1 = (wxString *) &arg1_defvalue ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    wxString const &arg4_defvalue = wxPyEmptyString ;
    wxString *arg4 = (wxString *) &arg4_defvalue ;
    wxMetaFileDC *result;
    bool temp1 = False ;
    bool temp4 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "filename",(char *) "width",(char *) "height",(char *) "description", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:new_MetaFileDC",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (obj0) {
        {
            arg1 = wxString_in_helper(obj0);
            if (arg1 == NULL) SWIG_fail;
            temp1 = True;
        }
    }
    if (obj1) {
        {
            arg2 = (int) SWIG_PyObj_AsInt(obj1);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = wxString_in_helper(obj3);
            if (arg4 == NULL) SWIG_fail;
            temp4 = True;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxMetaFileDC *)new wxMetaFileDC((wxString const &)*arg1,arg2,arg3,(wxString const &)*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxMetaFileDC, 1);
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp4)
        delete arg4;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    {
        if (temp4)
        delete arg4;
    }
    return NULL;
}


static PyObject * MetaFileDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxMetaFileDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PrinterDC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPrintData *arg1 = 0 ;
    wxPrinterDC *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "printData", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_PrinterDC",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPrintData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPrinterDC *)new wxPrinterDC((wxPrintData const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPrinterDC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PrinterDC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPrinterDC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ImageList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 = (int) True ;
    int arg4 = (int) 1 ;
    wxImageList *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "width",(char *) "height",(char *) "mask",(char *) "initialCount", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_ImageList",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int) SWIG_PyObj_AsInt(obj0);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = (int) SWIG_PyObj_AsInt(obj2);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxImageList *)new wxImageList(arg1,arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = wxPyMake_wxObject(result); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ImageList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ImageList",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Add(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxBitmap const &arg3_defvalue = wxNullBitmap ;
    wxBitmap *arg3 = (wxBitmap *) &arg3_defvalue ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bitmap",(char *) "mask", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ImageList_Add",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        if (arg3 == NULL) {
            PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Add((wxBitmap const &)*arg2,(wxBitmap const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_AddWithColourMask(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    wxBitmap *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    int result;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "bitmap",(char *) "maskColour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ImageList_AddWithColourMask",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Add((wxBitmap const &)*arg2,(wxColour const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_AddIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    wxIcon *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "icon", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_AddIcon",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxIcon,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->Add((wxIcon const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Replace(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    wxBitmap *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index",(char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ImageList_Replace",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Replace(arg2,(wxBitmap const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Draw(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    wxDC *arg3 = 0 ;
    int arg4 ;
    int arg5 ;
    int arg6 = (int) wxIMAGELIST_DRAW_NORMAL ;
    bool arg7 = (bool) (bool)False ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index",(char *) "dc",(char *) "x",(char *) "x",(char *) "flags",(char *) "solidBackground", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|OO:ImageList_Draw",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj5) {
        {
            arg6 = (int) SWIG_PyObj_AsInt(obj5);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = (bool const) SWIG_PyObj_AsBool(obj6);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Draw(arg2,*arg3,arg4,arg5,arg6,arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_GetImageCount(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ImageList_GetImageCount",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetImageCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_Remove(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_Remove",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->Remove(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_RemoveAll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ImageList_RemoveAll",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->RemoveAll();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageList_GetSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxImageList *arg1 = (wxImageList *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    int *arg4 = 0 ;
    int temp3 ;
    int temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "index", NULL 
    };
    
    arg3 = &temp3;
    arg4 = &temp4;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ImageList_GetSize",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxImageList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->GetSize(arg2,*arg3,*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *o = PyInt_FromLong((long) (*arg3));
        resultobj = t_output_helper(resultobj,o);
    }
    {
        PyObject *o = PyInt_FromLong((long) (*arg4));
        resultobj = t_output_helper(resultobj,o);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ImageList_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxImageList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_NORMAL_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NORMAL_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_NORMAL_FONT_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxNORMAL_FONT, SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_SMALL_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SMALL_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_SMALL_FONT_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxSMALL_FONT, SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_ITALIC_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ITALIC_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_ITALIC_FONT_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxITALIC_FONT, SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_SWISS_FONT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SWISS_FONT is read-only.");
    return 1;
}


static PyObject *_wrap_SWISS_FONT_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxSWISS_FONT, SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_RED_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RED_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_RED_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxRED_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_CYAN_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CYAN_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_CYAN_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxCYAN_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_GREEN_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREEN_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_GREEN_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxGREEN_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_BLACK_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxBLACK_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_WHITE_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable WHITE_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_WHITE_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxWHITE_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_TRANSPARENT_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TRANSPARENT_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_TRANSPARENT_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxTRANSPARENT_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_BLACK_DASHED_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK_DASHED_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_DASHED_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxBLACK_DASHED_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_GREY_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREY_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_GREY_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxGREY_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_MEDIUM_GREY_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable MEDIUM_GREY_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_MEDIUM_GREY_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxMEDIUM_GREY_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_LIGHT_GREY_PEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable LIGHT_GREY_PEN is read-only.");
    return 1;
}


static PyObject *_wrap_LIGHT_GREY_PEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxLIGHT_GREY_PEN, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_BLUE_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLUE_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_BLUE_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxBLUE_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_GREEN_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREEN_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_GREEN_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxGREEN_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_WHITE_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable WHITE_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_WHITE_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxWHITE_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_BLACK_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxBLACK_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_TRANSPARENT_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TRANSPARENT_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_TRANSPARENT_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxTRANSPARENT_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_CYAN_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CYAN_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_CYAN_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxCYAN_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_RED_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RED_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_RED_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxRED_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_GREY_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREY_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_GREY_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxGREY_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_MEDIUM_GREY_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable MEDIUM_GREY_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_MEDIUM_GREY_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxMEDIUM_GREY_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_LIGHT_GREY_BRUSH_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable LIGHT_GREY_BRUSH is read-only.");
    return 1;
}


static PyObject *_wrap_LIGHT_GREY_BRUSH_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxLIGHT_GREY_BRUSH, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_BLACK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLACK is read-only.");
    return 1;
}


static PyObject *_wrap_BLACK_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxBLACK, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_WHITE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable WHITE is read-only.");
    return 1;
}


static PyObject *_wrap_WHITE_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxWHITE, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_RED_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RED is read-only.");
    return 1;
}


static PyObject *_wrap_RED_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxRED, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_BLUE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable BLUE is read-only.");
    return 1;
}


static PyObject *_wrap_BLUE_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxBLUE, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_GREEN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GREEN is read-only.");
    return 1;
}


static PyObject *_wrap_GREEN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxGREEN, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_CYAN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CYAN is read-only.");
    return 1;
}


static PyObject *_wrap_CYAN_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxCYAN, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_LIGHT_GREY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable LIGHT_GREY is read-only.");
    return 1;
}


static PyObject *_wrap_LIGHT_GREY_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxLIGHT_GREY, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static int _wrap_STANDARD_CURSOR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable STANDARD_CURSOR is read-only.");
    return 1;
}


static PyObject *_wrap_STANDARD_CURSOR_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxSTANDARD_CURSOR, SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_HOURGLASS_CURSOR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable HOURGLASS_CURSOR is read-only.");
    return 1;
}


static PyObject *_wrap_HOURGLASS_CURSOR_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxHOURGLASS_CURSOR, SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_CROSS_CURSOR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable CROSS_CURSOR is read-only.");
    return 1;
}


static PyObject *_wrap_CROSS_CURSOR_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxCROSS_CURSOR, SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_NullBitmap_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullBitmap is read-only.");
    return 1;
}


static PyObject *_wrap_NullBitmap_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullBitmap, SWIGTYPE_p_wxBitmap, 0);
    return pyobj;
}


static int _wrap_NullIcon_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullIcon is read-only.");
    return 1;
}


static PyObject *_wrap_NullIcon_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullIcon, SWIGTYPE_p_wxIcon, 0);
    return pyobj;
}


static int _wrap_NullCursor_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullCursor is read-only.");
    return 1;
}


static PyObject *_wrap_NullCursor_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullCursor, SWIGTYPE_p_wxCursor, 0);
    return pyobj;
}


static int _wrap_NullPen_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullPen is read-only.");
    return 1;
}


static PyObject *_wrap_NullPen_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullPen, SWIGTYPE_p_wxPen, 0);
    return pyobj;
}


static int _wrap_NullBrush_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullBrush is read-only.");
    return 1;
}


static PyObject *_wrap_NullBrush_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullBrush, SWIGTYPE_p_wxBrush, 0);
    return pyobj;
}


static int _wrap_NullPalette_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullPalette is read-only.");
    return 1;
}


static PyObject *_wrap_NullPalette_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullPalette, SWIGTYPE_p_wxPalette, 0);
    return pyobj;
}


static int _wrap_NullFont_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullFont is read-only.");
    return 1;
}


static PyObject *_wrap_NullFont_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullFont, SWIGTYPE_p_wxFont, 0);
    return pyobj;
}


static int _wrap_NullColour_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable NullColour is read-only.");
    return 1;
}


static PyObject *_wrap_NullColour_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &wxNullColour, SWIGTYPE_p_wxColour, 0);
    return pyobj;
}


static PyObject *_wrap_PenList_AddPen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    wxPen *arg2 = (wxPen *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pen", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PenList_AddPen",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPenList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddPen(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PenList_FindOrCreatePen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    wxColour *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    wxPen *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour",(char *) "width",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:PenList_FindOrCreatePen",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPenList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxPen *)(arg1)->FindOrCreatePen((wxColour const &)*arg2,arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPen, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PenList_RemovePen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    wxPen *arg2 = (wxPen *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pen", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PenList_RemovePen",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPenList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxPen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemovePen(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PenList_GetCount(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxPenList *arg1 = (wxPenList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PenList_GetCount",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxPenList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PenList_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPenList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_BrushList_AddBrush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    wxBrush *arg2 = (wxBrush *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BrushList_AddBrush",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrushList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddBrush(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BrushList_FindOrCreateBrush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    wxColour *arg2 = 0 ;
    int arg3 ;
    wxBrush *result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour",(char *) "style", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:BrushList_FindOrCreateBrush",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrushList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxBrush *)(arg1)->FindOrCreateBrush((wxColour const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxBrush, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BrushList_RemoveBrush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    wxBrush *arg2 = (wxBrush *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "brush", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BrushList_RemoveBrush",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrushList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxBrush,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemoveBrush(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BrushList_GetCount(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxBrushList *arg1 = (wxBrushList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:BrushList_GetCount",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxBrushList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BrushList_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxBrushList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ColourDatabase(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ColourDatabase",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxColourDatabase *)new wxColourDatabase();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxColourDatabase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ColourDatabase(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ColourDatabase",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColourDatabase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete arg1;
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ColourDatabase_Find(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxString *arg2 = 0 ;
    wxColour result;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ColourDatabase_Find",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColourDatabase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxColourDatabase const *)arg1)->Find((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ColourDatabase_FindName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxColour *arg2 = 0 ;
    wxString result;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ColourDatabase_FindName",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColourDatabase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxColourDatabase const *)arg1)->FindName((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ColourDatabase_AddColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxString *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    bool temp2 = False ;
    wxColour temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "colour", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ColourDatabase_AddColour",kwnames,&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColourDatabase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddColour((wxString const &)*arg2,(wxColour const &)*arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ColourDatabase_Append(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxColourDatabase *arg1 = (wxColourDatabase *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool temp2 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "red",(char *) "green",(char *) "blue", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:ColourDatabase_Append",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxColourDatabase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = True;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxColourDatabase_Append(arg1,(wxString const &)*arg2,arg3,arg4,arg5);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * ColourDatabase_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxColourDatabase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_FontList_AddFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    wxFont *arg2 = (wxFont *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontList_AddFont",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->AddFont(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontList_FindOrCreateFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool arg6 = (bool) False ;
    wxString const &arg7_defvalue = wxPyEmptyString ;
    wxString *arg7 = (wxString *) &arg7_defvalue ;
    int arg8 = (int) wxFONTENCODING_DEFAULT ;
    wxFont *result;
    bool temp7 = False ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "point_size",(char *) "family",(char *) "style",(char *) "weight",(char *) "underline",(char *) "facename",(char *) "encoding", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|OOO:FontList_FindOrCreateFont",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (int) SWIG_PyObj_AsInt(obj1);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int) SWIG_PyObj_AsInt(obj2);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg4 = (int) SWIG_PyObj_AsInt(obj3);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg5 = (int) SWIG_PyObj_AsInt(obj4);  
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj5) {
        {
            arg6 = (bool) SWIG_PyObj_AsBool(obj5);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = wxString_in_helper(obj6);
            if (arg7 == NULL) SWIG_fail;
            temp7 = True;
        }
    }
    if (obj7) {
        {
            arg8 = (wxFontEncoding) SWIG_PyObj_AsInt(obj7);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxFont *)(arg1)->FindOrCreateFont(arg2,arg3,arg4,arg5,arg6,(wxString const &)*arg7,(wxFontEncoding )arg8);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxFont, 0);
    {
        if (temp7)
        delete arg7;
    }
    return resultobj;
    fail:
    {
        if (temp7)
        delete arg7;
    }
    return NULL;
}


static PyObject *_wrap_FontList_RemoveFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    wxFont *arg2 = (wxFont *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FontList_RemoveFont",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxFont,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->RemoveFont(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontList_GetCount(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxFontList *arg1 = (wxFontList *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FontList_GetCount",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxFontList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)(arg1)->GetCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_PyObj_FromInt((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FontList_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFontList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_TheFontList_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TheFontList is read-only.");
    return 1;
}


static PyObject *_wrap_TheFontList_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxTheFontList, SWIGTYPE_p_wxFontList, 0);
    return pyobj;
}


static int _wrap_ThePenList_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ThePenList is read-only.");
    return 1;
}


static PyObject *_wrap_ThePenList_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxThePenList, SWIGTYPE_p_wxPenList, 0);
    return pyobj;
}


static int _wrap_TheBrushList_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TheBrushList is read-only.");
    return 1;
}


static PyObject *_wrap_TheBrushList_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxTheBrushList, SWIGTYPE_p_wxBrushList, 0);
    return pyobj;
}


static int _wrap_TheColourDatabase_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TheColourDatabase is read-only.");
    return 1;
}


static PyObject *_wrap_TheColourDatabase_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) wxTheColourDatabase, SWIGTYPE_p_wxColourDatabase, 0);
    return pyobj;
}


static PyObject *_wrap_new_Effects(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_Effects",kwnames)) goto fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxEffects *)new wxEffects();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxEffects, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetHighlightColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetHighlightColour",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetHighlightColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetLightShadow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetLightShadow",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetLightShadow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetFaceColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetFaceColour",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetFaceColour();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetMediumShadow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetMediumShadow",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetMediumShadow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_GetDarkShadow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Effects_GetDarkShadow",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = ((wxEffects const *)arg1)->GetDarkShadow();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetHighlightColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetHighlightColour",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetHighlightColour((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetLightShadow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetLightShadow",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetLightShadow((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetFaceColour(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetFaceColour",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetFaceColour((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetMediumShadow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetMediumShadow",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetMediumShadow((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_SetDarkShadow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "c", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Effects_SetDarkShadow",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetDarkShadow((wxColour const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_Set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxColour *arg2 = 0 ;
    wxColour *arg3 = 0 ;
    wxColour *arg4 = 0 ;
    wxColour *arg5 = 0 ;
    wxColour *arg6 = 0 ;
    wxColour temp2 ;
    wxColour temp3 ;
    wxColour temp4 ;
    wxColour temp5 ;
    wxColour temp6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "highlightColour",(char *) "lightShadow",(char *) "faceColour",(char *) "mediumShadow",(char *) "darkShadow", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:Effects_Set",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxColour_helper(obj1, &arg2)) SWIG_fail;
    }
    {
        arg3 = &temp3;
        if ( ! wxColour_helper(obj2, &arg3)) SWIG_fail;
    }
    {
        arg4 = &temp4;
        if ( ! wxColour_helper(obj3, &arg4)) SWIG_fail;
    }
    {
        arg5 = &temp5;
        if ( ! wxColour_helper(obj4, &arg5)) SWIG_fail;
    }
    {
        arg6 = &temp6;
        if ( ! wxColour_helper(obj5, &arg6)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->Set((wxColour const &)*arg2,(wxColour const &)*arg3,(wxColour const &)*arg4,(wxColour const &)*arg5,(wxColour const &)*arg6);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_DrawSunkenEdge(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxDC *arg2 = 0 ;
    wxRect *arg3 = 0 ;
    int arg4 = (int) 1 ;
    wxRect temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "dc",(char *) "rect",(char *) "borderSize", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Effects_DrawSunkenEdge",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        arg3 = &temp3;
        if ( ! wxRect_helper(obj2, &arg3)) SWIG_fail;
    }
    if (obj3) {
        {
            arg4 = (int) SWIG_PyObj_AsInt(obj3);  
            if (PyErr_Occurred()) SWIG_fail;
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->DrawSunkenEdge(*arg2,(wxRect const &)*arg3,arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Effects_TileBitmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    wxEffects *arg1 = (wxEffects *) 0 ;
    wxRect *arg2 = 0 ;
    wxDC *arg3 = 0 ;
    wxBitmap *arg4 = 0 ;
    bool result;
    wxRect temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "rect",(char *) "dc",(char *) "bitmap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Effects_TileBitmap",kwnames,&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxEffects,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = &temp2;
        if ( ! wxRect_helper(obj1, &arg2)) SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxDC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_wxBitmap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->TileBitmap((wxRect const &)*arg2,*arg3,*arg4);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Effects_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxEffects, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_GDIObject", (PyCFunction) _wrap_new_GDIObject, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_GDIObject", (PyCFunction) _wrap_delete_GDIObject, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"GDIObject_GetVisible", (PyCFunction) _wrap_GDIObject_GetVisible, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"GDIObject_SetVisible", (PyCFunction) _wrap_GDIObject_SetVisible, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"GDIObject_IsNull", (PyCFunction) _wrap_GDIObject_IsNull, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"GDIObject_swigregister", GDIObject_swigregister, METH_VARARGS },
	 { (char *)"new_Colour", (PyCFunction) _wrap_new_Colour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Colour", (PyCFunction) _wrap_delete_Colour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_NamedColour", (PyCFunction) _wrap_new_NamedColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_ColourRGB", (PyCFunction) _wrap_new_ColourRGB, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_Red", (PyCFunction) _wrap_Colour_Red, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_Green", (PyCFunction) _wrap_Colour_Green, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_Blue", (PyCFunction) _wrap_Colour_Blue, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_Ok", (PyCFunction) _wrap_Colour_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_Set", (PyCFunction) _wrap_Colour_Set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_SetRGB", (PyCFunction) _wrap_Colour_SetRGB, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour___eq__", (PyCFunction) _wrap_Colour___eq__, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour___ne__", (PyCFunction) _wrap_Colour___ne__, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_InitFromName", (PyCFunction) _wrap_Colour_InitFromName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_Get", (PyCFunction) _wrap_Colour_Get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Colour_swigregister", Colour_swigregister, METH_VARARGS },
	 { (char *)"new_Palette", (PyCFunction) _wrap_new_Palette, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Palette", (PyCFunction) _wrap_delete_Palette, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Palette_GetPixel", (PyCFunction) _wrap_Palette_GetPixel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Palette_GetRGB", (PyCFunction) _wrap_Palette_GetRGB, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Palette_Ok", (PyCFunction) _wrap_Palette_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Palette_swigregister", Palette_swigregister, METH_VARARGS },
	 { (char *)"new_Pen", (PyCFunction) _wrap_new_Pen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Pen", (PyCFunction) _wrap_delete_Pen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_GetCap", (PyCFunction) _wrap_Pen_GetCap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_GetColour", (PyCFunction) _wrap_Pen_GetColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_GetJoin", (PyCFunction) _wrap_Pen_GetJoin, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_GetStyle", (PyCFunction) _wrap_Pen_GetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_GetWidth", (PyCFunction) _wrap_Pen_GetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_Ok", (PyCFunction) _wrap_Pen_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_SetCap", (PyCFunction) _wrap_Pen_SetCap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_SetColour", (PyCFunction) _wrap_Pen_SetColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_SetJoin", (PyCFunction) _wrap_Pen_SetJoin, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_SetStyle", (PyCFunction) _wrap_Pen_SetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_SetWidth", (PyCFunction) _wrap_Pen_SetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_SetDashes", (PyCFunction) _wrap_Pen_SetDashes, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_GetDashes", (PyCFunction) _wrap_Pen_GetDashes, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Pen_swigregister", Pen_swigregister, METH_VARARGS },
	 { (char *)"new_PyPen", (PyCFunction) _wrap_new_PyPen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_PyPen", (PyCFunction) _wrap_delete_PyPen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PyPen_SetDashes", (PyCFunction) _wrap_PyPen_SetDashes, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PyPen_swigregister", PyPen_swigregister, METH_VARARGS },
	 { (char *)"new_Brush", (PyCFunction) _wrap_new_Brush, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Brush", (PyCFunction) _wrap_delete_Brush, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_SetColour", (PyCFunction) _wrap_Brush_SetColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_SetStyle", (PyCFunction) _wrap_Brush_SetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_SetStipple", (PyCFunction) _wrap_Brush_SetStipple, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_GetColour", (PyCFunction) _wrap_Brush_GetColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_GetStyle", (PyCFunction) _wrap_Brush_GetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_GetStipple", (PyCFunction) _wrap_Brush_GetStipple, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_Ok", (PyCFunction) _wrap_Brush_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_GetMacTheme", (PyCFunction) _wrap_Brush_GetMacTheme, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_SetMacTheme", (PyCFunction) _wrap_Brush_SetMacTheme, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Brush_swigregister", Brush_swigregister, METH_VARARGS },
	 { (char *)"new_Bitmap", (PyCFunction) _wrap_new_Bitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Bitmap", (PyCFunction) _wrap_delete_Bitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_EmptyBitmap", (PyCFunction) _wrap_new_EmptyBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_BitmapFromIcon", (PyCFunction) _wrap_new_BitmapFromIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_BitmapFromImage", (PyCFunction) _wrap_new_BitmapFromImage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_BitmapFromXPMData", (PyCFunction) _wrap_new_BitmapFromXPMData, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_BitmapFromBits", (PyCFunction) _wrap_new_BitmapFromBits, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_Ok", (PyCFunction) _wrap_Bitmap_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_GetWidth", (PyCFunction) _wrap_Bitmap_GetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_GetHeight", (PyCFunction) _wrap_Bitmap_GetHeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_GetDepth", (PyCFunction) _wrap_Bitmap_GetDepth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_ConvertToImage", (PyCFunction) _wrap_Bitmap_ConvertToImage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_GetMask", (PyCFunction) _wrap_Bitmap_GetMask, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_SetMask", (PyCFunction) _wrap_Bitmap_SetMask, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_SetMaskColour", (PyCFunction) _wrap_Bitmap_SetMaskColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_GetSubBitmap", (PyCFunction) _wrap_Bitmap_GetSubBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_SaveFile", (PyCFunction) _wrap_Bitmap_SaveFile, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_LoadFile", (PyCFunction) _wrap_Bitmap_LoadFile, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_CopyFromIcon", (PyCFunction) _wrap_Bitmap_CopyFromIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_SetHeight", (PyCFunction) _wrap_Bitmap_SetHeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_SetWidth", (PyCFunction) _wrap_Bitmap_SetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_SetDepth", (PyCFunction) _wrap_Bitmap_SetDepth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Bitmap_swigregister", Bitmap_swigregister, METH_VARARGS },
	 { (char *)"new_Mask", (PyCFunction) _wrap_new_Mask, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_MaskColour", (PyCFunction) _wrap_new_MaskColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Mask_swigregister", Mask_swigregister, METH_VARARGS },
	 { (char *)"new_Icon", (PyCFunction) _wrap_new_Icon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Icon", (PyCFunction) _wrap_delete_Icon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_EmptyIcon", (PyCFunction) _wrap_new_EmptyIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_IconFromLocation", (PyCFunction) _wrap_new_IconFromLocation, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_IconFromBitmap", (PyCFunction) _wrap_new_IconFromBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_IconFromXPMData", (PyCFunction) _wrap_new_IconFromXPMData, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_Ok", (PyCFunction) _wrap_Icon_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_GetWidth", (PyCFunction) _wrap_Icon_GetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_GetHeight", (PyCFunction) _wrap_Icon_GetHeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_GetDepth", (PyCFunction) _wrap_Icon_GetDepth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_SetWidth", (PyCFunction) _wrap_Icon_SetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_SetHeight", (PyCFunction) _wrap_Icon_SetHeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_SetDepth", (PyCFunction) _wrap_Icon_SetDepth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_CopyFromBitmap", (PyCFunction) _wrap_Icon_CopyFromBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Icon_swigregister", Icon_swigregister, METH_VARARGS },
	 { (char *)"new_IconLocation", (PyCFunction) _wrap_new_IconLocation, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_IconLocation", (PyCFunction) _wrap_delete_IconLocation, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconLocation_IsOk", (PyCFunction) _wrap_IconLocation_IsOk, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconLocation_SetFileName", (PyCFunction) _wrap_IconLocation_SetFileName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconLocation_GetFileName", (PyCFunction) _wrap_IconLocation_GetFileName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconLocation_SetIndex", (PyCFunction) _wrap_IconLocation_SetIndex, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconLocation_GetIndex", (PyCFunction) _wrap_IconLocation_GetIndex, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconLocation_swigregister", IconLocation_swigregister, METH_VARARGS },
	 { (char *)"new_IconBundle", (PyCFunction) _wrap_new_IconBundle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_IconBundleFromFile", (PyCFunction) _wrap_new_IconBundleFromFile, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_IconBundleFromIcon", (PyCFunction) _wrap_new_IconBundleFromIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_IconBundle", (PyCFunction) _wrap_delete_IconBundle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconBundle_AddIcon", (PyCFunction) _wrap_IconBundle_AddIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconBundle_AddIconFromFile", (PyCFunction) _wrap_IconBundle_AddIconFromFile, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconBundle_GetIcon", (PyCFunction) _wrap_IconBundle_GetIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"IconBundle_swigregister", IconBundle_swigregister, METH_VARARGS },
	 { (char *)"new_Cursor", (PyCFunction) _wrap_new_Cursor, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Cursor", (PyCFunction) _wrap_delete_Cursor, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_StockCursor", (PyCFunction) _wrap_new_StockCursor, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_CursorFromImage", (PyCFunction) _wrap_new_CursorFromImage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_CursorFromBits", (PyCFunction) _wrap_new_CursorFromBits, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Cursor_Ok", (PyCFunction) _wrap_Cursor_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Cursor_swigregister", Cursor_swigregister, METH_VARARGS },
	 { (char *)"new_Region", (PyCFunction) _wrap_new_Region, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_RegionFromBitmap", (PyCFunction) _wrap_new_RegionFromBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_RegionFromPoints", (PyCFunction) _wrap_new_RegionFromPoints, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Region", (PyCFunction) _wrap_delete_Region, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_Clear", (PyCFunction) _wrap_Region_Clear, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_Contains", (PyCFunction) _wrap_Region_Contains, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_ContainsPoint", (PyCFunction) _wrap_Region_ContainsPoint, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_ContainsRect", (PyCFunction) _wrap_Region_ContainsRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_ContainsRectDim", (PyCFunction) _wrap_Region_ContainsRectDim, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_GetBox", (PyCFunction) _wrap_Region_GetBox, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_Intersect", (PyCFunction) _wrap_Region_Intersect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_IntersectRect", (PyCFunction) _wrap_Region_IntersectRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_IntersectRegion", (PyCFunction) _wrap_Region_IntersectRegion, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_IsEmpty", (PyCFunction) _wrap_Region_IsEmpty, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_Union", (PyCFunction) _wrap_Region_Union, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_UnionRect", (PyCFunction) _wrap_Region_UnionRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_UnionRegion", (PyCFunction) _wrap_Region_UnionRegion, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_Subtract", (PyCFunction) _wrap_Region_Subtract, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_SubtractRect", (PyCFunction) _wrap_Region_SubtractRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_SubtractRegion", (PyCFunction) _wrap_Region_SubtractRegion, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_Xor", (PyCFunction) _wrap_Region_Xor, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_XorRect", (PyCFunction) _wrap_Region_XorRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_XorRegion", (PyCFunction) _wrap_Region_XorRegion, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_ConvertToBitmap", (PyCFunction) _wrap_Region_ConvertToBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_UnionBitmap", (PyCFunction) _wrap_Region_UnionBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Region_swigregister", Region_swigregister, METH_VARARGS },
	 { (char *)"new_RegionIterator", (PyCFunction) _wrap_new_RegionIterator, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_RegionIterator", (PyCFunction) _wrap_delete_RegionIterator, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_GetX", (PyCFunction) _wrap_RegionIterator_GetX, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_GetY", (PyCFunction) _wrap_RegionIterator_GetY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_GetW", (PyCFunction) _wrap_RegionIterator_GetW, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_GetWidth", (PyCFunction) _wrap_RegionIterator_GetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_GetH", (PyCFunction) _wrap_RegionIterator_GetH, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_GetHeight", (PyCFunction) _wrap_RegionIterator_GetHeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_GetRect", (PyCFunction) _wrap_RegionIterator_GetRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_HaveRects", (PyCFunction) _wrap_RegionIterator_HaveRects, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_Reset", (PyCFunction) _wrap_RegionIterator_Reset, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_Next", (PyCFunction) _wrap_RegionIterator_Next, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator___nonzero__", (PyCFunction) _wrap_RegionIterator___nonzero__, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"RegionIterator_swigregister", RegionIterator_swigregister, METH_VARARGS },
	 { (char *)"new_NativeFontInfo", (PyCFunction) _wrap_new_NativeFontInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_NativeFontInfo", (PyCFunction) _wrap_delete_NativeFontInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_Init", (PyCFunction) _wrap_NativeFontInfo_Init, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_InitFromFont", (PyCFunction) _wrap_NativeFontInfo_InitFromFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_GetPointSize", (PyCFunction) _wrap_NativeFontInfo_GetPointSize, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_GetStyle", (PyCFunction) _wrap_NativeFontInfo_GetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_GetWeight", (PyCFunction) _wrap_NativeFontInfo_GetWeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_GetUnderlined", (PyCFunction) _wrap_NativeFontInfo_GetUnderlined, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_GetFaceName", (PyCFunction) _wrap_NativeFontInfo_GetFaceName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_GetFamily", (PyCFunction) _wrap_NativeFontInfo_GetFamily, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_GetEncoding", (PyCFunction) _wrap_NativeFontInfo_GetEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_SetPointSize", (PyCFunction) _wrap_NativeFontInfo_SetPointSize, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_SetStyle", (PyCFunction) _wrap_NativeFontInfo_SetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_SetWeight", (PyCFunction) _wrap_NativeFontInfo_SetWeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_SetUnderlined", (PyCFunction) _wrap_NativeFontInfo_SetUnderlined, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_SetFaceName", (PyCFunction) _wrap_NativeFontInfo_SetFaceName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_SetFamily", (PyCFunction) _wrap_NativeFontInfo_SetFamily, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_SetEncoding", (PyCFunction) _wrap_NativeFontInfo_SetEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_FromString", (PyCFunction) _wrap_NativeFontInfo_FromString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_ToString", (PyCFunction) _wrap_NativeFontInfo_ToString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo___str__", (PyCFunction) _wrap_NativeFontInfo___str__, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_FromUserString", (PyCFunction) _wrap_NativeFontInfo_FromUserString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_ToUserString", (PyCFunction) _wrap_NativeFontInfo_ToUserString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeFontInfo_swigregister", NativeFontInfo_swigregister, METH_VARARGS },
	 { (char *)"NativeEncodingInfo_facename_set", (PyCFunction) _wrap_NativeEncodingInfo_facename_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeEncodingInfo_facename_get", (PyCFunction) _wrap_NativeEncodingInfo_facename_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeEncodingInfo_encoding_set", (PyCFunction) _wrap_NativeEncodingInfo_encoding_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeEncodingInfo_encoding_get", (PyCFunction) _wrap_NativeEncodingInfo_encoding_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_NativeEncodingInfo", (PyCFunction) _wrap_new_NativeEncodingInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_NativeEncodingInfo", (PyCFunction) _wrap_delete_NativeEncodingInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeEncodingInfo_FromString", (PyCFunction) _wrap_NativeEncodingInfo_FromString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeEncodingInfo_ToString", (PyCFunction) _wrap_NativeEncodingInfo_ToString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"NativeEncodingInfo_swigregister", NativeEncodingInfo_swigregister, METH_VARARGS },
	 { (char *)"GetNativeFontEncoding", (PyCFunction) _wrap_GetNativeFontEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"TestFontEncoding", (PyCFunction) _wrap_TestFontEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_FontMapper", (PyCFunction) _wrap_new_FontMapper, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_FontMapper", (PyCFunction) _wrap_delete_FontMapper, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_Get", (PyCFunction) _wrap_FontMapper_Get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_Set", (PyCFunction) _wrap_FontMapper_Set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_CharsetToEncoding", (PyCFunction) _wrap_FontMapper_CharsetToEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_GetSupportedEncodingsCount", (PyCFunction) _wrap_FontMapper_GetSupportedEncodingsCount, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_GetEncoding", (PyCFunction) _wrap_FontMapper_GetEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_GetEncodingName", (PyCFunction) _wrap_FontMapper_GetEncodingName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_GetEncodingDescription", (PyCFunction) _wrap_FontMapper_GetEncodingDescription, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_SetConfig", (PyCFunction) _wrap_FontMapper_SetConfig, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_SetConfigPath", (PyCFunction) _wrap_FontMapper_SetConfigPath, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_GetDefaultConfigPath", (PyCFunction) _wrap_FontMapper_GetDefaultConfigPath, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_GetAltForEncoding", (PyCFunction) _wrap_FontMapper_GetAltForEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_IsEncodingAvailable", (PyCFunction) _wrap_FontMapper_IsEncodingAvailable, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_SetDialogParent", (PyCFunction) _wrap_FontMapper_SetDialogParent, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_SetDialogTitle", (PyCFunction) _wrap_FontMapper_SetDialogTitle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontMapper_swigregister", FontMapper_swigregister, METH_VARARGS },
	 { (char *)"new_Font", (PyCFunction) _wrap_new_Font, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Font", (PyCFunction) _wrap_delete_Font, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_FontFromNativeInfo", (PyCFunction) _wrap_new_FontFromNativeInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_FontFromNativeInfoString", (PyCFunction) _wrap_new_FontFromNativeInfoString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_Font2", (PyCFunction) _wrap_new_Font2, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_Ok", (PyCFunction) _wrap_Font_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font___eq__", (PyCFunction) _wrap_Font___eq__, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font___ne__", (PyCFunction) _wrap_Font___ne__, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetPointSize", (PyCFunction) _wrap_Font_GetPointSize, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetFamily", (PyCFunction) _wrap_Font_GetFamily, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetStyle", (PyCFunction) _wrap_Font_GetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetWeight", (PyCFunction) _wrap_Font_GetWeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetUnderlined", (PyCFunction) _wrap_Font_GetUnderlined, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetFaceName", (PyCFunction) _wrap_Font_GetFaceName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetEncoding", (PyCFunction) _wrap_Font_GetEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetNativeFontInfo", (PyCFunction) _wrap_Font_GetNativeFontInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_IsFixedWidth", (PyCFunction) _wrap_Font_IsFixedWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetNativeFontInfoDesc", (PyCFunction) _wrap_Font_GetNativeFontInfoDesc, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetNativeFontInfoUserDesc", (PyCFunction) _wrap_Font_GetNativeFontInfoUserDesc, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetPointSize", (PyCFunction) _wrap_Font_SetPointSize, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetFamily", (PyCFunction) _wrap_Font_SetFamily, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetStyle", (PyCFunction) _wrap_Font_SetStyle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetWeight", (PyCFunction) _wrap_Font_SetWeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetFaceName", (PyCFunction) _wrap_Font_SetFaceName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetUnderlined", (PyCFunction) _wrap_Font_SetUnderlined, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetEncoding", (PyCFunction) _wrap_Font_SetEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetNativeFontInfo", (PyCFunction) _wrap_Font_SetNativeFontInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetNativeFontInfoFromString", (PyCFunction) _wrap_Font_SetNativeFontInfoFromString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetNativeFontInfoUserDesc", (PyCFunction) _wrap_Font_SetNativeFontInfoUserDesc, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetFamilyString", (PyCFunction) _wrap_Font_GetFamilyString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetStyleString", (PyCFunction) _wrap_Font_GetStyleString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetWeightString", (PyCFunction) _wrap_Font_GetWeightString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetNoAntiAliasing", (PyCFunction) _wrap_Font_SetNoAntiAliasing, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetNoAntiAliasing", (PyCFunction) _wrap_Font_GetNoAntiAliasing, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_GetDefaultEncoding", (PyCFunction) _wrap_Font_GetDefaultEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_SetDefaultEncoding", (PyCFunction) _wrap_Font_SetDefaultEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Font_swigregister", Font_swigregister, METH_VARARGS },
	 { (char *)"new_FontEnumerator", (PyCFunction) _wrap_new_FontEnumerator, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_FontEnumerator", (PyCFunction) _wrap_delete_FontEnumerator, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontEnumerator__setCallbackInfo", (PyCFunction) _wrap_FontEnumerator__setCallbackInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontEnumerator_EnumerateFacenames", (PyCFunction) _wrap_FontEnumerator_EnumerateFacenames, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontEnumerator_EnumerateEncodings", (PyCFunction) _wrap_FontEnumerator_EnumerateEncodings, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontEnumerator_GetEncodings", (PyCFunction) _wrap_FontEnumerator_GetEncodings, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontEnumerator_GetFacenames", (PyCFunction) _wrap_FontEnumerator_GetFacenames, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontEnumerator_swigregister", FontEnumerator_swigregister, METH_VARARGS },
	 { (char *)"LanguageInfo_Language_set", (PyCFunction) _wrap_LanguageInfo_Language_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"LanguageInfo_Language_get", (PyCFunction) _wrap_LanguageInfo_Language_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"LanguageInfo_CanonicalName_set", (PyCFunction) _wrap_LanguageInfo_CanonicalName_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"LanguageInfo_CanonicalName_get", (PyCFunction) _wrap_LanguageInfo_CanonicalName_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"LanguageInfo_Description_set", (PyCFunction) _wrap_LanguageInfo_Description_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"LanguageInfo_Description_get", (PyCFunction) _wrap_LanguageInfo_Description_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"LanguageInfo_swigregister", LanguageInfo_swigregister, METH_VARARGS },
	 { (char *)"new_Locale", (PyCFunction) _wrap_new_Locale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Locale", (PyCFunction) _wrap_delete_Locale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_Init1", (PyCFunction) _wrap_Locale_Init1, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_Init2", (PyCFunction) _wrap_Locale_Init2, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetSystemLanguage", (PyCFunction) _wrap_Locale_GetSystemLanguage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetSystemEncoding", (PyCFunction) _wrap_Locale_GetSystemEncoding, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetSystemEncodingName", (PyCFunction) _wrap_Locale_GetSystemEncodingName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_IsOk", (PyCFunction) _wrap_Locale_IsOk, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetLocale", (PyCFunction) _wrap_Locale_GetLocale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetLanguage", (PyCFunction) _wrap_Locale_GetLanguage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetSysName", (PyCFunction) _wrap_Locale_GetSysName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetCanonicalName", (PyCFunction) _wrap_Locale_GetCanonicalName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_AddCatalogLookupPathPrefix", (PyCFunction) _wrap_Locale_AddCatalogLookupPathPrefix, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_AddCatalog", (PyCFunction) _wrap_Locale_AddCatalog, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_IsLoaded", (PyCFunction) _wrap_Locale_IsLoaded, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetLanguageInfo", (PyCFunction) _wrap_Locale_GetLanguageInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetLanguageName", (PyCFunction) _wrap_Locale_GetLanguageName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_FindLanguageInfo", (PyCFunction) _wrap_Locale_FindLanguageInfo, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_AddLanguage", (PyCFunction) _wrap_Locale_AddLanguage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetString", (PyCFunction) _wrap_Locale_GetString, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_GetName", (PyCFunction) _wrap_Locale_GetName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Locale_swigregister", Locale_swigregister, METH_VARARGS },
	 { (char *)"GetLocale", (PyCFunction) _wrap_GetLocale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"GetTranslation", _wrap_GetTranslation, METH_VARARGS },
	 { (char *)"new_EncodingConverter", (PyCFunction) _wrap_new_EncodingConverter, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_EncodingConverter", (PyCFunction) _wrap_delete_EncodingConverter, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"EncodingConverter_Init", (PyCFunction) _wrap_EncodingConverter_Init, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"EncodingConverter_Convert", (PyCFunction) _wrap_EncodingConverter_Convert, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"EncodingConverter_GetPlatformEquivalents", (PyCFunction) _wrap_EncodingConverter_GetPlatformEquivalents, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"EncodingConverter_GetAllEquivalents", (PyCFunction) _wrap_EncodingConverter_GetAllEquivalents, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"EncodingConverter_CanConvert", (PyCFunction) _wrap_EncodingConverter_CanConvert, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"EncodingConverter_swigregister", EncodingConverter_swigregister, METH_VARARGS },
	 { (char *)"delete_DC", (PyCFunction) _wrap_delete_DC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_BeginDrawing", (PyCFunction) _wrap_DC_BeginDrawing, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_EndDrawing", (PyCFunction) _wrap_DC_EndDrawing, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_FloodFillXY", (PyCFunction) _wrap_DC_FloodFillXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_FloodFill", (PyCFunction) _wrap_DC_FloodFill, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetPixelXY", (PyCFunction) _wrap_DC_GetPixelXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetPixel", (PyCFunction) _wrap_DC_GetPixel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawLineXY", (PyCFunction) _wrap_DC_DrawLineXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawLine", (PyCFunction) _wrap_DC_DrawLine, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_CrossHairXY", (PyCFunction) _wrap_DC_CrossHairXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_CrossHair", (PyCFunction) _wrap_DC_CrossHair, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawArcXY", (PyCFunction) _wrap_DC_DrawArcXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawArc", (PyCFunction) _wrap_DC_DrawArc, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawCheckMarkXY", (PyCFunction) _wrap_DC_DrawCheckMarkXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawCheckMark", (PyCFunction) _wrap_DC_DrawCheckMark, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawEllipticArcXY", (PyCFunction) _wrap_DC_DrawEllipticArcXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawEllipticArc", (PyCFunction) _wrap_DC_DrawEllipticArc, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawPointXY", (PyCFunction) _wrap_DC_DrawPointXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawPoint", (PyCFunction) _wrap_DC_DrawPoint, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRectangleXY", (PyCFunction) _wrap_DC_DrawRectangleXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRectangle", (PyCFunction) _wrap_DC_DrawRectangle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRectangleRect", (PyCFunction) _wrap_DC_DrawRectangleRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRoundedRectangleXY", (PyCFunction) _wrap_DC_DrawRoundedRectangleXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRoundedRectangle", (PyCFunction) _wrap_DC_DrawRoundedRectangle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRoundedRectangleRect", (PyCFunction) _wrap_DC_DrawRoundedRectangleRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawCircleXY", (PyCFunction) _wrap_DC_DrawCircleXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawCircle", (PyCFunction) _wrap_DC_DrawCircle, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawEllipseXY", (PyCFunction) _wrap_DC_DrawEllipseXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawEllipse", (PyCFunction) _wrap_DC_DrawEllipse, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawEllipseRect", (PyCFunction) _wrap_DC_DrawEllipseRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawIconXY", (PyCFunction) _wrap_DC_DrawIconXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawIcon", (PyCFunction) _wrap_DC_DrawIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawBitmapXY", (PyCFunction) _wrap_DC_DrawBitmapXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawBitmap", (PyCFunction) _wrap_DC_DrawBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawTextXY", (PyCFunction) _wrap_DC_DrawTextXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawText", (PyCFunction) _wrap_DC_DrawText, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRotatedTextXY", (PyCFunction) _wrap_DC_DrawRotatedTextXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawRotatedText", (PyCFunction) _wrap_DC_DrawRotatedText, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_BlitXY", (PyCFunction) _wrap_DC_BlitXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_Blit", (PyCFunction) _wrap_DC_Blit, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawLines", (PyCFunction) _wrap_DC_DrawLines, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawPolygon", (PyCFunction) _wrap_DC_DrawPolygon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawLabel", (PyCFunction) _wrap_DC_DrawLabel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawImageLabel", (PyCFunction) _wrap_DC_DrawImageLabel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DrawSpline", (PyCFunction) _wrap_DC_DrawSpline, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_Clear", (PyCFunction) _wrap_DC_Clear, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_StartDoc", (PyCFunction) _wrap_DC_StartDoc, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_EndDoc", (PyCFunction) _wrap_DC_EndDoc, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_StartPage", (PyCFunction) _wrap_DC_StartPage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_EndPage", (PyCFunction) _wrap_DC_EndPage, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetFont", (PyCFunction) _wrap_DC_SetFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetPen", (PyCFunction) _wrap_DC_SetPen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetBrush", (PyCFunction) _wrap_DC_SetBrush, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetBackground", (PyCFunction) _wrap_DC_SetBackground, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetBackgroundMode", (PyCFunction) _wrap_DC_SetBackgroundMode, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetPalette", (PyCFunction) _wrap_DC_SetPalette, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetClippingRegionXY", (PyCFunction) _wrap_DC_SetClippingRegionXY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetClippingRegion", (PyCFunction) _wrap_DC_SetClippingRegion, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetClippingRect", (PyCFunction) _wrap_DC_SetClippingRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetClippingRegionAsRegion", (PyCFunction) _wrap_DC_SetClippingRegionAsRegion, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DestroyClippingRegion", (PyCFunction) _wrap_DC_DestroyClippingRegion, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetClippingBox", (PyCFunction) _wrap_DC_GetClippingBox, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetClippingRect", (PyCFunction) _wrap_DC_GetClippingRect, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetCharHeight", (PyCFunction) _wrap_DC_GetCharHeight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetCharWidth", (PyCFunction) _wrap_DC_GetCharWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetTextExtent", (PyCFunction) _wrap_DC_GetTextExtent, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetFullTextExtent", (PyCFunction) _wrap_DC_GetFullTextExtent, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetMultiLineTextExtent", (PyCFunction) _wrap_DC_GetMultiLineTextExtent, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetSize", (PyCFunction) _wrap_DC_GetSize, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetSizeTuple", (PyCFunction) _wrap_DC_GetSizeTuple, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetSizeMM", (PyCFunction) _wrap_DC_GetSizeMM, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetSizeMMTuple", (PyCFunction) _wrap_DC_GetSizeMMTuple, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DeviceToLogicalX", (PyCFunction) _wrap_DC_DeviceToLogicalX, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DeviceToLogicalY", (PyCFunction) _wrap_DC_DeviceToLogicalY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DeviceToLogicalXRel", (PyCFunction) _wrap_DC_DeviceToLogicalXRel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_DeviceToLogicalYRel", (PyCFunction) _wrap_DC_DeviceToLogicalYRel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_LogicalToDeviceX", (PyCFunction) _wrap_DC_LogicalToDeviceX, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_LogicalToDeviceY", (PyCFunction) _wrap_DC_LogicalToDeviceY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_LogicalToDeviceXRel", (PyCFunction) _wrap_DC_LogicalToDeviceXRel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_LogicalToDeviceYRel", (PyCFunction) _wrap_DC_LogicalToDeviceYRel, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_CanDrawBitmap", (PyCFunction) _wrap_DC_CanDrawBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_CanGetTextExtent", (PyCFunction) _wrap_DC_CanGetTextExtent, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetDepth", (PyCFunction) _wrap_DC_GetDepth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetPPI", (PyCFunction) _wrap_DC_GetPPI, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_Ok", (PyCFunction) _wrap_DC_Ok, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetBackgroundMode", (PyCFunction) _wrap_DC_GetBackgroundMode, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetBackground", (PyCFunction) _wrap_DC_GetBackground, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetBrush", (PyCFunction) _wrap_DC_GetBrush, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetFont", (PyCFunction) _wrap_DC_GetFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetPen", (PyCFunction) _wrap_DC_GetPen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetTextBackground", (PyCFunction) _wrap_DC_GetTextBackground, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetTextForeground", (PyCFunction) _wrap_DC_GetTextForeground, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetTextForeground", (PyCFunction) _wrap_DC_SetTextForeground, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetTextBackground", (PyCFunction) _wrap_DC_SetTextBackground, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetMapMode", (PyCFunction) _wrap_DC_GetMapMode, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetMapMode", (PyCFunction) _wrap_DC_SetMapMode, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetUserScale", (PyCFunction) _wrap_DC_GetUserScale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetUserScale", (PyCFunction) _wrap_DC_SetUserScale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetLogicalScale", (PyCFunction) _wrap_DC_GetLogicalScale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetLogicalScale", (PyCFunction) _wrap_DC_SetLogicalScale, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetLogicalOrigin", (PyCFunction) _wrap_DC_GetLogicalOrigin, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetLogicalOriginTuple", (PyCFunction) _wrap_DC_GetLogicalOriginTuple, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetLogicalOrigin", (PyCFunction) _wrap_DC_SetLogicalOrigin, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetDeviceOrigin", (PyCFunction) _wrap_DC_GetDeviceOrigin, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetDeviceOriginTuple", (PyCFunction) _wrap_DC_GetDeviceOriginTuple, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetDeviceOrigin", (PyCFunction) _wrap_DC_SetDeviceOrigin, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetAxisOrientation", (PyCFunction) _wrap_DC_SetAxisOrientation, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetLogicalFunction", (PyCFunction) _wrap_DC_GetLogicalFunction, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetLogicalFunction", (PyCFunction) _wrap_DC_SetLogicalFunction, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_SetOptimization", (PyCFunction) _wrap_DC_SetOptimization, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetOptimization", (PyCFunction) _wrap_DC_GetOptimization, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_CalcBoundingBox", (PyCFunction) _wrap_DC_CalcBoundingBox, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_ResetBoundingBox", (PyCFunction) _wrap_DC_ResetBoundingBox, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_MinX", (PyCFunction) _wrap_DC_MinX, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_MaxX", (PyCFunction) _wrap_DC_MaxX, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_MinY", (PyCFunction) _wrap_DC_MinY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_MaxY", (PyCFunction) _wrap_DC_MaxY, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_GetBoundingBox", (PyCFunction) _wrap_DC_GetBoundingBox, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC__DrawPointList", (PyCFunction) _wrap_DC__DrawPointList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC__DrawLineList", (PyCFunction) _wrap_DC__DrawLineList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC__DrawRectangleList", (PyCFunction) _wrap_DC__DrawRectangleList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC__DrawEllipseList", (PyCFunction) _wrap_DC__DrawEllipseList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC__DrawPolygonList", (PyCFunction) _wrap_DC__DrawPolygonList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC__DrawTextList", (PyCFunction) _wrap_DC__DrawTextList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"DC_swigregister", DC_swigregister, METH_VARARGS },
	 { (char *)"new_MemoryDC", (PyCFunction) _wrap_new_MemoryDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_MemoryDCFromDC", (PyCFunction) _wrap_new_MemoryDCFromDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"MemoryDC_SelectObject", (PyCFunction) _wrap_MemoryDC_SelectObject, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"MemoryDC_swigregister", MemoryDC_swigregister, METH_VARARGS },
	 { (char *)"new_BufferedDC", (PyCFunction) _wrap_new_BufferedDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"new_BufferedDCInternalBuffer", (PyCFunction) _wrap_new_BufferedDCInternalBuffer, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"BufferedDC_UnMask", (PyCFunction) _wrap_BufferedDC_UnMask, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"BufferedDC_swigregister", BufferedDC_swigregister, METH_VARARGS },
	 { (char *)"new_BufferedPaintDC", (PyCFunction) _wrap_new_BufferedPaintDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"BufferedPaintDC_swigregister", BufferedPaintDC_swigregister, METH_VARARGS },
	 { (char *)"new_ScreenDC", (PyCFunction) _wrap_new_ScreenDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ScreenDC_StartDrawingOnTopWin", (PyCFunction) _wrap_ScreenDC_StartDrawingOnTopWin, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ScreenDC_StartDrawingOnTop", (PyCFunction) _wrap_ScreenDC_StartDrawingOnTop, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ScreenDC_EndDrawingOnTop", (PyCFunction) _wrap_ScreenDC_EndDrawingOnTop, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ScreenDC_swigregister", ScreenDC_swigregister, METH_VARARGS },
	 { (char *)"new_ClientDC", (PyCFunction) _wrap_new_ClientDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ClientDC_swigregister", ClientDC_swigregister, METH_VARARGS },
	 { (char *)"new_PaintDC", (PyCFunction) _wrap_new_PaintDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PaintDC_swigregister", PaintDC_swigregister, METH_VARARGS },
	 { (char *)"new_WindowDC", (PyCFunction) _wrap_new_WindowDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"WindowDC_swigregister", WindowDC_swigregister, METH_VARARGS },
	 { (char *)"new_MirrorDC", (PyCFunction) _wrap_new_MirrorDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"MirrorDC_swigregister", MirrorDC_swigregister, METH_VARARGS },
	 { (char *)"new_PostScriptDC", (PyCFunction) _wrap_new_PostScriptDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PostScriptDC_GetPrintData", (PyCFunction) _wrap_PostScriptDC_GetPrintData, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PostScriptDC_SetPrintData", (PyCFunction) _wrap_PostScriptDC_SetPrintData, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PostScriptDC_SetResolution", (PyCFunction) _wrap_PostScriptDC_SetResolution, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PostScriptDC_GetResolution", (PyCFunction) _wrap_PostScriptDC_GetResolution, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PostScriptDC_swigregister", PostScriptDC_swigregister, METH_VARARGS },
	 { (char *)"new_MetaFile", (PyCFunction) _wrap_new_MetaFile, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"MetaFile_swigregister", MetaFile_swigregister, METH_VARARGS },
	 { (char *)"new_MetaFileDC", (PyCFunction) _wrap_new_MetaFileDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"MetaFileDC_swigregister", MetaFileDC_swigregister, METH_VARARGS },
	 { (char *)"new_PrinterDC", (PyCFunction) _wrap_new_PrinterDC, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PrinterDC_swigregister", PrinterDC_swigregister, METH_VARARGS },
	 { (char *)"new_ImageList", (PyCFunction) _wrap_new_ImageList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ImageList", (PyCFunction) _wrap_delete_ImageList, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_Add", (PyCFunction) _wrap_ImageList_Add, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_AddWithColourMask", (PyCFunction) _wrap_ImageList_AddWithColourMask, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_AddIcon", (PyCFunction) _wrap_ImageList_AddIcon, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_Replace", (PyCFunction) _wrap_ImageList_Replace, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_Draw", (PyCFunction) _wrap_ImageList_Draw, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_GetImageCount", (PyCFunction) _wrap_ImageList_GetImageCount, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_Remove", (PyCFunction) _wrap_ImageList_Remove, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_RemoveAll", (PyCFunction) _wrap_ImageList_RemoveAll, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_GetSize", (PyCFunction) _wrap_ImageList_GetSize, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ImageList_swigregister", ImageList_swigregister, METH_VARARGS },
	 { (char *)"PenList_AddPen", (PyCFunction) _wrap_PenList_AddPen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PenList_FindOrCreatePen", (PyCFunction) _wrap_PenList_FindOrCreatePen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PenList_RemovePen", (PyCFunction) _wrap_PenList_RemovePen, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PenList_GetCount", (PyCFunction) _wrap_PenList_GetCount, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"PenList_swigregister", PenList_swigregister, METH_VARARGS },
	 { (char *)"BrushList_AddBrush", (PyCFunction) _wrap_BrushList_AddBrush, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"BrushList_FindOrCreateBrush", (PyCFunction) _wrap_BrushList_FindOrCreateBrush, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"BrushList_RemoveBrush", (PyCFunction) _wrap_BrushList_RemoveBrush, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"BrushList_GetCount", (PyCFunction) _wrap_BrushList_GetCount, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"BrushList_swigregister", BrushList_swigregister, METH_VARARGS },
	 { (char *)"new_ColourDatabase", (PyCFunction) _wrap_new_ColourDatabase, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ColourDatabase", (PyCFunction) _wrap_delete_ColourDatabase, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ColourDatabase_Find", (PyCFunction) _wrap_ColourDatabase_Find, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ColourDatabase_FindName", (PyCFunction) _wrap_ColourDatabase_FindName, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ColourDatabase_AddColour", (PyCFunction) _wrap_ColourDatabase_AddColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ColourDatabase_Append", (PyCFunction) _wrap_ColourDatabase_Append, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ColourDatabase_swigregister", ColourDatabase_swigregister, METH_VARARGS },
	 { (char *)"FontList_AddFont", (PyCFunction) _wrap_FontList_AddFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontList_FindOrCreateFont", (PyCFunction) _wrap_FontList_FindOrCreateFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontList_RemoveFont", (PyCFunction) _wrap_FontList_RemoveFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontList_GetCount", (PyCFunction) _wrap_FontList_GetCount, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FontList_swigregister", FontList_swigregister, METH_VARARGS },
	 { (char *)"new_Effects", (PyCFunction) _wrap_new_Effects, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_GetHighlightColour", (PyCFunction) _wrap_Effects_GetHighlightColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_GetLightShadow", (PyCFunction) _wrap_Effects_GetLightShadow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_GetFaceColour", (PyCFunction) _wrap_Effects_GetFaceColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_GetMediumShadow", (PyCFunction) _wrap_Effects_GetMediumShadow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_GetDarkShadow", (PyCFunction) _wrap_Effects_GetDarkShadow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_SetHighlightColour", (PyCFunction) _wrap_Effects_SetHighlightColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_SetLightShadow", (PyCFunction) _wrap_Effects_SetLightShadow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_SetFaceColour", (PyCFunction) _wrap_Effects_SetFaceColour, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_SetMediumShadow", (PyCFunction) _wrap_Effects_SetMediumShadow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_SetDarkShadow", (PyCFunction) _wrap_Effects_SetDarkShadow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_Set", (PyCFunction) _wrap_Effects_Set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_DrawSunkenEdge", (PyCFunction) _wrap_Effects_DrawSunkenEdge, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_TileBitmap", (PyCFunction) _wrap_Effects_TileBitmap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Effects_swigregister", Effects_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_wxControlTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxControl *) x));
}
static void *_p_wxControlWithItemsTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *) (wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxMenuBarTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxMenuBar *) x));
}
static void *_p_wxBufferedDCTo_p_wxMemoryDC(void *x) {
    return (void *)((wxMemoryDC *)  ((wxBufferedDC *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxMemoryDC(void *x) {
    return (void *)((wxMemoryDC *) (wxBufferedDC *) ((wxBufferedPaintDC *) x));
}
static void *_p_wxLayoutConstraintsTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxLayoutConstraints *) x));
}
static void *_p_wxPenTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxPen *) x));
}
static void *_p_wxRegionIteratorTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxRegionIterator *) x));
}
static void *_p_wxGBSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizerItem *) ((wxGBSizerItem *) x));
}
static void *_p_wxSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizerItem *) x));
}
static void *_p_wxColourDatabaseTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxColourDatabase *) x));
}
static void *_p_wxScrollEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxScrollEvent *) x));
}
static void *_p_wxIndividualLayoutConstraintTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxIndividualLayoutConstraint *) x));
}
static void *_p_wxIconTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxIcon *) x));
}
static void *_p_wxStaticBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxBoxSizer *) ((wxStaticBoxSizer *) x));
}
static void *_p_wxBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxBoxSizer *) x));
}
static void *_p_wxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizer *) x));
}
static void *_p_wxGridBagSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *)(wxFlexGridSizer *) ((wxGridBagSizer *) x));
}
static void *_p_wxUpdateUIEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxUpdateUIEvent *) x));
}
static void *_p_wxPenListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxPenList *) x));
}
static void *_p_wxEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvent *) x));
}
static void *_p_wxFlexGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *) ((wxFlexGridSizer *) x));
}
static void *_p_wxGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxGridSizer *) x));
}
static void *_p_wxInitDialogEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxInitDialogEvent *) x));
}
static void *_p_wxPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaintEvent *) x));
}
static void *_p_wxNcPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNcPaintEvent *) x));
}
static void *_p_wxDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxDC *) x));
}
static void *_p_wxPaletteChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaletteChangedEvent *) x));
}
static void *_p_wxDisplayChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDisplayChangedEvent *) x));
}
static void *_p_wxMouseCaptureChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseCaptureChangedEvent *) x));
}
static void *_p_wxSysColourChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSysColourChangedEvent *) x));
}
static void *_p_wxControlTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxControl *) x));
}
static void *_p_wxSetCursorEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSetCursorEvent *) x));
}
static void *_p_wxClientDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxClientDC *) x));
}
static void *_p_wxFSFileTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFSFile *) x));
}
static void *_p_wxMemoryDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxMemoryDC *) x));
}
static void *_p_wxRegionTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxRegion *) x));
}
static void *_p_wxPySizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxPySizer *) x));
}
static void *_p_wxWindowDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxWindowDC *) x));
}
static void *_p_wxGDIObjectTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxGDIObject *) x));
}
static void *_p_wxEffectsTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEffects *) x));
}
static void *_p_wxPyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPyEvent *) x));
}
static void *_p_wxNotifyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxNotifyEvent *) x));
}
static void *_p_wxPostScriptDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxPostScriptDC *) x));
}
static void *_p_wxShowEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxShowEvent *) x));
}
static void *_p_wxMenuItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMenuItem *) x));
}
static void *_p_wxIdleEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIdleEvent *) x));
}
static void *_p_wxWindowCreateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowCreateEvent *) x));
}
static void *_p_wxQueryNewPaletteEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxQueryNewPaletteEvent *) x));
}
static void *_p_wxMaximizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMaximizeEvent *) x));
}
static void *_p_wxIconizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIconizeEvent *) x));
}
static void *_p_wxSizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSizeEvent *) x));
}
static void *_p_wxMoveEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMoveEvent *) x));
}
static void *_p_wxActivateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxActivateEvent *) x));
}
static void *_p_wxXPMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxXPMHandler *) x));
}
static void *_p_wxPNMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNMHandler *) x));
}
static void *_p_wxJPEGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxJPEGHandler *) x));
}
static void *_p_wxPCXHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPCXHandler *) x));
}
static void *_p_wxGIFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxGIFHandler *) x));
}
static void *_p_wxPNGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNGHandler *) x));
}
static void *_p_wxANIHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *)(wxCURHandler *) ((wxANIHandler *) x));
}
static void *_p_wxCURHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *) ((wxCURHandler *) x));
}
static void *_p_wxICOHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *) ((wxICOHandler *) x));
}
static void *_p_wxBMPHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxBMPHandler *) x));
}
static void *_p_wxImageHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImageHandler *) x));
}
static void *_p_wxTIFFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxTIFFHandler *) x));
}
static void *_p_wxEvtHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvtHandler *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *)(wxMemoryDC *)(wxBufferedDC *) ((wxBufferedPaintDC *) x));
}
static void *_p_wxPaintDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxPaintDC *) x));
}
static void *_p_wxPrinterDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxPrinterDC *) x));
}
static void *_p_wxScreenDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxScreenDC *) x));
}
static void *_p_wxAcceleratorTableTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxAcceleratorTable *) x));
}
static void *_p_wxImageTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImage *) x));
}
static void *_p_wxScrollWinEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxScrollWinEvent *) x));
}
static void *_p_wxPaletteTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxPalette *) x));
}
static void *_p_wxBufferedDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *)(wxMemoryDC *) ((wxBufferedDC *) x));
}
static void *_p_wxImageListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImageList *) x));
}
static void *_p_wxCursorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxCursor *) x));
}
static void *_p_wxEncodingConverterTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEncodingConverter *) x));
}
static void *_p_wxMirrorDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxMirrorDC *) x));
}
static void *_p_wxWindowDestroyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowDestroyEvent *) x));
}
static void *_p_wxNavigationKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNavigationKeyEvent *) x));
}
static void *_p_wxKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxKeyEvent *) x));
}
static void *_p_wxWindowTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxWindow *) x));
}
static void *_p_wxMenuTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxMenu *) x));
}
static void *_p_wxMenuBarTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxMenuBar *) x));
}
static void *_p_wxMetaFileDCTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxDC *) ((wxMetaFileDC *) x));
}
static void *_p_wxBrushListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxBrushList *) x));
}
static void *_p_wxPyPenTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *)(wxPen *) ((wxPyPen *) x));
}
static void *_p_wxFileSystemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFileSystem *) x));
}
static void *_p_wxBitmapTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxBitmap *) x));
}
static void *_p_wxMaskTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMask *) x));
}
static void *_p_wxContextMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxContextMenuEvent *) x));
}
static void *_p_wxMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMenuEvent *) x));
}
static void *_p_wxPyAppTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxPyApp *) x));
}
static void *_p_wxCloseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCloseEvent *) x));
}
static void *_p_wxMouseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseEvent *) x));
}
static void *_p_wxEraseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxEraseEvent *) x));
}
static void *_p_wxPyCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxPyCommandEvent *) x));
}
static void *_p_wxCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCommandEvent *) x));
}
static void *_p_wxDropFilesEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDropFilesEvent *) x));
}
static void *_p_wxFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxFocusEvent *) x));
}
static void *_p_wxChildFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxChildFocusEvent *) x));
}
static void *_p_wxFontTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxFont *) x));
}
static void *_p_wxBrushTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxGDIObject *) ((wxBrush *) x));
}
static void *_p_wxMetaFileTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMetaFile *) x));
}
static void *_p_wxControlWithItemsTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *)(wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxColourTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxColour *) x));
}
static void *_p_wxFontListTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFontList *) x));
}
static void *_p_wxPyValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxValidator *) ((wxPyValidator *) x));
}
static void *_p_wxValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxValidator *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxBufferedDC(void *x) {
    return (void *)((wxBufferedDC *)  ((wxBufferedPaintDC *) x));
}
static void *_p_wxBufferedDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *) (wxMemoryDC *) ((wxBufferedDC *) x));
}
static void *_p_wxScreenDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxScreenDC *) x));
}
static void *_p_wxMirrorDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxMirrorDC *) x));
}
static void *_p_wxMemoryDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxMemoryDC *) x));
}
static void *_p_wxWindowDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxWindowDC *) x));
}
static void *_p_wxMetaFileDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxMetaFileDC *) x));
}
static void *_p_wxBufferedPaintDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *) (wxMemoryDC *)(wxBufferedDC *) ((wxBufferedPaintDC *) x));
}
static void *_p_wxClientDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxClientDC *) x));
}
static void *_p_wxPaintDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxPaintDC *) x));
}
static void *_p_wxPostScriptDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxPostScriptDC *) x));
}
static void *_p_wxPrinterDCTo_p_wxDC(void *x) {
    return (void *)((wxDC *)  ((wxPrinterDC *) x));
}
static void *_p_wxPyPenTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *) (wxPen *) ((wxPyPen *) x));
}
static void *_p_wxIconTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxIcon *) x));
}
static void *_p_wxPaletteTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxPalette *) x));
}
static void *_p_wxPenTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxPen *) x));
}
static void *_p_wxFontTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxFont *) x));
}
static void *_p_wxCursorTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxCursor *) x));
}
static void *_p_wxBitmapTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxBitmap *) x));
}
static void *_p_wxRegionTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxRegion *) x));
}
static void *_p_wxBrushTo_p_wxGDIObject(void *x) {
    return (void *)((wxGDIObject *)  ((wxBrush *) x));
}
static void *_p_wxPyPenTo_p_wxPen(void *x) {
    return (void *)((wxPen *)  ((wxPyPen *) x));
}
static swig_type_info _swigt__p_wxPostScriptDC[] = {{"_p_wxPostScriptDC", 0, "wxPostScriptDC *", 0},{"_p_wxPostScriptDC"},{0}};
static swig_type_info _swigt__p_wxBrush[] = {{"_p_wxBrush", 0, "wxBrush *", 0},{"_p_wxBrush"},{0}};
static swig_type_info _swigt__p_wxColour[] = {{"_p_wxColour", 0, "wxColour *", 0},{"_p_wxColour"},{0}};
static swig_type_info _swigt__p_wxDC[] = {{"_p_wxDC", 0, "wxDC *", 0},{"_p_wxBufferedDC", _p_wxBufferedDCTo_p_wxDC},{"_p_wxScreenDC", _p_wxScreenDCTo_p_wxDC},{"_p_wxMirrorDC", _p_wxMirrorDCTo_p_wxDC},{"_p_wxMemoryDC", _p_wxMemoryDCTo_p_wxDC},{"_p_wxWindowDC", _p_wxWindowDCTo_p_wxDC},{"_p_wxDC"},{"_p_wxMetaFileDC", _p_wxMetaFileDCTo_p_wxDC},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxDC},{"_p_wxClientDC", _p_wxClientDCTo_p_wxDC},{"_p_wxPaintDC", _p_wxPaintDCTo_p_wxDC},{"_p_wxPostScriptDC", _p_wxPostScriptDCTo_p_wxDC},{"_p_wxPrinterDC", _p_wxPrinterDCTo_p_wxDC},{0}};
static swig_type_info _swigt__p_wxMirrorDC[] = {{"_p_wxMirrorDC", 0, "wxMirrorDC *", 0},{"_p_wxMirrorDC"},{0}};
static swig_type_info _swigt__p_byte[] = {{"_p_byte", 0, "byte *", 0},{"_p_unsigned_char"},{"_p_byte"},{0}};
static swig_type_info _swigt__p_wxPyFontEnumerator[] = {{"_p_wxPyFontEnumerator", 0, "wxPyFontEnumerator *", 0},{"_p_wxPyFontEnumerator"},{0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0},{"_p_char"},{0}};
static swig_type_info _swigt__p_wxIconLocation[] = {{"_p_wxIconLocation", 0, "wxIconLocation *", 0},{"_p_wxIconLocation"},{0}};
static swig_type_info _swigt__p_wxImage[] = {{"_p_wxImage", 0, "wxImage *", 0},{"_p_wxImage"},{0}};
static swig_type_info _swigt__p_wxMetaFileDC[] = {{"_p_wxMetaFileDC", 0, "wxMetaFileDC *", 0},{"_p_wxMetaFileDC"},{0}};
static swig_type_info _swigt__p_wxMask[] = {{"_p_wxMask", 0, "wxMask *", 0},{"_p_wxMask"},{0}};
static swig_type_info _swigt__p_wxFont[] = {{"_p_wxFont", 0, "wxFont *", 0},{"_p_wxFont"},{0}};
static swig_type_info _swigt__p_wxWindow[] = {{"_p_wxWindow", 0, "wxWindow *", 0},{"_p_wxControl", _p_wxControlTo_p_wxWindow},{"_p_wxWindow"},{"_p_wxControlWithItems", _p_wxControlWithItemsTo_p_wxWindow},{"_p_wxMenuBar", _p_wxMenuBarTo_p_wxWindow},{0}};
static swig_type_info _swigt__p_wxSize[] = {{"_p_wxSize", 0, "wxSize *", 0},{"_p_wxSize"},{0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0},{"_p_double"},{0}};
static swig_type_info _swigt__p_wxMemoryDC[] = {{"_p_wxMemoryDC", 0, "wxMemoryDC *", 0},{"_p_wxBufferedDC", _p_wxBufferedDCTo_p_wxMemoryDC},{"_p_wxMemoryDC"},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxMemoryDC},{0}};
static swig_type_info _swigt__p_wxFontMapper[] = {{"_p_wxFontMapper", 0, "wxFontMapper *", 0},{"_p_wxFontMapper"},{0}};
static swig_type_info _swigt__p_wxEffects[] = {{"_p_wxEffects", 0, "wxEffects *", 0},{"_p_wxEffects"},{0}};
static swig_type_info _swigt__p_wxNativeEncodingInfo[] = {{"_p_wxNativeEncodingInfo", 0, "wxNativeEncodingInfo *", 0},{"_p_wxNativeEncodingInfo"},{0}};
static swig_type_info _swigt__p_wxPalette[] = {{"_p_wxPalette", 0, "wxPalette *", 0},{"_p_wxPalette"},{0}};
static swig_type_info _swigt__p_wxBitmap[] = {{"_p_wxBitmap", 0, "wxBitmap *", 0},{"_p_wxBitmap"},{0}};
static swig_type_info _swigt__p_wxObject[] = {{"_p_wxObject", 0, "wxObject *", 0},{"_p_wxLayoutConstraints", _p_wxLayoutConstraintsTo_p_wxObject},{"_p_wxRegionIterator", _p_wxRegionIteratorTo_p_wxObject},{"_p_wxPen", _p_wxPenTo_p_wxObject},{"_p_wxColourDatabase", _p_wxColourDatabaseTo_p_wxObject},{"_p_wxGBSizerItem", _p_wxGBSizerItemTo_p_wxObject},{"_p_wxSizerItem", _p_wxSizerItemTo_p_wxObject},{"_p_wxScrollEvent", _p_wxScrollEventTo_p_wxObject},{"_p_wxIndividualLayoutConstraint", _p_wxIndividualLayoutConstraintTo_p_wxObject},{"_p_wxStaticBoxSizer", _p_wxStaticBoxSizerTo_p_wxObject},{"_p_wxBoxSizer", _p_wxBoxSizerTo_p_wxObject},{"_p_wxSizer", _p_wxSizerTo_p_wxObject},{"_p_wxGridBagSizer", _p_wxGridBagSizerTo_p_wxObject},{"_p_wxPenList", _p_wxPenListTo_p_wxObject},{"_p_wxUpdateUIEvent", _p_wxUpdateUIEventTo_p_wxObject},{"_p_wxMenu", _p_wxMenuTo_p_wxObject},{"_p_wxEvent", _p_wxEventTo_p_wxObject},{"_p_wxFlexGridSizer", _p_wxFlexGridSizerTo_p_wxObject},{"_p_wxGridSizer", _p_wxGridSizerTo_p_wxObject},{"_p_wxInitDialogEvent", _p_wxInitDialogEventTo_p_wxObject},{"_p_wxMask", _p_wxMaskTo_p_wxObject},{"_p_wxPaintEvent", _p_wxPaintEventTo_p_wxObject},{"_p_wxNcPaintEvent", _p_wxNcPaintEventTo_p_wxObject},{"_p_wxPaletteChangedEvent", _p_wxPaletteChangedEventTo_p_wxObject},{"_p_wxDisplayChangedEvent", _p_wxDisplayChangedEventTo_p_wxObject},{"_p_wxMouseCaptureChangedEvent", _p_wxMouseCaptureChangedEventTo_p_wxObject},{"_p_wxSysColourChangedEvent", _p_wxSysColourChangedEventTo_p_wxObject},{"_p_wxControl", _p_wxControlTo_p_wxObject},{"_p_wxFont", _p_wxFontTo_p_wxObject},{"_p_wxSetCursorEvent", _p_wxSetCursorEventTo_p_wxObject},{"_p_wxClientDC", _p_wxClientDCTo_p_wxObject},{"_p_wxFSFile", _p_wxFSFileTo_p_wxObject},{"_p_wxMemoryDC", _p_wxMemoryDCTo_p_wxObject},{"_p_wxRegion", _p_wxRegionTo_p_wxObject},{"_p_wxPySizer", _p_wxPySizerTo_p_wxObject},{"_p_wxDC", _p_wxDCTo_p_wxObject},{"_p_wxIcon", _p_wxIconTo_p_wxObject},{"_p_wxWindowDC", _p_wxWindowDCTo_p_wxObject},{"_p_wxGDIObject", _p_wxGDIObjectTo_p_wxObject},{"_p_wxEffects", _p_wxEffectsTo_p_wxObject},{"_p_wxPyEvent", _p_wxPyEventTo_p_wxObject},{"_p_wxNotifyEvent", _p_wxNotifyEventTo_p_wxObject},{"_p_wxPostScriptDC", _p_wxPostScriptDCTo_p_wxObject},{"_p_wxShowEvent", _p_wxShowEventTo_p_wxObject},{"_p_wxMenuItem", _p_wxMenuItemTo_p_wxObject},{"_p_wxIdleEvent", _p_wxIdleEventTo_p_wxObject},{"_p_wxWindowCreateEvent", _p_wxWindowCreateEventTo_p_wxObject},{"_p_wxQueryNewPaletteEvent", _p_wxQueryNewPaletteEventTo_p_wxObject},{"_p_wxMaximizeEvent", _p_wxMaximizeEventTo_p_wxObject},{"_p_wxIconizeEvent", _p_wxIconizeEventTo_p_wxObject},{"_p_wxSizeEvent", _p_wxSizeEventTo_p_wxObject},{"_p_wxMoveEvent", _p_wxMoveEventTo_p_wxObject},{"_p_wxActivateEvent", _p_wxActivateEventTo_p_wxObject},{"_p_wxGIFHandler", _p_wxGIFHandlerTo_p_wxObject},{"_p_wxPNGHandler", _p_wxPNGHandlerTo_p_wxObject},{"_p_wxANIHandler", _p_wxANIHandlerTo_p_wxObject},{"_p_wxCURHandler", _p_wxCURHandlerTo_p_wxObject},{"_p_wxICOHandler", _p_wxICOHandlerTo_p_wxObject},{"_p_wxBMPHandler", _p_wxBMPHandlerTo_p_wxObject},{"_p_wxImageHandler", _p_wxImageHandlerTo_p_wxObject},{"_p_wxTIFFHandler", _p_wxTIFFHandlerTo_p_wxObject},{"_p_wxEvtHandler", _p_wxEvtHandlerTo_p_wxObject},{"_p_wxPCXHandler", _p_wxPCXHandlerTo_p_wxObject},{"_p_wxJPEGHandler", _p_wxJPEGHandlerTo_p_wxObject},{"_p_wxPNMHandler", _p_wxPNMHandlerTo_p_wxObject},{"_p_wxXPMHandler", _p_wxXPMHandlerTo_p_wxObject},{"_p_wxPaintDC", _p_wxPaintDCTo_p_wxObject},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxObject},{"_p_wxPrinterDC", _p_wxPrinterDCTo_p_wxObject},{"_p_wxScreenDC", _p_wxScreenDCTo_p_wxObject},{"_p_wxAcceleratorTable", _p_wxAcceleratorTableTo_p_wxObject},{"_p_wxImage", _p_wxImageTo_p_wxObject},{"_p_wxScrollWinEvent", _p_wxScrollWinEventTo_p_wxObject},{"_p_wxBufferedDC", _p_wxBufferedDCTo_p_wxObject},{"_p_wxPalette", _p_wxPaletteTo_p_wxObject},{"_p_wxImageList", _p_wxImageListTo_p_wxObject},{"_p_wxCursor", _p_wxCursorTo_p_wxObject},{"_p_wxObject"},{"_p_wxMirrorDC", _p_wxMirrorDCTo_p_wxObject},{"_p_wxEncodingConverter", _p_wxEncodingConverterTo_p_wxObject},{"_p_wxWindowDestroyEvent", _p_wxWindowDestroyEventTo_p_wxObject},{"_p_wxNavigationKeyEvent", _p_wxNavigationKeyEventTo_p_wxObject},{"_p_wxKeyEvent", _p_wxKeyEventTo_p_wxObject},{"_p_wxMetaFileDC", _p_wxMetaFileDCTo_p_wxObject},{"_p_wxWindow", _p_wxWindowTo_p_wxObject},{"_p_wxMenuBar", _p_wxMenuBarTo_p_wxObject},{"_p_wxBrushList", _p_wxBrushListTo_p_wxObject},{"_p_wxPyPen", _p_wxPyPenTo_p_wxObject},{"_p_wxFileSystem", _p_wxFileSystemTo_p_wxObject},{"_p_wxBitmap", _p_wxBitmapTo_p_wxObject},{"_p_wxContextMenuEvent", _p_wxContextMenuEventTo_p_wxObject},{"_p_wxMenuEvent", _p_wxMenuEventTo_p_wxObject},{"_p_wxPyApp", _p_wxPyAppTo_p_wxObject},{"_p_wxCloseEvent", _p_wxCloseEventTo_p_wxObject},{"_p_wxMouseEvent", _p_wxMouseEventTo_p_wxObject},{"_p_wxEraseEvent", _p_wxEraseEventTo_p_wxObject},{"_p_wxPyCommandEvent", _p_wxPyCommandEventTo_p_wxObject},{"_p_wxCommandEvent", _p_wxCommandEventTo_p_wxObject},{"_p_wxDropFilesEvent", _p_wxDropFilesEventTo_p_wxObject},{"_p_wxFocusEvent", _p_wxFocusEventTo_p_wxObject},{"_p_wxChildFocusEvent", _p_wxChildFocusEventTo_p_wxObject},{"_p_wxBrush", _p_wxBrushTo_p_wxObject},{"_p_wxMetaFile", _p_wxMetaFileTo_p_wxObject},{"_p_wxControlWithItems", _p_wxControlWithItemsTo_p_wxObject},{"_p_wxColour", _p_wxColourTo_p_wxObject},{"_p_wxFontList", _p_wxFontListTo_p_wxObject},{"_p_wxPyValidator", _p_wxPyValidatorTo_p_wxObject},{"_p_wxValidator", _p_wxValidatorTo_p_wxObject},{0}};
static swig_type_info _swigt__p_wxRegionIterator[] = {{"_p_wxRegionIterator", 0, "wxRegionIterator *", 0},{"_p_wxRegionIterator"},{0}};
static swig_type_info _swigt__p_wxRect[] = {{"_p_wxRect", 0, "wxRect *", 0},{"_p_wxRect"},{0}};
static swig_type_info _swigt__p_wxString[] = {{"_p_wxString", 0, "wxString *", 0},{"_p_wxString"},{0}};
static swig_type_info _swigt__p_wxPrinterDC[] = {{"_p_wxPrinterDC", 0, "wxPrinterDC *", 0},{"_p_wxPrinterDC"},{0}};
static swig_type_info _swigt__p_wxIconBundle[] = {{"_p_wxIconBundle", 0, "wxIconBundle *", 0},{"_p_wxIconBundle"},{0}};
static swig_type_info _swigt__p_wxPoint[] = {{"_p_wxPoint", 0, "wxPoint *", 0},{"_p_wxPoint"},{0}};
static swig_type_info _swigt__p_wxDash[] = {{"_p_wxDash", 0, "wxDash *", 0},{"_p_wxDash"},{0}};
static swig_type_info _swigt__p_wxScreenDC[] = {{"_p_wxScreenDC", 0, "wxScreenDC *", 0},{"_p_wxScreenDC"},{0}};
static swig_type_info _swigt__p_wxCursor[] = {{"_p_wxCursor", 0, "wxCursor *", 0},{"_p_wxCursor"},{0}};
static swig_type_info _swigt__p_wxClientDC[] = {{"_p_wxClientDC", 0, "wxClientDC *", 0},{"_p_wxClientDC"},{0}};
static swig_type_info _swigt__p_wxBufferedDC[] = {{"_p_wxBufferedDC", 0, "wxBufferedDC *", 0},{"_p_wxBufferedDC"},{"_p_wxBufferedPaintDC", _p_wxBufferedPaintDCTo_p_wxBufferedDC},{0}};
static swig_type_info _swigt__p_wxImageList[] = {{"_p_wxImageList", 0, "wxImageList *", 0},{"_p_wxImageList"},{0}};
static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *", 0},{"_p_unsigned_char"},{"_p_byte"},{0}};
static swig_type_info _swigt__p_wxGDIObject[] = {{"_p_wxGDIObject", 0, "wxGDIObject *", 0},{"_p_wxIcon", _p_wxIconTo_p_wxGDIObject},{"_p_wxPyPen", _p_wxPyPenTo_p_wxGDIObject},{"_p_wxPen", _p_wxPenTo_p_wxGDIObject},{"_p_wxFont", _p_wxFontTo_p_wxGDIObject},{"_p_wxPalette", _p_wxPaletteTo_p_wxGDIObject},{"_p_wxGDIObject"},{"_p_wxCursor", _p_wxCursorTo_p_wxGDIObject},{"_p_wxBitmap", _p_wxBitmapTo_p_wxGDIObject},{"_p_wxRegion", _p_wxRegionTo_p_wxGDIObject},{"_p_wxBrush", _p_wxBrushTo_p_wxGDIObject},{0}};
static swig_type_info _swigt__p_wxIcon[] = {{"_p_wxIcon", 0, "wxIcon *", 0},{"_p_wxIcon"},{0}};
static swig_type_info _swigt__p_wxLocale[] = {{"_p_wxLocale", 0, "wxLocale *", 0},{"_p_wxLocale"},{0}};
static swig_type_info _swigt__p_wxRegion[] = {{"_p_wxRegion", 0, "wxRegion *", 0},{"_p_wxRegion"},{0}};
static swig_type_info _swigt__p_wxLanguageInfo[] = {{"_p_wxLanguageInfo", 0, "wxLanguageInfo *", 0},{"_p_wxLanguageInfo"},{0}};
static swig_type_info _swigt__p_wxConfigBase[] = {{"_p_wxConfigBase", 0, "wxConfigBase *", 0},{"_p_wxConfigBase"},{0}};
static swig_type_info _swigt__p_wxWindowDC[] = {{"_p_wxWindowDC", 0, "wxWindowDC *", 0},{"_p_wxWindowDC"},{0}};
static swig_type_info _swigt__p_wxPrintData[] = {{"_p_wxPrintData", 0, "wxPrintData *", 0},{"_p_wxPrintData"},{0}};
static swig_type_info _swigt__p_wxBrushList[] = {{"_p_wxBrushList", 0, "wxBrushList *", 0},{"_p_wxBrushList"},{0}};
static swig_type_info _swigt__p_wxFontList[] = {{"_p_wxFontList", 0, "wxFontList *", 0},{"_p_wxFontList"},{0}};
static swig_type_info _swigt__p_wxPen[] = {{"_p_wxPen", 0, "wxPen *", 0},{"_p_wxPyPen", _p_wxPyPenTo_p_wxPen},{"_p_wxPen"},{0}};
static swig_type_info _swigt__p_wxBufferedPaintDC[] = {{"_p_wxBufferedPaintDC", 0, "wxBufferedPaintDC *", 0},{"_p_wxBufferedPaintDC"},{0}};
static swig_type_info _swigt__p_wxPaintDC[] = {{"_p_wxPaintDC", 0, "wxPaintDC *", 0},{"_p_wxPaintDC"},{0}};
static swig_type_info _swigt__p_wxPenList[] = {{"_p_wxPenList", 0, "wxPenList *", 0},{"_p_wxPenList"},{0}};
static swig_type_info _swigt__p_wxPyPen[] = {{"_p_wxPyPen", 0, "wxPyPen *", 0},{"_p_wxPyPen"},{0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0},{"_p_int"},{0}};
static swig_type_info _swigt__p_wxMetaFile[] = {{"_p_wxMetaFile", 0, "wxMetaFile *", 0},{"_p_wxMetaFile"},{0}};
static swig_type_info _swigt__p_wxNativeFontInfo[] = {{"_p_wxNativeFontInfo", 0, "wxNativeFontInfo *", 0},{"_p_wxNativeFontInfo"},{0}};
static swig_type_info _swigt__p_wxEncodingConverter[] = {{"_p_wxEncodingConverter", 0, "wxEncodingConverter *", 0},{"_p_wxEncodingConverter"},{0}};
static swig_type_info _swigt__p_wxColourDatabase[] = {{"_p_wxColourDatabase", 0, "wxColourDatabase *", 0},{"_p_wxColourDatabase"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_wxPostScriptDC, 
_swigt__p_wxBrush, 
_swigt__p_wxColour, 
_swigt__p_wxDC, 
_swigt__p_wxMirrorDC, 
_swigt__p_byte, 
_swigt__p_wxPyFontEnumerator, 
_swigt__p_char, 
_swigt__p_wxIconLocation, 
_swigt__p_wxImage, 
_swigt__p_wxMetaFileDC, 
_swigt__p_wxMask, 
_swigt__p_wxFont, 
_swigt__p_wxWindow, 
_swigt__p_wxSize, 
_swigt__p_double, 
_swigt__p_wxMemoryDC, 
_swigt__p_wxFontMapper, 
_swigt__p_wxEffects, 
_swigt__p_wxNativeEncodingInfo, 
_swigt__p_wxPalette, 
_swigt__p_wxBitmap, 
_swigt__p_wxObject, 
_swigt__p_wxRegionIterator, 
_swigt__p_wxRect, 
_swigt__p_wxString, 
_swigt__p_wxPrinterDC, 
_swigt__p_wxIconBundle, 
_swigt__p_wxPoint, 
_swigt__p_wxDash, 
_swigt__p_wxScreenDC, 
_swigt__p_wxCursor, 
_swigt__p_wxClientDC, 
_swigt__p_wxBufferedDC, 
_swigt__p_wxImageList, 
_swigt__p_unsigned_char, 
_swigt__p_wxGDIObject, 
_swigt__p_wxIcon, 
_swigt__p_wxLocale, 
_swigt__p_wxRegion, 
_swigt__p_wxLanguageInfo, 
_swigt__p_wxConfigBase, 
_swigt__p_wxWindowDC, 
_swigt__p_wxPrintData, 
_swigt__p_wxBrushList, 
_swigt__p_wxFontList, 
_swigt__p_wxPen, 
_swigt__p_wxBufferedPaintDC, 
_swigt__p_wxPaintDC, 
_swigt__p_wxPenList, 
_swigt__p_wxPyPen, 
_swigt__p_int, 
_swigt__p_wxMetaFile, 
_swigt__p_wxNativeFontInfo, 
_swigt__p_wxEncodingConverter, 
_swigt__p_wxColourDatabase, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,"OutRegion", SWIG_PyObj_FromInt((int)wxOutRegion));
    PyDict_SetItemString(d,"PartRegion", SWIG_PyObj_FromInt((int)wxPartRegion));
    PyDict_SetItemString(d,"InRegion", SWIG_PyObj_FromInt((int)wxInRegion));
    PyDict_SetItemString(d,"FONTFAMILY_DEFAULT", SWIG_PyObj_FromInt((int)wxFONTFAMILY_DEFAULT));
    PyDict_SetItemString(d,"FONTFAMILY_DECORATIVE", SWIG_PyObj_FromInt((int)wxFONTFAMILY_DECORATIVE));
    PyDict_SetItemString(d,"FONTFAMILY_ROMAN", SWIG_PyObj_FromInt((int)wxFONTFAMILY_ROMAN));
    PyDict_SetItemString(d,"FONTFAMILY_SCRIPT", SWIG_PyObj_FromInt((int)wxFONTFAMILY_SCRIPT));
    PyDict_SetItemString(d,"FONTFAMILY_SWISS", SWIG_PyObj_FromInt((int)wxFONTFAMILY_SWISS));
    PyDict_SetItemString(d,"FONTFAMILY_MODERN", SWIG_PyObj_FromInt((int)wxFONTFAMILY_MODERN));
    PyDict_SetItemString(d,"FONTFAMILY_TELETYPE", SWIG_PyObj_FromInt((int)wxFONTFAMILY_TELETYPE));
    PyDict_SetItemString(d,"FONTFAMILY_MAX", SWIG_PyObj_FromInt((int)wxFONTFAMILY_MAX));
    PyDict_SetItemString(d,"FONTFAMILY_UNKNOWN", SWIG_PyObj_FromInt((int)wxFONTFAMILY_UNKNOWN));
    PyDict_SetItemString(d,"FONTSTYLE_NORMAL", SWIG_PyObj_FromInt((int)wxFONTSTYLE_NORMAL));
    PyDict_SetItemString(d,"FONTSTYLE_ITALIC", SWIG_PyObj_FromInt((int)wxFONTSTYLE_ITALIC));
    PyDict_SetItemString(d,"FONTSTYLE_SLANT", SWIG_PyObj_FromInt((int)wxFONTSTYLE_SLANT));
    PyDict_SetItemString(d,"FONTSTYLE_MAX", SWIG_PyObj_FromInt((int)wxFONTSTYLE_MAX));
    PyDict_SetItemString(d,"FONTWEIGHT_NORMAL", SWIG_PyObj_FromInt((int)wxFONTWEIGHT_NORMAL));
    PyDict_SetItemString(d,"FONTWEIGHT_LIGHT", SWIG_PyObj_FromInt((int)wxFONTWEIGHT_LIGHT));
    PyDict_SetItemString(d,"FONTWEIGHT_BOLD", SWIG_PyObj_FromInt((int)wxFONTWEIGHT_BOLD));
    PyDict_SetItemString(d,"FONTWEIGHT_MAX", SWIG_PyObj_FromInt((int)wxFONTWEIGHT_MAX));
    PyDict_SetItemString(d,"FONTFLAG_DEFAULT", SWIG_PyObj_FromInt((int)wxFONTFLAG_DEFAULT));
    PyDict_SetItemString(d,"FONTFLAG_ITALIC", SWIG_PyObj_FromInt((int)wxFONTFLAG_ITALIC));
    PyDict_SetItemString(d,"FONTFLAG_SLANT", SWIG_PyObj_FromInt((int)wxFONTFLAG_SLANT));
    PyDict_SetItemString(d,"FONTFLAG_LIGHT", SWIG_PyObj_FromInt((int)wxFONTFLAG_LIGHT));
    PyDict_SetItemString(d,"FONTFLAG_BOLD", SWIG_PyObj_FromInt((int)wxFONTFLAG_BOLD));
    PyDict_SetItemString(d,"FONTFLAG_ANTIALIASED", SWIG_PyObj_FromInt((int)wxFONTFLAG_ANTIALIASED));
    PyDict_SetItemString(d,"FONTFLAG_NOT_ANTIALIASED", SWIG_PyObj_FromInt((int)wxFONTFLAG_NOT_ANTIALIASED));
    PyDict_SetItemString(d,"FONTFLAG_UNDERLINED", SWIG_PyObj_FromInt((int)wxFONTFLAG_UNDERLINED));
    PyDict_SetItemString(d,"FONTFLAG_STRIKETHROUGH", SWIG_PyObj_FromInt((int)wxFONTFLAG_STRIKETHROUGH));
    PyDict_SetItemString(d,"FONTFLAG_MASK", SWIG_PyObj_FromInt((int)wxFONTFLAG_MASK));
    PyDict_SetItemString(d,"FONTENCODING_SYSTEM", SWIG_PyObj_FromInt((int)wxFONTENCODING_SYSTEM));
    PyDict_SetItemString(d,"FONTENCODING_DEFAULT", SWIG_PyObj_FromInt((int)wxFONTENCODING_DEFAULT));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_1", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_1));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_2", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_2));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_3", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_3));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_4", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_4));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_5", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_5));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_6", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_6));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_7", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_7));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_8", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_8));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_9", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_9));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_10", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_10));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_11", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_11));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_12", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_12));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_13", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_13));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_14", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_14));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_15", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_15));
    PyDict_SetItemString(d,"FONTENCODING_ISO8859_MAX", SWIG_PyObj_FromInt((int)wxFONTENCODING_ISO8859_MAX));
    PyDict_SetItemString(d,"FONTENCODING_KOI8", SWIG_PyObj_FromInt((int)wxFONTENCODING_KOI8));
    PyDict_SetItemString(d,"FONTENCODING_ALTERNATIVE", SWIG_PyObj_FromInt((int)wxFONTENCODING_ALTERNATIVE));
    PyDict_SetItemString(d,"FONTENCODING_BULGARIAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_BULGARIAN));
    PyDict_SetItemString(d,"FONTENCODING_CP437", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP437));
    PyDict_SetItemString(d,"FONTENCODING_CP850", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP850));
    PyDict_SetItemString(d,"FONTENCODING_CP852", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP852));
    PyDict_SetItemString(d,"FONTENCODING_CP855", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP855));
    PyDict_SetItemString(d,"FONTENCODING_CP866", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP866));
    PyDict_SetItemString(d,"FONTENCODING_CP874", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP874));
    PyDict_SetItemString(d,"FONTENCODING_CP932", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP932));
    PyDict_SetItemString(d,"FONTENCODING_CP936", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP936));
    PyDict_SetItemString(d,"FONTENCODING_CP949", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP949));
    PyDict_SetItemString(d,"FONTENCODING_CP950", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP950));
    PyDict_SetItemString(d,"FONTENCODING_CP1250", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1250));
    PyDict_SetItemString(d,"FONTENCODING_CP1251", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1251));
    PyDict_SetItemString(d,"FONTENCODING_CP1252", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1252));
    PyDict_SetItemString(d,"FONTENCODING_CP1253", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1253));
    PyDict_SetItemString(d,"FONTENCODING_CP1254", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1254));
    PyDict_SetItemString(d,"FONTENCODING_CP1255", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1255));
    PyDict_SetItemString(d,"FONTENCODING_CP1256", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1256));
    PyDict_SetItemString(d,"FONTENCODING_CP1257", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP1257));
    PyDict_SetItemString(d,"FONTENCODING_CP12_MAX", SWIG_PyObj_FromInt((int)wxFONTENCODING_CP12_MAX));
    PyDict_SetItemString(d,"FONTENCODING_UTF7", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF7));
    PyDict_SetItemString(d,"FONTENCODING_UTF8", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF8));
    PyDict_SetItemString(d,"FONTENCODING_EUC_JP", SWIG_PyObj_FromInt((int)wxFONTENCODING_EUC_JP));
    PyDict_SetItemString(d,"FONTENCODING_UTF16BE", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF16BE));
    PyDict_SetItemString(d,"FONTENCODING_UTF16LE", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF16LE));
    PyDict_SetItemString(d,"FONTENCODING_UTF32BE", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF32BE));
    PyDict_SetItemString(d,"FONTENCODING_UTF32LE", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF32LE));
    PyDict_SetItemString(d,"FONTENCODING_MACROMAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACROMAN));
    PyDict_SetItemString(d,"FONTENCODING_MACJAPANESE", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACJAPANESE));
    PyDict_SetItemString(d,"FONTENCODING_MACCHINESETRAD", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACCHINESETRAD));
    PyDict_SetItemString(d,"FONTENCODING_MACKOREAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACKOREAN));
    PyDict_SetItemString(d,"FONTENCODING_MACARABIC", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACARABIC));
    PyDict_SetItemString(d,"FONTENCODING_MACHEBREW", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACHEBREW));
    PyDict_SetItemString(d,"FONTENCODING_MACGREEK", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACGREEK));
    PyDict_SetItemString(d,"FONTENCODING_MACCYRILLIC", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACCYRILLIC));
    PyDict_SetItemString(d,"FONTENCODING_MACDEVANAGARI", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACDEVANAGARI));
    PyDict_SetItemString(d,"FONTENCODING_MACGURMUKHI", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACGURMUKHI));
    PyDict_SetItemString(d,"FONTENCODING_MACGUJARATI", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACGUJARATI));
    PyDict_SetItemString(d,"FONTENCODING_MACORIYA", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACORIYA));
    PyDict_SetItemString(d,"FONTENCODING_MACBENGALI", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACBENGALI));
    PyDict_SetItemString(d,"FONTENCODING_MACTAMIL", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACTAMIL));
    PyDict_SetItemString(d,"FONTENCODING_MACTELUGU", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACTELUGU));
    PyDict_SetItemString(d,"FONTENCODING_MACKANNADA", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACKANNADA));
    PyDict_SetItemString(d,"FONTENCODING_MACMALAJALAM", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACMALAJALAM));
    PyDict_SetItemString(d,"FONTENCODING_MACSINHALESE", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACSINHALESE));
    PyDict_SetItemString(d,"FONTENCODING_MACBURMESE", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACBURMESE));
    PyDict_SetItemString(d,"FONTENCODING_MACKHMER", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACKHMER));
    PyDict_SetItemString(d,"FONTENCODING_MACTHAI", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACTHAI));
    PyDict_SetItemString(d,"FONTENCODING_MACLAOTIAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACLAOTIAN));
    PyDict_SetItemString(d,"FONTENCODING_MACGEORGIAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACGEORGIAN));
    PyDict_SetItemString(d,"FONTENCODING_MACARMENIAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACARMENIAN));
    PyDict_SetItemString(d,"FONTENCODING_MACCHINESESIMP", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACCHINESESIMP));
    PyDict_SetItemString(d,"FONTENCODING_MACTIBETAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACTIBETAN));
    PyDict_SetItemString(d,"FONTENCODING_MACMONGOLIAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACMONGOLIAN));
    PyDict_SetItemString(d,"FONTENCODING_MACETHIOPIC", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACETHIOPIC));
    PyDict_SetItemString(d,"FONTENCODING_MACCENTRALEUR", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACCENTRALEUR));
    PyDict_SetItemString(d,"FONTENCODING_MACVIATNAMESE", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACVIATNAMESE));
    PyDict_SetItemString(d,"FONTENCODING_MACARABICEXT", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACARABICEXT));
    PyDict_SetItemString(d,"FONTENCODING_MACSYMBOL", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACSYMBOL));
    PyDict_SetItemString(d,"FONTENCODING_MACDINGBATS", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACDINGBATS));
    PyDict_SetItemString(d,"FONTENCODING_MACTURKISH", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACTURKISH));
    PyDict_SetItemString(d,"FONTENCODING_MACCROATIAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACCROATIAN));
    PyDict_SetItemString(d,"FONTENCODING_MACICELANDIC", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACICELANDIC));
    PyDict_SetItemString(d,"FONTENCODING_MACROMANIAN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACROMANIAN));
    PyDict_SetItemString(d,"FONTENCODING_MACCELTIC", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACCELTIC));
    PyDict_SetItemString(d,"FONTENCODING_MACGAELIC", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACGAELIC));
    PyDict_SetItemString(d,"FONTENCODING_MACKEYBOARD", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACKEYBOARD));
    PyDict_SetItemString(d,"FONTENCODING_MACMIN", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACMIN));
    PyDict_SetItemString(d,"FONTENCODING_MACMAX", SWIG_PyObj_FromInt((int)wxFONTENCODING_MACMAX));
    PyDict_SetItemString(d,"FONTENCODING_MAX", SWIG_PyObj_FromInt((int)wxFONTENCODING_MAX));
    PyDict_SetItemString(d,"FONTENCODING_UTF16", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF16));
    PyDict_SetItemString(d,"FONTENCODING_UTF32", SWIG_PyObj_FromInt((int)wxFONTENCODING_UTF32));
    PyDict_SetItemString(d,"FONTENCODING_UNICODE", SWIG_PyObj_FromInt((int)wxFONTENCODING_UNICODE));
    PyDict_SetItemString(d,"FONTENCODING_GB2312", SWIG_PyObj_FromInt((int)wxFONTENCODING_GB2312));
    PyDict_SetItemString(d,"FONTENCODING_BIG5", SWIG_PyObj_FromInt((int)wxFONTENCODING_BIG5));
    PyDict_SetItemString(d,"FONTENCODING_SHIFT_JIS", SWIG_PyObj_FromInt((int)wxFONTENCODING_SHIFT_JIS));
    
    wxPyPtrTypeMap_Add("wxFontEnumerator", "wxPyFontEnumerator");
    
    PyDict_SetItemString(d,"LANGUAGE_DEFAULT", SWIG_PyObj_FromInt((int)wxLANGUAGE_DEFAULT));
    PyDict_SetItemString(d,"LANGUAGE_UNKNOWN", SWIG_PyObj_FromInt((int)wxLANGUAGE_UNKNOWN));
    PyDict_SetItemString(d,"LANGUAGE_ABKHAZIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ABKHAZIAN));
    PyDict_SetItemString(d,"LANGUAGE_AFAR", SWIG_PyObj_FromInt((int)wxLANGUAGE_AFAR));
    PyDict_SetItemString(d,"LANGUAGE_AFRIKAANS", SWIG_PyObj_FromInt((int)wxLANGUAGE_AFRIKAANS));
    PyDict_SetItemString(d,"LANGUAGE_ALBANIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ALBANIAN));
    PyDict_SetItemString(d,"LANGUAGE_AMHARIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_AMHARIC));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_ALGERIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_ALGERIA));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_BAHRAIN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_BAHRAIN));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_EGYPT", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_EGYPT));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_IRAQ", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_IRAQ));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_JORDAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_JORDAN));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_KUWAIT", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_KUWAIT));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_LEBANON", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_LEBANON));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_LIBYA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_LIBYA));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_MOROCCO", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_MOROCCO));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_OMAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_OMAN));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_QATAR", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_QATAR));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_SAUDI_ARABIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_SAUDI_ARABIA));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_SUDAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_SUDAN));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_SYRIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_SYRIA));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_TUNISIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_TUNISIA));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_UAE", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_UAE));
    PyDict_SetItemString(d,"LANGUAGE_ARABIC_YEMEN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARABIC_YEMEN));
    PyDict_SetItemString(d,"LANGUAGE_ARMENIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ARMENIAN));
    PyDict_SetItemString(d,"LANGUAGE_ASSAMESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_ASSAMESE));
    PyDict_SetItemString(d,"LANGUAGE_AYMARA", SWIG_PyObj_FromInt((int)wxLANGUAGE_AYMARA));
    PyDict_SetItemString(d,"LANGUAGE_AZERI", SWIG_PyObj_FromInt((int)wxLANGUAGE_AZERI));
    PyDict_SetItemString(d,"LANGUAGE_AZERI_CYRILLIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_AZERI_CYRILLIC));
    PyDict_SetItemString(d,"LANGUAGE_AZERI_LATIN", SWIG_PyObj_FromInt((int)wxLANGUAGE_AZERI_LATIN));
    PyDict_SetItemString(d,"LANGUAGE_BASHKIR", SWIG_PyObj_FromInt((int)wxLANGUAGE_BASHKIR));
    PyDict_SetItemString(d,"LANGUAGE_BASQUE", SWIG_PyObj_FromInt((int)wxLANGUAGE_BASQUE));
    PyDict_SetItemString(d,"LANGUAGE_BELARUSIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_BELARUSIAN));
    PyDict_SetItemString(d,"LANGUAGE_BENGALI", SWIG_PyObj_FromInt((int)wxLANGUAGE_BENGALI));
    PyDict_SetItemString(d,"LANGUAGE_BHUTANI", SWIG_PyObj_FromInt((int)wxLANGUAGE_BHUTANI));
    PyDict_SetItemString(d,"LANGUAGE_BIHARI", SWIG_PyObj_FromInt((int)wxLANGUAGE_BIHARI));
    PyDict_SetItemString(d,"LANGUAGE_BISLAMA", SWIG_PyObj_FromInt((int)wxLANGUAGE_BISLAMA));
    PyDict_SetItemString(d,"LANGUAGE_BRETON", SWIG_PyObj_FromInt((int)wxLANGUAGE_BRETON));
    PyDict_SetItemString(d,"LANGUAGE_BULGARIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_BULGARIAN));
    PyDict_SetItemString(d,"LANGUAGE_BURMESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_BURMESE));
    PyDict_SetItemString(d,"LANGUAGE_CAMBODIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_CAMBODIAN));
    PyDict_SetItemString(d,"LANGUAGE_CATALAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_CATALAN));
    PyDict_SetItemString(d,"LANGUAGE_CHINESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_CHINESE));
    PyDict_SetItemString(d,"LANGUAGE_CHINESE_SIMPLIFIED", SWIG_PyObj_FromInt((int)wxLANGUAGE_CHINESE_SIMPLIFIED));
    PyDict_SetItemString(d,"LANGUAGE_CHINESE_TRADITIONAL", SWIG_PyObj_FromInt((int)wxLANGUAGE_CHINESE_TRADITIONAL));
    PyDict_SetItemString(d,"LANGUAGE_CHINESE_HONGKONG", SWIG_PyObj_FromInt((int)wxLANGUAGE_CHINESE_HONGKONG));
    PyDict_SetItemString(d,"LANGUAGE_CHINESE_MACAU", SWIG_PyObj_FromInt((int)wxLANGUAGE_CHINESE_MACAU));
    PyDict_SetItemString(d,"LANGUAGE_CHINESE_SINGAPORE", SWIG_PyObj_FromInt((int)wxLANGUAGE_CHINESE_SINGAPORE));
    PyDict_SetItemString(d,"LANGUAGE_CHINESE_TAIWAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_CHINESE_TAIWAN));
    PyDict_SetItemString(d,"LANGUAGE_CORSICAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_CORSICAN));
    PyDict_SetItemString(d,"LANGUAGE_CROATIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_CROATIAN));
    PyDict_SetItemString(d,"LANGUAGE_CZECH", SWIG_PyObj_FromInt((int)wxLANGUAGE_CZECH));
    PyDict_SetItemString(d,"LANGUAGE_DANISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_DANISH));
    PyDict_SetItemString(d,"LANGUAGE_DUTCH", SWIG_PyObj_FromInt((int)wxLANGUAGE_DUTCH));
    PyDict_SetItemString(d,"LANGUAGE_DUTCH_BELGIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_DUTCH_BELGIAN));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_UK", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_UK));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_US", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_US));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_AUSTRALIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_AUSTRALIA));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_BELIZE", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_BELIZE));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_BOTSWANA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_BOTSWANA));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_CANADA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_CANADA));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_CARIBBEAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_CARIBBEAN));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_DENMARK", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_DENMARK));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_EIRE", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_EIRE));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_JAMAICA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_JAMAICA));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_NEW_ZEALAND", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_NEW_ZEALAND));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_PHILIPPINES", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_PHILIPPINES));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_SOUTH_AFRICA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_SOUTH_AFRICA));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_TRINIDAD", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_TRINIDAD));
    PyDict_SetItemString(d,"LANGUAGE_ENGLISH_ZIMBABWE", SWIG_PyObj_FromInt((int)wxLANGUAGE_ENGLISH_ZIMBABWE));
    PyDict_SetItemString(d,"LANGUAGE_ESPERANTO", SWIG_PyObj_FromInt((int)wxLANGUAGE_ESPERANTO));
    PyDict_SetItemString(d,"LANGUAGE_ESTONIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ESTONIAN));
    PyDict_SetItemString(d,"LANGUAGE_FAEROESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_FAEROESE));
    PyDict_SetItemString(d,"LANGUAGE_FARSI", SWIG_PyObj_FromInt((int)wxLANGUAGE_FARSI));
    PyDict_SetItemString(d,"LANGUAGE_FIJI", SWIG_PyObj_FromInt((int)wxLANGUAGE_FIJI));
    PyDict_SetItemString(d,"LANGUAGE_FINNISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_FINNISH));
    PyDict_SetItemString(d,"LANGUAGE_FRENCH", SWIG_PyObj_FromInt((int)wxLANGUAGE_FRENCH));
    PyDict_SetItemString(d,"LANGUAGE_FRENCH_BELGIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_FRENCH_BELGIAN));
    PyDict_SetItemString(d,"LANGUAGE_FRENCH_CANADIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_FRENCH_CANADIAN));
    PyDict_SetItemString(d,"LANGUAGE_FRENCH_LUXEMBOURG", SWIG_PyObj_FromInt((int)wxLANGUAGE_FRENCH_LUXEMBOURG));
    PyDict_SetItemString(d,"LANGUAGE_FRENCH_MONACO", SWIG_PyObj_FromInt((int)wxLANGUAGE_FRENCH_MONACO));
    PyDict_SetItemString(d,"LANGUAGE_FRENCH_SWISS", SWIG_PyObj_FromInt((int)wxLANGUAGE_FRENCH_SWISS));
    PyDict_SetItemString(d,"LANGUAGE_FRISIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_FRISIAN));
    PyDict_SetItemString(d,"LANGUAGE_GALICIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_GALICIAN));
    PyDict_SetItemString(d,"LANGUAGE_GEORGIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_GEORGIAN));
    PyDict_SetItemString(d,"LANGUAGE_GERMAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_GERMAN));
    PyDict_SetItemString(d,"LANGUAGE_GERMAN_AUSTRIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_GERMAN_AUSTRIAN));
    PyDict_SetItemString(d,"LANGUAGE_GERMAN_BELGIUM", SWIG_PyObj_FromInt((int)wxLANGUAGE_GERMAN_BELGIUM));
    PyDict_SetItemString(d,"LANGUAGE_GERMAN_LIECHTENSTEIN", SWIG_PyObj_FromInt((int)wxLANGUAGE_GERMAN_LIECHTENSTEIN));
    PyDict_SetItemString(d,"LANGUAGE_GERMAN_LUXEMBOURG", SWIG_PyObj_FromInt((int)wxLANGUAGE_GERMAN_LUXEMBOURG));
    PyDict_SetItemString(d,"LANGUAGE_GERMAN_SWISS", SWIG_PyObj_FromInt((int)wxLANGUAGE_GERMAN_SWISS));
    PyDict_SetItemString(d,"LANGUAGE_GREEK", SWIG_PyObj_FromInt((int)wxLANGUAGE_GREEK));
    PyDict_SetItemString(d,"LANGUAGE_GREENLANDIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_GREENLANDIC));
    PyDict_SetItemString(d,"LANGUAGE_GUARANI", SWIG_PyObj_FromInt((int)wxLANGUAGE_GUARANI));
    PyDict_SetItemString(d,"LANGUAGE_GUJARATI", SWIG_PyObj_FromInt((int)wxLANGUAGE_GUJARATI));
    PyDict_SetItemString(d,"LANGUAGE_HAUSA", SWIG_PyObj_FromInt((int)wxLANGUAGE_HAUSA));
    PyDict_SetItemString(d,"LANGUAGE_HEBREW", SWIG_PyObj_FromInt((int)wxLANGUAGE_HEBREW));
    PyDict_SetItemString(d,"LANGUAGE_HINDI", SWIG_PyObj_FromInt((int)wxLANGUAGE_HINDI));
    PyDict_SetItemString(d,"LANGUAGE_HUNGARIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_HUNGARIAN));
    PyDict_SetItemString(d,"LANGUAGE_ICELANDIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_ICELANDIC));
    PyDict_SetItemString(d,"LANGUAGE_INDONESIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_INDONESIAN));
    PyDict_SetItemString(d,"LANGUAGE_INTERLINGUA", SWIG_PyObj_FromInt((int)wxLANGUAGE_INTERLINGUA));
    PyDict_SetItemString(d,"LANGUAGE_INTERLINGUE", SWIG_PyObj_FromInt((int)wxLANGUAGE_INTERLINGUE));
    PyDict_SetItemString(d,"LANGUAGE_INUKTITUT", SWIG_PyObj_FromInt((int)wxLANGUAGE_INUKTITUT));
    PyDict_SetItemString(d,"LANGUAGE_INUPIAK", SWIG_PyObj_FromInt((int)wxLANGUAGE_INUPIAK));
    PyDict_SetItemString(d,"LANGUAGE_IRISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_IRISH));
    PyDict_SetItemString(d,"LANGUAGE_ITALIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ITALIAN));
    PyDict_SetItemString(d,"LANGUAGE_ITALIAN_SWISS", SWIG_PyObj_FromInt((int)wxLANGUAGE_ITALIAN_SWISS));
    PyDict_SetItemString(d,"LANGUAGE_JAPANESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_JAPANESE));
    PyDict_SetItemString(d,"LANGUAGE_JAVANESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_JAVANESE));
    PyDict_SetItemString(d,"LANGUAGE_KANNADA", SWIG_PyObj_FromInt((int)wxLANGUAGE_KANNADA));
    PyDict_SetItemString(d,"LANGUAGE_KASHMIRI", SWIG_PyObj_FromInt((int)wxLANGUAGE_KASHMIRI));
    PyDict_SetItemString(d,"LANGUAGE_KASHMIRI_INDIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_KASHMIRI_INDIA));
    PyDict_SetItemString(d,"LANGUAGE_KAZAKH", SWIG_PyObj_FromInt((int)wxLANGUAGE_KAZAKH));
    PyDict_SetItemString(d,"LANGUAGE_KERNEWEK", SWIG_PyObj_FromInt((int)wxLANGUAGE_KERNEWEK));
    PyDict_SetItemString(d,"LANGUAGE_KINYARWANDA", SWIG_PyObj_FromInt((int)wxLANGUAGE_KINYARWANDA));
    PyDict_SetItemString(d,"LANGUAGE_KIRGHIZ", SWIG_PyObj_FromInt((int)wxLANGUAGE_KIRGHIZ));
    PyDict_SetItemString(d,"LANGUAGE_KIRUNDI", SWIG_PyObj_FromInt((int)wxLANGUAGE_KIRUNDI));
    PyDict_SetItemString(d,"LANGUAGE_KONKANI", SWIG_PyObj_FromInt((int)wxLANGUAGE_KONKANI));
    PyDict_SetItemString(d,"LANGUAGE_KOREAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_KOREAN));
    PyDict_SetItemString(d,"LANGUAGE_KURDISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_KURDISH));
    PyDict_SetItemString(d,"LANGUAGE_LAOTHIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_LAOTHIAN));
    PyDict_SetItemString(d,"LANGUAGE_LATIN", SWIG_PyObj_FromInt((int)wxLANGUAGE_LATIN));
    PyDict_SetItemString(d,"LANGUAGE_LATVIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_LATVIAN));
    PyDict_SetItemString(d,"LANGUAGE_LINGALA", SWIG_PyObj_FromInt((int)wxLANGUAGE_LINGALA));
    PyDict_SetItemString(d,"LANGUAGE_LITHUANIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_LITHUANIAN));
    PyDict_SetItemString(d,"LANGUAGE_MACEDONIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_MACEDONIAN));
    PyDict_SetItemString(d,"LANGUAGE_MALAGASY", SWIG_PyObj_FromInt((int)wxLANGUAGE_MALAGASY));
    PyDict_SetItemString(d,"LANGUAGE_MALAY", SWIG_PyObj_FromInt((int)wxLANGUAGE_MALAY));
    PyDict_SetItemString(d,"LANGUAGE_MALAYALAM", SWIG_PyObj_FromInt((int)wxLANGUAGE_MALAYALAM));
    PyDict_SetItemString(d,"LANGUAGE_MALAY_BRUNEI_DARUSSALAM", SWIG_PyObj_FromInt((int)wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM));
    PyDict_SetItemString(d,"LANGUAGE_MALAY_MALAYSIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_MALAY_MALAYSIA));
    PyDict_SetItemString(d,"LANGUAGE_MALTESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_MALTESE));
    PyDict_SetItemString(d,"LANGUAGE_MANIPURI", SWIG_PyObj_FromInt((int)wxLANGUAGE_MANIPURI));
    PyDict_SetItemString(d,"LANGUAGE_MAORI", SWIG_PyObj_FromInt((int)wxLANGUAGE_MAORI));
    PyDict_SetItemString(d,"LANGUAGE_MARATHI", SWIG_PyObj_FromInt((int)wxLANGUAGE_MARATHI));
    PyDict_SetItemString(d,"LANGUAGE_MOLDAVIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_MOLDAVIAN));
    PyDict_SetItemString(d,"LANGUAGE_MONGOLIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_MONGOLIAN));
    PyDict_SetItemString(d,"LANGUAGE_NAURU", SWIG_PyObj_FromInt((int)wxLANGUAGE_NAURU));
    PyDict_SetItemString(d,"LANGUAGE_NEPALI", SWIG_PyObj_FromInt((int)wxLANGUAGE_NEPALI));
    PyDict_SetItemString(d,"LANGUAGE_NEPALI_INDIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_NEPALI_INDIA));
    PyDict_SetItemString(d,"LANGUAGE_NORWEGIAN_BOKMAL", SWIG_PyObj_FromInt((int)wxLANGUAGE_NORWEGIAN_BOKMAL));
    PyDict_SetItemString(d,"LANGUAGE_NORWEGIAN_NYNORSK", SWIG_PyObj_FromInt((int)wxLANGUAGE_NORWEGIAN_NYNORSK));
    PyDict_SetItemString(d,"LANGUAGE_OCCITAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_OCCITAN));
    PyDict_SetItemString(d,"LANGUAGE_ORIYA", SWIG_PyObj_FromInt((int)wxLANGUAGE_ORIYA));
    PyDict_SetItemString(d,"LANGUAGE_OROMO", SWIG_PyObj_FromInt((int)wxLANGUAGE_OROMO));
    PyDict_SetItemString(d,"LANGUAGE_PASHTO", SWIG_PyObj_FromInt((int)wxLANGUAGE_PASHTO));
    PyDict_SetItemString(d,"LANGUAGE_POLISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_POLISH));
    PyDict_SetItemString(d,"LANGUAGE_PORTUGUESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_PORTUGUESE));
    PyDict_SetItemString(d,"LANGUAGE_PORTUGUESE_BRAZILIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_PORTUGUESE_BRAZILIAN));
    PyDict_SetItemString(d,"LANGUAGE_PUNJABI", SWIG_PyObj_FromInt((int)wxLANGUAGE_PUNJABI));
    PyDict_SetItemString(d,"LANGUAGE_QUECHUA", SWIG_PyObj_FromInt((int)wxLANGUAGE_QUECHUA));
    PyDict_SetItemString(d,"LANGUAGE_RHAETO_ROMANCE", SWIG_PyObj_FromInt((int)wxLANGUAGE_RHAETO_ROMANCE));
    PyDict_SetItemString(d,"LANGUAGE_ROMANIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_ROMANIAN));
    PyDict_SetItemString(d,"LANGUAGE_RUSSIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_RUSSIAN));
    PyDict_SetItemString(d,"LANGUAGE_RUSSIAN_UKRAINE", SWIG_PyObj_FromInt((int)wxLANGUAGE_RUSSIAN_UKRAINE));
    PyDict_SetItemString(d,"LANGUAGE_SAMOAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_SAMOAN));
    PyDict_SetItemString(d,"LANGUAGE_SANGHO", SWIG_PyObj_FromInt((int)wxLANGUAGE_SANGHO));
    PyDict_SetItemString(d,"LANGUAGE_SANSKRIT", SWIG_PyObj_FromInt((int)wxLANGUAGE_SANSKRIT));
    PyDict_SetItemString(d,"LANGUAGE_SCOTS_GAELIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_SCOTS_GAELIC));
    PyDict_SetItemString(d,"LANGUAGE_SERBIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_SERBIAN));
    PyDict_SetItemString(d,"LANGUAGE_SERBIAN_CYRILLIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_SERBIAN_CYRILLIC));
    PyDict_SetItemString(d,"LANGUAGE_SERBIAN_LATIN", SWIG_PyObj_FromInt((int)wxLANGUAGE_SERBIAN_LATIN));
    PyDict_SetItemString(d,"LANGUAGE_SERBO_CROATIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_SERBO_CROATIAN));
    PyDict_SetItemString(d,"LANGUAGE_SESOTHO", SWIG_PyObj_FromInt((int)wxLANGUAGE_SESOTHO));
    PyDict_SetItemString(d,"LANGUAGE_SETSWANA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SETSWANA));
    PyDict_SetItemString(d,"LANGUAGE_SHONA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SHONA));
    PyDict_SetItemString(d,"LANGUAGE_SINDHI", SWIG_PyObj_FromInt((int)wxLANGUAGE_SINDHI));
    PyDict_SetItemString(d,"LANGUAGE_SINHALESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_SINHALESE));
    PyDict_SetItemString(d,"LANGUAGE_SISWATI", SWIG_PyObj_FromInt((int)wxLANGUAGE_SISWATI));
    PyDict_SetItemString(d,"LANGUAGE_SLOVAK", SWIG_PyObj_FromInt((int)wxLANGUAGE_SLOVAK));
    PyDict_SetItemString(d,"LANGUAGE_SLOVENIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_SLOVENIAN));
    PyDict_SetItemString(d,"LANGUAGE_SOMALI", SWIG_PyObj_FromInt((int)wxLANGUAGE_SOMALI));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_ARGENTINA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_ARGENTINA));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_BOLIVIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_BOLIVIA));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_CHILE", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_CHILE));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_COLOMBIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_COLOMBIA));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_COSTA_RICA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_COSTA_RICA));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_DOMINICAN_REPUBLIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_ECUADOR", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_ECUADOR));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_EL_SALVADOR", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_EL_SALVADOR));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_GUATEMALA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_GUATEMALA));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_HONDURAS", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_HONDURAS));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_MEXICAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_MEXICAN));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_MODERN", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_MODERN));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_NICARAGUA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_NICARAGUA));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_PANAMA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_PANAMA));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_PARAGUAY", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_PARAGUAY));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_PERU", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_PERU));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_PUERTO_RICO", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_PUERTO_RICO));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_URUGUAY", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_URUGUAY));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_US", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_US));
    PyDict_SetItemString(d,"LANGUAGE_SPANISH_VENEZUELA", SWIG_PyObj_FromInt((int)wxLANGUAGE_SPANISH_VENEZUELA));
    PyDict_SetItemString(d,"LANGUAGE_SUNDANESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_SUNDANESE));
    PyDict_SetItemString(d,"LANGUAGE_SWAHILI", SWIG_PyObj_FromInt((int)wxLANGUAGE_SWAHILI));
    PyDict_SetItemString(d,"LANGUAGE_SWEDISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_SWEDISH));
    PyDict_SetItemString(d,"LANGUAGE_SWEDISH_FINLAND", SWIG_PyObj_FromInt((int)wxLANGUAGE_SWEDISH_FINLAND));
    PyDict_SetItemString(d,"LANGUAGE_TAGALOG", SWIG_PyObj_FromInt((int)wxLANGUAGE_TAGALOG));
    PyDict_SetItemString(d,"LANGUAGE_TAJIK", SWIG_PyObj_FromInt((int)wxLANGUAGE_TAJIK));
    PyDict_SetItemString(d,"LANGUAGE_TAMIL", SWIG_PyObj_FromInt((int)wxLANGUAGE_TAMIL));
    PyDict_SetItemString(d,"LANGUAGE_TATAR", SWIG_PyObj_FromInt((int)wxLANGUAGE_TATAR));
    PyDict_SetItemString(d,"LANGUAGE_TELUGU", SWIG_PyObj_FromInt((int)wxLANGUAGE_TELUGU));
    PyDict_SetItemString(d,"LANGUAGE_THAI", SWIG_PyObj_FromInt((int)wxLANGUAGE_THAI));
    PyDict_SetItemString(d,"LANGUAGE_TIBETAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_TIBETAN));
    PyDict_SetItemString(d,"LANGUAGE_TIGRINYA", SWIG_PyObj_FromInt((int)wxLANGUAGE_TIGRINYA));
    PyDict_SetItemString(d,"LANGUAGE_TONGA", SWIG_PyObj_FromInt((int)wxLANGUAGE_TONGA));
    PyDict_SetItemString(d,"LANGUAGE_TSONGA", SWIG_PyObj_FromInt((int)wxLANGUAGE_TSONGA));
    PyDict_SetItemString(d,"LANGUAGE_TURKISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_TURKISH));
    PyDict_SetItemString(d,"LANGUAGE_TURKMEN", SWIG_PyObj_FromInt((int)wxLANGUAGE_TURKMEN));
    PyDict_SetItemString(d,"LANGUAGE_TWI", SWIG_PyObj_FromInt((int)wxLANGUAGE_TWI));
    PyDict_SetItemString(d,"LANGUAGE_UIGHUR", SWIG_PyObj_FromInt((int)wxLANGUAGE_UIGHUR));
    PyDict_SetItemString(d,"LANGUAGE_UKRAINIAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_UKRAINIAN));
    PyDict_SetItemString(d,"LANGUAGE_URDU", SWIG_PyObj_FromInt((int)wxLANGUAGE_URDU));
    PyDict_SetItemString(d,"LANGUAGE_URDU_INDIA", SWIG_PyObj_FromInt((int)wxLANGUAGE_URDU_INDIA));
    PyDict_SetItemString(d,"LANGUAGE_URDU_PAKISTAN", SWIG_PyObj_FromInt((int)wxLANGUAGE_URDU_PAKISTAN));
    PyDict_SetItemString(d,"LANGUAGE_UZBEK", SWIG_PyObj_FromInt((int)wxLANGUAGE_UZBEK));
    PyDict_SetItemString(d,"LANGUAGE_UZBEK_CYRILLIC", SWIG_PyObj_FromInt((int)wxLANGUAGE_UZBEK_CYRILLIC));
    PyDict_SetItemString(d,"LANGUAGE_UZBEK_LATIN", SWIG_PyObj_FromInt((int)wxLANGUAGE_UZBEK_LATIN));
    PyDict_SetItemString(d,"LANGUAGE_VIETNAMESE", SWIG_PyObj_FromInt((int)wxLANGUAGE_VIETNAMESE));
    PyDict_SetItemString(d,"LANGUAGE_VOLAPUK", SWIG_PyObj_FromInt((int)wxLANGUAGE_VOLAPUK));
    PyDict_SetItemString(d,"LANGUAGE_WELSH", SWIG_PyObj_FromInt((int)wxLANGUAGE_WELSH));
    PyDict_SetItemString(d,"LANGUAGE_WOLOF", SWIG_PyObj_FromInt((int)wxLANGUAGE_WOLOF));
    PyDict_SetItemString(d,"LANGUAGE_XHOSA", SWIG_PyObj_FromInt((int)wxLANGUAGE_XHOSA));
    PyDict_SetItemString(d,"LANGUAGE_YIDDISH", SWIG_PyObj_FromInt((int)wxLANGUAGE_YIDDISH));
    PyDict_SetItemString(d,"LANGUAGE_YORUBA", SWIG_PyObj_FromInt((int)wxLANGUAGE_YORUBA));
    PyDict_SetItemString(d,"LANGUAGE_ZHUANG", SWIG_PyObj_FromInt((int)wxLANGUAGE_ZHUANG));
    PyDict_SetItemString(d,"LANGUAGE_ZULU", SWIG_PyObj_FromInt((int)wxLANGUAGE_ZULU));
    PyDict_SetItemString(d,"LANGUAGE_USER_DEFINED", SWIG_PyObj_FromInt((int)wxLANGUAGE_USER_DEFINED));
    PyDict_SetItemString(d,"LOCALE_CAT_NUMBER", SWIG_PyObj_FromInt((int)wxLOCALE_CAT_NUMBER));
    PyDict_SetItemString(d,"LOCALE_CAT_DATE", SWIG_PyObj_FromInt((int)wxLOCALE_CAT_DATE));
    PyDict_SetItemString(d,"LOCALE_CAT_MONEY", SWIG_PyObj_FromInt((int)wxLOCALE_CAT_MONEY));
    PyDict_SetItemString(d,"LOCALE_CAT_MAX", SWIG_PyObj_FromInt((int)wxLOCALE_CAT_MAX));
    PyDict_SetItemString(d,"LOCALE_THOUSANDS_SEP", SWIG_PyObj_FromInt((int)wxLOCALE_THOUSANDS_SEP));
    PyDict_SetItemString(d,"LOCALE_DECIMAL_POINT", SWIG_PyObj_FromInt((int)wxLOCALE_DECIMAL_POINT));
    PyDict_SetItemString(d,"LOCALE_LOAD_DEFAULT", SWIG_PyObj_FromInt((int)wxLOCALE_LOAD_DEFAULT));
    PyDict_SetItemString(d,"LOCALE_CONV_ENCODING", SWIG_PyObj_FromInt((int)wxLOCALE_CONV_ENCODING));
    PyDict_SetItemString(d,"CONVERT_STRICT", SWIG_PyObj_FromInt((int)wxCONVERT_STRICT));
    PyDict_SetItemString(d,"CONVERT_SUBSTITUTE", SWIG_PyObj_FromInt((int)wxCONVERT_SUBSTITUTE));
    PyDict_SetItemString(d,"PLATFORM_CURRENT", SWIG_PyObj_FromInt((int)wxPLATFORM_CURRENT));
    PyDict_SetItemString(d,"PLATFORM_UNIX", SWIG_PyObj_FromInt((int)wxPLATFORM_UNIX));
    PyDict_SetItemString(d,"PLATFORM_WINDOWS", SWIG_PyObj_FromInt((int)wxPLATFORM_WINDOWS));
    PyDict_SetItemString(d,"PLATFORM_OS2", SWIG_PyObj_FromInt((int)wxPLATFORM_OS2));
    PyDict_SetItemString(d,"PLATFORM_MAC", SWIG_PyObj_FromInt((int)wxPLATFORM_MAC));
    PyDict_SetItemString(d,"IMAGELIST_DRAW_NORMAL", SWIG_PyObj_FromInt((int)wxIMAGELIST_DRAW_NORMAL));
    PyDict_SetItemString(d,"IMAGELIST_DRAW_TRANSPARENT", SWIG_PyObj_FromInt((int)wxIMAGELIST_DRAW_TRANSPARENT));
    PyDict_SetItemString(d,"IMAGELIST_DRAW_SELECTED", SWIG_PyObj_FromInt((int)wxIMAGELIST_DRAW_SELECTED));
    PyDict_SetItemString(d,"IMAGELIST_DRAW_FOCUSED", SWIG_PyObj_FromInt((int)wxIMAGELIST_DRAW_FOCUSED));
    PyDict_SetItemString(d,"IMAGE_LIST_NORMAL", SWIG_PyObj_FromInt((int)wxIMAGE_LIST_NORMAL));
    PyDict_SetItemString(d,"IMAGE_LIST_SMALL", SWIG_PyObj_FromInt((int)wxIMAGE_LIST_SMALL));
    PyDict_SetItemString(d,"IMAGE_LIST_STATE", SWIG_PyObj_FromInt((int)wxIMAGE_LIST_STATE));
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"NORMAL_FONT",_wrap_NORMAL_FONT_get, _wrap_NORMAL_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SMALL_FONT",_wrap_SMALL_FONT_get, _wrap_SMALL_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ITALIC_FONT",_wrap_ITALIC_FONT_get, _wrap_ITALIC_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SWISS_FONT",_wrap_SWISS_FONT_get, _wrap_SWISS_FONT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RED_PEN",_wrap_RED_PEN_get, _wrap_RED_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CYAN_PEN",_wrap_CYAN_PEN_get, _wrap_CYAN_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREEN_PEN",_wrap_GREEN_PEN_get, _wrap_GREEN_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK_PEN",_wrap_BLACK_PEN_get, _wrap_BLACK_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"WHITE_PEN",_wrap_WHITE_PEN_get, _wrap_WHITE_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TRANSPARENT_PEN",_wrap_TRANSPARENT_PEN_get, _wrap_TRANSPARENT_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK_DASHED_PEN",_wrap_BLACK_DASHED_PEN_get, _wrap_BLACK_DASHED_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREY_PEN",_wrap_GREY_PEN_get, _wrap_GREY_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"MEDIUM_GREY_PEN",_wrap_MEDIUM_GREY_PEN_get, _wrap_MEDIUM_GREY_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"LIGHT_GREY_PEN",_wrap_LIGHT_GREY_PEN_get, _wrap_LIGHT_GREY_PEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLUE_BRUSH",_wrap_BLUE_BRUSH_get, _wrap_BLUE_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREEN_BRUSH",_wrap_GREEN_BRUSH_get, _wrap_GREEN_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"WHITE_BRUSH",_wrap_WHITE_BRUSH_get, _wrap_WHITE_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK_BRUSH",_wrap_BLACK_BRUSH_get, _wrap_BLACK_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TRANSPARENT_BRUSH",_wrap_TRANSPARENT_BRUSH_get, _wrap_TRANSPARENT_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CYAN_BRUSH",_wrap_CYAN_BRUSH_get, _wrap_CYAN_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RED_BRUSH",_wrap_RED_BRUSH_get, _wrap_RED_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREY_BRUSH",_wrap_GREY_BRUSH_get, _wrap_GREY_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"MEDIUM_GREY_BRUSH",_wrap_MEDIUM_GREY_BRUSH_get, _wrap_MEDIUM_GREY_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"LIGHT_GREY_BRUSH",_wrap_LIGHT_GREY_BRUSH_get, _wrap_LIGHT_GREY_BRUSH_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLACK",_wrap_BLACK_get, _wrap_BLACK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"WHITE",_wrap_WHITE_get, _wrap_WHITE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RED",_wrap_RED_get, _wrap_RED_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BLUE",_wrap_BLUE_get, _wrap_BLUE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GREEN",_wrap_GREEN_get, _wrap_GREEN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CYAN",_wrap_CYAN_get, _wrap_CYAN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"LIGHT_GREY",_wrap_LIGHT_GREY_get, _wrap_LIGHT_GREY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"STANDARD_CURSOR",_wrap_STANDARD_CURSOR_get, _wrap_STANDARD_CURSOR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"HOURGLASS_CURSOR",_wrap_HOURGLASS_CURSOR_get, _wrap_HOURGLASS_CURSOR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"CROSS_CURSOR",_wrap_CROSS_CURSOR_get, _wrap_CROSS_CURSOR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullBitmap",_wrap_NullBitmap_get, _wrap_NullBitmap_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullIcon",_wrap_NullIcon_get, _wrap_NullIcon_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullCursor",_wrap_NullCursor_get, _wrap_NullCursor_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullPen",_wrap_NullPen_get, _wrap_NullPen_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullBrush",_wrap_NullBrush_get, _wrap_NullBrush_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullPalette",_wrap_NullPalette_get, _wrap_NullPalette_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullFont",_wrap_NullFont_get, _wrap_NullFont_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NullColour",_wrap_NullColour_get, _wrap_NullColour_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TheFontList",_wrap_TheFontList_get, _wrap_TheFontList_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ThePenList",_wrap_ThePenList_get, _wrap_ThePenList_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TheBrushList",_wrap_TheBrushList_get, _wrap_TheBrushList_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TheColourDatabase",_wrap_TheColourDatabase_get, _wrap_TheColourDatabase_set);
    
    // Work around a chicken/egg problem in drawlist.cpp
    wxPyDrawList_SetAPIPtr();
    
}

