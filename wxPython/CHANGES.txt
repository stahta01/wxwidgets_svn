CHANGES.txt for wxPython

----------------------------------------------------------------------

2.3.2
-----
Added EVT_HELP, EVT_HELP_RANGE, EVT_DETAILED_HELP,
EVT_DETAILED_HELP_RANGE, EVT_CONTEXT_MENU, wxHelpEvent,
wxContextMenuEvent, wxContextHelp, wxContextHelpButton, wxTipWindow,
and a demo to show them in action.

Deprecated PyShell and PyShellWindow, added a snapshot of PyCrust (see
http://sourceforge.net/projects/pycrust/. )

Added the new virtual list capabilities to wxListCtrl.

Added a wxSTC style editor from Riaan Booysen to the sample apps.

Added XRCed to the wxPython Tools directory, contributed by Roman
Rolinsky.

Added a new "constructor" to most of the window classes that calls the
default C++ contructor, (the one with no parameters) and also added the
coresponding Create(...) method.  This allows you to do a 2-step
creation of windows which is sometimes required for doing things such
as setting extended style flags before the window is created, or for
passing the object to the XRC resource system to be created from the
resource.  The name of the new "constructor" is the original name of
the class with a "Pre" in it.  For example, wxPreWindow, wxPreFrame,
etc.

Updated to version 1.40 of Scintilla and updated wxStyledTextCtrl
accordingly.  While doing this update I dropped the wxLB_SORT style
from the wxListBox created for the AutoComplete functionality.  This
means that you will have to sort the keyword lists yourself, but you
are free to do case sensitive or case insensitive sorts and set the
wxSTC flag accordingly.

Updated wxColumnSorterMixin to also be able to place sort icons on the
column headers, and updated the wxListCtrl demo to show it off by
using wxColumnSorterMixin.

Added wxGenBitmapTextButton, TablePrint, etc. contribs from Lorne White.

Added wxNativeFontInfo and wxFontMapper.

Added pySketch to the samples.

Significantly changed how the Python interpreter lock and thread state
are managed, which should fix the problem of running on a
multi-processor machine.

Added wxPyLog so log targets can be created in Python to handle log
messages however is wished.  See demo/Main.py for an example.

Added wxFindReplaceDialog.

The second phase of OOR is implemented (for wxEvtHandler and derived
classes at least.)  This means that finctions and methods that return
an object derived from wxEvtHandler that was originally created in
Python, will return the original python object (if it still exists)
instead of letting SWIG wrap a new shadow object around the original
C++ pointer.

Added some optimization methods to wxDC: GetBoundingBox, DrawLineList,
DrawPointList.

Added a set of sophisticated Error Dialogs from Chris Fama.

Added wxRightTextCtrl from Josu Oyanguren to wxPython.lib for aligning
text in a wxTextCtrl to the right side.

Added wxURLDataObject and and example showing drag and drop of URLs to
and from web browsers.  It's still not 100% bullet-proof for all types
of browsers, but it works for the majority of cases with the popular
browsers on Windows.  On wxGTK it seems that only Netscape 4.x works,
if anybody has any suggestions about this please bring it up on the
wx-dev list.

Added wxStopWatch.

Added wxMimeTypesManager and wxFileType.

Passing None for the handler parameter to one of the EVT_** functions
will now Disconnect the event.

Added wxPopupWindow and wxPopupTransientWindow.

Added wxFileHistory.

Added wxDynamicSashWindow, whcih allows you to endlessly split widnows
by dragging a little tab next to the scrollbars.  Added a demo to show
this and also the ability of multiple wxStyledStectCtrls to share the
same document.




2.3.1
-----
Added EVT_GRID_EDITOR_CREATED and wxGridEditorCreatedEvent so the user
code can get access to the edit control when it is created, (to push
on a custom event handler for example.)

Added wxTextAttr class and SetStyle, SetDefaultStyle and
GetDefaultStyle methods to wxTextCtrl.

Added ability to use xml resource files.  Still need to add ability to
subclass wxXmlResourceHandler, etc...

Added wxGridAutoEditMixin to the mixins library package.

Made ColourSelect be derived from wxButton.

Fixed img2py to work correctly with Python 2.1.

Added enhanced wxVTKRenderWindow by Prabhu Ramachandran



2.3.0
-----
Removed initial startup dependency on the OpenGL DLLs so only the
glcanvasc.pyd depends on them, (on wxMSW.)

Changed wxFont, wxPen, wxBrush to not implicitly use the
wxThe[Font|Pen|Brush]List objects behind the scenes, but to use normal
ctor and dtors.

Exposed the wxThe[Font|Pen|Brush]List to wxPython.

Also added wxTheColourDatabase and added a library module (in the
wxPython.lib.colourdb module) to load LOTS more colour names into the
colour database.

Added wxWakeUpMainThread, wxMutexGuiEnter, wxMutexGuiLeave,
wxMutexGuiLocker and wxThread_IsMain to assist with dealing with GUI
access from non-GUI threads.

wxPyOnDemandOutputWindow is now (more) thread safe if non-GUI threads
use print, sys.stdout.write, etc.

Added CreateTextSizer and CreateButtonSizer to wxDialog

Added wxPython/lib/infoframe.py from Chris Fama.  It contains a class
that can be used in place of wxPyOnDemandOutputWindow.

Added colourselect.py, imagebrowser.py and an updated calendar.py to
wxPython/lib from Lorne White.

Added patch to wxPoint_LIST_helper from Tim Hochberg that should make
it gobs faster in certain situations.

Added tools that will take an image file in a wx supported format and
convert it to data embedded in a Python source file.  The image is
converted to XPM format which is essentially a list of strings
containing info about each pixel.  The image's transparency mask is
included, if there is one, or a mask can be added if a mask colour is
specified on the command line.  It is then pickled and optionally
compressed and written to a Python source file along with functions to
convert it to either a wxBitmap or a wxImage.  See
wxPython/demo/images.py for examples, and wxPython/Tools/img2py.py for
the implementation.

Fixed wxStyledTextCtrl to be much faster on wxGTK.  There was some
experimental code that got left in place that ended up causing way too
many refreshes.

A couple more hacks in my_distutils.py so wxPython can be built with
the distutils that comes with Python 2.1.

Added a ton of missing methods for wxPrintData.

Switched to InnoSetup for MSW distributions.

Added wxToggleButton.

Fixed bug that prevented wxTreeCtrl.OnCompareItems from being called.

Added some methods to wxGrid:
      GetCellHighlightPenWidth
      GetCellHighlightROPenWidth
      SetCellHighlightPenWidth
      SetCellHighlightROPenWidth
      GetGridWindow
      GetGridRowLabelWindow
      GetGridColLabelWindow
      GetGridCornerLabelWindow

Added wxGetClientDisplayRect which on wxMSW returns a wxRect
representing the area on screen not occupied by the taskbar and such.
On other platforms it is equivallent to wxGetDisplaySize.


***---***---***---***---***---***---***---***---***---***---***---
   Implemented the first phase of OOR (Original Object Return).  See
   the text in the demo for more details of what this means, but in a
   nutshell methods such as wxWindow.GetParent or FindWindowById will
   now return a shadow object of the proper type if it can.  By
   "proper type" I mean that if the wxWindow pointer returned from
   FindWindowById really points to a wxButton then the Python object
   constructed will be of a wxButtonPtr class instead of wxWindowPtr
   as before.  This should reduce or eliminiate the need for
   wxPyTypeCast.  (Woo Hoo!)  The objects returned are still not the
   original Python object, but that is the next step.  (Although it
   will probably only work on Python 2.1 and beyond because it will
   use weak references.)

   This first phase of the OOR plan is fairly significant and has
   required a lot of changes all over wxPython, most of which should
   be transparent to you, however I'm not 100% sure that it didn't
   introduce any new bugs that are hiding somewhere and didn't get
   stomped on during my testing.  So please be sure to test everything
   thoroughly when you install this version and be sure to report any
   object-type related oddities to me.
***---***---***---***---***---***---***---***---***---***---***---

There is now a wxObject class that most other classes derive from like
in C++, but the methods provided don't really match but are wxPython
specific.  It could have been added long ago but OOR required it so it
finally got done.

Finally added wxPyLineShape.GetLineControlPoints, which has been on my
list for a while.  The above OOR modification made this easier.

Fixed the __cmp__ methods for wxPoint and others.

Added wxWave.

Added the wxPython.lib.mixins package to the library, it is where
useful mix-in classes can be placed.  Currently there is one to help
make the columns in a wxListCtrl sortable, and the MagicIMageList from
Mike Fletcher.  If you have any custom code that can be factored out
of existing classes into a mix-in that would be useful to others
please send it to me for inclusion in this package.

Added a few little sample applications to help newbies to get started
by having smaller functional apps to play with.  They can be found in
wxPython/samples.




2.2.6
-----

No changes happened in the Python wrappers for this release, only
changes and fixes in the wxWindows library.



2.2.5
-----

New typemaps for wxString when compiling for Python 2.0 and beyond
that allow Unicode objects to be passed as well as String objects.  If
a Unicode object is passed PyString_AsStringAndSize is used to convert
it to a wxString using the default encoding.

Fixed the generic buttons so tool tips work for them.

Fixed a bug in the demo's tree control.

Added a listbox to the listbox demo that shows how to find items with
a matching prefix as keys are typed.

Added code to the wxListCtrl demo to show how to get text from a
column in report mode.

Added code to the toolbar demo to clear the long help from the status
bar after 2 seconds.

Added wxJoystick.

Fixed wxTimer so it can be used as described in the docs, either with
a Notify method in a subclass, or sending an event to a wxEvtHandler
object, (usually a window.)

Added wxNotifyEvent.Allow()

Fixed GOBS of reference leaks.

Massive code changes and cleanup to allow wxPython to be split into
multiple extension modules again.  A Python CObject is used to allow
the "export" of SWIG functions and other common helper functions from
the wxc module to other modules, even if they are in separate shared
libraries.  Should also be usable from 3rd party code, just include
wxPython/src/export.h

Changed the default setup so the following are built as separate
extension modules:  calendar, glcanvas, grid, html, ogl, stc, and
utils.  Will probably add more later.

Changed the wxPrinterDC to use the new constructor taking a
wxPrintData object.  The old ctor is still there using the
wxPrinterDC2 name.

Added wxPython.lib.anchors.py from Riaan Booysen.  It contains a class
that implements Delphi's Anchors with wxLayoutConstraints.

Added wxPython.lib.fancytext from Timothy Hochberg.

Changed the GenericButtons to send their event in idle time, so the
mouse won't be captured when the event handler is called.

Added wxPython.lib.rpcMixin from Greg Landrum, although it's not
integrated with the demo yet.  It allows a wxPython GUI to be an
XML-RPC server.



New in 2.2.2
------------

Significantly changed how the wxStyledtextCtrl code that wraps
Scintilla is implemented.  Most of it is now automatically generated
from an interface definition file provided by Scintilla.  This means
that it will be much easier to stay in sync with new Scintilla
releases, but also means that some of the method and identifier names
have changed.  See wxPython/demo/data/stc.h for a copy of the C++
interface from which the Python interface is generated.  There is now
some inline documentation in that file that should really help explain
how things work.

I am now using the Python Distutils to build wxPython and to make some
of the distribution files.  (See http://www.python.org/sigs/distutils-sig/)
This means no more messing with my kludgy build.py/Makefile hack,
builds will be more consistent with other Python extensions that also
use Distutils, and will hopefully make wxPython easier to build for
platforms where there have been troubles before.  If you are building
wxPython for Python 1.5.2 or for 1.6, then you will need to get and
install version 1.0 of Distutils from the website above.  If you are
using Python 2.0 then you already have it.

Added wxInputStream and the wxFileSystem family of classes,
contributed by Joerg Baumann.

Added wxProcess and support for it to wxExecute.  wxProcess lets you
get notified when an asyncronous child process terminates, and also to
get input/output streams for the child process's stdout, stderr and
stdin.

Removed the old python sizers.

Added __add__, __sub__ and __cmp__ (equality check only) for wxPoint
and wxRealPoint.

Changed the build to make one big extension module instead of one for
the core and each contrib.  This allowed me to do away with the
libwxPyHelpers.so on unix systems.

Lots of little fixes here and there.

Some hacks on wxGTK to try and make the AutoComplete listbox in the
wxStyledTextCtrl to behave better.  It's still not as nice as on
wxMSW, but at least it's a bit more usable now.




New in 2.2.1
------------

Various tweaks, fixes, missing methods, etc.

Added example use of wxTaskBarIcon to the demo.



New in 2.2.0
------------

Added wxLog and friends.

Added wxFrame.ShowFullScreen for MSW.

Added PyShellWindow to the wxPython.lib package.



New in 2.1.16
-------------

Added an attribute named labelDelta to the generic buttons that
specifies how far to offset the label when the button is in the
depressed state.

Added wxTipProvider and friends.  See the demo for an example.

wxGrid can now change the cell highlight colour.

Added wxDragImage.

Fixed printing on wxGTK.

Added wxDateTime, wxTimeSpan, and wxDateSpan to wxPython.utils.

Added wxCalendarCtrl.

WARNING: A while back I asked what should be done about the Magic
Method Names.  (Methods that are automatically turned into event
handlers by virtue of their name.)  The consensus was that it is more
confusing to have them than to try and expand them to have greater
coverage.  I am finally getting around to removing the code that
generates the event binding.  This means that if you are using any of
the following method names without a EVT_* call that you need to
modify your code to add the EVT_* to hook the event to the method.

    OnChar
    OnSize
    OnEraseBackground
    OnSysColourChanged
    OnInitDialog
    OnPaint
    OnIdle
    OnActivate
    OnMenuHighlight
    OnCloseWindow
    OnScroll

Added wxSpinCtrl.




New in 2.1.15
-------------

Fixed wxTreeCtrl.HitTest to return both the tree item as well as the
flags that clairify where the click was in relation to the item.

Fixed thread state problem in wxTreeCtrl.GetBoundingBox and
GetSelections.

Fixed some problems in OGL.  Also wxShape.SetClientData and
.GetClientData can now deal with Python objects.

Added wxListCtrl.SortItems and changed the demo to show how to use it.

Plugged a memory leak.

Wrapped the new wxGrid and friends.  The old wxGrid class is no longer
available.  There are some incompatibilities, and unfortunately the
new classes are not documented yet, (however the methods are more
consistent with each other now so you may be able to guess pretty
good...)

Updated filebrowsebutton.py and calendar.py with changes from their
authors.  There is now a FileBrowseButtonWithHistory class (what a
mouthful!) and wxCalendar has printing support.

Added ActiveXWrapper to the library, and some good demos of it too.
It works great for embedding a COM (a.k.a OCX, a.k.a ActiveX) control
in a window and calling its methods.  It actually creates a new class
on the fly that derives from wxWindow, the COM CoClass and others
needed to make it all work.  The resulting class can be instantiated
just like wxWindow, used in sizers, etc.  It also responds to all COM
method calls, properties, etc., and if the class or a mix-in has
matching method names, then the COM events will be propogated back to
them.

Created a typemap that allows a string to be used for parameters
expecting a wxColour type.  The string is either a colour name as
defined in the wxColourDatabase, or a colour spec of the form
"#RRGGBB".  See the wxStyledTextCtrl demo for an example.

I almost forgot to mention the wxStyledTextCtrl!  Yes, the
wxStyledTextCtrl is finally in wxPython!!  (And the crowd goes
wild...)   There's no documentaTion yet (the crowd boos and hisses...)
but I've included a very readable source file in the
wxPython/demo/data directory, a couple fairly good examples, and you
can also refer to the Scintilla documentaion at
http://www.scintilla.org/ScintillaDoc.html to help fill in the gaps
until the docs are done.  (The croud murmers contentedly as the tool
provider smiles convincingly and removes his flame-proof suit.)




What's new in 2.1.13
--------------------
Skipped a version number to match what has been released for wxGTK.

Updated wxMVCTree and added a demo for it, also fixed layout on GTK
and some flicker problems.

Added a wrapper class for the Visualization ToolKit (or VTK) in the
wxPython.lib.vtk module.  (http://www.kitware.com/)

Fixed wxTreeCtrl.SetItemImage and GetItemImage to recognise the new
"which" parameter.

Added wxPython.lib.spashscreen from Mike Fletcher.

Added wxPython.lib.filebrowsebutton also from Mike Fletcher.

Renamed wxTreeCtrl.GetParent to GetItemParent to avoid a name clash
with wxWindow.GetParent.

Added wxIntersectRect to compute the intersection of two wxRect's.
It is used like this:

   intersect = wxIntersectRect(rect1, rect2)

If r1 and r2 don't intersect then None is returned, otherwise the
rectangle representing the intersection is returned.

Some bug fixes for Clipboard and Drag-n-Drop.

Rotated text!!!  WooHoo!  (See wxDC.DrawRotatedText())

Added a set of Generic Buttons to the library.  These are simple
window classes that look and act like native buttons, but you can have
a bit more control over them.  The bezel width can be set in addition
to colours, fonts, etc.  There is a ToggleButton as well as Bitmap
versions too.  They should also serve as a good example of how to
create your own classes derived from wxControl.

The C++ wxToolBar classes have been redone, and so have the wxPython
wrappers.  There have been slight modifications to some of the methods
but shouldn't impact anybody too much.  I took the opportunity to add
support for setting user data on each toolbar tool.  The new AddTool
methods look like this:

        def AddTool(ID,
                    bitmap,
                    pushedBitmap = wxNullBitmap,
                    toggle = FALSE,
                    clientData = NULL,
                    shortHelpString = "",
                    longHelpString = "")

        def AddSimpleTool(ID,
                          bitmap,
                          shortHelpString = "",
                          longHelpString = "",
                          toggle=FALSE)


There are also coresponding InsertTool and InsertSimpleTool methods
that additionally take an integer position as the first parameter.

Added a wrapper for the new PCX and TIFF ImageHandlers.

wxRect now simulates attributes named left, right, top and bottom.

Removed all non wx stuff from the glcanvas module since DA's PyOpenGL
is better and compatible with the wxGLCanvas.  You can get it at
http://starship.python.net:9673/crew/da/Code/PyOpenGL.

Added some missing EVT_ functions.

Added Dirk Holtwic's editor classes to the wxPython.lib.editor
package.

Changed all the "LIST" parameter names to "choices" to match the docs.

More fixes for the wxFloatBar, and it now works on wxGTK even better
than wxMSW!  (The feat is accomplished by using the wxTB_DOCKABLE
style flag instead of trying to float it ourselves.)




What's new in 2.1.11
--------------------
Skipped a few version numbers so wxMSW, wxGTK and wxPython are all
syncronized.

wxImage.SetData now makes a copy of the image data before giving it to
wxImage.  I mistakenly thought that wxImage would copy the data
itself.

Fixed wxMSW's notebook so the pages get their size set as they are
being added.  This should remove the need for our
wxNotebook.ResizeChildren hack.

wxPanels now support AutoLayout, and wxNotebooks and wxSplitterWindows
no longer tell their children to Layout() themselves.  This will
probably only effect you if you have a wxWindow with AutoLayout inside
a notebook or splitter.  If so, either change it to a wxPanel or add
an EVT_SIZE handler that calls Layout().

Fixed deadlock problem that happened when using threads.

Added new HTML printing classes.

Added wxWindow.GetHandle

Apparently wxMouseEvent.Position has been depreciated in wxWindows as
it is no longer available by default.  You can use GetPositionTuple
(returning a tuple with x,y) instead, or GetPosition (returning a
wxPoint.)

Added wxPostEvent function that allows events to be posted and then
processed later.  This is a thread-safe way to interact with the GUI
thread from other threads.

Added Clipboard and Drag-and-Drop classes.

Added wxFontEnumerator.

Many updates to wxMenu, wxMenuBar.

wxPyEvent and wxPyCommandEvent derived classes now give you the actual
Python object in the event handler instead of a new shadow.

Added a Calendar widget from Lorne White to the library.

Made some fixes to the wxFloatbar.  It still has some troubles on
wxGTK...

Added an MVC tree control from Bryn Keller to the library.




What's new in 2.1.5
-------------------
This is a quick bug-fix release to take care of a few nasties that
crept in at the last minute before 2.1.4 was called done.  No new
major features.



What's new in 2.1.4
--------------------

This release is NOT syncronized with a snapshot release of wxGTK or
wxMSW.  For MSW this isn't much of a problem since you can get the
binaries from the web site.  For other platforms you'll have to build
wxGTK from CVS.  (See http://web.ukonline.co.uk/julian.smart/wxwin/cvs.htm)
To get the same set of sources from CVS that I used, checkout using
the wxPy-2-1-4 tag.

Now back to what's new...

Much more support for event-less callbacks and add-on modules.

Created add-on module with wxOGL classes.

Added wxWindow.GetChildren().  Be careful of this.  It returns a *copy*
of the list of the window's children.  While you are using the list if
anything changes in the real list (a child is deleted, etc.) then the
list you are holding will suddenly have window references to garbage
memory and your app will likely crash.  But if you are careful it works
great!

Added a bunch of new and missing methods to wxTreeCrtl.  The
SortChildren method is now supported, but currently only for the
default sort order.

Added typemaps for wxSize, wxPoint, wxRealPoint, and wxRect that allow
either the actual objects or Python sequence values to be used.  For
example, the following are equivallent:

    win = wxWindow(parent, size = wxSize(100, 100))
    win = wxWindow(parent, size = (100, 100))

Super-charged the wxHtml module.  You can now create your own tag
handlers and also have access to the parser and cell classes.  There
is a tag handler in the library at wxPython.lib.wxpTag that
understands the WXP tag and is able to place wxPython windows on HTML
pages.  See the demo for an example.

A bunch of the methods of wxMenuBar were previously ifdef'd out for
wxGTK.  Added them back in since the methods exist now.

Wrapped the wxHtmlHelpController and related classes.

Wrapped the C++ versions of wxSizer and friends.  The Python-only
versions are still in the library, but depreciated.  (You will get a
warning message if you try to use them, but the warning can be
disabled.) The usage of the C++ versions is slightly different, and
the functionality of wxBorderSizer is now part of wxBoxSizer.  I have
added a few methods to wxSizer to try and make the transition as
smooth as possible, I combined all Add methods into a single method
that handles all cases, added an AddMany method, etc.  One step I did
not take was to make the default value of flag in the Add method be
wxGROW.  This would have made it more backward compatible, but less
portable to and from wxWin C++ code.  Please see the docs and demo for
further details.

Added wxPyEvent and wxPyCommandEvent classes, derived from wxEvent and
wxCommandEvent.  Each of them has SetPyData and GetPyData methods that
accept or return a single Python object.  You can use these classes
directly or derive from them to create your own types of event objects
that can pass through the wxWindows event system without loosing their
Python parts (as long as they are stored with SetPyData.)  Stay tuned
for more info and examples in future releases.

Added wxPython.lib.grids as an example of how to derive a new sizer
from the C++ sizers.  In this module you will find wxGridSizer and
wxFlexGridSizer.  wxGridSizer arrainges its items in a grid in which
all the widths and heights are the same.  wxFlexgridSizer allows
different widths and heights, and you can also specify rows and/or
columns that are growable.  See the demo for a couple examples for how
to use them.

Added the wxValidator class, and created a class named wxPyValidator
that should be used for the base class of any Python validators.  See
the demo for an example.  Please note that you MUST implement a Clone
method in your validator classes because of the way some things work
in the underlying C++ library.  I did not add wxTextValidator because
of some issues of how it transfers data to and from a wxString, which
in wxPython is automatically translated to and from Python strings, so
there would never be a concrete wxString that would hang around long
enough for the validator to do its job.  On the other hand, it should
be real easy to duplicate the functionality of wxTextValidator in a
pure Python class derived from wxPyValidator.

I've finally added a feature that has been on my list for close to two
years!  Ever wondered what that zero is for when you create your app
object?  Well now you can leave it out or explicitly set it to a true
value.  This value now controls what is to be done with sys.stdout and
sys.stderr.  A false value leaves them alone, and a true value sets
them to an instance of wxPyOnDemandOutputWindow.  (On windows the
default is true, on unix platforms the default is false.)  This class
creates a frame containing a wxTextCtrl as soon as anything is written
to sys.stdout or sys.stderr.  If you close the window it will come
back again the next time something is written.  (You can call
app.RestoreStdio to turn this off.)  If you would rather that the stdio be
redirected to a file, you can provide a second parameter to your app
object's constructor that is a filename.  If you want to use your own
class instead of wxPyOnDemandOutputWindow you can either implement
RedirectStdio() in you app class or change the value of
wxApp.outputWindowClass like this:

    class MyApp(wxApp):
        outputWindowClass = MyClass

        def OnInit(self):
            frame = MyFrame()
            self.SetTopWindow(frame)
            return true

Please see the implementation of wxPyOnDemandOutputWindow and wxApp in
wx.py for more details.  A few words of caution:  if you are running
your app in a debugger, changing sys.stdout and sys.stderr is likely
to really screw things up.

Added wxCaret.  Unfortunately it's author has still not documented it
in the wxWindows docs...

Some new 3rd party contributions in wxPython.lib.  PyShell, in
shell.py is an interesting implementaion of an interactive Python
shell in wxWindows.  floatbar.py has a class derived from wxToolBar
that can sense mouse drags and then reparent itself into another
frame. Moving the new frame close to where it came from puts the tool
bar back into the original parent.  (Unfortunately there is currently
a bug in wxGTK's wxFrame.SetToolBar so the FloatBar has some
problems...)




What's new in 2.1b3
--------------------

This release is syncronized with release 2.1 snapshot 9 of wxWindows.

Switched to using SWIG from CVS (see http://swig.cs.uchicago.edu/cvs.html)
for some of the new features and such.  Also they have encorporated my
patches so there is really no reason to stick with the current (very
old) release...  This version of SWIG gives the following new
features:

    1. Keyword arguments.  You no longer have to specify all the
       parameters with defaults to a method just to specify a
       non-default value on the end.  You can now do this instead:

          win = wxWindow(parent, -1, style = mystyle)

    2. There is now an an equivalence between Python's None and C++'s
       NULL.  This means that any methods that might return NULL will
       now return None and you can use none where wxWindows might be
       expecting NULL.  This makes things much more snake-ish.


There is a new build system based on a new Python program instead of
raw makefiles.  Now wxPython builds are virtually the same on MSW or
Unix systems.  See the end of this file for new build instructions and
see distrib/build.py for more details.

wxDC.Bilt now includes the useMask parameter, and has been split into
two different versions.  wxDC.BlitXY is like what was there before and
takes raw coordinants and sizes, and the new wxDC.Blit is for the new
interface using wxPoints and a wxSize.





What's new in 2.1b2
--------------------

Added the missing wxWindow.GetUpdateRegion() method.

Made a new change in SWIG (update your patches everybody) that
provides a fix for global shadow objects that get an exception in
their __del__ when their extension module has already been deleted.
It was only a 1 line change in .../SWIG/Modules/pycpp.cxx at about
line 496 if you want to do it by hand.

It is now possible to run through MainLoop more than once in any one
process.  The cleanup that used to happen as MainLoop completed (and
prevented it from running again) has been delayed until the wxc module
is being unloaded by Python.

I fixed a bunch of stuff in the C++ version of wxGrid so it wouldn't
make wxPython look bad.

wxWindow.PopupMenu() now takes a wxPoint instead of  x,y.  Added
wxWindow.PopupMenuXY to be consistent with some other methods.

Added wxGrid.SetEditInPlace and wxGrid.GetEditInPlace.

You can now provide your own app.MainLoop method.  See
wxPython/demo/demoMainLoop.py for an example and some explaination.

Got the in-place-edit for the wxTreeCtrl fixed and added some demo
code to show how to use it.

Put the wxIcon constructor back in for GTK as it now has one that
matches MSW's.

Added wxGrid.GetCells

Added wxSystemSettings static methods as functions with names like
wxSystemSettings_GetSystemColour.

Removed wxPyMenu since using menu callbacks have been depreciated in
wxWindows.  Use wxMenu and events instead.

Added alternate wxBitmap constructor (for MSW only) as
      wxBitmapFromData(data, type, width, height, depth = 1)

Added a helper function named wxPyTypeCast that can convert shadow
objects of one type into shadow objects of another type.  (Like doing
a down-cast.)  See the implementation in wx.py for some docs.

Fixed wxImage GetData and SetData to properly use String objects for
data transfer.

Added access methods to wxGridEvent.

New Makefile/Setup files supporting multiple dynamic extension modules
for unix systems.

Fixes for the wxGLCanvas demo to work around a strange bug in gtk.

SWIG support routines now compiled separately instead of being bundled
in wx.cpp.





What's new in 2.1b1
--------------------
Fixed wxComboBox.SetSelection so that it actually sets the selected
item.  (Actually just removed it from wxPython and let it default to
wxChoice.SetSelection which was already doing the right thing.)

Added the Printing Framework.

Switched back to using the wxWindows DLL for the pre-built Win32
version.  The problem was needing to reinitialize static class info
data after loading each extension module.

Lots of little tweaks and additions to reflect changes to various
wxWindows classes.

Fixed a bug with attaching objects to tree items.  Actually was a
symptom of a larger problem with not obtaining the interpreter lock
when doing any Py_DECREFs.

wxSizer and friends.  Sizers are layout tools that manage a colection
of windows and sizers.  Different types of sizers apply different
types of layout algorithms.  You saw it here first!  These classes are
not even in the wxWindows C++ library yet!



What's new in 2.0b9
-------------------
Bug fix for ListCtrl in test4.py (Was a missing file...  DSM!)

Bug fix for occassional GPF on Win32 systems upon termination of a
wxPython application.

Added wxListBox.GetSelections returning selections as a Tuple.

Added a wxTreeItemData that is able to hold any Python object and be
associated with items in a wxTreeCtrl.  Added test pytree.py to show
this feature off.

Added wxSafeYield function.

OpenGL Canvas can be optionally compiled in to wxPython.

Awesome new Demo Framework for showing off wxPython and for learning
how it all works.

The pre-built Win32 version is no longer distributing the wxWindows
DLL.  It is statically linked with the wxWindows library instead.

Added a couple missing items from the docs.

Added wxImage, wxImageHandler, wxPNGHandler, wxJPEGHandler,
wxGIFHandler and wxBMPHandler.

Added new methods to wxTextCtrl.

Fixed some problems with how SWIG was wrapping some wxTreeCtrl
methods.



What's new in 2.0b8
-------------------
Support for using Python threads in wxPython apps.

Several missing methods from various classes.

Various bug fixes.



What's new in 2.0b7
-------------------
Added DLG_PNT and DLG_SZE convienience methods to wxWindow class.

Added missing constructor and other methods for wxMenuItem.



What's new in 2.0b6
-------------------
Just a quickie update to fix the self-installer to be compatible with
Python 1.5.2b2's Registry settings.


What's new in 2.0b5
-------------------
Well obviously the numbering scheme has changed.  I did this to
reflect the fact that this truly is the second major revision of
wxPython, (well the third actually if you count the one I did for
wxWindows 1.68 and then threw away...) and also that it is associated
with the 2.0 version of wxWindows.

I have finally started documenting wxPython.  There are several pages
in the wxWindows documentation tree specifically about wxPython, and I
have added notes within the class references about where and how wxPython
diverges from wxWindows.

Added wxWindow_FromHWND(hWnd) for wxMSW to construct a wxWindow from a
window handle.  If you can get the window handle into the python code,
it should just work...  More news on this later.

Added wxImageList, wxToolTip.

Re-enabled wxConfig.DeleteAll() since it is reportedly fixed for the
wxRegConfig class.

As usual, some bug fixes, tweaks, etc.



What's new in 0.5.3
-------------------
Added wxSashWindow, wxSashEvent, wxLayoutAlgorithm, etc.

Various cleanup, tweaks, minor additions, etc. to maintain
compatibility with the current wxWindows.



What's new in 0.5.0
-------------------
Changed the import semantics from "from wxPython import *" to "from
wxPython.wx import *"  This is for people who are worried about
namespace pollution, they can use "from wxPython import wx" and then
prefix all the wxPython identifiers with "wx."

Added wxTaskbarIcon for wxMSW.

Made the events work for wxGrid.

Added wxConfig.

Added wxMiniFrame for wxGTK.

Changed many of the args and return values that were pointers to gdi
objects to references to reflect changes in the wxWindows API.

Other assorted fixes and additions.




What's new in 0.4.2
-------------------

wxPython on wxGTK works!!!  Both dynamic and static on Linux and
static on Solaris have been tested.  Many thanks go to Harm
<H.v.d.Heijden@phys.tue.nl> for his astute detective work on tracking
down a nasty DECREF bug.  Okay so I have to confess that it was just a
DSM (Dumb Stupid Mistake) on my part but it was nasty none the less
because the behavior was so different on different platforms.

The dynamicly loaded module on Solaris is still segfaulting, so it
must have been a different issue all along...



What's New in 0.4
-----------------

1. Worked on wxGTK compatibility.  It is partially working.  On a
Solaris/Sparc box wxPython is working but only when it is statically
linked with the Python interpreter.  When built as a dyamically loaded
extension module, things start acting weirdly and it soon seg-faults.
And on Linux both the statically linked and the dynamically linked
version segfault shortly after starting up.

2. Added Toolbar, StatusBar and SplitterWindow classes.

3. Varioius bug fixes, enhancements, etc.

----------------------------------------------------------------------
