/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000
static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_BUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#if PY_VERSION_HEX < 0x01060000
#define PyObject_Del(op) PyMem_DEL((op))
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromString(v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return -1;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return -1;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return -1;
  }
  if (PyDict_SetItemString(dict, name, o))
    return -1;
  Py_DECREF(o);
  return 0;
}
#endif

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CLSID swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_form_ops_t swig_types[2]
#define SWIGTYPE_p_int swig_types[3]
#define SWIGTYPE_p_long swig_types[4]
#define SWIGTYPE_p_unsigned_char swig_types[5]
#define SWIGTYPE_p_unsigned_int swig_types[6]
#define SWIGTYPE_p_unsigned_long swig_types[7]
#define SWIGTYPE_p_unsigned_short swig_types[8]
#define SWIGTYPE_p_wxANIHandler swig_types[9]
#define SWIGTYPE_p_wxAcceleratorTable swig_types[10]
#define SWIGTYPE_p_wxActivateEvent swig_types[11]
#define SWIGTYPE_p_wxActiveXEvent swig_types[12]
#define SWIGTYPE_p_wxActiveXWindow swig_types[13]
#define SWIGTYPE_p_wxBMPHandler swig_types[14]
#define SWIGTYPE_p_wxBoxSizer swig_types[15]
#define SWIGTYPE_p_wxCURHandler swig_types[16]
#define SWIGTYPE_p_wxChildFocusEvent swig_types[17]
#define SWIGTYPE_p_wxCloseEvent swig_types[18]
#define SWIGTYPE_p_wxCommandEvent swig_types[19]
#define SWIGTYPE_p_wxContextMenuEvent swig_types[20]
#define SWIGTYPE_p_wxControl swig_types[21]
#define SWIGTYPE_p_wxControlWithItems swig_types[22]
#define SWIGTYPE_p_wxDateEvent swig_types[23]
#define SWIGTYPE_p_wxDisplayChangedEvent swig_types[24]
#define SWIGTYPE_p_wxDropFilesEvent swig_types[25]
#define SWIGTYPE_p_wxDuplexMode swig_types[26]
#define SWIGTYPE_p_wxEraseEvent swig_types[27]
#define SWIGTYPE_p_wxEvent swig_types[28]
#define SWIGTYPE_p_wxEvtHandler swig_types[29]
#define SWIGTYPE_p_wxFSFile swig_types[30]
#define SWIGTYPE_p_wxFileSystem swig_types[31]
#define SWIGTYPE_p_wxFlexGridSizer swig_types[32]
#define SWIGTYPE_p_wxFocusEvent swig_types[33]
#define SWIGTYPE_p_wxFuncX swig_types[34]
#define SWIGTYPE_p_wxFuncXArray swig_types[35]
#define SWIGTYPE_p_wxGBSizerItem swig_types[36]
#define SWIGTYPE_p_wxGIFHandler swig_types[37]
#define SWIGTYPE_p_wxGridBagSizer swig_types[38]
#define SWIGTYPE_p_wxGridSizer swig_types[39]
#define SWIGTYPE_p_wxICOHandler swig_types[40]
#define SWIGTYPE_p_wxIEHtmlWindowBase swig_types[41]
#define SWIGTYPE_p_wxIconizeEvent swig_types[42]
#define SWIGTYPE_p_wxIdleEvent swig_types[43]
#define SWIGTYPE_p_wxImage swig_types[44]
#define SWIGTYPE_p_wxImageHandler swig_types[45]
#define SWIGTYPE_p_wxIndividualLayoutConstraint swig_types[46]
#define SWIGTYPE_p_wxInitDialogEvent swig_types[47]
#define SWIGTYPE_p_wxInputStream swig_types[48]
#define SWIGTYPE_p_wxJPEGHandler swig_types[49]
#define SWIGTYPE_p_wxKeyEvent swig_types[50]
#define SWIGTYPE_p_wxLayoutConstraints swig_types[51]
#define SWIGTYPE_p_wxMaximizeEvent swig_types[52]
#define SWIGTYPE_p_wxMenu swig_types[53]
#define SWIGTYPE_p_wxMenuBar swig_types[54]
#define SWIGTYPE_p_wxMenuEvent swig_types[55]
#define SWIGTYPE_p_wxMenuItem swig_types[56]
#define SWIGTYPE_p_wxMouseCaptureChangedEvent swig_types[57]
#define SWIGTYPE_p_wxMouseEvent swig_types[58]
#define SWIGTYPE_p_wxMoveEvent swig_types[59]
#define SWIGTYPE_p_wxNavigationKeyEvent swig_types[60]
#define SWIGTYPE_p_wxNcPaintEvent swig_types[61]
#define SWIGTYPE_p_wxNotifyEvent swig_types[62]
#define SWIGTYPE_p_wxObject swig_types[63]
#define SWIGTYPE_p_wxPCXHandler swig_types[64]
#define SWIGTYPE_p_wxPNGHandler swig_types[65]
#define SWIGTYPE_p_wxPNMHandler swig_types[66]
#define SWIGTYPE_p_wxPaintEvent swig_types[67]
#define SWIGTYPE_p_wxPaletteChangedEvent swig_types[68]
#define SWIGTYPE_p_wxPaperSize swig_types[69]
#define SWIGTYPE_p_wxParamX swig_types[70]
#define SWIGTYPE_p_wxParamXArray swig_types[71]
#define SWIGTYPE_p_wxPropX swig_types[72]
#define SWIGTYPE_p_wxPropXArray swig_types[73]
#define SWIGTYPE_p_wxPyApp swig_types[74]
#define SWIGTYPE_p_wxPyCommandEvent swig_types[75]
#define SWIGTYPE_p_wxPyEvent swig_types[76]
#define SWIGTYPE_p_wxPyImageHandler swig_types[77]
#define SWIGTYPE_p_wxPySizer swig_types[78]
#define SWIGTYPE_p_wxPyValidator swig_types[79]
#define SWIGTYPE_p_wxQueryNewPaletteEvent swig_types[80]
#define SWIGTYPE_p_wxScrollEvent swig_types[81]
#define SWIGTYPE_p_wxScrollWinEvent swig_types[82]
#define SWIGTYPE_p_wxSetCursorEvent swig_types[83]
#define SWIGTYPE_p_wxShowEvent swig_types[84]
#define SWIGTYPE_p_wxSizeEvent swig_types[85]
#define SWIGTYPE_p_wxSizer swig_types[86]
#define SWIGTYPE_p_wxSizerItem swig_types[87]
#define SWIGTYPE_p_wxStaticBoxSizer swig_types[88]
#define SWIGTYPE_p_wxStdDialogButtonSizer swig_types[89]
#define SWIGTYPE_p_wxSysColourChangedEvent swig_types[90]
#define SWIGTYPE_p_wxTIFFHandler swig_types[91]
#define SWIGTYPE_p_wxUpdateUIEvent swig_types[92]
#define SWIGTYPE_p_wxValidator swig_types[93]
#define SWIGTYPE_p_wxWindow swig_types[94]
#define SWIGTYPE_p_wxWindowCreateEvent swig_types[95]
#define SWIGTYPE_p_wxWindowDestroyEvent swig_types[96]
#define SWIGTYPE_p_wxXPMHandler swig_types[97]
#define SWIGTYPE_ptrdiff_t swig_types[98]
#define SWIGTYPE_std__ptrdiff_t swig_types[99]
#define SWIGTYPE_unsigned_int swig_types[100]
static swig_type_info *swig_types[102];
static swig_module_info swig_module = {swig_types, 101, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _activex.so
  ------------------------------------------------*/
#define SWIG_init    init_activex

#define SWIG_name    "_activex"

#include "wx/wxPython/wxPython.h"
#include "wx/wxPython/pyclasses.h"
#include "wx/wxPython/pyistream.h"

#include "wxactivex.h"

 static const wxString wxPyPanelNameStr(wxPanelNameStr); 

// Since SWIG doesn't support nested classes, we need to fool it a bit
// and make them look like global classes.  These defines make the C++ code
// know what we are doing.
#define wxParamX        wxActiveX::ParamX
#define wxFuncX         wxActiveX::FuncX
#define wxPropX         wxActiveX::PropX
#define wxParamXArray   wxActiveX::ParamXArray
#define wxFuncXArray    wxActiveX::FuncXArray
#define wxPropXArray    wxActiveX::PropXArray


// Some conversion helpers
static wxVariant _PyObj2Variant(PyObject* value);
static bool  _PyObj2Variant(PyObject* value, wxVariant& wv);
static PyObject* _Variant2PyObj(wxVariant& value, bool useNone=false);
static wxString  _VARTYPEname(VARTYPE vt);

// Check if an exception has been raised  (blocking threads)
inline bool wxPyErr_Occurred()
{
    bool rval;
    wxPyBlock_t blocked = wxPyBeginBlockThreads();
    rval = PyErr_Occurred() != NULL;
    wxPyEndBlockThreads(blocked);
    return rval;
}


static CLSID *new_CLSID(wxString const &id){
            int result;
            CLSID* self = new CLSID;
            memset(self, 0, sizeof(CLSID));

            if (id[0] == _T('{')) {
                // Looks like a classID string
                result =
                    CLSIDFromString(
                        (LPOLESTR)(const wchar_t *)id.wc_str(wxConvUTF8),
                        self);
            } else {
                // Try a progID
                result =
                    CLSIDFromProgID(
                        (LPOLESTR)(const wchar_t *)id.wc_str(wxConvUTF8),
                        self);
            }
            if (result != NOERROR) {
                wxPyErr_SetString(PyExc_ValueError, "Not a recognized classID or progID");
                delete self;
                return NULL;
            }
            return self;
        }
static void delete_CLSID(CLSID *self){ delete self; }
static wxString CLSID_GetCLSIDString(CLSID *self){
            LPOLESTR s;
            wxString str;
            if (StringFromCLSID(*self, &s) == S_OK) {
                str = s;
                CoTaskMemFree(s);
            }
            else {
                str = _T("Error!");  // TODO: raise exception?
            }
            return str;
        }
static wxString CLSID_GetProgIDString(CLSID *self){
            LPOLESTR s;
            wxString str;
            if (ProgIDFromCLSID(*self, &s) == S_OK) {
                str = s;
                CoTaskMemFree(s);
            }
            else {
                str = _T("Error!"); // TODO: raise exception?
            }
            return str;
        }

  /*@c:\\PROJECTS\\SWIG-cvs\\Lib\\python\\pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/

static wxString wxParamX_vt_type_get(wxParamX *self){ return _VARTYPEname(self->vt); }

  /*@c:\\PROJECTS\\SWIG-cvs\\Lib\\python\\pymacros.swg,72,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/

static bool wxParamXArray___nonzero__(wxParamXArray *self){ return self->size() > 0; }
static int wxParamXArray___len__(wxParamXArray *self){ return self->size(); }

  /*@c:\\PROJECTS\\SWIG-cvs\\Lib\\python\\pymacros.swg,72,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
SWIG_AsVal_long(PyObject* obj, long* val)
{
    if (PyNumber_Check(obj)) {
        if (val) *val = PyInt_AsLong(obj);
        return 1;
    }
    else {
        SWIG_type_error("number", obj);
    }
    return 0;
}


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = static_cast<int >(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

static wxParamX const &wxParamXArray___getitem__(wxParamXArray *self,int idx){
            if ( idx >= 0 && idx < self->size() )
                return (*self)[idx];
            else {
                static wxParamX BadVal;
                wxPyErr_SetString(PyExc_IndexError, "Index out of range");
                return BadVal;
            }
        }
static bool wxFuncXArray___nonzero__(wxFuncXArray *self){ return self->size() > 0; }
static int wxFuncXArray___len__(wxFuncXArray *self){ return self->size(); }
static wxFuncX const &wxFuncXArray___getitem__(wxFuncXArray *self,int idx){
            if ( idx >= 0 && idx < self->size() )
                return (*self)[idx];
            else {
                static wxFuncX BadVal;
                wxPyErr_SetString(PyExc_IndexError, "Index out of range");
                return BadVal;
            }
        }
static bool wxPropXArray___nonzero__(wxPropXArray *self){ return self->size() > 0; }
static int wxPropXArray___len__(wxPropXArray *self){ return self->size(); }
static wxPropX const &wxPropXArray___getitem__(wxPropXArray *self,int idx){
            if ( idx >= 0 && idx < self->size() )
                return (*self)[idx];
            else {
                static wxPropX BadVal;
                wxPyErr_SetString(PyExc_IndexError, "Index out of range");
                return BadVal;
            }
        }

// C++ version of a Python-aware wxActiveX    
class wxActiveXWindow : public wxActiveX
{
private:
    CLSID       m_CLSID;
    
    DECLARE_ABSTRACT_CLASS(wxActiveXWindow);

public:
    wxActiveXWindow( wxWindow* parent, const CLSID& clsId, wxWindowID id = -1,
                     const wxPoint& pos = wxDefaultPosition,
                     const wxSize& size = wxDefaultSize,
                     long style = 0,
                     const wxString& name = wxPyPanelNameStr)
        : wxActiveX(parent, clsId, id, pos, size, style, name)
    {
        m_CLSID = clsId;
    }

    const CLSID& GetCLSID() const { return m_CLSID; }
    
    
    // Renamed versions of some base class methods that delegate
    // to the base where appropriate, and raise Python exceptions
    // when needed.
    int GetAXEventCount() const  { return wxActiveX::GetEventCount(); }
    int GetAXPropCount() const   { return wxActiveX::GetPropCount(); }
    int GetAXMethodCount() const { return wxActiveX::GetMethodCount(); }

    const wxFuncX& GetAXEventDesc(int idx) const
    {
        static wxFuncX BadVal;
        if (idx < 0 || idx >= GetAXEventCount()) {
            wxPyErr_SetString(PyExc_IndexError, "Index out of range");
            return BadVal;
        }
        return m_events[idx];
    }
    const wxFuncX& GetAXMethodDesc(int idx) const
    {
        static wxFuncX BadVal;
        if (idx < 0 || idx >= GetAXMethodCount()) {
            wxPyErr_SetString(PyExc_IndexError, "Index out of range");
            return BadVal;
        }
        return m_methods[idx];
    }
    const wxPropX& GetAXPropDesc(int idx) const
    {
        static wxPropX BadVal;
        if (idx < 0 || idx >= GetAXPropCount()) {
            wxPyErr_SetString(PyExc_IndexError, "Index out of range");
            return BadVal;
        }
        return m_props[idx];
    }

    const wxFuncX& GetAXMethodDesc(const wxString& name) const
    {
        NameMap::const_iterator it = m_methodNames.find(name);
        if (it == m_methodNames.end())     {
            wxString msg;
            msg << _T("method <") << name << _T("> not found");
            wxPyErr_SetString(PyExc_KeyError, msg.mb_str());
            static wxFuncX BadVal;
            return BadVal;
        };
        return GetAXMethodDesc(it->second);
    }
    const wxPropX& GetAXPropDesc(const wxString& name) const
    {
        NameMap::const_iterator it = m_propNames.find(name);
        if (it == m_propNames.end())     {
            wxString msg;
            msg << _T("property <") << name << _T("> not found");
            wxPyErr_SetString(PyExc_KeyError, msg.mb_str());
            static wxPropX BadVal;
            return BadVal;
        };
        return GetAXPropDesc(it->second);
    }

    // Accessors for the internal vectors of events, methods and
    // proprties.  Can be used as sequence like objects from
    // Python.
    const wxFuncXArray& GetAXEvents()      { return m_events; }
    const wxFuncXArray& GetAXMethods()     { return m_methods; }
    const wxPropXArray& GetAXProperties()  { return m_props; }


    // Set a property from a Python object
    void SetAXProp(const wxString& name, PyObject* value)
    {        
        const wxPropX& prop = GetAXPropDesc(name);
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        if (! PyErr_Occurred() ) {
            if (! prop.CanSet()) {
                wxString msg;
                msg << _T("property <") << name << _T("> is readonly");
                PyErr_SetString(PyExc_TypeError, msg.mb_str());
                goto done;
            } else {
                wxVariant wxV = _PyObj2Variant(value);
                if (PyErr_Occurred())
                    goto done;
                VARIANT v = {prop.arg.vt};
                if (!VariantToMSWVariant(wxV, v) || PyErr_Occurred()) {
                    wxString msg;
                    msg << _T("Unable to convert value to expected type: (")
                        << _VARTYPEname(prop.arg.vt) << _T(") for property <")
                        << name << _T(">");
                    PyErr_SetString(PyExc_TypeError, msg.mb_str());
                    goto done;
                }
                PyThreadState* tstate = wxPyBeginAllowThreads();
                SetProp(prop.memid, v);
                VariantClear(&v);
                wxPyEndAllowThreads(tstate);
            }
        }
    done:
        wxPyEndBlockThreads(blocked);
    }

    
    // Get a property and convert it to a Python object
    PyObject* GetAXProp(const wxString& name)
    {        
        PyObject* rval = NULL;
        const wxPropX& prop = GetAXPropDesc(name);
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        if (! PyErr_Occurred() ) {
            if (! prop.CanGet()) {
                wxString msg;
                msg << _T("property <") << name << _T("> is writeonly");
                PyErr_SetString(PyExc_TypeError, msg.mb_str());
                goto done;
            } else {
                PyThreadState* tstate = wxPyBeginAllowThreads();
                VARIANT v = GetPropAsVariant(prop.memid);
                wxPyEndAllowThreads(tstate);
                wxVariant wv;
                if (!MSWVariantToVariant(v, wv) || PyErr_Occurred()) {
                    wxString msg;
                    msg << _T("Unable to convert value to expected type: (")
                        << _VARTYPEname(prop.arg.vt) << _T(") for property <")
                        << name << _T(">");
                    PyErr_SetString(PyExc_TypeError, msg.mb_str());
                    goto done;
                }
                rval = _Variant2PyObj(wv);
                VariantClear(&v);
            }
        }
    done:
        wxPyEndBlockThreads(blocked);
        return rval;
    }


    // If both IsIn and isOut are false, assume it is actually an
    // input param
    bool paramIsIn(const wxParamX& p)
    {
        return p.IsIn() || (!p.IsIn() && !p.IsOut());
    }
    

    // Call a method of the ActiveX object
    PyObject* _CallAXMethod(const wxString& name, PyObject* args)
    {
        VARIANTARG *vargs = NULL;
        int nargs = 0;
        PyObject* rval = NULL;
        const wxFuncX& func = GetAXMethodDesc(name);
        
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        if (! PyErr_Occurred() ) {
            nargs = func.params.size();
            if (nargs > 0)
                vargs = new VARIANTARG[nargs];

            if (vargs) {
                // init type of vargs, in reverse order
                int i;
                for (i = 0; i < nargs; i++)
                    vargs[nargs - i - 1].vt = func.params[i].vt;

                // Map the args coming from Python to the input parameters in vargs
                int pi = 0;
                i = 0;
                while ( i<nargs && pi<PyTuple_Size(args) ) {
                    // Move to the next input param. 
                    if (! paramIsIn(func.params[i])) {
                        i += 1;
                        continue;
                    }
                    // convert the python object
                    PyObject* obj = PyTuple_GetItem(args, pi);
                    if (obj == Py_None) // special-case None?
                        vargs[nargs - i - 1].vt = VT_EMPTY;
                    else {
                        wxVariant wxV = _PyObj2Variant(obj);
                        if (PyErr_Occurred())
                            goto done;
                        if (!VariantToMSWVariant(wxV, vargs[nargs - i - 1]) || PyErr_Occurred()) {
                            wxString msg;
                            msg << _T("Unable to convert value to expected type: (")
                                << _VARTYPEname(vargs[nargs - i - 1].vt)
                                << _T(") for parameter ") << i;
                            PyErr_SetString(PyExc_TypeError, msg.mb_str());
                            goto done;
                        }
                    }
                    i += 1;
                    pi += 1;                        
                }
            }

            // call the method
            PyThreadState* tstate = wxPyBeginAllowThreads();
            VARIANT rv = CallMethod(func.memid, vargs, nargs);
            wxPyEndAllowThreads(tstate);

            // Convert the return value and any out-params, ignoring
            // conversion errors for now
            wxVariant wv;
            MSWVariantToVariant(rv, wv);
            rval = _Variant2PyObj(wv, true);
            VariantClear(&rv);

            if (func.hasOut) {
                // make a list and put the rval in it if it is not None
                PyObject* lst = PyList_New(0);
                if (rval != Py_None)
                    PyList_Append(lst, rval);
                else
                    Py_DECREF(rval);

                // find the out params and convert them
                for (int i = 0; i < nargs; i++) {
                    VARIANTARG& va = vargs[nargs - i - 1];
                    const wxParamX &px = func.params[i];
                    if (px.IsOut()) {
                        MSWVariantToVariant(va, wv);
                        PyObject* obj = _Variant2PyObj(wv, true);
                        PyList_Append(lst, obj);
                    }
                }
                rval = PyList_AsTuple(lst);
                Py_DECREF(lst);
            }
            if (PyErr_Occurred())
                PyErr_Clear();
        }
    done:
        wxPyEndBlockThreads(blocked);
        if (vargs) {
            for (int i = 0; i < nargs; i++)
                VariantClear(&vargs[i]);
            delete [] vargs;
        }
        return rval;
    }
};

IMPLEMENT_ABSTRACT_CLASS( wxActiveXWindow, wxWindow );


SWIGINTERNINLINE long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

static void wxActiveXEvent__preCallInit(wxActiveXEvent *self,PyObject *pyself){
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            PyObject* pList = PyList_New(0);
            PyObject_SetAttrString(pyself, "paramList", pList);
            Py_DECREF(pList);
            for (int i=0; i<self->ParamCount(); i+=1) {
                PyObject* name = PyString_FromString((char*)(const char*)self->ParamName(i).mb_str());
                PyObject* val = _Variant2PyObj((*self)[i], true);
                PyObject_SetAttr(pyself, name, val);
                PyList_Append(pList, name);
                Py_DECREF(val);
                Py_DECREF(name);
            }
            wxPyEndBlockThreads(blocked);
        }
static void wxActiveXEvent__postCallCleanup(wxActiveXEvent *self,PyObject *pyself){
            wxPyBlock_t blocked = wxPyBeginBlockThreads();
            for (int i=0; i<self->ParamCount(); i+=1) {
                PyObject* val = PyObject_GetAttrString(
                    pyself, (char*)(const char*)self->ParamName(i).mb_str());
                _PyObj2Variant(val, (*self)[i]);
                Py_DECREF(val);
            }
            wxPyEndBlockThreads(blocked);
        }


// Caller should already have the GIL!
wxVariant _PyObj2Variant(PyObject* value)
{
    wxVariant rval;

    if (value == Py_None)
        return rval;
    
#if PYTHON_API_VERSION >= 1012  // Python 2.3+
    else if (PyBool_Check(value))
        rval = (value == Py_True) ? true : false;
#endif
    
    else if (PyInt_Check(value))
        rval = PyInt_AS_LONG(value);

    else if (PyFloat_Check(value))
        rval = PyFloat_AS_DOUBLE(value);

    else if (PyString_Check(value) || PyUnicode_Check(value))
        rval = Py2wxString(value);

    // TODO:    PyList of strings --> wxArrayString
    //          wxDateTime
    //          list of objects
    //          etc.

    else {
        PyErr_SetString(PyExc_TypeError, "Unsupported object type in _PyObj2Variant");
        rval = (long)0;
    }

    return rval;
}

// This one uses the type of the variant to try and force the conversion
bool  _PyObj2Variant(PyObject* value, wxVariant& wv)
{
    wxString type = wv.GetType();

    if ( type == _T("long") || type == _T("bool") || type == _T("char") )
        wv = PyInt_AsLong(value);

    else if ( type == _T("string") )
        wv = Py2wxString(value);

    else if ( type == _T("double") )
        wv  = PyFloat_AsDouble(value);

    else {
        // it's some other type that we dont' handle yet.  Log it?
        return false;
    }
    return true;
}
 
// Caller should already have the GIL!
PyObject* _Variant2PyObj(wxVariant& value, bool useNone)
{
    PyObject* rval = NULL;

    if (value.IsNull()) {
        rval = Py_None;
        Py_INCREF(rval);
    }
    
    // should "char" be treated as an int or as a string?
    else if (value.IsType(_T("char")) || value.IsType(_T("long")))
        rval = PyInt_FromLong(value);
    
    else if (value.IsType(_T("double")))
        rval = PyFloat_FromDouble(value);

    else if (value.IsType(_T("bool"))) {
        rval = (bool)value ? Py_True : Py_False;
        Py_INCREF(rval);
    }
    
    else if (value.IsType(_T("string")))
        rval = wx2PyString(value);

    else {
        if (useNone) {
            rval = Py_None;
            Py_INCREF(rval);
        }
        else {
            PyErr_SetString(PyExc_TypeError, "Unsupported object type in _Variant2PyObj");
        }
    }
    return rval;
}


wxString _VARTYPEname(VARTYPE vt)
{
    if (vt & VT_BYREF)
        vt &= ~(VT_BYREF);

    switch(vt) {
    case VT_VARIANT:
        return _T("VT_VARIANT");
        
    // 1 byte chars
    case VT_I1:
    case VT_UI1:
    // 2 byte shorts
    case VT_I2:
    case VT_UI2:
    // 4 bytes longs
    case VT_I4:
    case VT_UI4:
    case VT_INT:
    case VT_UINT:
    case VT_ERROR:
        return _T("int");

    // 4 byte floats
    case VT_R4:
    // 8 byte doubles
    case VT_R8:
    // decimals are converted from doubles too
    case VT_DECIMAL:
        return _T("double");
        
    case VT_BOOL:
        return _T("bool");
        
    case VT_DATE:
        return _T("wx.DateTime");
        
    case VT_BSTR:
        return _T("string");

    case VT_UNKNOWN:
        return _T("VT_UNKNOWN");
        
    case VT_DISPATCH: 
        return _T("VT_DISPATCH");

    case VT_EMPTY:
        return _T("VT_EMPTY");
        
    case VT_NULL:
        return _T("VT_NULL");
        
    case VT_VOID:
        return _T("VT_VOID");
        
    default:
        wxString msg;
        msg << _T("unsupported type ") << vt;
        return msg;
    }
}



// A class derived from our wxActiveXWindow for the IE WebBrowser
// control that will serve as a base class for a Python
// implementation.  This is done so we can "eat our own dog food"
// and use a class at least mostly generated by genaxmodule, but
// also get some of the extra stuff like loading a document from
// a string or a stream, getting text contents, etc. that
// Lindsay's version gives us.
//

#include <wx/mstream.h>
#include <oleidl.h>
#include <winerror.h>
#include <exdispid.h>
#include <exdisp.h>
#include <olectl.h>
#include <Mshtml.h>
#include <sstream>

#include "IEHtmlStream.h"

class wxIEHtmlWindowBase : public wxActiveXWindow {
private:
    wxAutoOleInterface<IWebBrowser2>  m_webBrowser;

    DECLARE_ABSTRACT_CLASS(wxIEHtmlWindowBase);

public:

    wxIEHtmlWindowBase ( wxWindow* parent, const CLSID& clsId, wxWindowID id = -1,
                         const wxPoint& pos = wxDefaultPosition,
                         const wxSize& size = wxDefaultSize,
                         long style = 0,
                         const wxString& name = wxPyPanelNameStr)
        : wxActiveXWindow(parent, clsId, id, pos, size, style, name)
    {
        HRESULT hret;

        // Get IWebBrowser2 Interface
        hret = m_webBrowser.QueryInterface(IID_IWebBrowser2, m_ActiveX);
        wxASSERT(SUCCEEDED(hret));

        // web browser setup
        m_webBrowser->put_MenuBar(VARIANT_FALSE);
        m_webBrowser->put_AddressBar(VARIANT_FALSE);
        m_webBrowser->put_StatusBar(VARIANT_FALSE);
        m_webBrowser->put_ToolBar(VARIANT_FALSE);

        m_webBrowser->put_RegisterAsBrowser(VARIANT_TRUE);
        m_webBrowser->put_RegisterAsDropTarget(VARIANT_TRUE);

        m_webBrowser->Navigate( L"about:blank", NULL, NULL, NULL, NULL );
    }


    void SetCharset(const wxString& charset)
    {
        HRESULT hret;
        
        // HTML Document ?
        IDispatch *pDisp = NULL;
        hret = m_webBrowser->get_Document(&pDisp);
        wxAutoOleInterface<IDispatch> disp(pDisp);

        if (disp.Ok())
        {
            wxAutoOleInterface<IHTMLDocument2> doc(IID_IHTMLDocument2, disp);
            if (doc.Ok())
                doc->put_charset((BSTR) (const wchar_t *) charset.wc_str(wxConvUTF8));
            //doc->put_charset((BSTR) wxConvUTF8.cMB2WC(charset).data());
        }
    }


    bool LoadString(const wxString& html)
    {
        char *data = NULL;
        size_t len = html.length();
        len *= sizeof(wxChar);
        data = (char *) malloc(len);
        memcpy(data, html.c_str(), len);
        return LoadStream(new wxOwnedMemInputStream(data, len));
    }

    
    bool LoadStream(IStreamAdaptorBase *pstrm)
    {
        // need to prepend this as poxy MSHTML will not recognise a HTML comment
        // as starting a html document and treats it as plain text
        // Does nayone know how to force it to html mode ?
#if wxUSE_UNICODE
        // TODO: What to do in this case???
#else
        pstrm->prepend = _T("<html>");
#endif

        // strip leading whitespace as it can confuse MSHTML
        wxAutoOleInterface<IStream> strm(pstrm);

        // Document Interface
        IDispatch *pDisp = NULL;
        HRESULT hret = m_webBrowser->get_Document(&pDisp);
        if (! pDisp)
            return false;
        wxAutoOleInterface<IDispatch> disp(pDisp);


        // get IPersistStreamInit
        wxAutoOleInterface<IPersistStreamInit>
            pPersistStreamInit(IID_IPersistStreamInit, disp);

        if (pPersistStreamInit.Ok())
        {
            HRESULT hr = pPersistStreamInit->InitNew();
            if (SUCCEEDED(hr))
                hr = pPersistStreamInit->Load(strm);

            return SUCCEEDED(hr);
        }
        else
            return false;
    }

    bool LoadStream(wxInputStream *is)
    {
        // wrap reference around stream
        IwxStreamAdaptor *pstrm = new IwxStreamAdaptor(is);
        pstrm->AddRef();

        return LoadStream(pstrm);
    }

    
    wxString GetStringSelection(bool asHTML)
    {
        wxAutoOleInterface<IHTMLTxtRange> tr(wxieGetSelRange(m_oleObject));
        if (! tr)
            return wxEmptyString;

        BSTR text = NULL;
        HRESULT hr = E_FAIL;
    
        if (asHTML)
            hr = tr->get_htmlText(&text);
        else
            hr = tr->get_text(&text);
        if (hr != S_OK)
            return wxEmptyString;

        wxString s = text;
        SysFreeString(text);

        return s;
    };

    wxString GetText(bool asHTML)
    {
        if (! m_webBrowser.Ok())
            return wxEmptyString;

        // get document dispatch interface
        IDispatch *iDisp = NULL;
        HRESULT hr = m_webBrowser->get_Document(&iDisp);
        if (hr != S_OK)
            return wxEmptyString;

        // Query for Document Interface
        wxAutoOleInterface<IHTMLDocument2> hd(IID_IHTMLDocument2, iDisp);
        iDisp->Release();

        if (! hd.Ok())
            return wxEmptyString;

        // get body element
        IHTMLElement *_body = NULL;
        hd->get_body(&_body);
        if (! _body)
            return wxEmptyString;
        wxAutoOleInterface<IHTMLElement> body(_body);

        // get inner text
        BSTR text = NULL;
        hr = E_FAIL;
    
        if (asHTML)
            hr = body->get_innerHTML(&text);
        else
            hr = body->get_innerText(&text);
        if (hr != S_OK)
            return wxEmptyString;

        wxString s = text;
        SysFreeString(text);

        return s;   
    }


//     void wxIEHtmlWin::SetEditMode(bool seton)
//     {
//         m_bAmbientUserMode = ! seton;
//         AmbientPropertyChanged(DISPID_AMBIENT_USERMODE);
//     };

//     bool wxIEHtmlWin::GetEditMode()
//     {
//         return ! m_bAmbientUserMode;
//     };
};

IMPLEMENT_ABSTRACT_CLASS( wxIEHtmlWindowBase, wxActiveXWindow );



SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_CLSID(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    CLSID *result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "id", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_CLSID",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (CLSID *)new_CLSID((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CLSID, 1);
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_delete_CLSID(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    CLSID *arg1 = (CLSID *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_CLSID",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CLSID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        delete_CLSID(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CLSID_GetCLSIDString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    CLSID *arg1 = (CLSID *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:CLSID_GetCLSIDString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CLSID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = CLSID_GetCLSIDString(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CLSID_GetProgIDString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    CLSID *arg1 = (CLSID *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:CLSID_GetProgIDString",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CLSID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = CLSID_GetProgIDString(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CLSID_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CLSID, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ParamX_flags_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    USHORT result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_flags_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (USHORT) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_unsigned_SS_short(static_cast<unsigned short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_isPtr_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_isPtr_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->isPtr);
    
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_isSafeArray_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_isSafeArray_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->isSafeArray);
    
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_isOptional_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_isOptional_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->isOptional);
    
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_vt_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    VARTYPE result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_vt_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (VARTYPE) ((arg1)->vt);
    
    {
        resultobj = SWIG_From_unsigned_SS_short(static_cast<unsigned short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_name_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_name_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxString *)& ((arg1)->name);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_vt_type_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_vt_type_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = wxParamX_vt_type_get(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_IsIn(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_IsIn",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxParamX const *)arg1)->IsIn();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_IsOut(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_IsOut",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxParamX const *)arg1)->IsOut();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamX_IsRetVal(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamX *arg1 = (wxParamX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamX_IsRetVal",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxParamX const *)arg1)->IsRetVal();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ParamX_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxParamX, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_FuncX_name_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncX *arg1 = (wxFuncX *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FuncX_name_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxString *)& ((arg1)->name);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FuncX_memid_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncX *arg1 = (wxFuncX *) 0 ;
    MEMBERID result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FuncX_memid_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (MEMBERID) ((arg1)->memid);
    
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FuncX_hasOut_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncX *arg1 = (wxFuncX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FuncX_hasOut_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->hasOut);
    
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FuncX_retType_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncX *arg1 = (wxFuncX *) 0 ;
    wxParamX *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FuncX_retType_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxParamX *)& ((arg1)->retType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxParamX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FuncX_params_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncX *arg1 = (wxFuncX *) 0 ;
    wxParamXArray *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FuncX_params_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxParamXArray *)& ((arg1)->params);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxParamXArray, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FuncX_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFuncX, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PropX_name_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropX *arg1 = (wxPropX *) 0 ;
    wxString *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropX_name_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxString *)& ((arg1)->name);
    
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
        resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropX_memid_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropX *arg1 = (wxPropX *) 0 ;
    MEMBERID result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropX_memid_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (MEMBERID) ((arg1)->memid);
    
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropX_type_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropX *arg1 = (wxPropX *) 0 ;
    wxParamX *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropX_type_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxParamX *)& ((arg1)->type);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxParamX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropX_arg_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropX *arg1 = (wxPropX *) 0 ;
    wxParamX *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropX_arg_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (wxParamX *)& ((arg1)->arg);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxParamX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropX_putByRef_get(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropX *arg1 = (wxPropX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropX_putByRef_get",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->putByRef);
    
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropX_CanGet(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropX *arg1 = (wxPropX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropX_CanGet",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxPropX const *)arg1)->CanGet();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropX_CanSet(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropX *arg1 = (wxPropX *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropX_CanSet",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropX, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)((wxPropX const *)arg1)->CanSet();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PropX_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPropX, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ParamXArray___nonzero__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamXArray *arg1 = (wxParamXArray *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamXArray___nonzero__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxParamXArray___nonzero__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamXArray___len__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamXArray *arg1 = (wxParamXArray *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ParamXArray___len__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxParamXArray___len__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParamXArray___getitem__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxParamXArray *arg1 = (wxParamXArray *) 0 ;
    int arg2 ;
    wxParamX *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "idx", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ParamXArray___getitem__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxParamXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxParamX const &_result_ref = wxParamXArray___getitem__(arg1,arg2);
            result = (wxParamX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxParamX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ParamXArray_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxParamXArray, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_FuncXArray___nonzero__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncXArray *arg1 = (wxFuncXArray *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FuncXArray___nonzero__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxFuncXArray___nonzero__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FuncXArray___len__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncXArray *arg1 = (wxFuncXArray *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FuncXArray___len__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxFuncXArray___len__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FuncXArray___getitem__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxFuncXArray *arg1 = (wxFuncXArray *) 0 ;
    int arg2 ;
    wxFuncX *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "idx", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FuncXArray___getitem__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxFuncXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFuncX const &_result_ref = wxFuncXArray___getitem__(arg1,arg2);
            result = (wxFuncX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFuncX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FuncXArray_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxFuncXArray, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PropXArray___nonzero__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropXArray *arg1 = (wxPropXArray *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropXArray___nonzero__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)wxPropXArray___nonzero__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropXArray___len__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropXArray *arg1 = (wxPropXArray *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:PropXArray___len__",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)wxPropXArray___len__(arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PropXArray___getitem__(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxPropXArray *arg1 = (wxPropXArray *) 0 ;
    int arg2 ;
    wxPropX *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "idx", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PropXArray___getitem__",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxPropXArray, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPropX const &_result_ref = wxPropXArray___getitem__(arg1,arg2);
            result = (wxPropX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPropX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PropXArray_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxPropXArray, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ActiveXWindow(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    CLSID *arg2 = 0 ;
    int arg3 = (int) -1 ;
    wxPoint const &arg4_defvalue = wxDefaultPosition ;
    wxPoint *arg4 = (wxPoint *) &arg4_defvalue ;
    wxSize const &arg5_defvalue = wxDefaultSize ;
    wxSize *arg5 = (wxSize *) &arg5_defvalue ;
    long arg6 = (long) 0 ;
    wxString const &arg7_defvalue = wxPyPanelNameStr ;
    wxString *arg7 = (wxString *) &arg7_defvalue ;
    wxActiveXWindow *result;
    wxPoint temp4 ;
    wxSize temp5 ;
    bool temp7 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "parent",(char *) "clsId",(char *) "id",(char *) "pos",(char *) "size",(char *) "style",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOOO:new_ActiveXWindow",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CLSID, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("CLSID");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = &temp4;
            if ( ! wxPoint_helper(obj3, &arg4)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = &temp5;
            if ( ! wxSize_helper(obj4, &arg5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = static_cast<long >(SWIG_As_long(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = wxString_in_helper(obj6);
            if (arg7 == NULL) SWIG_fail;
            temp7 = true;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxActiveXWindow *)new wxActiveXWindow(arg1,(CLSID const &)*arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6,(wxString const &)*arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxActiveXWindow, 1);
    {
        if (temp7)
        delete arg7;
    }
    return resultobj;
    fail:
    {
        if (temp7)
        delete arg7;
    }
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetCLSID(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    CLSID *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXWindow_GetCLSID",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            CLSID const &_result_ref = ((wxActiveXWindow const *)arg1)->GetCLSID();
            result = (CLSID *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CLSID, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXEventCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXWindow_GetAXEventCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxActiveXWindow const *)arg1)->GetAXEventCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXEventDesc(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    int arg2 ;
    wxFuncX *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "idx", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ActiveXWindow_GetAXEventDesc",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFuncX const &_result_ref = ((wxActiveXWindow const *)arg1)->GetAXEventDesc(arg2);
            result = (wxFuncX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFuncX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXPropCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXWindow_GetAXPropCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxActiveXWindow const *)arg1)->GetAXPropCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXPropDesc__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    int arg2 ;
    wxPropX *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ActiveXWindow_GetAXPropDesc",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPropX const &_result_ref = ((wxActiveXWindow const *)arg1)->GetAXPropDesc(arg2);
            result = (wxPropX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPropX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXPropDesc__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxString *arg2 = 0 ;
    wxPropX *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ActiveXWindow_GetAXPropDesc",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPropX const &_result_ref = ((wxActiveXWindow const *)arg1)->GetAXPropDesc((wxString const &)*arg2);
            result = (wxPropX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPropX, 0);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXPropDesc(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxActiveXWindow, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
            }
            if (_v) {
                return _wrap_ActiveXWindow_GetAXPropDesc__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxActiveXWindow, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ActiveXWindow_GetAXPropDesc__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ActiveXWindow_GetAXPropDesc'");
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXMethodCount(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXWindow_GetAXMethodCount",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (int)((wxActiveXWindow const *)arg1)->GetAXMethodCount();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXMethodDesc__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    int arg2 ;
    wxFuncX *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ActiveXWindow_GetAXMethodDesc",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFuncX const &_result_ref = ((wxActiveXWindow const *)arg1)->GetAXMethodDesc(arg2);
            result = (wxFuncX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFuncX, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXMethodDesc__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxString *arg2 = 0 ;
    wxFuncX *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ActiveXWindow_GetAXMethodDesc",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFuncX const &_result_ref = ((wxActiveXWindow const *)arg1)->GetAXMethodDesc((wxString const &)*arg2);
            result = (wxFuncX *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFuncX, 0);
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXMethodDesc(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxActiveXWindow, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
            }
            if (_v) {
                return _wrap_ActiveXWindow_GetAXMethodDesc__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxActiveXWindow, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ActiveXWindow_GetAXMethodDesc__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ActiveXWindow_GetAXMethodDesc'");
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXEvents(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxFuncXArray *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXWindow_GetAXEvents",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFuncXArray const &_result_ref = (arg1)->GetAXEvents();
            result = (wxFuncXArray *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFuncXArray, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXMethods(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxFuncXArray *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXWindow_GetAXMethods",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxFuncXArray const &_result_ref = (arg1)->GetAXMethods();
            result = (wxFuncXArray *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxFuncXArray, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXProperties(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxPropXArray *result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXWindow_GetAXProperties",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        {
            wxPropXArray const &_result_ref = (arg1)->GetAXProperties();
            result = (wxPropXArray *) &_result_ref;
        }
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxPropXArray, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_SetAXProp(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxString *arg2 = 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name",(char *) "value", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ActiveXWindow_SetAXProp",kwnames,&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetAXProp((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ActiveXWindow_GetAXProp(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxString *arg2 = 0 ;
    PyObject *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ActiveXWindow_GetAXProp",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)(arg1)->GetAXProp((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_ActiveXWindow__CallAXMethod(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    wxActiveXWindow *arg1 = (wxActiveXWindow *) 0 ;
    wxString *arg2 = 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject *result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ActiveXWindow__CallAXMethod",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    arg3 = obj2;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (PyObject *)(arg1)->_CallAXMethod((wxString const &)*arg2,arg3);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = result;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject * ActiveXWindow_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxActiveXWindow, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_RegisterActiveXEvent(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxString *arg1 = 0 ;
    wxEventType result;
    bool temp1 = false ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "eventName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RegisterActiveXEvent",kwnames,&obj0)) goto fail;
    {
        arg1 = wxString_in_helper(obj0);
        if (arg1 == NULL) SWIG_fail;
        temp1 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxEventType)RegisterActiveXEvent((wxString const &)*arg1);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    {
        if (temp1)
        delete arg1;
    }
    return resultobj;
    fail:
    {
        if (temp1)
        delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_ActiveXEvent_EventName(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXEvent *arg1 = (wxActiveXEvent *) 0 ;
    wxString result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        (char *) "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ActiveXEvent_EventName",kwnames,&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->EventName();
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXEvent__preCallInit(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXEvent *arg1 = (wxActiveXEvent *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyself", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ActiveXEvent__preCallInit",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxActiveXEvent__preCallInit(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ActiveXEvent__postCallCleanup(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxActiveXEvent *arg1 = (wxActiveXEvent *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "pyself", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ActiveXEvent__postCallCleanup",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxActiveXEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        wxActiveXEvent__postCallCleanup(arg1,arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ActiveXEvent_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxActiveXEvent, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IEHtmlWindowBase(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxWindow *arg1 = (wxWindow *) 0 ;
    CLSID *arg2 = 0 ;
    int arg3 = (int) -1 ;
    wxPoint const &arg4_defvalue = wxDefaultPosition ;
    wxPoint *arg4 = (wxPoint *) &arg4_defvalue ;
    wxSize const &arg5_defvalue = wxDefaultSize ;
    wxSize *arg5 = (wxSize *) &arg5_defvalue ;
    long arg6 = (long) 0 ;
    wxString const &arg7_defvalue = wxPyPanelNameStr ;
    wxString *arg7 = (wxString *) &arg7_defvalue ;
    wxIEHtmlWindowBase *result;
    wxPoint temp4 ;
    wxSize temp5 ;
    bool temp7 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        (char *) "parent",(char *) "clsId",(char *) "id",(char *) "pos",(char *) "size",(char *) "style",(char *) "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOOO:new_IEHtmlWindowBase",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CLSID, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("CLSID");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (obj2) {
        {
            arg3 = static_cast<int >(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    if (obj3) {
        {
            arg4 = &temp4;
            if ( ! wxPoint_helper(obj3, &arg4)) SWIG_fail;
        }
    }
    if (obj4) {
        {
            arg5 = &temp5;
            if ( ! wxSize_helper(obj4, &arg5)) SWIG_fail;
        }
    }
    if (obj5) {
        {
            arg6 = static_cast<long >(SWIG_As_long(obj5)); 
            if (SWIG_arg_fail(6)) SWIG_fail;
        }
    }
    if (obj6) {
        {
            arg7 = wxString_in_helper(obj6);
            if (arg7 == NULL) SWIG_fail;
            temp7 = true;
        }
    }
    {
        if (!wxPyCheckForApp()) SWIG_fail;
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (wxIEHtmlWindowBase *)new wxIEHtmlWindowBase(arg1,(CLSID const &)*arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6,(wxString const &)*arg7);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_wxIEHtmlWindowBase, 1);
    {
        if (temp7)
        delete arg7;
    }
    return resultobj;
    fail:
    {
        if (temp7)
        delete arg7;
    }
    return NULL;
}


static PyObject *_wrap_IEHtmlWindowBase_SetCharset(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxIEHtmlWindowBase *arg1 = (wxIEHtmlWindowBase *) 0 ;
    wxString *arg2 = 0 ;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "charset", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IEHtmlWindowBase_SetCharset",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIEHtmlWindowBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        (arg1)->SetCharset((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_IEHtmlWindowBase_LoadString(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxIEHtmlWindowBase *arg1 = (wxIEHtmlWindowBase *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    bool temp2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "html", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IEHtmlWindowBase_LoadString",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIEHtmlWindowBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = wxString_in_helper(obj1);
        if (arg2 == NULL) SWIG_fail;
        temp2 = true;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->LoadString((wxString const &)*arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    {
        if (temp2)
        delete arg2;
    }
    return resultobj;
    fail:
    {
        if (temp2)
        delete arg2;
    }
    return NULL;
}


static PyObject *_wrap_IEHtmlWindowBase_LoadStream(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxIEHtmlWindowBase *arg1 = (wxIEHtmlWindowBase *) 0 ;
    wxInputStream *arg2 = (wxInputStream *) 0 ;
    bool result;
    wxPyInputStream *temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "is", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IEHtmlWindowBase_LoadStream",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIEHtmlWindowBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (wxPyConvertSwigPtr(obj1, (void **)&temp2, wxT("wxPyInputStream"))) {
            arg2 = wxPyCBInputStream_copy((wxPyCBInputStream*)temp2->m_wxis);
        } else {
            PyErr_Clear();  // clear the failure of the wxPyConvert above
            arg2 = wxPyCBInputStream_create(obj1, true);
            if (arg2 == NULL) {
                PyErr_SetString(PyExc_TypeError, "Expected wx.InputStream or Python file-like object.");
                SWIG_fail;
            }
        }
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (bool)(arg1)->LoadStream(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        resultobj = result ? Py_True : Py_False; Py_INCREF(resultobj);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IEHtmlWindowBase_GetStringSelection(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxIEHtmlWindowBase *arg1 = (wxIEHtmlWindowBase *) 0 ;
    bool arg2 ;
    wxString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "asHTML", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IEHtmlWindowBase_GetStringSelection",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIEHtmlWindowBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetStringSelection(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IEHtmlWindowBase_GetText(PyObject *, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj = NULL;
    wxIEHtmlWindowBase *arg1 = (wxIEHtmlWindowBase *) 0 ;
    bool arg2 ;
    wxString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        (char *) "self",(char *) "asHTML", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IEHtmlWindowBase_GetText",kwnames,&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_wxIEHtmlWindowBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        PyThreadState* __tstate = wxPyBeginAllowThreads();
        result = (arg1)->GetText(arg2);
        
        wxPyEndAllowThreads(__tstate);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
#if wxUSE_UNICODE
        resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
        resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IEHtmlWindowBase_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_wxIEHtmlWindowBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_CLSID", (PyCFunction) _wrap_new_CLSID, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_CLSID", (PyCFunction) _wrap_delete_CLSID, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CLSID_GetCLSIDString", (PyCFunction) _wrap_CLSID_GetCLSIDString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CLSID_GetProgIDString", (PyCFunction) _wrap_CLSID_GetProgIDString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CLSID_swigregister", CLSID_swigregister, METH_VARARGS, NULL},
	 { (char *)"ParamX_flags_get", (PyCFunction) _wrap_ParamX_flags_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_isPtr_get", (PyCFunction) _wrap_ParamX_isPtr_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_isSafeArray_get", (PyCFunction) _wrap_ParamX_isSafeArray_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_isOptional_get", (PyCFunction) _wrap_ParamX_isOptional_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_vt_get", (PyCFunction) _wrap_ParamX_vt_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_name_get", (PyCFunction) _wrap_ParamX_name_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_vt_type_get", (PyCFunction) _wrap_ParamX_vt_type_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_IsIn", (PyCFunction) _wrap_ParamX_IsIn, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_IsOut", (PyCFunction) _wrap_ParamX_IsOut, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_IsRetVal", (PyCFunction) _wrap_ParamX_IsRetVal, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamX_swigregister", ParamX_swigregister, METH_VARARGS, NULL},
	 { (char *)"FuncX_name_get", (PyCFunction) _wrap_FuncX_name_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncX_memid_get", (PyCFunction) _wrap_FuncX_memid_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncX_hasOut_get", (PyCFunction) _wrap_FuncX_hasOut_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncX_retType_get", (PyCFunction) _wrap_FuncX_retType_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncX_params_get", (PyCFunction) _wrap_FuncX_params_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncX_swigregister", FuncX_swigregister, METH_VARARGS, NULL},
	 { (char *)"PropX_name_get", (PyCFunction) _wrap_PropX_name_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropX_memid_get", (PyCFunction) _wrap_PropX_memid_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropX_type_get", (PyCFunction) _wrap_PropX_type_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropX_arg_get", (PyCFunction) _wrap_PropX_arg_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropX_putByRef_get", (PyCFunction) _wrap_PropX_putByRef_get, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropX_CanGet", (PyCFunction) _wrap_PropX_CanGet, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropX_CanSet", (PyCFunction) _wrap_PropX_CanSet, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropX_swigregister", PropX_swigregister, METH_VARARGS, NULL},
	 { (char *)"ParamXArray___nonzero__", (PyCFunction) _wrap_ParamXArray___nonzero__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamXArray___len__", (PyCFunction) _wrap_ParamXArray___len__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamXArray___getitem__", (PyCFunction) _wrap_ParamXArray___getitem__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ParamXArray_swigregister", ParamXArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"FuncXArray___nonzero__", (PyCFunction) _wrap_FuncXArray___nonzero__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncXArray___len__", (PyCFunction) _wrap_FuncXArray___len__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncXArray___getitem__", (PyCFunction) _wrap_FuncXArray___getitem__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FuncXArray_swigregister", FuncXArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"PropXArray___nonzero__", (PyCFunction) _wrap_PropXArray___nonzero__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropXArray___len__", (PyCFunction) _wrap_PropXArray___len__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropXArray___getitem__", (PyCFunction) _wrap_PropXArray___getitem__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PropXArray_swigregister", PropXArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ActiveXWindow", (PyCFunction) _wrap_new_ActiveXWindow, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetCLSID", (PyCFunction) _wrap_ActiveXWindow_GetCLSID, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXEventCount", (PyCFunction) _wrap_ActiveXWindow_GetAXEventCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXEventDesc", (PyCFunction) _wrap_ActiveXWindow_GetAXEventDesc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXPropCount", (PyCFunction) _wrap_ActiveXWindow_GetAXPropCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXPropDesc", _wrap_ActiveXWindow_GetAXPropDesc, METH_VARARGS, NULL},
	 { (char *)"ActiveXWindow_GetAXMethodCount", (PyCFunction) _wrap_ActiveXWindow_GetAXMethodCount, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXMethodDesc", _wrap_ActiveXWindow_GetAXMethodDesc, METH_VARARGS, NULL},
	 { (char *)"ActiveXWindow_GetAXEvents", (PyCFunction) _wrap_ActiveXWindow_GetAXEvents, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXMethods", (PyCFunction) _wrap_ActiveXWindow_GetAXMethods, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXProperties", (PyCFunction) _wrap_ActiveXWindow_GetAXProperties, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_SetAXProp", (PyCFunction) _wrap_ActiveXWindow_SetAXProp, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow_GetAXProp", (PyCFunction) _wrap_ActiveXWindow_GetAXProp, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXWindow__CallAXMethod", _wrap_ActiveXWindow__CallAXMethod, METH_VARARGS, NULL},
	 { (char *)"ActiveXWindow_swigregister", ActiveXWindow_swigregister, METH_VARARGS, NULL},
	 { (char *)"RegisterActiveXEvent", (PyCFunction) _wrap_RegisterActiveXEvent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXEvent_EventName", (PyCFunction) _wrap_ActiveXEvent_EventName, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXEvent__preCallInit", (PyCFunction) _wrap_ActiveXEvent__preCallInit, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXEvent__postCallCleanup", (PyCFunction) _wrap_ActiveXEvent__postCallCleanup, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ActiveXEvent_swigregister", ActiveXEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IEHtmlWindowBase", (PyCFunction) _wrap_new_IEHtmlWindowBase, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IEHtmlWindowBase_SetCharset", (PyCFunction) _wrap_IEHtmlWindowBase_SetCharset, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IEHtmlWindowBase_LoadString", (PyCFunction) _wrap_IEHtmlWindowBase_LoadString, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IEHtmlWindowBase_LoadStream", (PyCFunction) _wrap_IEHtmlWindowBase_LoadStream, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IEHtmlWindowBase_GetStringSelection", (PyCFunction) _wrap_IEHtmlWindowBase_GetStringSelection, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IEHtmlWindowBase_GetText", (PyCFunction) _wrap_IEHtmlWindowBase_GetText, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IEHtmlWindowBase_swigregister", IEHtmlWindowBase_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_wxControlTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxControl *) x));
}
static void *_p_wxControlWithItemsTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *) (wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxActiveXWindowTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxActiveXWindow *) x));
}
static void *_p_wxMenuBarTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *)  ((wxMenuBar *) x));
}
static void *_p_wxIEHtmlWindowBaseTo_p_wxWindow(void *x) {
    return (void *)((wxWindow *) (wxActiveXWindow *) ((wxIEHtmlWindowBase *) x));
}
static void *_p_wxIEHtmlWindowBaseTo_p_wxActiveXWindow(void *x) {
    return (void *)((wxActiveXWindow *)  ((wxIEHtmlWindowBase *) x));
}
static void *_p_wxContextMenuEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxContextMenuEvent *) x));
}
static void *_p_wxMenuEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMenuEvent *) x));
}
static void *_p_wxCloseEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxCloseEvent *) x));
}
static void *_p_wxMouseEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMouseEvent *) x));
}
static void *_p_wxEraseEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxEraseEvent *) x));
}
static void *_p_wxSetCursorEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxSetCursorEvent *) x));
}
static void *_p_wxInitDialogEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxInitDialogEvent *) x));
}
static void *_p_wxScrollEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxScrollEvent *) x));
}
static void *_p_wxPyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxPyEvent *) x));
}
static void *_p_wxNotifyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxNotifyEvent *) x));
}
static void *_p_wxIdleEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxIdleEvent *) x));
}
static void *_p_wxWindowCreateEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxWindowCreateEvent *) x));
}
static void *_p_wxQueryNewPaletteEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxQueryNewPaletteEvent *) x));
}
static void *_p_wxMaximizeEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMaximizeEvent *) x));
}
static void *_p_wxIconizeEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxIconizeEvent *) x));
}
static void *_p_wxActivateEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxActivateEvent *) x));
}
static void *_p_wxSizeEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxSizeEvent *) x));
}
static void *_p_wxMoveEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMoveEvent *) x));
}
static void *_p_wxDateEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxDateEvent *) x));
}
static void *_p_wxPaintEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxPaintEvent *) x));
}
static void *_p_wxNcPaintEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxNcPaintEvent *) x));
}
static void *_p_wxUpdateUIEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxUpdateUIEvent *) x));
}
static void *_p_wxPaletteChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxPaletteChangedEvent *) x));
}
static void *_p_wxDisplayChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxDisplayChangedEvent *) x));
}
static void *_p_wxMouseCaptureChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxMouseCaptureChangedEvent *) x));
}
static void *_p_wxSysColourChangedEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxSysColourChangedEvent *) x));
}
static void *_p_wxDropFilesEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxDropFilesEvent *) x));
}
static void *_p_wxFocusEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxFocusEvent *) x));
}
static void *_p_wxChildFocusEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxChildFocusEvent *) x));
}
static void *_p_wxActiveXEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxActiveXEvent *) x));
}
static void *_p_wxShowEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxShowEvent *) x));
}
static void *_p_wxCommandEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxCommandEvent *) x));
}
static void *_p_wxPyCommandEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxPyCommandEvent *) x));
}
static void *_p_wxWindowDestroyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *) (wxCommandEvent *) ((wxWindowDestroyEvent *) x));
}
static void *_p_wxNavigationKeyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxNavigationKeyEvent *) x));
}
static void *_p_wxKeyEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxKeyEvent *) x));
}
static void *_p_wxScrollWinEventTo_p_wxEvent(void *x) {
    return (void *)((wxEvent *)  ((wxScrollWinEvent *) x));
}
static void *_p_wxLayoutConstraintsTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxLayoutConstraints *) x));
}
static void *_p_wxGBSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizerItem *) ((wxGBSizerItem *) x));
}
static void *_p_wxSizerItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizerItem *) x));
}
static void *_p_wxScrollEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxScrollEvent *) x));
}
static void *_p_wxIndividualLayoutConstraintTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxIndividualLayoutConstraint *) x));
}
static void *_p_wxStaticBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxBoxSizer *) ((wxStaticBoxSizer *) x));
}
static void *_p_wxBoxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxBoxSizer *) x));
}
static void *_p_wxSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxSizer *) x));
}
static void *_p_wxGridBagSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *)(wxFlexGridSizer *) ((wxGridBagSizer *) x));
}
static void *_p_wxUpdateUIEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxUpdateUIEvent *) x));
}
static void *_p_wxEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvent *) x));
}
static void *_p_wxFlexGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxGridSizer *) ((wxFlexGridSizer *) x));
}
static void *_p_wxGridSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxGridSizer *) x));
}
static void *_p_wxInitDialogEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxInitDialogEvent *) x));
}
static void *_p_wxPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaintEvent *) x));
}
static void *_p_wxNcPaintEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNcPaintEvent *) x));
}
static void *_p_wxPaletteChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPaletteChangedEvent *) x));
}
static void *_p_wxDisplayChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDisplayChangedEvent *) x));
}
static void *_p_wxMouseCaptureChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseCaptureChangedEvent *) x));
}
static void *_p_wxSysColourChangedEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSysColourChangedEvent *) x));
}
static void *_p_wxControlTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxControl *) x));
}
static void *_p_wxSetCursorEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSetCursorEvent *) x));
}
static void *_p_wxFSFileTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFSFile *) x));
}
static void *_p_wxPySizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *) ((wxPySizer *) x));
}
static void *_p_wxPyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxPyEvent *) x));
}
static void *_p_wxNotifyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxNotifyEvent *) x));
}
static void *_p_wxShowEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxShowEvent *) x));
}
static void *_p_wxMenuItemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxMenuItem *) x));
}
static void *_p_wxDateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxDateEvent *) x));
}
static void *_p_wxIdleEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIdleEvent *) x));
}
static void *_p_wxWindowCreateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowCreateEvent *) x));
}
static void *_p_wxQueryNewPaletteEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxQueryNewPaletteEvent *) x));
}
static void *_p_wxMaximizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMaximizeEvent *) x));
}
static void *_p_wxIconizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxIconizeEvent *) x));
}
static void *_p_wxSizeEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxSizeEvent *) x));
}
static void *_p_wxMoveEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMoveEvent *) x));
}
static void *_p_wxActivateEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxActivateEvent *) x));
}
static void *_p_wxPNMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNMHandler *) x));
}
static void *_p_wxJPEGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxJPEGHandler *) x));
}
static void *_p_wxPCXHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPCXHandler *) x));
}
static void *_p_wxGIFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxGIFHandler *) x));
}
static void *_p_wxPNGHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPNGHandler *) x));
}
static void *_p_wxANIHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *)(wxCURHandler *) ((wxANIHandler *) x));
}
static void *_p_wxCURHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *)(wxICOHandler *) ((wxCURHandler *) x));
}
static void *_p_wxICOHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *)(wxBMPHandler *) ((wxICOHandler *) x));
}
static void *_p_wxBMPHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxBMPHandler *) x));
}
static void *_p_wxPyImageHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxPyImageHandler *) x));
}
static void *_p_wxImageHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImageHandler *) x));
}
static void *_p_wxXPMHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxXPMHandler *) x));
}
static void *_p_wxTIFFHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxImageHandler *) ((wxTIFFHandler *) x));
}
static void *_p_wxEvtHandlerTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxEvtHandler *) x));
}
static void *_p_wxStdDialogButtonSizerTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxSizer *)(wxBoxSizer *) ((wxStdDialogButtonSizer *) x));
}
static void *_p_wxAcceleratorTableTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxAcceleratorTable *) x));
}
static void *_p_wxImageTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxImage *) x));
}
static void *_p_wxScrollWinEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxScrollWinEvent *) x));
}
static void *_p_wxWindowDestroyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxWindowDestroyEvent *) x));
}
static void *_p_wxNavigationKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxNavigationKeyEvent *) x));
}
static void *_p_wxKeyEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxKeyEvent *) x));
}
static void *_p_wxWindowTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxWindow *) x));
}
static void *_p_wxMenuTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxMenu *) x));
}
static void *_p_wxMenuBarTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxMenuBar *) x));
}
static void *_p_wxActiveXWindowTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *) ((wxActiveXWindow *) x));
}
static void *_p_wxActiveXEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxActiveXEvent *) x));
}
static void *_p_wxFileSystemTo_p_wxObject(void *x) {
    return (void *)((wxObject *)  ((wxFileSystem *) x));
}
static void *_p_wxContextMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxContextMenuEvent *) x));
}
static void *_p_wxMenuEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMenuEvent *) x));
}
static void *_p_wxIEHtmlWindowBaseTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *)(wxActiveXWindow *) ((wxIEHtmlWindowBase *) x));
}
static void *_p_wxPyAppTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxPyApp *) x));
}
static void *_p_wxCloseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCloseEvent *) x));
}
static void *_p_wxMouseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxMouseEvent *) x));
}
static void *_p_wxEraseEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxEraseEvent *) x));
}
static void *_p_wxPyCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxPyCommandEvent *) x));
}
static void *_p_wxCommandEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxCommandEvent *) x));
}
static void *_p_wxDropFilesEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxDropFilesEvent *) x));
}
static void *_p_wxFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *) ((wxFocusEvent *) x));
}
static void *_p_wxChildFocusEventTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvent *)(wxCommandEvent *) ((wxChildFocusEvent *) x));
}
static void *_p_wxControlWithItemsTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxWindow *)(wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxPyValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *)(wxValidator *) ((wxPyValidator *) x));
}
static void *_p_wxValidatorTo_p_wxObject(void *x) {
    return (void *)((wxObject *) (wxEvtHandler *) ((wxValidator *) x));
}
static void *_p_wxControlTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *) ((wxControl *) x));
}
static void *_p_wxWindowTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxWindow *) x));
}
static void *_p_wxControlWithItemsTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *)(wxControl *) ((wxControlWithItems *) x));
}
static void *_p_wxActiveXWindowTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *) ((wxActiveXWindow *) x));
}
static void *_p_wxPyAppTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxPyApp *) x));
}
static void *_p_wxValidatorTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxValidator *) x));
}
static void *_p_wxPyValidatorTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxValidator *) ((wxPyValidator *) x));
}
static void *_p_wxMenuBarTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *) ((wxMenuBar *) x));
}
static void *_p_wxMenuTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxMenu *) x));
}
static void *_p_wxIEHtmlWindowBaseTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *) (wxWindow *)(wxActiveXWindow *) ((wxIEHtmlWindowBase *) x));
}
static void *_p_wxChildFocusEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxChildFocusEvent *) x));
}
static void *_p_wxScrollEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxScrollEvent *) x));
}
static void *_p_wxWindowCreateEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxWindowCreateEvent *) x));
}
static void *_p_wxDateEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxDateEvent *) x));
}
static void *_p_wxUpdateUIEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxUpdateUIEvent *) x));
}
static void *_p_wxActiveXEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxActiveXEvent *) x));
}
static void *_p_wxWindowDestroyEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxWindowDestroyEvent *) x));
}
static void *_p_wxContextMenuEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxContextMenuEvent *) x));
}
static void *_p_wxNotifyEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxNotifyEvent *) x));
}
static void *_p_wxPyCommandEventTo_p_wxCommandEvent(void *x) {
    return (void *)((wxCommandEvent *)  ((wxPyCommandEvent *) x));
}
static swig_type_info _swigt__p_CLSID = {"_p_CLSID", "CLSID *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_form_ops_t = {"_p_form_ops_t", "enum form_ops_t *|form_ops_t *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|wxEventType *", 0, 0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|MEMBERID *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|byte *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|time_t *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|wxUIntPtr *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|VARTYPE *", 0, 0, 0};
static swig_type_info _swigt__p_wxActiveXEvent = {"_p_wxActiveXEvent", "wxActiveXEvent *", 0, 0, 0};
static swig_type_info _swigt__p_wxActiveXWindow = {"_p_wxActiveXWindow", "wxActiveXWindow *", 0, 0, 0};
static swig_type_info _swigt__p_wxCommandEvent = {"_p_wxCommandEvent", "wxCommandEvent *", 0, 0, 0};
static swig_type_info _swigt__p_wxChildFocusEvent = {"_p_wxChildFocusEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxScrollEvent = {"_p_wxScrollEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxWindowCreateEvent = {"_p_wxWindowCreateEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxDateEvent = {"_p_wxDateEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxUpdateUIEvent = {"_p_wxUpdateUIEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxWindowDestroyEvent = {"_p_wxWindowDestroyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxContextMenuEvent = {"_p_wxContextMenuEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxNotifyEvent = {"_p_wxNotifyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyCommandEvent = {"_p_wxPyCommandEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxDuplexMode = {"_p_wxDuplexMode", "enum wxDuplexMode *|wxDuplexMode *", 0, 0, 0};
static swig_type_info _swigt__p_wxEvent = {"_p_wxEvent", "wxEvent *", 0, 0, 0};
static swig_type_info _swigt__p_wxMenuEvent = {"_p_wxMenuEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxCloseEvent = {"_p_wxCloseEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMouseEvent = {"_p_wxMouseEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxEraseEvent = {"_p_wxEraseEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSetCursorEvent = {"_p_wxSetCursorEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxInitDialogEvent = {"_p_wxInitDialogEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyEvent = {"_p_wxPyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxQueryNewPaletteEvent = {"_p_wxQueryNewPaletteEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxIdleEvent = {"_p_wxIdleEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMaximizeEvent = {"_p_wxMaximizeEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxIconizeEvent = {"_p_wxIconizeEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxActivateEvent = {"_p_wxActivateEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMoveEvent = {"_p_wxMoveEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSizeEvent = {"_p_wxSizeEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPaintEvent = {"_p_wxPaintEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxNcPaintEvent = {"_p_wxNcPaintEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPaletteChangedEvent = {"_p_wxPaletteChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxDisplayChangedEvent = {"_p_wxDisplayChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMouseCaptureChangedEvent = {"_p_wxMouseCaptureChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSysColourChangedEvent = {"_p_wxSysColourChangedEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxDropFilesEvent = {"_p_wxDropFilesEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFocusEvent = {"_p_wxFocusEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxShowEvent = {"_p_wxShowEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxNavigationKeyEvent = {"_p_wxNavigationKeyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxKeyEvent = {"_p_wxKeyEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxScrollWinEvent = {"_p_wxScrollWinEvent", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxEvtHandler = {"_p_wxEvtHandler", "wxEvtHandler *", 0, 0, 0};
static swig_type_info _swigt__p_wxControl = {"_p_wxControl", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxControlWithItems = {"_p_wxControlWithItems", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyApp = {"_p_wxPyApp", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMenuBar = {"_p_wxMenuBar", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxValidator = {"_p_wxValidator", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyValidator = {"_p_wxPyValidator", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMenu = {"_p_wxMenu", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFuncX = {"_p_wxFuncX", "wxFuncX *", 0, 0, 0};
static swig_type_info _swigt__p_wxFuncXArray = {"_p_wxFuncXArray", "wxFuncXArray *", 0, 0, 0};
static swig_type_info _swigt__p_wxIEHtmlWindowBase = {"_p_wxIEHtmlWindowBase", "wxIEHtmlWindowBase *", 0, 0, 0};
static swig_type_info _swigt__p_wxInputStream = {"_p_wxInputStream", "wxInputStream *", 0, 0, 0};
static swig_type_info _swigt__p_wxObject = {"_p_wxObject", "wxObject *", 0, 0, 0};
static swig_type_info _swigt__p_wxLayoutConstraints = {"_p_wxLayoutConstraints", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGBSizerItem = {"_p_wxGBSizerItem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSizerItem = {"_p_wxSizerItem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxIndividualLayoutConstraint = {"_p_wxIndividualLayoutConstraint", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxStaticBoxSizer = {"_p_wxStaticBoxSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxBoxSizer = {"_p_wxBoxSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxSizer = {"_p_wxSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGridBagSizer = {"_p_wxGridBagSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFlexGridSizer = {"_p_wxFlexGridSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGridSizer = {"_p_wxGridSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFSFile = {"_p_wxFSFile", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPySizer = {"_p_wxPySizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxMenuItem = {"_p_wxMenuItem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPCXHandler = {"_p_wxPCXHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxGIFHandler = {"_p_wxGIFHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPNGHandler = {"_p_wxPNGHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxANIHandler = {"_p_wxANIHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxCURHandler = {"_p_wxCURHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxICOHandler = {"_p_wxICOHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxBMPHandler = {"_p_wxBMPHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPyImageHandler = {"_p_wxPyImageHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxImageHandler = {"_p_wxImageHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxXPMHandler = {"_p_wxXPMHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxTIFFHandler = {"_p_wxTIFFHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxJPEGHandler = {"_p_wxJPEGHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPNMHandler = {"_p_wxPNMHandler", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxStdDialogButtonSizer = {"_p_wxStdDialogButtonSizer", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxAcceleratorTable = {"_p_wxAcceleratorTable", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxImage = {"_p_wxImage", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxFileSystem = {"_p_wxFileSystem", 0, 0, 0, 0};
static swig_type_info _swigt__p_wxPaperSize = {"_p_wxPaperSize", "enum wxPaperSize *|wxPaperSize *", 0, 0, 0};
static swig_type_info _swigt__p_wxParamX = {"_p_wxParamX", "wxParamX *", 0, 0, 0};
static swig_type_info _swigt__p_wxParamXArray = {"_p_wxParamXArray", "wxParamXArray *", 0, 0, 0};
static swig_type_info _swigt__p_wxPropX = {"_p_wxPropX", "wxPropX *", 0, 0, 0};
static swig_type_info _swigt__p_wxPropXArray = {"_p_wxPropXArray", "wxPropXArray *", 0, 0, 0};
static swig_type_info _swigt__p_wxWindow = {"_p_wxWindow", "wxWindow *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__unsigned_int = {"_unsigned_int", "unsigned int|std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CLSID,
  &_swigt__p_char,
  &_swigt__p_form_ops_t,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_wxANIHandler,
  &_swigt__p_wxAcceleratorTable,
  &_swigt__p_wxActivateEvent,
  &_swigt__p_wxActiveXEvent,
  &_swigt__p_wxActiveXWindow,
  &_swigt__p_wxBMPHandler,
  &_swigt__p_wxBoxSizer,
  &_swigt__p_wxCURHandler,
  &_swigt__p_wxChildFocusEvent,
  &_swigt__p_wxCloseEvent,
  &_swigt__p_wxCommandEvent,
  &_swigt__p_wxContextMenuEvent,
  &_swigt__p_wxControl,
  &_swigt__p_wxControlWithItems,
  &_swigt__p_wxDateEvent,
  &_swigt__p_wxDisplayChangedEvent,
  &_swigt__p_wxDropFilesEvent,
  &_swigt__p_wxDuplexMode,
  &_swigt__p_wxEraseEvent,
  &_swigt__p_wxEvent,
  &_swigt__p_wxEvtHandler,
  &_swigt__p_wxFSFile,
  &_swigt__p_wxFileSystem,
  &_swigt__p_wxFlexGridSizer,
  &_swigt__p_wxFocusEvent,
  &_swigt__p_wxFuncX,
  &_swigt__p_wxFuncXArray,
  &_swigt__p_wxGBSizerItem,
  &_swigt__p_wxGIFHandler,
  &_swigt__p_wxGridBagSizer,
  &_swigt__p_wxGridSizer,
  &_swigt__p_wxICOHandler,
  &_swigt__p_wxIEHtmlWindowBase,
  &_swigt__p_wxIconizeEvent,
  &_swigt__p_wxIdleEvent,
  &_swigt__p_wxImage,
  &_swigt__p_wxImageHandler,
  &_swigt__p_wxIndividualLayoutConstraint,
  &_swigt__p_wxInitDialogEvent,
  &_swigt__p_wxInputStream,
  &_swigt__p_wxJPEGHandler,
  &_swigt__p_wxKeyEvent,
  &_swigt__p_wxLayoutConstraints,
  &_swigt__p_wxMaximizeEvent,
  &_swigt__p_wxMenu,
  &_swigt__p_wxMenuBar,
  &_swigt__p_wxMenuEvent,
  &_swigt__p_wxMenuItem,
  &_swigt__p_wxMouseCaptureChangedEvent,
  &_swigt__p_wxMouseEvent,
  &_swigt__p_wxMoveEvent,
  &_swigt__p_wxNavigationKeyEvent,
  &_swigt__p_wxNcPaintEvent,
  &_swigt__p_wxNotifyEvent,
  &_swigt__p_wxObject,
  &_swigt__p_wxPCXHandler,
  &_swigt__p_wxPNGHandler,
  &_swigt__p_wxPNMHandler,
  &_swigt__p_wxPaintEvent,
  &_swigt__p_wxPaletteChangedEvent,
  &_swigt__p_wxPaperSize,
  &_swigt__p_wxParamX,
  &_swigt__p_wxParamXArray,
  &_swigt__p_wxPropX,
  &_swigt__p_wxPropXArray,
  &_swigt__p_wxPyApp,
  &_swigt__p_wxPyCommandEvent,
  &_swigt__p_wxPyEvent,
  &_swigt__p_wxPyImageHandler,
  &_swigt__p_wxPySizer,
  &_swigt__p_wxPyValidator,
  &_swigt__p_wxQueryNewPaletteEvent,
  &_swigt__p_wxScrollEvent,
  &_swigt__p_wxScrollWinEvent,
  &_swigt__p_wxSetCursorEvent,
  &_swigt__p_wxShowEvent,
  &_swigt__p_wxSizeEvent,
  &_swigt__p_wxSizer,
  &_swigt__p_wxSizerItem,
  &_swigt__p_wxStaticBoxSizer,
  &_swigt__p_wxStdDialogButtonSizer,
  &_swigt__p_wxSysColourChangedEvent,
  &_swigt__p_wxTIFFHandler,
  &_swigt__p_wxUpdateUIEvent,
  &_swigt__p_wxValidator,
  &_swigt__p_wxWindow,
  &_swigt__p_wxWindowCreateEvent,
  &_swigt__p_wxWindowDestroyEvent,
  &_swigt__p_wxXPMHandler,
  &_swigt__ptrdiff_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__unsigned_int,
};

static swig_cast_info _swigc__p_CLSID[] = {  {&_swigt__p_CLSID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_form_ops_t[] = {  {&_swigt__p_form_ops_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxActiveXEvent[] = {  {&_swigt__p_wxActiveXEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxActiveXWindow[] = {  {&_swigt__p_wxActiveXWindow, 0, 0, 0},  {&_swigt__p_wxIEHtmlWindowBase, _p_wxIEHtmlWindowBaseTo_p_wxActiveXWindow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxChildFocusEvent[] = {{&_swigt__p_wxChildFocusEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxScrollEvent[] = {{&_swigt__p_wxScrollEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowCreateEvent[] = {{&_swigt__p_wxWindowCreateEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDateEvent[] = {{&_swigt__p_wxDateEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxUpdateUIEvent[] = {{&_swigt__p_wxUpdateUIEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowDestroyEvent[] = {{&_swigt__p_wxWindowDestroyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxContextMenuEvent[] = {{&_swigt__p_wxContextMenuEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxNotifyEvent[] = {{&_swigt__p_wxNotifyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyCommandEvent[] = {{&_swigt__p_wxPyCommandEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCommandEvent[] = {  {&_swigt__p_wxChildFocusEvent, _p_wxChildFocusEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxScrollEvent, _p_wxScrollEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxWindowCreateEvent, _p_wxWindowCreateEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxDateEvent, _p_wxDateEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxUpdateUIEvent, _p_wxUpdateUIEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxActiveXEvent, _p_wxActiveXEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxWindowDestroyEvent, _p_wxWindowDestroyEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxContextMenuEvent, _p_wxContextMenuEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxCommandEvent, 0, 0, 0},  {&_swigt__p_wxNotifyEvent, _p_wxNotifyEventTo_p_wxCommandEvent, 0, 0},  {&_swigt__p_wxPyCommandEvent, _p_wxPyCommandEventTo_p_wxCommandEvent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDuplexMode[] = {  {&_swigt__p_wxDuplexMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenuEvent[] = {{&_swigt__p_wxMenuEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCloseEvent[] = {{&_swigt__p_wxCloseEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMouseEvent[] = {{&_swigt__p_wxMouseEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEraseEvent[] = {{&_swigt__p_wxEraseEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSetCursorEvent[] = {{&_swigt__p_wxSetCursorEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxInitDialogEvent[] = {{&_swigt__p_wxInitDialogEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyEvent[] = {{&_swigt__p_wxPyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxQueryNewPaletteEvent[] = {{&_swigt__p_wxQueryNewPaletteEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIdleEvent[] = {{&_swigt__p_wxIdleEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMaximizeEvent[] = {{&_swigt__p_wxMaximizeEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIconizeEvent[] = {{&_swigt__p_wxIconizeEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxActivateEvent[] = {{&_swigt__p_wxActivateEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMoveEvent[] = {{&_swigt__p_wxMoveEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizeEvent[] = {{&_swigt__p_wxSizeEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaintEvent[] = {{&_swigt__p_wxPaintEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxNcPaintEvent[] = {{&_swigt__p_wxNcPaintEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaletteChangedEvent[] = {{&_swigt__p_wxPaletteChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDisplayChangedEvent[] = {{&_swigt__p_wxDisplayChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMouseCaptureChangedEvent[] = {{&_swigt__p_wxMouseCaptureChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSysColourChangedEvent[] = {{&_swigt__p_wxSysColourChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDropFilesEvent[] = {{&_swigt__p_wxDropFilesEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFocusEvent[] = {{&_swigt__p_wxFocusEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxShowEvent[] = {{&_swigt__p_wxShowEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxNavigationKeyEvent[] = {{&_swigt__p_wxNavigationKeyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxKeyEvent[] = {{&_swigt__p_wxKeyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxScrollWinEvent[] = {{&_swigt__p_wxScrollWinEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEvent[] = {  {&_swigt__p_wxContextMenuEvent, _p_wxContextMenuEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMenuEvent, _p_wxMenuEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxCloseEvent, _p_wxCloseEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMouseEvent, _p_wxMouseEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxEraseEvent, _p_wxEraseEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxSetCursorEvent, _p_wxSetCursorEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxInitDialogEvent, _p_wxInitDialogEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxScrollEvent, _p_wxScrollEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPyEvent, _p_wxPyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxNotifyEvent, _p_wxNotifyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxEvent, 0, 0, 0},  {&_swigt__p_wxQueryNewPaletteEvent, _p_wxQueryNewPaletteEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxWindowCreateEvent, _p_wxWindowCreateEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxIdleEvent, _p_wxIdleEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMaximizeEvent, _p_wxMaximizeEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxIconizeEvent, _p_wxIconizeEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxActivateEvent, _p_wxActivateEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxDateEvent, _p_wxDateEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMoveEvent, _p_wxMoveEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxSizeEvent, _p_wxSizeEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPaintEvent, _p_wxPaintEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxNcPaintEvent, _p_wxNcPaintEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxUpdateUIEvent, _p_wxUpdateUIEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPaletteChangedEvent, _p_wxPaletteChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxDisplayChangedEvent, _p_wxDisplayChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxMouseCaptureChangedEvent, _p_wxMouseCaptureChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxSysColourChangedEvent, _p_wxSysColourChangedEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxActiveXEvent, _p_wxActiveXEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxDropFilesEvent, _p_wxDropFilesEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxFocusEvent, _p_wxFocusEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxChildFocusEvent, _p_wxChildFocusEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxShowEvent, _p_wxShowEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxCommandEvent, _p_wxCommandEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxPyCommandEvent, _p_wxPyCommandEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxWindowDestroyEvent, _p_wxWindowDestroyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxNavigationKeyEvent, _p_wxNavigationKeyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxKeyEvent, _p_wxKeyEventTo_p_wxEvent, 0, 0},  {&_swigt__p_wxScrollWinEvent, _p_wxScrollWinEventTo_p_wxEvent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxControl[] = {{&_swigt__p_wxControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxControlWithItems[] = {{&_swigt__p_wxControlWithItems, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyApp[] = {{&_swigt__p_wxPyApp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenuBar[] = {{&_swigt__p_wxMenuBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxValidator[] = {{&_swigt__p_wxValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyValidator[] = {{&_swigt__p_wxPyValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenu[] = {{&_swigt__p_wxMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEvtHandler[] = {  {&_swigt__p_wxControl, _p_wxControlTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxWindow, _p_wxWindowTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxControlWithItems, _p_wxControlWithItemsTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxActiveXWindow, _p_wxActiveXWindowTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxEvtHandler, 0, 0, 0},  {&_swigt__p_wxPyApp, _p_wxPyAppTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxMenuBar, _p_wxMenuBarTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxValidator, _p_wxValidatorTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxPyValidator, _p_wxPyValidatorTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxMenu, _p_wxMenuTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxIEHtmlWindowBase, _p_wxIEHtmlWindowBaseTo_p_wxEvtHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFuncX[] = {  {&_swigt__p_wxFuncX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFuncXArray[] = {  {&_swigt__p_wxFuncXArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIEHtmlWindowBase[] = {  {&_swigt__p_wxIEHtmlWindowBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxInputStream[] = {  {&_swigt__p_wxInputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLayoutConstraints[] = {{&_swigt__p_wxLayoutConstraints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGBSizerItem[] = {{&_swigt__p_wxGBSizerItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizerItem[] = {{&_swigt__p_wxSizerItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIndividualLayoutConstraint[] = {{&_swigt__p_wxIndividualLayoutConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStaticBoxSizer[] = {{&_swigt__p_wxStaticBoxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBoxSizer[] = {{&_swigt__p_wxBoxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizer[] = {{&_swigt__p_wxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGridBagSizer[] = {{&_swigt__p_wxGridBagSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFlexGridSizer[] = {{&_swigt__p_wxFlexGridSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGridSizer[] = {{&_swigt__p_wxGridSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFSFile[] = {{&_swigt__p_wxFSFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPySizer[] = {{&_swigt__p_wxPySizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenuItem[] = {{&_swigt__p_wxMenuItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPCXHandler[] = {{&_swigt__p_wxPCXHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGIFHandler[] = {{&_swigt__p_wxGIFHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPNGHandler[] = {{&_swigt__p_wxPNGHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxANIHandler[] = {{&_swigt__p_wxANIHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCURHandler[] = {{&_swigt__p_wxCURHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxICOHandler[] = {{&_swigt__p_wxICOHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBMPHandler[] = {{&_swigt__p_wxBMPHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPyImageHandler[] = {{&_swigt__p_wxPyImageHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxImageHandler[] = {{&_swigt__p_wxImageHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxXPMHandler[] = {{&_swigt__p_wxXPMHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTIFFHandler[] = {{&_swigt__p_wxTIFFHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxJPEGHandler[] = {{&_swigt__p_wxJPEGHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPNMHandler[] = {{&_swigt__p_wxPNMHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStdDialogButtonSizer[] = {{&_swigt__p_wxStdDialogButtonSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxAcceleratorTable[] = {{&_swigt__p_wxAcceleratorTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxImage[] = {{&_swigt__p_wxImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFileSystem[] = {{&_swigt__p_wxFileSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxObject[] = {  {&_swigt__p_wxLayoutConstraints, _p_wxLayoutConstraintsTo_p_wxObject, 0, 0},  {&_swigt__p_wxGBSizerItem, _p_wxGBSizerItemTo_p_wxObject, 0, 0},  {&_swigt__p_wxSizerItem, _p_wxSizerItemTo_p_wxObject, 0, 0},  {&_swigt__p_wxScrollEvent, _p_wxScrollEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxIndividualLayoutConstraint, _p_wxIndividualLayoutConstraintTo_p_wxObject, 0, 0},  {&_swigt__p_wxStaticBoxSizer, _p_wxStaticBoxSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxBoxSizer, _p_wxBoxSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxSizer, _p_wxSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxGridBagSizer, _p_wxGridBagSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxUpdateUIEvent, _p_wxUpdateUIEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenu, _p_wxMenuTo_p_wxObject, 0, 0},  {&_swigt__p_wxEvent, _p_wxEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxFlexGridSizer, _p_wxFlexGridSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxGridSizer, _p_wxGridSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxInitDialogEvent, _p_wxInitDialogEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxNcPaintEvent, _p_wxNcPaintEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPaintEvent, _p_wxPaintEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPaletteChangedEvent, _p_wxPaletteChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxDisplayChangedEvent, _p_wxDisplayChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMouseCaptureChangedEvent, _p_wxMouseCaptureChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxSysColourChangedEvent, _p_wxSysColourChangedEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxControl, _p_wxControlTo_p_wxObject, 0, 0},  {&_swigt__p_wxSetCursorEvent, _p_wxSetCursorEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxFSFile, _p_wxFSFileTo_p_wxObject, 0, 0},  {&_swigt__p_wxPySizer, _p_wxPySizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyEvent, _p_wxPyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxNotifyEvent, _p_wxNotifyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxShowEvent, _p_wxShowEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenuItem, _p_wxMenuItemTo_p_wxObject, 0, 0},  {&_swigt__p_wxDateEvent, _p_wxDateEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMoveEvent, _p_wxMoveEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxSizeEvent, _p_wxSizeEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxActivateEvent, _p_wxActivateEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxIconizeEvent, _p_wxIconizeEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMaximizeEvent, _p_wxMaximizeEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxIdleEvent, _p_wxIdleEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxWindowCreateEvent, _p_wxWindowCreateEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxQueryNewPaletteEvent, _p_wxQueryNewPaletteEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPCXHandler, _p_wxPCXHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxGIFHandler, _p_wxGIFHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPNGHandler, _p_wxPNGHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxANIHandler, _p_wxANIHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxCURHandler, _p_wxCURHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxICOHandler, _p_wxICOHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxBMPHandler, _p_wxBMPHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyImageHandler, _p_wxPyImageHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxImageHandler, _p_wxImageHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxXPMHandler, _p_wxXPMHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxTIFFHandler, _p_wxTIFFHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxEvtHandler, _p_wxEvtHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxJPEGHandler, _p_wxJPEGHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxPNMHandler, _p_wxPNMHandlerTo_p_wxObject, 0, 0},  {&_swigt__p_wxStdDialogButtonSizer, _p_wxStdDialogButtonSizerTo_p_wxObject, 0, 0},  {&_swigt__p_wxAcceleratorTable, _p_wxAcceleratorTableTo_p_wxObject, 0, 0},  {&_swigt__p_wxImage, _p_wxImageTo_p_wxObject, 0, 0},  {&_swigt__p_wxScrollWinEvent, _p_wxScrollWinEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxObject, 0, 0, 0},  {&_swigt__p_wxKeyEvent, _p_wxKeyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxNavigationKeyEvent, _p_wxNavigationKeyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxWindowDestroyEvent, _p_wxWindowDestroyEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxActiveXEvent, _p_wxActiveXEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxActiveXWindow, _p_wxActiveXWindowTo_p_wxObject, 0, 0},  {&_swigt__p_wxWindow, _p_wxWindowTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenuBar, _p_wxMenuBarTo_p_wxObject, 0, 0},  {&_swigt__p_wxFileSystem, _p_wxFileSystemTo_p_wxObject, 0, 0},  {&_swigt__p_wxIEHtmlWindowBase, _p_wxIEHtmlWindowBaseTo_p_wxObject, 0, 0},  {&_swigt__p_wxContextMenuEvent, _p_wxContextMenuEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMenuEvent, _p_wxMenuEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyApp, _p_wxPyAppTo_p_wxObject, 0, 0},  {&_swigt__p_wxCloseEvent, _p_wxCloseEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxMouseEvent, _p_wxMouseEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxEraseEvent, _p_wxEraseEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxCommandEvent, _p_wxCommandEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyCommandEvent, _p_wxPyCommandEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxDropFilesEvent, _p_wxDropFilesEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxFocusEvent, _p_wxFocusEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxChildFocusEvent, _p_wxChildFocusEventTo_p_wxObject, 0, 0},  {&_swigt__p_wxControlWithItems, _p_wxControlWithItemsTo_p_wxObject, 0, 0},  {&_swigt__p_wxPyValidator, _p_wxPyValidatorTo_p_wxObject, 0, 0},  {&_swigt__p_wxValidator, _p_wxValidatorTo_p_wxObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaperSize[] = {  {&_swigt__p_wxPaperSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxParamX[] = {  {&_swigt__p_wxParamX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxParamXArray[] = {  {&_swigt__p_wxParamXArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPropX[] = {  {&_swigt__p_wxPropX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPropXArray[] = {  {&_swigt__p_wxPropXArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindow[] = {  {&_swigt__p_wxControl, _p_wxControlTo_p_wxWindow, 0, 0},  {&_swigt__p_wxWindow, 0, 0, 0},  {&_swigt__p_wxControlWithItems, _p_wxControlWithItemsTo_p_wxWindow, 0, 0},  {&_swigt__p_wxActiveXWindow, _p_wxActiveXWindowTo_p_wxWindow, 0, 0},  {&_swigt__p_wxMenuBar, _p_wxMenuBarTo_p_wxWindow, 0, 0},  {&_swigt__p_wxIEHtmlWindowBase, _p_wxIEHtmlWindowBaseTo_p_wxWindow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__unsigned_int[] = {  {&_swigt__unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CLSID,
  _swigc__p_char,
  _swigc__p_form_ops_t,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
  _swigc__p_wxANIHandler,
  _swigc__p_wxAcceleratorTable,
  _swigc__p_wxActivateEvent,
  _swigc__p_wxActiveXEvent,
  _swigc__p_wxActiveXWindow,
  _swigc__p_wxBMPHandler,
  _swigc__p_wxBoxSizer,
  _swigc__p_wxCURHandler,
  _swigc__p_wxChildFocusEvent,
  _swigc__p_wxCloseEvent,
  _swigc__p_wxCommandEvent,
  _swigc__p_wxContextMenuEvent,
  _swigc__p_wxControl,
  _swigc__p_wxControlWithItems,
  _swigc__p_wxDateEvent,
  _swigc__p_wxDisplayChangedEvent,
  _swigc__p_wxDropFilesEvent,
  _swigc__p_wxDuplexMode,
  _swigc__p_wxEraseEvent,
  _swigc__p_wxEvent,
  _swigc__p_wxEvtHandler,
  _swigc__p_wxFSFile,
  _swigc__p_wxFileSystem,
  _swigc__p_wxFlexGridSizer,
  _swigc__p_wxFocusEvent,
  _swigc__p_wxFuncX,
  _swigc__p_wxFuncXArray,
  _swigc__p_wxGBSizerItem,
  _swigc__p_wxGIFHandler,
  _swigc__p_wxGridBagSizer,
  _swigc__p_wxGridSizer,
  _swigc__p_wxICOHandler,
  _swigc__p_wxIEHtmlWindowBase,
  _swigc__p_wxIconizeEvent,
  _swigc__p_wxIdleEvent,
  _swigc__p_wxImage,
  _swigc__p_wxImageHandler,
  _swigc__p_wxIndividualLayoutConstraint,
  _swigc__p_wxInitDialogEvent,
  _swigc__p_wxInputStream,
  _swigc__p_wxJPEGHandler,
  _swigc__p_wxKeyEvent,
  _swigc__p_wxLayoutConstraints,
  _swigc__p_wxMaximizeEvent,
  _swigc__p_wxMenu,
  _swigc__p_wxMenuBar,
  _swigc__p_wxMenuEvent,
  _swigc__p_wxMenuItem,
  _swigc__p_wxMouseCaptureChangedEvent,
  _swigc__p_wxMouseEvent,
  _swigc__p_wxMoveEvent,
  _swigc__p_wxNavigationKeyEvent,
  _swigc__p_wxNcPaintEvent,
  _swigc__p_wxNotifyEvent,
  _swigc__p_wxObject,
  _swigc__p_wxPCXHandler,
  _swigc__p_wxPNGHandler,
  _swigc__p_wxPNMHandler,
  _swigc__p_wxPaintEvent,
  _swigc__p_wxPaletteChangedEvent,
  _swigc__p_wxPaperSize,
  _swigc__p_wxParamX,
  _swigc__p_wxParamXArray,
  _swigc__p_wxPropX,
  _swigc__p_wxPropXArray,
  _swigc__p_wxPyApp,
  _swigc__p_wxPyCommandEvent,
  _swigc__p_wxPyEvent,
  _swigc__p_wxPyImageHandler,
  _swigc__p_wxPySizer,
  _swigc__p_wxPyValidator,
  _swigc__p_wxQueryNewPaletteEvent,
  _swigc__p_wxScrollEvent,
  _swigc__p_wxScrollWinEvent,
  _swigc__p_wxSetCursorEvent,
  _swigc__p_wxShowEvent,
  _swigc__p_wxSizeEvent,
  _swigc__p_wxSizer,
  _swigc__p_wxSizerItem,
  _swigc__p_wxStaticBoxSizer,
  _swigc__p_wxStdDialogButtonSizer,
  _swigc__p_wxSysColourChangedEvent,
  _swigc__p_wxTIFFHandler,
  _swigc__p_wxUpdateUIEvent,
  _swigc__p_wxValidator,
  _swigc__p_wxWindow,
  _swigc__p_wxWindowCreateEvent,
  _swigc__p_wxWindowDestroyEvent,
  _swigc__p_wxXPMHandler,
  _swigc__ptrdiff_t,
  _swigc__std__ptrdiff_t,
  _swigc__unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
    size_t i;
    swig_module_info *module_head;
    static int init_run = 0;
    
    clientdata = clientdata;
    
    if (init_run) return;
    init_run = 1;
    
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    
    /* Try and load any already created modules */
    module_head = SWIG_GetModule(clientdata);
    if (module_head) {
        swig_module.next = module_head->next;
        module_head->next = &swig_module;
    } else {
        /* This is the first module loaded */
        swig_module.next = &swig_module;
        SWIG_SetModule(clientdata, &swig_module);
    }
    
    /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
    for (i = 0; i < swig_module.size; ++i) {
        swig_type_info *type = 0;
        swig_type_info *ret;
        swig_cast_info *cast;
        
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
        
        /* if there is another module already loaded */
        if (swig_module.next != &swig_module) {
            type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
        }
        if (type) {
            /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
            printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
            if (swig_module.type_initial[i]->clientdata) {
                type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
                printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
            }
        } else {
            type = swig_module.type_initial[i];
        }
        
        /* Insert casting types */
        cast = swig_module.cast_initial[i];
        while (cast->type) {
            /* Don't need to add information already in the list */
            ret = 0;
#ifdef SWIGRUNTIME_DEBUG
            printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
            if (swig_module.next != &swig_module) {
                ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
                if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
            }
            if (ret) {
                if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
                    printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
                    cast->type = ret;
                    ret = 0;
                } else {
                    /* Check for casting already in the list */
                    swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
                    if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
                    if (!ocast) ret = 0;
                }
            }
            
            if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
                printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
                if (type->cast) {
                    type->cast->prev = cast;
                    cast->next = type->cast;
                }
                type->cast = cast;
            }
            cast++;
        }
        /* Set entry in modules->types array equal to the type */
        swig_module.types[i] = type;
    }
    swig_module.types[i] = 0;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("**** SWIG_InitializeModule: Cast List ******\n");
    for (i = 0; i < swig_module.size; ++i) {
        int j = 0;
        swig_cast_info *cast = swig_module.cast_initial[i];
        printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
        while (cast->type) {
            printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
            cast++;
            ++j;
        }
        printf("---- Total casts: %d\n",j);
    }
    printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
    size_t i;
    swig_cast_info *equiv;
    static int init_run = 0;
    
    if (init_run) return;
    init_run = 1;
    
    for (i = 0; i < swig_module.size; i++) {
        if (swig_module.types[i]->clientdata) {
            equiv = swig_module.types[i]->cast;
            while (equiv) {
                if (!equiv->converter) {
                    if (equiv->type && !equiv->type->clientdata)
                    SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                }
                equiv = equiv->next;
            }
        }
    }
}

#ifdef __cplusplus
#if 0
{
    /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
}

